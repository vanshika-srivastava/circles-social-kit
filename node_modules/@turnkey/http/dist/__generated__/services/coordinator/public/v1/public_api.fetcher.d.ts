import { TurnkeyCredentialRequestOptions } from "../../../../../base";
import type { operations } from "./public_api.types";
/**
 * `POST /public/v1/query/get_activity`
 */
export type TGetActivityResponse = operations["PublicApiService_GetActivity"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_activity`
 */
export type TGetActivityInput = {
    body: TGetActivityBody;
};
/**
 * `POST /public/v1/query/get_activity`
 */
export type TGetActivityBody = operations["PublicApiService_GetActivity"]["parameters"]["body"]["body"];
/**
 * Get Activity
 *
 * Get details about an Activity
 *
 * `POST /public/v1/query/get_activity`
 */
export declare const getActivity: (input: TGetActivityInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivity}
 */
export declare const signGetActivity: (input: TGetActivityInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_api_key`
 */
export type TGetApiKeyResponse = operations["PublicApiService_GetApiKey"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_api_key`
 */
export type TGetApiKeyInput = {
    body: TGetApiKeyBody;
};
/**
 * `POST /public/v1/query/get_api_key`
 */
export type TGetApiKeyBody = operations["PublicApiService_GetApiKey"]["parameters"]["body"]["body"];
/**
 * Get API key
 *
 * Get details about an API key
 *
 * `POST /public/v1/query/get_api_key`
 */
export declare const getApiKey: (input: TGetApiKeyInput) => Promise<{
    apiKey: {
        credential: {
            publicKey: string;
            type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
        };
        apiKeyId: string; /**
         * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
         *
         * See {@link ListPrivateKeyTags}
         */
        apiKeyName: string;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        expirationSeconds?: string;
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetApiKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKey}
 */
export declare const signGetApiKey: (input: TGetApiKeyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_api_keys`
 */
export type TGetApiKeysResponse = operations["PublicApiService_GetApiKeys"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_api_keys`
 */
export type TGetApiKeysInput = {
    body: TGetApiKeysBody;
};
/**
 * `POST /public/v1/query/get_api_keys`
 */
export type TGetApiKeysBody = operations["PublicApiService_GetApiKeys"]["parameters"]["body"]["body"];
/**
 * Get API key
 *
 * Get details about API keys for a user
 *
 * `POST /public/v1/query/get_api_keys`
 */
export declare const getApiKeys: (input: TGetApiKeysInput) => Promise<{
    apiKeys: {
        credential: {
            publicKey: string;
            type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
        };
        apiKeyId: string; /**
         * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
         *
         * See {@link ListPrivateKeyTags}
         */
        apiKeyName: string;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        expirationSeconds?: string;
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetApiKeys}
 */
export declare const signGetApiKeys: (input: TGetApiKeysInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_attestation`
 */
export type TGetAttestationDocumentResponse = operations["PublicApiService_GetAttestationDocument"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_attestation`
 */
export type TGetAttestationDocumentInput = {
    body: TGetAttestationDocumentBody;
};
/**
 * `POST /public/v1/query/get_attestation`
 */
export type TGetAttestationDocumentBody = operations["PublicApiService_GetAttestationDocument"]["parameters"]["body"]["body"];
/**
 * Attestation
 *
 * Get the attestation document corresponding to an enclave.
 *
 * `POST /public/v1/query/get_attestation`
 */
export declare const getAttestationDocument: (input: TGetAttestationDocumentInput) => Promise<{
    attestationDocument: string;
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetAttestationDocument` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAttestationDocument}
 */
export declare const signGetAttestationDocument: (input: TGetAttestationDocumentInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_authenticator`
 */
export type TGetAuthenticatorResponse = operations["PublicApiService_GetAuthenticator"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_authenticator`
 */
export type TGetAuthenticatorInput = {
    body: TGetAuthenticatorBody;
};
/**
 * `POST /public/v1/query/get_authenticator`
 */
export type TGetAuthenticatorBody = operations["PublicApiService_GetAuthenticator"]["parameters"]["body"]["body"];
/**
 * Get Authenticator
 *
 * Get details about an authenticator
 *
 * `POST /public/v1/query/get_authenticator`
 */
export declare const getAuthenticator: (input: TGetAuthenticatorInput) => Promise<{
    authenticator: {
        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
        attestationType: string;
        aaguid: string;
        credentialId: string;
        model: string;
        credential: {
            publicKey: string;
            type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
        };
        authenticatorId: string;
        authenticatorName: string;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticator` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticator}
 */
export declare const signGetAuthenticator: (input: TGetAuthenticatorInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_authenticators`
 */
export type TGetAuthenticatorsResponse = operations["PublicApiService_GetAuthenticators"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_authenticators`
 */
export type TGetAuthenticatorsInput = {
    body: TGetAuthenticatorsBody;
};
/**
 * `POST /public/v1/query/get_authenticators`
 */
export type TGetAuthenticatorsBody = operations["PublicApiService_GetAuthenticators"]["parameters"]["body"]["body"];
/**
 * Get Authenticators
 *
 * Get details about authenticators for a user
 *
 * `POST /public/v1/query/get_authenticators`
 */
export declare const getAuthenticators: (input: TGetAuthenticatorsInput) => Promise<{
    authenticators: {
        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
        attestationType: string;
        aaguid: string;
        credentialId: string;
        model: string;
        credential: {
            publicKey: string;
            type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
        };
        authenticatorId: string;
        authenticatorName: string;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetAuthenticators}
 */
export declare const signGetAuthenticators: (input: TGetAuthenticatorsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_oauth_providers`
 */
export type TGetOauthProvidersResponse = operations["PublicApiService_GetOauthProviders"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_oauth_providers`
 */
export type TGetOauthProvidersInput = {
    body: TGetOauthProvidersBody;
};
/**
 * `POST /public/v1/query/get_oauth_providers`
 */
export type TGetOauthProvidersBody = operations["PublicApiService_GetOauthProviders"]["parameters"]["body"]["body"];
/**
 * Get Oauth providers
 *
 * Get details about Oauth providers for a user
 *
 * `POST /public/v1/query/get_oauth_providers`
 */
export declare const getOauthProviders: (input: TGetOauthProvidersInput) => Promise<{
    /**
     * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.
     *
     * See {@link EmailAuth}
     */
    oauthProviders: {
        providerId: string;
        providerName: string;
        issuer: string;
        audience: string;
        subject: string;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOauthProviders}
 */
export declare const signGetOauthProviders: (input: TGetOauthProvidersInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_organization`
 */
export type TGetOrganizationResponse = operations["PublicApiService_GetOrganization"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_organization`
 */
export type TGetOrganizationInput = {
    body: TGetOrganizationBody;
};
/**
 * `POST /public/v1/query/get_organization`
 */
export type TGetOrganizationBody = operations["PublicApiService_GetOrganization"]["parameters"]["body"]["body"];
/**
 * Get Organization
 *
 * Get details about an Organization
 *
 * `POST /public/v1/query/get_organization`
 */
export declare const getOrganization: (input: TGetOrganizationInput) => Promise<{
    organizationData: {
        organizationId?: string;
        name?: string;
        users?: {
            userId: string;
            userName: string;
            userEmail?: string;
            authenticators: {
                transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                attestationType: string;
                aaguid: string;
                credentialId: string;
                model: string;
                credential: {
                    publicKey: string;
                    type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                };
                authenticatorId: string;
                authenticatorName: string;
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            }[];
            apiKeys: {
                credential: {
                    publicKey: string;
                    type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                };
                apiKeyId: string; /**
                 * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link ListPrivateKeyTags}
                 */
                apiKeyName: string;
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
                expirationSeconds?: string;
            }[];
            userTags: string[];
            oauthProviders: {
                providerId: string;
                providerName: string;
                issuer: string;
                audience: string;
                subject: string;
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            }[];
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        policies?: {
            policyId: string;
            policyName: string;
            effect: "EFFECT_ALLOW" | "EFFECT_DENY";
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
            notes: string;
            consensus: string;
            condition: string;
        }[];
        privateKeys?: {
            privateKeyId: string;
            publicKey: string;
            privateKeyName: string;
            curve: "CURVE_SECP256K1" | "CURVE_ED25519";
            addresses: {
                format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                address?: string;
            }[];
            privateKeyTags: string[];
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
            exported: boolean;
            imported: boolean;
        }[];
        invitations?: {
            invitationId: string;
            receiverUserName: string;
            receiverEmail: string;
            receiverUserTags: string[];
            accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
            status: "INVITATION_STATUS_CREATED" | "INVITATION_STATUS_ACCEPTED" | "INVITATION_STATUS_REVOKED";
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
            senderUserId: string;
        }[];
        tags?: {
            tagId: string;
            tagName: string;
            tagType: "TAG_TYPE_USER" | "TAG_TYPE_PRIVATE_KEY";
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        rootQuorum?: {
            threshold: number;
            userIds: string[];
        };
        features?: {
            name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            value?: string;
        }[];
        wallets?: {
            walletId: string;
            walletName: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
            exported: boolean;
            imported: boolean;
        }[];
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganization}
 */
export declare const signGetOrganization: (input: TGetOrganizationInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_organization_configs`
 */
export type TGetOrganizationConfigsResponse = operations["PublicApiService_GetOrganizationConfigs"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_organization_configs`
 */
export type TGetOrganizationConfigsInput = {
    body: TGetOrganizationConfigsBody;
};
/**
 * `POST /public/v1/query/get_organization_configs`
 */
export type TGetOrganizationConfigsBody = operations["PublicApiService_GetOrganizationConfigs"]["parameters"]["body"]["body"];
/**
 * Get Configs
 *
 * Get quorum settings and features for an organization
 *
 * `POST /public/v1/query/get_organization_configs`
 */
export declare const getOrganizationConfigs: (input: TGetOrganizationConfigsInput) => Promise<{
    configs: {
        features?: {
            name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            value?: string;
        }[];
        quorum?: {
            threshold: number;
            userIds: string[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetOrganizationConfigs` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetOrganizationConfigs}
 */
export declare const signGetOrganizationConfigs: (input: TGetOrganizationConfigsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_policy`
 */
export type TGetPolicyResponse = operations["PublicApiService_GetPolicy"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_policy`
 */
export type TGetPolicyInput = {
    body: TGetPolicyBody;
};
/**
 * `POST /public/v1/query/get_policy`
 */
export type TGetPolicyBody = operations["PublicApiService_GetPolicy"]["parameters"]["body"]["body"];
/**
 * Get Policy
 *
 * Get details about a Policy
 *
 * `POST /public/v1/query/get_policy`
 */
export declare const getPolicy: (input: TGetPolicyInput) => Promise<{
    policy: {
        policyId: string;
        policyName: string;
        effect: "EFFECT_ALLOW" | "EFFECT_DENY";
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        notes: string;
        consensus: string;
        condition: string;
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetPolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicy}
 */
export declare const signGetPolicy: (input: TGetPolicyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_private_key`
 */
export type TGetPrivateKeyResponse = operations["PublicApiService_GetPrivateKey"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_private_key`
 */
export type TGetPrivateKeyInput = {
    body: TGetPrivateKeyBody;
};
/**
 * `POST /public/v1/query/get_private_key`
 */
export type TGetPrivateKeyBody = operations["PublicApiService_GetPrivateKey"]["parameters"]["body"]["body"];
/**
 * Get Private Key
 *
 * Get details about a Private Key
 *
 * `POST /public/v1/query/get_private_key`
 */
export declare const getPrivateKey: (input: TGetPrivateKeyInput) => Promise<{
    privateKey: {
        privateKeyId: string;
        publicKey: string;
        privateKeyName: string;
        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
        addresses: {
            format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
            address?: string;
        }[];
        privateKeyTags: string[];
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        exported: boolean;
        imported: boolean;
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKey}
 */
export declare const signGetPrivateKey: (input: TGetPrivateKeyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_user`
 */
export type TGetUserResponse = operations["PublicApiService_GetUser"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_user`
 */
export type TGetUserInput = {
    body: TGetUserBody;
};
/**
 * `POST /public/v1/query/get_user`
 */
export type TGetUserBody = operations["PublicApiService_GetUser"]["parameters"]["body"]["body"];
/**
 * Get User
 *
 * Get details about a User
 *
 * `POST /public/v1/query/get_user`
 */
export declare const getUser: (input: TGetUserInput) => Promise<{
    user: {
        userId: string;
        userName: string;
        userEmail?: string;
        authenticators: {
            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
            attestationType: string;
            aaguid: string;
            credentialId: string;
            model: string;
            credential: {
                publicKey: string;
                type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
            };
            authenticatorId: string;
            authenticatorName: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        apiKeys: {
            credential: {
                publicKey: string;
                type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
            };
            apiKeyId: string; /**
             * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
             *
             * See {@link ListPrivateKeyTags}
             */
            apiKeyName: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
            expirationSeconds?: string;
        }[];
        userTags: string[];
        oauthProviders: {
            providerId: string;
            providerName: string;
            issuer: string;
            audience: string;
            subject: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUser}
 */
export declare const signGetUser: (input: TGetUserInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/get_wallet`
 */
export type TGetWalletResponse = operations["PublicApiService_GetWallet"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/get_wallet`
 */
export type TGetWalletInput = {
    body: TGetWalletBody;
};
/**
 * `POST /public/v1/query/get_wallet`
 */
export type TGetWalletBody = operations["PublicApiService_GetWallet"]["parameters"]["body"]["body"];
/**
 * Get Wallet
 *
 * Get details about a Wallet
 *
 * `POST /public/v1/query/get_wallet`
 */
export declare const getWallet: (input: TGetWalletInput) => Promise<{
    wallet: {
        walletId: string;
        walletName: string;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        exported: boolean;
        imported: boolean;
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallet}
 */
export declare const signGetWallet: (input: TGetWalletInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_activities`
 */
export type TGetActivitiesResponse = operations["PublicApiService_GetActivities"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_activities`
 */
export type TGetActivitiesInput = {
    body: TGetActivitiesBody;
};
/**
 * `POST /public/v1/query/list_activities`
 */
export type TGetActivitiesBody = operations["PublicApiService_GetActivities"]["parameters"]["body"]["body"];
/**
 * List Activities
 *
 * List all Activities within an Organization
 *
 * `POST /public/v1/query/list_activities`
 */
export declare const getActivities: (input: TGetActivitiesInput) => Promise<{
    activities: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetActivities` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetActivities}
 */
export declare const signGetActivities: (input: TGetActivitiesInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_policies`
 */
export type TGetPoliciesResponse = operations["PublicApiService_GetPolicies"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_policies`
 */
export type TGetPoliciesInput = {
    body: TGetPoliciesBody;
};
/**
 * `POST /public/v1/query/list_policies`
 */
export type TGetPoliciesBody = operations["PublicApiService_GetPolicies"]["parameters"]["body"]["body"];
/**
 * List Policies
 *
 * List all Policies within an Organization
 *
 * `POST /public/v1/query/list_policies`
 */
export declare const getPolicies: (input: TGetPoliciesInput) => Promise<{
    policies: {
        policyId: string;
        policyName: string;
        effect: "EFFECT_ALLOW" | "EFFECT_DENY";
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        notes: string;
        consensus: string;
        condition: string;
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetPolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPolicies}
 */
export declare const signGetPolicies: (input: TGetPoliciesInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_private_key_tags`
 */
export type TListPrivateKeyTagsResponse = operations["PublicApiService_ListPrivateKeyTags"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_private_key_tags`
 */
export type TListPrivateKeyTagsInput = {
    body: TListPrivateKeyTagsBody;
};
/**
 * `POST /public/v1/query/list_private_key_tags`
 */
export type TListPrivateKeyTagsBody = operations["PublicApiService_ListPrivateKeyTags"]["parameters"]["body"]["body"];
/**
 * List Private Key Tags
 *
 * List all Private Key Tags within an Organization
 *
 * `POST /public/v1/query/list_private_key_tags`
 */
export declare const listPrivateKeyTags: (input: TListPrivateKeyTagsInput) => Promise<{
    privateKeyTags: {
        tagId: string;
        tagName: string;
        tagType: "TAG_TYPE_USER" | "TAG_TYPE_PRIVATE_KEY";
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListPrivateKeyTags}
 */
export declare const signListPrivateKeyTags: (input: TListPrivateKeyTagsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_private_keys`
 */
export type TGetPrivateKeysResponse = operations["PublicApiService_GetPrivateKeys"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_private_keys`
 */
export type TGetPrivateKeysInput = {
    body: TGetPrivateKeysBody;
};
/**
 * `POST /public/v1/query/list_private_keys`
 */
export type TGetPrivateKeysBody = operations["PublicApiService_GetPrivateKeys"]["parameters"]["body"]["body"];
/**
 * List Private Keys
 *
 * List all Private Keys within an Organization
 *
 * `POST /public/v1/query/list_private_keys`
 */
export declare const getPrivateKeys: (input: TGetPrivateKeysInput) => Promise<{
    privateKeys: {
        privateKeyId: string;
        publicKey: string;
        privateKeyName: string;
        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
        addresses: {
            format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
            address?: string;
        }[];
        privateKeyTags: string[];
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        exported: boolean;
        imported: boolean;
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetPrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetPrivateKeys}
 */
export declare const signGetPrivateKeys: (input: TGetPrivateKeysInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_suborgs`
 */
export type TGetSubOrgIdsResponse = operations["PublicApiService_GetSubOrgIds"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_suborgs`
 */
export type TGetSubOrgIdsInput = {
    body: TGetSubOrgIdsBody;
};
/**
 * `POST /public/v1/query/list_suborgs`
 */
export type TGetSubOrgIdsBody = operations["PublicApiService_GetSubOrgIds"]["parameters"]["body"]["body"];
/**
 * Get Suborgs
 *
 * Get all suborg IDs associated given a parent org ID and an optional filter.
 *
 * `POST /public/v1/query/list_suborgs`
 */
export declare const getSubOrgIds: (input: TGetSubOrgIdsInput) => Promise<{
    organizationIds: string[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetSubOrgIds` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetSubOrgIds}
 */
export declare const signGetSubOrgIds: (input: TGetSubOrgIdsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_user_tags`
 */
export type TListUserTagsResponse = operations["PublicApiService_ListUserTags"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_user_tags`
 */
export type TListUserTagsInput = {
    body: TListUserTagsBody;
};
/**
 * `POST /public/v1/query/list_user_tags`
 */
export type TListUserTagsBody = operations["PublicApiService_ListUserTags"]["parameters"]["body"]["body"];
/**
 * List User Tags
 *
 * List all User Tags within an Organization
 *
 * `POST /public/v1/query/list_user_tags`
 */
export declare const listUserTags: (input: TListUserTagsInput) => Promise<{
    userTags: {
        tagId: string;
        tagName: string;
        tagType: "TAG_TYPE_USER" | "TAG_TYPE_PRIVATE_KEY";
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `ListUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link ListUserTags}
 */
export declare const signListUserTags: (input: TListUserTagsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_users`
 */
export type TGetUsersResponse = operations["PublicApiService_GetUsers"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_users`
 */
export type TGetUsersInput = {
    body: TGetUsersBody;
};
/**
 * `POST /public/v1/query/list_users`
 */
export type TGetUsersBody = operations["PublicApiService_GetUsers"]["parameters"]["body"]["body"];
/**
 * List Users
 *
 * List all Users within an Organization
 *
 * `POST /public/v1/query/list_users`
 */
export declare const getUsers: (input: TGetUsersInput) => Promise<{
    users: {
        userId: string;
        userName: string;
        userEmail?: string;
        authenticators: {
            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
            attestationType: string;
            aaguid: string;
            credentialId: string;
            model: string;
            credential: {
                publicKey: string;
                type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
            };
            authenticatorId: string;
            authenticatorName: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        apiKeys: {
            credential: {
                publicKey: string;
                type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
            };
            apiKeyId: string; /**
             * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
             *
             * See {@link ListPrivateKeyTags}
             */
            apiKeyName: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
            expirationSeconds?: string;
        }[];
        userTags: string[];
        oauthProviders: {
            providerId: string;
            providerName: string;
            issuer: string;
            audience: string;
            subject: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
            updatedAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetUsers}
 */
export declare const signGetUsers: (input: TGetUsersInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_wallet_accounts`
 */
export type TGetWalletAccountsResponse = operations["PublicApiService_GetWalletAccounts"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_wallet_accounts`
 */
export type TGetWalletAccountsInput = {
    body: TGetWalletAccountsBody;
};
/**
 * `POST /public/v1/query/list_wallet_accounts`
 */
export type TGetWalletAccountsBody = operations["PublicApiService_GetWalletAccounts"]["parameters"]["body"]["body"];
/**
 * List Wallets Accounts
 *
 * List all Accounts wirhin a Wallet
 *
 * `POST /public/v1/query/list_wallet_accounts`
 */
export declare const getWalletAccounts: (input: TGetWalletAccountsInput) => Promise<{
    accounts: {
        organizationId: string;
        walletId: string;
        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
        pathFormat: "PATH_FORMAT_BIP32";
        path: string;
        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
        address: string;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWalletAccounts}
 */
export declare const signGetWalletAccounts: (input: TGetWalletAccountsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/list_wallets`
 */
export type TGetWalletsResponse = operations["PublicApiService_GetWallets"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/list_wallets`
 */
export type TGetWalletsInput = {
    body: TGetWalletsBody;
};
/**
 * `POST /public/v1/query/list_wallets`
 */
export type TGetWalletsBody = operations["PublicApiService_GetWallets"]["parameters"]["body"]["body"];
/**
 * List Wallets
 *
 * List all Wallets within an Organization
 *
 * `POST /public/v1/query/list_wallets`
 */
export declare const getWallets: (input: TGetWalletsInput) => Promise<{
    wallets: {
        walletId: string;
        walletName: string;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        exported: boolean;
        imported: boolean;
    }[];
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetWallets` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWallets}
 */
export declare const signGetWallets: (input: TGetWalletsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/query/whoami`
 */
export type TGetWhoamiResponse = operations["PublicApiService_GetWhoami"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/query/whoami`
 */
export type TGetWhoamiInput = {
    body: TGetWhoamiBody;
};
/**
 * `POST /public/v1/query/whoami`
 */
export type TGetWhoamiBody = operations["PublicApiService_GetWhoami"]["parameters"]["body"]["body"];
/**
 * Who am I?
 *
 * Get basic information about your current API or WebAuthN user and their organization. Affords Sub-Organization look ups via Parent Organization for WebAuthN or API key users.
 *
 * `POST /public/v1/query/whoami`
 */
export declare const getWhoami: (input: TGetWhoamiInput) => Promise<{
    organizationId: string;
    organizationName: string;
    userId: string;
    username: string;
}>;
/**
 * Request a WebAuthn assertion and return a signed `GetWhoami` request, ready to be POSTed to Turnkey.
 *
 * See {@link GetWhoami}
 */
export declare const signGetWhoami: (input: TGetWhoamiInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/approve_activity`
 */
export type TApproveActivityResponse = operations["PublicApiService_ApproveActivity"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/approve_activity`
 */
export type TApproveActivityInput = {
    body: TApproveActivityBody;
};
/**
 * `POST /public/v1/submit/approve_activity`
 */
export type TApproveActivityBody = operations["PublicApiService_ApproveActivity"]["parameters"]["body"]["body"];
/**
 * Approve Activity
 *
 * Approve an Activity
 *
 * `POST /public/v1/submit/approve_activity`
 */
export declare const approveActivity: (input: TApproveActivityInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `ApproveActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link ApproveActivity}
 */
export declare const signApproveActivity: (input: TApproveActivityInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_api_keys`
 */
export type TCreateApiKeysResponse = operations["PublicApiService_CreateApiKeys"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_api_keys`
 */
export type TCreateApiKeysInput = {
    body: TCreateApiKeysBody;
};
/**
 * `POST /public/v1/submit/create_api_keys`
 */
export type TCreateApiKeysBody = operations["PublicApiService_CreateApiKeys"]["parameters"]["body"]["body"];
/**
 * Create API Keys
 *
 * Add api keys to an existing User
 *
 * `POST /public/v1/submit/create_api_keys`
 */
export declare const createApiKeys: (input: TCreateApiKeysInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiKeys}
 */
export declare const signCreateApiKeys: (input: TCreateApiKeysInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_api_only_users`
 */
export type TCreateApiOnlyUsersResponse = operations["PublicApiService_CreateApiOnlyUsers"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_api_only_users`
 */
export type TCreateApiOnlyUsersInput = {
    body: TCreateApiOnlyUsersBody;
};
/**
 * `POST /public/v1/submit/create_api_only_users`
 */
export type TCreateApiOnlyUsersBody = operations["PublicApiService_CreateApiOnlyUsers"]["parameters"]["body"]["body"];
/**
 * Create API-only Users
 *
 * Create API-only Users in an existing Organization
 *
 * `POST /public/v1/submit/create_api_only_users`
 */
export declare const createApiOnlyUsers: (input: TCreateApiOnlyUsersInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateApiOnlyUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateApiOnlyUsers}
 */
export declare const signCreateApiOnlyUsers: (input: TCreateApiOnlyUsersInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_authenticators`
 */
export type TCreateAuthenticatorsResponse = operations["PublicApiService_CreateAuthenticators"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_authenticators`
 */
export type TCreateAuthenticatorsInput = {
    body: TCreateAuthenticatorsBody;
};
/**
 * `POST /public/v1/submit/create_authenticators`
 */
export type TCreateAuthenticatorsBody = operations["PublicApiService_CreateAuthenticators"]["parameters"]["body"]["body"];
/**
 * Create Authenticators
 *
 * Create Authenticators to authenticate requests to Turnkey
 *
 * `POST /public/v1/submit/create_authenticators`
 */
export declare const createAuthenticators: (input: TCreateAuthenticatorsInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateAuthenticators}
 */
export declare const signCreateAuthenticators: (input: TCreateAuthenticatorsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_invitations`
 */
export type TCreateInvitationsResponse = operations["PublicApiService_CreateInvitations"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_invitations`
 */
export type TCreateInvitationsInput = {
    body: TCreateInvitationsBody;
};
/**
 * `POST /public/v1/submit/create_invitations`
 */
export type TCreateInvitationsBody = operations["PublicApiService_CreateInvitations"]["parameters"]["body"]["body"];
/**
 * Create Invitations
 *
 * Create Invitations to join an existing Organization
 *
 * `POST /public/v1/submit/create_invitations`
 */
export declare const createInvitations: (input: TCreateInvitationsInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateInvitations` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateInvitations}
 */
export declare const signCreateInvitations: (input: TCreateInvitationsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_oauth_providers`
 */
export type TCreateOauthProvidersResponse = operations["PublicApiService_CreateOauthProviders"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_oauth_providers`
 */
export type TCreateOauthProvidersInput = {
    body: TCreateOauthProvidersBody;
};
/**
 * `POST /public/v1/submit/create_oauth_providers`
 */
export type TCreateOauthProvidersBody = operations["PublicApiService_CreateOauthProviders"]["parameters"]["body"]["body"];
/**
 * Create Oauth Providers
 *
 * Creates Oauth providers for a specified user - BETA
 *
 * `POST /public/v1/submit/create_oauth_providers`
 */
export declare const createOauthProviders: (input: TCreateOauthProvidersInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateOauthProviders}
 */
export declare const signCreateOauthProviders: (input: TCreateOauthProvidersInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_policies`
 */
export type TCreatePoliciesResponse = operations["PublicApiService_CreatePolicies"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_policies`
 */
export type TCreatePoliciesInput = {
    body: TCreatePoliciesBody;
};
/**
 * `POST /public/v1/submit/create_policies`
 */
export type TCreatePoliciesBody = operations["PublicApiService_CreatePolicies"]["parameters"]["body"]["body"];
/**
 * Create Policies
 *
 * Create new Policies
 *
 * `POST /public/v1/submit/create_policies`
 */
export declare const createPolicies: (input: TCreatePoliciesInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicies` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicies}
 */
export declare const signCreatePolicies: (input: TCreatePoliciesInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_policy`
 */
export type TCreatePolicyResponse = operations["PublicApiService_CreatePolicy"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_policy`
 */
export type TCreatePolicyInput = {
    body: TCreatePolicyBody;
};
/**
 * `POST /public/v1/submit/create_policy`
 */
export type TCreatePolicyBody = operations["PublicApiService_CreatePolicy"]["parameters"]["body"]["body"];
/**
 * Create Policy
 *
 * Create a new Policy
 *
 * `POST /public/v1/submit/create_policy`
 */
export declare const createPolicy: (input: TCreatePolicyInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePolicy}
 */
export declare const signCreatePolicy: (input: TCreatePolicyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_private_key_tag`
 */
export type TCreatePrivateKeyTagResponse = operations["PublicApiService_CreatePrivateKeyTag"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_private_key_tag`
 */
export type TCreatePrivateKeyTagInput = {
    body: TCreatePrivateKeyTagBody;
};
/**
 * `POST /public/v1/submit/create_private_key_tag`
 */
export type TCreatePrivateKeyTagBody = operations["PublicApiService_CreatePrivateKeyTag"]["parameters"]["body"]["body"];
/**
 * Create Private Key Tag
 *
 * Create a private key tag and add it to private keys.
 *
 * `POST /public/v1/submit/create_private_key_tag`
 */
export declare const createPrivateKeyTag: (input: TCreatePrivateKeyTagInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeyTag}
 */
export declare const signCreatePrivateKeyTag: (input: TCreatePrivateKeyTagInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_private_keys`
 */
export type TCreatePrivateKeysResponse = operations["PublicApiService_CreatePrivateKeys"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_private_keys`
 */
export type TCreatePrivateKeysInput = {
    body: TCreatePrivateKeysBody;
};
/**
 * `POST /public/v1/submit/create_private_keys`
 */
export type TCreatePrivateKeysBody = operations["PublicApiService_CreatePrivateKeys"]["parameters"]["body"]["body"];
/**
 * Create Private Keys
 *
 * Create new Private Keys
 *
 * `POST /public/v1/submit/create_private_keys`
 */
export declare const createPrivateKeys: (input: TCreatePrivateKeysInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreatePrivateKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreatePrivateKeys}
 */
export declare const signCreatePrivateKeys: (input: TCreatePrivateKeysInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_read_only_session`
 */
export type TCreateReadOnlySessionResponse = operations["PublicApiService_CreateReadOnlySession"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_read_only_session`
 */
export type TCreateReadOnlySessionInput = {
    body: TCreateReadOnlySessionBody;
};
/**
 * `POST /public/v1/submit/create_read_only_session`
 */
export type TCreateReadOnlySessionBody = operations["PublicApiService_CreateReadOnlySession"]["parameters"]["body"]["body"];
/**
 * Create Read Only Session
 *
 * Create a read only session for a user (valid for 1 hour)
 *
 * `POST /public/v1/submit/create_read_only_session`
 */
export declare const createReadOnlySession: (input: TCreateReadOnlySessionInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateReadOnlySession` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateReadOnlySession}
 */
export declare const signCreateReadOnlySession: (input: TCreateReadOnlySessionInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_read_write_session`
 */
export type TCreateReadWriteSessionResponse = operations["PublicApiService_CreateReadWriteSession"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_read_write_session`
 */
export type TCreateReadWriteSessionInput = {
    body: TCreateReadWriteSessionBody;
};
/**
 * `POST /public/v1/submit/create_read_write_session`
 */
export type TCreateReadWriteSessionBody = operations["PublicApiService_CreateReadWriteSession"]["parameters"]["body"]["body"];
/**
 * Create Read Write Session
 *
 * Create a read write session for a user
 *
 * `POST /public/v1/submit/create_read_write_session`
 */
export declare const createReadWriteSession: (input: TCreateReadWriteSessionInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateReadWriteSession` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateReadWriteSession}
 */
export declare const signCreateReadWriteSession: (input: TCreateReadWriteSessionInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_sub_organization`
 */
export type TCreateSubOrganizationResponse = operations["PublicApiService_CreateSubOrganization"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_sub_organization`
 */
export type TCreateSubOrganizationInput = {
    body: TCreateSubOrganizationBody;
};
/**
 * `POST /public/v1/submit/create_sub_organization`
 */
export type TCreateSubOrganizationBody = operations["PublicApiService_CreateSubOrganization"]["parameters"]["body"]["body"];
/**
 * Create Sub-Organization
 *
 * Create a new Sub-Organization
 *
 * `POST /public/v1/submit/create_sub_organization`
 */
export declare const createSubOrganization: (input: TCreateSubOrganizationInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateSubOrganization` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateSubOrganization}
 */
export declare const signCreateSubOrganization: (input: TCreateSubOrganizationInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_user_tag`
 */
export type TCreateUserTagResponse = operations["PublicApiService_CreateUserTag"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_user_tag`
 */
export type TCreateUserTagInput = {
    body: TCreateUserTagBody;
};
/**
 * `POST /public/v1/submit/create_user_tag`
 */
export type TCreateUserTagBody = operations["PublicApiService_CreateUserTag"]["parameters"]["body"]["body"];
/**
 * Create User Tag
 *
 * Create a user tag and add it to users.
 *
 * `POST /public/v1/submit/create_user_tag`
 */
export declare const createUserTag: (input: TCreateUserTagInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUserTag}
 */
export declare const signCreateUserTag: (input: TCreateUserTagInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_users`
 */
export type TCreateUsersResponse = operations["PublicApiService_CreateUsers"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_users`
 */
export type TCreateUsersInput = {
    body: TCreateUsersBody;
};
/**
 * `POST /public/v1/submit/create_users`
 */
export type TCreateUsersBody = operations["PublicApiService_CreateUsers"]["parameters"]["body"]["body"];
/**
 * Create Users
 *
 * Create Users in an existing Organization
 *
 * `POST /public/v1/submit/create_users`
 */
export declare const createUsers: (input: TCreateUsersInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateUsers}
 */
export declare const signCreateUsers: (input: TCreateUsersInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_wallet`
 */
export type TCreateWalletResponse = operations["PublicApiService_CreateWallet"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_wallet`
 */
export type TCreateWalletInput = {
    body: TCreateWalletBody;
};
/**
 * `POST /public/v1/submit/create_wallet`
 */
export type TCreateWalletBody = operations["PublicApiService_CreateWallet"]["parameters"]["body"]["body"];
/**
 * Create Wallet
 *
 * Create a Wallet and derive addresses
 *
 * `POST /public/v1/submit/create_wallet`
 */
export declare const createWallet: (input: TCreateWalletInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWallet}
 */
export declare const signCreateWallet: (input: TCreateWalletInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/create_wallet_accounts`
 */
export type TCreateWalletAccountsResponse = operations["PublicApiService_CreateWalletAccounts"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/create_wallet_accounts`
 */
export type TCreateWalletAccountsInput = {
    body: TCreateWalletAccountsBody;
};
/**
 * `POST /public/v1/submit/create_wallet_accounts`
 */
export type TCreateWalletAccountsBody = operations["PublicApiService_CreateWalletAccounts"]["parameters"]["body"]["body"];
/**
 * Create Wallet Accounts
 *
 * Derive additional addresses using an existing wallet
 *
 * `POST /public/v1/submit/create_wallet_accounts`
 */
export declare const createWalletAccounts: (input: TCreateWalletAccountsInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `CreateWalletAccounts` request, ready to be POSTed to Turnkey.
 *
 * See {@link CreateWalletAccounts}
 */
export declare const signCreateWalletAccounts: (input: TCreateWalletAccountsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/delete_api_keys`
 */
export type TDeleteApiKeysResponse = operations["PublicApiService_DeleteApiKeys"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/delete_api_keys`
 */
export type TDeleteApiKeysInput = {
    body: TDeleteApiKeysBody;
};
/**
 * `POST /public/v1/submit/delete_api_keys`
 */
export type TDeleteApiKeysBody = operations["PublicApiService_DeleteApiKeys"]["parameters"]["body"]["body"];
/**
 * Delete API Keys
 *
 * Remove api keys from a User
 *
 * `POST /public/v1/submit/delete_api_keys`
 */
export declare const deleteApiKeys: (input: TDeleteApiKeysInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `DeleteApiKeys` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteApiKeys}
 */
export declare const signDeleteApiKeys: (input: TDeleteApiKeysInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/delete_authenticators`
 */
export type TDeleteAuthenticatorsResponse = operations["PublicApiService_DeleteAuthenticators"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/delete_authenticators`
 */
export type TDeleteAuthenticatorsInput = {
    body: TDeleteAuthenticatorsBody;
};
/**
 * `POST /public/v1/submit/delete_authenticators`
 */
export type TDeleteAuthenticatorsBody = operations["PublicApiService_DeleteAuthenticators"]["parameters"]["body"]["body"];
/**
 * Delete Authenticators
 *
 * Remove authenticators from a User
 *
 * `POST /public/v1/submit/delete_authenticators`
 */
export declare const deleteAuthenticators: (input: TDeleteAuthenticatorsInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `DeleteAuthenticators` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteAuthenticators}
 */
export declare const signDeleteAuthenticators: (input: TDeleteAuthenticatorsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/delete_invitation`
 */
export type TDeleteInvitationResponse = operations["PublicApiService_DeleteInvitation"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/delete_invitation`
 */
export type TDeleteInvitationInput = {
    body: TDeleteInvitationBody;
};
/**
 * `POST /public/v1/submit/delete_invitation`
 */
export type TDeleteInvitationBody = operations["PublicApiService_DeleteInvitation"]["parameters"]["body"]["body"];
/**
 * Delete Invitation
 *
 * Delete an existing Invitation
 *
 * `POST /public/v1/submit/delete_invitation`
 */
export declare const deleteInvitation: (input: TDeleteInvitationInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `DeleteInvitation` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteInvitation}
 */
export declare const signDeleteInvitation: (input: TDeleteInvitationInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/delete_oauth_providers`
 */
export type TDeleteOauthProvidersResponse = operations["PublicApiService_DeleteOauthProviders"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/delete_oauth_providers`
 */
export type TDeleteOauthProvidersInput = {
    body: TDeleteOauthProvidersBody;
};
/**
 * `POST /public/v1/submit/delete_oauth_providers`
 */
export type TDeleteOauthProvidersBody = operations["PublicApiService_DeleteOauthProviders"]["parameters"]["body"]["body"];
/**
 * Delete Oauth Providers
 *
 * Removes Oauth providers for a specified user - BETA
 *
 * `POST /public/v1/submit/delete_oauth_providers`
 */
export declare const deleteOauthProviders: (input: TDeleteOauthProvidersInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `DeleteOauthProviders` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteOauthProviders}
 */
export declare const signDeleteOauthProviders: (input: TDeleteOauthProvidersInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/delete_policy`
 */
export type TDeletePolicyResponse = operations["PublicApiService_DeletePolicy"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/delete_policy`
 */
export type TDeletePolicyInput = {
    body: TDeletePolicyBody;
};
/**
 * `POST /public/v1/submit/delete_policy`
 */
export type TDeletePolicyBody = operations["PublicApiService_DeletePolicy"]["parameters"]["body"]["body"];
/**
 * Delete Policy
 *
 * Delete an existing Policy
 *
 * `POST /public/v1/submit/delete_policy`
 */
export declare const deletePolicy: (input: TDeletePolicyInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `DeletePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePolicy}
 */
export declare const signDeletePolicy: (input: TDeletePolicyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/delete_private_key_tags`
 */
export type TDeletePrivateKeyTagsResponse = operations["PublicApiService_DeletePrivateKeyTags"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/delete_private_key_tags`
 */
export type TDeletePrivateKeyTagsInput = {
    body: TDeletePrivateKeyTagsBody;
};
/**
 * `POST /public/v1/submit/delete_private_key_tags`
 */
export type TDeletePrivateKeyTagsBody = operations["PublicApiService_DeletePrivateKeyTags"]["parameters"]["body"]["body"];
/**
 * Delete Private Key Tags
 *
 * Delete Private Key Tags within an Organization
 *
 * `POST /public/v1/submit/delete_private_key_tags`
 */
export declare const deletePrivateKeyTags: (input: TDeletePrivateKeyTagsInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `DeletePrivateKeyTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeletePrivateKeyTags}
 */
export declare const signDeletePrivateKeyTags: (input: TDeletePrivateKeyTagsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/delete_user_tags`
 */
export type TDeleteUserTagsResponse = operations["PublicApiService_DeleteUserTags"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/delete_user_tags`
 */
export type TDeleteUserTagsInput = {
    body: TDeleteUserTagsBody;
};
/**
 * `POST /public/v1/submit/delete_user_tags`
 */
export type TDeleteUserTagsBody = operations["PublicApiService_DeleteUserTags"]["parameters"]["body"]["body"];
/**
 * Delete User Tags
 *
 * Delete User Tags within an Organization
 *
 * `POST /public/v1/submit/delete_user_tags`
 */
export declare const deleteUserTags: (input: TDeleteUserTagsInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `DeleteUserTags` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteUserTags}
 */
export declare const signDeleteUserTags: (input: TDeleteUserTagsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/delete_users`
 */
export type TDeleteUsersResponse = operations["PublicApiService_DeleteUsers"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/delete_users`
 */
export type TDeleteUsersInput = {
    body: TDeleteUsersBody;
};
/**
 * `POST /public/v1/submit/delete_users`
 */
export type TDeleteUsersBody = operations["PublicApiService_DeleteUsers"]["parameters"]["body"]["body"];
/**
 * Delete Users
 *
 * Delete Users within an Organization
 *
 * `POST /public/v1/submit/delete_users`
 */
export declare const deleteUsers: (input: TDeleteUsersInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `DeleteUsers` request, ready to be POSTed to Turnkey.
 *
 * See {@link DeleteUsers}
 */
export declare const signDeleteUsers: (input: TDeleteUsersInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/email_auth`
 */
export type TEmailAuthResponse = operations["PublicApiService_EmailAuth"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/email_auth`
 */
export type TEmailAuthInput = {
    body: TEmailAuthBody;
};
/**
 * `POST /public/v1/submit/email_auth`
 */
export type TEmailAuthBody = operations["PublicApiService_EmailAuth"]["parameters"]["body"]["body"];
/**
 * Perform Email Auth
 *
 * Authenticate a user via Email
 *
 * `POST /public/v1/submit/email_auth`
 */
export declare const emailAuth: (input: TEmailAuthInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `EmailAuth` request, ready to be POSTed to Turnkey.
 *
 * See {@link EmailAuth}
 */
export declare const signEmailAuth: (input: TEmailAuthInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/export_private_key`
 */
export type TExportPrivateKeyResponse = operations["PublicApiService_ExportPrivateKey"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/export_private_key`
 */
export type TExportPrivateKeyInput = {
    body: TExportPrivateKeyBody;
};
/**
 * `POST /public/v1/submit/export_private_key`
 */
export type TExportPrivateKeyBody = operations["PublicApiService_ExportPrivateKey"]["parameters"]["body"]["body"];
/**
 * Export Private Key
 *
 * Exports a Private Key
 *
 * `POST /public/v1/submit/export_private_key`
 */
export declare const exportPrivateKey: (input: TExportPrivateKeyInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `ExportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportPrivateKey}
 */
export declare const signExportPrivateKey: (input: TExportPrivateKeyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/export_wallet`
 */
export type TExportWalletResponse = operations["PublicApiService_ExportWallet"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/export_wallet`
 */
export type TExportWalletInput = {
    body: TExportWalletBody;
};
/**
 * `POST /public/v1/submit/export_wallet`
 */
export type TExportWalletBody = operations["PublicApiService_ExportWallet"]["parameters"]["body"]["body"];
/**
 * Export Wallet
 *
 * Exports a Wallet
 *
 * `POST /public/v1/submit/export_wallet`
 */
export declare const exportWallet: (input: TExportWalletInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `ExportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWallet}
 */
export declare const signExportWallet: (input: TExportWalletInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/export_wallet_account`
 */
export type TExportWalletAccountResponse = operations["PublicApiService_ExportWalletAccount"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/export_wallet_account`
 */
export type TExportWalletAccountInput = {
    body: TExportWalletAccountBody;
};
/**
 * `POST /public/v1/submit/export_wallet_account`
 */
export type TExportWalletAccountBody = operations["PublicApiService_ExportWalletAccount"]["parameters"]["body"]["body"];
/**
 * Export Wallet Account
 *
 * Exports a Wallet Account
 *
 * `POST /public/v1/submit/export_wallet_account`
 */
export declare const exportWalletAccount: (input: TExportWalletAccountInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `ExportWalletAccount` request, ready to be POSTed to Turnkey.
 *
 * See {@link ExportWalletAccount}
 */
export declare const signExportWalletAccount: (input: TExportWalletAccountInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/import_private_key`
 */
export type TImportPrivateKeyResponse = operations["PublicApiService_ImportPrivateKey"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/import_private_key`
 */
export type TImportPrivateKeyInput = {
    body: TImportPrivateKeyBody;
};
/**
 * `POST /public/v1/submit/import_private_key`
 */
export type TImportPrivateKeyBody = operations["PublicApiService_ImportPrivateKey"]["parameters"]["body"]["body"];
/**
 * Import Private Key
 *
 * Imports a private key
 *
 * `POST /public/v1/submit/import_private_key`
 */
export declare const importPrivateKey: (input: TImportPrivateKeyInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `ImportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link ImportPrivateKey}
 */
export declare const signImportPrivateKey: (input: TImportPrivateKeyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/import_wallet`
 */
export type TImportWalletResponse = operations["PublicApiService_ImportWallet"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/import_wallet`
 */
export type TImportWalletInput = {
    body: TImportWalletBody;
};
/**
 * `POST /public/v1/submit/import_wallet`
 */
export type TImportWalletBody = operations["PublicApiService_ImportWallet"]["parameters"]["body"]["body"];
/**
 * Import Wallet
 *
 * Imports a wallet
 *
 * `POST /public/v1/submit/import_wallet`
 */
export declare const importWallet: (input: TImportWalletInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `ImportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link ImportWallet}
 */
export declare const signImportWallet: (input: TImportWalletInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/init_import_private_key`
 */
export type TInitImportPrivateKeyResponse = operations["PublicApiService_InitImportPrivateKey"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/init_import_private_key`
 */
export type TInitImportPrivateKeyInput = {
    body: TInitImportPrivateKeyBody;
};
/**
 * `POST /public/v1/submit/init_import_private_key`
 */
export type TInitImportPrivateKeyBody = operations["PublicApiService_InitImportPrivateKey"]["parameters"]["body"]["body"];
/**
 * Init Import Private Key
 *
 * Initializes a new private key import
 *
 * `POST /public/v1/submit/init_import_private_key`
 */
export declare const initImportPrivateKey: (input: TInitImportPrivateKeyInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `InitImportPrivateKey` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitImportPrivateKey}
 */
export declare const signInitImportPrivateKey: (input: TInitImportPrivateKeyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/init_import_wallet`
 */
export type TInitImportWalletResponse = operations["PublicApiService_InitImportWallet"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/init_import_wallet`
 */
export type TInitImportWalletInput = {
    body: TInitImportWalletBody;
};
/**
 * `POST /public/v1/submit/init_import_wallet`
 */
export type TInitImportWalletBody = operations["PublicApiService_InitImportWallet"]["parameters"]["body"]["body"];
/**
 * Init Import Wallet
 *
 * Initializes a new wallet import
 *
 * `POST /public/v1/submit/init_import_wallet`
 */
export declare const initImportWallet: (input: TInitImportWalletInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `InitImportWallet` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitImportWallet}
 */
export declare const signInitImportWallet: (input: TInitImportWalletInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/init_user_email_recovery`
 */
export type TInitUserEmailRecoveryResponse = operations["PublicApiService_InitUserEmailRecovery"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/init_user_email_recovery`
 */
export type TInitUserEmailRecoveryInput = {
    body: TInitUserEmailRecoveryBody;
};
/**
 * `POST /public/v1/submit/init_user_email_recovery`
 */
export type TInitUserEmailRecoveryBody = operations["PublicApiService_InitUserEmailRecovery"]["parameters"]["body"]["body"];
/**
 * Init Email Recovery
 *
 * Initializes a new email recovery
 *
 * `POST /public/v1/submit/init_user_email_recovery`
 */
export declare const initUserEmailRecovery: (input: TInitUserEmailRecoveryInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `InitUserEmailRecovery` request, ready to be POSTed to Turnkey.
 *
 * See {@link InitUserEmailRecovery}
 */
export declare const signInitUserEmailRecovery: (input: TInitUserEmailRecoveryInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/oauth`
 */
export type TOauthResponse = operations["PublicApiService_Oauth"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/oauth`
 */
export type TOauthInput = {
    body: TOauthBody;
};
/**
 * `POST /public/v1/submit/oauth`
 */
export type TOauthBody = operations["PublicApiService_Oauth"]["parameters"]["body"]["body"];
/**
 * Oauth
 *
 * Authenticate a user with an Oidc token (Oauth) - BETA
 *
 * `POST /public/v1/submit/oauth`
 */
export declare const oauth: (input: TOauthInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `Oauth` request, ready to be POSTed to Turnkey.
 *
 * See {@link Oauth}
 */
export declare const signOauth: (input: TOauthInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/recover_user`
 */
export type TRecoverUserResponse = operations["PublicApiService_RecoverUser"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/recover_user`
 */
export type TRecoverUserInput = {
    body: TRecoverUserBody;
};
/**
 * `POST /public/v1/submit/recover_user`
 */
export type TRecoverUserBody = operations["PublicApiService_RecoverUser"]["parameters"]["body"]["body"];
/**
 * Recover a user
 *
 * Completes the process of recovering a user by adding an authenticator
 *
 * `POST /public/v1/submit/recover_user`
 */
export declare const recoverUser: (input: TRecoverUserInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `RecoverUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link RecoverUser}
 */
export declare const signRecoverUser: (input: TRecoverUserInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/reject_activity`
 */
export type TRejectActivityResponse = operations["PublicApiService_RejectActivity"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/reject_activity`
 */
export type TRejectActivityInput = {
    body: TRejectActivityBody;
};
/**
 * `POST /public/v1/submit/reject_activity`
 */
export type TRejectActivityBody = operations["PublicApiService_RejectActivity"]["parameters"]["body"]["body"];
/**
 * Reject Activity
 *
 * Reject an Activity
 *
 * `POST /public/v1/submit/reject_activity`
 */
export declare const rejectActivity: (input: TRejectActivityInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `RejectActivity` request, ready to be POSTed to Turnkey.
 *
 * See {@link RejectActivity}
 */
export declare const signRejectActivity: (input: TRejectActivityInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/remove_organization_feature`
 */
export type TRemoveOrganizationFeatureResponse = operations["PublicApiService_RemoveOrganizationFeature"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/remove_organization_feature`
 */
export type TRemoveOrganizationFeatureInput = {
    body: TRemoveOrganizationFeatureBody;
};
/**
 * `POST /public/v1/submit/remove_organization_feature`
 */
export type TRemoveOrganizationFeatureBody = operations["PublicApiService_RemoveOrganizationFeature"]["parameters"]["body"]["body"];
/**
 * Remove Organization Feature
 *
 * Removes an organization feature
 *
 * `POST /public/v1/submit/remove_organization_feature`
 */
export declare const removeOrganizationFeature: (input: TRemoveOrganizationFeatureInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `RemoveOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link RemoveOrganizationFeature}
 */
export declare const signRemoveOrganizationFeature: (input: TRemoveOrganizationFeatureInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/set_organization_feature`
 */
export type TSetOrganizationFeatureResponse = operations["PublicApiService_SetOrganizationFeature"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/set_organization_feature`
 */
export type TSetOrganizationFeatureInput = {
    body: TSetOrganizationFeatureBody;
};
/**
 * `POST /public/v1/submit/set_organization_feature`
 */
export type TSetOrganizationFeatureBody = operations["PublicApiService_SetOrganizationFeature"]["parameters"]["body"]["body"];
/**
 * Set Organization Feature
 *
 * Sets an organization feature
 *
 * `POST /public/v1/submit/set_organization_feature`
 */
export declare const setOrganizationFeature: (input: TSetOrganizationFeatureInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `SetOrganizationFeature` request, ready to be POSTed to Turnkey.
 *
 * See {@link SetOrganizationFeature}
 */
export declare const signSetOrganizationFeature: (input: TSetOrganizationFeatureInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
export type TSignRawPayloadResponse = operations["PublicApiService_SignRawPayload"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
export type TSignRawPayloadInput = {
    body: TSignRawPayloadBody;
};
/**
 * `POST /public/v1/submit/sign_raw_payload`
 */
export type TSignRawPayloadBody = operations["PublicApiService_SignRawPayload"]["parameters"]["body"]["body"];
/**
 * Sign Raw Payload
 *
 * Sign a raw payload
 *
 * `POST /public/v1/submit/sign_raw_payload`
 */
export declare const signRawPayload: (input: TSignRawPayloadInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayload` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayload}
 */
export declare const signSignRawPayload: (input: TSignRawPayloadInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/sign_raw_payloads`
 */
export type TSignRawPayloadsResponse = operations["PublicApiService_SignRawPayloads"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/sign_raw_payloads`
 */
export type TSignRawPayloadsInput = {
    body: TSignRawPayloadsBody;
};
/**
 * `POST /public/v1/submit/sign_raw_payloads`
 */
export type TSignRawPayloadsBody = operations["PublicApiService_SignRawPayloads"]["parameters"]["body"]["body"];
/**
 * Sign Raw Payloads
 *
 * Sign multiple raw payloads with the same signing parameters
 *
 * `POST /public/v1/submit/sign_raw_payloads`
 */
export declare const signRawPayloads: (input: TSignRawPayloadsInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `SignRawPayloads` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignRawPayloads}
 */
export declare const signSignRawPayloads: (input: TSignRawPayloadsInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/sign_transaction`
 */
export type TSignTransactionResponse = operations["PublicApiService_SignTransaction"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/sign_transaction`
 */
export type TSignTransactionInput = {
    body: TSignTransactionBody;
};
/**
 * `POST /public/v1/submit/sign_transaction`
 */
export type TSignTransactionBody = operations["PublicApiService_SignTransaction"]["parameters"]["body"]["body"];
/**
 * Sign Transaction
 *
 * Sign a transaction
 *
 * `POST /public/v1/submit/sign_transaction`
 */
export declare const signTransaction: (input: TSignTransactionInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `SignTransaction` request, ready to be POSTed to Turnkey.
 *
 * See {@link SignTransaction}
 */
export declare const signSignTransaction: (input: TSignTransactionInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/update_policy`
 */
export type TUpdatePolicyResponse = operations["PublicApiService_UpdatePolicy"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/update_policy`
 */
export type TUpdatePolicyInput = {
    body: TUpdatePolicyBody;
};
/**
 * `POST /public/v1/submit/update_policy`
 */
export type TUpdatePolicyBody = operations["PublicApiService_UpdatePolicy"]["parameters"]["body"]["body"];
/**
 * Update Policy
 *
 * Update an existing Policy
 *
 * `POST /public/v1/submit/update_policy`
 */
export declare const updatePolicy: (input: TUpdatePolicyInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `UpdatePolicy` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePolicy}
 */
export declare const signUpdatePolicy: (input: TUpdatePolicyInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
export type TUpdatePrivateKeyTagResponse = operations["PublicApiService_UpdatePrivateKeyTag"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
export type TUpdatePrivateKeyTagInput = {
    body: TUpdatePrivateKeyTagBody;
};
/**
 * `POST /public/v1/submit/update_private_key_tag`
 */
export type TUpdatePrivateKeyTagBody = operations["PublicApiService_UpdatePrivateKeyTag"]["parameters"]["body"]["body"];
/**
 * Update Private Key Tag
 *
 * Update human-readable name or associated private keys. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_private_key_tag`
 */
export declare const updatePrivateKeyTag: (input: TUpdatePrivateKeyTagInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `UpdatePrivateKeyTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdatePrivateKeyTag}
 */
export declare const signUpdatePrivateKeyTag: (input: TUpdatePrivateKeyTagInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/update_root_quorum`
 */
export type TUpdateRootQuorumResponse = operations["PublicApiService_UpdateRootQuorum"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/update_root_quorum`
 */
export type TUpdateRootQuorumInput = {
    body: TUpdateRootQuorumBody;
};
/**
 * `POST /public/v1/submit/update_root_quorum`
 */
export type TUpdateRootQuorumBody = operations["PublicApiService_UpdateRootQuorum"]["parameters"]["body"]["body"];
/**
 * Update Root Quorum
 *
 * Set the threshold and members of the root quorum. This must be approved by the current root quorum.
 *
 * `POST /public/v1/submit/update_root_quorum`
 */
export declare const updateRootQuorum: (input: TUpdateRootQuorumInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `UpdateRootQuorum` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateRootQuorum}
 */
export declare const signUpdateRootQuorum: (input: TUpdateRootQuorumInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/update_user`
 */
export type TUpdateUserResponse = operations["PublicApiService_UpdateUser"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/update_user`
 */
export type TUpdateUserInput = {
    body: TUpdateUserBody;
};
/**
 * `POST /public/v1/submit/update_user`
 */
export type TUpdateUserBody = operations["PublicApiService_UpdateUser"]["parameters"]["body"]["body"];
/**
 * Update User
 *
 * Update a User in an existing Organization
 *
 * `POST /public/v1/submit/update_user`
 */
export declare const updateUser: (input: TUpdateUserInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `UpdateUser` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUser}
 */
export declare const signUpdateUser: (input: TUpdateUserInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /public/v1/submit/update_user_tag`
 */
export type TUpdateUserTagResponse = operations["PublicApiService_UpdateUserTag"]["responses"]["200"]["schema"];
/**
 * `POST /public/v1/submit/update_user_tag`
 */
export type TUpdateUserTagInput = {
    body: TUpdateUserTagBody;
};
/**
 * `POST /public/v1/submit/update_user_tag`
 */
export type TUpdateUserTagBody = operations["PublicApiService_UpdateUserTag"]["parameters"]["body"]["body"];
/**
 * Update User Tag
 *
 * Update human-readable name or associated users. Note that this activity is atomic: all of the updates will succeed at once, or all of them will fail.
 *
 * `POST /public/v1/submit/update_user_tag`
 */
export declare const updateUserTag: (input: TUpdateUserTagInput) => Promise<{
    activity: {
        id: string;
        organizationId: string;
        status: "ACTIVITY_STATUS_CREATED" | "ACTIVITY_STATUS_PENDING" | "ACTIVITY_STATUS_COMPLETED" | "ACTIVITY_STATUS_FAILED" | "ACTIVITY_STATUS_CONSENSUS_NEEDED" | "ACTIVITY_STATUS_REJECTED";
        type: "ACTIVITY_TYPE_CREATE_API_KEYS" | "ACTIVITY_TYPE_CREATE_USERS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD" | "ACTIVITY_TYPE_CREATE_INVITATIONS" | "ACTIVITY_TYPE_ACCEPT_INVITATION" | "ACTIVITY_TYPE_CREATE_POLICY" | "ACTIVITY_TYPE_DISABLE_PRIVATE_KEY" | "ACTIVITY_TYPE_DELETE_USERS" | "ACTIVITY_TYPE_DELETE_API_KEYS" | "ACTIVITY_TYPE_DELETE_INVITATION" | "ACTIVITY_TYPE_DELETE_ORGANIZATION" | "ACTIVITY_TYPE_DELETE_POLICY" | "ACTIVITY_TYPE_CREATE_USER_TAG" | "ACTIVITY_TYPE_DELETE_USER_TAGS" | "ACTIVITY_TYPE_CREATE_ORGANIZATION" | "ACTIVITY_TYPE_SIGN_TRANSACTION" | "ACTIVITY_TYPE_APPROVE_ACTIVITY" | "ACTIVITY_TYPE_REJECT_ACTIVITY" | "ACTIVITY_TYPE_DELETE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD" | "ACTIVITY_TYPE_ACTIVATE_BILLING_TIER" | "ACTIVITY_TYPE_DELETE_PAYMENT_METHOD" | "ACTIVITY_TYPE_CREATE_POLICY_V2" | "ACTIVITY_TYPE_CREATE_POLICY_V3" | "ACTIVITY_TYPE_CREATE_API_ONLY_USERS" | "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM" | "ACTIVITY_TYPE_UPDATE_USER_TAG" | "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG" | "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2" | "ACTIVITY_TYPE_CREATE_ORGANIZATION_V2" | "ACTIVITY_TYPE_CREATE_USERS_V2" | "ACTIVITY_TYPE_ACCEPT_INVITATION_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V2" | "ACTIVITY_TYPE_UPDATE_ALLOWED_ORIGINS" | "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2" | "ACTIVITY_TYPE_UPDATE_USER" | "ACTIVITY_TYPE_UPDATE_POLICY" | "ACTIVITY_TYPE_SET_PAYMENT_METHOD_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V3" | "ACTIVITY_TYPE_CREATE_WALLET" | "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS" | "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY" | "ACTIVITY_TYPE_RECOVER_USER" | "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2" | "ACTIVITY_TYPE_SIGN_TRANSACTION_V2" | "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_EXPORT_WALLET" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V4" | "ACTIVITY_TYPE_EMAIL_AUTH" | "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT" | "ACTIVITY_TYPE_INIT_IMPORT_WALLET" | "ACTIVITY_TYPE_IMPORT_WALLET" | "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY" | "ACTIVITY_TYPE_CREATE_POLICIES" | "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS" | "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION" | "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5" | "ACTIVITY_TYPE_OAUTH" | "ACTIVITY_TYPE_CREATE_API_KEYS_V2" | "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION" | "ACTIVITY_TYPE_EMAIL_AUTH_V2" | "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V6";
        intent: {
            createOrganizationIntent?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
                rootUserId?: string;
            };
            createAuthenticatorsIntent?: {
                authenticators: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                }[];
                userId: string;
            };
            createUsersIntent?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        userId: string;
                        attestation: {
                            id: string;
                            type: "public-key";
                            rawId: string;
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                            response: {
                                clientDataJson: string;
                                attestationObject: string;
                                transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                                authenticatorAttachment?: "cross-platform" | "platform" | null;
                            };
                            clientExtensionResults: {
                                appid?: boolean;
                                appidExclude?: boolean;
                                credProps?: {
                                    rk: boolean;
                                };
                            };
                        };
                        challenge: string;
                    }[];
                    userTags: string[];
                }[];
            };
            createPrivateKeysIntent?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            signRawPayloadIntent?: {
                privateKeyId: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createInvitationsIntent?: {
                invitations: {
                    receiverUserName: string;
                    receiverUserEmail: string;
                    receiverUserTags: string[];
                    accessType: "ACCESS_TYPE_WEB" | "ACCESS_TYPE_API" | "ACCESS_TYPE_ALL";
                    senderUserId: string;
                }[];
            };
            acceptInvitationIntent?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    userId: string;
                    attestation: {
                        id: string;
                        type: "public-key";
                        rawId: string;
                        authenticatorAttachment?: "cross-platform" | "platform" | null;
                        response: {
                            clientDataJson: string;
                            attestationObject: string;
                            transports?: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                            authenticatorAttachment?: "cross-platform" | "platform" | null;
                        };
                        clientExtensionResults: {
                            appid?: boolean;
                            appidExclude?: boolean;
                            credProps?: {
                                rk: boolean;
                            };
                        };
                    };
                    challenge: string;
                };
            };
            createPolicyIntent?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    target?: string;
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            disablePrivateKeyIntent?: {
                privateKeyId: string;
            };
            deleteUsersIntent?: {
                userIds: string[];
            };
            deleteAuthenticatorsIntent?: {
                userId: string;
                authenticatorIds: string[];
            };
            deleteInvitationIntent?: {
                invitationId: string;
            };
            deleteOrganizationIntent?: {
                organizationId: string;
            };
            deletePolicyIntent?: {
                policyId: string;
            };
            createUserTagIntent?: {
                userTagName: string;
                userIds: string[];
            };
            deleteUserTagsIntent?: {
                userTagIds: string[];
            };
            signTransactionIntent?: {
                privateKeyId: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            createApiKeysIntent?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            deleteApiKeysIntent?: {
                userId: string;
                apiKeyIds: string[];
            };
            approveActivityIntent?: {
                fingerprint: string;
            };
            rejectActivityIntent?: {
                fingerprint: string;
            };
            createPrivateKeyTagIntent?: {
                privateKeyTagName: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsIntent?: {
                privateKeyTagIds: string[];
            };
            createPolicyIntentV2?: {
                policyName: string;
                selectors: {
                    subject?: string;
                    operator?: "OPERATOR_EQUAL" | "OPERATOR_MORE_THAN" | "OPERATOR_MORE_THAN_OR_EQUAL" | "OPERATOR_LESS_THAN" | "OPERATOR_LESS_THAN_OR_EQUAL" | "OPERATOR_CONTAINS" | "OPERATOR_NOT_EQUAL" | "OPERATOR_IN" | "OPERATOR_NOT_IN" | "OPERATOR_CONTAINS_ONE" | "OPERATOR_CONTAINS_ALL";
                    targets?: string[];
                }[];
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                notes?: string;
            };
            setPaymentMethodIntent?: {
                number: string;
                cvv: string;
                expiryMonth: string;
                expiryYear: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            activateBillingTierIntent?: {
                productId: string;
            };
            deletePaymentMethodIntent?: {
                paymentMethodId: string;
            };
            createPolicyIntentV3?: {
                policyName: string;
                effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                condition?: string;
                consensus?: string;
                notes?: string;
            };
            createApiOnlyUsersIntent?: {
                apiOnlyUsers: {
                    userName: string;
                    userEmail?: string;
                    userTags: string[];
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                }[];
            };
            updateRootQuorumIntent?: {
                threshold: number;
                userIds: string[];
            };
            updateUserTagIntent?: {
                userTagId: string;
                newUserTagName?: string;
                addUserIds: string[];
                removeUserIds: string[];
            };
            updatePrivateKeyTagIntent?: {
                privateKeyTagId: string;
                newPrivateKeyTagName?: string;
                addPrivateKeyIds: string[];
                removePrivateKeyIds: string[];
            };
            createAuthenticatorsIntentV2?: {
                authenticators: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                }[];
                userId: string;
            };
            acceptInvitationIntentV2?: {
                invitationId: string;
                userId: string;
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createOrganizationIntentV2?: {
                organizationName: string;
                rootEmail: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                rootUserId?: string;
            };
            createUsersIntentV2?: {
                users: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    userTags: string[];
                }[];
            };
            createSubOrganizationIntent?: {
                name: string;
                rootAuthenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
            };
            createSubOrganizationIntentV2?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
            };
            updateAllowedOriginsIntent?: {
                allowedOrigins: string[];
            };
            createPrivateKeysIntentV2?: {
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            updateUserIntent?: {
                userId: string;
                userName?: string;
                userEmail?: string;
                userTagIds?: string[];
            };
            updatePolicyIntent?: {
                policyId: string;
                policyName?: string;
                policyEffect?: "EFFECT_ALLOW" | "EFFECT_DENY";
                policyCondition?: string;
                policyConsensus?: string;
                policyNotes?: string;
            };
            setPaymentMethodIntentV2?: {
                paymentMethodId: string;
                cardHolderEmail: string;
                cardHolderName: string;
            };
            createSubOrganizationIntentV3?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                privateKeys: {
                    privateKeyName: string;
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    privateKeyTags: string[];
                    addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
                }[];
            };
            createWalletIntent?: {
                walletName: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
                mnemonicLength?: number;
            };
            createWalletAccountsIntent?: {
                walletId: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initUserEmailRecoveryIntent?: {
                email: string;
                targetPublicKey: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
            };
            recoverUserIntent?: {
                authenticator: {
                    authenticatorName: string;
                    challenge: string;
                    attestation: {
                        credentialId: string;
                        clientDataJson: string;
                        attestationObject: string;
                        transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    };
                };
                userId: string;
            };
            setOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                value: string;
            };
            removeOrganizationFeatureIntent?: {
                name: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
            };
            signRawPayloadIntentV2?: {
                signWith: string;
                payload: string;
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            signTransactionIntentV2?: {
                signWith: string;
                unsignedTransaction: string;
                type: "TRANSACTION_TYPE_ETHEREUM";
            };
            exportPrivateKeyIntent?: {
                privateKeyId: string;
                targetPublicKey: string;
            };
            exportWalletIntent?: {
                walletId: string;
                targetPublicKey: string;
                language?: "MNEMONIC_LANGUAGE_ENGLISH" | "MNEMONIC_LANGUAGE_SIMPLIFIED_CHINESE" | "MNEMONIC_LANGUAGE_TRADITIONAL_CHINESE" | "MNEMONIC_LANGUAGE_CZECH" | "MNEMONIC_LANGUAGE_FRENCH" | "MNEMONIC_LANGUAGE_ITALIAN" | "MNEMONIC_LANGUAGE_JAPANESE" | "MNEMONIC_LANGUAGE_KOREAN" | "MNEMONIC_LANGUAGE_SPANISH";
            };
            createSubOrganizationIntentV4?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            emailAuthIntent?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            exportWalletAccountIntent?: {
                address: string;
                targetPublicKey: string;
            };
            initImportWalletIntent?: {
                userId: string;
            };
            importWalletIntent?: {
                userId: string;
                walletName: string;
                encryptedBundle: string;
                accounts: {
                    curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                    pathFormat: "PATH_FORMAT_BIP32";
                    path: string;
                    addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                }[];
            };
            initImportPrivateKeyIntent?: {
                userId: string;
            };
            importPrivateKeyIntent?: {
                userId: string;
                privateKeyName: string;
                encryptedBundle: string;
                curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                addressFormats: ("ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON")[];
            };
            createPoliciesIntent?: {
                policies: {
                    policyName: string;
                    effect: "EFFECT_ALLOW" | "EFFECT_DENY";
                    condition?: string;
                    consensus?: string;
                    notes?: string;
                }[];
            };
            signRawPayloadsIntent?: {
                signWith: string;
                payloads: string[];
                encoding: "PAYLOAD_ENCODING_HEXADECIMAL" | "PAYLOAD_ENCODING_TEXT_UTF8";
                hashFunction: "HASH_FUNCTION_NO_OP" | "HASH_FUNCTION_SHA256" | "HASH_FUNCTION_KECCAK256" | "HASH_FUNCTION_NOT_APPLICABLE";
            };
            createReadOnlySessionIntent?: {
                [key: string]: unknown;
            };
            createOauthProvidersIntent?: {
                userId: string;
                oauthProviders: {
                    providerName: string;
                    oidcToken: string;
                }[];
            };
            deleteOauthProvidersIntent?: {
                userId: string;
                providerIds: string[];
            };
            createSubOrganizationIntentV5?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
            oauthIntent?: {
                oidcToken: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            createApiKeysIntentV2?: {
                apiKeys: {
                    apiKeyName: string;
                    publicKey: string;
                    curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                    expirationSeconds?: string;
                }[];
                userId: string;
            };
            createReadWriteSessionIntent?: {
                targetPublicKey: string;
                email: string;
                apiKeyName?: string;
                expirationSeconds?: string;
            };
            emailAuthIntentV2?: {
                email: string;
                targetPublicKey: string;
                apiKeyName?: string;
                expirationSeconds?: string;
                emailCustomization?: {
                    appName?: string;
                    logoUrl?: string;
                    magicLinkTemplate?: string;
                    templateVariables?: string;
                    templateId?: string;
                };
                invalidateExisting?: boolean;
            };
            createSubOrganizationIntentV6?: {
                subOrganizationName: string;
                rootUsers: {
                    userName: string;
                    userEmail?: string;
                    apiKeys: {
                        apiKeyName: string;
                        publicKey: string;
                        curveType: "API_KEY_CURVE_P256" | "API_KEY_CURVE_SECP256K1" | "API_KEY_CURVE_ED25519";
                        expirationSeconds?: string;
                    }[];
                    authenticators: {
                        authenticatorName: string;
                        challenge: string;
                        attestation: {
                            credentialId: string;
                            clientDataJson: string;
                            attestationObject: string;
                            transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                        };
                    }[];
                    oauthProviders: {
                        providerName: string;
                        oidcToken: string;
                    }[];
                }[];
                rootQuorumThreshold: number;
                wallet?: {
                    walletName: string;
                    accounts: {
                        curve: "CURVE_SECP256K1" | "CURVE_ED25519";
                        pathFormat: "PATH_FORMAT_BIP32";
                        path: string;
                        addressFormat: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    }[];
                    mnemonicLength?: number;
                };
                disableEmailRecovery?: boolean;
                disableEmailAuth?: boolean;
            };
        };
        result: {
            createOrganizationResult?: {
                organizationId: string;
            };
            createAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            createUsersResult?: {
                userIds: string[];
            };
            createPrivateKeysResult?: {
                privateKeyIds: string[];
            };
            createInvitationsResult?: {
                invitationIds: string[];
            };
            acceptInvitationResult?: {
                invitationId: string;
                userId: string;
            };
            signRawPayloadResult?: {
                r: string;
                s: string;
                v: string;
            };
            createPolicyResult?: {
                policyId: string;
            };
            disablePrivateKeyResult?: {
                privateKeyId: string;
            };
            deleteUsersResult?: {
                userIds: string[];
            };
            deleteAuthenticatorsResult?: {
                authenticatorIds: string[];
            };
            deleteInvitationResult?: {
                invitationId: string;
            };
            deleteOrganizationResult?: {
                organizationId: string;
            };
            deletePolicyResult?: {
                policyId: string;
            };
            createUserTagResult?: {
                userTagId: string;
                userIds: string[];
            };
            deleteUserTagsResult?: {
                userTagIds: string[];
                userIds: string[];
            };
            signTransactionResult?: {
                signedTransaction: string;
            };
            deleteApiKeysResult?: {
                /**
                 * Request a WebAuthn assertion and return a signed `CreateUserTag` request, ready to be POSTed to Turnkey.
                 *
                 * See {@link CreateUserTag}
                 */
                apiKeyIds: string[];
            };
            createApiKeysResult?: {
                apiKeyIds: string[];
            };
            createPrivateKeyTagResult?: {
                privateKeyTagId: string;
                privateKeyIds: string[];
            };
            deletePrivateKeyTagsResult?: {
                privateKeyTagIds: string[];
                privateKeyIds: string[];
            };
            setPaymentMethodResult?: {
                lastFour: string;
                cardHolderName: string;
                cardHolderEmail: string;
            };
            activateBillingTierResult?: {
                productId: string;
            };
            deletePaymentMethodResult?: {
                paymentMethodId: string;
            };
            createApiOnlyUsersResult?: {
                userIds: string[];
            };
            updateRootQuorumResult?: {
                [key: string]: unknown;
            };
            updateUserTagResult?: {
                userTagId: string;
            };
            updatePrivateKeyTagResult?: {
                privateKeyTagId: string;
            };
            createSubOrganizationResult?: {
                subOrganizationId: string;
                rootUserIds?: string[];
            };
            updateAllowedOriginsResult?: {
                [key: string]: unknown;
            };
            createPrivateKeysResultV2?: {
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
            };
            updateUserResult?: {
                userId: string;
            };
            updatePolicyResult?: {
                policyId: string;
            };
            createSubOrganizationResultV3?: {
                subOrganizationId: string;
                privateKeys: {
                    privateKeyId?: string;
                    addresses?: {
                        format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                        address?: string;
                    }[];
                }[];
                rootUserIds?: string[];
            };
            createWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            createWalletAccountsResult?: {
                addresses: string[];
            };
            initUserEmailRecoveryResult?: {
                userId: string;
            };
            recoverUserResult?: {
                authenticatorId: string[];
            };
            setOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            removeOrganizationFeatureResult?: {
                features: {
                    name?: "FEATURE_NAME_ROOT_USER_EMAIL_RECOVERY" | "FEATURE_NAME_WEBAUTHN_ORIGINS" | "FEATURE_NAME_EMAIL_AUTH" | "FEATURE_NAME_EMAIL_RECOVERY" | "FEATURE_NAME_WEBHOOK";
                    value?: string;
                }[];
            };
            exportPrivateKeyResult?: {
                privateKeyId: string;
                exportBundle: string;
            };
            exportWalletResult?: {
                walletId: string;
                exportBundle: string;
            };
            createSubOrganizationResultV4?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            emailAuthResult?: {
                userId: string;
                apiKeyId: string;
            };
            exportWalletAccountResult?: {
                address: string;
                exportBundle: string; /**
                 * `POST /public/v1/submit/delete_private_key_tags`
                 */
            };
            initImportWalletResult?: {
                importBundle: string;
            };
            importWalletResult?: {
                walletId: string;
                addresses: string[];
            };
            initImportPrivateKeyResult?: {
                importBundle: string;
            };
            importPrivateKeyResult?: {
                privateKeyId: string;
                addresses: {
                    format?: "ADDRESS_FORMAT_UNCOMPRESSED" | "ADDRESS_FORMAT_COMPRESSED" | "ADDRESS_FORMAT_ETHEREUM" | "ADDRESS_FORMAT_SOLANA" | "ADDRESS_FORMAT_COSMOS" | "ADDRESS_FORMAT_TRON";
                    address?: string;
                }[];
            };
            createPoliciesResult?: {
                policyIds: string[];
            };
            signRawPayloadsResult?: {
                signatures?: {
                    r: string;
                    s: string;
                    v: string;
                }[];
            };
            createReadOnlySessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                session: string;
                sessionExpiry: string;
            };
            createOauthProvidersResult?: {
                providerIds: string[];
            };
            deleteOauthProvidersResult?: {
                providerIds: string[];
            };
            createSubOrganizationResultV5?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
            oauthResult?: {
                userId: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createReadWriteSessionResult?: {
                organizationId: string;
                organizationName: string;
                userId: string;
                username: string;
                apiKeyId: string;
                credentialBundle: string;
            };
            createSubOrganizationResultV6?: {
                subOrganizationId: string;
                wallet?: {
                    walletId: string;
                    addresses: string[];
                };
                rootUserIds?: string[];
            };
        };
        votes: {
            id: string;
            userId: string;
            user: {
                userId: string;
                userName: string;
                userEmail?: string;
                authenticators: {
                    transports: ("AUTHENTICATOR_TRANSPORT_BLE" | "AUTHENTICATOR_TRANSPORT_INTERNAL" | "AUTHENTICATOR_TRANSPORT_NFC" | "AUTHENTICATOR_TRANSPORT_USB" | "AUTHENTICATOR_TRANSPORT_HYBRID")[];
                    attestationType: string;
                    aaguid: string;
                    credentialId: string;
                    model: string;
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    authenticatorId: string;
                    authenticatorName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                apiKeys: {
                    credential: {
                        publicKey: string;
                        type: "CREDENTIAL_TYPE_WEBAUTHN_AUTHENTICATOR" | "CREDENTIAL_TYPE_API_KEY_P256" | "CREDENTIAL_TYPE_RECOVER_USER_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_SECP256K1" | "CREDENTIAL_TYPE_EMAIL_AUTH_KEY_P256" | "CREDENTIAL_TYPE_API_KEY_ED25519";
                    };
                    apiKeyId: string; /**
                     * Request a WebAuthn assertion and return a signed `ListPrivateKeyTags` request, ready to be POSTed to Turnkey.
                     *
                     * See {@link ListPrivateKeyTags}
                     */
                    apiKeyName: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                    expirationSeconds?: string;
                }[];
                userTags: string[];
                oauthProviders: {
                    providerId: string;
                    providerName: string;
                    issuer: string;
                    audience: string;
                    subject: string;
                    createdAt: {
                        seconds: string;
                        nanos: string;
                    };
                    updatedAt: {
                        seconds: string;
                        nanos: string;
                    };
                }[];
                createdAt: {
                    seconds: string;
                    nanos: string;
                };
                updatedAt: {
                    seconds: string;
                    nanos: string;
                };
            };
            activityId: string;
            selection: "VOTE_SELECTION_APPROVED" | "VOTE_SELECTION_REJECTED";
            message: string;
            publicKey: string;
            signature: string;
            scheme: string;
            createdAt: {
                seconds: string;
                nanos: string;
            };
        }[];
        fingerprint: string;
        canApprove: boolean;
        canReject: boolean;
        createdAt: {
            seconds: string;
            nanos: string;
        };
        updatedAt: {
            seconds: string;
            nanos: string;
        };
        failure?: {
            code?: number;
            message?: string;
            details?: ({
                "@type"?: string;
            } & {
                [key: string]: unknown;
            })[];
        };
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `UpdateUserTag` request, ready to be POSTed to Turnkey.
 *
 * See {@link UpdateUserTag}
 */
export declare const signUpdateUserTag: (input: TUpdateUserTagInput, options?: TurnkeyCredentialRequestOptions) => Promise<import("../../../../../base").SignedRequest>;
/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
export type TNOOPCodegenAnchorResponse = operations["PublicApiService_NOOPCodegenAnchor"]["responses"]["200"]["schema"];
/**
 * `POST /tkhq/api/v1/noop-codegen-anchor`
 */
export declare const nOOPCodegenAnchor: () => Promise<{
    stamp: {
        credentialId: string;
        clientDataJson: string;
        authenticatorData: string;
        signature: string;
    };
}>;
/**
 * Request a WebAuthn assertion and return a signed `NOOPCodegenAnchor` request, ready to be POSTed to Turnkey.
 *
 * See {@link NOOPCodegenAnchor}
 */
export declare const signNOOPCodegenAnchor: () => Promise<import("../../../../../base").SignedRequest>;
//# sourceMappingURL=public_api.fetcher.d.ts.map