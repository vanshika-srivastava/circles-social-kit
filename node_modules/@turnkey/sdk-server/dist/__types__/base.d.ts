export type GrpcStatus = {
    message: string;
    code: number;
    details: unknown[] | null;
};
export declare enum MethodType {
    Get = 0,
    List = 1,
    Command = 2
}
export type TStamp = {
    stampHeaderName: string;
    stampHeaderValue: string;
};
export interface TStamper {
    stamp: (input: string) => Promise<TStamp>;
}
export type THttpConfig = {
    baseUrl: string;
};
export declare class TurnkeyRequestError extends Error {
    details: any[] | null;
    code: number;
    constructor(input: GrpcStatus);
}
export interface ActivityResponse {
    activity: {
        id: string;
        status: string;
        result: Record<string, any>;
    };
}
export interface ActivityMetadata {
    activity: {
        id: string;
        status: string;
    };
}
export type queryOverrideParams = {
    organizationId?: string;
};
export type commandOverrideParams = {
    organizationId?: string;
    timestampMs?: string;
};
export interface TurnkeySDKClientConfig {
    stamper: TStamper;
    apiBaseUrl: string;
    organizationId: string;
    activityPoller?: {
        duration: number;
        timeout: number;
    };
}
export interface TurnkeySDKServerConfig {
    apiBaseUrl: string;
    apiPrivateKey: string;
    apiPublicKey: string;
    defaultOrganizationId: string;
}
export interface TurnkeyProxyHandlerConfig {
    allowedMethods?: string[];
}
export interface NextApiRequest {
    body: any;
    query: {
        [key: string]: string;
    };
}
export interface NextApiResponse<T = any> {
    status: (statusCode: number) => NextApiResponse<T>;
    json: (data: T) => void;
    send: (data: any) => void;
}
export type NextApiHandler = (req: NextApiRequest, res: NextApiResponse) => void | Promise<void>;
export interface ApiCredentials {
    apiPublicKey: string;
    apiPrivateKey: string;
}
//# sourceMappingURL=base.d.ts.map