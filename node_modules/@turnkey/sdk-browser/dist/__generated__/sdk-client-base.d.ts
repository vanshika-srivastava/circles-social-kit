import { TurnkeySDKClientConfig } from "../__types__/base";
import type * as SdkApiTypes from "./sdk_api_types";
export declare class TurnkeySDKClientBase {
    config: TurnkeySDKClientConfig;
    constructor(config: TurnkeySDKClientConfig);
    request<TBodyType, TResponseType>(url: string, body: TBodyType): Promise<TResponseType>;
    command<TBodyType, TResponseType>(url: string, body: TBodyType, resultKey: string): Promise<TResponseType>;
    activityDecision<TBodyType, TResponseType>(url: string, body: TBodyType): Promise<TResponseType>;
    getActivity: (input: SdkApiTypes.TGetActivityBody) => Promise<SdkApiTypes.TGetActivityResponse>;
    getApiKey: (input: SdkApiTypes.TGetApiKeyBody) => Promise<SdkApiTypes.TGetApiKeyResponse>;
    getApiKeys: (input?: SdkApiTypes.TGetApiKeysBody) => Promise<SdkApiTypes.TGetApiKeysResponse>;
    getAttestationDocument: (input: SdkApiTypes.TGetAttestationDocumentBody) => Promise<SdkApiTypes.TGetAttestationDocumentResponse>;
    getAuthenticator: (input: SdkApiTypes.TGetAuthenticatorBody) => Promise<SdkApiTypes.TGetAuthenticatorResponse>;
    getAuthenticators: (input: SdkApiTypes.TGetAuthenticatorsBody) => Promise<SdkApiTypes.TGetAuthenticatorsResponse>;
    getOauthProviders: (input: SdkApiTypes.TGetOauthProvidersBody) => Promise<SdkApiTypes.TGetOauthProvidersResponse>;
    getOrganization: (input?: SdkApiTypes.TGetOrganizationBody) => Promise<SdkApiTypes.TGetOrganizationResponse>;
    getOrganizationConfigs: (input: SdkApiTypes.TGetOrganizationConfigsBody) => Promise<SdkApiTypes.TGetOrganizationConfigsResponse>;
    getPolicy: (input: SdkApiTypes.TGetPolicyBody) => Promise<SdkApiTypes.TGetPolicyResponse>;
    getPrivateKey: (input: SdkApiTypes.TGetPrivateKeyBody) => Promise<SdkApiTypes.TGetPrivateKeyResponse>;
    getUser: (input: SdkApiTypes.TGetUserBody) => Promise<SdkApiTypes.TGetUserResponse>;
    getWallet: (input: SdkApiTypes.TGetWalletBody) => Promise<SdkApiTypes.TGetWalletResponse>;
    getActivities: (input?: SdkApiTypes.TGetActivitiesBody) => Promise<SdkApiTypes.TGetActivitiesResponse>;
    getPolicies: (input?: SdkApiTypes.TGetPoliciesBody) => Promise<SdkApiTypes.TGetPoliciesResponse>;
    listPrivateKeyTags: (input: SdkApiTypes.TListPrivateKeyTagsBody) => Promise<SdkApiTypes.TListPrivateKeyTagsResponse>;
    getPrivateKeys: (input?: SdkApiTypes.TGetPrivateKeysBody) => Promise<SdkApiTypes.TGetPrivateKeysResponse>;
    getSubOrgIds: (input?: SdkApiTypes.TGetSubOrgIdsBody) => Promise<SdkApiTypes.TGetSubOrgIdsResponse>;
    listUserTags: (input?: SdkApiTypes.TListUserTagsBody) => Promise<SdkApiTypes.TListUserTagsResponse>;
    getUsers: (input?: SdkApiTypes.TGetUsersBody) => Promise<SdkApiTypes.TGetUsersResponse>;
    getWalletAccounts: (input: SdkApiTypes.TGetWalletAccountsBody) => Promise<SdkApiTypes.TGetWalletAccountsResponse>;
    getWallets: (input?: SdkApiTypes.TGetWalletsBody) => Promise<SdkApiTypes.TGetWalletsResponse>;
    getWhoami: (input?: SdkApiTypes.TGetWhoamiBody) => Promise<SdkApiTypes.TGetWhoamiResponse>;
    approveActivity: (input: SdkApiTypes.TApproveActivityBody) => Promise<SdkApiTypes.TApproveActivityResponse>;
    createApiKeys: (input: SdkApiTypes.TCreateApiKeysBody) => Promise<SdkApiTypes.TCreateApiKeysResponse>;
    createApiOnlyUsers: (input: SdkApiTypes.TCreateApiOnlyUsersBody) => Promise<SdkApiTypes.TCreateApiOnlyUsersResponse>;
    createAuthenticators: (input: SdkApiTypes.TCreateAuthenticatorsBody) => Promise<SdkApiTypes.TCreateAuthenticatorsResponse>;
    createInvitations: (input: SdkApiTypes.TCreateInvitationsBody) => Promise<SdkApiTypes.TCreateInvitationsResponse>;
    createOauthProviders: (input: SdkApiTypes.TCreateOauthProvidersBody) => Promise<SdkApiTypes.TCreateOauthProvidersResponse>;
    createPolicies: (input: SdkApiTypes.TCreatePoliciesBody) => Promise<SdkApiTypes.TCreatePoliciesResponse>;
    createPolicy: (input: SdkApiTypes.TCreatePolicyBody) => Promise<SdkApiTypes.TCreatePolicyResponse>;
    createPrivateKeyTag: (input: SdkApiTypes.TCreatePrivateKeyTagBody) => Promise<SdkApiTypes.TCreatePrivateKeyTagResponse>;
    createPrivateKeys: (input: SdkApiTypes.TCreatePrivateKeysBody) => Promise<SdkApiTypes.TCreatePrivateKeysResponse>;
    createReadOnlySession: (input: SdkApiTypes.TCreateReadOnlySessionBody) => Promise<SdkApiTypes.TCreateReadOnlySessionResponse>;
    createReadWriteSession: (input: SdkApiTypes.TCreateReadWriteSessionBody) => Promise<SdkApiTypes.TCreateReadWriteSessionResponse>;
    createSubOrganization: (input: SdkApiTypes.TCreateSubOrganizationBody) => Promise<SdkApiTypes.TCreateSubOrganizationResponse>;
    createUserTag: (input: SdkApiTypes.TCreateUserTagBody) => Promise<SdkApiTypes.TCreateUserTagResponse>;
    createUsers: (input: SdkApiTypes.TCreateUsersBody) => Promise<SdkApiTypes.TCreateUsersResponse>;
    createWallet: (input: SdkApiTypes.TCreateWalletBody) => Promise<SdkApiTypes.TCreateWalletResponse>;
    createWalletAccounts: (input: SdkApiTypes.TCreateWalletAccountsBody) => Promise<SdkApiTypes.TCreateWalletAccountsResponse>;
    deleteApiKeys: (input: SdkApiTypes.TDeleteApiKeysBody) => Promise<SdkApiTypes.TDeleteApiKeysResponse>;
    deleteAuthenticators: (input: SdkApiTypes.TDeleteAuthenticatorsBody) => Promise<SdkApiTypes.TDeleteAuthenticatorsResponse>;
    deleteInvitation: (input: SdkApiTypes.TDeleteInvitationBody) => Promise<SdkApiTypes.TDeleteInvitationResponse>;
    deleteOauthProviders: (input: SdkApiTypes.TDeleteOauthProvidersBody) => Promise<SdkApiTypes.TDeleteOauthProvidersResponse>;
    deletePolicy: (input: SdkApiTypes.TDeletePolicyBody) => Promise<SdkApiTypes.TDeletePolicyResponse>;
    deletePrivateKeyTags: (input: SdkApiTypes.TDeletePrivateKeyTagsBody) => Promise<SdkApiTypes.TDeletePrivateKeyTagsResponse>;
    deleteUserTags: (input: SdkApiTypes.TDeleteUserTagsBody) => Promise<SdkApiTypes.TDeleteUserTagsResponse>;
    deleteUsers: (input: SdkApiTypes.TDeleteUsersBody) => Promise<SdkApiTypes.TDeleteUsersResponse>;
    emailAuth: (input: SdkApiTypes.TEmailAuthBody) => Promise<SdkApiTypes.TEmailAuthResponse>;
    exportPrivateKey: (input: SdkApiTypes.TExportPrivateKeyBody) => Promise<SdkApiTypes.TExportPrivateKeyResponse>;
    exportWallet: (input: SdkApiTypes.TExportWalletBody) => Promise<SdkApiTypes.TExportWalletResponse>;
    exportWalletAccount: (input: SdkApiTypes.TExportWalletAccountBody) => Promise<SdkApiTypes.TExportWalletAccountResponse>;
    importPrivateKey: (input: SdkApiTypes.TImportPrivateKeyBody) => Promise<SdkApiTypes.TImportPrivateKeyResponse>;
    importWallet: (input: SdkApiTypes.TImportWalletBody) => Promise<SdkApiTypes.TImportWalletResponse>;
    initImportPrivateKey: (input: SdkApiTypes.TInitImportPrivateKeyBody) => Promise<SdkApiTypes.TInitImportPrivateKeyResponse>;
    initImportWallet: (input: SdkApiTypes.TInitImportWalletBody) => Promise<SdkApiTypes.TInitImportWalletResponse>;
    initUserEmailRecovery: (input: SdkApiTypes.TInitUserEmailRecoveryBody) => Promise<SdkApiTypes.TInitUserEmailRecoveryResponse>;
    oauth: (input: SdkApiTypes.TOauthBody) => Promise<SdkApiTypes.TOauthResponse>;
    recoverUser: (input: SdkApiTypes.TRecoverUserBody) => Promise<SdkApiTypes.TRecoverUserResponse>;
    rejectActivity: (input: SdkApiTypes.TRejectActivityBody) => Promise<SdkApiTypes.TRejectActivityResponse>;
    removeOrganizationFeature: (input: SdkApiTypes.TRemoveOrganizationFeatureBody) => Promise<SdkApiTypes.TRemoveOrganizationFeatureResponse>;
    setOrganizationFeature: (input: SdkApiTypes.TSetOrganizationFeatureBody) => Promise<SdkApiTypes.TSetOrganizationFeatureResponse>;
    signRawPayload: (input: SdkApiTypes.TSignRawPayloadBody) => Promise<SdkApiTypes.TSignRawPayloadResponse>;
    signRawPayloads: (input: SdkApiTypes.TSignRawPayloadsBody) => Promise<SdkApiTypes.TSignRawPayloadsResponse>;
    signTransaction: (input: SdkApiTypes.TSignTransactionBody) => Promise<SdkApiTypes.TSignTransactionResponse>;
    updatePolicy: (input: SdkApiTypes.TUpdatePolicyBody) => Promise<SdkApiTypes.TUpdatePolicyResponse>;
    updatePrivateKeyTag: (input: SdkApiTypes.TUpdatePrivateKeyTagBody) => Promise<SdkApiTypes.TUpdatePrivateKeyTagResponse>;
    updateRootQuorum: (input: SdkApiTypes.TUpdateRootQuorumBody) => Promise<SdkApiTypes.TUpdateRootQuorumResponse>;
    updateUser: (input: SdkApiTypes.TUpdateUserBody) => Promise<SdkApiTypes.TUpdateUserResponse>;
    updateUserTag: (input: SdkApiTypes.TUpdateUserTagBody) => Promise<SdkApiTypes.TUpdateUserTagResponse>;
}
//# sourceMappingURL=sdk-client-base.d.ts.map