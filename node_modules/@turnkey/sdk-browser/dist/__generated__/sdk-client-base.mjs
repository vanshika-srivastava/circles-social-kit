import { TurnkeyRequestError } from '../__types__/base.mjs';
import { VERSION } from './version.mjs';
import { getStorageValue, StorageKeys } from '../storage.mjs';

/* @generated by codegen. DO NOT EDIT BY HAND */
class TurnkeySDKClientBase {
    constructor(config) {
        this.getActivity = async (input) => {
            return this.request("/public/v1/query/get_activity", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getApiKey = async (input) => {
            return this.request("/public/v1/query/get_api_key", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getApiKeys = async (input = {}) => {
            return this.request("/public/v1/query/get_api_keys", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getAttestationDocument = async (input) => {
            return this.request("/public/v1/query/get_attestation", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getAuthenticator = async (input) => {
            return this.request("/public/v1/query/get_authenticator", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getAuthenticators = async (input) => {
            return this.request("/public/v1/query/get_authenticators", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getOauthProviders = async (input) => {
            return this.request("/public/v1/query/get_oauth_providers", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getOrganization = async (input = {}) => {
            return this.request("/public/v1/query/get_organization", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getOrganizationConfigs = async (input) => {
            return this.request("/public/v1/query/get_organization_configs", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getPolicy = async (input) => {
            return this.request("/public/v1/query/get_policy", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getPrivateKey = async (input) => {
            return this.request("/public/v1/query/get_private_key", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getUser = async (input) => {
            return this.request("/public/v1/query/get_user", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getWallet = async (input) => {
            return this.request("/public/v1/query/get_wallet", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getActivities = async (input = {}) => {
            return this.request("/public/v1/query/list_activities", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getPolicies = async (input = {}) => {
            return this.request("/public/v1/query/list_policies", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.listPrivateKeyTags = async (input) => {
            return this.request("/public/v1/query/list_private_key_tags", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getPrivateKeys = async (input = {}) => {
            return this.request("/public/v1/query/list_private_keys", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getSubOrgIds = async (input = {}) => {
            return this.request("/public/v1/query/list_suborgs", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.listUserTags = async (input = {}) => {
            return this.request("/public/v1/query/list_user_tags", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getUsers = async (input = {}) => {
            return this.request("/public/v1/query/list_users", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getWalletAccounts = async (input) => {
            return this.request("/public/v1/query/list_wallet_accounts", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getWallets = async (input = {}) => {
            return this.request("/public/v1/query/list_wallets", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.getWhoami = async (input = {}) => {
            return this.request("/public/v1/query/whoami", {
                ...input,
                organizationId: input.organizationId ?? this.config.organizationId,
            });
        };
        this.approveActivity = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.activityDecision("/public/v1/submit/approve_activity", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_APPROVE_ACTIVITY",
            });
        };
        this.createApiKeys = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_api_keys", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_API_KEYS_V2",
            }, "createApiKeysResult");
        };
        this.createApiOnlyUsers = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_api_only_users", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_API_ONLY_USERS",
            }, "createApiOnlyUsersResult");
        };
        this.createAuthenticators = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_authenticators", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_AUTHENTICATORS_V2",
            }, "createAuthenticatorsResult");
        };
        this.createInvitations = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_invitations", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_INVITATIONS",
            }, "createInvitationsResult");
        };
        this.createOauthProviders = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_oauth_providers", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_OAUTH_PROVIDERS",
            }, "createOauthProvidersResult");
        };
        this.createPolicies = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_policies", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_POLICIES",
            }, "createPoliciesResult");
        };
        this.createPolicy = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_policy", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_POLICY_V3",
            }, "createPolicyResult");
        };
        this.createPrivateKeyTag = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_private_key_tag", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_PRIVATE_KEY_TAG",
            }, "createPrivateKeyTagResult");
        };
        this.createPrivateKeys = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_private_keys", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_PRIVATE_KEYS_V2",
            }, "createPrivateKeysResultV2");
        };
        this.createReadOnlySession = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_read_only_session", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_READ_ONLY_SESSION",
            }, "createReadOnlySessionResult");
        };
        this.createReadWriteSession = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_read_write_session", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_READ_WRITE_SESSION",
            }, "createReadWriteSessionResult");
        };
        this.createSubOrganization = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_sub_organization", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_SUB_ORGANIZATION_V5",
            }, "createSubOrganizationResultV6");
        };
        this.createUserTag = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_user_tag", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_USER_TAG",
            }, "createUserTagResult");
        };
        this.createUsers = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_users", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_USERS_V2",
            }, "createUsersResult");
        };
        this.createWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_WALLET",
            }, "createWalletResult");
        };
        this.createWalletAccounts = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/create_wallet_accounts", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_CREATE_WALLET_ACCOUNTS",
            }, "createWalletAccountsResult");
        };
        this.deleteApiKeys = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/delete_api_keys", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_API_KEYS",
            }, "deleteApiKeysResult");
        };
        this.deleteAuthenticators = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/delete_authenticators", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_AUTHENTICATORS",
            }, "deleteAuthenticatorsResult");
        };
        this.deleteInvitation = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/delete_invitation", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_INVITATION",
            }, "deleteInvitationResult");
        };
        this.deleteOauthProviders = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/delete_oauth_providers", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_OAUTH_PROVIDERS",
            }, "deleteOauthProvidersResult");
        };
        this.deletePolicy = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/delete_policy", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_POLICY",
            }, "deletePolicyResult");
        };
        this.deletePrivateKeyTags = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/delete_private_key_tags", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_PRIVATE_KEY_TAGS",
            }, "deletePrivateKeyTagsResult");
        };
        this.deleteUserTags = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/delete_user_tags", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_USER_TAGS",
            }, "deleteUserTagsResult");
        };
        this.deleteUsers = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/delete_users", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_DELETE_USERS",
            }, "deleteUsersResult");
        };
        this.emailAuth = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/email_auth", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_EMAIL_AUTH_V2",
            }, "emailAuthResult");
        };
        this.exportPrivateKey = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/export_private_key", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_EXPORT_PRIVATE_KEY",
            }, "exportPrivateKeyResult");
        };
        this.exportWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/export_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_EXPORT_WALLET",
            }, "exportWalletResult");
        };
        this.exportWalletAccount = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/export_wallet_account", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT",
            }, "exportWalletAccountResult");
        };
        this.importPrivateKey = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/import_private_key", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_IMPORT_PRIVATE_KEY",
            }, "importPrivateKeyResult");
        };
        this.importWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/import_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_IMPORT_WALLET",
            }, "importWalletResult");
        };
        this.initImportPrivateKey = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/init_import_private_key", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_IMPORT_PRIVATE_KEY",
            }, "initImportPrivateKeyResult");
        };
        this.initImportWallet = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/init_import_wallet", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_IMPORT_WALLET",
            }, "initImportWalletResult");
        };
        this.initUserEmailRecovery = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/init_user_email_recovery", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_INIT_USER_EMAIL_RECOVERY",
            }, "initUserEmailRecoveryResult");
        };
        this.oauth = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/oauth", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_OAUTH",
            }, "oauthResult");
        };
        this.recoverUser = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/recover_user", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_RECOVER_USER",
            }, "recoverUserResult");
        };
        this.rejectActivity = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.activityDecision("/public/v1/submit/reject_activity", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_REJECT_ACTIVITY",
            });
        };
        this.removeOrganizationFeature = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/remove_organization_feature", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_REMOVE_ORGANIZATION_FEATURE",
            }, "removeOrganizationFeatureResult");
        };
        this.setOrganizationFeature = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/set_organization_feature", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_SET_ORGANIZATION_FEATURE",
            }, "setOrganizationFeatureResult");
        };
        this.signRawPayload = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/sign_raw_payload", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_SIGN_RAW_PAYLOAD_V2",
            }, "signRawPayloadResult");
        };
        this.signRawPayloads = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/sign_raw_payloads", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_SIGN_RAW_PAYLOADS",
            }, "signRawPayloadsResult");
        };
        this.signTransaction = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/sign_transaction", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_SIGN_TRANSACTION_V2",
            }, "signTransactionResult");
        };
        this.updatePolicy = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/update_policy", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_POLICY",
            }, "updatePolicyResult");
        };
        this.updatePrivateKeyTag = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/update_private_key_tag", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_PRIVATE_KEY_TAG",
            }, "updatePrivateKeyTagResult");
        };
        this.updateRootQuorum = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/update_root_quorum", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_ROOT_QUORUM",
            }, "updateRootQuorumResult");
        };
        this.updateUser = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/update_user", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_USER",
            }, "updateUserResult");
        };
        this.updateUserTag = async (input) => {
            const { organizationId, timestampMs, ...rest } = input;
            const currentUser = await getStorageValue(StorageKeys.CurrentUser);
            return this.command("/public/v1/submit/update_user_tag", {
                parameters: rest,
                organizationId: organizationId ??
                    currentUser?.organization?.organizationId ??
                    this.config.organizationId,
                timestampMs: timestampMs ?? String(Date.now()),
                type: "ACTIVITY_TYPE_UPDATE_USER_TAG",
            }, "updateUserTagResult");
        };
        this.config = config;
    }
    async request(url, body) {
        const fullUrl = this.config.apiBaseUrl + url;
        const stringifiedBody = JSON.stringify(body);
        var headers = {
            "X-Client-Version": VERSION,
        };
        if (this.config.stamper) {
            const stamp = await this.config.stamper.stamp(stringifiedBody);
            headers[stamp.stampHeaderName] = stamp.stampHeaderValue;
        }
        if (this.config.readOnlySession) {
            headers["X-Session"] = this.config.readOnlySession;
        }
        const response = await fetch(fullUrl, {
            method: "POST",
            headers: headers,
            body: stringifiedBody,
            redirect: "follow",
        });
        if (!response.ok) {
            let res;
            try {
                res = await response.json();
            }
            catch (_) {
                throw new Error(`${response.status} ${response.statusText}`);
            }
            throw new TurnkeyRequestError(res);
        }
        const data = await response.json();
        return data;
    }
    async command(url, body, resultKey) {
        const POLLING_DURATION = this.config.activityPoller?.duration ?? 1000;
        const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
        const responseData = (await this.request(url, body));
        const activityId = responseData["activity"]["id"];
        const activityStatus = responseData["activity"]["status"];
        if (activityStatus !== "ACTIVITY_STATUS_PENDING") {
            return {
                ...responseData["activity"]["result"][`${resultKey}`],
                activity: {
                    id: activityId,
                    status: activityStatus,
                },
            };
        }
        const pollStatus = async () => {
            const pollBody = { activityId: activityId };
            const pollData = (await this.getActivity(pollBody));
            const activityStatus = pollData["activity"]["status"];
            if (activityStatus === "ACTIVITY_STATUS_PENDING") {
                await delay(POLLING_DURATION);
                return await pollStatus();
            }
            else {
                return {
                    ...pollData["activity"]["result"][`${resultKey}`],
                    activity: {
                        id: activityId,
                        status: activityStatus,
                    },
                };
            }
        };
        return await pollStatus();
    }
    async activityDecision(url, body) {
        const data = (await this.request(url, body));
        const activityId = data["activity"]["id"];
        const activityStatus = data["activity"]["status"];
        return {
            ...data["activity"]["result"],
            activity: {
                id: activityId,
                status: activityStatus,
            },
        };
    }
}

export { TurnkeySDKClientBase };
//# sourceMappingURL=sdk-client-base.mjs.map
