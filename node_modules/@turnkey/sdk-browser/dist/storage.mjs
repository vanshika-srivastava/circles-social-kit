import WindowWrapper from './__polyfills__/window.mjs';

var StorageKeys;
(function (StorageKeys) {
    StorageKeys["AuthBundle"] = "@turnkey/auth_bundle";
    StorageKeys["CurrentUser"] = "@turnkey/current_user";
    StorageKeys["ReadWriteSession"] = "@turnkey/read_write_session";
})(StorageKeys || (StorageKeys = {}));
var StorageLocation;
(function (StorageLocation) {
    StorageLocation["Local"] = "local";
    StorageLocation["Secure"] = "secure";
    StorageLocation["Session"] = "session";
})(StorageLocation || (StorageLocation = {}));
const STORAGE_VALUE_LOCATIONS = {
    [StorageKeys.AuthBundle]: StorageLocation.Secure,
    [StorageKeys.CurrentUser]: StorageLocation.Local,
    [StorageKeys.ReadWriteSession]: StorageLocation.Secure,
};
const STORAGE_LOCATIONS = {
    [StorageLocation.Local]: WindowWrapper.localStorage,
    [StorageLocation.Secure]: WindowWrapper.localStorage,
    [StorageLocation.Session]: WindowWrapper.localStorage,
};
const getStorageValue = async (storageKey) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    const storageItem = browserStorageLocation.getItem(storageKey);
    return storageItem ? JSON.parse(storageItem) : undefined;
};
const setStorageValue = async (storageKey, storageValue) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    browserStorageLocation.setItem(storageKey, JSON.stringify(storageValue));
};
const removeStorageValue = async (storageKey) => {
    const storageLocation = STORAGE_VALUE_LOCATIONS[storageKey];
    const browserStorageLocation = STORAGE_LOCATIONS[storageLocation];
    browserStorageLocation.removeItem(storageKey);
};

export { StorageKeys, getStorageValue, removeStorageValue, setStorageValue };
//# sourceMappingURL=storage.mjs.map
