{
  "version": 3,
  "sources": ["../../sha256-uint8array/dist/sha256-uint8array.mjs"],
  "sourcesContent": ["/**\n * sha256-uint8array.ts\n */\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311\nconst K = [\n    0x428a2f98 | 0, 0x71374491 | 0, 0xb5c0fbcf | 0, 0xe9b5dba5 | 0,\n    0x3956c25b | 0, 0x59f111f1 | 0, 0x923f82a4 | 0, 0xab1c5ed5 | 0,\n    0xd807aa98 | 0, 0x12835b01 | 0, 0x243185be | 0, 0x550c7dc3 | 0,\n    0x72be5d74 | 0, 0x80deb1fe | 0, 0x9bdc06a7 | 0, 0xc19bf174 | 0,\n    0xe49b69c1 | 0, 0xefbe4786 | 0, 0x0fc19dc6 | 0, 0x240ca1cc | 0,\n    0x2de92c6f | 0, 0x4a7484aa | 0, 0x5cb0a9dc | 0, 0x76f988da | 0,\n    0x983e5152 | 0, 0xa831c66d | 0, 0xb00327c8 | 0, 0xbf597fc7 | 0,\n    0xc6e00bf3 | 0, 0xd5a79147 | 0, 0x06ca6351 | 0, 0x14292967 | 0,\n    0x27b70a85 | 0, 0x2e1b2138 | 0, 0x4d2c6dfc | 0, 0x53380d13 | 0,\n    0x650a7354 | 0, 0x766a0abb | 0, 0x81c2c92e | 0, 0x92722c85 | 0,\n    0xa2bfe8a1 | 0, 0xa81a664b | 0, 0xc24b8b70 | 0, 0xc76c51a3 | 0,\n    0xd192e819 | 0, 0xd6990624 | 0, 0xf40e3585 | 0, 0x106aa070 | 0,\n    0x19a4c116 | 0, 0x1e376c08 | 0, 0x2748774c | 0, 0x34b0bcb5 | 0,\n    0x391c0cb3 | 0, 0x4ed8aa4a | 0, 0x5b9cca4f | 0, 0x682e6ff3 | 0,\n    0x748f82ee | 0, 0x78a5636f | 0, 0x84c87814 | 0, 0x8cc70208 | 0,\n    0x90befffa | 0, 0xa4506ceb | 0, 0xbef9a3f7 | 0, 0xc67178f2 | 0,\n];\nconst algorithms = {\n    sha256: 1,\n};\nexport function createHash(algorithm) {\n    if (algorithm && !algorithms[algorithm] && !algorithms[algorithm.toLowerCase()]) {\n        throw new Error(\"Digest method not supported\");\n    }\n    return new Hash();\n}\nexport class Hash {\n    constructor() {\n        // first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n        this.A = 0x6a09e667 | 0;\n        this.B = 0xbb67ae85 | 0;\n        this.C = 0x3c6ef372 | 0;\n        this.D = 0xa54ff53a | 0;\n        this.E = 0x510e527f | 0;\n        this.F = 0x9b05688c | 0;\n        this.G = 0x1f83d9ab | 0;\n        this.H = 0x5be0cd19 | 0;\n        this._size = 0;\n        this._sp = 0; // surrogate pair\n        if (!sharedBuffer || sharedOffset >= 8000 /* N.allocTotal */) {\n            sharedBuffer = new ArrayBuffer(8000 /* N.allocTotal */);\n            sharedOffset = 0;\n        }\n        this._byte = new Uint8Array(sharedBuffer, sharedOffset, 80 /* N.allocBytes */);\n        this._word = new Int32Array(sharedBuffer, sharedOffset, 20 /* N.allocWords */);\n        sharedOffset += 80 /* N.allocBytes */;\n    }\n    update(data) {\n        // data: string\n        if (\"string\" === typeof data) {\n            return this._utf8(data);\n        }\n        // data: undefined\n        if (data == null) {\n            throw new TypeError(\"Invalid type: \" + typeof data);\n        }\n        const byteOffset = data.byteOffset;\n        const length = data.byteLength;\n        let blocks = (length / 64 /* N.inputBytes */) | 0;\n        let offset = 0;\n        // longer than 1 block\n        if (blocks && !(byteOffset & 3) && !(this._size % 64 /* N.inputBytes */)) {\n            const block = new Int32Array(data.buffer, byteOffset, blocks * 16 /* N.inputWords */);\n            while (blocks--) {\n                this._int32(block, offset >> 2);\n                offset += 64 /* N.inputBytes */;\n            }\n            this._size += offset;\n        }\n        // data: TypedArray | DataView\n        const BYTES_PER_ELEMENT = data.BYTES_PER_ELEMENT;\n        if (BYTES_PER_ELEMENT !== 1 && data.buffer) {\n            const rest = new Uint8Array(data.buffer, byteOffset + offset, length - offset);\n            return this._uint8(rest);\n        }\n        // no more bytes\n        if (offset === length)\n            return this;\n        // data: Uint8Array | Int8Array\n        return this._uint8(data, offset);\n    }\n    _uint8(data, offset) {\n        const { _byte, _word } = this;\n        const length = data.length;\n        offset = offset | 0;\n        while (offset < length) {\n            const start = this._size % 64 /* N.inputBytes */;\n            let index = start;\n            while (offset < length && index < 64 /* N.inputBytes */) {\n                _byte[index++] = data[offset++];\n            }\n            if (index >= 64 /* N.inputBytes */) {\n                this._int32(_word);\n            }\n            this._size += index - start;\n        }\n        return this;\n    }\n    _utf8(text) {\n        const { _byte, _word } = this;\n        const length = text.length;\n        let surrogate = this._sp;\n        for (let offset = 0; offset < length;) {\n            const start = this._size % 64 /* N.inputBytes */;\n            let index = start;\n            while (offset < length && index < 64 /* N.inputBytes */) {\n                let code = text.charCodeAt(offset++) | 0;\n                if (code < 0x80) {\n                    // ASCII characters\n                    _byte[index++] = code;\n                }\n                else if (code < 0x800) {\n                    // 2 bytes\n                    _byte[index++] = 0xC0 | (code >>> 6);\n                    _byte[index++] = 0x80 | (code & 0x3F);\n                }\n                else if (code < 0xD800 || code > 0xDFFF) {\n                    // 3 bytes\n                    _byte[index++] = 0xE0 | (code >>> 12);\n                    _byte[index++] = 0x80 | ((code >>> 6) & 0x3F);\n                    _byte[index++] = 0x80 | (code & 0x3F);\n                }\n                else if (surrogate) {\n                    // 4 bytes - surrogate pair\n                    code = ((surrogate & 0x3FF) << 10) + (code & 0x3FF) + 0x10000;\n                    _byte[index++] = 0xF0 | (code >>> 18);\n                    _byte[index++] = 0x80 | ((code >>> 12) & 0x3F);\n                    _byte[index++] = 0x80 | ((code >>> 6) & 0x3F);\n                    _byte[index++] = 0x80 | (code & 0x3F);\n                    surrogate = 0;\n                }\n                else {\n                    surrogate = code;\n                }\n            }\n            if (index >= 64 /* N.inputBytes */) {\n                this._int32(_word);\n                _word[0] = _word[16 /* N.inputWords */];\n            }\n            this._size += index - start;\n        }\n        this._sp = surrogate;\n        return this;\n    }\n    _int32(data, offset) {\n        let { A, B, C, D, E, F, G, H } = this;\n        let i = 0;\n        offset = offset | 0;\n        while (i < 16 /* N.inputWords */) {\n            W[i++] = swap32(data[offset++]);\n        }\n        for (i = 16 /* N.inputWords */; i < 64 /* N.workWords */; i++) {\n            W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0;\n        }\n        for (i = 0; i < 64 /* N.workWords */; i++) {\n            const T1 = (H + sigma1(E) + ch(E, F, G) + K[i] + W[i]) | 0;\n            const T2 = (sigma0(A) + maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        this.A = (A + this.A) | 0;\n        this.B = (B + this.B) | 0;\n        this.C = (C + this.C) | 0;\n        this.D = (D + this.D) | 0;\n        this.E = (E + this.E) | 0;\n        this.F = (F + this.F) | 0;\n        this.G = (G + this.G) | 0;\n        this.H = (H + this.H) | 0;\n    }\n    digest(encoding) {\n        const { _byte, _word } = this;\n        let i = (this._size % 64 /* N.inputBytes */) | 0;\n        _byte[i++] = 0x80;\n        // pad 0 for current word\n        while (i & 3) {\n            _byte[i++] = 0;\n        }\n        i >>= 2;\n        if (i > 14 /* N.highIndex */) {\n            while (i < 16 /* N.inputWords */) {\n                _word[i++] = 0;\n            }\n            i = 0;\n            this._int32(_word);\n        }\n        // pad 0 for rest words\n        while (i < 16 /* N.inputWords */) {\n            _word[i++] = 0;\n        }\n        // input size\n        const bits64 = this._size * 8;\n        const low32 = (bits64 & 0xffffffff) >>> 0;\n        const high32 = (bits64 - low32) / 0x100000000;\n        if (high32)\n            _word[14 /* N.highIndex */] = swap32(high32);\n        if (low32)\n            _word[15 /* N.lowIndex */] = swap32(low32);\n        this._int32(_word);\n        return (encoding === \"hex\") ? this._hex() : this._bin();\n    }\n    _hex() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return hex32(A) + hex32(B) + hex32(C) + hex32(D) + hex32(E) + hex32(F) + hex32(G) + hex32(H);\n    }\n    _bin() {\n        const { A, B, C, D, E, F, G, H, _byte, _word } = this;\n        _word[0] = swap32(A);\n        _word[1] = swap32(B);\n        _word[2] = swap32(C);\n        _word[3] = swap32(D);\n        _word[4] = swap32(E);\n        _word[5] = swap32(F);\n        _word[6] = swap32(G);\n        _word[7] = swap32(H);\n        return _byte.slice(0, 32);\n    }\n}\nconst W = new Int32Array(64 /* N.workWords */);\nlet sharedBuffer;\nlet sharedOffset = 0;\nconst hex32 = num => (num + 0x100000000).toString(16).substr(-8);\nconst swapLE = (c => (((c << 24) & 0xff000000) | ((c << 8) & 0xff0000) | ((c >> 8) & 0xff00) | ((c >> 24) & 0xff)));\nconst swapBE = (c => c);\nconst swap32 = isBE() ? swapBE : swapLE;\nconst ch = (x, y, z) => (z ^ (x & (y ^ z)));\nconst maj = (x, y, z) => ((x & y) | (z & (x | y)));\nconst sigma0 = x => ((x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10));\nconst sigma1 = x => ((x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7));\nconst gamma0 = x => ((x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3));\nconst gamma1 = x => ((x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10));\nfunction isBE() {\n    const buf = new Uint8Array(new Uint16Array([0xFEFF]).buffer); // BOM\n    return (buf[0] === 0xFE);\n}\n"],
  "mappings": "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",
  "names": []
}
