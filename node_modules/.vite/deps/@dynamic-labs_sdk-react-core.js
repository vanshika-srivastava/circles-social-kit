"use client";
import {
  AccessBlockedError,
  AccountExistsError,
  AlgorandIcon,
  AndroidIcon,
  AppleIcon,
  AuthModeEnum,
  AuthStorageEnum,
  BitcoinIcon,
  BrandIcon,
  BraveIcon,
  CaptchaWaveIcon,
  ChainEnum,
  ChainRpcProviders,
  ChainalysisError,
  ChromeIcon,
  Configuration,
  CookieInvalidError,
  CosmosIcon,
  CustomFieldNotUniqueError,
  CustomFieldType,
  DeferredPromise,
  DiscordIcon,
  DynamicError,
  DynamicJwtFromJSON,
  EdgeIcon,
  EmailAlreadyExistsError,
  EmailProviderError,
  EmailVerificationError,
  EmbeddedWalletAuthType,
  EmbeddedWalletChainEnum,
  EmbeddedWalletException,
  EmbeddedWalletProviderEnum,
  EmbeddedWalletVersionEnum,
  EnvironmentEnum,
  EthereumIcon,
  ExternalAuthError,
  FetchService,
  FirefoxIcon,
  FlowIcon,
  GateBlockedError,
  GetAccountBalancesNetworkIdEnum,
  HardwareWalletEnum,
  HelpdeskIcon,
  InsufficientFundsError,
  InvalidPhoneNumberError,
  JwtVerifiedCredentialFormatEnum,
  KycFieldType,
  Logger,
  MFADeviceType,
  MergeAccountsConfirmationError,
  MfaBackupCodeAcknowledgement,
  MfaInvalidOtpError,
  MfaRateLimitedError,
  MinifiedDynamicJwtFromJSON,
  MissingEnvironmentIdError,
  MissingPublicAddressError,
  NextViewEnum,
  NoAccessError,
  Oauth2Service,
  OperaIcon,
  PasswordSourceTypeEnum,
  PlatformService,
  ProviderEnum,
  SDKApi,
  SafariIcon,
  SandboxMaximumThresholdReachedError,
  SdkViewSectionType,
  SdkViewType,
  SignInProviderEnum,
  SignInWithEmailIcon,
  SlackIcon,
  SmsVerificationError,
  SocialAccountAlreadyExistsError,
  SocialIcon,
  SocialOAuthErrorCode,
  SocialSignInProviderEnum,
  SolanaIcon,
  StarknetIcon,
  StorageService,
  TooManyEmailVerificationsError,
  TransactionGasCannotBeSponsoredError,
  TwitterIcon,
  UnprocessableEntityErrorCode,
  UserHasAccountWithEmailError,
  UserProfileIcon,
  UserRejectedRequestError,
  UserRejectedTransactionError,
  UsernameAlreadyExistsError,
  VerificationDataCollectionError,
  VerifyRequestFromJSON,
  WalletAddressType,
  WalletBookContextProvider,
  WalletConnectIcon,
  WalletIcon,
  WalletNotDeployedError,
  WalletProviderEnum,
  WalletUsedError,
  ceil,
  createStorageService,
  eventemitter3_default,
  findSocialIcon,
  findWalletBookWallet,
  findWalletGroupOverride,
  getAndroidVersion,
  getChainInfo,
  getChainInfoWithOverrides,
  getIconicSpriteUrl,
  getTLD,
  getWalletBookCdnUrl,
  getWalletBookWallet,
  getWalletConnectorByKey,
  getWalletGroup,
  getWalletLinks,
  getWalletPrimaryColor,
  hexToString,
  isAccountAbstractionConnector,
  isAndroid,
  isBitcoinConnector,
  isBloctoConnector,
  isCoinbaseMpcWalletConnector,
  isEmailOTPWalletConnector,
  isEmailWalletConnector,
  isEmbeddedConnector,
  isHardwareWalletConnector,
  isHex,
  isIOS,
  isIPad,
  isIPhone,
  isIPhone8OrEarlier,
  isLegacySafari,
  isMagicConnector,
  isMobile,
  isPasskeyWalletConnector,
  isPhantomRedirectConnector,
  isSameAddress,
  isSendBalanceWalletConnector,
  isSessionKeyCompatibleWallet,
  isSessionKeyCompatibleWalletConnector,
  isSocialWalletConnector,
  isTurnkeyWalletConnector,
  isWalletConnectConnector,
  isWalletEventSupported,
  logger,
  parseChainId,
  runSafe,
  setChainInfoOverrides,
  sleep,
  useWalletBookCdn,
  useWalletBookContext
} from "./chunk-RLTA2JPD.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react_dom
} from "./chunk-T2SWDQEL.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/country-list/data.json
var require_data = __commonJS({
  "node_modules/country-list/data.json"(exports2, module2) {
    module2.exports = [
      { code: "AD", name: "Andorra" },
      { code: "AE", name: "United Arab Emirates" },
      { code: "AF", name: "Afghanistan" },
      { code: "AG", name: "Antigua and Barbuda" },
      { code: "AI", name: "Anguilla" },
      { code: "AL", name: "Albania" },
      { code: "AM", name: "Armenia" },
      { code: "AO", name: "Angola" },
      { code: "AQ", name: "Antarctica" },
      { code: "AR", name: "Argentina" },
      { code: "AS", name: "American Samoa" },
      { code: "AT", name: "Austria" },
      { code: "AU", name: "Australia" },
      { code: "AW", name: "Aruba" },
      { code: "AX", name: "Åland Islands" },
      { code: "AZ", name: "Azerbaijan" },
      { code: "BA", name: "Bosnia and Herzegovina" },
      { code: "BB", name: "Barbados" },
      { code: "BD", name: "Bangladesh" },
      { code: "BE", name: "Belgium" },
      { code: "BF", name: "Burkina Faso" },
      { code: "BG", name: "Bulgaria" },
      { code: "BH", name: "Bahrain" },
      { code: "BI", name: "Burundi" },
      { code: "BJ", name: "Benin" },
      { code: "BL", name: "Saint Barthélemy" },
      { code: "BM", name: "Bermuda" },
      { code: "BN", name: "Brunei Darussalam" },
      { code: "BO", name: "Bolivia, Plurinational State of" },
      { code: "BQ", name: "Bonaire, Sint Eustatius and Saba" },
      { code: "BR", name: "Brazil" },
      { code: "BS", name: "Bahamas" },
      { code: "BT", name: "Bhutan" },
      { code: "BV", name: "Bouvet Island" },
      { code: "BW", name: "Botswana" },
      { code: "BY", name: "Belarus" },
      { code: "BZ", name: "Belize" },
      { code: "CA", name: "Canada" },
      { code: "CC", name: "Cocos (Keeling) Islands" },
      { code: "CD", name: "Congo, Democratic Republic of the" },
      { code: "CF", name: "Central African Republic" },
      { code: "CG", name: "Congo" },
      { code: "CH", name: "Switzerland" },
      { code: "CI", name: "Côte d'Ivoire" },
      { code: "CK", name: "Cook Islands" },
      { code: "CL", name: "Chile" },
      { code: "CM", name: "Cameroon" },
      { code: "CN", name: "China" },
      { code: "CO", name: "Colombia" },
      { code: "CR", name: "Costa Rica" },
      { code: "CU", name: "Cuba" },
      { code: "CV", name: "Cabo Verde" },
      { code: "CW", name: "Curaçao" },
      { code: "CX", name: "Christmas Island" },
      { code: "CY", name: "Cyprus" },
      { code: "CZ", name: "Czechia" },
      { code: "DE", name: "Germany" },
      { code: "DJ", name: "Djibouti" },
      { code: "DK", name: "Denmark" },
      { code: "DM", name: "Dominica" },
      { code: "DO", name: "Dominican Republic" },
      { code: "DZ", name: "Algeria" },
      { code: "EC", name: "Ecuador" },
      { code: "EE", name: "Estonia" },
      { code: "EG", name: "Egypt" },
      { code: "EH", name: "Western Sahara" },
      { code: "ER", name: "Eritrea" },
      { code: "ES", name: "Spain" },
      { code: "ET", name: "Ethiopia" },
      { code: "FI", name: "Finland" },
      { code: "FJ", name: "Fiji" },
      { code: "FK", name: "Falkland Islands (Malvinas)" },
      { code: "FM", name: "Micronesia, Federated States of" },
      { code: "FO", name: "Faroe Islands" },
      { code: "FR", name: "France" },
      { code: "GA", name: "Gabon" },
      { code: "GB", name: "United Kingdom of Great Britain and Northern Ireland" },
      { code: "GD", name: "Grenada" },
      { code: "GE", name: "Georgia" },
      { code: "GF", name: "French Guiana" },
      { code: "GG", name: "Guernsey" },
      { code: "GH", name: "Ghana" },
      { code: "GI", name: "Gibraltar" },
      { code: "GL", name: "Greenland" },
      { code: "GM", name: "Gambia" },
      { code: "GN", name: "Guinea" },
      { code: "GP", name: "Guadeloupe" },
      { code: "GQ", name: "Equatorial Guinea" },
      { code: "GR", name: "Greece" },
      { code: "GS", name: "South Georgia and the South Sandwich Islands" },
      { code: "GT", name: "Guatemala" },
      { code: "GU", name: "Guam" },
      { code: "GW", name: "Guinea-Bissau" },
      { code: "GY", name: "Guyana" },
      { code: "HK", name: "Hong Kong" },
      { code: "HM", name: "Heard Island and McDonald Islands" },
      { code: "HN", name: "Honduras" },
      { code: "HR", name: "Croatia" },
      { code: "HT", name: "Haiti" },
      { code: "HU", name: "Hungary" },
      { code: "ID", name: "Indonesia" },
      { code: "IE", name: "Ireland" },
      { code: "IL", name: "Israel" },
      { code: "IM", name: "Isle of Man" },
      { code: "IN", name: "India" },
      { code: "IO", name: "British Indian Ocean Territory" },
      { code: "IQ", name: "Iraq" },
      { code: "IR", name: "Iran, Islamic Republic of" },
      { code: "IS", name: "Iceland" },
      { code: "IT", name: "Italy" },
      { code: "JE", name: "Jersey" },
      { code: "JM", name: "Jamaica" },
      { code: "JO", name: "Jordan" },
      { code: "JP", name: "Japan" },
      { code: "KE", name: "Kenya" },
      { code: "KG", name: "Kyrgyzstan" },
      { code: "KH", name: "Cambodia" },
      { code: "KI", name: "Kiribati" },
      { code: "KM", name: "Comoros" },
      { code: "KN", name: "Saint Kitts and Nevis" },
      { code: "KP", name: "Korea, Democratic People's Republic of" },
      { code: "KR", name: "Korea, Republic of" },
      { code: "KW", name: "Kuwait" },
      { code: "KY", name: "Cayman Islands" },
      { code: "KZ", name: "Kazakhstan" },
      { code: "LA", name: "Lao People's Democratic Republic" },
      { code: "LB", name: "Lebanon" },
      { code: "LC", name: "Saint Lucia" },
      { code: "LI", name: "Liechtenstein" },
      { code: "LK", name: "Sri Lanka" },
      { code: "LR", name: "Liberia" },
      { code: "LS", name: "Lesotho" },
      { code: "LT", name: "Lithuania" },
      { code: "LU", name: "Luxembourg" },
      { code: "LV", name: "Latvia" },
      { code: "LY", name: "Libya" },
      { code: "MA", name: "Morocco" },
      { code: "MC", name: "Monaco" },
      { code: "MD", name: "Moldova, Republic of" },
      { code: "ME", name: "Montenegro" },
      { code: "MF", name: "Saint Martin, (French part)" },
      { code: "MG", name: "Madagascar" },
      { code: "MH", name: "Marshall Islands" },
      { code: "MK", name: "North Macedonia" },
      { code: "ML", name: "Mali" },
      { code: "MM", name: "Myanmar" },
      { code: "MN", name: "Mongolia" },
      { code: "MO", name: "Macao" },
      { code: "MP", name: "Northern Mariana Islands" },
      { code: "MQ", name: "Martinique" },
      { code: "MR", name: "Mauritania" },
      { code: "MS", name: "Montserrat" },
      { code: "MT", name: "Malta" },
      { code: "MU", name: "Mauritius" },
      { code: "MV", name: "Maldives" },
      { code: "MW", name: "Malawi" },
      { code: "MX", name: "Mexico" },
      { code: "MY", name: "Malaysia" },
      { code: "MZ", name: "Mozambique" },
      { code: "NA", name: "Namibia" },
      { code: "NC", name: "New Caledonia" },
      { code: "NE", name: "Niger" },
      { code: "NF", name: "Norfolk Island" },
      { code: "NG", name: "Nigeria" },
      { code: "NI", name: "Nicaragua" },
      { code: "NL", name: "Netherlands" },
      { code: "NO", name: "Norway" },
      { code: "NP", name: "Nepal" },
      { code: "NR", name: "Nauru" },
      { code: "NU", name: "Niue" },
      { code: "NZ", name: "New Zealand" },
      { code: "OM", name: "Oman" },
      { code: "PA", name: "Panama" },
      { code: "PE", name: "Peru" },
      { code: "PF", name: "French Polynesia" },
      { code: "PG", name: "Papua New Guinea" },
      { code: "PH", name: "Philippines" },
      { code: "PK", name: "Pakistan" },
      { code: "PL", name: "Poland" },
      { code: "PM", name: "Saint Pierre and Miquelon" },
      { code: "PN", name: "Pitcairn" },
      { code: "PR", name: "Puerto Rico" },
      { code: "PS", name: "Palestine, State of" },
      { code: "PT", name: "Portugal" },
      { code: "PW", name: "Palau" },
      { code: "PY", name: "Paraguay" },
      { code: "QA", name: "Qatar" },
      { code: "RE", name: "Réunion" },
      { code: "RO", name: "Romania" },
      { code: "RS", name: "Serbia" },
      { code: "RU", name: "Russian Federation" },
      { code: "RW", name: "Rwanda" },
      { code: "SA", name: "Saudi Arabia" },
      { code: "SB", name: "Solomon Islands" },
      { code: "SC", name: "Seychelles" },
      { code: "SD", name: "Sudan" },
      { code: "SE", name: "Sweden" },
      { code: "SG", name: "Singapore" },
      { code: "SH", name: "Saint Helena, Ascension and Tristan da Cunha" },
      { code: "SI", name: "Slovenia" },
      { code: "SJ", name: "Svalbard and Jan Mayen" },
      { code: "SK", name: "Slovakia" },
      { code: "SL", name: "Sierra Leone" },
      { code: "SM", name: "San Marino" },
      { code: "SN", name: "Senegal" },
      { code: "SO", name: "Somalia" },
      { code: "SR", name: "Suriname" },
      { code: "SS", name: "South Sudan" },
      { code: "ST", name: "Sao Tome and Principe" },
      { code: "SV", name: "El Salvador" },
      { code: "SX", name: "Sint Maarten, (Dutch part)" },
      { code: "SY", name: "Syrian Arab Republic" },
      { code: "SZ", name: "Eswatini" },
      { code: "TC", name: "Turks and Caicos Islands" },
      { code: "TD", name: "Chad" },
      { code: "TF", name: "French Southern Territories" },
      { code: "TG", name: "Togo" },
      { code: "TH", name: "Thailand" },
      { code: "TJ", name: "Tajikistan" },
      { code: "TK", name: "Tokelau" },
      { code: "TL", name: "Timor-Leste" },
      { code: "TM", name: "Turkmenistan" },
      { code: "TN", name: "Tunisia" },
      { code: "TO", name: "Tonga" },
      { code: "TR", name: "Türkiye" },
      { code: "TT", name: "Trinidad and Tobago" },
      { code: "TV", name: "Tuvalu" },
      { code: "TW", name: "Taiwan, Province of China" },
      { code: "TZ", name: "Tanzania, United Republic of" },
      { code: "UA", name: "Ukraine" },
      { code: "UG", name: "Uganda" },
      { code: "UM", name: "United States Minor Outlying Islands" },
      { code: "US", name: "United States of America" },
      { code: "UY", name: "Uruguay" },
      { code: "UZ", name: "Uzbekistan" },
      { code: "VA", name: "Holy See" },
      { code: "VC", name: "Saint Vincent and the Grenadines" },
      { code: "VE", name: "Venezuela, Bolivarian Republic of" },
      { code: "VG", name: "Virgin Islands, British" },
      { code: "VI", name: "Virgin Islands, U.S." },
      { code: "VN", name: "Viet Nam" },
      { code: "VU", name: "Vanuatu" },
      { code: "WF", name: "Wallis and Futuna" },
      { code: "WS", name: "Samoa" },
      { code: "YE", name: "Yemen" },
      { code: "YT", name: "Mayotte" },
      { code: "ZA", name: "South Africa" },
      { code: "ZM", name: "Zambia" },
      { code: "ZW", name: "Zimbabwe" }
    ];
  }
});

// node_modules/country-list/country-list.js
var require_country_list = __commonJS({
  "node_modules/country-list/country-list.js"(exports2) {
    "use strict";
    var data = require_data();
    var nameMap = {};
    var codeMap = {};
    data.forEach(mapCodeAndName);
    function mapCodeAndName(country) {
      nameMap[country.name.toLowerCase()] = country.code;
      codeMap[country.code.toLowerCase()] = country.name;
    }
    exports2.overwrite = function overwrite(countries) {
      if (!countries || !countries.length) return;
      countries.forEach(function(country) {
        var foundIndex = data.findIndex(function(item) {
          return item.code === country.code;
        });
        data[foundIndex] = country;
        mapCodeAndName(country);
      });
    };
    exports2.getCode = function getCode2(name) {
      return nameMap[name.toLowerCase()];
    };
    exports2.getName = function getName(code) {
      return codeMap[code.toLowerCase()];
    };
    exports2.getNames = function getNames() {
      return data.map(function(country) {
        return country.name;
      });
    };
    exports2.getCodes = function getCodes() {
      return data.map(function(country) {
        return country.code;
      });
    };
    exports2.getCodeList = function getCodeList() {
      return codeMap;
    };
    exports2.getNameList = function getNameList() {
      return nameMap;
    };
    exports2.getData = function getData2() {
      return data;
    };
  }
});

// node_modules/void-elements/index.js
var require_void_elements = __commonJS({
  "node_modules/void-elements/index.js"(exports2, module2) {
    module2.exports = {
      "area": true,
      "base": true,
      "br": true,
      "col": true,
      "embed": true,
      "hr": true,
      "img": true,
      "input": true,
      "link": true,
      "meta": true,
      "param": true,
      "source": true,
      "track": true,
      "wbr": true
    };
  }
});

// node_modules/lodash/_baseHas.js
var require_baseHas = __commonJS({
  "node_modules/lodash/_baseHas.js"(exports2, module2) {
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    function baseHas(object3, key) {
      return object3 != null && hasOwnProperty12.call(object3, key);
    }
    module2.exports = baseHas;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports2, module2) {
    var isArray2 = Array.isArray;
    module2.exports = isArray2;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports2, module2) {
    var freeGlobal2 = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal2;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports2, module2) {
    var freeGlobal2 = require_freeGlobal();
    var freeSelf2 = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
    module2.exports = root2;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports2, module2) {
    var root2 = require_root();
    var Symbol3 = root2.Symbol;
    module2.exports = Symbol3;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports2, module2) {
    var Symbol3 = require_Symbol();
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    var nativeObjectToString3 = objectProto15.toString;
    var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
    function getRawTag2(value) {
      var isOwn = hasOwnProperty12.call(value, symToStringTag3), tag = value[symToStringTag3];
      try {
        value[symToStringTag3] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString3.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag3] = tag;
        } else {
          delete value[symToStringTag3];
        }
      }
      return result;
    }
    module2.exports = getRawTag2;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports2, module2) {
    var objectProto15 = Object.prototype;
    var nativeObjectToString3 = objectProto15.toString;
    function objectToString2(value) {
      return nativeObjectToString3.call(value);
    }
    module2.exports = objectToString2;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports2, module2) {
    var Symbol3 = require_Symbol();
    var getRawTag2 = require_getRawTag();
    var objectToString2 = require_objectToString();
    var nullTag2 = "[object Null]";
    var undefinedTag2 = "[object Undefined]";
    var symToStringTag3 = Symbol3 ? Symbol3.toStringTag : void 0;
    function baseGetTag2(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag2 : nullTag2;
      }
      return symToStringTag3 && symToStringTag3 in Object(value) ? getRawTag2(value) : objectToString2(value);
    }
    module2.exports = baseGetTag2;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports2, module2) {
    function isObjectLike2(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike2;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports2, module2) {
    var baseGetTag2 = require_baseGetTag();
    var isObjectLike2 = require_isObjectLike();
    var symbolTag4 = "[object Symbol]";
    function isSymbol2(value) {
      return typeof value == "symbol" || isObjectLike2(value) && baseGetTag2(value) == symbolTag4;
    }
    module2.exports = isSymbol2;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports2, module2) {
    var isArray2 = require_isArray();
    var isSymbol2 = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object3) {
      if (isArray2(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol2(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object3 != null && value in Object(object3);
    }
    module2.exports = isKey;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports2, module2) {
    function isObject5(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module2.exports = isObject5;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports2, module2) {
    var baseGetTag2 = require_baseGetTag();
    var isObject5 = require_isObject();
    var asyncTag2 = "[object AsyncFunction]";
    var funcTag4 = "[object Function]";
    var genTag3 = "[object GeneratorFunction]";
    var proxyTag2 = "[object Proxy]";
    function isFunction4(value) {
      if (!isObject5(value)) {
        return false;
      }
      var tag = baseGetTag2(value);
      return tag == funcTag4 || tag == genTag3 || tag == asyncTag2 || tag == proxyTag2;
    }
    module2.exports = isFunction4;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports2, module2) {
    var root2 = require_root();
    var coreJsData2 = root2["__core-js_shared__"];
    module2.exports = coreJsData2;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports2, module2) {
    var coreJsData2 = require_coreJsData();
    var maskSrcKey2 = function() {
      var uid = /[^.]+$/.exec(coreJsData2 && coreJsData2.keys && coreJsData2.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked2(func2) {
      return !!maskSrcKey2 && maskSrcKey2 in func2;
    }
    module2.exports = isMasked2;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports2, module2) {
    var funcProto4 = Function.prototype;
    var funcToString4 = funcProto4.toString;
    function toSource2(func2) {
      if (func2 != null) {
        try {
          return funcToString4.call(func2);
        } catch (e2) {
        }
        try {
          return func2 + "";
        } catch (e2) {
        }
      }
      return "";
    }
    module2.exports = toSource2;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports2, module2) {
    var isFunction4 = require_isFunction();
    var isMasked2 = require_isMasked();
    var isObject5 = require_isObject();
    var toSource2 = require_toSource();
    var reRegExpChar2 = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor2 = /^\[object .+?Constructor\]$/;
    var funcProto4 = Function.prototype;
    var objectProto15 = Object.prototype;
    var funcToString4 = funcProto4.toString;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    var reIsNative2 = RegExp(
      "^" + funcToString4.call(hasOwnProperty12).replace(reRegExpChar2, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative2(value) {
      if (!isObject5(value) || isMasked2(value)) {
        return false;
      }
      var pattern = isFunction4(value) ? reIsNative2 : reIsHostCtor2;
      return pattern.test(toSource2(value));
    }
    module2.exports = baseIsNative2;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports2, module2) {
    function getValue2(object3, key) {
      return object3 == null ? void 0 : object3[key];
    }
    module2.exports = getValue2;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports2, module2) {
    var baseIsNative2 = require_baseIsNative();
    var getValue2 = require_getValue();
    function getNative2(object3, key) {
      var value = getValue2(object3, key);
      return baseIsNative2(value) ? value : void 0;
    }
    module2.exports = getNative2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports2, module2) {
    var getNative2 = require_getNative();
    var nativeCreate2 = getNative2(Object, "create");
    module2.exports = nativeCreate2;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports2, module2) {
    var nativeCreate2 = require_nativeCreate();
    function hashClear2() {
      this.__data__ = nativeCreate2 ? nativeCreate2(null) : {};
      this.size = 0;
    }
    module2.exports = hashClear2;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports2, module2) {
    function hashDelete2(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = hashDelete2;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports2, module2) {
    var nativeCreate2 = require_nativeCreate();
    var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    function hashGet2(key) {
      var data = this.__data__;
      if (nativeCreate2) {
        var result = data[key];
        return result === HASH_UNDEFINED3 ? void 0 : result;
      }
      return hasOwnProperty12.call(data, key) ? data[key] : void 0;
    }
    module2.exports = hashGet2;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports2, module2) {
    var nativeCreate2 = require_nativeCreate();
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    function hashHas2(key) {
      var data = this.__data__;
      return nativeCreate2 ? data[key] !== void 0 : hasOwnProperty12.call(data, key);
    }
    module2.exports = hashHas2;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports2, module2) {
    var nativeCreate2 = require_nativeCreate();
    var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
    function hashSet2(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate2 && value === void 0 ? HASH_UNDEFINED3 : value;
      return this;
    }
    module2.exports = hashSet2;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports2, module2) {
    var hashClear2 = require_hashClear();
    var hashDelete2 = require_hashDelete();
    var hashGet2 = require_hashGet();
    var hashHas2 = require_hashHas();
    var hashSet2 = require_hashSet();
    function Hash2(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash2.prototype.clear = hashClear2;
    Hash2.prototype["delete"] = hashDelete2;
    Hash2.prototype.get = hashGet2;
    Hash2.prototype.has = hashHas2;
    Hash2.prototype.set = hashSet2;
    module2.exports = Hash2;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports2, module2) {
    function listCacheClear2() {
      this.__data__ = [];
      this.size = 0;
    }
    module2.exports = listCacheClear2;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports2, module2) {
    function eq2(value, other) {
      return value === other || value !== value && other !== other;
    }
    module2.exports = eq2;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports2, module2) {
    var eq2 = require_eq();
    function assocIndexOf2(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq2(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module2.exports = assocIndexOf2;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports2, module2) {
    var assocIndexOf2 = require_assocIndexOf();
    var arrayProto2 = Array.prototype;
    var splice2 = arrayProto2.splice;
    function listCacheDelete2(key) {
      var data = this.__data__, index = assocIndexOf2(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice2.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module2.exports = listCacheDelete2;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports2, module2) {
    var assocIndexOf2 = require_assocIndexOf();
    function listCacheGet2(key) {
      var data = this.__data__, index = assocIndexOf2(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module2.exports = listCacheGet2;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports2, module2) {
    var assocIndexOf2 = require_assocIndexOf();
    function listCacheHas2(key) {
      return assocIndexOf2(this.__data__, key) > -1;
    }
    module2.exports = listCacheHas2;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports2, module2) {
    var assocIndexOf2 = require_assocIndexOf();
    function listCacheSet2(key, value) {
      var data = this.__data__, index = assocIndexOf2(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module2.exports = listCacheSet2;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports2, module2) {
    var listCacheClear2 = require_listCacheClear();
    var listCacheDelete2 = require_listCacheDelete();
    var listCacheGet2 = require_listCacheGet();
    var listCacheHas2 = require_listCacheHas();
    var listCacheSet2 = require_listCacheSet();
    function ListCache2(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache2.prototype.clear = listCacheClear2;
    ListCache2.prototype["delete"] = listCacheDelete2;
    ListCache2.prototype.get = listCacheGet2;
    ListCache2.prototype.has = listCacheHas2;
    ListCache2.prototype.set = listCacheSet2;
    module2.exports = ListCache2;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports2, module2) {
    var getNative2 = require_getNative();
    var root2 = require_root();
    var Map3 = getNative2(root2, "Map");
    module2.exports = Map3;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports2, module2) {
    var Hash2 = require_Hash();
    var ListCache2 = require_ListCache();
    var Map3 = require_Map();
    function mapCacheClear2() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash2(),
        "map": new (Map3 || ListCache2)(),
        "string": new Hash2()
      };
    }
    module2.exports = mapCacheClear2;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports2, module2) {
    function isKeyable2(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module2.exports = isKeyable2;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports2, module2) {
    var isKeyable2 = require_isKeyable();
    function getMapData2(map2, key) {
      var data = map2.__data__;
      return isKeyable2(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module2.exports = getMapData2;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports2, module2) {
    var getMapData2 = require_getMapData();
    function mapCacheDelete2(key) {
      var result = getMapData2(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = mapCacheDelete2;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports2, module2) {
    var getMapData2 = require_getMapData();
    function mapCacheGet2(key) {
      return getMapData2(this, key).get(key);
    }
    module2.exports = mapCacheGet2;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports2, module2) {
    var getMapData2 = require_getMapData();
    function mapCacheHas2(key) {
      return getMapData2(this, key).has(key);
    }
    module2.exports = mapCacheHas2;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports2, module2) {
    var getMapData2 = require_getMapData();
    function mapCacheSet2(key, value) {
      var data = getMapData2(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module2.exports = mapCacheSet2;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports2, module2) {
    var mapCacheClear2 = require_mapCacheClear();
    var mapCacheDelete2 = require_mapCacheDelete();
    var mapCacheGet2 = require_mapCacheGet();
    var mapCacheHas2 = require_mapCacheHas();
    var mapCacheSet2 = require_mapCacheSet();
    function MapCache2(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache2.prototype.clear = mapCacheClear2;
    MapCache2.prototype["delete"] = mapCacheDelete2;
    MapCache2.prototype.get = mapCacheGet2;
    MapCache2.prototype.has = mapCacheHas2;
    MapCache2.prototype.set = mapCacheSet2;
    module2.exports = MapCache2;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports2, module2) {
    var MapCache2 = require_MapCache();
    var FUNC_ERROR_TEXT2 = "Expected a function";
    function memoize2(func2, resolver) {
      if (typeof func2 != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT2);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func2.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize2.Cache || MapCache2)();
      return memoized;
    }
    memoize2.Cache = MapCache2;
    module2.exports = memoize2;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports2, module2) {
    var memoize2 = require_memoize();
    var MAX_MEMOIZE_SIZE2 = 500;
    function memoizeCapped2(func2) {
      var result = memoize2(func2, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE2) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module2.exports = memoizeCapped2;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports2, module2) {
    var memoizeCapped2 = require_memoizeCapped();
    var rePropName2 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar2 = /\\(\\)?/g;
    var stringToPath2 = memoizeCapped2(function(string3) {
      var result = [];
      if (string3.charCodeAt(0) === 46) {
        result.push("");
      }
      string3.replace(rePropName2, function(match, number2, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar2, "$1") : number2 || match);
      });
      return result;
    });
    module2.exports = stringToPath2;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports2, module2) {
    function arrayMap2(array2, iteratee) {
      var index = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array2[index], index, array2);
      }
      return result;
    }
    module2.exports = arrayMap2;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports2, module2) {
    var Symbol3 = require_Symbol();
    var arrayMap2 = require_arrayMap();
    var isArray2 = require_isArray();
    var isSymbol2 = require_isSymbol();
    var INFINITY3 = 1 / 0;
    var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
    var symbolToString3 = symbolProto3 ? symbolProto3.toString : void 0;
    function baseToString2(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray2(value)) {
        return arrayMap2(value, baseToString2) + "";
      }
      if (isSymbol2(value)) {
        return symbolToString3 ? symbolToString3.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
    }
    module2.exports = baseToString2;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports2, module2) {
    var baseToString2 = require_baseToString();
    function toString3(value) {
      return value == null ? "" : baseToString2(value);
    }
    module2.exports = toString3;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports2, module2) {
    var isArray2 = require_isArray();
    var isKey = require_isKey();
    var stringToPath2 = require_stringToPath();
    var toString3 = require_toString();
    function castPath(value, object3) {
      if (isArray2(value)) {
        return value;
      }
      return isKey(value, object3) ? [value] : stringToPath2(toString3(value));
    }
    module2.exports = castPath;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports2, module2) {
    var baseGetTag2 = require_baseGetTag();
    var isObjectLike2 = require_isObjectLike();
    var argsTag4 = "[object Arguments]";
    function baseIsArguments2(value) {
      return isObjectLike2(value) && baseGetTag2(value) == argsTag4;
    }
    module2.exports = baseIsArguments2;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports2, module2) {
    var baseIsArguments2 = require_baseIsArguments();
    var isObjectLike2 = require_isObjectLike();
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    var propertyIsEnumerable3 = objectProto15.propertyIsEnumerable;
    var isArguments2 = baseIsArguments2(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments2 : function(value) {
      return isObjectLike2(value) && hasOwnProperty12.call(value, "callee") && !propertyIsEnumerable3.call(value, "callee");
    };
    module2.exports = isArguments2;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports2, module2) {
    var MAX_SAFE_INTEGER3 = 9007199254740991;
    var reIsUint2 = /^(?:0|[1-9]\d*)$/;
    function isIndex2(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER3 : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint2.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module2.exports = isIndex2;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports2, module2) {
    var MAX_SAFE_INTEGER3 = 9007199254740991;
    function isLength2(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER3;
    }
    module2.exports = isLength2;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports2, module2) {
    var isSymbol2 = require_isSymbol();
    var INFINITY3 = 1 / 0;
    function toKey2(value) {
      if (typeof value == "string" || isSymbol2(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY3 ? "-0" : result;
    }
    module2.exports = toKey2;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports2, module2) {
    var castPath = require_castPath();
    var isArguments2 = require_isArguments();
    var isArray2 = require_isArray();
    var isIndex2 = require_isIndex();
    var isLength2 = require_isLength();
    var toKey2 = require_toKey();
    function hasPath(object3, path, hasFunc) {
      path = castPath(path, object3);
      var index = -1, length = path.length, result = false;
      while (++index < length) {
        var key = toKey2(path[index]);
        if (!(result = object3 != null && hasFunc(object3, key))) {
          break;
        }
        object3 = object3[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object3 == null ? 0 : object3.length;
      return !!length && isLength2(length) && isIndex2(key, length) && (isArray2(object3) || isArguments2(object3));
    }
    module2.exports = hasPath;
  }
});

// node_modules/lodash/has.js
var require_has = __commonJS({
  "node_modules/lodash/has.js"(exports2, module2) {
    var baseHas = require_baseHas();
    var hasPath = require_hasPath();
    function has4(object3, path) {
      return object3 != null && hasPath(object3, path, baseHas);
    }
    module2.exports = has4;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports2, module2) {
    var getNative2 = require_getNative();
    var defineProperty2 = function() {
      try {
        var func2 = getNative2(Object, "defineProperty");
        func2({}, "", {});
        return func2;
      } catch (e2) {
      }
    }();
    module2.exports = defineProperty2;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports2, module2) {
    var defineProperty2 = require_defineProperty();
    function baseAssignValue2(object3, key, value) {
      if (key == "__proto__" && defineProperty2) {
        defineProperty2(object3, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object3[key] = value;
      }
    }
    module2.exports = baseAssignValue2;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports2, module2) {
    function createBaseFor(fromRight) {
      return function(object3, iteratee, keysFunc) {
        var index = -1, iterable = Object(object3), props = keysFunc(object3), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object3;
      };
    }
    module2.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports2, module2) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module2.exports = baseFor;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports2, module2) {
    function baseTimes2(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module2.exports = baseTimes2;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports2, module2) {
    function stubFalse2() {
      return false;
    }
    module2.exports = stubFalse2;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports2, module2) {
    var root2 = require_root();
    var stubFalse2 = require_stubFalse();
    var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
    var Buffer4 = moduleExports4 ? root2.Buffer : void 0;
    var nativeIsBuffer2 = Buffer4 ? Buffer4.isBuffer : void 0;
    var isBuffer2 = nativeIsBuffer2 || stubFalse2;
    module2.exports = isBuffer2;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports2, module2) {
    var baseGetTag2 = require_baseGetTag();
    var isLength2 = require_isLength();
    var isObjectLike2 = require_isObjectLike();
    var argsTag4 = "[object Arguments]";
    var arrayTag3 = "[object Array]";
    var boolTag4 = "[object Boolean]";
    var dateTag4 = "[object Date]";
    var errorTag3 = "[object Error]";
    var funcTag4 = "[object Function]";
    var mapTag6 = "[object Map]";
    var numberTag4 = "[object Number]";
    var objectTag5 = "[object Object]";
    var regexpTag4 = "[object RegExp]";
    var setTag6 = "[object Set]";
    var stringTag4 = "[object String]";
    var weakMapTag4 = "[object WeakMap]";
    var arrayBufferTag4 = "[object ArrayBuffer]";
    var dataViewTag5 = "[object DataView]";
    var float32Tag4 = "[object Float32Array]";
    var float64Tag4 = "[object Float64Array]";
    var int8Tag4 = "[object Int8Array]";
    var int16Tag4 = "[object Int16Array]";
    var int32Tag4 = "[object Int32Array]";
    var uint8Tag4 = "[object Uint8Array]";
    var uint8ClampedTag4 = "[object Uint8ClampedArray]";
    var uint16Tag4 = "[object Uint16Array]";
    var uint32Tag4 = "[object Uint32Array]";
    var typedArrayTags2 = {};
    typedArrayTags2[float32Tag4] = typedArrayTags2[float64Tag4] = typedArrayTags2[int8Tag4] = typedArrayTags2[int16Tag4] = typedArrayTags2[int32Tag4] = typedArrayTags2[uint8Tag4] = typedArrayTags2[uint8ClampedTag4] = typedArrayTags2[uint16Tag4] = typedArrayTags2[uint32Tag4] = true;
    typedArrayTags2[argsTag4] = typedArrayTags2[arrayTag3] = typedArrayTags2[arrayBufferTag4] = typedArrayTags2[boolTag4] = typedArrayTags2[dataViewTag5] = typedArrayTags2[dateTag4] = typedArrayTags2[errorTag3] = typedArrayTags2[funcTag4] = typedArrayTags2[mapTag6] = typedArrayTags2[numberTag4] = typedArrayTags2[objectTag5] = typedArrayTags2[regexpTag4] = typedArrayTags2[setTag6] = typedArrayTags2[stringTag4] = typedArrayTags2[weakMapTag4] = false;
    function baseIsTypedArray2(value) {
      return isObjectLike2(value) && isLength2(value.length) && !!typedArrayTags2[baseGetTag2(value)];
    }
    module2.exports = baseIsTypedArray2;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports2, module2) {
    function baseUnary2(func2) {
      return function(value) {
        return func2(value);
      };
    }
    module2.exports = baseUnary2;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports2, module2) {
    var freeGlobal2 = require_freeGlobal();
    var freeExports4 = typeof exports2 == "object" && exports2 && !exports2.nodeType && exports2;
    var freeModule4 = freeExports4 && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports4 = freeModule4 && freeModule4.exports === freeExports4;
    var freeProcess2 = moduleExports4 && freeGlobal2.process;
    var nodeUtil2 = function() {
      try {
        var types = freeModule4 && freeModule4.require && freeModule4.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess2 && freeProcess2.binding && freeProcess2.binding("util");
      } catch (e2) {
      }
    }();
    module2.exports = nodeUtil2;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports2, module2) {
    var baseIsTypedArray2 = require_baseIsTypedArray();
    var baseUnary2 = require_baseUnary();
    var nodeUtil2 = require_nodeUtil();
    var nodeIsTypedArray2 = nodeUtil2 && nodeUtil2.isTypedArray;
    var isTypedArray2 = nodeIsTypedArray2 ? baseUnary2(nodeIsTypedArray2) : baseIsTypedArray2;
    module2.exports = isTypedArray2;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports2, module2) {
    var baseTimes2 = require_baseTimes();
    var isArguments2 = require_isArguments();
    var isArray2 = require_isArray();
    var isBuffer2 = require_isBuffer();
    var isIndex2 = require_isIndex();
    var isTypedArray2 = require_isTypedArray();
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    function arrayLikeKeys2(value, inherited) {
      var isArr = isArray2(value), isArg = !isArr && isArguments2(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes2(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty12.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex2(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = arrayLikeKeys2;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports2, module2) {
    var objectProto15 = Object.prototype;
    function isPrototype2(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto15;
      return value === proto;
    }
    module2.exports = isPrototype2;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports2, module2) {
    function overArg2(func2, transform) {
      return function(arg) {
        return func2(transform(arg));
      };
    }
    module2.exports = overArg2;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports2, module2) {
    var overArg2 = require_overArg();
    var nativeKeys2 = overArg2(Object.keys, Object);
    module2.exports = nativeKeys2;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports2, module2) {
    var isPrototype2 = require_isPrototype();
    var nativeKeys2 = require_nativeKeys();
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    function baseKeys2(object3) {
      if (!isPrototype2(object3)) {
        return nativeKeys2(object3);
      }
      var result = [];
      for (var key in Object(object3)) {
        if (hasOwnProperty12.call(object3, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module2.exports = baseKeys2;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports2, module2) {
    var isFunction4 = require_isFunction();
    var isLength2 = require_isLength();
    function isArrayLike2(value) {
      return value != null && isLength2(value.length) && !isFunction4(value);
    }
    module2.exports = isArrayLike2;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports2, module2) {
    var arrayLikeKeys2 = require_arrayLikeKeys();
    var baseKeys2 = require_baseKeys();
    var isArrayLike2 = require_isArrayLike();
    function keys2(object3) {
      return isArrayLike2(object3) ? arrayLikeKeys2(object3) : baseKeys2(object3);
    }
    module2.exports = keys2;
  }
});

// node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/lodash/_baseForOwn.js"(exports2, module2) {
    var baseFor = require_baseFor();
    var keys2 = require_keys();
    function baseForOwn(object3, iteratee) {
      return object3 && baseFor(object3, iteratee, keys2);
    }
    module2.exports = baseForOwn;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports2, module2) {
    var ListCache2 = require_ListCache();
    function stackClear2() {
      this.__data__ = new ListCache2();
      this.size = 0;
    }
    module2.exports = stackClear2;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports2, module2) {
    function stackDelete2(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module2.exports = stackDelete2;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports2, module2) {
    function stackGet2(key) {
      return this.__data__.get(key);
    }
    module2.exports = stackGet2;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports2, module2) {
    function stackHas2(key) {
      return this.__data__.has(key);
    }
    module2.exports = stackHas2;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports2, module2) {
    var ListCache2 = require_ListCache();
    var Map3 = require_Map();
    var MapCache2 = require_MapCache();
    var LARGE_ARRAY_SIZE2 = 200;
    function stackSet2(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache2) {
        var pairs = data.__data__;
        if (!Map3 || pairs.length < LARGE_ARRAY_SIZE2 - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache2(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module2.exports = stackSet2;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports2, module2) {
    var ListCache2 = require_ListCache();
    var stackClear2 = require_stackClear();
    var stackDelete2 = require_stackDelete();
    var stackGet2 = require_stackGet();
    var stackHas2 = require_stackHas();
    var stackSet2 = require_stackSet();
    function Stack2(entries) {
      var data = this.__data__ = new ListCache2(entries);
      this.size = data.size;
    }
    Stack2.prototype.clear = stackClear2;
    Stack2.prototype["delete"] = stackDelete2;
    Stack2.prototype.get = stackGet2;
    Stack2.prototype.has = stackHas2;
    Stack2.prototype.set = stackSet2;
    module2.exports = Stack2;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports2, module2) {
    var HASH_UNDEFINED3 = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED3);
      return this;
    }
    module2.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports2, module2) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module2.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports2, module2) {
    var MapCache2 = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache2();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module2.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports2, module2) {
    function arraySome(array2, predicate) {
      var index = -1, length = array2 == null ? 0 : array2.length;
      while (++index < length) {
        if (predicate(array2[index], index, array2)) {
          return true;
        }
      }
      return false;
    }
    module2.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports2, module2) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module2.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports2, module2) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array2);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array2;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array2, other);
      stack.set(other, array2);
      while (++index < arrLength) {
        var arrValue = array2[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array2, stack) : customizer(arrValue, othValue, index, array2, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array2);
      stack["delete"](other);
      return result;
    }
    module2.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports2, module2) {
    var root2 = require_root();
    var Uint8Array3 = root2.Uint8Array;
    module2.exports = Uint8Array3;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports2, module2) {
    function mapToArray(map2) {
      var index = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module2.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports2, module2) {
    function setToArray(set2) {
      var index = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module2.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports2, module2) {
    var Symbol3 = require_Symbol();
    var Uint8Array3 = require_Uint8Array();
    var eq2 = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag4 = "[object Boolean]";
    var dateTag4 = "[object Date]";
    var errorTag3 = "[object Error]";
    var mapTag6 = "[object Map]";
    var numberTag4 = "[object Number]";
    var regexpTag4 = "[object RegExp]";
    var setTag6 = "[object Set]";
    var stringTag4 = "[object String]";
    var symbolTag4 = "[object Symbol]";
    var arrayBufferTag4 = "[object ArrayBuffer]";
    var dataViewTag5 = "[object DataView]";
    var symbolProto3 = Symbol3 ? Symbol3.prototype : void 0;
    var symbolValueOf2 = symbolProto3 ? symbolProto3.valueOf : void 0;
    function equalByTag(object3, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag5:
          if (object3.byteLength != other.byteLength || object3.byteOffset != other.byteOffset) {
            return false;
          }
          object3 = object3.buffer;
          other = other.buffer;
        case arrayBufferTag4:
          if (object3.byteLength != other.byteLength || !equalFunc(new Uint8Array3(object3), new Uint8Array3(other))) {
            return false;
          }
          return true;
        case boolTag4:
        case dateTag4:
        case numberTag4:
          return eq2(+object3, +other);
        case errorTag3:
          return object3.name == other.name && object3.message == other.message;
        case regexpTag4:
        case stringTag4:
          return object3 == other + "";
        case mapTag6:
          var convert = mapToArray;
        case setTag6:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object3.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object3);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object3, other);
          var result = equalArrays(convert(object3), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object3);
          return result;
        case symbolTag4:
          if (symbolValueOf2) {
            return symbolValueOf2.call(object3) == symbolValueOf2.call(other);
          }
      }
      return false;
    }
    module2.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports2, module2) {
    function arrayPush2(array2, values) {
      var index = -1, length = values.length, offset = array2.length;
      while (++index < length) {
        array2[offset + index] = values[index];
      }
      return array2;
    }
    module2.exports = arrayPush2;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports2, module2) {
    var arrayPush2 = require_arrayPush();
    var isArray2 = require_isArray();
    function baseGetAllKeys2(object3, keysFunc, symbolsFunc) {
      var result = keysFunc(object3);
      return isArray2(object3) ? result : arrayPush2(result, symbolsFunc(object3));
    }
    module2.exports = baseGetAllKeys2;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports2, module2) {
    function arrayFilter2(array2, predicate) {
      var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array2[index];
        if (predicate(value, index, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module2.exports = arrayFilter2;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports2, module2) {
    function stubArray2() {
      return [];
    }
    module2.exports = stubArray2;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports2, module2) {
    var arrayFilter2 = require_arrayFilter();
    var stubArray2 = require_stubArray();
    var objectProto15 = Object.prototype;
    var propertyIsEnumerable3 = objectProto15.propertyIsEnumerable;
    var nativeGetSymbols3 = Object.getOwnPropertySymbols;
    var getSymbols2 = !nativeGetSymbols3 ? stubArray2 : function(object3) {
      if (object3 == null) {
        return [];
      }
      object3 = Object(object3);
      return arrayFilter2(nativeGetSymbols3(object3), function(symbol) {
        return propertyIsEnumerable3.call(object3, symbol);
      });
    };
    module2.exports = getSymbols2;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports2, module2) {
    var baseGetAllKeys2 = require_baseGetAllKeys();
    var getSymbols2 = require_getSymbols();
    var keys2 = require_keys();
    function getAllKeys2(object3) {
      return baseGetAllKeys2(object3, keys2, getSymbols2);
    }
    module2.exports = getAllKeys2;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports2, module2) {
    var getAllKeys2 = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    function equalObjects(object3, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys2(object3), objLength = objProps.length, othProps = getAllKeys2(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty12.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object3);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object3;
      }
      var result = true;
      stack.set(object3, other);
      stack.set(other, object3);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object3[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object3, stack) : customizer(objValue, othValue, key, object3, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object3.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object3 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object3);
      stack["delete"](other);
      return result;
    }
    module2.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports2, module2) {
    var getNative2 = require_getNative();
    var root2 = require_root();
    var DataView2 = getNative2(root2, "DataView");
    module2.exports = DataView2;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports2, module2) {
    var getNative2 = require_getNative();
    var root2 = require_root();
    var Promise3 = getNative2(root2, "Promise");
    module2.exports = Promise3;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports2, module2) {
    var getNative2 = require_getNative();
    var root2 = require_root();
    var Set3 = getNative2(root2, "Set");
    module2.exports = Set3;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports2, module2) {
    var getNative2 = require_getNative();
    var root2 = require_root();
    var WeakMap3 = getNative2(root2, "WeakMap");
    module2.exports = WeakMap3;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports2, module2) {
    var DataView2 = require_DataView();
    var Map3 = require_Map();
    var Promise3 = require_Promise();
    var Set3 = require_Set();
    var WeakMap3 = require_WeakMap();
    var baseGetTag2 = require_baseGetTag();
    var toSource2 = require_toSource();
    var mapTag6 = "[object Map]";
    var objectTag5 = "[object Object]";
    var promiseTag2 = "[object Promise]";
    var setTag6 = "[object Set]";
    var weakMapTag4 = "[object WeakMap]";
    var dataViewTag5 = "[object DataView]";
    var dataViewCtorString2 = toSource2(DataView2);
    var mapCtorString2 = toSource2(Map3);
    var promiseCtorString2 = toSource2(Promise3);
    var setCtorString2 = toSource2(Set3);
    var weakMapCtorString2 = toSource2(WeakMap3);
    var getTag2 = baseGetTag2;
    if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag5 || Map3 && getTag2(new Map3()) != mapTag6 || Promise3 && getTag2(Promise3.resolve()) != promiseTag2 || Set3 && getTag2(new Set3()) != setTag6 || WeakMap3 && getTag2(new WeakMap3()) != weakMapTag4) {
      getTag2 = function(value) {
        var result = baseGetTag2(value), Ctor = result == objectTag5 ? value.constructor : void 0, ctorString = Ctor ? toSource2(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString2:
              return dataViewTag5;
            case mapCtorString2:
              return mapTag6;
            case promiseCtorString2:
              return promiseTag2;
            case setCtorString2:
              return setTag6;
            case weakMapCtorString2:
              return weakMapTag4;
          }
        }
        return result;
      };
    }
    module2.exports = getTag2;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports2, module2) {
    var Stack2 = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag2 = require_getTag();
    var isArray2 = require_isArray();
    var isBuffer2 = require_isBuffer();
    var isTypedArray2 = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag4 = "[object Arguments]";
    var arrayTag3 = "[object Array]";
    var objectTag5 = "[object Object]";
    var objectProto15 = Object.prototype;
    var hasOwnProperty12 = objectProto15.hasOwnProperty;
    function baseIsEqualDeep(object3, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray2(object3), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag3 : getTag2(object3), othTag = othIsArr ? arrayTag3 : getTag2(other);
      objTag = objTag == argsTag4 ? objectTag5 : objTag;
      othTag = othTag == argsTag4 ? objectTag5 : othTag;
      var objIsObj = objTag == objectTag5, othIsObj = othTag == objectTag5, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer2(object3)) {
        if (!isBuffer2(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack2());
        return objIsArr || isTypedArray2(object3) ? equalArrays(object3, other, bitmask, customizer, equalFunc, stack) : equalByTag(object3, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty12.call(object3, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty12.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object3.value() : object3, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack2());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack2());
      return equalObjects(object3, other, bitmask, customizer, equalFunc, stack);
    }
    module2.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports2, module2) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike2 = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module2.exports = baseIsEqual;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports2, module2) {
    var Stack2 = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object3, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object3 == null) {
        return !length;
      }
      object3 = Object(object3);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object3[data[0]] : !(data[0] in object3)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object3[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object3)) {
            return false;
          }
        } else {
          var stack = new Stack2();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object3, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module2.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports2, module2) {
    var isObject5 = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject5(value);
    }
    module2.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports2, module2) {
    var isStrictComparable = require_isStrictComparable();
    var keys2 = require_keys();
    function getMatchData(object3) {
      var result = keys2(object3), length = result.length;
      while (length--) {
        var key = result[length], value = object3[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module2.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports2, module2) {
    function matchesStrictComparable(key, srcValue) {
      return function(object3) {
        if (object3 == null) {
          return false;
        }
        return object3[key] === srcValue && (srcValue !== void 0 || key in Object(object3));
      };
    }
    module2.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports2, module2) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object3) {
        return object3 === source || baseIsMatch(object3, source, matchData);
      };
    }
    module2.exports = baseMatches;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports2, module2) {
    var castPath = require_castPath();
    var toKey2 = require_toKey();
    function baseGet(object3, path) {
      path = castPath(path, object3);
      var index = 0, length = path.length;
      while (object3 != null && index < length) {
        object3 = object3[toKey2(path[index++])];
      }
      return index && index == length ? object3 : void 0;
    }
    module2.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports2, module2) {
    var baseGet = require_baseGet();
    function get2(object3, path, defaultValue) {
      var result = object3 == null ? void 0 : baseGet(object3, path);
      return result === void 0 ? defaultValue : result;
    }
    module2.exports = get2;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports2, module2) {
    function baseHasIn(object3, key) {
      return object3 != null && key in Object(object3);
    }
    module2.exports = baseHasIn;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports2, module2) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object3, path) {
      return object3 != null && hasPath(object3, path, baseHasIn);
    }
    module2.exports = hasIn;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports2, module2) {
    var baseIsEqual = require_baseIsEqual();
    var get2 = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey2 = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey2(path), srcValue);
      }
      return function(object3) {
        var objValue = get2(object3, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object3, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module2.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports2, module2) {
    function identity(value) {
      return value;
    }
    module2.exports = identity;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports2, module2) {
    function baseProperty(key) {
      return function(object3) {
        return object3 == null ? void 0 : object3[key];
      };
    }
    module2.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports2, module2) {
    var baseGet = require_baseGet();
    function basePropertyDeep(path) {
      return function(object3) {
        return baseGet(object3, path);
      };
    }
    module2.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports2, module2) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey2 = require_toKey();
    function property(path) {
      return isKey(path) ? baseProperty(toKey2(path)) : basePropertyDeep(path);
    }
    module2.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports2, module2) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray2 = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module2.exports = baseIteratee;
  }
});

// node_modules/lodash/mapValues.js
var require_mapValues = __commonJS({
  "node_modules/lodash/mapValues.js"(exports2, module2) {
    var baseAssignValue2 = require_baseAssignValue();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    function mapValues3(object3, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);
      baseForOwn(object3, function(value, key, object4) {
        baseAssignValue2(result, key, iteratee(value, key, object4));
      });
      return result;
    }
    module2.exports = mapValues3;
  }
});

// node_modules/property-expr/index.js
var require_property_expr = __commonJS({
  "node_modules/property-expr/index.js"(exports2, module2) {
    "use strict";
    function Cache(maxSize) {
      this._maxSize = maxSize;
      this.clear();
    }
    Cache.prototype.clear = function() {
      this._size = 0;
      this._values = /* @__PURE__ */ Object.create(null);
    };
    Cache.prototype.get = function(key) {
      return this._values[key];
    };
    Cache.prototype.set = function(key, value) {
      this._size >= this._maxSize && this.clear();
      if (!(key in this._values)) this._size++;
      return this._values[key] = value;
    };
    var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g;
    var DIGIT_REGEX = /^\d+$/;
    var LEAD_DIGIT_REGEX = /^\d/;
    var SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g;
    var CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/;
    var MAX_CACHE_SIZE = 512;
    var pathCache = new Cache(MAX_CACHE_SIZE);
    var setCache = new Cache(MAX_CACHE_SIZE);
    var getCache = new Cache(MAX_CACHE_SIZE);
    module2.exports = {
      Cache,
      split: split2,
      normalizePath,
      setter: function(path) {
        var parts = normalizePath(path);
        return setCache.get(path) || setCache.set(path, function setter(obj, value) {
          var index = 0;
          var len = parts.length;
          var data = obj;
          while (index < len - 1) {
            var part = parts[index];
            if (part === "__proto__" || part === "constructor" || part === "prototype") {
              return obj;
            }
            data = data[parts[index++]];
          }
          data[parts[index]] = value;
        });
      },
      getter: function(path, safe) {
        var parts = normalizePath(path);
        return getCache.get(path) || getCache.set(path, function getter3(data) {
          var index = 0, len = parts.length;
          while (index < len) {
            if (data != null || !safe) data = data[parts[index++]];
            else return;
          }
          return data;
        });
      },
      join: function(segments) {
        return segments.reduce(function(path, part) {
          return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? "[" + part + "]" : (path ? "." : "") + part);
        }, "");
      },
      forEach: function(path, cb, thisArg) {
        forEach2(Array.isArray(path) ? path : split2(path), cb, thisArg);
      }
    };
    function normalizePath(path) {
      return pathCache.get(path) || pathCache.set(
        path,
        split2(path).map(function(part) {
          return part.replace(CLEAN_QUOTES_REGEX, "$2");
        })
      );
    }
    function split2(path) {
      return path.match(SPLIT_REGEX) || [""];
    }
    function forEach2(parts, iter, thisArg) {
      var len = parts.length, part, idx, isArray2, isBracket;
      for (idx = 0; idx < len; idx++) {
        part = parts[idx];
        if (part) {
          if (shouldBeQuoted(part)) {
            part = '"' + part + '"';
          }
          isBracket = isQuoted(part);
          isArray2 = !isBracket && /^\d+$/.test(part);
          iter.call(thisArg, part, isBracket, isArray2, idx, parts);
        }
      }
    }
    function isQuoted(str) {
      return typeof str === "string" && str && ["'", '"'].indexOf(str.charAt(0)) !== -1;
    }
    function hasLeadingNumber(part) {
      return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
    }
    function hasSpecialChars(part) {
      return SPEC_CHAR_REGEX.test(part);
    }
    function shouldBeQuoted(part) {
      return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
    }
  }
});

// node_modules/lodash/_arrayReduce.js
var require_arrayReduce = __commonJS({
  "node_modules/lodash/_arrayReduce.js"(exports2, module2) {
    function arrayReduce(array2, iteratee, accumulator, initAccum) {
      var index = -1, length = array2 == null ? 0 : array2.length;
      if (initAccum && length) {
        accumulator = array2[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array2[index], index, array2);
      }
      return accumulator;
    }
    module2.exports = arrayReduce;
  }
});

// node_modules/lodash/_basePropertyOf.js
var require_basePropertyOf = __commonJS({
  "node_modules/lodash/_basePropertyOf.js"(exports2, module2) {
    function basePropertyOf(object3) {
      return function(key) {
        return object3 == null ? void 0 : object3[key];
      };
    }
    module2.exports = basePropertyOf;
  }
});

// node_modules/lodash/_deburrLetter.js
var require_deburrLetter = __commonJS({
  "node_modules/lodash/_deburrLetter.js"(exports2, module2) {
    var basePropertyOf = require_basePropertyOf();
    var deburredLetters = {
      // Latin-1 Supplement block.
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ã": "A",
      "Ä": "A",
      "Å": "A",
      "à": "a",
      "á": "a",
      "â": "a",
      "ã": "a",
      "ä": "a",
      "å": "a",
      "Ç": "C",
      "ç": "c",
      "Ð": "D",
      "ð": "d",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ë": "E",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ë": "e",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ï": "I",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ï": "i",
      "Ñ": "N",
      "ñ": "n",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Õ": "O",
      "Ö": "O",
      "Ø": "O",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "õ": "o",
      "ö": "o",
      "ø": "o",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ü": "U",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ü": "u",
      "Ý": "Y",
      "ý": "y",
      "ÿ": "y",
      "Æ": "Ae",
      "æ": "ae",
      "Þ": "Th",
      "þ": "th",
      "ß": "ss",
      // Latin Extended-A block.
      "Ā": "A",
      "Ă": "A",
      "Ą": "A",
      "ā": "a",
      "ă": "a",
      "ą": "a",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "Ď": "D",
      "Đ": "D",
      "ď": "d",
      "đ": "d",
      "Ē": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ę": "E",
      "Ě": "E",
      "ē": "e",
      "ĕ": "e",
      "ė": "e",
      "ę": "e",
      "ě": "e",
      "Ĝ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ģ": "G",
      "ĝ": "g",
      "ğ": "g",
      "ġ": "g",
      "ģ": "g",
      "Ĥ": "H",
      "Ħ": "H",
      "ĥ": "h",
      "ħ": "h",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "Į": "I",
      "İ": "I",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "į": "i",
      "ı": "i",
      "Ĵ": "J",
      "ĵ": "j",
      "Ķ": "K",
      "ķ": "k",
      "ĸ": "k",
      "Ĺ": "L",
      "Ļ": "L",
      "Ľ": "L",
      "Ŀ": "L",
      "Ł": "L",
      "ĺ": "l",
      "ļ": "l",
      "ľ": "l",
      "ŀ": "l",
      "ł": "l",
      "Ń": "N",
      "Ņ": "N",
      "Ň": "N",
      "Ŋ": "N",
      "ń": "n",
      "ņ": "n",
      "ň": "n",
      "ŋ": "n",
      "Ō": "O",
      "Ŏ": "O",
      "Ő": "O",
      "ō": "o",
      "ŏ": "o",
      "ő": "o",
      "Ŕ": "R",
      "Ŗ": "R",
      "Ř": "R",
      "ŕ": "r",
      "ŗ": "r",
      "ř": "r",
      "Ś": "S",
      "Ŝ": "S",
      "Ş": "S",
      "Š": "S",
      "ś": "s",
      "ŝ": "s",
      "ş": "s",
      "š": "s",
      "Ţ": "T",
      "Ť": "T",
      "Ŧ": "T",
      "ţ": "t",
      "ť": "t",
      "ŧ": "t",
      "Ũ": "U",
      "Ū": "U",
      "Ŭ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ų": "U",
      "ũ": "u",
      "ū": "u",
      "ŭ": "u",
      "ů": "u",
      "ű": "u",
      "ų": "u",
      "Ŵ": "W",
      "ŵ": "w",
      "Ŷ": "Y",
      "ŷ": "y",
      "Ÿ": "Y",
      "Ź": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "ź": "z",
      "ż": "z",
      "ž": "z",
      "Ĳ": "IJ",
      "ĳ": "ij",
      "Œ": "Oe",
      "œ": "oe",
      "ŉ": "'n",
      "ſ": "s"
    };
    var deburrLetter = basePropertyOf(deburredLetters);
    module2.exports = deburrLetter;
  }
});

// node_modules/lodash/deburr.js
var require_deburr = __commonJS({
  "node_modules/lodash/deburr.js"(exports2, module2) {
    var deburrLetter = require_deburrLetter();
    var toString3 = require_toString();
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsCombo = "[" + rsComboRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    function deburr(string3) {
      string3 = toString3(string3);
      return string3 && string3.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module2.exports = deburr;
  }
});

// node_modules/lodash/_asciiWords.js
var require_asciiWords = __commonJS({
  "node_modules/lodash/_asciiWords.js"(exports2, module2) {
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    function asciiWords(string3) {
      return string3.match(reAsciiWord) || [];
    }
    module2.exports = asciiWords;
  }
});

// node_modules/lodash/_hasUnicodeWord.js
var require_hasUnicodeWord = __commonJS({
  "node_modules/lodash/_hasUnicodeWord.js"(exports2, module2) {
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    function hasUnicodeWord(string3) {
      return reHasUnicodeWord.test(string3);
    }
    module2.exports = hasUnicodeWord;
  }
});

// node_modules/lodash/_unicodeWords.js
var require_unicodeWords = __commonJS({
  "node_modules/lodash/_unicodeWords.js"(exports2, module2) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['’]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    function unicodeWords(string3) {
      return string3.match(reUnicodeWord) || [];
    }
    module2.exports = unicodeWords;
  }
});

// node_modules/lodash/words.js
var require_words = __commonJS({
  "node_modules/lodash/words.js"(exports2, module2) {
    var asciiWords = require_asciiWords();
    var hasUnicodeWord = require_hasUnicodeWord();
    var toString3 = require_toString();
    var unicodeWords = require_unicodeWords();
    function words(string3, pattern, guard) {
      string3 = toString3(string3);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string3) ? unicodeWords(string3) : asciiWords(string3);
      }
      return string3.match(pattern) || [];
    }
    module2.exports = words;
  }
});

// node_modules/lodash/_createCompounder.js
var require_createCompounder = __commonJS({
  "node_modules/lodash/_createCompounder.js"(exports2, module2) {
    var arrayReduce = require_arrayReduce();
    var deburr = require_deburr();
    var words = require_words();
    var rsApos = "['’]";
    var reApos = RegExp(rsApos, "g");
    function createCompounder(callback) {
      return function(string3) {
        return arrayReduce(words(deburr(string3).replace(reApos, "")), callback, "");
      };
    }
    module2.exports = createCompounder;
  }
});

// node_modules/lodash/snakeCase.js
var require_snakeCase = __commonJS({
  "node_modules/lodash/snakeCase.js"(exports2, module2) {
    var createCompounder = require_createCompounder();
    var snakeCase2 = createCompounder(function(result, word, index) {
      return result + (index ? "_" : "") + word.toLowerCase();
    });
    module2.exports = snakeCase2;
  }
});

// node_modules/lodash/_baseSlice.js
var require_baseSlice = __commonJS({
  "node_modules/lodash/_baseSlice.js"(exports2, module2) {
    function baseSlice(array2, start, end) {
      var index = -1, length = array2.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index < length) {
        result[index] = array2[index + start];
      }
      return result;
    }
    module2.exports = baseSlice;
  }
});

// node_modules/lodash/_castSlice.js
var require_castSlice = __commonJS({
  "node_modules/lodash/_castSlice.js"(exports2, module2) {
    var baseSlice = require_baseSlice();
    function castSlice(array2, start, end) {
      var length = array2.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array2 : baseSlice(array2, start, end);
    }
    module2.exports = castSlice;
  }
});

// node_modules/lodash/_hasUnicode.js
var require_hasUnicode = __commonJS({
  "node_modules/lodash/_hasUnicode.js"(exports2, module2) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string3) {
      return reHasUnicode.test(string3);
    }
    module2.exports = hasUnicode;
  }
});

// node_modules/lodash/_asciiToArray.js
var require_asciiToArray = __commonJS({
  "node_modules/lodash/_asciiToArray.js"(exports2, module2) {
    function asciiToArray(string3) {
      return string3.split("");
    }
    module2.exports = asciiToArray;
  }
});

// node_modules/lodash/_unicodeToArray.js
var require_unicodeToArray = __commonJS({
  "node_modules/lodash/_unicodeToArray.js"(exports2, module2) {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray(string3) {
      return string3.match(reUnicode) || [];
    }
    module2.exports = unicodeToArray;
  }
});

// node_modules/lodash/_stringToArray.js
var require_stringToArray = __commonJS({
  "node_modules/lodash/_stringToArray.js"(exports2, module2) {
    var asciiToArray = require_asciiToArray();
    var hasUnicode = require_hasUnicode();
    var unicodeToArray = require_unicodeToArray();
    function stringToArray(string3) {
      return hasUnicode(string3) ? unicodeToArray(string3) : asciiToArray(string3);
    }
    module2.exports = stringToArray;
  }
});

// node_modules/lodash/_createCaseFirst.js
var require_createCaseFirst = __commonJS({
  "node_modules/lodash/_createCaseFirst.js"(exports2, module2) {
    var castSlice = require_castSlice();
    var hasUnicode = require_hasUnicode();
    var stringToArray = require_stringToArray();
    var toString3 = require_toString();
    function createCaseFirst(methodName) {
      return function(string3) {
        string3 = toString3(string3);
        var strSymbols = hasUnicode(string3) ? stringToArray(string3) : void 0;
        var chr = strSymbols ? strSymbols[0] : string3.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string3.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    module2.exports = createCaseFirst;
  }
});

// node_modules/lodash/upperFirst.js
var require_upperFirst = __commonJS({
  "node_modules/lodash/upperFirst.js"(exports2, module2) {
    var createCaseFirst = require_createCaseFirst();
    var upperFirst = createCaseFirst("toUpperCase");
    module2.exports = upperFirst;
  }
});

// node_modules/lodash/capitalize.js
var require_capitalize = __commonJS({
  "node_modules/lodash/capitalize.js"(exports2, module2) {
    var toString3 = require_toString();
    var upperFirst = require_upperFirst();
    function capitalize5(string3) {
      return upperFirst(toString3(string3).toLowerCase());
    }
    module2.exports = capitalize5;
  }
});

// node_modules/lodash/camelCase.js
var require_camelCase = __commonJS({
  "node_modules/lodash/camelCase.js"(exports2, module2) {
    var capitalize5 = require_capitalize();
    var createCompounder = require_createCompounder();
    var camelCase2 = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize5(word) : word);
    });
    module2.exports = camelCase2;
  }
});

// node_modules/lodash/mapKeys.js
var require_mapKeys = __commonJS({
  "node_modules/lodash/mapKeys.js"(exports2, module2) {
    var baseAssignValue2 = require_baseAssignValue();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    function mapKeys2(object3, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);
      baseForOwn(object3, function(value, key, object4) {
        baseAssignValue2(result, iteratee(value, key, object4), value);
      });
      return result;
    }
    module2.exports = mapKeys2;
  }
});

// node_modules/toposort/index.js
var require_toposort = __commonJS({
  "node_modules/toposort/index.js"(exports2, module2) {
    module2.exports = function(edges) {
      return toposort2(uniqueNodes(edges), edges);
    };
    module2.exports.array = toposort2;
    function toposort2(nodes, edges) {
      var cursor = nodes.length, sorted = new Array(cursor), visited = {}, i = cursor, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
      edges.forEach(function(edge) {
        if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
          throw new Error("Unknown node. There is an unknown node in the supplied edges.");
        }
      });
      while (i--) {
        if (!visited[i]) visit(nodes[i], i, /* @__PURE__ */ new Set());
      }
      return sorted;
      function visit(node2, i2, predecessors) {
        if (predecessors.has(node2)) {
          var nodeRep;
          try {
            nodeRep = ", node was:" + JSON.stringify(node2);
          } catch (e2) {
            nodeRep = "";
          }
          throw new Error("Cyclic dependency" + nodeRep);
        }
        if (!nodesHash.has(node2)) {
          throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node2));
        }
        if (visited[i2]) return;
        visited[i2] = true;
        var outgoing = outgoingEdges.get(node2) || /* @__PURE__ */ new Set();
        outgoing = Array.from(outgoing);
        if (i2 = outgoing.length) {
          predecessors.add(node2);
          do {
            var child = outgoing[--i2];
            visit(child, nodesHash.get(child), predecessors);
          } while (i2);
          predecessors.delete(node2);
        }
        sorted[--cursor] = node2;
      }
    }
    function uniqueNodes(arr) {
      var res = /* @__PURE__ */ new Set();
      for (var i = 0, len = arr.length; i < len; i++) {
        var edge = arr[i];
        res.add(edge[0]);
        res.add(edge[1]);
      }
      return Array.from(res);
    }
    function makeOutgoingEdges(arr) {
      var edges = /* @__PURE__ */ new Map();
      for (var i = 0, len = arr.length; i < len; i++) {
        var edge = arr[i];
        if (!edges.has(edge[0])) edges.set(edge[0], /* @__PURE__ */ new Set());
        if (!edges.has(edge[1])) edges.set(edge[1], /* @__PURE__ */ new Set());
        edges.get(edge[0]).add(edge[1]);
      }
      return edges;
    }
    function makeNodesHash(arr) {
      var res = /* @__PURE__ */ new Map();
      for (var i = 0, len = arr.length; i < len; i++) {
        res.set(arr[i], i);
      }
      return res;
    }
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports2) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE2 = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object3) {
          if (typeof object3 === "object" && object3 !== null) {
            var $$typeof = object3.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE2:
                var type = object3.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE2;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment74 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object3) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object3) || typeOf(object3) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object3) {
          return typeOf(object3) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object3) {
          return typeOf(object3) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object3) {
          return typeOf(object3) === REACT_PROVIDER_TYPE;
        }
        function isElement(object3) {
          return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE2;
        }
        function isForwardRef(object3) {
          return typeOf(object3) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object3) {
          return typeOf(object3) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object3) {
          return typeOf(object3) === REACT_LAZY_TYPE;
        }
        function isMemo(object3) {
          return typeOf(object3) === REACT_MEMO_TYPE;
        }
        function isPortal(object3) {
          return typeOf(object3) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object3) {
          return typeOf(object3) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object3) {
          return typeOf(object3) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object3) {
          return typeOf(object3) === REACT_SUSPENSE_TYPE;
        }
        exports2.AsyncMode = AsyncMode;
        exports2.ConcurrentMode = ConcurrentMode;
        exports2.ContextConsumer = ContextConsumer;
        exports2.ContextProvider = ContextProvider;
        exports2.Element = Element2;
        exports2.ForwardRef = ForwardRef;
        exports2.Fragment = Fragment74;
        exports2.Lazy = Lazy;
        exports2.Memo = Memo;
        exports2.Portal = Portal2;
        exports2.Profiler = Profiler;
        exports2.StrictMode = StrictMode;
        exports2.Suspense = Suspense;
        exports2.isAsyncMode = isAsyncMode;
        exports2.isConcurrentMode = isConcurrentMode;
        exports2.isContextConsumer = isContextConsumer;
        exports2.isContextProvider = isContextProvider;
        exports2.isElement = isElement;
        exports2.isForwardRef = isForwardRef;
        exports2.isFragment = isFragment;
        exports2.isLazy = isLazy;
        exports2.isMemo = isMemo;
        exports2.isPortal = isPortal;
        exports2.isProfiler = isProfiler;
        exports2.isStrictMode = isStrictMode;
        exports2.isSuspense = isSuspense;
        exports2.isValidElementType = isValidElementType;
        exports2.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports2, module2) {
    "use strict";
    if (false) {
      module2.exports = null;
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports2, module2) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty12 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty12.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports2, module2) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module2.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has2 = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports2, module2) {
    module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports2, module2) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has4 = require_has2();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has4;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has4(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module2.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports2, module2) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has4 = require_has2();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module2.exports = function(isValidElement3, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement3(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has4(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has4(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode2(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has4(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode2(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode2);
            }
            if (propValue === null || isValidElement3(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode2(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode2(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol2(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol2(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports2, module2) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module2.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/qrcode/lib/can-promise.js
var require_can_promise = __commonJS({
  "node_modules/qrcode/lib/can-promise.js"(exports2, module2) {
    module2.exports = function() {
      return typeof Promise === "function" && Promise.prototype && Promise.prototype.then;
    };
  }
});

// node_modules/qrcode/lib/core/utils.js
var require_utils = __commonJS({
  "node_modules/qrcode/lib/core/utils.js"(exports2) {
    var toSJISFunction;
    var CODEWORDS_COUNT = [
      0,
      // Not used
      26,
      44,
      70,
      100,
      134,
      172,
      196,
      242,
      292,
      346,
      404,
      466,
      532,
      581,
      655,
      733,
      815,
      901,
      991,
      1085,
      1156,
      1258,
      1364,
      1474,
      1588,
      1706,
      1828,
      1921,
      2051,
      2185,
      2323,
      2465,
      2611,
      2761,
      2876,
      3034,
      3196,
      3362,
      3532,
      3706
    ];
    exports2.getSymbolSize = function getSymbolSize(version4) {
      if (!version4) throw new Error('"version" cannot be null or undefined');
      if (version4 < 1 || version4 > 40) throw new Error('"version" should be in range from 1 to 40');
      return version4 * 4 + 17;
    };
    exports2.getSymbolTotalCodewords = function getSymbolTotalCodewords(version4) {
      return CODEWORDS_COUNT[version4];
    };
    exports2.getBCHDigit = function(data) {
      let digit = 0;
      while (data !== 0) {
        digit++;
        data >>>= 1;
      }
      return digit;
    };
    exports2.setToSJISFunction = function setToSJISFunction(f) {
      if (typeof f !== "function") {
        throw new Error('"toSJISFunc" is not a valid function.');
      }
      toSJISFunction = f;
    };
    exports2.isKanjiModeEnabled = function() {
      return typeof toSJISFunction !== "undefined";
    };
    exports2.toSJIS = function toSJIS(kanji) {
      return toSJISFunction(kanji);
    };
  }
});

// node_modules/qrcode/lib/core/error-correction-level.js
var require_error_correction_level = __commonJS({
  "node_modules/qrcode/lib/core/error-correction-level.js"(exports2) {
    exports2.L = { bit: 1 };
    exports2.M = { bit: 0 };
    exports2.Q = { bit: 3 };
    exports2.H = { bit: 2 };
    function fromString(string3) {
      if (typeof string3 !== "string") {
        throw new Error("Param is not a string");
      }
      const lcStr = string3.toLowerCase();
      switch (lcStr) {
        case "l":
        case "low":
          return exports2.L;
        case "m":
        case "medium":
          return exports2.M;
        case "q":
        case "quartile":
          return exports2.Q;
        case "h":
        case "high":
          return exports2.H;
        default:
          throw new Error("Unknown EC Level: " + string3);
      }
    }
    exports2.isValid = function isValid(level) {
      return level && typeof level.bit !== "undefined" && level.bit >= 0 && level.bit < 4;
    };
    exports2.from = function from(value, defaultValue) {
      if (exports2.isValid(value)) {
        return value;
      }
      try {
        return fromString(value);
      } catch (e2) {
        return defaultValue;
      }
    };
  }
});

// node_modules/qrcode/lib/core/bit-buffer.js
var require_bit_buffer = __commonJS({
  "node_modules/qrcode/lib/core/bit-buffer.js"(exports2, module2) {
    function BitBuffer() {
      this.buffer = [];
      this.length = 0;
    }
    BitBuffer.prototype = {
      get: function(index) {
        const bufIndex = Math.floor(index / 8);
        return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
      },
      put: function(num, length) {
        for (let i = 0; i < length; i++) {
          this.putBit((num >>> length - i - 1 & 1) === 1);
        }
      },
      getLengthInBits: function() {
        return this.length;
      },
      putBit: function(bit) {
        const bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
          this.buffer.push(0);
        }
        if (bit) {
          this.buffer[bufIndex] |= 128 >>> this.length % 8;
        }
        this.length++;
      }
    };
    module2.exports = BitBuffer;
  }
});

// node_modules/qrcode/lib/core/bit-matrix.js
var require_bit_matrix = __commonJS({
  "node_modules/qrcode/lib/core/bit-matrix.js"(exports2, module2) {
    function BitMatrix(size) {
      if (!size || size < 1) {
        throw new Error("BitMatrix size must be defined and greater than 0");
      }
      this.size = size;
      this.data = new Uint8Array(size * size);
      this.reservedBit = new Uint8Array(size * size);
    }
    BitMatrix.prototype.set = function(row, col, value, reserved) {
      const index = row * this.size + col;
      this.data[index] = value;
      if (reserved) this.reservedBit[index] = true;
    };
    BitMatrix.prototype.get = function(row, col) {
      return this.data[row * this.size + col];
    };
    BitMatrix.prototype.xor = function(row, col, value) {
      this.data[row * this.size + col] ^= value;
    };
    BitMatrix.prototype.isReserved = function(row, col) {
      return this.reservedBit[row * this.size + col];
    };
    module2.exports = BitMatrix;
  }
});

// node_modules/qrcode/lib/core/alignment-pattern.js
var require_alignment_pattern = __commonJS({
  "node_modules/qrcode/lib/core/alignment-pattern.js"(exports2) {
    var getSymbolSize = require_utils().getSymbolSize;
    exports2.getRowColCoords = function getRowColCoords(version4) {
      if (version4 === 1) return [];
      const posCount = Math.floor(version4 / 7) + 2;
      const size = getSymbolSize(version4);
      const intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
      const positions = [size - 7];
      for (let i = 1; i < posCount - 1; i++) {
        positions[i] = positions[i - 1] - intervals;
      }
      positions.push(6);
      return positions.reverse();
    };
    exports2.getPositions = function getPositions(version4) {
      const coords = [];
      const pos = exports2.getRowColCoords(version4);
      const posLength = pos.length;
      for (let i = 0; i < posLength; i++) {
        for (let j = 0; j < posLength; j++) {
          if (i === 0 && j === 0 || // top-left
          i === 0 && j === posLength - 1 || // bottom-left
          i === posLength - 1 && j === 0) {
            continue;
          }
          coords.push([pos[i], pos[j]]);
        }
      }
      return coords;
    };
  }
});

// node_modules/qrcode/lib/core/finder-pattern.js
var require_finder_pattern = __commonJS({
  "node_modules/qrcode/lib/core/finder-pattern.js"(exports2) {
    var getSymbolSize = require_utils().getSymbolSize;
    var FINDER_PATTERN_SIZE = 7;
    exports2.getPositions = function getPositions(version4) {
      const size = getSymbolSize(version4);
      return [
        // top-left
        [0, 0],
        // top-right
        [size - FINDER_PATTERN_SIZE, 0],
        // bottom-left
        [0, size - FINDER_PATTERN_SIZE]
      ];
    };
  }
});

// node_modules/qrcode/lib/core/mask-pattern.js
var require_mask_pattern = __commonJS({
  "node_modules/qrcode/lib/core/mask-pattern.js"(exports2) {
    exports2.Patterns = {
      PATTERN000: 0,
      PATTERN001: 1,
      PATTERN010: 2,
      PATTERN011: 3,
      PATTERN100: 4,
      PATTERN101: 5,
      PATTERN110: 6,
      PATTERN111: 7
    };
    var PenaltyScores = {
      N1: 3,
      N2: 3,
      N3: 40,
      N4: 10
    };
    exports2.isValid = function isValid(mask) {
      return mask != null && mask !== "" && !isNaN(mask) && mask >= 0 && mask <= 7;
    };
    exports2.from = function from(value) {
      return exports2.isValid(value) ? parseInt(value, 10) : void 0;
    };
    exports2.getPenaltyN1 = function getPenaltyN1(data) {
      const size = data.size;
      let points = 0;
      let sameCountCol = 0;
      let sameCountRow = 0;
      let lastCol = null;
      let lastRow = null;
      for (let row = 0; row < size; row++) {
        sameCountCol = sameCountRow = 0;
        lastCol = lastRow = null;
        for (let col = 0; col < size; col++) {
          let module3 = data.get(row, col);
          if (module3 === lastCol) {
            sameCountCol++;
          } else {
            if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
            lastCol = module3;
            sameCountCol = 1;
          }
          module3 = data.get(col, row);
          if (module3 === lastRow) {
            sameCountRow++;
          } else {
            if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
            lastRow = module3;
            sameCountRow = 1;
          }
        }
        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
      }
      return points;
    };
    exports2.getPenaltyN2 = function getPenaltyN2(data) {
      const size = data.size;
      let points = 0;
      for (let row = 0; row < size - 1; row++) {
        for (let col = 0; col < size - 1; col++) {
          const last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
          if (last === 4 || last === 0) points++;
        }
      }
      return points * PenaltyScores.N2;
    };
    exports2.getPenaltyN3 = function getPenaltyN3(data) {
      const size = data.size;
      let points = 0;
      let bitsCol = 0;
      let bitsRow = 0;
      for (let row = 0; row < size; row++) {
        bitsCol = bitsRow = 0;
        for (let col = 0; col < size; col++) {
          bitsCol = bitsCol << 1 & 2047 | data.get(row, col);
          if (col >= 10 && (bitsCol === 1488 || bitsCol === 93)) points++;
          bitsRow = bitsRow << 1 & 2047 | data.get(col, row);
          if (col >= 10 && (bitsRow === 1488 || bitsRow === 93)) points++;
        }
      }
      return points * PenaltyScores.N3;
    };
    exports2.getPenaltyN4 = function getPenaltyN4(data) {
      let darkCount = 0;
      const modulesCount = data.data.length;
      for (let i = 0; i < modulesCount; i++) darkCount += data.data[i];
      const k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
      return k * PenaltyScores.N4;
    };
    function getMaskAt(maskPattern, i, j) {
      switch (maskPattern) {
        case exports2.Patterns.PATTERN000:
          return (i + j) % 2 === 0;
        case exports2.Patterns.PATTERN001:
          return i % 2 === 0;
        case exports2.Patterns.PATTERN010:
          return j % 3 === 0;
        case exports2.Patterns.PATTERN011:
          return (i + j) % 3 === 0;
        case exports2.Patterns.PATTERN100:
          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;
        case exports2.Patterns.PATTERN101:
          return i * j % 2 + i * j % 3 === 0;
        case exports2.Patterns.PATTERN110:
          return (i * j % 2 + i * j % 3) % 2 === 0;
        case exports2.Patterns.PATTERN111:
          return (i * j % 3 + (i + j) % 2) % 2 === 0;
        default:
          throw new Error("bad maskPattern:" + maskPattern);
      }
    }
    exports2.applyMask = function applyMask(pattern, data) {
      const size = data.size;
      for (let col = 0; col < size; col++) {
        for (let row = 0; row < size; row++) {
          if (data.isReserved(row, col)) continue;
          data.xor(row, col, getMaskAt(pattern, row, col));
        }
      }
    };
    exports2.getBestMask = function getBestMask(data, setupFormatFunc) {
      const numPatterns = Object.keys(exports2.Patterns).length;
      let bestPattern = 0;
      let lowerPenalty = Infinity;
      for (let p = 0; p < numPatterns; p++) {
        setupFormatFunc(p);
        exports2.applyMask(p, data);
        const penalty = exports2.getPenaltyN1(data) + exports2.getPenaltyN2(data) + exports2.getPenaltyN3(data) + exports2.getPenaltyN4(data);
        exports2.applyMask(p, data);
        if (penalty < lowerPenalty) {
          lowerPenalty = penalty;
          bestPattern = p;
        }
      }
      return bestPattern;
    };
  }
});

// node_modules/qrcode/lib/core/error-correction-code.js
var require_error_correction_code = __commonJS({
  "node_modules/qrcode/lib/core/error-correction-code.js"(exports2) {
    var ECLevel = require_error_correction_level();
    var EC_BLOCKS_TABLE = [
      // L  M  Q  H
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      2,
      2,
      1,
      2,
      2,
      4,
      1,
      2,
      4,
      4,
      2,
      4,
      4,
      4,
      2,
      4,
      6,
      5,
      2,
      4,
      6,
      6,
      2,
      5,
      8,
      8,
      4,
      5,
      8,
      8,
      4,
      5,
      8,
      11,
      4,
      8,
      10,
      11,
      4,
      9,
      12,
      16,
      4,
      9,
      16,
      16,
      6,
      10,
      12,
      18,
      6,
      10,
      17,
      16,
      6,
      11,
      16,
      19,
      6,
      13,
      18,
      21,
      7,
      14,
      21,
      25,
      8,
      16,
      20,
      25,
      8,
      17,
      23,
      25,
      9,
      17,
      23,
      34,
      9,
      18,
      25,
      30,
      10,
      20,
      27,
      32,
      12,
      21,
      29,
      35,
      12,
      23,
      34,
      37,
      12,
      25,
      34,
      40,
      13,
      26,
      35,
      42,
      14,
      28,
      38,
      45,
      15,
      29,
      40,
      48,
      16,
      31,
      43,
      51,
      17,
      33,
      45,
      54,
      18,
      35,
      48,
      57,
      19,
      37,
      51,
      60,
      19,
      38,
      53,
      63,
      20,
      40,
      56,
      66,
      21,
      43,
      59,
      70,
      22,
      45,
      62,
      74,
      24,
      47,
      65,
      77,
      25,
      49,
      68,
      81
    ];
    var EC_CODEWORDS_TABLE = [
      // L  M  Q  H
      7,
      10,
      13,
      17,
      10,
      16,
      22,
      28,
      15,
      26,
      36,
      44,
      20,
      36,
      52,
      64,
      26,
      48,
      72,
      88,
      36,
      64,
      96,
      112,
      40,
      72,
      108,
      130,
      48,
      88,
      132,
      156,
      60,
      110,
      160,
      192,
      72,
      130,
      192,
      224,
      80,
      150,
      224,
      264,
      96,
      176,
      260,
      308,
      104,
      198,
      288,
      352,
      120,
      216,
      320,
      384,
      132,
      240,
      360,
      432,
      144,
      280,
      408,
      480,
      168,
      308,
      448,
      532,
      180,
      338,
      504,
      588,
      196,
      364,
      546,
      650,
      224,
      416,
      600,
      700,
      224,
      442,
      644,
      750,
      252,
      476,
      690,
      816,
      270,
      504,
      750,
      900,
      300,
      560,
      810,
      960,
      312,
      588,
      870,
      1050,
      336,
      644,
      952,
      1110,
      360,
      700,
      1020,
      1200,
      390,
      728,
      1050,
      1260,
      420,
      784,
      1140,
      1350,
      450,
      812,
      1200,
      1440,
      480,
      868,
      1290,
      1530,
      510,
      924,
      1350,
      1620,
      540,
      980,
      1440,
      1710,
      570,
      1036,
      1530,
      1800,
      570,
      1064,
      1590,
      1890,
      600,
      1120,
      1680,
      1980,
      630,
      1204,
      1770,
      2100,
      660,
      1260,
      1860,
      2220,
      720,
      1316,
      1950,
      2310,
      750,
      1372,
      2040,
      2430
    ];
    exports2.getBlocksCount = function getBlocksCount(version4, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_BLOCKS_TABLE[(version4 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_BLOCKS_TABLE[(version4 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_BLOCKS_TABLE[(version4 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_BLOCKS_TABLE[(version4 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
    exports2.getTotalCodewordsCount = function getTotalCodewordsCount(version4, errorCorrectionLevel) {
      switch (errorCorrectionLevel) {
        case ECLevel.L:
          return EC_CODEWORDS_TABLE[(version4 - 1) * 4 + 0];
        case ECLevel.M:
          return EC_CODEWORDS_TABLE[(version4 - 1) * 4 + 1];
        case ECLevel.Q:
          return EC_CODEWORDS_TABLE[(version4 - 1) * 4 + 2];
        case ECLevel.H:
          return EC_CODEWORDS_TABLE[(version4 - 1) * 4 + 3];
        default:
          return void 0;
      }
    };
  }
});

// node_modules/qrcode/lib/core/galois-field.js
var require_galois_field = __commonJS({
  "node_modules/qrcode/lib/core/galois-field.js"(exports2) {
    var EXP_TABLE = new Uint8Array(512);
    var LOG_TABLE = new Uint8Array(256);
    (function initTables() {
      let x = 1;
      for (let i = 0; i < 255; i++) {
        EXP_TABLE[i] = x;
        LOG_TABLE[x] = i;
        x <<= 1;
        if (x & 256) {
          x ^= 285;
        }
      }
      for (let i = 255; i < 512; i++) {
        EXP_TABLE[i] = EXP_TABLE[i - 255];
      }
    })();
    exports2.log = function log(n) {
      if (n < 1) throw new Error("log(" + n + ")");
      return LOG_TABLE[n];
    };
    exports2.exp = function exp(n) {
      return EXP_TABLE[n];
    };
    exports2.mul = function mul(x, y) {
      if (x === 0 || y === 0) return 0;
      return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];
    };
  }
});

// node_modules/qrcode/lib/core/polynomial.js
var require_polynomial = __commonJS({
  "node_modules/qrcode/lib/core/polynomial.js"(exports2) {
    var GF = require_galois_field();
    exports2.mul = function mul(p1, p2) {
      const coeff = new Uint8Array(p1.length + p2.length - 1);
      for (let i = 0; i < p1.length; i++) {
        for (let j = 0; j < p2.length; j++) {
          coeff[i + j] ^= GF.mul(p1[i], p2[j]);
        }
      }
      return coeff;
    };
    exports2.mod = function mod(divident, divisor) {
      let result = new Uint8Array(divident);
      while (result.length - divisor.length >= 0) {
        const coeff = result[0];
        for (let i = 0; i < divisor.length; i++) {
          result[i] ^= GF.mul(divisor[i], coeff);
        }
        let offset = 0;
        while (offset < result.length && result[offset] === 0) offset++;
        result = result.slice(offset);
      }
      return result;
    };
    exports2.generateECPolynomial = function generateECPolynomial(degree) {
      let poly = new Uint8Array([1]);
      for (let i = 0; i < degree; i++) {
        poly = exports2.mul(poly, new Uint8Array([1, GF.exp(i)]));
      }
      return poly;
    };
  }
});

// node_modules/qrcode/lib/core/reed-solomon-encoder.js
var require_reed_solomon_encoder = __commonJS({
  "node_modules/qrcode/lib/core/reed-solomon-encoder.js"(exports2, module2) {
    var Polynomial = require_polynomial();
    function ReedSolomonEncoder(degree) {
      this.genPoly = void 0;
      this.degree = degree;
      if (this.degree) this.initialize(this.degree);
    }
    ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
      this.degree = degree;
      this.genPoly = Polynomial.generateECPolynomial(this.degree);
    };
    ReedSolomonEncoder.prototype.encode = function encode(data) {
      if (!this.genPoly) {
        throw new Error("Encoder not initialized");
      }
      const paddedData = new Uint8Array(data.length + this.degree);
      paddedData.set(data);
      const remainder = Polynomial.mod(paddedData, this.genPoly);
      const start = this.degree - remainder.length;
      if (start > 0) {
        const buff = new Uint8Array(this.degree);
        buff.set(remainder, start);
        return buff;
      }
      return remainder;
    };
    module2.exports = ReedSolomonEncoder;
  }
});

// node_modules/qrcode/lib/core/version-check.js
var require_version_check = __commonJS({
  "node_modules/qrcode/lib/core/version-check.js"(exports2) {
    exports2.isValid = function isValid(version4) {
      return !isNaN(version4) && version4 >= 1 && version4 <= 40;
    };
  }
});

// node_modules/qrcode/lib/core/regex.js
var require_regex = __commonJS({
  "node_modules/qrcode/lib/core/regex.js"(exports2) {
    var numeric = "[0-9]+";
    var alphanumeric = "[A-Z $%*+\\-./:]+";
    var kanji = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
    kanji = kanji.replace(/u/g, "\\u");
    var byte = "(?:(?![A-Z0-9 $%*+\\-./:]|" + kanji + ")(?:.|[\r\n]))+";
    exports2.KANJI = new RegExp(kanji, "g");
    exports2.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
    exports2.BYTE = new RegExp(byte, "g");
    exports2.NUMERIC = new RegExp(numeric, "g");
    exports2.ALPHANUMERIC = new RegExp(alphanumeric, "g");
    var TEST_KANJI = new RegExp("^" + kanji + "$");
    var TEST_NUMERIC = new RegExp("^" + numeric + "$");
    var TEST_ALPHANUMERIC = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");
    exports2.testKanji = function testKanji(str) {
      return TEST_KANJI.test(str);
    };
    exports2.testNumeric = function testNumeric(str) {
      return TEST_NUMERIC.test(str);
    };
    exports2.testAlphanumeric = function testAlphanumeric(str) {
      return TEST_ALPHANUMERIC.test(str);
    };
  }
});

// node_modules/qrcode/lib/core/mode.js
var require_mode = __commonJS({
  "node_modules/qrcode/lib/core/mode.js"(exports2) {
    var VersionCheck = require_version_check();
    var Regex = require_regex();
    exports2.NUMERIC = {
      id: "Numeric",
      bit: 1 << 0,
      ccBits: [10, 12, 14]
    };
    exports2.ALPHANUMERIC = {
      id: "Alphanumeric",
      bit: 1 << 1,
      ccBits: [9, 11, 13]
    };
    exports2.BYTE = {
      id: "Byte",
      bit: 1 << 2,
      ccBits: [8, 16, 16]
    };
    exports2.KANJI = {
      id: "Kanji",
      bit: 1 << 3,
      ccBits: [8, 10, 12]
    };
    exports2.MIXED = {
      bit: -1
    };
    exports2.getCharCountIndicator = function getCharCountIndicator(mode, version4) {
      if (!mode.ccBits) throw new Error("Invalid mode: " + mode);
      if (!VersionCheck.isValid(version4)) {
        throw new Error("Invalid version: " + version4);
      }
      if (version4 >= 1 && version4 < 10) return mode.ccBits[0];
      else if (version4 < 27) return mode.ccBits[1];
      return mode.ccBits[2];
    };
    exports2.getBestModeForData = function getBestModeForData(dataStr) {
      if (Regex.testNumeric(dataStr)) return exports2.NUMERIC;
      else if (Regex.testAlphanumeric(dataStr)) return exports2.ALPHANUMERIC;
      else if (Regex.testKanji(dataStr)) return exports2.KANJI;
      else return exports2.BYTE;
    };
    exports2.toString = function toString3(mode) {
      if (mode && mode.id) return mode.id;
      throw new Error("Invalid mode");
    };
    exports2.isValid = function isValid(mode) {
      return mode && mode.bit && mode.ccBits;
    };
    function fromString(string3) {
      if (typeof string3 !== "string") {
        throw new Error("Param is not a string");
      }
      const lcStr = string3.toLowerCase();
      switch (lcStr) {
        case "numeric":
          return exports2.NUMERIC;
        case "alphanumeric":
          return exports2.ALPHANUMERIC;
        case "kanji":
          return exports2.KANJI;
        case "byte":
          return exports2.BYTE;
        default:
          throw new Error("Unknown mode: " + string3);
      }
    }
    exports2.from = function from(value, defaultValue) {
      if (exports2.isValid(value)) {
        return value;
      }
      try {
        return fromString(value);
      } catch (e2) {
        return defaultValue;
      }
    };
  }
});

// node_modules/qrcode/lib/core/version.js
var require_version = __commonJS({
  "node_modules/qrcode/lib/core/version.js"(exports2) {
    var Utils = require_utils();
    var ECCode = require_error_correction_code();
    var ECLevel = require_error_correction_level();
    var Mode = require_mode();
    var VersionCheck = require_version_check();
    var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
    var G18_BCH = Utils.getBCHDigit(G18);
    function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
      for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
        if (length <= exports2.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    function getReservedBitsCount(mode, version4) {
      return Mode.getCharCountIndicator(mode, version4) + 4;
    }
    function getTotalBitsFromDataArray(segments, version4) {
      let totalBits = 0;
      segments.forEach(function(data) {
        const reservedBits = getReservedBitsCount(data.mode, version4);
        totalBits += reservedBits + data.getBitsLength();
      });
      return totalBits;
    }
    function getBestVersionForMixedData(segments, errorCorrectionLevel) {
      for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {
        const length = getTotalBitsFromDataArray(segments, currentVersion);
        if (length <= exports2.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
          return currentVersion;
        }
      }
      return void 0;
    }
    exports2.from = function from(value, defaultValue) {
      if (VersionCheck.isValid(value)) {
        return parseInt(value, 10);
      }
      return defaultValue;
    };
    exports2.getCapacity = function getCapacity(version4, errorCorrectionLevel, mode) {
      if (!VersionCheck.isValid(version4)) {
        throw new Error("Invalid QR Code version");
      }
      if (typeof mode === "undefined") mode = Mode.BYTE;
      const totalCodewords = Utils.getSymbolTotalCodewords(version4);
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version4, errorCorrectionLevel);
      const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (mode === Mode.MIXED) return dataTotalCodewordsBits;
      const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version4);
      switch (mode) {
        case Mode.NUMERIC:
          return Math.floor(usableBits / 10 * 3);
        case Mode.ALPHANUMERIC:
          return Math.floor(usableBits / 11 * 2);
        case Mode.KANJI:
          return Math.floor(usableBits / 13);
        case Mode.BYTE:
        default:
          return Math.floor(usableBits / 8);
      }
    };
    exports2.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
      let seg;
      const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);
      if (Array.isArray(data)) {
        if (data.length > 1) {
          return getBestVersionForMixedData(data, ecl);
        }
        if (data.length === 0) {
          return 1;
        }
        seg = data[0];
      } else {
        seg = data;
      }
      return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
    };
    exports2.getEncodedBits = function getEncodedBits(version4) {
      if (!VersionCheck.isValid(version4) || version4 < 7) {
        throw new Error("Invalid QR Code version");
      }
      let d = version4 << 12;
      while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
        d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;
      }
      return version4 << 12 | d;
    };
  }
});

// node_modules/qrcode/lib/core/format-info.js
var require_format_info = __commonJS({
  "node_modules/qrcode/lib/core/format-info.js"(exports2) {
    var Utils = require_utils();
    var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
    var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
    var G15_BCH = Utils.getBCHDigit(G15);
    exports2.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
      const data = errorCorrectionLevel.bit << 3 | mask;
      let d = data << 10;
      while (Utils.getBCHDigit(d) - G15_BCH >= 0) {
        d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;
      }
      return (data << 10 | d) ^ G15_MASK;
    };
  }
});

// node_modules/qrcode/lib/core/numeric-data.js
var require_numeric_data = __commonJS({
  "node_modules/qrcode/lib/core/numeric-data.js"(exports2, module2) {
    var Mode = require_mode();
    function NumericData(data) {
      this.mode = Mode.NUMERIC;
      this.data = data.toString();
    }
    NumericData.getBitsLength = function getBitsLength(length) {
      return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
    };
    NumericData.prototype.getLength = function getLength() {
      return this.data.length;
    };
    NumericData.prototype.getBitsLength = function getBitsLength() {
      return NumericData.getBitsLength(this.data.length);
    };
    NumericData.prototype.write = function write(bitBuffer) {
      let i, group, value;
      for (i = 0; i + 3 <= this.data.length; i += 3) {
        group = this.data.substr(i, 3);
        value = parseInt(group, 10);
        bitBuffer.put(value, 10);
      }
      const remainingNum = this.data.length - i;
      if (remainingNum > 0) {
        group = this.data.substr(i);
        value = parseInt(group, 10);
        bitBuffer.put(value, remainingNum * 3 + 1);
      }
    };
    module2.exports = NumericData;
  }
});

// node_modules/qrcode/lib/core/alphanumeric-data.js
var require_alphanumeric_data = __commonJS({
  "node_modules/qrcode/lib/core/alphanumeric-data.js"(exports2, module2) {
    var Mode = require_mode();
    var ALPHA_NUM_CHARS = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z",
      " ",
      "$",
      "%",
      "*",
      "+",
      "-",
      ".",
      "/",
      ":"
    ];
    function AlphanumericData(data) {
      this.mode = Mode.ALPHANUMERIC;
      this.data = data;
    }
    AlphanumericData.getBitsLength = function getBitsLength(length) {
      return 11 * Math.floor(length / 2) + 6 * (length % 2);
    };
    AlphanumericData.prototype.getLength = function getLength() {
      return this.data.length;
    };
    AlphanumericData.prototype.getBitsLength = function getBitsLength() {
      return AlphanumericData.getBitsLength(this.data.length);
    };
    AlphanumericData.prototype.write = function write(bitBuffer) {
      let i;
      for (i = 0; i + 2 <= this.data.length; i += 2) {
        let value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;
        value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);
        bitBuffer.put(value, 11);
      }
      if (this.data.length % 2) {
        bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
      }
    };
    module2.exports = AlphanumericData;
  }
});

// node_modules/encode-utf8/index.js
var require_encode_utf8 = __commonJS({
  "node_modules/encode-utf8/index.js"(exports2, module2) {
    "use strict";
    module2.exports = function encodeUtf8(input) {
      var result = [];
      var size = input.length;
      for (var index = 0; index < size; index++) {
        var point = input.charCodeAt(index);
        if (point >= 55296 && point <= 56319 && size > index + 1) {
          var second = input.charCodeAt(index + 1);
          if (second >= 56320 && second <= 57343) {
            point = (point - 55296) * 1024 + second - 56320 + 65536;
            index += 1;
          }
        }
        if (point < 128) {
          result.push(point);
          continue;
        }
        if (point < 2048) {
          result.push(point >> 6 | 192);
          result.push(point & 63 | 128);
          continue;
        }
        if (point < 55296 || point >= 57344 && point < 65536) {
          result.push(point >> 12 | 224);
          result.push(point >> 6 & 63 | 128);
          result.push(point & 63 | 128);
          continue;
        }
        if (point >= 65536 && point <= 1114111) {
          result.push(point >> 18 | 240);
          result.push(point >> 12 & 63 | 128);
          result.push(point >> 6 & 63 | 128);
          result.push(point & 63 | 128);
          continue;
        }
        result.push(239, 191, 189);
      }
      return new Uint8Array(result).buffer;
    };
  }
});

// node_modules/qrcode/lib/core/byte-data.js
var require_byte_data = __commonJS({
  "node_modules/qrcode/lib/core/byte-data.js"(exports2, module2) {
    var encodeUtf8 = require_encode_utf8();
    var Mode = require_mode();
    function ByteData(data) {
      this.mode = Mode.BYTE;
      if (typeof data === "string") {
        data = encodeUtf8(data);
      }
      this.data = new Uint8Array(data);
    }
    ByteData.getBitsLength = function getBitsLength(length) {
      return length * 8;
    };
    ByteData.prototype.getLength = function getLength() {
      return this.data.length;
    };
    ByteData.prototype.getBitsLength = function getBitsLength() {
      return ByteData.getBitsLength(this.data.length);
    };
    ByteData.prototype.write = function(bitBuffer) {
      for (let i = 0, l = this.data.length; i < l; i++) {
        bitBuffer.put(this.data[i], 8);
      }
    };
    module2.exports = ByteData;
  }
});

// node_modules/qrcode/lib/core/kanji-data.js
var require_kanji_data = __commonJS({
  "node_modules/qrcode/lib/core/kanji-data.js"(exports2, module2) {
    var Mode = require_mode();
    var Utils = require_utils();
    function KanjiData(data) {
      this.mode = Mode.KANJI;
      this.data = data;
    }
    KanjiData.getBitsLength = function getBitsLength(length) {
      return length * 13;
    };
    KanjiData.prototype.getLength = function getLength() {
      return this.data.length;
    };
    KanjiData.prototype.getBitsLength = function getBitsLength() {
      return KanjiData.getBitsLength(this.data.length);
    };
    KanjiData.prototype.write = function(bitBuffer) {
      let i;
      for (i = 0; i < this.data.length; i++) {
        let value = Utils.toSJIS(this.data[i]);
        if (value >= 33088 && value <= 40956) {
          value -= 33088;
        } else if (value >= 57408 && value <= 60351) {
          value -= 49472;
        } else {
          throw new Error(
            "Invalid SJIS character: " + this.data[i] + "\nMake sure your charset is UTF-8"
          );
        }
        value = (value >>> 8 & 255) * 192 + (value & 255);
        bitBuffer.put(value, 13);
      }
    };
    module2.exports = KanjiData;
  }
});

// node_modules/dijkstrajs/dijkstra.js
var require_dijkstra = __commonJS({
  "node_modules/dijkstrajs/dijkstra.js"(exports2, module2) {
    "use strict";
    var dijkstra = {
      single_source_shortest_paths: function(graph, s, d) {
        var predecessors = {};
        var costs = {};
        costs[s] = 0;
        var open = dijkstra.PriorityQueue.make();
        open.push(s, 0);
        var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;
        while (!open.empty()) {
          closest = open.pop();
          u = closest.value;
          cost_of_s_to_u = closest.cost;
          adjacent_nodes = graph[u] || {};
          for (v in adjacent_nodes) {
            if (adjacent_nodes.hasOwnProperty(v)) {
              cost_of_e = adjacent_nodes[v];
              cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;
              cost_of_s_to_v = costs[v];
              first_visit = typeof costs[v] === "undefined";
              if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
                costs[v] = cost_of_s_to_u_plus_cost_of_e;
                open.push(v, cost_of_s_to_u_plus_cost_of_e);
                predecessors[v] = u;
              }
            }
          }
        }
        if (typeof d !== "undefined" && typeof costs[d] === "undefined") {
          var msg = ["Could not find a path from ", s, " to ", d, "."].join("");
          throw new Error(msg);
        }
        return predecessors;
      },
      extract_shortest_path_from_predecessor_list: function(predecessors, d) {
        var nodes = [];
        var u = d;
        var predecessor;
        while (u) {
          nodes.push(u);
          predecessor = predecessors[u];
          u = predecessors[u];
        }
        nodes.reverse();
        return nodes;
      },
      find_path: function(graph, s, d) {
        var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
        return dijkstra.extract_shortest_path_from_predecessor_list(
          predecessors,
          d
        );
      },
      /**
       * A very naive priority queue implementation.
       */
      PriorityQueue: {
        make: function(opts) {
          var T = dijkstra.PriorityQueue, t2 = {}, key;
          opts = opts || {};
          for (key in T) {
            if (T.hasOwnProperty(key)) {
              t2[key] = T[key];
            }
          }
          t2.queue = [];
          t2.sorter = opts.sorter || T.default_sorter;
          return t2;
        },
        default_sorter: function(a, b) {
          return a.cost - b.cost;
        },
        /**
         * Add a new item to the queue and ensure the highest priority element
         * is at the front of the queue.
         */
        push: function(value, cost) {
          var item = { value, cost };
          this.queue.push(item);
          this.queue.sort(this.sorter);
        },
        /**
         * Return the highest priority element in the queue.
         */
        pop: function() {
          return this.queue.shift();
        },
        empty: function() {
          return this.queue.length === 0;
        }
      }
    };
    if (typeof module2 !== "undefined") {
      module2.exports = dijkstra;
    }
  }
});

// node_modules/qrcode/lib/core/segments.js
var require_segments = __commonJS({
  "node_modules/qrcode/lib/core/segments.js"(exports2) {
    var Mode = require_mode();
    var NumericData = require_numeric_data();
    var AlphanumericData = require_alphanumeric_data();
    var ByteData = require_byte_data();
    var KanjiData = require_kanji_data();
    var Regex = require_regex();
    var Utils = require_utils();
    var dijkstra = require_dijkstra();
    function getStringByteLength(str) {
      return unescape(encodeURIComponent(str)).length;
    }
    function getSegments(regex, mode, str) {
      const segments = [];
      let result;
      while ((result = regex.exec(str)) !== null) {
        segments.push({
          data: result[0],
          index: result.index,
          mode,
          length: result[0].length
        });
      }
      return segments;
    }
    function getSegmentsFromString(dataStr) {
      const numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
      const alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
      let byteSegs;
      let kanjiSegs;
      if (Utils.isKanjiModeEnabled()) {
        byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
        kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
      } else {
        byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
        kanjiSegs = [];
      }
      const segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
      return segs.sort(function(s1, s2) {
        return s1.index - s2.index;
      }).map(function(obj) {
        return {
          data: obj.data,
          mode: obj.mode,
          length: obj.length
        };
      });
    }
    function getSegmentBitsLength(length, mode) {
      switch (mode) {
        case Mode.NUMERIC:
          return NumericData.getBitsLength(length);
        case Mode.ALPHANUMERIC:
          return AlphanumericData.getBitsLength(length);
        case Mode.KANJI:
          return KanjiData.getBitsLength(length);
        case Mode.BYTE:
          return ByteData.getBitsLength(length);
      }
    }
    function mergeSegments(segs) {
      return segs.reduce(function(acc, curr) {
        const prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;
        if (prevSeg && prevSeg.mode === curr.mode) {
          acc[acc.length - 1].data += curr.data;
          return acc;
        }
        acc.push(curr);
        return acc;
      }, []);
    }
    function buildNodes(segs) {
      const nodes = [];
      for (let i = 0; i < segs.length; i++) {
        const seg = segs[i];
        switch (seg.mode) {
          case Mode.NUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.ALPHANUMERIC, length: seg.length },
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.ALPHANUMERIC:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: seg.length }
            ]);
            break;
          case Mode.KANJI:
            nodes.push([
              seg,
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
            break;
          case Mode.BYTE:
            nodes.push([
              { data: seg.data, mode: Mode.BYTE, length: getStringByteLength(seg.data) }
            ]);
        }
      }
      return nodes;
    }
    function buildGraph(nodes, version4) {
      const table = {};
      const graph = { start: {} };
      let prevNodeIds = ["start"];
      for (let i = 0; i < nodes.length; i++) {
        const nodeGroup = nodes[i];
        const currentNodeIds = [];
        for (let j = 0; j < nodeGroup.length; j++) {
          const node2 = nodeGroup[j];
          const key = "" + i + j;
          currentNodeIds.push(key);
          table[key] = { node: node2, lastCount: 0 };
          graph[key] = {};
          for (let n = 0; n < prevNodeIds.length; n++) {
            const prevNodeId = prevNodeIds[n];
            if (table[prevNodeId] && table[prevNodeId].node.mode === node2.mode) {
              graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node2.length, node2.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node2.mode);
              table[prevNodeId].lastCount += node2.length;
            } else {
              if (table[prevNodeId]) table[prevNodeId].lastCount = node2.length;
              graph[prevNodeId][key] = getSegmentBitsLength(node2.length, node2.mode) + 4 + Mode.getCharCountIndicator(node2.mode, version4);
            }
          }
        }
        prevNodeIds = currentNodeIds;
      }
      for (let n = 0; n < prevNodeIds.length; n++) {
        graph[prevNodeIds[n]].end = 0;
      }
      return { map: graph, table };
    }
    function buildSingleSegment(data, modesHint) {
      let mode;
      const bestMode = Mode.getBestModeForData(data);
      mode = Mode.from(modesHint, bestMode);
      if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
        throw new Error('"' + data + '" cannot be encoded with mode ' + Mode.toString(mode) + ".\n Suggested mode is: " + Mode.toString(bestMode));
      }
      if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
        mode = Mode.BYTE;
      }
      switch (mode) {
        case Mode.NUMERIC:
          return new NumericData(data);
        case Mode.ALPHANUMERIC:
          return new AlphanumericData(data);
        case Mode.KANJI:
          return new KanjiData(data);
        case Mode.BYTE:
          return new ByteData(data);
      }
    }
    exports2.fromArray = function fromArray(array2) {
      return array2.reduce(function(acc, seg) {
        if (typeof seg === "string") {
          acc.push(buildSingleSegment(seg, null));
        } else if (seg.data) {
          acc.push(buildSingleSegment(seg.data, seg.mode));
        }
        return acc;
      }, []);
    };
    exports2.fromString = function fromString(data, version4) {
      const segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
      const nodes = buildNodes(segs);
      const graph = buildGraph(nodes, version4);
      const path = dijkstra.find_path(graph.map, "start", "end");
      const optimizedSegs = [];
      for (let i = 1; i < path.length - 1; i++) {
        optimizedSegs.push(graph.table[path[i]].node);
      }
      return exports2.fromArray(mergeSegments(optimizedSegs));
    };
    exports2.rawSplit = function rawSplit(data) {
      return exports2.fromArray(
        getSegmentsFromString(data, Utils.isKanjiModeEnabled())
      );
    };
  }
});

// node_modules/qrcode/lib/core/qrcode.js
var require_qrcode = __commonJS({
  "node_modules/qrcode/lib/core/qrcode.js"(exports2) {
    var Utils = require_utils();
    var ECLevel = require_error_correction_level();
    var BitBuffer = require_bit_buffer();
    var BitMatrix = require_bit_matrix();
    var AlignmentPattern = require_alignment_pattern();
    var FinderPattern = require_finder_pattern();
    var MaskPattern = require_mask_pattern();
    var ECCode = require_error_correction_code();
    var ReedSolomonEncoder = require_reed_solomon_encoder();
    var Version = require_version();
    var FormatInfo = require_format_info();
    var Mode = require_mode();
    var Segments = require_segments();
    function setupFinderPattern(matrix, version4) {
      const size = matrix.size;
      const pos = FinderPattern.getPositions(version4);
      for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0];
        const col = pos[i][1];
        for (let r = -1; r <= 7; r++) {
          if (row + r <= -1 || size <= row + r) continue;
          for (let c = -1; c <= 7; c++) {
            if (col + c <= -1 || size <= col + c) continue;
            if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {
              matrix.set(row + r, col + c, true, true);
            } else {
              matrix.set(row + r, col + c, false, true);
            }
          }
        }
      }
    }
    function setupTimingPattern(matrix) {
      const size = matrix.size;
      for (let r = 8; r < size - 8; r++) {
        const value = r % 2 === 0;
        matrix.set(r, 6, value, true);
        matrix.set(6, r, value, true);
      }
    }
    function setupAlignmentPattern(matrix, version4) {
      const pos = AlignmentPattern.getPositions(version4);
      for (let i = 0; i < pos.length; i++) {
        const row = pos[i][0];
        const col = pos[i][1];
        for (let r = -2; r <= 2; r++) {
          for (let c = -2; c <= 2; c++) {
            if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {
              matrix.set(row + r, col + c, true, true);
            } else {
              matrix.set(row + r, col + c, false, true);
            }
          }
        }
      }
    }
    function setupVersionInfo(matrix, version4) {
      const size = matrix.size;
      const bits = Version.getEncodedBits(version4);
      let row, col, mod;
      for (let i = 0; i < 18; i++) {
        row = Math.floor(i / 3);
        col = i % 3 + size - 8 - 3;
        mod = (bits >> i & 1) === 1;
        matrix.set(row, col, mod, true);
        matrix.set(col, row, mod, true);
      }
    }
    function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
      const size = matrix.size;
      const bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
      let i, mod;
      for (i = 0; i < 15; i++) {
        mod = (bits >> i & 1) === 1;
        if (i < 6) {
          matrix.set(i, 8, mod, true);
        } else if (i < 8) {
          matrix.set(i + 1, 8, mod, true);
        } else {
          matrix.set(size - 15 + i, 8, mod, true);
        }
        if (i < 8) {
          matrix.set(8, size - i - 1, mod, true);
        } else if (i < 9) {
          matrix.set(8, 15 - i - 1 + 1, mod, true);
        } else {
          matrix.set(8, 15 - i - 1, mod, true);
        }
      }
      matrix.set(size - 8, 8, 1, true);
    }
    function setupData(matrix, data) {
      const size = matrix.size;
      let inc = -1;
      let row = size - 1;
      let bitIndex = 7;
      let byteIndex = 0;
      for (let col = size - 1; col > 0; col -= 2) {
        if (col === 6) col--;
        while (true) {
          for (let c = 0; c < 2; c++) {
            if (!matrix.isReserved(row, col - c)) {
              let dark = false;
              if (byteIndex < data.length) {
                dark = (data[byteIndex] >>> bitIndex & 1) === 1;
              }
              matrix.set(row, col - c, dark);
              bitIndex--;
              if (bitIndex === -1) {
                byteIndex++;
                bitIndex = 7;
              }
            }
          }
          row += inc;
          if (row < 0 || size <= row) {
            row -= inc;
            inc = -inc;
            break;
          }
        }
      }
    }
    function createData(version4, errorCorrectionLevel, segments) {
      const buffer = new BitBuffer();
      segments.forEach(function(data) {
        buffer.put(data.mode.bit, 4);
        buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version4));
        data.write(buffer);
      });
      const totalCodewords = Utils.getSymbolTotalCodewords(version4);
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version4, errorCorrectionLevel);
      const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
      if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
        buffer.put(0, 4);
      }
      while (buffer.getLengthInBits() % 8 !== 0) {
        buffer.putBit(0);
      }
      const remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;
      for (let i = 0; i < remainingByte; i++) {
        buffer.put(i % 2 ? 17 : 236, 8);
      }
      return createCodewords(buffer, version4, errorCorrectionLevel);
    }
    function createCodewords(bitBuffer, version4, errorCorrectionLevel) {
      const totalCodewords = Utils.getSymbolTotalCodewords(version4);
      const ecTotalCodewords = ECCode.getTotalCodewordsCount(version4, errorCorrectionLevel);
      const dataTotalCodewords = totalCodewords - ecTotalCodewords;
      const ecTotalBlocks = ECCode.getBlocksCount(version4, errorCorrectionLevel);
      const blocksInGroup2 = totalCodewords % ecTotalBlocks;
      const blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
      const totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
      const dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
      const dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;
      const ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;
      const rs = new ReedSolomonEncoder(ecCount);
      let offset = 0;
      const dcData = new Array(ecTotalBlocks);
      const ecData = new Array(ecTotalBlocks);
      let maxDataSize = 0;
      const buffer = new Uint8Array(bitBuffer.buffer);
      for (let b = 0; b < ecTotalBlocks; b++) {
        const dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;
        dcData[b] = buffer.slice(offset, offset + dataSize);
        ecData[b] = rs.encode(dcData[b]);
        offset += dataSize;
        maxDataSize = Math.max(maxDataSize, dataSize);
      }
      const data = new Uint8Array(totalCodewords);
      let index = 0;
      let i, r;
      for (i = 0; i < maxDataSize; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          if (i < dcData[r].length) {
            data[index++] = dcData[r][i];
          }
        }
      }
      for (i = 0; i < ecCount; i++) {
        for (r = 0; r < ecTotalBlocks; r++) {
          data[index++] = ecData[r][i];
        }
      }
      return data;
    }
    function createSymbol(data, version4, errorCorrectionLevel, maskPattern) {
      let segments;
      if (Array.isArray(data)) {
        segments = Segments.fromArray(data);
      } else if (typeof data === "string") {
        let estimatedVersion = version4;
        if (!estimatedVersion) {
          const rawSegments = Segments.rawSplit(data);
          estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);
        }
        segments = Segments.fromString(data, estimatedVersion || 40);
      } else {
        throw new Error("Invalid data");
      }
      const bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);
      if (!bestVersion) {
        throw new Error("The amount of data is too big to be stored in a QR Code");
      }
      if (!version4) {
        version4 = bestVersion;
      } else if (version4 < bestVersion) {
        throw new Error(
          "\nThe chosen QR Code version cannot contain this amount of data.\nMinimum version required to store current data is: " + bestVersion + ".\n"
        );
      }
      const dataBits = createData(version4, errorCorrectionLevel, segments);
      const moduleCount = Utils.getSymbolSize(version4);
      const modules = new BitMatrix(moduleCount);
      setupFinderPattern(modules, version4);
      setupTimingPattern(modules);
      setupAlignmentPattern(modules, version4);
      setupFormatInfo(modules, errorCorrectionLevel, 0);
      if (version4 >= 7) {
        setupVersionInfo(modules, version4);
      }
      setupData(modules, dataBits);
      if (isNaN(maskPattern)) {
        maskPattern = MaskPattern.getBestMask(
          modules,
          setupFormatInfo.bind(null, modules, errorCorrectionLevel)
        );
      }
      MaskPattern.applyMask(maskPattern, modules);
      setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
      return {
        modules,
        version: version4,
        errorCorrectionLevel,
        maskPattern,
        segments
      };
    }
    exports2.create = function create10(data, options2) {
      if (typeof data === "undefined" || data === "") {
        throw new Error("No input text");
      }
      let errorCorrectionLevel = ECLevel.M;
      let version4;
      let mask;
      if (typeof options2 !== "undefined") {
        errorCorrectionLevel = ECLevel.from(options2.errorCorrectionLevel, ECLevel.M);
        version4 = Version.from(options2.version);
        mask = MaskPattern.from(options2.maskPattern);
        if (options2.toSJISFunc) {
          Utils.setToSJISFunction(options2.toSJISFunc);
        }
      }
      return createSymbol(data, version4, errorCorrectionLevel, mask);
    };
  }
});

// node_modules/qrcode/lib/renderer/utils.js
var require_utils2 = __commonJS({
  "node_modules/qrcode/lib/renderer/utils.js"(exports2) {
    function hex2rgba(hex) {
      if (typeof hex === "number") {
        hex = hex.toString();
      }
      if (typeof hex !== "string") {
        throw new Error("Color should be defined as hex string");
      }
      let hexCode = hex.slice().replace("#", "").split("");
      if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
        throw new Error("Invalid hex color: " + hex);
      }
      if (hexCode.length === 3 || hexCode.length === 4) {
        hexCode = Array.prototype.concat.apply([], hexCode.map(function(c) {
          return [c, c];
        }));
      }
      if (hexCode.length === 6) hexCode.push("F", "F");
      const hexValue = parseInt(hexCode.join(""), 16);
      return {
        r: hexValue >> 24 & 255,
        g: hexValue >> 16 & 255,
        b: hexValue >> 8 & 255,
        a: hexValue & 255,
        hex: "#" + hexCode.slice(0, 6).join("")
      };
    }
    exports2.getOptions = function getOptions(options2) {
      if (!options2) options2 = {};
      if (!options2.color) options2.color = {};
      const margin = typeof options2.margin === "undefined" || options2.margin === null || options2.margin < 0 ? 4 : options2.margin;
      const width = options2.width && options2.width >= 21 ? options2.width : void 0;
      const scale = options2.scale || 4;
      return {
        width,
        scale: width ? 4 : scale,
        margin,
        color: {
          dark: hex2rgba(options2.color.dark || "#000000ff"),
          light: hex2rgba(options2.color.light || "#ffffffff")
        },
        type: options2.type,
        rendererOpts: options2.rendererOpts || {}
      };
    };
    exports2.getScale = function getScale(qrSize, opts) {
      return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
    };
    exports2.getImageWidth = function getImageWidth(qrSize, opts) {
      const scale = exports2.getScale(qrSize, opts);
      return Math.floor((qrSize + opts.margin * 2) * scale);
    };
    exports2.qrToImageData = function qrToImageData(imgData, qr, opts) {
      const size = qr.modules.size;
      const data = qr.modules.data;
      const scale = exports2.getScale(size, opts);
      const symbolSize = Math.floor((size + opts.margin * 2) * scale);
      const scaledMargin = opts.margin * scale;
      const palette = [opts.color.light, opts.color.dark];
      for (let i = 0; i < symbolSize; i++) {
        for (let j = 0; j < symbolSize; j++) {
          let posDst = (i * symbolSize + j) * 4;
          let pxColor = opts.color.light;
          if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
            const iSrc = Math.floor((i - scaledMargin) / scale);
            const jSrc = Math.floor((j - scaledMargin) / scale);
            pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
          }
          imgData[posDst++] = pxColor.r;
          imgData[posDst++] = pxColor.g;
          imgData[posDst++] = pxColor.b;
          imgData[posDst] = pxColor.a;
        }
      }
    };
  }
});

// node_modules/qrcode/lib/renderer/canvas.js
var require_canvas = __commonJS({
  "node_modules/qrcode/lib/renderer/canvas.js"(exports2) {
    var Utils = require_utils2();
    function clearCanvas(ctx, canvas, size) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      if (!canvas.style) canvas.style = {};
      canvas.height = size;
      canvas.width = size;
      canvas.style.height = size + "px";
      canvas.style.width = size + "px";
    }
    function getCanvasElement() {
      try {
        return document.createElement("canvas");
      } catch (e2) {
        throw new Error("You need to specify a canvas element");
      }
    }
    exports2.render = function render(qrData, canvas, options2) {
      let opts = options2;
      let canvasEl = canvas;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!canvas) {
        canvasEl = getCanvasElement();
      }
      opts = Utils.getOptions(opts);
      const size = Utils.getImageWidth(qrData.modules.size, opts);
      const ctx = canvasEl.getContext("2d");
      const image = ctx.createImageData(size, size);
      Utils.qrToImageData(image.data, qrData, opts);
      clearCanvas(ctx, canvasEl, size);
      ctx.putImageData(image, 0, 0);
      return canvasEl;
    };
    exports2.renderToDataURL = function renderToDataURL(qrData, canvas, options2) {
      let opts = options2;
      if (typeof opts === "undefined" && (!canvas || !canvas.getContext)) {
        opts = canvas;
        canvas = void 0;
      }
      if (!opts) opts = {};
      const canvasEl = exports2.render(qrData, canvas, opts);
      const type = opts.type || "image/png";
      const rendererOpts = opts.rendererOpts || {};
      return canvasEl.toDataURL(type, rendererOpts.quality);
    };
  }
});

// node_modules/qrcode/lib/renderer/svg-tag.js
var require_svg_tag = __commonJS({
  "node_modules/qrcode/lib/renderer/svg-tag.js"(exports2) {
    var Utils = require_utils2();
    function getColorAttrib(color, attrib) {
      const alpha = color.a / 255;
      const str = attrib + '="' + color.hex + '"';
      return alpha < 1 ? str + " " + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
    }
    function svgCmd(cmd, x, y) {
      let str = cmd + x;
      if (typeof y !== "undefined") str += " " + y;
      return str;
    }
    function qrToPath(data, size, margin) {
      let path = "";
      let moveBy = 0;
      let newRow = false;
      let lineLength = 0;
      for (let i = 0; i < data.length; i++) {
        const col = Math.floor(i % size);
        const row = Math.floor(i / size);
        if (!col && !newRow) newRow = true;
        if (data[i]) {
          lineLength++;
          if (!(i > 0 && col > 0 && data[i - 1])) {
            path += newRow ? svgCmd("M", col + margin, 0.5 + row + margin) : svgCmd("m", moveBy, 0);
            moveBy = 0;
            newRow = false;
          }
          if (!(col + 1 < size && data[i + 1])) {
            path += svgCmd("h", lineLength);
            lineLength = 0;
          }
        } else {
          moveBy++;
        }
      }
      return path;
    }
    exports2.render = function render(qrData, options2, cb) {
      const opts = Utils.getOptions(options2);
      const size = qrData.modules.size;
      const data = qrData.modules.data;
      const qrcodesize = size + opts.margin * 2;
      const bg = !opts.color.light.a ? "" : "<path " + getColorAttrib(opts.color.light, "fill") + ' d="M0 0h' + qrcodesize + "v" + qrcodesize + 'H0z"/>';
      const path = "<path " + getColorAttrib(opts.color.dark, "stroke") + ' d="' + qrToPath(data, size, opts.margin) + '"/>';
      const viewBox = 'viewBox="0 0 ' + qrcodesize + " " + qrcodesize + '"';
      const width = !opts.width ? "" : 'width="' + opts.width + '" height="' + opts.width + '" ';
      const svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + "</svg>\n";
      if (typeof cb === "function") {
        cb(null, svgTag);
      }
      return svgTag;
    };
  }
});

// node_modules/qrcode/lib/browser.js
var require_browser = __commonJS({
  "node_modules/qrcode/lib/browser.js"(exports2) {
    var canPromise = require_can_promise();
    var QRCode2 = require_qrcode();
    var CanvasRenderer = require_canvas();
    var SvgRenderer = require_svg_tag();
    function renderCanvas(renderFunc, canvas, text, opts, cb) {
      const args = [].slice.call(arguments, 1);
      const argsNum = args.length;
      const isLastArgCb = typeof args[argsNum - 1] === "function";
      if (!isLastArgCb && !canPromise()) {
        throw new Error("Callback required as last argument");
      }
      if (isLastArgCb) {
        if (argsNum < 2) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 2) {
          cb = text;
          text = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 3) {
          if (canvas.getContext && typeof cb === "undefined") {
            cb = opts;
            opts = void 0;
          } else {
            cb = opts;
            opts = text;
            text = canvas;
            canvas = void 0;
          }
        }
      } else {
        if (argsNum < 1) {
          throw new Error("Too few arguments provided");
        }
        if (argsNum === 1) {
          text = canvas;
          canvas = opts = void 0;
        } else if (argsNum === 2 && !canvas.getContext) {
          opts = text;
          text = canvas;
          canvas = void 0;
        }
        return new Promise(function(resolve, reject) {
          try {
            const data = QRCode2.create(text, opts);
            resolve(renderFunc(data, canvas, opts));
          } catch (e2) {
            reject(e2);
          }
        });
      }
      try {
        const data = QRCode2.create(text, opts);
        cb(null, renderFunc(data, canvas, opts));
      } catch (e2) {
        cb(e2);
      }
    }
    exports2.create = QRCode2.create;
    exports2.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
    exports2.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);
    exports2.toString = renderCanvas.bind(null, function(data, _, opts) {
      return SvgRenderer.render(data, opts);
    });
  }
});

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports2, module2) {
    "use strict";
    var isArray2 = Array.isArray;
    var keyList = Object.keys;
    var hasProp = Object.prototype.hasOwnProperty;
    var hasElementType = typeof Element !== "undefined";
    function equal(a, b) {
      if (a === b) return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        var arrA = isArray2(a), arrB = isArray2(b), i, length, key;
        if (arrA && arrB) {
          length = a.length;
          if (length != b.length) return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i])) return false;
          return true;
        }
        if (arrA != arrB) return false;
        var dateA = a instanceof Date, dateB = b instanceof Date;
        if (dateA != dateB) return false;
        if (dateA && dateB) return a.getTime() == b.getTime();
        var regexpA = a instanceof RegExp, regexpB = b instanceof RegExp;
        if (regexpA != regexpB) return false;
        if (regexpA && regexpB) return a.toString() == b.toString();
        var keys2 = keyList(a);
        length = keys2.length;
        if (length !== keyList(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!hasProp.call(b, keys2[i])) return false;
        if (hasElementType && a instanceof Element && b instanceof Element)
          return a === b;
        for (i = length; i-- !== 0; ) {
          key = keys2[i];
          if (key === "_owner" && a.$$typeof) {
            continue;
          } else {
            if (!equal(a[key], b[key])) return false;
          }
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module2.exports = function exportedEqual(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
          console.warn("Warning: react-fast-compare does not handle circular references.", error.name, error.message);
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports2, module2) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty2 = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys2 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys2 = keys2.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys2.length; ++i) {
          var key = keys2[i];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty2(targetComponent, key, descriptor);
            } catch (e2) {
            }
          }
        }
      }
      return targetComponent;
    }
    module2.exports = hoistNonReactStatics2;
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/shim/process.js
function defaultSetTimout() {
  throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
  throw new Error("clearTimeout has not been defined");
}
var cachedSetTimeout = defaultSetTimout;
var cachedClearTimeout = defaultClearTimeout;
if (typeof globalThis.setTimeout === "function") {
  cachedSetTimeout = setTimeout;
}
if (typeof globalThis.clearTimeout === "function") {
  cachedClearTimeout = clearTimeout;
}
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    return setTimeout(fun, 0);
  }
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    return cachedSetTimeout(fun, 0);
  } catch (e2) {
    try {
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e3) {
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    return clearTimeout(marker);
  }
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    return cachedClearTimeout(marker);
  } catch (e2) {
    try {
      return cachedClearTimeout.call(null, marker);
    } catch (e3) {
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
function nextTick(fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new (Item(fun, args))());
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}
function Item(fun, array2) {
  this.fun = fun;
  this.array = array2;
}
Item.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var title = "browser";
var platform = "browser";
var browser = true;
var env = {};
var argv = [];
var version = "";
var versions = {};
var release = {};
var config = {};
function noop() {
}
var on = noop;
var addListener = noop;
var once = noop;
var off = noop;
var removeListener = noop;
var removeAllListeners = noop;
var emit = noop;
function binding(name) {
  throw new Error("process.binding is not supported");
}
function cwd() {
  return "/";
}
function chdir(dir2) {
  throw new Error("process.chdir is not supported");
}
function umask() {
  return 0;
}
var performance2 = globalThis.performance || {};
var performanceNow = performance2.now || performance2.mozNow || performance2.msNow || performance2.oNow || performance2.webkitNow || function() {
  return (/* @__PURE__ */ new Date()).getTime();
};
function hrtime(previousTimestamp) {
  var clocktime = performanceNow.call(performance2) * 1e-3;
  var seconds = Math.floor(clocktime);
  var nanoseconds = Math.floor(clocktime % 1 * 1e9);
  if (previousTimestamp) {
    seconds = seconds - previousTimestamp[0];
    nanoseconds = nanoseconds - previousTimestamp[1];
    if (nanoseconds < 0) {
      seconds--;
      nanoseconds += 1e9;
    }
  }
  return [seconds, nanoseconds];
}
var startTime = /* @__PURE__ */ new Date();
function uptime() {
  var currentTime = /* @__PURE__ */ new Date();
  var dif = currentTime.getTime() - startTime.getTime();
  return dif / 1e3;
}
var process2 = {
  nextTick,
  title,
  browser,
  env,
  argv,
  version,
  versions,
  on,
  addListener,
  once,
  off,
  removeListener,
  removeAllListeners,
  emit,
  binding,
  cwd,
  chdir,
  umask,
  hrtime,
  platform,
  release,
  config,
  uptime
};
var defines = {};
Object.keys(defines).forEach((key) => {
  const segs = key.split(".");
  let target = process2;
  for (let i = 0; i < segs.length; i++) {
    const seg = segs[i];
    if (i === segs.length - 1) {
      target[seg] = defines[key];
    } else {
      target = target[seg] || (target[seg] = {});
    }
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/polyfills.js
if (typeof window !== "undefined") {
  window.global = globalThis;
  if (!window.process && typeof process === "undefined") {
    Object.assign(window, { process: process2 });
  }
}

// node_modules/@dynamic-labs/sdk-react-core/package.js
var version2 = "3.0.2";
var dependencies = {
  "@dynamic-labs/sdk-api-core": "0.0.529",
  "@hcaptcha/react-hcaptcha": "1.4.4",
  "country-list": "2.3.0",
  formik: "2.2.9",
  i18next: "23.4.6",
  qrcode: "1.5.1",
  "react-focus-lock": "2.9.2",
  "react-i18next": "13.5.0",
  yup: "0.32.11",
  "react-international-phone": "4.2.5"
};

// node_modules/@dynamic-labs/sdk-react-core/src/version.js
var VERSION = version2;
var API_VERSION = dependencies["@dynamic-labs/sdk-api-core"];

// node_modules/@dynamic-labs/multi-wallet/src/utils/getApiProviders.js
var getApiProviders = (providers) => Object.values(ProviderEnum).reduce((acc, provider) => {
  const foundProvider = providers.find((providerSetting) => providerSetting.provider === provider);
  if (foundProvider) {
    acc[provider] = foundProvider;
  }
  return acc;
}, {});

// node_modules/@dynamic-labs/multi-wallet/src/multi-wallet.js
var wallets = [];
var defaultWalletUiUtils = {
  createPassword: () => {
    throw Error("createPassword not implemented");
  },
  disabledConfirmationOnce: () => {
    throw Error("disabledConfirmationOnce, not implemented");
  },
  enterPassword: () => {
    throw Error("enterPassword not implemented");
  },
  sendTransaction: () => {
    throw Error("requestSendTransactionConfirmation not implemented");
  },
  signMessage: () => {
    throw Error("signMessage not implemented");
  },
  syncWallet: () => {
    throw Error("syncWallet not implemented");
  }
};
var getSupportedWallets = (args) => {
  const { appLogoUrl = "", appName = "", coinbaseWalletPreference, chainRpcProviders, deepLinkPreference, flowNetwork, mobileExperience = "in-app-browser", networkConfigurations = { cosmos: [], evm: [], solana: [], starknet: [] }, settings, skipMemo = false, walletConnectProjectId = "", walletConnectorsProp, walletUiUtils = void 0, walletBook, walletConnectPreferredChains } = args;
  if (!skipMemo && wallets.length > 0) {
    return wallets;
  }
  const evmNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.evm) || [];
  const solanaNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.solana) || [];
  const cosmosNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.cosmos) || [];
  const starknetNetworkConfigs = (networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.starknet) || [];
  const apiProviders = getApiProviders(getEnabledProviders(settings.providers));
  const opts = {
    apiProviders,
    appLogoUrl,
    appName,
    chainRpcProviders,
    coinbaseWalletPreference,
    cosmosNetworks: cosmosNetworkConfigs,
    deepLinkPreference,
    evmNetworks: evmNetworkConfigs,
    flowNetwork,
    mobileExperience,
    projectId: walletConnectProjectId,
    settings,
    solNetworks: solanaNetworkConfigs,
    starknetNetworks: starknetNetworkConfigs,
    walletBook,
    walletConnectPreferredChains,
    walletUiUtils: walletUiUtils || defaultWalletUiUtils
  };
  const allWallets = walletConnectorsProp.map((walletConnector) => walletConnector(opts)).flat().map((wallet) => {
    try {
      return new wallet(opts);
    } catch (error) {
      logger.error(`Failed to construct wallet ${wallet.name}`, error);
      return void 0;
    }
  }).filter((wallet) => wallet === null || wallet === void 0 ? void 0 : wallet.filter()).map((wallet) => wallet.getMobileOrInstalledWallet());
  const filteredWallets = filterWalletsForPlatform(walletBook, allWallets);
  wallets = applyLinksOverrides(walletBook, filteredWallets);
  return wallets;
};
var applyLinksOverrides = (walletBook, wallets2) => wallets2.map((wallet) => {
  const metadata = getWalletBookWallet(walletBook, wallet.key, wallet.walletFallback);
  if (metadata.switchNetworkOnlyFromWallet !== void 0) {
    wallet.switchNetworkOnlyFromWallet = metadata.switchNetworkOnlyFromWallet;
  }
  return wallet;
});
var filterWalletsForPlatform = (walletBook, wallets2) => wallets2.filter((wallet) => {
  const metadata = getWalletBookWallet(walletBook, wallet.key, wallet.walletFallback);
  if (wallet.isInstalledOnBrowser()) {
    return true;
  } else if (isEmbeddedConnector(wallet)) {
    return true;
  } else if (metadata.showOnlyIfInstalled) {
    return false;
  } else if (!isMobile()) {
    return true;
  } else {
    return handleMobileWalletFilter(walletBook, wallet.key, metadata);
  }
});
var handleMobileWalletFilter = (walletBook, walletKey, metadata) => {
  if (!metadata.mobile)
    return false;
  const hasWalletConnectLink = Boolean(metadata.mobile.universal) || Boolean(metadata.mobile.native);
  const isWalletConnectWallet = metadata.walletConnect !== void 0;
  if (isIPad() || isIPhone()) {
    const hasIOSLink = Boolean(getWalletLinks(walletBook, walletKey).ios);
    return !isWalletConnectWallet ? hasIOSLink : hasIOSLink && hasWalletConnectLink;
  } else {
    const hasAndroidLink = Boolean(getWalletLinks(walletBook, walletKey).android);
    return !isWalletConnectWallet ? hasAndroidLink : hasAndroidLink && hasWalletConnectLink;
  }
};
var chainStringToChains = {
  "eip155:1": ["ETH", "EVM"],
  "flow:mainnet": ["FLOW"]
};
var getSupportedChainsForWalletConnector = (walletBook, walletConnector) => {
  var _a;
  const metadata = getWalletBookWallet(walletBook, walletConnector.key, walletConnector.walletFallback);
  const chainSet = /* @__PURE__ */ new Set();
  const chainStringList = (_a = metadata.chains) !== null && _a !== void 0 ? _a : [];
  chainStringList.forEach((chainString) => {
    const chains = chainStringToChains[chainString];
    chains === null || chains === void 0 ? void 0 : chains.forEach((chain) => {
      chainSet.add(chain);
    });
  });
  walletConnector.supportedChains.forEach((chain) => {
    chainSet.add(chain);
  });
  return [...chainSet];
};
var getEnabledWallets = (props) => {
  const supportedWallets = getSupportedWallets(props.getSupportedWalletOpts);
  const allEnabledWallets = supportedWallets.filter((wallet) => props.enabledChains.some((chain) => getSupportedChainsForWalletConnector(props.getSupportedWalletOpts.walletBook, wallet).includes(chain)) || wallet.key === "magiclink");
  return allEnabledWallets;
};
var getEnabledProviders = (providers) => {
  var _a;
  return (_a = providers === null || providers === void 0 ? void 0 : providers.filter((provider) => Boolean(provider.enabledAt) || provider.provider === ProviderEnum.MagicLink && Boolean(provider.providerProjectId) || provider.provider === ProviderEnum.Turnkey)) !== null && _a !== void 0 ? _a : [];
};

// node_modules/@dynamic-labs/multi-wallet/src/utils/message.js
var generateMessageToSign = ({ blockchain, domain, chainId, nonce, uri, publicKey, issuedAt = (/* @__PURE__ */ new Date()).toISOString(), statement, requestId, resources }) => {
  var _a, _b;
  if (blockchain === "STARK") {
    return JSON.stringify({
      domain: domain.substring(0, 31),
      nonce
    });
  }
  const blockchainName = (_b = (_a = getChainInfo(blockchain)) === null || _a === void 0 ? void 0 : _a.blockchainName) !== null && _b !== void 0 ? _b : "Ethereum";
  const header = `${domain} wants you to sign in with your ${blockchainName} account:`;
  const prefix = [header, publicKey].join("\n");
  const prefixWithStatementGap = statement ? "\n\n" : "\n";
  const prefixWithStatement = `${[prefix, statement].join(prefixWithStatementGap)}
`;
  const suffixFields = [];
  suffixFields.push(`URI: ${uri}`);
  suffixFields.push("Version: 1");
  if (chainId) {
    suffixFields.push(`Chain ID: ${chainId}`);
  }
  suffixFields.push(`Nonce: ${nonce}`);
  suffixFields.push(`Issued At: ${issuedAt}`);
  if (requestId) {
    suffixFields.push(`Request ID: ${requestId}`);
  }
  if (resources === null || resources === void 0 ? void 0 : resources.length) {
    suffixFields.push(`Resources:${resources.map((resource) => "\n- " + resource).join()}`);
  }
  const suffix = suffixFields.join("\n");
  return [prefixWithStatement, suffix].join("\n");
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/logger.js
var logger2 = new Logger("DynamicSDK");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/data.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ViewContext/ViewContext.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useDynamicEvents/useDynamicEvents.js
var import_react = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/events/dynamicEvents.js
var dynamicEvents = new eventemitter3_default();

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useDynamicEvents/useDynamicEvents.js
var useInternalDynamicEvents = (event, listener) => {
  const handler = (0, import_react.useRef)(listener);
  handler.current = listener;
  (0, import_react.useEffect)(() => {
    const callback = (...args) => handler.current(...args);
    dynamicEvents.on(event, callback);
    return () => {
      dynamicEvents.off(event, callback);
    };
  }, [event]);
};
var externalEvents = [
  "emailVerificationResult",
  "embeddedWalletCreated",
  "logout",
  "walletAdded",
  "mfaCompletionSuccess",
  "mfaCompletionFailure"
];
var useDynamicEvents = (event, listener) => {
  if (!externalEvents.includes(event))
    throw new Error(`Unrecognized event "${event}" used with useDynamicEvents`);
  useInternalDynamicEvents(event, listener);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorContext/ErrorContext.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
var errorMessageMap = {
  "-32000": "Message signature denied",
  "-32002": "Please unlock your wallet extension and try again.",
  "-32003": "Message signature denied.",
  "-32602": "Invalid parameters. Please try again.",
  "-32603": "There was an internal error. Please try again.",
  0: "Message signature denied.",
  4001: "Message signature denied.",
  4100: "Please unlock your wallet extension and try again.",
  4900: "There was an internal error. Please try again.",
  5001: "Message signature denied.",
  5002: "Message signature denied.",
  account_already_linked_to_different_profile: "This social account is already linked to a different profile.",
  connection_rejected: "Connection rejected. Please try again.",
  metamask_timeout: "Whoops. Looks like something went wrong. Please try again.",
  "missing-nonce": "Something went wrong. Please try again.",
  "missing-public-address": "Connection cancelled. Please try again",
  oauth_window_blocked: "To connect to your social account, enable popups in your browser and then try again.",
  oauth_window_timeout: "Session time out. Please try again.",
  too_many_email_verification_attempts: "Too many email verification attempts, please try again later",
  "user-cancelled": "",
  wallet_not_deployed: "Your smart wallet has not been deployed.",
  wrong_email_verification_token: "The code you entered is incorrect. Please try again."
};
var ErrorContext = (0, import_react2.createContext)(void 0);
var ErrorContextProvider = ({ children }) => {
  const [error, setError] = (0, import_react2.useState)(void 0);
  const setErrorMessage = (0, import_react2.useCallback)((status2) => {
    var _a;
    setError((_a = errorMessageMap[status2]) !== null && _a !== void 0 ? _a : "Something went wrong. Please try again.");
  }, []);
  const clearError = (0, import_react2.useCallback)(() => {
    setError(void 0);
  }, []);
  return (0, import_jsx_runtime.jsx)(ErrorContext.Provider, { value: {
    clearError,
    error,
    setError,
    setErrorMessage
  }, children });
};
var useErrorContext = () => {
  const context = (0, import_react2.useContext)(ErrorContext);
  if (context === void 0) {
    throw new Error("usage of useErrorContext not wrapped in `ErrorContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ViewContext/ViewContext.js
var ViewContext = (0, import_react3.createContext)(void 0);
var ViewContextProvider = ({ children, initialView: initialView2 = { props: { isWalletConnectList: true }, type: "wallet-list" } }) => {
  const [_view, _setView] = (0, import_react3.useState)(null);
  const view = _view || initialView2;
  const { clearError } = useErrorContext();
  const goToInitialView = (0, import_react3.useCallback)(() => {
    _setView(null);
  }, []);
  const setView = (0, import_react3.useCallback)((type, props, events) => {
    if (view.type !== type)
      clearError();
    _setView({ events, props, type });
  }, []);
  useInternalDynamicEvents("logout", () => goToInitialView());
  const value = (0, import_react3.useMemo)(() => ({
    goToInitialView,
    setView,
    view
  }), [goToInitialView, setView, view]);
  return (0, import_jsx_runtime2.jsx)(ViewContext.Provider, { value, children });
};
var useViewContext = () => {
  const context = (0, import_react3.useContext)(ViewContext);
  if (context === void 0) {
    throw new Error("usage of useViewContext not wrapped in `ViewContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/data.js
var import_react5 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/wallet/createWallet.js
var createWallet = (walletBook, wallet) => {
  var _a;
  const walletBookWallet = findWalletBookWallet(walletBook, wallet.key);
  return {
    chainGroup: walletBookWallet === null || walletBookWallet === void 0 ? void 0 : walletBookWallet.chainGroup,
    group: (walletBookWallet === null || walletBookWallet === void 0 ? void 0 : walletBookWallet.chainGroup) || (walletBookWallet === null || walletBookWallet === void 0 ? void 0 : walletBookWallet.walletGroup),
    injectedConfig: walletBookWallet === null || walletBookWallet === void 0 ? void 0 : walletBookWallet.injectedConfig,
    isInstalledOnBrowser: (_a = wallet.isInstalledOnBrowser()) !== null && _a !== void 0 ? _a : false,
    key: wallet.key,
    name: wallet.name,
    walletConnector: wallet,
    walletGroup: walletBookWallet === null || walletBookWallet === void 0 ? void 0 : walletBookWallet.walletGroup
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/convertHexToRGBA/convertHexToRGBA.js
var convertHexToRGBA = (hex, alpha = 1) => {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  return "rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/colors.js
var TEXT_LIGHT_PRIMARY = "#363A46";
convertHexToRGBA(TEXT_LIGHT_PRIMARY, 0.65);
convertHexToRGBA(TEXT_LIGHT_PRIMARY, 0.4);
var TEXT_DARK_BASE = "#F5F8FF";
convertHexToRGBA(TEXT_DARK_BASE, 0.95);
convertHexToRGBA(TEXT_DARK_BASE, 0.55);
convertHexToRGBA(TEXT_DARK_BASE, 0.4);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/values.js
var DEFAULT_NUMBER_OF_WALLETS_TO_SHOW = 10;
var ChainEnumToVerifiedCredentialName = {
  ALGO: "algorand",
  BTC: "bip122",
  // see: https://namespaces.chainagnostic.org/bip122/caip2
  COSMOS: "cosmos",
  ETH: "eip155",
  EVM: "eip155",
  FLOW: "flow",
  SOL: "solana",
  STARK: "starknet"
};
var VerifiedCredentialNameToChainEnum = {
  algorand: ChainEnum.Algo,
  bip122: ChainEnum.Btc,
  cosmos: ChainEnum.Cosmos,
  eip155: ChainEnum.Evm,
  flow: ChainEnum.Flow,
  solana: ChainEnum.Sol,
  starknet: ChainEnum.Stark
};
var DYNAMIC_AUTH_COOKIE_NAME = "DYNAMIC_JWT_TOKEN";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/internalImplementation/utils/useStoreWithSelector/useStoreWithSelector.js
var import_react4 = __toESM(require_react(), 1);
var useStoreWithSelector = (api, selector) => {
  const serverSnapshotCacheRef = (0, import_react4.useRef)(void 0);
  const getSnapshot = () => selector(api.getState());
  const getServerSnapshot = () => {
    if (serverSnapshotCacheRef.current === void 0) {
      serverSnapshotCacheRef.current = {
        value: selector(api.getInitialState())
      };
    }
    return serverSnapshotCacheRef.current.value;
  };
  const slice = (0, import_react4.useSyncExternalStore)(api.subscribe, getSnapshot, getServerSnapshot);
  return slice;
};

// node_modules/@dynamic-labs/store/src/lib/createStore/createStore.js
var createStore = (getInitialState) => {
  const subscriptions = /* @__PURE__ */ new Set();
  let state = getInitialState();
  const notifySubscribers = () => {
    for (const subscription of subscriptions) {
      subscription(state);
    }
  };
  return {
    /**
     * Returns the initial state object.
     *
     * @returns The initial state object.
     */
    getInitialState: () => getInitialState(),
    /**
     * Returns the current state object.
     *
     * @returns The current state object.
     */
    getState: () => state,
    /**
     * Updates the state object with the provided partial state and notifies all subscribers.
     *
     * @param partialState - The partial state object to merge with the current state.
     */
    setState: (partialState) => {
      state = Object.assign(Object.assign({}, state), partialState);
      notifySubscribers();
    },
    /**
     * Subscribes to state changes and invokes the provided callback whenever the state is updated.
     *
     * @param subscription - A callback function that receives the updated state as a parameter.
     * @returns A function that can be called to unsubscribe from state changes.
     */
    subscribe: (subscription) => {
      subscriptions.add(subscription);
      return () => {
        subscriptions.delete(subscription);
      };
    }
  };
};

// node_modules/@dynamic-labs/store/src/lib/utils/logger/logger.js
var logger3 = new Logger("@dynamic-labs/logger");

// node_modules/@dynamic-labs/store/src/lib/persist/persist.js
var persist = ({ name, version: version4 = 0, storage, store: store2, partialize }) => {
  store2.subscribe((state) => {
    const persistedState = partialize(state);
    storage.setItem(name, JSON.stringify({ state: persistedState, version: version4 }));
  });
  const storedState = storage.getItem(name);
  if (storedState) {
    try {
      const { state: storedStateData, version: storedVersion } = JSON.parse(storedState);
      if (storedVersion === version4) {
        store2.setState(Object.assign(store2.getInitialState(), storedStateData));
      }
    } catch (error) {
      logger3.error("Failed to load state from storage", error);
    }
  }
  return store2;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/localStorage.js
var AUTH_TOKEN = "dynamic_authentication_token";
var AUTH_MIN_TOKEN = "dynamic_min_authentication_token";
var AUTH_EXPIRES_AT = "dynamic_auth_expires_at";
var LAST_USED_WALLET = "dynamic_last_used_wallet";
var NONCE_STORAGE_KEY = "dynamic_nonce";
var PRIMARY_WALLET_ID = "dynamic_primary_wallet_id";
var WALLET_PICKER_SEARCH_KEY = "dynamic_wallet_picker_search";
var NEWTOWEB3_WALLET_EXTENSION_FLAG_KEY = "dynamic_newtoweb3_wallet_extension_installed";
var CONNECTED_WALLETS_INFO = "dynamic_connected_wallets";
var AUTH_MODE = "dynamic_auth_mode";
var CONNECTED_WALLET_NAME_SERVICE = "dynamic_connected_wallet_ns";
var BRIDGE_ONBOARDING_COMPLETED = "dynamic_bridge_onboarding_completed";
var DYNAMIC_CONTEXT_LAST_SESSION_SETTINGS = "dynamic_context_session_settings";
var WAGMI_LAST_SESSION_SETTINGS = "dynamic_wagmi_session_settings";
var EMBEDDED_WALLET_SESSION_SETTINGS = "dynamic_embedded_wallet_session_settings";
var EMBEDDED_WALLET_SECURE_BANNER = "dynamic_embedded_secure_banner";
var PHONE_INPUT_DEFAULT_COUNTRY = "dynamic_phone_input_default_country";
var CAPTCHA_TOKEN = "dynamic_captcha_token";
var PHANTOM_SIGNATURE_STATE = "phantom_verification_type";
var STORE_STORAGE_KEY = "dynamic_store";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/stateConfig.js
var createInitialStates = ({ environmentId }) => ({
  environmentId,
  loadingAndLifecycle: {
    sessionValidation: false
  },
  networkConfigurations: {
    expiresAt: void 0,
    networkConfigurations: void 0
  },
  projectSettings: { expiresAt: void 0, settings: void 0 },
  sendBalanceState: {
    amount: void 0,
    chainName: void 0,
    nativePrice: void 0
  },
  tokenBalancesState: {
    error: void 0,
    isError: false,
    isLoading: false,
    tokenBalances: void 0
  },
  user: void 0,
  walletConnectorOptions: []
});
var transformStateForLocalStorage = (state) => ({
  environmentId: state.environmentId,
  networkConfigurations: state.networkConfigurations,
  projectSettings: state.projectSettings,
  user: state.user
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/internalImplementation/utils/clearExpiredData/clearExpiredData.js
var clearExpiredData = (store2) => {
  const { projectSettings, networkConfigurations, user } = store2.getState();
  const [connectedWalletData] = StorageService.getItem(CONNECTED_WALLETS_INFO) || [];
  const shouldRemoveSettingsAndConfigs = !user && !connectedWalletData;
  const isExpired = (value) => shouldRemoveSettingsAndConfigs || value.expiresAt && value.expiresAt < Date.now();
  if (isExpired(projectSettings)) {
    store2.setState({
      projectSettings: store2.getInitialState().projectSettings
    });
  }
  if (isExpired(networkConfigurations)) {
    store2.setState({
      networkConfigurations: store2.getInitialState().networkConfigurations
    });
  }
  return store2;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/internalImplementation/utils/syncLegacyStorage/syncLegacyStorage.js
var AUTH_USER = "dynamic_authenticated_user";
var syncLegacyStorage = (store2) => {
  const legacyUser = StorageService.getItem(AUTH_USER);
  if (Boolean(legacyUser) && !store2.getState().user) {
    store2.setState({ user: legacyUser });
    StorageService.removeItem(AUTH_USER);
  }
  return store2;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/internalImplementation/store.js
var store;
var getStore = () => {
  if (!store) {
    throw new Error("Store not initialized");
  }
  return store;
};
var removeStoreInstance = () => {
  store = void 0;
};
var initializeStore = ({ storageSuffix, environmentId }) => {
  if (store) {
    return;
  }
  const persistName = storageSuffix ? `${STORE_STORAGE_KEY}_${storageSuffix}` : STORE_STORAGE_KEY;
  store = syncLegacyStorage(persist({
    name: persistName,
    partialize: transformStateForLocalStorage,
    storage: getStorage(),
    // Map each entry to its initialValue
    store: createStore(() => createInitialStates({ environmentId, storageSuffix }))
  }));
  clearExpiredData(store);
};
var getStorage = () => {
  if (typeof localStorage === "undefined") {
    return {
      getItem: () => null,
      setItem: () => {
      }
    };
  }
  return window.localStorage;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/internalImplementation/utils/createStoreState/createStoreState.js
var createStoreState = (variable) => {
  const capitalizedName = variable[0].toUpperCase() + variable.slice(1);
  const useValue = () => useStoreWithSelector(getStore(), (state) => state[variable]);
  const setValue = (value) => getStore().setState(Object.assign(Object.assign({}, getStore().getState()), { [variable]: value }));
  const getValue2 = () => getStore().getState()[variable];
  const resetValue = () => setValue(getStore().getInitialState()[variable]);
  return {
    [`use${capitalizedName}`]: useValue,
    [`get${capitalizedName}`]: getValue2,
    [`set${capitalizedName}`]: setValue,
    [`reset${capitalizedName}`]: resetValue
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/loadingAndLifecycle.js
var { getLoadingAndLifecycle, setLoadingAndLifecycle, useLoadingAndLifecycle } = createStoreState("loadingAndLifecycle");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/consts/index.js
var import_country_list = __toESM(require_country_list(), 1);
var tShirtSizes = ["XS", "S", "M", "L", "XL", "2XL"];
var countryCodes = (0, import_country_list.getData)();
var teamNames = [
  "Brunei DS",
  "Cambodia",
  "Indonesia",
  "Laos",
  "Malaysia",
  "Myanmar",
  "Philippines",
  "Singapore",
  "Thailand",
  "Vietnam"
];
var defaultWalletsForChains = {
  primary_chain: "evm",
  wallets: {
    algorand: "perawallet",
    bitcoin: "xverse",
    cosmos: "keplr",
    evm: "metamask",
    flow: "blocto",
    solana: "phantom"
  }
};
var tooltipZIndex = 2147483647;
var toolkitZIndex = 2147483646;
var authModalZIndex = 2147483645;
var widgetModalZIndex = 2147483643;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/data.js
var chainInfoOverrides = {
  starknet: "STARK"
};
var getEnabledChains = (chains) => chains.filter(({ enabled }) => enabled).map(({ name }) => {
  var _a, _b;
  return (_a = chainInfoOverrides[name]) !== null && _a !== void 0 ? _a : (_b = getChainInfo(name)) === null || _b === void 0 ? void 0 : _b.symbol;
}).filter((chain) => Boolean(chain));
var getWallets = (props) => {
  var _a;
  return getEnabledWallets({
    enabledChains: getEnabledChains(props.getSupportedWalletOpts.settings.chains),
    getSupportedWalletOpts: Object.assign(Object.assign({}, props.getSupportedWalletOpts), { chainRpcProviders: ChainRpcProviders, walletConnectProjectId: (_a = props.getSupportedWalletOpts.settings.sdk.walletConnect) === null || _a === void 0 ? void 0 : _a.projectId })
  }).map((wallet) => {
    var _a2;
    (_a2 = props.walletConnectorExtensions) === null || _a2 === void 0 ? void 0 : _a2.forEach((extension) => wallet.extend(extension));
    return createWallet(props.getSupportedWalletOpts.walletBook, wallet);
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getExpiresAt/getExpiresAt.js
var getExpiresAt = () => StorageService.getItem(AUTH_EXPIRES_AT);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/parseToken/parseToken.js
var parseToken = (token) => {
  var _a;
  if (!token)
    return void 0;
  const base64 = (_a = token.split(".")[1]) === null || _a === void 0 ? void 0 : _a.replace(/-/g, "+").replace(/_/g, "/");
  const jsonPayload = base64 && decodeURIComponent(atob(base64).split("").map((c) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`).join(""));
  return JSON.parse(jsonPayload);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/decodeMinJwt/decodeMinJwt.js
var decodeMinJwt = (token) => {
  try {
    const json = parseToken(token);
    if (!json)
      return void 0;
    return MinifiedDynamicJwtFromJSON(json);
  } catch (e2) {
    logger2.error(e2);
    return void 0;
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/decodeJwt/decodeJwt.js
var decodeJwt = (token) => {
  try {
    const json = parseToken(token);
    if (!json)
      return void 0;
    return DynamicJwtFromJSON(json);
  } catch (e2) {
    logger2.error(e2);
    return void 0;
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/helpers/helpers.js
var logoutTimer;
var dynamicContextSettingsTimer;
var wagmiSettingsTimer;
var sdkSettingsTimeout = 24 * 60 * 60 * 1e3;
var isMinAuthTokenExpired = (token) => {
  const decoded = decodeMinJwt(token);
  return isTokenExpired(decoded);
};
var isAuthTokenExpired = (token) => {
  const decoded = decodeJwt(token);
  return isTokenExpired(decoded);
};
var isTokenExpired = (decoded) => {
  if (!decoded) {
    return true;
  }
  if (!decoded.exp) {
    return true;
  }
  const expirationTime = new Date(decoded.exp * 1e3).getTime();
  const currentTime = (/* @__PURE__ */ new Date()).getTime();
  if (currentTime >= expirationTime) {
    return true;
  }
  return false;
};
var initExpirationTime = (logout) => {
  const expiresAt = getExpiresAt();
  if (!expiresAt)
    return clearTimeout(logoutTimer);
  const expirationTime = new Date(expiresAt * 1e3).getTime();
  const currentTime = (/* @__PURE__ */ new Date()).getTime();
  if (currentTime >= expirationTime) {
    clearTimeout(logoutTimer);
    return logout();
  }
  const expirationTimeInMs = expirationTime - currentTime;
  const expiryTimeout = Math.min(expirationTimeInMs, 2147483647);
  logoutTimer = setTimeout(logout, expiryTimeout);
};
var getInitialView = ({ connectedWallets, isBridgeFlow, bridgeOnboardingCompleted, isAuthenticated, isMultiWalletEnabled }) => {
  if (isAuthenticated || bridgeOnboardingCompleted) {
    return {
      type: isMultiWalletEnabled ? "multi-wallet-wallet-list" : "wallet-list"
    };
  }
  if (isBridgeFlow && !connectedWallets.length) {
    return { type: "bridge-welcome" };
  }
  return { type: "login-with-email-or-wallet" };
};
var setDynamicContextSessionSettings = () => {
  setSessionSettings(DYNAMIC_CONTEXT_LAST_SESSION_SETTINGS);
  dynamicContextSettingsTimer = setTimeout(isDynamicContextSessionSettingExpired, sdkSettingsTimeout);
};
var setWagmiSessionSettings = () => {
  setSessionSettings(WAGMI_LAST_SESSION_SETTINGS);
  wagmiSettingsTimer = setTimeout(isWagmiSessionSettingExpired, sdkSettingsTimeout);
};
var setSessionSettings = (lsKey) => {
  const timestamp = (/* @__PURE__ */ new Date()).getTime();
  StorageService.setItem(lsKey, timestamp.toString());
};
var isDynamicContextSessionSettingExpired = () => isSettingExpired(DYNAMIC_CONTEXT_LAST_SESSION_SETTINGS, dynamicContextSettingsTimer);
var isWagmiSessionSettingExpired = () => isSettingExpired(WAGMI_LAST_SESSION_SETTINGS, wagmiSettingsTimer);
var isSettingExpired = (lsKey, timer) => {
  const lastSentTime = StorageService.getItem(lsKey);
  if (!lastSentTime) {
    return true;
  }
  const lastSentTimestamp = parseInt(lastSentTime);
  const currentTime = (/* @__PURE__ */ new Date()).getTime();
  if (currentTime - lastSentTimestamp > sdkSettingsTimeout) {
    clearTimeout(timer);
    StorageService.removeItem(lsKey);
    return true;
  }
  return false;
};
var resolveNetworkValidationMode = ({ networkValidationMode, bridgeChains }) => {
  if (networkValidationMode) {
    return networkValidationMode;
  }
  if (bridgeChains) {
    return "always";
  }
  return "sign-in";
};
var getDeepLinkPreference = (deepLinkPreferenceProp, isBridgeFlow) => {
  if (isBridgeFlow) {
    return "universal";
  }
  return deepLinkPreferenceProp;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getAuthToken/getAuthToken.js
var getAuthToken = () => {
  if (typeof window === "undefined") {
    return void 0;
  }
  const token = StorageService.getItem(AUTH_TOKEN, {
    priority: ["secureStorage", "localStorage"]
  });
  if (!token) {
    return void 0;
  }
  if (isAuthTokenExpired(token)) {
    return void 0;
  }
  return token;
};

// node_modules/@dynamic-labs/sdk-react-core/_virtual/_tslib.js
function __rest(s, e2) {
  var t2 = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e2.indexOf(p) < 0)
    t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e2.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/DynamicContext.js
var import_jsx_runtime409 = __toESM(require_jsx_runtime(), 1);
var import_react443 = __toESM(require_react(), 1);

// node_modules/react-i18next/dist/es/Trans.js
var import_react8 = __toESM(require_react(), 1);

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var t2 = arguments[e2];
      for (var r in t2) ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

// node_modules/react-i18next/dist/es/TransWithoutContext.js
var import_react6 = __toESM(require_react(), 1);

// node_modules/html-parse-stringify/dist/html-parse-stringify.module.js
var import_void_elements = __toESM(require_void_elements());

// node_modules/react-i18next/dist/es/utils.js
function warn() {
  if (console && console.warn) {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (typeof args[0] === "string") args[0] = `react-i18next:: ${args[0]}`;
    console.warn(...args);
  }
}
var alreadyWarned = {};
function warnOnce() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  if (typeof args[0] === "string" && alreadyWarned[args[0]]) return;
  if (typeof args[0] === "string") alreadyWarned[args[0]] = /* @__PURE__ */ new Date();
  warn(...args);
}
var loadedClb = (i18n, cb) => () => {
  if (i18n.isInitialized) {
    cb();
  } else {
    const initialized = () => {
      setTimeout(() => {
        i18n.off("initialized", initialized);
      }, 0);
      cb();
    };
    i18n.on("initialized", initialized);
  }
};
function loadNamespaces(i18n, ns, cb) {
  i18n.loadNamespaces(ns, loadedClb(i18n, cb));
}
function loadLanguages(i18n, lng, ns, cb) {
  if (typeof ns === "string") ns = [ns];
  ns.forEach((n) => {
    if (i18n.options.ns.indexOf(n) < 0) i18n.options.ns.push(n);
  });
  i18n.loadLanguages(lng, loadedClb(i18n, cb));
}
function oldI18nextHasLoadedNamespace(ns, i18n) {
  let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  const lng = i18n.languages[0];
  const fallbackLng = i18n.options ? i18n.options.fallbackLng : false;
  const lastLng = i18n.languages[i18n.languages.length - 1];
  if (lng.toLowerCase() === "cimode") return true;
  const loadNotPending = (l, n) => {
    const loadState = i18n.services.backendConnector.state[`${l}|${n}`];
    return loadState === -1 || loadState === 2;
  };
  if (options2.bindI18n && options2.bindI18n.indexOf("languageChanging") > -1 && i18n.services.backendConnector.backend && i18n.isLanguageChangingTo && !loadNotPending(i18n.isLanguageChangingTo, ns)) return false;
  if (i18n.hasResourceBundle(lng, ns)) return true;
  if (!i18n.services.backendConnector.backend || i18n.options.resources && !i18n.options.partialBundledLanguages) return true;
  if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
  return false;
}
function hasLoadedNamespace(ns, i18n) {
  let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  if (!i18n.languages || !i18n.languages.length) {
    warnOnce("i18n.languages were undefined or empty", i18n.languages);
    return true;
  }
  const isNewerI18next = i18n.options.ignoreJSONStructure !== void 0;
  if (!isNewerI18next) {
    return oldI18nextHasLoadedNamespace(ns, i18n, options2);
  }
  return i18n.hasLoadedNamespace(ns, {
    lng: options2.lng,
    precheck: (i18nInstance2, loadNotPending) => {
      if (options2.bindI18n && options2.bindI18n.indexOf("languageChanging") > -1 && i18nInstance2.services.backendConnector.backend && i18nInstance2.isLanguageChangingTo && !loadNotPending(i18nInstance2.isLanguageChangingTo, ns)) return false;
    }
  });
}

// node_modules/react-i18next/dist/es/unescape.js
var matchHtmlEntity = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g;
var htmlEntities = {
  "&amp;": "&",
  "&#38;": "&",
  "&lt;": "<",
  "&#60;": "<",
  "&gt;": ">",
  "&#62;": ">",
  "&apos;": "'",
  "&#39;": "'",
  "&quot;": '"',
  "&#34;": '"',
  "&nbsp;": " ",
  "&#160;": " ",
  "&copy;": "©",
  "&#169;": "©",
  "&reg;": "®",
  "&#174;": "®",
  "&hellip;": "…",
  "&#8230;": "…",
  "&#x2F;": "/",
  "&#47;": "/"
};
var unescapeHtmlEntity = (m) => htmlEntities[m];
var unescape2 = (text) => text.replace(matchHtmlEntity, unescapeHtmlEntity);

// node_modules/react-i18next/dist/es/defaults.js
var defaultOptions = {
  bindI18n: "languageChanged",
  bindI18nStore: "",
  transEmptyNodeValue: "",
  transSupportBasicHtmlNodes: true,
  transWrapTextNodes: "",
  transKeepBasicHtmlNodesFor: ["br", "strong", "i", "p"],
  useSuspense: true,
  unescape: unescape2
};
function setDefaults() {
  let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  defaultOptions = {
    ...defaultOptions,
    ...options2
  };
}
function getDefaults() {
  return defaultOptions;
}

// node_modules/react-i18next/dist/es/i18nInstance.js
var i18nInstance;
function setI18n(instance2) {
  i18nInstance = instance2;
}
function getI18n() {
  return i18nInstance;
}

// node_modules/react-i18next/dist/es/context.js
var import_react7 = __toESM(require_react(), 1);

// node_modules/react-i18next/dist/es/initReactI18next.js
var initReactI18next = {
  type: "3rdParty",
  init(instance2) {
    setDefaults(instance2.options.react);
    setI18n(instance2);
  }
};

// node_modules/react-i18next/dist/es/context.js
var I18nContext = (0, import_react7.createContext)();
var ReportNamespaces = class {
  constructor() {
    this.usedNamespaces = {};
  }
  addUsedNamespaces(namespaces) {
    namespaces.forEach((ns) => {
      if (!this.usedNamespaces[ns]) this.usedNamespaces[ns] = true;
    });
  }
  getUsedNamespaces() {
    return Object.keys(this.usedNamespaces);
  }
};

// node_modules/react-i18next/dist/es/useTranslation.js
var import_react9 = __toESM(require_react(), 1);
var usePrevious = (value, ignore) => {
  const ref = (0, import_react9.useRef)();
  (0, import_react9.useEffect)(() => {
    ref.current = ignore ? ref.current : value;
  }, [value, ignore]);
  return ref.current;
};
function useTranslation(ns) {
  let props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  const {
    i18n: i18nFromProps
  } = props;
  const {
    i18n: i18nFromContext,
    defaultNS: defaultNSFromContext
  } = (0, import_react9.useContext)(I18nContext) || {};
  const i18n = i18nFromProps || i18nFromContext || getI18n();
  if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new ReportNamespaces();
  if (!i18n) {
    warnOnce("You will need to pass in an i18next instance by using initReactI18next");
    const notReadyT = (k, optsOrDefaultValue) => {
      if (typeof optsOrDefaultValue === "string") return optsOrDefaultValue;
      if (optsOrDefaultValue && typeof optsOrDefaultValue === "object" && typeof optsOrDefaultValue.defaultValue === "string") return optsOrDefaultValue.defaultValue;
      return Array.isArray(k) ? k[k.length - 1] : k;
    };
    const retNotReady = [notReadyT, {}, false];
    retNotReady.t = notReadyT;
    retNotReady.i18n = {};
    retNotReady.ready = false;
    return retNotReady;
  }
  if (i18n.options.react && i18n.options.react.wait !== void 0) warnOnce("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");
  const i18nOptions = {
    ...getDefaults(),
    ...i18n.options.react,
    ...props
  };
  const {
    useSuspense,
    keyPrefix
  } = i18nOptions;
  let namespaces = ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;
  namespaces = typeof namespaces === "string" ? [namespaces] : namespaces || ["translation"];
  if (i18n.reportNamespaces.addUsedNamespaces) i18n.reportNamespaces.addUsedNamespaces(namespaces);
  const ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every((n) => hasLoadedNamespace(n, i18n, i18nOptions));
  function getT() {
    return i18n.getFixedT(props.lng || null, i18nOptions.nsMode === "fallback" ? namespaces : namespaces[0], keyPrefix);
  }
  const [t2, setT] = (0, import_react9.useState)(getT);
  let joinedNS = namespaces.join();
  if (props.lng) joinedNS = `${props.lng}${joinedNS}`;
  const previousJoinedNS = usePrevious(joinedNS);
  const isMounted = (0, import_react9.useRef)(true);
  (0, import_react9.useEffect)(() => {
    const {
      bindI18n,
      bindI18nStore
    } = i18nOptions;
    isMounted.current = true;
    if (!ready && !useSuspense) {
      if (props.lng) {
        loadLanguages(i18n, props.lng, namespaces, () => {
          if (isMounted.current) setT(getT);
        });
      } else {
        loadNamespaces(i18n, namespaces, () => {
          if (isMounted.current) setT(getT);
        });
      }
    }
    if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {
      setT(getT);
    }
    function boundReset() {
      if (isMounted.current) setT(getT);
    }
    if (bindI18n && i18n) i18n.on(bindI18n, boundReset);
    if (bindI18nStore && i18n) i18n.store.on(bindI18nStore, boundReset);
    return () => {
      isMounted.current = false;
      if (bindI18n && i18n) bindI18n.split(" ").forEach((e2) => i18n.off(e2, boundReset));
      if (bindI18nStore && i18n) bindI18nStore.split(" ").forEach((e2) => i18n.store.off(e2, boundReset));
    };
  }, [i18n, joinedNS]);
  const isInitial = (0, import_react9.useRef)(true);
  (0, import_react9.useEffect)(() => {
    if (isMounted.current && !isInitial.current) {
      setT(getT);
    }
    isInitial.current = false;
  }, [i18n, keyPrefix]);
  const ret = [t2, i18n, ready];
  ret.t = t2;
  ret.i18n = i18n;
  ret.ready = ready;
  if (ready) return ret;
  if (!ready && !useSuspense) return ret;
  throw new Promise((resolve) => {
    if (props.lng) {
      loadLanguages(i18n, props.lng, namespaces, () => resolve());
    } else {
      loadNamespaces(i18n, namespaces, () => resolve());
    }
  });
}

// node_modules/react-i18next/dist/es/withTranslation.js
var import_react10 = __toESM(require_react(), 1);

// node_modules/react-i18next/dist/es/I18nextProvider.js
var import_react11 = __toESM(require_react(), 1);
function I18nextProvider(_ref2) {
  let {
    i18n,
    defaultNS,
    children
  } = _ref2;
  const value = (0, import_react11.useMemo)(() => ({
    i18n,
    defaultNS
  }), [i18n, defaultNS]);
  return (0, import_react11.createElement)(I18nContext.Provider, {
    value
  }, children);
}

// node_modules/react-i18next/dist/es/withSSR.js
var import_react13 = __toESM(require_react(), 1);

// node_modules/react-i18next/dist/es/useSSR.js
var import_react12 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/app.js
var import_jsx_runtime341 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/Main.js
var import_jsx_runtime340 = __toESM(require_jsx_runtime(), 1);
var import_react370 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/usePreventPageScroll/usePreventPageScroll.js
var import_react14 = __toESM(require_react(), 1);
var usePreventPageScroll = (isOpen) => {
  const disableScroll = () => {
    var _a;
    const html = document.querySelector("html");
    const body = document.querySelector("body");
    if (!html || !body)
      return;
    const deviceScreenHeight = (_a = window === null || window === void 0 ? void 0 : window.screen) === null || _a === void 0 ? void 0 : _a.height;
    const isScrollable2 = body.scrollHeight > deviceScreenHeight;
    if (!isScrollable2 || deviceScreenHeight === 0)
      return;
    html.classList.add("dynamic-no-scroll");
    body.classList.add("dynamic-no-scroll");
  };
  const enableScroll = (userScrollCoordinatesBeforeLock) => {
    const html = document.querySelector("html");
    const body = document.querySelector("body");
    if (!html || !body)
      return;
    html.classList.remove("dynamic-no-scroll");
    body.classList.remove("dynamic-no-scroll");
    if (isIOS()) {
      window.scrollTo(userScrollCoordinatesBeforeLock.x, userScrollCoordinatesBeforeLock.y);
    }
  };
  (0, import_react14.useEffect)(() => {
    if (!isOpen)
      return;
    const userScrollCoordinatesBeforeLock = {
      x: window.scrollX,
      y: window.scrollY
    };
    disableScroll();
    return () => {
      enableScroll(userScrollCoordinatesBeforeLock);
    };
  }, [isOpen]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryBase.js
var import_react17 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ErrorContainer/ErrorContainer.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react15 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/error.js
var React2 = __toESM(require_react(), 1);
var _path;
var _excluded = ["title", "titleId"];
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgError = function SvgError2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties(_ref2, _excluded);
  return React2.createElement("svg", _extends2({
    width: 20,
    height: 20,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React2.createElement("title", {
    id: titleId
  }, title2) : null, _path || (_path = React2.createElement("path", {
    d: "M9.99 0C4.47 0 0 4.48 0 10s4.47 10 9.99 10C15.52 20 20 15.52 20 10S15.52 0 9.99 0ZM10 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8Zm-1-5h2v2H9v-2Zm0-8h2v6H9V5Z",
    fill: "currentcolor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/classNames/utils/isClassNamesObjectArg.js
var isClassNamesObjectArg = (arg) => typeof arg === "object";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/classNames/utils/isString.js
var isString = (arg) => typeof arg === "string";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/classNames/classNames.js
var classNames = (...args) => {
  const classes1 = args.reduce((classes, arg) => {
    if (isString(arg)) {
      return [...classes, arg];
    }
    if (isClassNamesObjectArg(arg)) {
      const keys2 = Object.keys(arg);
      const validClasses = keys2.map((key) => {
        if (arg[key]) {
          return key;
        }
        return null;
      }).filter(isString);
      return [...classes, ...validClasses];
    }
    return classes;
  }, []);
  return classes1.join(" ");
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Typography/Typography.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var Typography = (_a) => {
  var { as: Tag = "p", variant, weight, color, transform, className = "", truncate = false, style } = _a, props = __rest(_a, ["as", "variant", "weight", "color", "transform", "className", "truncate", "style"]);
  const variantClassNameMap = {
    body_mini: "typography--body-mini",
    body_normal: "typography--body-normal",
    body_small: "typography--body-small",
    button_primary: "typography--button-primary",
    button_secondary: "typography--button-secondary",
    button_tertiary: "typography--button-tertiary",
    numbers_big: "typography--numbers-big",
    numbers_medium: "typography--numbers-medium",
    title: "typography--title"
  };
  const weightClassNameMap = {
    bold: "typography--bold",
    medium: "typography--medium",
    regular: "typography--regular"
  };
  const colorClassNameMap = {
    "brand-primary": "typography--brand-primary",
    "error-1": "typography--dynamic-error-1",
    "error-2": "typography--dynamic-error-2",
    "green-1": "typography--connection-green-1",
    inherit: "typography--inherit",
    link: "typography--link",
    primary: "typography--primary",
    secondary: "typography--secondary",
    tertiary: "typography--tertiary",
    tooltip: "typography--tooltip",
    white: "typography--white"
  };
  const transformClassNameMap = {
    uppercase: "typography--uppercase"
  };
  const effectiveClassName = classNames("typography", variant ? variantClassNameMap[variant] : "", weight ? weightClassNameMap[weight] : "", color ? colorClassNameMap[color] : "", transform ? transformClassNameMap[transform] : "", {
    "typography--truncate": truncate
  }, className);
  return (0, import_jsx_runtime4.jsx)(Tag, Object.assign({ style, className: effectiveClassName }, props));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ErrorContainer/ErrorContainer.js
var ErrorContainer = ({ children, className, isMultiWalletError = false, withIcon = true, variant = "error", copykey }) => {
  const effectiveContainerClassName = classNames("error-container", `error-container--${variant}`, className, {
    "error-container--multi-wallet": isMultiWalletError
  });
  const effectiveErrorClassName = classNames("error", {
    "error--with-icon": withIcon
  });
  return (0, import_jsx_runtime5.jsxs)("div", { className: effectiveContainerClassName, "data-testid": `error-container--${variant}`, children: [withIcon && (0, import_jsx_runtime5.jsx)(SvgError, {}), (0, import_jsx_runtime5.jsx)(Typography, { variant: "body_small", className: effectiveErrorClassName, copykey, children })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryContext.js
var import_react16 = __toESM(require_react(), 1);
var ERROR_BOUNDARY_CONTEXT_NOT_FOUND = "ERROR_BOUNDARY_CONTEXT_NOT_FOUND";
var ErrorBoundaryContext = (0, import_react16.createContext)(null);
function assertErrorBoundaryContext(value) {
  if (value === null || typeof value.hasError !== "boolean" || typeof value.error !== "object" || typeof value.isDynamicSdkError !== "boolean") {
    const error = new Error("ErrorBoundaryContext not found");
    error.cause = ERROR_BOUNDARY_CONTEXT_NOT_FOUND;
    throw error;
  }
}

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryBase.js
var ErrorBoundaryBase = class extends import_react17.Component {
  static getDerivedStateFromError(error) {
    return { error, hasError: true };
  }
  renderOrError(children, { isDynamicSdkError }) {
    try {
      assertErrorBoundaryContext(this.context);
      this.context.isDynamicSdkError = isDynamicSdkError;
    } catch (e2) {
      logger2.error(e2);
      return (0, import_react17.createElement)(ErrorContainer, null, "ErrorBoundary must be used within ErrorBoundaryContext");
    }
    return children;
  }
};
ErrorBoundaryBase.contextType = ErrorBoundaryContext;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/CaptchaContext/CaptchaContext.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_react19 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useLocalStorage/useLocalStorage.js
var import_react18 = __toESM(require_react(), 1);
var useLocalStorage = (key, initialValue, valueValidator, otherKeysToRemove) => {
  const [storedValue, setStoredValue] = (0, import_react18.useState)(() => {
    try {
      const item = StorageService.getItem(key);
      if (item && valueValidator && !valueValidator(item)) {
        StorageService.removeItem(key);
        otherKeysToRemove === null || otherKeysToRemove === void 0 ? void 0 : otherKeysToRemove.forEach((k) => StorageService.removeItem(k));
        return initialValue;
      } else {
        return item !== null && item !== void 0 ? item : initialValue;
      }
    } catch (error) {
      logger2.error(error);
      return initialValue;
    }
  });
  const setValue = (0, import_react18.useCallback)((value) => {
    try {
      const valueToStore = value instanceof Function ? value(storedValue) : value;
      setStoredValue(valueToStore);
      StorageService.setItem(key, valueToStore);
    } catch (error) {
      logger2.error(error);
    }
  }, [key, storedValue]);
  const removeValue = (0, import_react18.useCallback)(() => {
    StorageService.removeItem(key);
    setStoredValue(initialValue);
  }, [initialValue, key]);
  return [storedValue, setValue, removeValue];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/CaptchaContext/CaptchaContext.js
var CaptchaContext = (0, import_react19.createContext)(void 0);
var CaptchaContextProvider = ({ children }) => {
  const { setView } = useViewContext();
  const [captchaToken, setCaptchaToken, removeCaptchaToken] = useLocalStorage(CAPTCHA_TOKEN, void 0);
  const [captchaAuthState, setCaptchaAuthState] = (0, import_react19.useState)();
  const engageCaptcha = (0, import_react19.useCallback)(({ authMethod, onCaptchaSuccess }) => {
    setCaptchaAuthState({ authMethod, onCaptchaSuccess });
    setView("captcha");
  }, [setView, setCaptchaAuthState]);
  const getCaptchaToken = (0, import_react19.useCallback)(() => {
    const token = captchaToken;
    removeCaptchaToken();
    return token;
  }, [captchaToken, removeCaptchaToken]);
  const value = (0, import_react19.useMemo)(() => ({
    captchaAuthState,
    engageCaptcha,
    getCaptchaToken,
    removeCaptchaToken,
    setCaptchaAuthState,
    setCaptchaToken
  }), [
    captchaAuthState,
    getCaptchaToken,
    engageCaptcha,
    setCaptchaAuthState,
    setCaptchaToken,
    removeCaptchaToken
  ]);
  return (0, import_jsx_runtime7.jsx)(CaptchaContext.Provider, { value, children });
};
var useCaptchaContext = () => {
  const context = (0, import_react19.useContext)(CaptchaContext);
  if (context === void 0) {
    throw new Error("usage of useCaptchaContext not wrapped in `CaptchaContextProvider`.");
  }
  return context;
};

// node_modules/react-international-phone/dist/index.mjs
var import_react20 = __toESM(require_react(), 1);
var import_react21 = __toESM(require_react(), 1);
var import_react22 = __toESM(require_react(), 1);
var import_react23 = __toESM(require_react(), 1);
var import_react24 = __toESM(require_react(), 1);
var import_react25 = __toESM(require_react(), 1);
var import_react26 = __toESM(require_react(), 1);
var import_react27 = __toESM(require_react(), 1);
var R = [["Afghanistan", "af", "93"], ["Albania", "al", "355"], ["Algeria", "dz", "213"], ["Andorra", "ad", "376"], ["Angola", "ao", "244"], ["Antigua and Barbuda", "ag", "1268"], ["Argentina", "ar", "54", "(..) ........", 0], ["Armenia", "am", "374", ".. ......"], ["Aruba", "aw", "297"], ["Australia", "au", "61", { default: ". .... ....", "/^4/": "... ... ...", "/^5(?!50)/": "... ... ...", "/^1(3|8)00/": ".... ... ...", "/^13/": ".. .. ..", "/^180/": "... ...." }, 0, []], ["Austria", "at", "43"], ["Azerbaijan", "az", "994", "(..) ... .. .."], ["Bahamas", "bs", "1242"], ["Bahrain", "bh", "973"], ["Bangladesh", "bd", "880"], ["Barbados", "bb", "1246"], ["Belarus", "by", "375", "(..) ... .. .."], ["Belgium", "be", "32", "... .. .. .."], ["Belize", "bz", "501"], ["Benin", "bj", "229"], ["Bhutan", "bt", "975"], ["Bolivia", "bo", "591"], ["Bosnia and Herzegovina", "ba", "387"], ["Botswana", "bw", "267"], ["Brazil", "br", "55", "(..) ........."], ["British Indian Ocean Territory", "io", "246"], ["Brunei", "bn", "673"], ["Bulgaria", "bg", "359"], ["Burkina Faso", "bf", "226"], ["Burundi", "bi", "257"], ["Cambodia", "kh", "855"], ["Cameroon", "cm", "237"], ["Canada", "ca", "1", "(...) ...-....", 1, ["204", "226", "236", "249", "250", "289", "306", "343", "365", "387", "403", "416", "418", "431", "437", "438", "450", "506", "514", "519", "548", "579", "581", "587", "604", "613", "639", "647", "672", "705", "709", "742", "778", "780", "782", "807", "819", "825", "867", "873", "902", "905"]], ["Cape Verde", "cv", "238"], ["Caribbean Netherlands", "bq", "599", "", 1], ["Central African Republic", "cf", "236"], ["Chad", "td", "235"], ["Chile", "cl", "56"], ["China", "cn", "86", "... .... ...."], ["Colombia", "co", "57", "... ... ...."], ["Comoros", "km", "269"], ["Congo", "cd", "243"], ["Congo", "cg", "242"], ["Costa Rica", "cr", "506", "....-...."], ["Côte d'Ivoire", "ci", "225", ".. .. .. .. .."], ["Croatia", "hr", "385"], ["Cuba", "cu", "53"], ["Curaçao", "cw", "599", "", 0], ["Cyprus", "cy", "357", ".. ......"], ["Czech Republic", "cz", "420", "... ... ..."], ["Denmark", "dk", "45", ".. .. .. .."], ["Djibouti", "dj", "253"], ["Dominica", "dm", "1767"], ["Dominican Republic", "do", "1", "", 2], ["Ecuador", "ec", "593"], ["Egypt", "eg", "20"], ["El Salvador", "sv", "503", "....-...."], ["Equatorial Guinea", "gq", "240"], ["Eritrea", "er", "291"], ["Estonia", "ee", "372", ".... ......"], ["Ethiopia", "et", "251"], ["Fiji", "fj", "679"], ["Finland", "fi", "358", ".. ... .. .."], ["France", "fr", "33", ". .. .. .. .."], ["French Guiana", "gf", "594"], ["French Polynesia", "pf", "689"], ["Gabon", "ga", "241"], ["Gambia", "gm", "220"], ["Georgia", "ge", "995"], ["Germany", "de", "49", ".... ........"], ["Ghana", "gh", "233"], ["Greece", "gr", "30"], ["Grenada", "gd", "1473"], ["Guadeloupe", "gp", "590", "", 0], ["Guam", "gu", "1671"], ["Guatemala", "gt", "502", "....-...."], ["Guinea", "gn", "224"], ["Guinea-Bissau", "gw", "245"], ["Guyana", "gy", "592"], ["Haiti", "ht", "509", "....-...."], ["Honduras", "hn", "504"], ["Hong Kong", "hk", "852", ".... ...."], ["Hungary", "hu", "36"], ["Iceland", "is", "354", "... ...."], ["India", "in", "91", ".....-....."], ["Indonesia", "id", "62"], ["Iran", "ir", "98", "... ... ...."], ["Iraq", "iq", "964"], ["Ireland", "ie", "353", ".. ......."], ["Israel", "il", "972", "... ... ...."], ["Italy", "it", "39", "... .......", 0], ["Jamaica", "jm", "1876"], ["Japan", "jp", "81", ".. .... ...."], ["Jordan", "jo", "962"], ["Kazakhstan", "kz", "7", "... ...-..-..", 0], ["Kenya", "ke", "254"], ["Kiribati", "ki", "686"], ["Kosovo", "xk", "383"], ["Kuwait", "kw", "965"], ["Kyrgyzstan", "kg", "996", "... ... ..."], ["Laos", "la", "856"], ["Latvia", "lv", "371", ".. ... ..."], ["Lebanon", "lb", "961"], ["Lesotho", "ls", "266"], ["Liberia", "lr", "231"], ["Libya", "ly", "218"], ["Liechtenstein", "li", "423"], ["Lithuania", "lt", "370"], ["Luxembourg", "lu", "352"], ["Macau", "mo", "853"], ["Macedonia", "mk", "389"], ["Madagascar", "mg", "261"], ["Malawi", "mw", "265"], ["Malaysia", "my", "60", "..-....-...."], ["Maldives", "mv", "960"], ["Mali", "ml", "223"], ["Malta", "mt", "356"], ["Marshall Islands", "mh", "692"], ["Martinique", "mq", "596"], ["Mauritania", "mr", "222"], ["Mauritius", "mu", "230"], ["Mexico", "mx", "52", "... ... ....", 0], ["Micronesia", "fm", "691"], ["Moldova", "md", "373", "(..) ..-..-.."], ["Monaco", "mc", "377"], ["Mongolia", "mn", "976"], ["Montenegro", "me", "382"], ["Morocco", "ma", "212"], ["Mozambique", "mz", "258"], ["Myanmar", "mm", "95"], ["Namibia", "na", "264"], ["Nauru", "nr", "674"], ["Nepal", "np", "977"], ["Netherlands", "nl", "31", ".. ........"], ["New Caledonia", "nc", "687"], ["New Zealand", "nz", "64", "...-...-...."], ["Nicaragua", "ni", "505"], ["Niger", "ne", "227"], ["Nigeria", "ng", "234"], ["North Korea", "kp", "850"], ["Norway", "no", "47", "... .. ..."], ["Oman", "om", "968"], ["Pakistan", "pk", "92", "...-......."], ["Palau", "pw", "680"], ["Palestine", "ps", "970"], ["Panama", "pa", "507"], ["Papua New Guinea", "pg", "675"], ["Paraguay", "py", "595"], ["Peru", "pe", "51"], ["Philippines", "ph", "63", ".... ......."], ["Poland", "pl", "48", "...-...-..."], ["Portugal", "pt", "351"], ["Puerto Rico", "pr", "1", "", 3, ["787", "939"]], ["Qatar", "qa", "974"], ["Réunion", "re", "262"], ["Romania", "ro", "40"], ["Russia", "ru", "7", "(...) ...-..-..", 1], ["Rwanda", "rw", "250"], ["Saint Kitts and Nevis", "kn", "1869"], ["Saint Lucia", "lc", "1758"], ["Saint Vincent and the Grenadines", "vc", "1784"], ["Samoa", "ws", "685"], ["San Marino", "sm", "378"], ["São Tomé and Príncipe", "st", "239"], ["Saudi Arabia", "sa", "966"], ["Senegal", "sn", "221"], ["Serbia", "rs", "381"], ["Seychelles", "sc", "248"], ["Sierra Leone", "sl", "232"], ["Singapore", "sg", "65", "....-...."], ["Slovakia", "sk", "421"], ["Slovenia", "si", "386"], ["Solomon Islands", "sb", "677"], ["Somalia", "so", "252"], ["South Africa", "za", "27"], ["South Korea", "kr", "82", "... .... ...."], ["South Sudan", "ss", "211"], ["Spain", "es", "34", "... ... ..."], ["Sri Lanka", "lk", "94"], ["Sudan", "sd", "249"], ["Suriname", "sr", "597"], ["Swaziland", "sz", "268"], ["Sweden", "se", "46", "... ... ..."], ["Switzerland", "ch", "41", ".. ... .. .."], ["Syria", "sy", "963"], ["Taiwan", "tw", "886"], ["Tajikistan", "tj", "992"], ["Tanzania", "tz", "255"], ["Thailand", "th", "66"], ["Timor-Leste", "tl", "670"], ["Togo", "tg", "228"], ["Tonga", "to", "676"], ["Trinidad and Tobago", "tt", "1868"], ["Tunisia", "tn", "216"], ["Turkey", "tr", "90", "... ... .. .."], ["Turkmenistan", "tm", "993"], ["Tuvalu", "tv", "688"], ["Uganda", "ug", "256"], ["Ukraine", "ua", "380", "(..) ... .. .."], ["United Arab Emirates", "ae", "971"], ["United Kingdom", "gb", "44", ".... ......"], ["United States", "us", "1", "(...) ...-....", 0], ["Uruguay", "uy", "598"], ["Uzbekistan", "uz", "998", ".. ... .. .."], ["Vanuatu", "vu", "678"], ["Vatican City", "va", "39", ".. .... ....", 1], ["Venezuela", "ve", "58"], ["Vietnam", "vn", "84"], ["Yemen", "ye", "967"], ["Zambia", "zm", "260"], ["Zimbabwe", "zw", "263"]];
var ve = "react-international-phone-";
var se = (...t2) => t2.filter((e2) => !!e2).join(" ").trim();
var xe = (...t2) => se(...t2).split(" ").map((e2) => `${ve}${e2}`).join(" ");
var P = ({ addPrefix: t2, rawClassNames: e2 }) => se(xe(...t2), ...e2);
var le = ({ value: t2, mask: e2, maskSymbol: a, offset: s = 0, trimNonMaskCharsLeftover: r = false }) => {
  if (t2.length < s) return t2;
  let o = t2.slice(0, s), c = t2.slice(s), i = o, n = 0;
  for (let l of e2.split("")) {
    if (n >= c.length) {
      if (!r && l !== a) {
        i += l;
        continue;
      }
      break;
    }
    l === a ? (i += c[n], n += 1) : i += l;
  }
  return i;
};
var F = (t2) => t2 ? /^\d+$/.test(t2) : false;
var z = (t2) => t2.replace(/\D/g, "");
var ue = (t2, e2) => {
  let a = t2.style.display;
  a !== "block" && (t2.style.display = "block");
  let s = t2.getBoundingClientRect(), r = e2.getBoundingClientRect(), o = r.top - s.top, c = s.bottom - r.bottom;
  o >= 0 && c >= 0 || (Math.abs(o) < Math.abs(c) ? t2.scrollTop += o : t2.scrollTop -= c), t2.style.display = a;
};
var Se = (t2) => {
  let { name: e2, iso2: a, dialCode: s, format: r, priority: o, areaCodes: c } = t2, i = [e2, a, s, r, o, c];
  for (let n = 0; n < i.length; n += 1) {
    if (n === 0) continue;
    let l = i[n - 1], d = i[n];
    if (l === void 0 && d !== void 0) {
      let m = JSON.stringify(i, (f, g) => g === void 0 ? "__undefined" : g).replace(/"__undefined"/g, "undefined");
      throw new Error(`[react-international-phone] invalid country values passed to buildCountryData. Check ${l} in: ${m}`);
    }
  }
  return i.filter((n) => n !== void 0);
};
var de = ({ phone: t2, dialCode: e2, prefix: a = "+", charAfterDialCode: s = " " }) => {
  if (!t2 || !e2) return t2;
  let r = t2;
  return r.startsWith(a) && (r = r.replace(a, "")), r.startsWith(e2) ? (r = r.replace(e2, ""), r.startsWith(s) && (r = r.replace(s, "")), r) : t2;
};
var ce = (t2, e2) => {
  let a = e2.disableDialCodeAndPrefix ? false : e2.forceDialCode, s = e2.disableDialCodeAndPrefix ? false : e2.insertDialCodeOnEmpty, r = t2, o = (l) => e2.trimNonDigitsEnd ? l.trim() : l;
  if (!r) return s && !r.length || a ? o(`${e2.prefix}${e2.dialCode}${e2.charAfterDialCode}`) : o(r);
  if (r = z(r), r === e2.dialCode && !e2.disableDialCodeAndPrefix) return o(`${e2.prefix}${e2.dialCode}${e2.charAfterDialCode}`);
  if (e2.dialCode.startsWith(r) && !e2.disableDialCodeAndPrefix) return o(a ? `${e2.prefix}${e2.dialCode}${e2.charAfterDialCode}` : `${e2.prefix}${r}`);
  if (!r.startsWith(e2.dialCode) && !e2.disableDialCodeAndPrefix) {
    if (a) return o(`${e2.prefix}${e2.dialCode}${e2.charAfterDialCode}`);
    if (r.length < e2.dialCode.length) return o(`${e2.prefix}${r}`);
  }
  let c = () => {
    let l = e2.dialCode.length, d = r.slice(0, l), m = r.slice(l);
    return { phoneLeftSide: d, phoneRightSide: m };
  }, { phoneLeftSide: i, phoneRightSide: n } = c();
  return i = `${e2.prefix}${i}${e2.charAfterDialCode}`, n = le({ value: n, mask: e2.mask, maskSymbol: e2.maskChar, trimNonMaskCharsLeftover: e2.trimNonDigitsEnd || e2.disableDialCodeAndPrefix && n.length === 0 }), e2.disableDialCodeAndPrefix && (i = ""), o(`${i}${n}`);
};
var pe = ({ phoneBeforeInput: t2, phoneAfterInput: e2, phoneAfterFormatted: a, cursorPositionAfterInput: s, leftOffset: r = 0, deletion: o }) => {
  if (s < r) return r;
  if (!t2) return a.length;
  let c = null;
  for (let d = s - 1; d >= 0; d -= 1) if (F(e2[d])) {
    c = d;
    break;
  }
  if (c === null) {
    for (let d = 0; d < e2.length; d += 1) if (F(a[d])) return d;
    return e2.length;
  }
  let i = 0;
  for (let d = 0; d < c; d += 1) F(e2[d]) && (i += 1);
  let n = 0, l = 0;
  for (let d = 0; d < a.length && (n += 1, F(a[d]) && (l += 1), !(l >= i + 1)); d += 1) ;
  if (o !== "backward") for (; !F(a[n]) && n < a.length; ) n += 1;
  return n;
};
var B = ({ phone: t2, prefix: e2 }) => t2 ? `${e2}${z(t2)}` : "";
function W({ value: t2, country: e2, insertDialCodeOnEmpty: a, trimNonDigitsEnd: s, countries: r, prefix: o, charAfterDialCode: c, forceDialCode: i, disableDialCodeAndPrefix: n, defaultMask: l, countryGuessingEnabled: d, disableFormatting: m }) {
  let f = t2;
  n && (f = f.startsWith(`${o}`) ? f : `${o}${e2.dialCode}${f}`);
  let g = d ? X({ phone: f, countries: r, currentCountryIso2: e2 == null ? void 0 : e2.iso2 }) : void 0, x = (g == null ? void 0 : g.country) ?? e2, p = ce(f, { prefix: o, mask: Q({ phone: f, country: x, defaultMask: l, disableFormatting: m }), maskChar: J, dialCode: x.dialCode, trimNonDigitsEnd: s, charAfterDialCode: c, forceDialCode: i, insertDialCodeOnEmpty: a, disableDialCodeAndPrefix: n }), h = d && !(g == null ? void 0 : g.fullDialCodeMatch) ? e2 : x;
  return { phone: B({ phone: n ? `${h.dialCode}${p}` : p, prefix: o }), inputValue: p, country: h };
}
var De = (t2) => {
  if ((t2 == null ? void 0 : t2.toLocaleLowerCase().includes("delete")) ?? false) return (t2 == null ? void 0 : t2.toLocaleLowerCase().includes("forward")) ? "forward" : "backward";
};
var me = (t2, { country: e2, insertDialCodeOnEmpty: a, phoneBeforeInput: s, prefix: r, charAfterDialCode: o, forceDialCode: c, disableDialCodeAndPrefix: i, countryGuessingEnabled: n, defaultMask: l, disableFormatting: d, countries: m }) => {
  let f = t2.nativeEvent, g = f.inputType, x = De(g), p = !!(g == null ? void 0 : g.startsWith("insertFrom")), h = g === "insertText", S = (f == null ? void 0 : f.data) || void 0, D = t2.target.value, _ = t2.target.selectionStart ?? 0;
  if (g == null ? void 0 : g.includes("history")) return { inputValue: s, phone: B({ phone: s, prefix: r }), cursorPosition: s.length, country: e2 };
  if (h && !F(S) && D !== r) return { inputValue: s, phone: B({ phone: i ? `${e2.dialCode}${s}` : s, prefix: r }), cursorPosition: _ - ((S == null ? void 0 : S.length) ?? 0), country: e2 };
  if (c && !D.startsWith(`${r}${e2.dialCode}`) && !p) {
    let b = D ? s : `${r}${e2.dialCode}${o}`;
    return { inputValue: b, phone: B({ phone: b, prefix: r }), cursorPosition: r.length + e2.dialCode.length + o.length, country: e2 };
  }
  let { phone: N, inputValue: u, country: C } = W({ value: D, country: e2, trimNonDigitsEnd: x === "backward", insertDialCodeOnEmpty: a, countryGuessingEnabled: n, countries: m, prefix: r, charAfterDialCode: o, forceDialCode: c, disableDialCodeAndPrefix: i, disableFormatting: d, defaultMask: l }), y = pe({ cursorPositionAfterInput: _, phoneBeforeInput: s, phoneAfterInput: D, phoneAfterFormatted: u, leftOffset: c ? r.length + e2.dialCode.length + o.length : 0, deletion: x });
  return { phone: N, inputValue: u, cursorPosition: y, country: C };
};
var fe = (t2, e2) => {
  let a = Object.keys(t2), s = Object.keys(e2);
  if (a.length !== s.length) return false;
  for (let r of a) if (t2[r] !== e2[r]) return false;
  return true;
};
var Ce = () => {
  let t2 = (0, import_react23.useRef)(), e2 = (0, import_react23.useRef)(Date.now());
  return { check: () => {
    let s = Date.now(), r = t2.current ? s - e2.current : void 0;
    return t2.current = e2.current, e2.current = s, r;
  } };
};
var ke = { size: 20, overrideLastItemDebounceMS: -1 };
function ye(t2, e2) {
  let { size: a, overrideLastItemDebounceMS: s, onChange: r } = { ...ke, ...e2 }, [o, c] = (0, import_react22.useState)(t2), [i, n] = (0, import_react22.useState)([o]), [l, d] = (0, import_react22.useState)(0), m = Ce();
  return [o, (p, h) => {
    if (typeof p == "object" && typeof o == "object" && fe(p, o) || p === o) return;
    let I = s > 0, S = m.check(), D = I && S !== void 0 ? S > s : true;
    if ((h == null ? void 0 : h.overrideLastItem) !== void 0 ? h.overrideLastItem : !D) n((N) => [...N.slice(0, l), p]);
    else {
      let N = i.length >= a;
      n((u) => [...u.slice(N ? 1 : 0, l + 1), p]), N || d((u) => u + 1);
    }
    c(p), r == null ? void 0 : r(p);
  }, () => {
    if (l <= 0) return { success: false };
    let p = i[l - 1];
    return c(p), d((h) => h - 1), r == null ? void 0 : r(p), { success: true, value: p };
  }, () => {
    if (l + 1 >= i.length) return { success: false };
    let p = i[l + 1];
    return c(p), d((h) => h + 1), r == null ? void 0 : r(p), { success: true, value: p };
  }];
}
var J = ".";
var E = { defaultCountry: "us", value: "", prefix: "+", defaultMask: "............", charAfterDialCode: " ", historySaveDebounceMS: 200, disableCountryGuess: false, disableDialCodePrefill: false, forceDialCode: false, disableDialCodeAndPrefix: false, disableFormatting: false, countries: R, preferredCountries: [] };
var ee = ({ defaultCountry: t2 = E.defaultCountry, value: e2 = E.value, countries: a = E.countries, prefix: s = E.prefix, defaultMask: r = E.defaultMask, charAfterDialCode: o = E.charAfterDialCode, historySaveDebounceMS: c = E.historySaveDebounceMS, disableCountryGuess: i = E.disableCountryGuess, disableDialCodePrefill: n = E.disableDialCodePrefill, forceDialCode: l = E.forceDialCode, disableDialCodeAndPrefix: d = E.disableDialCodeAndPrefix, disableFormatting: m = E.disableFormatting, onChange: f, inputRef: g }) => {
  let h = { countries: a, prefix: s, charAfterDialCode: o, forceDialCode: d ? false : l, disableDialCodeAndPrefix: d, defaultMask: r, countryGuessingEnabled: !i, disableFormatting: m }, I = (0, import_react21.useRef)(null), S = g || I, D = (w) => {
    Promise.resolve().then(() => {
      var _a;
      typeof window > "u" || S.current !== (document == null ? void 0 : document.activeElement) || ((_a = S.current) == null ? void 0 : _a.setSelectionRange(w, w));
    });
  }, [{ phone: _, inputValue: N, country: u }, C, y, b] = ye(() => {
    let w = $({ value: t2, field: "iso2", countries: a });
    w || console.error(`[react-international-phone]: can not find a country with "${t2}" iso2 code`);
    let T = w || $({ value: "us", field: "iso2", countries: a }), { phone: k, inputValue: L, country: U } = W({ value: e2, country: T, insertDialCodeOnEmpty: !n, ...h });
    return D(L.length), { phone: k, inputValue: L, country: U.iso2 };
  }, { overrideLastItemDebounceMS: c, onChange: ({ inputValue: w, phone: T, country: k }) => {
    if (!f) return;
    let L = v(k);
    f({ phone: T, inputValue: w, country: L });
  } }), v = (0, import_react21.useCallback)((w) => $({ value: w, field: "iso2", countries: a }), [a]), A = (0, import_react21.useMemo)(() => v(u), [u, v]);
  (0, import_react21.useEffect)(() => {
    let w = S.current;
    if (!w) return;
    let T = (k) => {
      if (!k.key) return;
      let L = k.ctrlKey, U = k.shiftKey, Pe = k.key.toLowerCase() === "z";
      !L || !Pe || (U ? b() : y());
    };
    return w.addEventListener("keydown", T), () => {
      w.removeEventListener("keydown", T);
    };
  }, [S, y, b]);
  let V = (w) => {
    w.preventDefault();
    let { phone: T, inputValue: k, country: L, cursorPosition: U } = me(w, { country: A, phoneBeforeInput: N, insertDialCodeOnEmpty: false, ...h });
    return C({ inputValue: k, phone: T, country: L.iso2 }), D(U), e2;
  }, K = (w, T = { focusOnInput: false }) => {
    let k = $({ value: w, field: "iso2", countries: a });
    if (!k) {
      console.error(`[react-international-phone]: can not find a country with "${w}" iso2 code`);
      return;
    }
    let L = d ? "" : `${s}${k.dialCode}${o}`;
    C({ inputValue: L, phone: `${s}${k.dialCode}`, country: k.iso2 }), T.focusOnInput && Promise.resolve().then(() => {
      var _a;
      (_a = S.current) == null ? void 0 : _a.focus();
    });
  }, [G, j] = (0, import_react21.useState)(false);
  return (0, import_react21.useEffect)(() => {
    if (!G) {
      j(true), e2 !== _ && (f == null ? void 0 : f({ inputValue: N, phone: _, country: A }));
      return;
    }
    if (e2 === _) return;
    let { phone: w, inputValue: T, country: k } = W({ value: e2, country: A, insertDialCodeOnEmpty: !n, ...h });
    C({ phone: w, inputValue: T, country: k.iso2 });
  }, [e2]), { phone: _, inputValue: N, country: A, setCountry: K, handlePhoneValueChange: V, inputRef: S };
};
var Q = ({ phone: t2, country: e2, defaultMask: a = "............", disableFormatting: s = false }) => {
  let r = e2.format, o = (i) => s ? i.replace(new RegExp(`[^${J}]`, "g"), "") : i;
  if (!r) return o(a);
  if (typeof r == "string") return o(r);
  if (!r.default) return console.error(`[react-international-phone]: default mask for ${e2.iso2} is not provided`), o(a);
  let c = Object.keys(r).find((i) => {
    if (i === "default") return false;
    if (!(i.charAt(0) === "/" && i.charAt(i.length - 1) === "/")) return console.error(`[react-international-phone]: format regex "${i}" for ${e2.iso2} is not valid`), false;
    let l = new RegExp(i.substring(1, i.length - 1)), d = t2.replace(e2.dialCode, "");
    return l.test(z(d));
  });
  return o(c ? r[c] : r.default);
};
var M = (t2) => {
  let [e2, a, s, r, o, c] = t2;
  return { name: e2, iso2: a, dialCode: s, format: r, priority: o, areaCodes: c };
};
var _e = (t2) => `Field "${t2}" is not supported`;
var $ = ({ field: t2, value: e2, countries: a = R }) => {
  if (["priority"].includes(t2)) throw new Error(_e(t2));
  let s = a.find((r) => {
    let o = M(r);
    return e2 === o[t2];
  });
  if (s) return M(s);
};
var X = ({ phone: t2, countries: e2 = R, currentCountryIso2: a }) => {
  var _a;
  let s = { country: void 0, fullDialCodeMatch: false };
  if (!t2) return s;
  let r = z(t2);
  if (!r) return s;
  let o = s, c = ({ country: i, fullDialCodeMatch: n }) => {
    var _a2, _b;
    let l = i.dialCode === ((_a2 = o.country) == null ? void 0 : _a2.dialCode), d = (i.priority ?? 0) < (((_b = o.country) == null ? void 0 : _b.priority) ?? 0);
    (!l || d) && (o = { country: i, fullDialCodeMatch: n });
  };
  for (let i of e2) {
    let n = M(i), { dialCode: l, areaCodes: d } = n;
    if (r.startsWith(l)) {
      let m = o.country ? Number(l) >= Number(o.country.dialCode) : true;
      if (d) {
        let f = r.substring(l.length);
        for (let g of d) if (f.startsWith(g)) return { country: n, fullDialCodeMatch: true };
      }
      (m || l === r || !o.fullDialCodeMatch) && c({ country: n, fullDialCodeMatch: true });
    }
    o.fullDialCodeMatch || r.length < l.length && l.startsWith(r) && (!o.country || Number(l) <= Number(o.country.dialCode)) && c({ country: n, fullDialCodeMatch: false });
  }
  if (a) {
    let i = $({ value: a, field: "iso2", countries: e2 });
    if (!i) return o;
    let l = i ? ((m) => {
      if (!(m == null ? void 0 : m.areaCodes)) return false;
      let f = r.substring(m.dialCode.length);
      return m.areaCodes.some((g) => g.startsWith(f));
    })(i) : false;
    !!o && ((_a = o.country) == null ? void 0 : _a.dialCode) === i.dialCode && o.country !== i && o.fullDialCodeMatch && (!i.areaCodes || l) && (o = { country: i, fullDialCodeMatch: true });
  }
  return o;
};
var Ae = (t2, e2) => {
  let a = parseInt(t2, 16);
  return Number(a + e2).toString(16);
};
var Te = "abcdefghijklmnopqrstuvwxyz";
var Ee = "1f1e6";
var we = Te.split("").reduce((t2, e2, a) => ({ ...t2, [e2]: Ae(Ee, a) }), {});
var Le = (t2) => [we[t2[0]], we[t2[1]]].join("-");
var q = ({ iso2: t2, size: e2, src: a, protocol: s = "https", disableLazyLoading: r, className: o, style: c, ...i }) => {
  if (!t2) return import_react24.default.createElement("img", { className: P({ addPrefix: ["flag-emoji"], rawClassNames: [o] }), width: e2, height: e2, ...i });
  let n = () => {
    if (a) return a;
    let l = Le(t2);
    return `${s}://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/svg/${l}.svg`;
  };
  return import_react24.default.createElement("img", { className: P({ addPrefix: ["flag-emoji"], rawClassNames: [o] }), src: n(), width: e2, height: e2, draggable: false, "data-country": t2, loading: r ? void 0 : "lazy", style: { width: e2, height: e2, ...c }, alt: "", ...i });
};
var ze = 1e3;
var ne = ({ show: t2, dialCodePrefix: e2 = "+", selectedCountry: a, countries: s = R, preferredCountries: r = [], flags: o, onSelect: c, onClose: i, ...n }) => {
  let l = (0, import_react25.useRef)(null), d = (0, import_react25.useRef)(), m = (0, import_react25.useMemo)(() => {
    if (!r || !r.length) return s;
    let u = [], C = [...s];
    for (let y of r) {
      let b = C.findIndex((v) => M(v).iso2 === y);
      if (b !== -1) {
        let v = C.splice(b, 1)[0];
        u.push(v);
      }
    }
    return u.concat(C);
  }, [s, r]), f = (0, import_react25.useRef)({ updatedAt: void 0, value: "" }), g = (u) => {
    let C = f.current.updatedAt && (/* @__PURE__ */ new Date()).getTime() - f.current.updatedAt.getTime() > ze;
    f.current = { value: C ? u : `${f.current.value}${u}`, updatedAt: /* @__PURE__ */ new Date() };
    let y = m.findIndex((b) => M(b).name.toLowerCase().startsWith(f.current.value));
    y !== -1 && h(y);
  }, x = (0, import_react25.useCallback)((u) => m.findIndex((C) => M(C).iso2 === u), [m]), [p, h] = (0, import_react25.useState)(x(a)), I = () => {
    d.current !== a && h(x(a));
  }, S = (0, import_react25.useCallback)((u) => {
    h(x(u.iso2)), c == null ? void 0 : c(u);
  }, [c, x]), D = (u) => {
    let C = m.length - 1, y = (b) => u === "prev" ? b - 1 : u === "next" ? b + 1 : u === "last" ? C : 0;
    h((b) => {
      let v = y(b);
      return v < 0 ? 0 : v > C ? C : v;
    });
  }, _ = (u) => {
    if (u.stopPropagation(), u.key === "Enter") {
      u.preventDefault();
      let C = M(m[p]);
      S(C);
      return;
    }
    if (u.key === "Escape") {
      i == null ? void 0 : i();
      return;
    }
    if (u.key === "ArrowUp") {
      u.preventDefault(), D("prev");
      return;
    }
    if (u.key === "ArrowDown") {
      u.preventDefault(), D("next");
      return;
    }
    if (u.key === "PageUp") {
      u.preventDefault(), D("first");
      return;
    }
    if (u.key === "PageDown") {
      u.preventDefault(), D("last");
      return;
    }
    u.key === " " && u.preventDefault(), u.key.length === 1 && !u.altKey && !u.ctrlKey && !u.metaKey && g(u.key.toLocaleLowerCase());
  }, N = (0, import_react25.useCallback)(() => {
    if (!l.current || p === void 0) return;
    let u = M(m[p]).iso2;
    if (u === d.current) return;
    let C = l.current.querySelector(`[data-country="${u}"]`);
    C && (ue(l.current, C), d.current = u);
  }, [p, m]);
  return (0, import_react25.useEffect)(() => {
    N();
  }, [p, N]), (0, import_react25.useEffect)(() => {
    l.current && (t2 ? l.current.focus() : I());
  }, [t2]), (0, import_react25.useEffect)(() => {
    I();
  }, [a]), import_react25.default.createElement("ul", { ref: l, role: "listbox", className: P({ addPrefix: ["country-selector-dropdown"], rawClassNames: [n.className] }), style: { display: t2 ? "block" : "none", ...n.style }, onKeyDown: _, onBlur: i, tabIndex: -1, "aria-activedescendant": `react-international-phone__${M(m[p]).iso2}-option` }, m.map((u, C) => {
    let y = M(u), b = y.iso2 === a, v = C === p, A = r.includes(y.iso2), V = C === r.length - 1, K = o == null ? void 0 : o.find((G) => G.iso2 === y.iso2);
    return import_react25.default.createElement(import_react25.default.Fragment, { key: y.iso2 }, import_react25.default.createElement("li", { "data-country": y.iso2, role: "option", "aria-selected": b, "aria-label": `${y.name} ${e2}${y.dialCode}`, id: `react-international-phone__${y.iso2}-option`, className: P({ addPrefix: ["country-selector-dropdown__list-item", A && "country-selector-dropdown__list-item--preferred", b && "country-selector-dropdown__list-item--selected", v && "country-selector-dropdown__list-item--focused"], rawClassNames: [n.listItemClassName] }), onClick: () => S(y), style: n.listItemStyle, title: y.name }, import_react25.default.createElement(q, { iso2: y.iso2, src: K == null ? void 0 : K.src, className: P({ addPrefix: ["country-selector-dropdown__list-item-flag-emoji"], rawClassNames: [n.listItemFlagClassName] }), style: n.listItemFlagStyle }), import_react25.default.createElement("span", { className: P({ addPrefix: ["country-selector-dropdown__list-item-country-name"], rawClassNames: [n.listItemCountryNameClassName] }), style: n.listItemCountryNameStyle }, y.name), import_react25.default.createElement("span", { className: P({ addPrefix: ["country-selector-dropdown__list-item-dial-code"], rawClassNames: [n.listItemDialCodeClassName] }), style: n.listItemDialCodeStyle }, e2, y.dialCode)), V ? import_react25.default.createElement("hr", { className: P({ addPrefix: ["country-selector-dropdown__preferred-list-divider"], rawClassNames: [n.preferredListDividerClassName] }), style: n.preferredListDividerStyle }) : null);
  }));
};
var ae = ({ selectedCountry: t2, onSelect: e2, disabled: a, hideDropdown: s, countries: r = R, preferredCountries: o = [], flags: c, renderButtonWrapper: i, ...n }) => {
  let [l, d] = (0, import_react20.useState)(false), m = (0, import_react20.useMemo)(() => {
    if (t2) return $({ value: t2, field: "iso2", countries: r });
  }, [r, t2]), f = (0, import_react20.useRef)(null), g = (p) => {
    p.key && ["ArrowUp", "ArrowDown"].includes(p.key) && (p.preventDefault(), d(true));
  }, x = () => {
    var _a;
    let p = { title: m == null ? void 0 : m.name, onClick: () => d((I) => !I), onMouseDown: (I) => I.preventDefault(), onKeyDown: g, disabled: s || a, role: "combobox", "aria-label": "Country selector", "aria-haspopup": "listbox", "aria-expanded": l }, h = import_react20.default.createElement("div", { className: P({ addPrefix: ["country-selector-button__button-content"], rawClassNames: [n.buttonContentWrapperClassName] }), style: n.buttonContentWrapperStyle }, import_react20.default.createElement(q, { iso2: t2, src: (_a = c == null ? void 0 : c.find((I) => I.iso2 === t2)) == null ? void 0 : _a.src, className: P({ addPrefix: ["country-selector-button__flag-emoji", a && "country-selector-button__flag-emoji--disabled"], rawClassNames: [n.flagClassName] }), style: { visibility: t2 ? "visible" : "hidden", ...n.flagStyle } }), !s && import_react20.default.createElement("div", { className: P({ addPrefix: ["country-selector-button__dropdown-arrow", a && "country-selector-button__dropdown-arrow--disabled", l && "country-selector-button__dropdown-arrow--active"], rawClassNames: [n.dropdownArrowClassName] }), style: n.dropdownArrowStyle }));
    return i ? i({ children: h, rootProps: p }) : import_react20.default.createElement("button", { ...p, type: "button", className: P({ addPrefix: ["country-selector-button", l && "country-selector-button--active", a && "country-selector-button--disabled", s && "country-selector-button--hide-dropdown"], rawClassNames: [n.buttonClassName] }), "data-country": t2, style: n.buttonStyle }, h);
  };
  return import_react20.default.createElement("div", { className: P({ addPrefix: ["country-selector"], rawClassNames: [n.className] }), style: n.style, ref: f }, x(), import_react20.default.createElement(ne, { show: l, countries: r, preferredCountries: o, flags: c, onSelect: (p) => {
    d(false), e2 == null ? void 0 : e2(p);
  }, selectedCountry: t2, onClose: () => {
    d(false);
  }, ...n.dropdownStyleProps }));
};
var ie = ({ dialCode: t2, prefix: e2, disabled: a, style: s, className: r }) => import_react26.default.createElement("div", { className: P({ addPrefix: ["dial-code-preview", a && "dial-code-preview--disabled"], rawClassNames: [r] }), style: s }, `${e2}${t2}`);
var Ge = (0, import_react27.forwardRef)(({ value: t2, onChange: e2, countries: a = R, preferredCountries: s = [], hideDropdown: r, showDisabledDialCodeAndPrefix: o, disableFocusAfterCountrySelect: c, flags: i, style: n, className: l, inputStyle: d, inputClassName: m, countrySelectorStyleProps: f, dialCodePreviewStyleProps: g, inputProps: x, placeholder: p, disabled: h, name: I, onFocus: S, onBlur: D, required: _, autoFocus: N, ...u }, C) => {
  let { phone: y, inputValue: b, inputRef: v, country: A, setCountry: V, handlePhoneValueChange: K } = ee({ value: t2, countries: a, ...u, onChange: (j) => {
    e2 == null ? void 0 : e2(j.phone, { country: j.country, inputValue: j.inputValue });
  } }), G = u.disableDialCodeAndPrefix && o && (A == null ? void 0 : A.dialCode);
  return (0, import_react27.useImperativeHandle)(C, () => v.current ? Object.assign(v.current, { setCountry: V, state: { phone: y, inputValue: b, country: A } }) : null, [v, V, y, b, A]), import_react27.default.createElement("div", { ref: C, className: P({ addPrefix: ["input-container"], rawClassNames: [l] }), style: n }, import_react27.default.createElement(ae, { onSelect: (j) => V(j.iso2, { focusOnInput: !c }), flags: i, selectedCountry: A.iso2, countries: a, preferredCountries: s, disabled: h, hideDropdown: r, ...f }), G && import_react27.default.createElement(ie, { dialCode: A.dialCode, prefix: u.prefix ?? "+", disabled: h, ...g }), import_react27.default.createElement("input", { onChange: K, value: b, type: "tel", ref: v, className: P({ addPrefix: ["input", h && "input--disabled"], rawClassNames: [m] }), placeholder: p, disabled: h, style: d, name: I, onFocus: S, onBlur: D, autoFocus: N, required: _, ...x }));
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getWalletConnectorNetworks/getWalletConnectorNetworks.js
var getWalletConnectorNetworks = (walletConnector) => {
  if (!walletConnector)
    return [];
  const _walletConnector = walletConnector;
  return _walletConnector.evmNetworks || _walletConnector.starknetNetworks || [];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isSupportedNetwork/isSupportedNetwork.js
var isSupportedNetwork = ({ walletConnector, network }) => {
  const supportedNetworks = getWalletConnectorNetworks(walletConnector);
  if (!supportedNetworks.length) {
    return true;
  }
  const isCurrentNetworkSupported = supportedNetworks.some(({ chainId }) => String(chainId) === String(network));
  return isCurrentNetworkSupported;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/config/ApiEndpoint.js
var ApiEndpoint = class {
};
ApiEndpoint.getBaseUrl = () => {
  if (!ApiEndpoint.__baseUrl__) {
    throw new Error("ApiEndpoint Base URL has not been initialized");
  }
  return ApiEndpoint.__baseUrl__;
};
ApiEndpoint.setBaseUrl = (baseUrlInput) => {
  if (!baseUrlInput) {
    ApiEndpoint.__baseUrl__ = new Configuration().basePath;
  } else {
    ApiEndpoint.__baseUrl__ = baseUrlInput;
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/user/user.js
var import_react28 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/hasPendingMfaAction/hasPendingMfaAction.js
var hasPendingMfaAction = (user) => {
  var _a;
  return ((_a = user.scope) === null || _a === void 0 ? void 0 : _a.includes("requiresAdditionalAuth")) || user.mfaBackupCodeAcknowledgement === MfaBackupCodeAcknowledgement.Pending;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/hasPendingRequirements/hasPendingRequirements.js
var hasPendingRequirements = (user) => {
  var _a;
  return Boolean((_a = user.missingFields) === null || _a === void 0 ? void 0 : _a.length) || hasPendingMfaAction(user);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/user/user.js
var { getUser, setUser, useUser: useUserRaw } = createStoreState("user");
var useUser = () => {
  const hasFullyLoggedIn = (0, import_react28.useRef)(false);
  const userFromStore = useUserRaw();
  if (!userFromStore) {
    hasFullyLoggedIn.current = false;
    return {};
  }
  if (!hasFullyLoggedIn.current && hasPendingRequirements(userFromStore)) {
    return { userWithMissingInfo: userFromStore };
  }
  hasFullyLoggedIn.current = true;
  return { user: userFromStore };
};

// node_modules/@dynamic-labs/sdk-react-core/node_modules/i18next/dist/esm/i18next.js
var consoleLogger = {
  type: "logger",
  log(args) {
    this.output("log", args);
  },
  warn(args) {
    this.output("warn", args);
  },
  error(args) {
    this.output("error", args);
  },
  output(type, args) {
    if (console && console[type]) console[type].apply(console, args);
  }
};
var Logger2 = class _Logger {
  constructor(concreteLogger) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(concreteLogger, options2);
  }
  init(concreteLogger) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = options2.prefix || "i18next:";
    this.logger = concreteLogger || consoleLogger;
    this.options = options2;
    this.debug = options2.debug;
  }
  log() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return this.forward(args, "log", "", true);
  }
  warn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.forward(args, "warn", "", true);
  }
  error() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.forward(args, "error", "");
  }
  deprecate() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug) return null;
    if (typeof args[0] === "string") args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new _Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options2) {
    options2 = options2 || this.options;
    options2.prefix = options2.prefix || this.prefix;
    return new _Logger(this.logger, options2);
  }
};
var baseLogger = new Logger2();
var EventEmitter = class {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(" ").forEach((event) => {
      this.observers[event] = this.observers[event] || [];
      this.observers[event].push(listener);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event]) return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event] = this.observers[event].filter((l) => l !== listener);
  }
  emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (this.observers[event]) {
      const cloned = [].concat(this.observers[event]);
      cloned.forEach((observer) => {
        observer(...args);
      });
    }
    if (this.observers["*"]) {
      const cloned = [].concat(this.observers["*"]);
      cloned.forEach((observer) => {
        observer.apply(observer, [event, ...args]);
      });
    }
  }
};
function defer() {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
}
function makeString(object3) {
  if (object3 == null) return "";
  return "" + object3;
}
function copy(a, s, t2) {
  a.forEach((m) => {
    if (s[m]) t2[m] = s[m];
  });
}
function getLastOfPath(object3, path, Empty) {
  function cleanKey(key) {
    return key && key.indexOf("###") > -1 ? key.replace(/###/g, ".") : key;
  }
  function canNotTraverseDeeper() {
    return !object3 || typeof object3 === "string";
  }
  const stack = typeof path !== "string" ? [].concat(path) : path.split(".");
  while (stack.length > 1) {
    if (canNotTraverseDeeper()) return {};
    const key = cleanKey(stack.shift());
    if (!object3[key] && Empty) object3[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object3, key)) {
      object3 = object3[key];
    } else {
      object3 = {};
    }
  }
  if (canNotTraverseDeeper()) return {};
  return {
    obj: object3,
    k: cleanKey(stack.shift())
  };
}
function setPath(object3, path, newValue) {
  const {
    obj,
    k
  } = getLastOfPath(object3, path, Object);
  obj[k] = newValue;
}
function pushPath(object3, path, newValue, concat) {
  const {
    obj,
    k
  } = getLastOfPath(object3, path, Object);
  obj[k] = obj[k] || [];
  if (concat) obj[k] = obj[k].concat(newValue);
  if (!concat) obj[k].push(newValue);
}
function getPath(object3, path) {
  const {
    obj,
    k
  } = getLastOfPath(object3, path);
  if (!obj) return void 0;
  return obj[k];
}
function getPathWithDefaults(data, defaultData, key) {
  const value = getPath(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath(defaultData, key);
}
function deepExtend(target, source, overwrite) {
  for (const prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
          if (overwrite) target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
}
function regexEscape(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function escape(data) {
  if (typeof data === "string") {
    return data.replace(/[&<>"'\/]/g, (s) => _entityMap[s]);
  }
  return data;
}
var chars = [" ", ",", "?", "!", ";"];
function looksLikeObjectPath(key, nsSeparator, keySeparator) {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  const possibleChars = chars.filter((c) => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
  if (possibleChars.length === 0) return true;
  const r = new RegExp(`(${possibleChars.map((c) => c === "?" ? "\\?" : c).join("|")})`);
  let matched = !r.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
}
function deepFind(obj, path) {
  let keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!obj) return void 0;
  if (obj[path]) return obj[path];
  const paths = path.split(keySeparator);
  let current = obj;
  for (let i = 0; i < paths.length; ++i) {
    if (!current) return void 0;
    if (typeof current[paths[i]] === "string" && i + 1 < paths.length) {
      return void 0;
    }
    if (current[paths[i]] === void 0) {
      let j = 2;
      let p = paths.slice(i, i + j).join(keySeparator);
      let mix = current[p];
      while (mix === void 0 && paths.length > i + j) {
        j++;
        p = paths.slice(i, i + j).join(keySeparator);
        mix = current[p];
      }
      if (mix === void 0) return void 0;
      if (mix === null) return null;
      if (path.endsWith(p)) {
        if (typeof mix === "string") return mix;
        if (p && typeof mix[p] === "string") return mix[p];
      }
      const joinedPath = paths.slice(i + j).join(keySeparator);
      if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
      return void 0;
    }
    current = current[paths[i]];
  }
  return current;
}
function getCleanedCode(code) {
  if (code && code.indexOf("_") > 0) return code.replace("_", "-");
  return code;
}
var ResourceStore = class extends EventEmitter {
  constructor(data) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super();
    this.data = data || {};
    this.options = options2;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    if (this.options.ignoreJSONStructure === void 0) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  }
  removeNamespaces(ns) {
    const index = this.options.ns.indexOf(ns);
    if (index > -1) {
      this.options.ns.splice(index, 1);
    }
  }
  getResource(lng, ns, key) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options2.ignoreJSONStructure !== void 0 ? options2.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path = [lng, ns];
    if (key && typeof key !== "string") path = path.concat(key);
    if (key && typeof key === "string") path = path.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf(".") > -1) {
      path = lng.split(".");
    }
    const result = getPath(this.data, path);
    if (result || !ignoreJSONStructure || typeof key !== "string") return result;
    return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
  }
  addResource(lng, ns, key, value) {
    let options2 = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: false
    };
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    let path = [lng, ns];
    if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf(".") > -1) {
      path = lng.split(".");
      value = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    setPath(this.data, path, value);
    if (!options2.silent) this.emit("added", lng, ns, key, value);
  }
  addResources(lng, ns, resources) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: false
    };
    for (const m in resources) {
      if (typeof resources[m] === "string" || Object.prototype.toString.apply(resources[m]) === "[object Array]") this.addResource(lng, ns, m, resources[m], {
        silent: true
      });
    }
    if (!options2.silent) this.emit("added", lng, ns, resources);
  }
  addResourceBundle(lng, ns, resources, deep, overwrite) {
    let options2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: false
    };
    let path = [lng, ns];
    if (lng.indexOf(".") > -1) {
      path = lng.split(".");
      deep = resources;
      resources = ns;
      ns = path[1];
    }
    this.addNamespaces(ns);
    let pack = getPath(this.data, path) || {};
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path, pack);
    if (!options2.silent) this.emit("added", lng, ns, resources);
  }
  removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);
    this.emit("removed", lng, ns);
  }
  hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== void 0;
  }
  getResourceBundle(lng, ns) {
    if (!ns) ns = this.options.defaultNS;
    if (this.options.compatibilityAPI === "v1") return {
      ...{},
      ...this.getResource(lng, ns)
    };
    return this.getResource(lng, ns);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n = data && Object.keys(data) || [];
    return !!n.find((v) => data[v] && Object.keys(data[v]).length > 0);
  }
  toJSON() {
    return this.data;
  }
};
var postProcessor = {
  processors: {},
  addPostProcessor(module2) {
    this.processors[module2.name] = module2;
  },
  handle(processors, value, key, options2, translator) {
    processors.forEach((processor) => {
      if (this.processors[processor]) value = this.processors[processor].process(value, key, options2, translator);
    });
    return value;
  }
};
var checkedLoadedFor = {};
var Translator = class _Translator extends EventEmitter {
  constructor(services) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super();
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, this);
    this.options = options2;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    this.logger = baseLogger.create("translator");
  }
  changeLanguage(lng) {
    if (lng) this.language = lng;
  }
  exists(key) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (key === void 0 || key === null) {
      return false;
    }
    const resolved = this.resolve(key, options2);
    return resolved && resolved.res !== void 0;
  }
  extractFromKey(key, options2) {
    let nsSeparator = options2.nsSeparator !== void 0 ? options2.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === void 0) nsSeparator = ":";
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    let namespaces = options2.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options2.keySeparator && !this.options.userDefinedNsSeparator && !options2.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m = key.match(this.interpolator.nestingRegexp);
      if (m && m.length > 0) {
        return {
          key,
          namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    if (typeof namespaces === "string") namespaces = [namespaces];
    return {
      key,
      namespaces
    };
  }
  translate(keys2, options2, lastKey) {
    if (typeof options2 !== "object" && this.options.overloadTranslationOptionHandler) {
      options2 = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof options2 === "object") options2 = {
      ...options2
    };
    if (!options2) options2 = {};
    if (keys2 === void 0 || keys2 === null) return "";
    if (!Array.isArray(keys2)) keys2 = [String(keys2)];
    const returnDetails = options2.returnDetails !== void 0 ? options2.returnDetails : this.options.returnDetails;
    const keySeparator = options2.keySeparator !== void 0 ? options2.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys2[keys2.length - 1], options2);
    const namespace = namespaces[namespaces.length - 1];
    const lng = options2.lng || this.language;
    const appendNamespaceToCIMode = options2.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (lng && lng.toLowerCase() === "cimode") {
      if (appendNamespaceToCIMode) {
        const nsSeparator = options2.nsSeparator || this.options.nsSeparator;
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace
        };
      }
      return key;
    }
    const resolved = this.resolve(keys2, options2);
    let res = resolved && resolved.res;
    const resUsedKey = resolved && resolved.usedKey || key;
    const resExactUsedKey = resolved && resolved.exactUsedKey || key;
    const resType = Object.prototype.toString.apply(res);
    const noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
    const joinArrays = options2.joinArrays !== void 0 ? options2.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && resType === "[object Array]")) {
      if (!options2.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        }
        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
          ...options2,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r;
          return resolved;
        }
        return r;
      }
      if (keySeparator) {
        const resTypeIsArray = resType === "[object Array]";
        const copy2 = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m in res) {
          if (Object.prototype.hasOwnProperty.call(res, m)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m}`;
            copy2[m] = this.translate(deepKey, {
              ...options2,
              ...{
                joinArrays: false,
                ns: namespaces
              }
            });
            if (copy2[m] === deepKey) copy2[m] = res[m];
          }
        }
        res = copy2;
      }
    } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && resType === "[object Array]") {
      res = res.join(joinArrays);
      if (res) res = this.extendTranslation(res, keys2, options2, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      const needsPluralHandling = options2.count !== void 0 && typeof options2.count !== "string";
      const hasDefaultValue = _Translator.hasDefaultValue(options2);
      const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options2.count, options2) : "";
      const defaultValueSuffixOrdinalFallback = options2.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options2.count, {
        ordinal: false
      }) : "";
      const defaultValue = options2[`defaultValue${defaultValueSuffix}`] || options2[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options2.defaultValue;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = options2.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...options2,
            keySeparator: false
          });
          if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options2.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
          for (let i = 0; i < fallbackLngs.length; i++) {
            lngs.push(fallbackLngs[i]);
          }
        } else if (this.options.saveMissingTo === "all") {
          lngs = this.languageUtils.toResolveHierarchy(options2.lng || this.language);
        } else {
          lngs.push(options2.lng || this.language);
        }
        const send = (l, k, specificDefaultValue) => {
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options2);
          } else if (this.backendConnector && this.backendConnector.saveMissing) {
            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options2);
          }
          this.emit("missingKey", l, namespace, k, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach((language) => {
              this.pluralResolver.getSuffixes(language, options2).forEach((suffix) => {
                send([language], key + suffix, options2[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys2, options2, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        if (this.options.compatibilityAPI !== "v1") {
          res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : void 0);
        } else {
          res = this.options.parseMissingKeyHandler(res);
        }
      }
    }
    if (returnDetails) {
      resolved.res = res;
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, options2, resolved, lastKey) {
    var _this = this;
    if (this.i18nFormat && this.i18nFormat.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...options2
      }, options2.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!options2.skipInterpolation) {
      if (options2.interpolation) this.interpolator.init({
        ...options2,
        ...{
          interpolation: {
            ...this.options.interpolation,
            ...options2.interpolation
          }
        }
      });
      const skipOnVariables = typeof res === "string" && (options2 && options2.interpolation && options2.interpolation.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = options2.replace && typeof options2.replace !== "string" ? options2.replace : options2;
      if (this.options.interpolation.defaultVariables) data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
      res = this.interpolator.interpolate(res, data, options2.lng || this.language, options2);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft) options2.nest = false;
      }
      if (!options2.lng && this.options.compatibilityAPI !== "v1" && resolved && resolved.res) options2.lng = resolved.usedLng;
      if (options2.nest !== false) res = this.interpolator.nest(res, function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (lastKey && lastKey[0] === args[0] && !options2.context) {
          _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
          return null;
        }
        return _this.translate(...args, key);
      }, options2);
      if (options2.interpolation) this.interpolator.reset();
    }
    const postProcess = options2.postProcess || this.options.postProcess;
    const postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
    if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options2.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: resolved,
        ...options2
      } : options2, this);
    }
    return res;
  }
  resolve(keys2) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (typeof keys2 === "string") keys2 = [keys2];
    keys2.forEach((k) => {
      if (this.isValidLookup(found)) return;
      const extracted = this.extractFromKey(k, options2);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = options2.count !== void 0 && typeof options2.count !== "string";
      const needsZeroSuffixLookup = needsPluralHandling && !options2.ordinal && options2.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const needsContextHandling = options2.context !== void 0 && (typeof options2.context === "string" || typeof options2.context === "number") && options2.context !== "";
      const codes = options2.lngs ? options2.lngs : this.languageUtils.toResolveHierarchy(options2.lng || this.language, options2.fallbackLng);
      namespaces.forEach((ns) => {
        if (this.isValidLookup(found)) return;
        usedNS = ns;
        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
          checkedLoadedFor[`${codes[0]}-${ns}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes.join(", ")}" won't get resolved as namespace "${usedNS}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        }
        codes.forEach((code) => {
          if (this.isValidLookup(found)) return;
          usedLng = code;
          const finalKeys = [key];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options2);
          } else {
            let pluralSuffix;
            if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options2.count, options2);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              finalKeys.push(key + pluralSuffix);
              if (options2.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator}${options2.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                finalKeys.push(contextKey + pluralSuffix);
                if (options2.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code, ns, possibleKey, options2);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
  }
  getResource(code, ns, key) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options2);
    return this.resourceStore.getResource(code, ns, key, options2);
  }
  static hasDefaultValue(options2) {
    const prefix = "defaultValue";
    for (const option in options2) {
      if (Object.prototype.hasOwnProperty.call(options2, option) && prefix === option.substring(0, prefix.length) && void 0 !== options2[option]) {
        return true;
      }
    }
    return false;
  }
};
function capitalize(string3) {
  return string3.charAt(0).toUpperCase() + string3.slice(1);
}
var LanguageUtil = class {
  constructor(options2) {
    this.options = options2;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  getScriptPartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf("-") < 0) return null;
    const p = code.split("-");
    if (p.length === 2) return null;
    p.pop();
    if (p[p.length - 1].toLowerCase() === "x") return null;
    return this.formatLanguageCode(p.join("-"));
  }
  getLanguagePartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf("-") < 0) return code;
    const p = code.split("-");
    return this.formatLanguageCode(p[0]);
  }
  formatLanguageCode(code) {
    if (typeof code === "string" && code.indexOf("-") > -1) {
      const specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
      let p = code.split("-");
      if (this.options.lowerCaseLng) {
        p = p.map((part) => part.toLowerCase());
      } else if (p.length === 2) {
        p[0] = p[0].toLowerCase();
        p[1] = p[1].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
      } else if (p.length === 3) {
        p[0] = p[0].toLowerCase();
        if (p[1].length === 2) p[1] = p[1].toUpperCase();
        if (p[0] !== "sgn" && p[2].length === 2) p[2] = p[2].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
        if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
      }
      return p.join("-");
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
  }
  isSupportedCode(code) {
    if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
  }
  getBestMatchFromCodes(codes) {
    if (!codes) return null;
    let found;
    codes.forEach((code) => {
      if (found) return;
      const cleanedLng = this.formatLanguageCode(code);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes.forEach((code) => {
        if (found) return;
        const lngOnly = this.getLanguagePartFromCode(code);
        if (this.isSupportedCode(lngOnly)) return found = lngOnly;
        found = this.options.supportedLngs.find((supportedLng) => {
          if (supportedLng === lngOnly) return supportedLng;
          if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0) return;
          if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
        });
      });
    }
    if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code) {
    if (!fallbacks) return [];
    if (typeof fallbacks === "function") fallbacks = fallbacks(code);
    if (typeof fallbacks === "string") fallbacks = [fallbacks];
    if (Object.prototype.toString.apply(fallbacks) === "[object Array]") return fallbacks;
    if (!code) return fallbacks.default || [];
    let found = fallbacks[code];
    if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found) found = fallbacks[this.formatLanguageCode(code)];
    if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
    if (!found) found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
    const codes = [];
    const addCode = (c) => {
      if (!c) return;
      if (this.isSupportedCode(c)) {
        codes.push(c);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
      }
    };
    if (typeof code === "string" && (code.indexOf("-") > -1 || code.indexOf("_") > -1)) {
      if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code));
      if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code));
      if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code));
    } else if (typeof code === "string") {
      addCode(this.formatLanguageCode(code));
    }
    fallbackCodes.forEach((fc) => {
      if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
    });
    return codes;
  }
};
var sets = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: function(n) {
    return Number(n > 1);
  },
  2: function(n) {
    return Number(n != 1);
  },
  3: function(n) {
    return 0;
  },
  4: function(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  5: function(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
  },
  6: function(n) {
    return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
  },
  7: function(n) {
    return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  8: function(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
  },
  9: function(n) {
    return Number(n >= 2);
  },
  10: function(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
  },
  11: function(n) {
    return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
  },
  12: function(n) {
    return Number(n % 10 != 1 || n % 100 == 11);
  },
  13: function(n) {
    return Number(n !== 0);
  },
  14: function(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
  },
  15: function(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
  },
  16: function(n) {
    return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
  },
  17: function(n) {
    return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
  },
  18: function(n) {
    return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
  },
  19: function(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
  },
  20: function(n) {
    return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
  },
  21: function(n) {
    return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
  },
  22: function(n) {
    return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
  }
};
var nonIntlVersions = ["v1", "v2", "v3"];
var intlVersions = ["v4"];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function createRules() {
  const rules = {};
  sets.forEach((set2) => {
    set2.lngs.forEach((l) => {
      rules[l] = {
        numbers: set2.nr,
        plurals: _rulesPluralsTypes[set2.fc]
      };
    });
  });
  return rules;
}
var PluralResolver = class {
  constructor(languageUtils) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = languageUtils;
    this.options = options2;
    this.logger = baseLogger.create("pluralResolver");
    if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === "undefined" || !Intl.PluralRules)) {
      this.options.compatibilityJSON = "v3";
      this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
    }
    this.rules = createRules();
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  getRule(code) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (this.shouldUseIntlApi()) {
      try {
        return new Intl.PluralRules(getCleanedCode(code), {
          type: options2.ordinal ? "ordinal" : "cardinal"
        });
      } catch {
        return;
      }
    }
    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
  }
  needsPlural(code) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const rule = this.getRule(code, options2);
    if (this.shouldUseIntlApi()) {
      return rule && rule.resolvedOptions().pluralCategories.length > 1;
    }
    return rule && rule.numbers.length > 1;
  }
  getPluralFormsOfKey(code, key) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(code, options2).map((suffix) => `${key}${suffix}`);
  }
  getSuffixes(code) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const rule = this.getRule(code, options2);
    if (!rule) {
      return [];
    }
    if (this.shouldUseIntlApi()) {
      return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options2.ordinal ? `ordinal${this.options.prepend}` : ""}${pluralCategory}`);
    }
    return rule.numbers.map((number2) => this.getSuffix(code, number2, options2));
  }
  getSuffix(code, count) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const rule = this.getRule(code, options2);
    if (rule) {
      if (this.shouldUseIntlApi()) {
        return `${this.options.prepend}${options2.ordinal ? `ordinal${this.options.prepend}` : ""}${rule.select(count)}`;
      }
      return this.getSuffixRetroCompatible(rule, count);
    }
    this.logger.warn(`no plural rule found for: ${code}`);
    return "";
  }
  getSuffixRetroCompatible(rule, count) {
    const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
    let suffix = rule.numbers[idx];
    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      if (suffix === 2) {
        suffix = "plural";
      } else if (suffix === 1) {
        suffix = "";
      }
    }
    const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
    if (this.options.compatibilityJSON === "v1") {
      if (suffix === 1) return "";
      if (typeof suffix === "number") return `_plural_${suffix.toString()}`;
      return returnSuffix();
    } else if (this.options.compatibilityJSON === "v2") {
      return returnSuffix();
    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      return returnSuffix();
    }
    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
  }
  shouldUseIntlApi() {
    return !nonIntlVersions.includes(this.options.compatibilityJSON);
  }
};
function deepFindWithDefaults(data, defaultData, key) {
  let keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  let path = getPathWithDefaults(data, defaultData, key);
  if (!path && ignoreJSONStructure && typeof key === "string") {
    path = deepFind(data, key, keySeparator);
    if (path === void 0) path = deepFind(defaultData, key, keySeparator);
  }
  return path;
}
var Interpolator = class {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = baseLogger.create("interpolator");
    this.options = options2;
    this.format = options2.interpolation && options2.interpolation.format || ((value) => value);
    this.init(options2);
  }
  init() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!options2.interpolation) options2.interpolation = {
      escapeValue: true
    };
    const iOpts = options2.interpolation;
    this.escape = iOpts.escape !== void 0 ? iOpts.escape : escape;
    this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
    this.useRawValueToEscape = iOpts.useRawValueToEscape !== void 0 ? iOpts.useRawValueToEscape : false;
    this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
    this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
    this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
    this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
    this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape("$t(");
    this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(")");
    this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ",";
    this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1e3;
    this.alwaysFormat = iOpts.alwaysFormat !== void 0 ? iOpts.alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options) this.init(this.options);
  }
  resetRegExp() {
    const regexpStr = `${this.prefix}(.+?)${this.suffix}`;
    this.regexp = new RegExp(regexpStr, "g");
    const regexpUnescapeStr = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;
    this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
    const nestingRegexpStr = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;
    this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
  }
  interpolate(str, data, lng, options2) {
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    function regexSafe(val) {
      return val.replace(/\$/g, "$$$$");
    }
    const handleFormat = (key) => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path, void 0, lng, {
          ...options2,
          ...data,
          interpolationkey: key
        }) : path;
      }
      const p = key.split(this.formatSeparator);
      const k = p.shift().trim();
      const f = p.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
        ...options2,
        ...data,
        interpolationkey: k
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = options2 && options2.missingInterpolationHandler || this.options.missingInterpolationHandler;
    const skipOnVariables = options2 && options2.interpolation && options2.interpolation.skipOnVariables !== void 0 ? options2.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: (val) => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach((todo) => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === void 0) {
          if (typeof missingInterpolationHandler === "function") {
            const temp = missingInterpolationHandler(str, match, options2);
            value = typeof temp === "string" ? temp : "";
          } else if (options2 && Object.prototype.hasOwnProperty.call(options2, matchedVar)) {
            value = "";
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = "";
          }
        } else if (typeof value !== "string" && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let match;
    let value;
    let clonedOptions;
    function handleHasOptions(key, inheritedOptions) {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0) return key;
      const c = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c[1]}`;
      key = c[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions) clonedOptions = {
          ...inheritedOptions,
          ...clonedOptions
        };
      } catch (e2) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e2);
        return `${key}${sep}${optionsString}`;
      }
      delete clonedOptions.defaultValue;
      return key;
    }
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options2
      };
      clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== "string" ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      let doReduce = false;
      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
        const r = match[1].split(this.formatSeparator).map((elem) => elem.trim());
        match[1] = r.shift();
        formatters = r;
        doReduce = true;
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && typeof value !== "string") return value;
      if (typeof value !== "string") value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = "";
      }
      if (doReduce) {
        value = formatters.reduce((v, f) => this.format(v, f, options2.lng, {
          ...options2,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
};
function parseFormatStr(formatStr) {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    const p = formatStr.split("(");
    formatName = p[0].toLowerCase().trim();
    const optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency) formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range) formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(";");
      opts.forEach((opt) => {
        if (!opt) return;
        const [key, ...rest] = opt.split(":");
        const val = rest.join(":").trim().replace(/^'+|'+$/g, "");
        if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
        if (val === "false") formatOptions[key.trim()] = false;
        if (val === "true") formatOptions[key.trim()] = true;
        if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
}
function createCachedFormatter(fn) {
  const cache = {};
  return function invokeFormatter(val, lng, options2) {
    const key = lng + JSON.stringify(options2);
    let formatter = cache[key];
    if (!formatter) {
      formatter = fn(getCleanedCode(lng), options2);
      cache[key] = formatter;
    }
    return formatter(val);
  };
}
var Formatter = class {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = baseLogger.create("formatter");
    this.options = options2;
    this.formats = {
      number: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      currency: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: "currency"
        });
        return (val) => formatter.format(val);
      }),
      datetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      relativetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val, opt.range || "day");
      }),
      list: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      })
    };
    this.init(options2);
  }
  init(services) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    const iOpts = options2.interpolation;
    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
  }
  add(name, fc) {
    this.formats[name.toLowerCase().trim()] = fc;
  }
  addCached(name, fc) {
    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const formats = format.split(this.formatSeparator);
    const result = formats.reduce((mem, f) => {
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = options2 && options2.formatParams && options2.formatParams[options2.interpolationkey] || {};
          const l = valOptions.locale || valOptions.lng || options2.locale || options2.lng || lng;
          formatted = this.formats[formatName](mem, l, {
            ...formatOptions,
            ...options2,
            ...valOptions
          });
        } catch (error) {
          this.logger.warn(error);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
};
function removePending(q2, name) {
  if (q2.pending[name] !== void 0) {
    delete q2.pending[name];
    q2.pendingCount--;
  }
}
var Connector = class extends EventEmitter {
  constructor(backend, store2, services) {
    let options2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super();
    this.backend = backend;
    this.store = store2;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options2;
    this.logger = baseLogger.create("backendConnector");
    this.waitingReads = [];
    this.maxParallelReads = options2.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options2.maxRetries >= 0 ? options2.maxRetries : 5;
    this.retryTimeout = options2.retryTimeout >= 1 ? options2.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    if (this.backend && this.backend.init) {
      this.backend.init(services, options2.backend, options2);
    }
  }
  queueLoad(languages, namespaces, options2, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach((lng) => {
      let hasAllNamespaces = true;
      namespaces.forEach((ns) => {
        const name = `${lng}|${ns}`;
        if (!options2.reload && this.store.hasResourceBundle(lng, ns)) {
          this.state[name] = 2;
        } else if (this.state[name] < 0) ;
        else if (this.state[name] === 1) {
          if (pending[name] === void 0) pending[name] = true;
        } else {
          this.state[name] = 1;
          hasAllNamespaces = false;
          if (pending[name] === void 0) pending[name] = true;
          if (toLoad[name] === void 0) toLoad[name] = true;
          if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
        }
      });
      if (!hasAllNamespaces) toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name, err, data) {
    const s = name.split("|");
    const lng = s[0];
    const ns = s[1];
    if (err) this.emit("failedLoading", lng, ns, err);
    if (data) {
      this.store.addResourceBundle(lng, ns, data);
    }
    this.state[name] = err ? -1 : 2;
    const loaded = {};
    this.queue.forEach((q2) => {
      pushPath(q2.loaded, [lng], ns);
      removePending(q2, name);
      if (err) q2.errors.push(err);
      if (q2.pendingCount === 0 && !q2.done) {
        Object.keys(q2.loaded).forEach((l) => {
          if (!loaded[l]) loaded[l] = {};
          const loadedKeys = q2.loaded[l];
          if (loadedKeys.length) {
            loadedKeys.forEach((n) => {
              if (loaded[l][n] === void 0) loaded[l][n] = true;
            });
          }
        });
        q2.done = true;
        if (q2.errors.length) {
          q2.callback(q2.errors);
        } else {
          q2.callback();
        }
      }
    });
    this.emit("loaded", loaded);
    this.queue = this.queue.filter((q2) => !q2.done);
  }
  read(lng, ns, fcName) {
    let tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    let wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
    let callback = arguments.length > 5 ? arguments[5] : void 0;
    if (!lng.length) return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r = fc(lng, ns);
        if (r && typeof r.then === "function") {
          r.then((data) => resolver(null, data)).catch(resolver);
        } else {
          resolver(null, r);
        }
      } catch (err) {
        resolver(err);
      }
      return;
    }
    return fc(lng, ns, resolver);
  }
  prepareLoading(languages, namespaces) {
    let options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let callback = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend) {
      this.logger.warn("No backend was added via i18next.use. Will not load resources.");
      return callback && callback();
    }
    if (typeof languages === "string") languages = this.languageUtils.toResolveHierarchy(languages);
    if (typeof namespaces === "string") namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options2, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length) callback();
      return null;
    }
    toLoad.toLoad.forEach((name) => {
      this.loadOne(name);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name) {
    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const s = name.split("|");
    const lng = s[0];
    const ns = s[1];
    this.read(lng, ns, "read", void 0, void 0, (err, data) => {
      if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
      if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
      this.loaded(name, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
    let options2 = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    let clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (key === void 0 || key === null || key === "") return;
    if (this.backend && this.backend.create) {
      const opts = {
        ...options2,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r;
          if (fc.length === 5) {
            r = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r = fc(languages, namespace, key, fallbackValue);
          }
          if (r && typeof r.then === "function") {
            r.then((data) => clb(null, data)).catch(clb);
          } else {
            clb(null, r);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0]) return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
};
function get() {
  return {
    debug: false,
    initImmediate: true,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: false,
    supportedLngs: false,
    nonExplicitSupportedLngs: false,
    load: "all",
    preload: false,
    simplifyPluralSuffix: true,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: false,
    saveMissing: false,
    updateMissing: false,
    saveMissingTo: "fallback",
    saveMissingPlurals: true,
    missingKeyHandler: false,
    missingInterpolationHandler: false,
    postProcess: false,
    postProcessPassResolved: false,
    returnNull: false,
    returnEmptyString: true,
    returnObjects: false,
    joinArrays: false,
    returnedObjectHandler: false,
    parseMissingKeyHandler: false,
    appendNamespaceToMissingKey: false,
    appendNamespaceToCIMode: false,
    overloadTranslationOptionHandler: function handle(args) {
      let ret = {};
      if (typeof args[1] === "object") ret = args[1];
      if (typeof args[1] === "string") ret.defaultValue = args[1];
      if (typeof args[2] === "string") ret.tDescription = args[2];
      if (typeof args[2] === "object" || typeof args[3] === "object") {
        const options2 = args[3] || args[2];
        Object.keys(options2).forEach((key) => {
          ret[key] = options2[key];
        });
      }
      return ret;
    },
    interpolation: {
      escapeValue: true,
      format: (value, format, lng, options2) => value,
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: true
    }
  };
}
function transformOptions(options2) {
  if (typeof options2.ns === "string") options2.ns = [options2.ns];
  if (typeof options2.fallbackLng === "string") options2.fallbackLng = [options2.fallbackLng];
  if (typeof options2.fallbackNS === "string") options2.fallbackNS = [options2.fallbackNS];
  if (options2.supportedLngs && options2.supportedLngs.indexOf("cimode") < 0) {
    options2.supportedLngs = options2.supportedLngs.concat(["cimode"]);
  }
  return options2;
}
function noop2() {
}
function bindMemberFunctions(inst) {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach((mem) => {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
}
var I18n = class _I18n extends EventEmitter {
  constructor() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    super();
    this.options = transformOptions(options2);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options2.isClone) {
      if (!this.options.initImmediate) {
        this.init(options2, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options2, callback);
      }, 0);
    }
  }
  init() {
    var _this = this;
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    if (!options2.defaultNS && options2.defaultNS !== false && options2.ns) {
      if (typeof options2.ns === "string") {
        options2.defaultNS = options2.ns;
      } else if (options2.ns.indexOf("translation") < 0) {
        options2.defaultNS = options2.ns[0];
      }
    }
    const defOpts = get();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options2)
    };
    if (this.options.compatibilityAPI !== "v1") {
      this.options.interpolation = {
        ...defOpts.interpolation,
        ...this.options.interpolation
      };
    }
    if (options2.keySeparator !== void 0) {
      this.options.userDefinedKeySeparator = options2.keySeparator;
    }
    if (options2.nsSeparator !== void 0) {
      this.options.userDefinedNsSeparator = options2.nsSeparator;
    }
    function createClassOnDemand(ClassOrObject) {
      if (!ClassOrObject) return null;
      if (typeof ClassOrObject === "function") return new ClassOrObject();
      return ClassOrObject;
    }
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else if (typeof Intl !== "undefined") {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s = this.services;
      s.logger = baseLogger;
      s.resourceStore = this.store;
      s.languageUtils = lu;
      s.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s.formatter = createClassOnDemand(formatter);
        s.formatter.init(s, this.options);
        this.options.interpolation.format = s.formatter.format.bind(s.formatter);
      }
      s.interpolator = new Interpolator(this.options);
      s.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
      s.backendConnector.on("*", function(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s.i18nFormat.init) s.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on("*", function(event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        _this.emit(event, ...args);
      });
      this.modules.external.forEach((m) => {
        if (m.init) m.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback) callback = noop2;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes.length > 0 && codes[0] !== "dev") this.options.lng = codes[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn("init: no languageDetector is used and no lng is defined");
    }
    const storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
    storeApi.forEach((fcName) => {
      this[fcName] = function() {
        return _this.store[fcName](...arguments);
      };
    });
    const storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
    storeApiChained.forEach((fcName) => {
      this[fcName] = function() {
        _this.store[fcName](...arguments);
        return _this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t2) => {
        if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn("init: i18next is already initialized. You should call init just once!");
        this.isInitialized = true;
        if (!this.options.isClone) this.logger.log("initialized", this.options);
        this.emit("initialized", this.options);
        deferred.resolve(t2);
        callback(err, t2);
      };
      if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized) return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initImmediate) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language) {
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop2;
    let usedCallback = callback;
    const usedLng = typeof language === "string" ? language : this.language;
    if (typeof language === "function") usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if (usedLng && usedLng.toLowerCase() === "cimode") return usedCallback();
      const toLoad = [];
      const append = (lng) => {
        if (!lng) return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach((l) => {
          if (toLoad.indexOf(l) < 0) toLoad.push(l);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach((l) => append(l));
      } else {
        append(usedLng);
      }
      if (this.options.preload) {
        this.options.preload.forEach((l) => append(l));
      }
      this.services.backendConnector.load(toLoad, this.options.ns, (e2) => {
        if (!e2 && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
        usedCallback(e2);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns, callback) {
    const deferred = defer();
    if (!lngs) lngs = this.languages;
    if (!ns) ns = this.options.ns;
    if (!callback) callback = noop2;
    this.services.backendConnector.reload(lngs, ns, (err) => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module2) {
    if (!module2) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!module2.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    if (module2.type === "backend") {
      this.modules.backend = module2;
    }
    if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
      this.modules.logger = module2;
    }
    if (module2.type === "languageDetector") {
      this.modules.languageDetector = module2;
    }
    if (module2.type === "i18nFormat") {
      this.modules.i18nFormat = module2;
    }
    if (module2.type === "postProcessor") {
      postProcessor.addPostProcessor(module2);
    }
    if (module2.type === "formatter") {
      this.modules.formatter = module2;
    }
    if (module2.type === "3rdParty") {
      this.modules.external.push(module2);
    }
    return this;
  }
  setResolvedLanguage(l) {
    if (!l || !this.languages) return;
    if (["cimode", "dev"].indexOf(l) > -1) return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
  }
  changeLanguage(lng, callback) {
    var _this2 = this;
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit("languageChanging", lng);
    const setLngProps = (l) => {
      this.language = l;
      this.languages = this.services.languageUtils.toResolveHierarchy(l);
      this.resolvedLanguage = void 0;
      this.setResolvedLanguage(l);
    };
    const done = (err, l) => {
      if (l) {
        setLngProps(l);
        this.translator.changeLanguage(l);
        this.isLanguageChangingTo = void 0;
        this.emit("languageChanged", l);
        this.logger.log("languageChanged", l);
      } else {
        this.isLanguageChangingTo = void 0;
      }
      deferred.resolve(function() {
        return _this2.t(...arguments);
      });
      if (callback) callback(err, function() {
        return _this2.t(...arguments);
      });
    };
    const setLng = (lngs) => {
      if (!lng && !lngs && this.services.languageDetector) lngs = [];
      const l = typeof lngs === "string" ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
      if (l) {
        if (!this.language) {
          setLngProps(l);
        }
        if (!this.translator.language) this.translator.changeLanguage(l);
        if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l);
      }
      this.loadResources(l, (err) => {
        done(err, l);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns, keyPrefix) {
    var _this3 = this;
    const fixedT = function(key, opts) {
      let options2;
      if (typeof opts !== "object") {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          rest[_key3 - 2] = arguments[_key3];
        }
        options2 = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        options2 = {
          ...opts
        };
      }
      options2.lng = options2.lng || fixedT.lng;
      options2.lngs = options2.lngs || fixedT.lngs;
      options2.ns = options2.ns || fixedT.ns;
      options2.keyPrefix = options2.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = _this3.options.keySeparator || ".";
      let resultKey;
      if (options2.keyPrefix && Array.isArray(key)) {
        resultKey = key.map((k) => `${options2.keyPrefix}${keySeparator}${k}`);
      } else {
        resultKey = options2.keyPrefix ? `${options2.keyPrefix}${keySeparator}${key}` : key;
      }
      return _this3.t(resultKey, options2);
    };
    if (typeof lng === "string") {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  }
  hasLoadedNamespace(ns) {
    let options2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized) {
      this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
      return false;
    }
    const lng = options2.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === "cimode") return true;
    const loadNotPending = (l, n) => {
      const loadState = this.services.backendConnector.state[`${l}|${n}`];
      return loadState === -1 || loadState === 2;
    };
    if (options2.precheck) {
      const preResult = options2.precheck(this, loadNotPending);
      if (preResult !== void 0) return preResult;
    }
    if (this.hasResourceBundle(lng, ns)) return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
    return false;
  }
  loadNamespaces(ns, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback) callback();
      return Promise.resolve();
    }
    if (typeof ns === "string") ns = [ns];
    ns.forEach((n) => {
      if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);
    });
    this.loadResources((err) => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (typeof lngs === "string") lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0);
    if (!newLngs.length) {
      if (callback) callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources((err) => {
      deferred.resolve();
      if (callback) callback(err);
    });
    return deferred;
  }
  dir(lng) {
    if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
    if (!lng) return "rtl";
    const rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
    const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    return new _I18n(options2, callback);
  }
  cloneInstance() {
    let options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop2;
    const forkResourceStore = options2.forkResourceStore;
    if (forkResourceStore) delete options2.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options2,
      ...{
        isClone: true
      }
    };
    const clone3 = new _I18n(mergedOptions);
    if (options2.debug !== void 0 || options2.prefix !== void 0) {
      clone3.logger = clone3.logger.clone(options2);
    }
    const membersToCopy = ["store", "services", "language"];
    membersToCopy.forEach((m) => {
      clone3[m] = this[m];
    });
    clone3.services = {
      ...this.services
    };
    clone3.services.utils = {
      hasLoadedNamespace: clone3.hasLoadedNamespace.bind(clone3)
    };
    if (forkResourceStore) {
      clone3.store = new ResourceStore(this.store.data, mergedOptions);
      clone3.services.resourceStore = clone3.store;
    }
    clone3.translator = new Translator(clone3.services, mergedOptions);
    clone3.translator.on("*", function(event) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      clone3.emit(event, ...args);
    });
    clone3.init(mergedOptions, callback);
    clone3.translator.options = mergedOptions;
    clone3.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone3.hasLoadedNamespace.bind(clone3)
    };
    return clone3;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
};
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var dir = instance.dir;
var init = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t = instance.t;
var exists = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace2 = instance.hasLoadedNamespace;
var loadNamespaces2 = instance.loadNamespaces;
var loadLanguages2 = instance.loadLanguages;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/locale/en/translation.js
var translation = {
  /**
   * @description copy keys for account exists view
   * @default
   * {
        connect: 'Connect with {{socialOauth}}',
        description: 'It looks like an account already exists using',
        title: 'Account already exists',
        trail_message_email: '. Please log in with your email.',
        trail_message_social: 'through {{socialOauth}}',
      }
   */
  dyn_sandbox_maximum_threshold: {
    title: "Max User Limit Reached",
    description: "Your sandbox environment has reached your 100 MAU limit. To test with new users, delete existing users.",
    button: "Back"
  },
  dyn_account_exists: {
    connect: "Connect with {{socialOauth}}",
    description_email: "It looks like an account already exists using",
    description_social: "To restore your account to the right place, we need you to log in again.",
    title: "Re-Authentication Required",
    trail_message_email: ". Please log in with your email.",
    trail_message_social: "through {{socialOauth}}"
  },
  /**
   * @description copy keys for active wallet information (address, network, etc)
   * @default
   * {
        testnet_warning: 'A testnet network has been selected. Please only use testnet funds or they will be lost.',
        ordinals_address: 'Ordinals address',
        payment_address: 'Payment address',
     }
   */
  dyn_active_wallet_info: {
    testnet_warning: "A testnet network has been selected. Please only use testnet funds or they will be lost.",
    ordinals_address: "Ordinals address",
    payment_address: "Payment address"
  },
  /**
   * @description copy keys for bridge view
   * @default
   * {
        summary_view: {
          connection_succeed: 'Congratulations on connecting both your {{firstBlockchainName}} and {{secondBlockchainName}} wallets',
          title: 'Welcome to {{appName}}',
        },
        welcome_view: {
          button: 'Get started',
          description: 'You’ll need to connect both your {{firstBlockchainName}} and {{secondBlockchainName}} wallets to get started',
          title: 'Connect to {{appName}}',
        },
        widget: {
          address: 'Copy wallet address',
          connect: 'Connect wallet',
          connect_with_network: 'Connect {{blockchainName}} wallet',
          copy: {
            address: 'Copy wallet address',
            ens: 'Copy ENS',
          },
          disconnect: 'Disconnect',
          edit_profile: 'Edit profile',
          wallet_network: '{{networkName}} wallet',
        },
      }
   */
  dyn_bridge: {
    summary_view: {
      connection_succeed: "Congratulations on connecting both your {{firstBlockchainName}} and {{secondBlockchainName}} wallets",
      title: "Welcome to {{appName}}"
    },
    welcome_view: {
      button: "Get started",
      description: "You’ll need to connect both your {{firstBlockchainName}} and {{secondBlockchainName}} wallets to get started",
      title: "Connect to {{appName}}"
    },
    widget: {
      address: "Copy wallet address",
      connect: "Connect wallet",
      connect_with_network: "Connect {{blockchainName}} wallet",
      copy: {
        address: "Copy wallet address",
        ens: "Copy ENS"
      },
      disconnect: "Disconnect",
      edit_profile: "Edit profile",
      wallet_network: "{{networkName}} wallet"
    }
  },
  /**
   * @description copy keys for Dynamic Captcha
   * @default
   * {
      verify_user_subtitle: 'We need to quickly verify you’re human before we proceed.',
      verify_user_title: "Let's verify you're human",
    }
   */
  dyn_captcha: {
    verify_user_subtitle: "We need to quickly verify you’re human before we proceed.",
    verify_user_title: "Let's verify you're human"
  },
  /**
   * @description copy keys for sanctioned access blocked view
   * @default
   * {
   *  title: 'Access Blocked',
   *  content: 'Logging in is not available to persons in {{jurisdiction}} as you are in a sanctioned jurisdiction.',
   * }
   */
  dyn_access_blocked: {
    title: "Access Blocked",
    content: "Logging in is not available to persons in {{jurisdiction}} as you are in a sanctioned jurisdiction."
  },
  /**
   * @description copy keys for chainalysis blocked wallet view
   * @default
   * {
       title: 'Access denied',
     }
   */
  dyn_chainalysis_blocked_wallet: {
    title: "Access denied"
  },
  /**
   * @description copy keys for collecting user data
   * @default
   * {
      description: 'We need a bit of information to get started',
      fields: {
        alias: {
          label: 'Alias',
        },
        country: {
          label: 'Country',
        },
        email: {
          label: 'Email',
          validation: 'Email is not valid',
        },
        first_name: {
          label: 'First Name',
        },
        job_title: {
          label: 'Job Title',
        },
        last_name: {
          label: 'Last Name',
        },
        phone_number: {
          label: 'Phone number',
          validation: 'Phone number is not valid',
          too_short: 'Phone number is too short',
        },
        policies_consent: {
          label: 'Policies Consent',
        },
        t_shirt_size: {
          label: 'T-Shirt Size',
        },
        team: {
          label: 'Team',
        },
        username: {
          label: 'Username',
          validation: 'Username is not valid',
        },
      },
      greeting: 'Welcome to {{appName}}',
      log_out_button: 'Log out',
      not_supported_network: {
        description: 'Your wallet is not connected to a supported network. Please update before continuing.',
        error_message: 'This network is not available, please update.',
        title: 'Update Network',
      },
      update_email_tooltip:
      'This email is tied to your wallet so cannot be updated',
      update_phone_number_tooltip:
      'This phone number is tied to your wallet so cannot be updated',
      lock_editing_multiple_verified_fields:
      'You can only edit 1 field at a time that requires verification',
    }
   */
  dyn_collect_user_data: {
    description: "We need a bit of information to get started",
    fields: {
      alias: {
        label: "Alias"
      },
      country: {
        label: "Country"
      },
      email: {
        label: "Email",
        validation: "Email is not valid"
      },
      first_name: {
        label: "First Name"
      },
      job_title: {
        label: "Job Title"
      },
      last_name: {
        label: "Last Name"
      },
      phone_number: {
        label: "Phone number",
        validation: "Phone number is not valid",
        too_short: "Phone number is too short"
      },
      policies_consent: {
        label: "Policies Consent"
      },
      t_shirt_size: {
        label: "T-Shirt Size"
      },
      team: {
        label: "Team"
      },
      username: {
        label: "Username",
        validation: "Username is not valid"
      }
    },
    greeting: "Welcome to {{appName}}",
    log_out_button: "Log out",
    not_supported_network: {
      description: "Your wallet is not connected to a supported network. Please update before continuing.",
      error_message: "This network is not available, please update.",
      title: "Update Network"
    },
    update_email_tooltip: "This email is tied to your wallet so cannot be updated",
    update_phone_number_tooltip: "This phone number is tied to your wallet so cannot be updated",
    lock_editing_multiple_verified_fields: "You can only edit 1 field at a time that requires verification"
  },
  /**
   * @description copy keys for create password view
   * @default
   * {
      continue: 'Continue',
      create_input: {
        label: 'Create passcode',
        placeholder: 'Create passcode',
      },
      confirm_input: {
        label: 'Confirm passcode',
        placeholder: 'Confirm passcode',
      },
      current_password_input: {
        label: 'Current passcode',
        placeholder: 'Current passcode',
      },
      description:
        "Choose a strong, unique passcode to ensure your account's security and privacy.",
      errors: {
        invalid_current_password: 'Invalid current passcode',
        error_changing_password: 'Error changing passcode',
        new_password_same_as_old: 'New passcode cannot be the same as the old passcode',
        password_mismatch: 'Passcodes do not match',
        user_closed_view: 'User closed the view',
      },
      intro: {
        continue: 'Set up a passcode',
        description: {
          title: 'Add a passcode to protect your account',
          additional_protection: {
            title: 'Passcode Security',
            description:
              'Add a secure passcode to further prevent un-authrized access to your account.',
          },
          restore_access: {
            title: 'Restore Access',
            description:
              'You will be asked to enter it when signing on to a new device.',
          },
        },
        title: 'Add a Passcode',
      },
      logout: 'Log out',
      title: {
        create: 'Create passcode',
        update: 'Create new passcode',
      },
      update_input: {
        label: 'New passcode',
        placeholder: 'New passcode',
      },
    }
   */
  dyn_create_password: {
    continue: "Continue",
    create_input: {
      label: "Create passcode",
      placeholder: "Create passcode"
    },
    confirm_input: {
      label: "Confirm passcode",
      placeholder: "Confirm passcode"
    },
    current_password_input: {
      label: "Current passcode",
      placeholder: "Current passcode"
    },
    description: "Choose a strong, unique passcode to ensure your account's security and privacy.",
    errors: {
      invalid_current_password: "Invalid current passcode",
      error_changing_password: "Error changing passcode",
      new_password_same_as_old: "New passcode cannot be the same as the old passcode",
      password_mismatch: "Passcodes do not match",
      user_closed_view: "User closed the view"
    },
    intro: {
      continue: "Set up a passcode",
      description: {
        title: "Add a passcode to protect your account",
        additional_protection: {
          title: "Passcode Security",
          description: "Add a secure passcode to further prevent un-authrized access to your account."
        },
        restore_access: {
          title: "Restore Access",
          description: "You will be asked to enter it when signing on to a new device."
        }
      },
      title: "Add a Passcode"
    },
    logout: "Log out",
    title: {
      create: "Create passcode",
      update: "Create new passcode"
    },
    update_input: {
      label: "New passcode",
      placeholder: "New passcode"
    }
  },
  /**
   * @description copy keys for creating wallet wallet message
   * @default
   * {
      loading_message: 'Your wallet is being created...',
    }
   */
  dyn_creating_wallet: {
    loading_message: "Your wallet is being created..."
  },
  /**
   * @description copy keys for email verification view after email logging in with magiclink
   * @default
   * {
      description: 'We’ve sent a verification email to',
      note: 'Note: it might take a few seconds to proceed after clicking the link in your email',
      title: 'Confirm your email',
    }
   */
  dyn_email_confirmation: {
    description: "We’ve sent a verification email to",
    note: "Note: it might take a few seconds to proceed after clicking the link in your email",
    title: "Confirm your email"
  },
  /**
   * @description copy keys for email update view
   * @default
   * {
      current_email: 'Your current email address is',
      label: 'Email address',
      send_verification: 'Send Verification Code',
      title: 'Update email',
    }
  */
  dyn_email_update: {
    current_email: "Your current email address is",
    label: "Email address",
    send_verification: "Send Verification Code",
    title: "Update email"
  },
  /**
     * @description copy keys for one-time password verification view after logging in with dynamic email or phone number provider or after kyc verification
     * @default
     * {
        code_not_received: 'Did not receive your code yet?',
        code_sent: 'Code sent',
        description: 'We’ve sent a verification code to',
        log_out_button: 'Log out',
        resend_code: 'Re-send code',
        resend_code_in: 'Re-send code in {{remainingSeconds}}',
        confirm_code: 'Confirm verification code',
        verification_succeeded: 'Verification code confirmed',
        hang_tight: 'Hang tight while we get things ready for you',
  
        email: {
          title: 'Confirm your email',
          complete:
            'Verification complete, the email is now verified to this account.',
        },
        phone_number: {
          title: 'Confirm your phone number',
          edit: 'Edit phone number',
          complete:
            'Verification complete, the phone number is now verified to this account.',
        },
      },
     */
  dyn_otp_verification: {
    code_not_received: "Did not receive your code yet?",
    code_sent: "Code sent",
    description: "We’ve sent a verification code to",
    log_out_button: "Log out",
    resend_code: "Re-send code",
    resend_code_in: "Re-send code in {{remainingSeconds}}",
    confirm_code: "Confirm verification code",
    verification_succeeded: "Verification code confirmed",
    hang_tight: "Hang tight while we get things ready for you",
    email: {
      title: "Confirm your email",
      complete: "Verification complete, the email is now verified to this account."
    },
    phone_number: {
      title: "Confirm your phone number",
      edit: "Edit phone number",
      complete: "Verification complete, the phone number is now verified to this account."
    }
  },
  /**
   * @description copy keys for embedded wallet authenticator choice view
   * @default
   * {
      description:
        'Protect your account and simplify your transaction experience.',
      email: {
        badge: 'Fastest',
        description: ' You will need to renew after {{expiration}} minutes ',
        title: 'Use a one-time code',
      },
      passkey: {
        auth_info: {
          convinience: {
            title: 'Convenient and Fast',
            description:
              'Use Face ID or Touch ID to complete transactions quickly.',
          },
          security: {
            title: 'Increased Security',
            description:
              'Passkeys are encrypted end-to-end on your device or password manager to prevent phishing attempts.',
          },
          add_button: 'Add a passkey',
          start_button: 'Add a passkey',
        },
        no_email_auth_info: {
          convinience: {
            title: 'Simple and Fast',
            description:
              'Works across devices and syncs between devices and browsers.',
          },
          security: {
            title: 'Secured with a bio-metric',
            description: 'Phishing resistant and encrypted.',
          },
          add_button: 'Add passkey',
          start_button: 'Add passkey',
        },
        badge: 'Recommended',
        description:
          'Works across devices & secured with biometric to prevent phishing attempts ',
        title: 'Create new passkey',
        reveal_title: 'Add a passkey',
      },
      skip: 'Not now',
      title: 'Account security',
      need_help_title: 'Problem Signing?',
      need_help_description: 'Select from an option below to complete',
      reveal_title: 'Verification Required',
      reveal_description: 'Choose a verification method.',
    }
   */
  dyn_embedded_authenticator: {
    description: "Protect your account and simplify your transaction experience.",
    email: {
      badge: "Fastest",
      description: " You will need to renew after {{expiration}} minutes ",
      title: "Use a one-time code"
    },
    passkey: {
      auth_info: {
        convinience: {
          title: "Convenient and Fast",
          description: "Use Face ID or Touch ID to complete transactions quickly."
        },
        security: {
          title: "Increased Security",
          description: "Passkeys are encrypted end-to-end on your device or password manager to prevent phishing attempts."
        },
        add_button: "Add a passkey",
        start_button: "Add a passkey"
      },
      no_email_auth_info: {
        convinience: {
          title: "Simple and Fast",
          description: "Works across devices and syncs between devices and browsers."
        },
        security: {
          title: "Secured with a bio-metric",
          description: "Phishing resistant and encrypted."
        },
        add_button: "Add passkey",
        start_button: "Add passkey"
      },
      badge: "Recommended",
      description: "Works across devices & secured with biometric to prevent phishing attempts ",
      title: "Create new passkey",
      reveal_title: "Add a passkey"
    },
    skip: "Not now",
    title: "Account security",
    need_help_title: "Problem Signing?",
    need_help_description: "Select from an option below to complete",
    reveal_title: "Verification Required",
    reveal_description: "Choose a verification method."
  },
  /**
     * @description copy keys for enter password view
     * @default
     * {
        continue_button_label: 'Continue',
        description: 'Please enter your passcode below to continue.',
        error: {
          invalid_password: 'Invalid passcode',
        },
        input: {
          label: 'Passcode',
          placeholder: 'Passcode',
        },
        title: 'Enter passcode',
      }
     */
  dyn_enter_password: {
    continue_button_label: "Continue",
    description: "Please enter your passcode below to continue.",
    error: {
      invalid_password: "Invalid passcode"
    },
    input: {
      label: "Passcode",
      placeholder: "Passcode"
    },
    title: "Enter passcode"
  },
  /**
     * @description copy keys for Dynamic Farcaster connect view
     * @default
     * {
        copy_button: 'Copy QR URI',
        scan_title: "Scan this QR code from your mobile app or phone's camera to connect.",
      }
     */
  dyn_farcaster_connect_view: {
    copy_button: "Copy QR URI",
    scan_title: "Scan this QR code from your mobile app or phone's camera to connect."
  },
  /**
     * @description copy keys for log in view
     * @default
     * {
        connect_wallet: {
          title: 'Connect',
        },
        email_form: {
          email_field: {
            label: 'Enter your email',
          },
          submit_button: {
            label: 'Continue'
          }
        },
        email_or_phone: {
          use_email: 'Use email',
          use_phone: 'Use phone',
          prefer_email: 'Prefer email sign up?',
          prefer_phone: 'Prefer phone number sign up?',
        },
        helper: {
          all_wallet_list: 'Get your first wallet',
          email_form: {
            invalid_email: 'Invalid or incorrect email. Did you mistype it?',
          },
          pending_connect: {
            title: 'Connecting a wallet',
          },
          pending_signature: {
            title: 'Signing a wallet',
          },
          pending_signature_without_back_button: {
            title: 'Signing a wallet',
          },
          phone_number_form: {
            invalid_phone: 'Invalid or incorrect number. Did you mistype it?',
            invalid_sms_verification:
              'Invalid or incorrect number. Did you mistype it?',
          },
          qr_code: {
            title: 'Connecting a wallet',
          },
          wallet_only: 'Get your first wallet',
        },
        qr_code: {
          title: 'Connect',
        },
        select_wallet_in_wallet_group: {
          title: 'Select'
        },
        separators: {
          default: 'OR',
        },
        sign_wallet: {
          title: 'Sign',
        },
        social: {
          button_label: 'Continue with {{provider}}',
        },
        wallet_group: {
          title: 'Select Chain',
        },
        title: {
          all: 'Log in or sign up',
          all_wallet_list: 'Select your wallet',
          wallet_only: 'Select your wallet',
        },
        wallet_list: {
          button_only: 'Continue with a wallet',
        },
        wrong_social_account: {
          retry_button: 'Try again',
          retry_title: 'Please connect with: ',
          subtitle: 'You must connect with the same account you originally signed in with.',
          title: 'Whoops. Wrong Account',
  },
      }
     */
  dyn_login: {
    connect_wallet: {
      title: "Connect"
    },
    email_form: {
      email_field: {
        label: "Enter your email"
      },
      submit_button: {
        label: "Continue"
      }
    },
    email_or_phone: {
      use_email: "Use email",
      use_phone: "Use phone",
      prefer_email: "Prefer email sign up?",
      prefer_phone: "Prefer phone number sign up?"
    },
    helper: {
      all_wallet_list: "Get your first wallet",
      email_form: {
        invalid_email: "Invalid or incorrect email. Did you mistype it?"
      },
      pending_connect: {
        title: "Connecting a wallet"
      },
      pending_signature: {
        title: "Signing a wallet"
      },
      pending_signature_without_back_button: {
        title: "Signing a wallet"
      },
      phone_number_form: {
        invalid_phone: "Invalid or incorrect number. Did you mistype it?",
        invalid_sms_verification: "The code you entered is incorrect. Please try again.",
        too_many_sms_verification_attempts: "Too many verification attempts, please try again later."
      },
      qr_code: {
        title: "Connecting a wallet"
      },
      wallet_only: "Get your first wallet"
    },
    qr_code: {
      title: "Connect"
    },
    separators: {
      default: "OR"
    },
    sign_wallet: {
      title: "Sign"
    },
    select_wallet_in_wallet_group: {
      title: "Select"
    },
    social: {
      button_label: "Continue with {{provider}}"
    },
    title: {
      all: "Log in or sign up",
      all_wallet_list: "Select your wallet",
      wallet_only: "Select your wallet"
    },
    wallet_group: {
      title: "Select Chain"
    },
    wallet_list: {
      button_only: "Continue with a wallet"
    },
    wrong_social_account: {
      retry_button: "Try again",
      retry_title: "Please connect with: ",
      subtitle: "You must connect with the same account you originally signed in with.",
      title: "Whoops. Wrong Account"
    }
  },
  /**
   * @description copy keys for Dynamic manage passkeys view which are used inside dynamic widget
   * @default
   * {
      title: 'My passkeys',
      passkey_from: 'from',
      passkey_providers: {
        android: 'Android Phone',
        brave: 'Brave Browser',
        chrome: 'Google Chrome',
        edge: 'Microsoft Edge',
        firefox: 'Firefox',
        iPhone: 'iPhone',
        opera: 'Opera Browser',
        safari: 'Safari Browser',
      },
      recovery_button: 'Set up new passkey',
    }
   */
  dyn_manage_passkeys: {
    title: "Manage passkeys",
    passkey_from: "from",
    passkey_providers: {
      android: "Android Phone",
      brave: "Brave Browser",
      chrome: "Google Chrome",
      edge: "Microsoft Edge",
      firefox: "Firefox",
      iPhone: "iPhone",
      opera: "Opera Browser",
      safari: "Safari Browser"
    },
    recovery_button: "Set up new passkey"
  },
  /**
   * @description copy keys for Dynamic rename passkey view
   * @default
   * {
    error: Whoops! There was an error updating your passkey
    input_label: 'Passkey name',
    save: 'Save',
    title: 'Rename your passkey',
    not_found: 'No passkeys found',
   }
   */
  dyn_rename_passkeys: {
    error: "Whoops! There was an error updating your passkey",
    input_label: "Passkey name",
    save: "Save",
    title: "Rename your passkey",
    not_found: "No passkeys found"
  },
  /**
   * @description export keys for Dynamic embedded reveal view
   * @default
   * {
      title: 'Export wallet',
      agreement_title: 'Agree to continue',
      private_key_title: 'Private key',
      recovery_phrase_title: 'Secret recovery phrase',
      description:
        'Your wallet is non-custodial, meaning you are always in control of it.',
      statement_1: {
        title: 'Do not publicly share your {{keyType}}',
        description: 'Your {{keyType}} controls your account and assets.',
      },
      checkbox_label:
        'I am responsible for safeguarding and using my wallet key information.',
      reveal_description: 'Make sure to safely back up this information',
      reveal_button_label: 'Reveal',
      copy_button_label: 'Copy to clipboard',
      done_button_label: "I'm Done",
    },
   */
  dyn_embedded_reveal: {
    title: "Export wallet",
    agreement_title: "Agree to continue",
    private_key_title: "Private key",
    recovery_phrase_title: "Secret recovery phrase",
    badge_label: "Sensitive information",
    statement_1: {
      title: "Your wallet is non-custodial",
      description: "You are always in control of it."
    },
    statement_2: {
      title: "Do not publicly share your wallet key",
      description: "Your {{credential_type}} controls your account and assets."
    },
    checkbox_label: "I am responsible for safeguarding and using my wallet key information.",
    reveal_description: "Make sure to safely back up this information",
    reveal_button_label: "Reveal",
    copy_button_label: "Copy to clipboard",
    done_button_label: "I'm Done",
    aa_warning: {
      title: "Your assets are not in this wallet.",
      subtitle: "This is a smart-contract wallet. You will not see your balance if you import this to an external service. Please send your assets to your preferred external wallet first to access your funds:",
      button: "here"
    }
  },
  /**
   * @description Settings for Dynamic settings view which are used inside dynamic widget
   * @default
   * {
      global_section: {
        title: 'Global',
        currency: {
          title: 'Currency',
          badge: 'coming soon',
        },
      },
      export_section: {
        private_key_button: 'Private key',
        srp_button: 'Recovery phrase',
        title: 'Export & Backup',
      },
      identity_section: {
        title: 'Recovery',
        add_email_button: 'Add an email',
      },
      tags: { recommended: 'Recommended' },
      security_section: {
        email_auth_button: 'One time code',
        passkey_button: 'Passkeys',
        password_button: 'Passcode',
        title: 'Security Methods',
      },
      title: 'Settings',
    }
   */
  dyn_settings: {
    global_section: {
      title: "Global",
      currency: {
        title: "Currency",
        badge: "coming soon"
      }
    },
    export_section: {
      private_key_button: "Private key",
      srp_button: "Recovery phrase",
      title: "Export & Backup"
    },
    identity_section: {
      title: "Recovery",
      add_email_button: "Add an email"
    },
    tags: { recommended: "Recommended" },
    security_section: {
      email_auth_button: "One time code",
      passkey_button: "Passkeys",
      password_button: "Passcode",
      mfa_button: "Authenticator App",
      title: "2 factor authentication"
    },
    title: "Settings",
    button_logout: "Log out"
  },
  /**
   * @description copy keys for global wallet view
   * @default
   *  {
    connect_to_apps: 'Connect to apps',
    scan_qr_code: 'Scan QR Code',
    or: 'OR',
    walletconnect_uri: 'WalletConnect URI',
    the_dapp: 'the dApp',
    this_app: 'this app',
    confirm: {
      title: 'Confirm Connection',
      description: 'Are you sure you want to connect to {{name}}?',
      cancel_button: 'Cancel',
      connect_button: 'Connect',
    },
    banner: {
      warning: 'There was an error connecting to {{name}}.',
      success: 'Successfully connected to {{name}}.',
      already_connected: 'You are already connected to {{name}}.',
      expired:
        'The link you entered expired, please get a new URI from the app.',
      bad_input:
        'Invalid URI. Please check below for how to find the valid URI.',
    },
    help: {
      title: 'How do I find the URI code?',
      step: {
        1: '1. Go to the website you want to connect to',
        2: '2. Locate the "Connect" or "Login" button',
        3: '3. Open WalletConnect from the list',
      },
      learn_more: 'Learn more about global wallets',
    },
  },
   */
  global_wallet: {
    connect_to_apps: "Connect to apps",
    scan_qr_code: "Scan QR Code",
    or: "OR",
    walletconnect_uri: "WalletConnect URI",
    the_dapp: "the dApp",
    this_app: "this app",
    confirm: {
      title: "Confirm Connection",
      description: "Are you sure you want to connect to {{name}}?",
      cancel_button: "Cancel",
      connect_button: "Connect"
    },
    banner: {
      warning: "There was an error connecting to {{name}}.",
      success: "Successfully connected to {{name}}.",
      already_connected: "You are already connected to {{name}}.",
      expired: "The link you entered expired, please get a new URI from the app.",
      bad_input: "Invalid URI. Please check below for how to find the valid URI."
    },
    help: {
      title: "How do I find the URI code?",
      step: {
        1: "1. Go to the website you want to connect to",
        2: '2. Locate the "Connect" or "Login" button',
        3: "3. Open WalletConnect from the list"
      },
      learn_more: "Learn more about global wallets"
    }
  },
  /**
   * @description copy keys for mfa management view
   * @default
   *  {
        title: 'Authenticator App',
        add_mfa_button: 'Authenticator App',
        no_devices: 'No authenticator apps configured',
        generate_backup_codes_button: 'Get new backup codes',
      },
   */
  dyn_manage_mfa: {
    title: "Authenticator App",
    add_mfa_button: "Authenticator App",
    no_devices: "No authenticator apps configured",
    generate_backup_codes_button: "Get new backup codes"
  },
  /**
   * @description copy keys for mfa views
   * @default
   * {
      choose_device_view: {
        title: 'Secure your account',
        select_options: 'Protect your account by adding multi-factor authentication',
        authenticator_app: 'Authenticator app',
        authenticator_app_description:
          'Use your preferred authenticator app such as Authy, Google Authenticator, etc.',
        backup_code: 'Backup code',
        backup_code_description:
          'Enter one of your saved backup codes to authenticate.',
        choose_another_method:  'Choose another method',
        choose_another_method_description: 'Use one of the methods below:',
      logout: 'Log out',
      },
      display_backup_codes_view: {
        title: 'Back up your codes',
        body: 'Backup codes help recover your account if you lose access to your device. Each code can be used only 1 time.',
        warning: 'You won’t be able to see these again',
        copy_all: 'Copy all',
        download: 'Download',
        checkbox: 'I have safely stored a copy of my backup codes',
        complete: 'Complete',
      },
      otp_verification_view: {
        title: 'Confirm verification code',
        body: 'Enter the verification code generated by your authenticator app',
        error: 'Invalid code. Please try again.',
        rate_limit_error: 'Too many attempts, please try again later.',
        choose_another_method: 'Sign in another way',
      },
      secure_device_view: {
        title: 'Secure your account',
        body: 'Setup a new sign-in method in your authenticator app',
        continue: 'Continue',
        helper: {
          button: "Can't scan QR Code?",
          title: 'Troubles with scanning?',
          step1: {
            title: 'Open your Authenticator App',
            description: 'You will set up a new sign-in method',
          },
          step2: {
            title: 'Enter the key provided below',
            description: 'Make sure time-based or one-time password is enabled.',
          },
          uri: {
            title: 'Copy the full URI',
            description:
              'This only works if your authenticator app supports TOTP URIs',
          },
        },
        logout: 'Log out',
      },
    },
   */
  dyn_mfa: {
    choose_device_view: {
      title: "Secure your account",
      select_options: "Protect your account by adding multi-factor authentication",
      authenticator_app: "Authenticator app",
      authenticator_app_description: "Use your preferred authenticator app such as Authy, Google Authenticator, etc.",
      backup_code: "Backup code",
      backup_code_description: "Enter one of your saved backup codes to authenticate.",
      choose_another_method: "Choose another method",
      choose_another_method_description: "Use one of the methods below:",
      logout: "Log out"
    },
    display_backup_codes_view: {
      title: "Back up your codes",
      body: "Backup codes help recover your account if you lose access to your device. Each code can be used only 1 time.",
      warning: "You won’t be able to see these again",
      copy_all: "Copy all",
      download: "Download",
      checkbox: "I've safely stored a copy of my backup codes",
      complete: "Complete"
    },
    otp_verification_view: {
      title: "Confirm verification code",
      body: "Enter the verification code generated by your authenticator app",
      error: "Invalid code. Please try again.",
      rate_limit_error: "Too many attempts, please try again later.",
      choose_another_method: "Sign in another way"
    },
    secure_device_view: {
      title: "Secure your account",
      body: "Setup a new sign-in method in your authenticator app",
      continue: "Continue",
      helper: {
        button: "Can't scan QR Code?",
        title: "Troubles with scanning?",
        step1: {
          title: "Open your Authenticator App",
          description: "You will set up a new sign-in method"
        },
        step2: {
          title: "Enter the key provided below",
          description: "Make sure time-based or one-time password is enabled."
        },
        uri: {
          title: "Copy the full URI",
          description: "This only works if your authenticator app supports TOTP URIs"
        }
      },
      logout: "Log out"
    },
    recovery_view: {
      title: "Enter your backup code",
      body: "Your backup code is one of the 10 codes you received when you first enrolled in multi-factor authentication",
      input_label: "Enter back up code",
      button_label: "Continue",
      get_help: {
        description: "Missing your back up codes?",
        button_label: "Get Help"
      },
      helper: {
        title: "Mfa Recovery Help"
      }
    }
  },
  /**
   * @description copy keys for merge user accounts view
   * @default
   * {
      confirm_button: 'Merge accounts',
      errors: {
        merge_error: 'Something went wrong, please try again.',
      },
      wallet: {
        content: 'This wallet is associated to another account. Would you like to merge accounts?',
        title: 'Wallet already in use',
      },
    }
   */
  dyn_merge_user_accounts: {
    confirm_button: "Merge accounts",
    errors: {
      merge_error: "Something went wrong, please try again."
    },
    wallet: {
      content: "This wallet is associated to another account. Would you like to merge accounts?",
      title: "Wallet already in use"
    }
  },
  /**
   * @description copy keys for merge user accounts conflicts view
   * @default
   * {
      confirm_button: 'Confirm & Merge',
      description:
        'You have some conflicting information. Please select your preferences',
      errors: {
        merge_error: 'Something went wrong, please try again.',
      },
      title: 'Confirm your preferences',
    }
   */
  dyn_merge_user_accounts_conflicts: {
    confirm_button: "Confirm & Merge",
    description: "You have some conflicting information. Please select your preferences",
    errors: {
      merge_error: "Something went wrong, please try again."
    },
    title: "Confirm your preferences"
  },
  /**
   * @description copy keys for merge user accounts view when using email associated to a different account
   * @default
   * {
      cancel_button: "No, I'll use a different email",
      confirm_button: 'Yes, link to existing account',
      errors: {
        merge_error: 'Something went wrong, please try again.',
      },
      existing_account: 'An account already exists that uses',
      existing_account_trail: 'email.',
      title: 'Would you like to link this wallet to this existing account?',
    }
   */
  dyn_merge_user_accounts_with_same_email: {
    cancel_button: "No, I'll use a different email",
    confirm_button: "Yes, link to existing account",
    errors: {
      merge_error: "Something went wrong, please try again."
    },
    existing_account: "An account already exists that uses",
    existing_account_trail: "email.",
    title: "Would you like to link this wallet to this existing account?"
  },
  /**
   * @description copy key for Dynamic need help footer section
   * @default
   * {
      info: 'Problem Signing?',
      contact_support: 'Contact support',
      divider: 'or',
      help_button: 'go here.',
    }
   */
  dyn_need_help_section: {
    info: "Problem Signing?",
    contact_support: "Contact support",
    divider: "or",
    help_button: "go here."
  },
  /**
   * @description copy keys for network not supported view
   * @default
   * {
      button: 'Switch Network',
      subtitle: 'Your wallet is not connected to a supported network. Please update before continuing.',
      title: 'Update Network',
      warning_message: 'This network is not available, please update.',
    }
   */
  dyn_network_not_supported: {
    button: "Switch Network",
    subtitle: "Your wallet is not connected to a supported network. Please update before continuing.",
    title: "Update Network",
    warning_message: "This network is not available, please update."
  },
  /**
   * @description copy keys for network not supported view for manual switch
   * @default
   * {
      subtitle_network_defined_metamaskstarknet:
        'To continue, please update the network in your wallet to {{network}} by visiting the Starknet Snap companion app',
      subtitle_network_defined_metamaskstarknet_companion_app: 'companion app',
      subtitle_network_defined: 'To continue, please update the network in your wallet to {{network}}',
      subtitle_no_network_defined: 'Your wallet does not support switching networks from this app. Switch networks directly in your wallet.',
      title: 'Update your Network',
      warning_message: 'This network is not available, please update.',
    }
   */
  dyn_network_not_supported_manual_switch: {
    subtitle_network_defined_metamaskstarknet: "To continue, please update the network in your wallet to {{network}} by visiting the Starknet Snap",
    subtitle_network_defined_metamaskstarknet_companion_app: "companion app",
    subtitle_network_defined: "To continue, please update the network in your wallet to {{network}}",
    subtitle_no_network_defined: "Your wallet does not support switching networks from this app. Switch networks directly in your wallet.",
    title: "Update your Network",
    warning_message: "This network is not available, please update."
  },
  /**
   * @description copy keys for no access view
   * @default
   * {
      chainalysis: {
        button_text: 'Try another method',
        description: 'This wallet has been correlated to illicit activity and cannot access this site.',
        social_media_link_text: 'Why am I seeing this message?',
        social_media_link_url: 'https://docs.dynamic.xyz/docs',
        title: 'This address seems corrupted.',
      },
      default: {
        button_text: 'Try another method',
        description: "You are not currently on the allow list.",
        title: 'Access denied',
      },
      gate: {
        button_text: 'Try a different wallet',
        description: 'A NFT or a token is required to access this site.',
        title: 'You cannot access the site',
      },
      not_in_the_list_image_alt: 'user is not in the list',
      title: "You don't have access",
    }
   */
  dyn_no_access: {
    chainalysis: {
      button_text: "Try another method",
      description: "This wallet has been correlated to illicit activity and cannot access this site.",
      social_media_link_text: "Why am I seeing this message?",
      social_media_link_url: "https://docs.dynamic.xyz/docs",
      title: "This address seems corrupted."
    },
    default: {
      button_text: "Try another method",
      description: "You are not currently on the allow list.",
      title: "Access denied"
    },
    gate: {
      button_text: "Try a different wallet",
      description: "A NFT or a token is required to access this site.",
      title: "You cannot access the site"
    },
    not_in_the_list_image_alt: "user is not in the list",
    title: "You don't have access"
  },
  /**
   * @description copy keys for email OTP verification for magiclink
   * @default
   * {
      banner_text: 'Sign in to access your email based wallet',
    }
   */
  dyn_magic_verification: {
    banner_text: "Sign in to access your email based wallet"
  },
  /**
   * @description copy key for passkey created success banner
   * @default
   * {
      text: 'A new passkey has been created',
    }
   */
  dyn_passkey_success: {
    created: "A new passkey has been created",
    edited: "Your passkey has been edited"
  },
  /**
   * @description copy keys for passkey intro view
   * @default
   * {
      button: 'Set up a passkey',
      button_logout: 'Log out',
      button_skip: 'Skip for now',
      disabled: 'Passkeys are not available on this device or browser. Please open on Chrome, Safari, or Brave to continue',
      helper: {
        section_1: {
          description: 'Passkeys are a standard built by Apple, Google and others, and eliminates the use of passwords.',
          title: 'Built by Apple and Google',
        },
        section_2: {
          description: 'Passkeys are stored on your phone and are not shared with anyone.',
          title: 'Secure and Private',
        },
        title: "What's Passkey",
        tooltip: 'Need some help?',
      },
      sms_auth: {
        title: 'Finish set up',
        description:
          'Add a security method to finish your profile and complete transactions',
      },
      subtitle: 'Passkeys are stored natively to your device with a biometric and can only be accessed by you.',
      title: 'Secure your wallet',
    }
   */
  dyn_passkey_intro: {
    button: "Set up a passkey",
    button_logout: "Log out",
    button_skip: "Skip for now",
    disabled: "Passkeys are not available on this device or browser. Please open on Chrome, Safari, or Brave to continue",
    helper: {
      section_1: {
        description: "Passkeys are a standard built by Apple, Google and others, and eliminates the use of passwords.",
        title: "Built by Apple and Google"
      },
      section_2: {
        description: "Passkeys are stored on your phone and are not shared with anyone.",
        title: "Secure and Private"
      },
      title: "What's Passkey",
      tooltip: "Need some help?"
    },
    sms_auth: {
      title: "Finish set up",
      description: "Add a security method to finish your profile and complete transactions"
    },
    subtitle: "Passkeys are stored natively to your device with a biometric and can only be accessed by you.",
    title: "Secure your wallet"
  },
  /**
   * @description copy keys for passkey new domain detected modal
   * @default
   * {
   title: 'New domain detected',
   description: 'To complete your transaction select a signing method',
   actions: {
   passkey: {
   title: 'Add new passkey',
   subtitle: 'Does not expire. Works across devices & secured with biometric.',
   },
   emailAuth: {
   title: 'Use a one-time code',
   subtitle: 'Allows you to transact for 30 min',
   },
   badges: {
   recommended: 'Recommended',
   fastest: 'Fastest',
   },
   },
   }
   */
  dyn_passkey_new_domain_detected: {
    title: "New domain detected",
    description: "To complete your transaction select a signing method",
    actions: {
      passkey: {
        title: "Add new passkey",
        subtitle: "Does not expire. Works across devices & secured with biometric."
      },
      emailAuth: {
        title: "Use a one-time code",
        subtitle: "Allows you to transact for 30 min"
      },
      badges: {
        recommended: "Recommended",
        fastest: "Fastest"
      }
    }
  },
  /**
   * @description copy keys for passkeys recovery flow
   * @default
   * {
      add_email: {
        description:
          'Don’t get locked out if you delete your passkey or lose your device.',
        input_label: 'Enter your email',
        title: 'Add a recovery email',
        confirm_button: 'Confirm with a passkey',
        skip_button: 'Skip for now',
        success_message: 'Recovery email added!',
      },
      code: {
          description: 'A verification code has been sent to {{email}}',
          input_label: 'Enter your code here...',
          title: 'Verification code sent',
        resend: {
            button: 'Resend code',
            text: "Didn't receive a code?",
        },
      },
      complete: {
        complete_button: 'Create a passkey',
        description: 'Secure your wallet by adding a new passkey.',
        title: 'Create a new passkey',
      },
      start: {
        description:
          'To complete this process, ensure you are using the same device/browser.',
        start_button: 'Send me an email',
        title: 'Initiate Request',
      },
    }
   */
  dyn_passkey_recovery: {
    add_email: {
      description: "Don’t get locked out if you delete your passkey or lose your device.",
      input_label: "Enter your email",
      title: "Add a recovery email",
      confirm_button: "Confirm with a passkey",
      skip_button: "Skip for now",
      success_message: "Recovery email added!"
    },
    code: {
      description: "A verification code has been sent to {{email}}",
      input_label: "Enter your code here...",
      title: "Verification code sent",
      resend: {
        button: "Resend code",
        text: "Didn't receive a code?"
      }
    },
    complete: {
      complete_button: "Create a passkey",
      description: "Secure your wallet by adding a new passkey.",
      title: "Create a new passkey"
    },
    start: {
      description: "To complete this process, ensure you are using the same device/browser.",
      start_button: "Send me an email",
      title: "Initiate Request"
    }
  },
  /**
   * @description copy keys for Dynamic pending wallet connection
   * @default
   * {
      mobile: 'Click connect in your mobile wallet',
      computer: 'Click connect in your wallet popup',
    }
   */
  dyn_pending_connection: {
    title: "Connect",
    mobile: "Click connect in your mobile wallet",
    computer: "Click connect in your wallet popup"
  },
  /**
     * @description copy keys for Dynamic pending signature, we have overrides for phantom ledger which does not support message signing.
     * @default
     * {
        click_to_sign: 'Click to Sign',
        note: 'Note: ',
        phantom_ledger_sign: "Click sign in your wallet to confirm you own this wallet (this doesn't cost gas).",
        phantom_ledger_warning: "Ledger with Phantom doesn't support message signing. When logging in, a small fee (which should not apply) may appear. See below to learn more.",
        regular_sign_description: 'Click sign-in in your wallet to confirm you own this wallet.',
  }
     */
  dyn_pending_signature: {
    click_to_sign: "Click to Sign",
    note: "Note: ",
    phantom_ledger_sign: "Click sign in your wallet to confirm you own this wallet (this doesn't cost gas).",
    phantom_ledger_warning: "Ledger doesn't support message signing. When logging in, a small fee (which should not apply) may appear. See below to learn more.",
    regular_sign_description: "Click sign-in in your wallet to confirm you own this wallet."
  },
  /**
     * @description copy keys for Dynamic QR code Wallet Connection Pop-Up
     * @default
     * {
        copy_button: 'Copy QR URI',
        get_extension_button: 'Get extension',
        open_button: 'Open App',
        scan_title: "Scan this QR code from your mobile {{app}} or phone's camera to connect.",
        wallet_not_installed: {
          browser_install: 'Install {{browser}} extension',
          install: 'Install {{wallet}} extension to connect',
          refresh: 'Refresh the page once installed',
          select: 'Select from your preferred options below:',
        },
      }
     */
  dyn_qr_code: {
    copy_button: "Copy QR URI",
    get_extension_button: "Get Extension",
    open_button: "Open App",
    scan_title: "Scan this QR code from your mobile {{app}} or phone's camera to connect.",
    wallet_not_installed: {
      browser_install: "Install {{browser}} extension",
      install: "Install {{wallet}} extension to connect",
      refresh: "Refresh the page once installed",
      select: "Select from your preferred options below:"
    }
  },
  /**
     * @description copy keys for Dynamic wallet locked/disconnected
     * @default
     * {
        connect_continue: 'Connect your wallet to continue',
        title: 'Welcome back',
        subtitle: "We couldn't connect to your wallet. Click connect to retry the connection ",
        connect: 'Connect wallet',
        logout: 'Log out',
      }
     */
  dyn_wallet_locked: {
    connect_continue: "Connect your wallet to continue",
    title: "Welcome back",
    subtitle: "We couldn't connect to your wallet. Click connect to retry the connection ",
    connect: "Connect wallet",
    logout: "Log out"
  },
  /**
   * @description copy keys for passkeys creation flow for existent embedded wallets
   * @default
   * {
      code: {
        action_based_description: 'To {{action}} verify account.',
        description: 'A secure code has been sent to {{email}}.',
        input_label: 'Enter your code here...',
        title: 'Verification code sent',
        resend: {
          button: 'Resend code',
          text: "Didn't receive a code?",
        },
        complete_transaction_action: 'complete transaction',
        sign_message_action: 'sign this message',
      },
      complete: {
        complete_button: 'Create a passkey',
        description:
          'Passkeys are stored natively to your device with a biometric and can only be accessed by you.',
        title: 'Secure your account',
      },
      start: {
        description:
          'A one-time security code will be sent to the email on file. It will expire in 15 minutes.',
        start_button: 'Send me an email',
        title: 'Send Email Code',
      },
    }
   */
  dyn_passkey_secure_modal: {
    code: {
      action_based_description: "To {{action}} verify account.",
      description: "A secure code has been sent to {{email}}.",
      input_label: "Enter your code here...",
      title: "Verification code sent",
      resend: {
        button: "Resend code",
        text: "Didn't receive a code?"
      },
      complete_transaction_action: "complete transaction",
      sign_message_action: "sign this message"
    },
    complete: {
      complete_button: "Create a passkey",
      description: "Passkeys are stored natively to your device with a biometric and can only be accessed by you.",
      title: "Secure your account"
    },
    start: {
      description: "A one-time security code will be sent to the email on file. It will expire in 15 minutes.",
      start_button: "Send me an email",
      title: "Send Email Code"
    }
  },
  /**
   * @description copy keys for save password view
   * @default
   * {
      badge_text: 'Important!',
      checkbox_label: 'I have safely stored a copy of my passcode.',
      continue: 'Continue',
      copy_button: {
        copy: 'Copy',
        copied: 'Copied',
      },
      description: 'You must retain a copy of this passcode.',
      download_button: 'Download',
      logout: 'Log out',
      password_input: {
        label: 'Passcode',
        placeholder: 'Passcode',
      },
      title: 'Save passcode',
      warning:
        'If you lose your passcode, you cannot recover access to your account.',
    }
   */
  dyn_save_password: {
    badge_text: "Important!",
    checkbox_label: "I have safely stored a copy of my passcode.",
    continue: "Continue",
    copy_button: {
      copy: "Copy",
      copied: "Copied"
    },
    description: "You must retain a copy of this passcode.",
    download_button: "Download",
    logout: "Log out",
    password_input: {
      label: "Passcode",
      placeholder: "Passcode"
    },
    title: "Save passcode",
    warning: "If you lose your passcode, you cannot recover access to your account."
  },
  /**
   * @description copy keys for secure pregenerated embedded wallet
   * @default
   * {
      description: 'Make transactions simpler and more secure.',
      action: 'Get started'
   }
   */
  dyn_secure_pregenerated_wallet: {
    description: "Make transactions simpler and more secure.",
    action: "Get started"
  },
  /**
   * @description copy keys for send transaction flow views
   * @default
   * {
      confirmation: {
        cancel_button: 'Cancel',
        confirm_button: 'Confirm',
        data: {
          amount: 'Amount',
          from: 'From (You)',
          gas: 'Gas',
          gas_estimate: 'Gas (estimate)',
          to: 'To',
          total: 'Total',
        },
        not_applied: 'N/A',
        title: 'Confirm transaction',
      },
      data: {
        amount: {
          label: 'Amount',
          placeholder: 'Select amount',
        },
        balance: {
          label: 'Balance:',
        },
        from: 'Send from',
        recipient: {
          label: 'Recipient',
          placeholder: 'Enter wallet address...',
        },
      },
      multiple_recipients: 'Multiple',
      send_button: 'Send now',
      succeeded: {
        continue_button: 'Continue',
        network: {
          label: 'Network',
        },
        recipient: {
          label: 'Recipient',
        },
        title: 'Transaction successfully sent',
        total_amount: {
          label: 'Total amount',
        },
      },
      validation: {
        amount: {
          invalid_decimals: 'Please enter a value up to the {{decimals}}th decimal place.',
          invalid_format: 'The amount is in invalid format',
          over_balance: 'Insufficient funds to send this amount.',
          required: 'The amount field is required',
        },
        recipient: {
          invalid_format: 'The address is in invalid format',
          required: 'The recipient is required',
        },
      },
      warning_message: {
        insufficient_funds: 'Insufficient funds due to gas price increase from estimate. Please add {{amountLeft}} {{currencySymbol}} to continue.',
      },
      error_message: {
        gas_not_sponsored: 'The gas fee has increased. Confirm if you still want to complete this transaction.',
      },
    }
   */
  dyn_send_transaction: {
    confirmation: {
      cancel_button: "Cancel",
      confirm_button: "Confirm",
      send: "Send",
      data: {
        amount: "Amount",
        from: "From (You)",
        gas: "Gas",
        gas_estimate: "Gas fee",
        to: "To",
        total: "Total cost",
        wallet_used: "Wallet used",
        network_used: "Network used",
        destination: "Destination",
        gas_tooltip: "Gas fees are charged by the network and can change quickly based on usage."
      },
      not_applied: "N/A",
      title: "Confirm transaction"
    },
    data: {
      amount: {
        label: "Amount",
        placeholder: "Enter amount"
      },
      balance: {
        label: "Balance:"
      },
      from: "Send from",
      send: "Send",
      send_preview: "Send Preview",
      confirmation_tx: "Confirm Transaction",
      recipient: {
        label: "Address",
        placeholder: "Enter wallet address..."
      }
    },
    multiple_recipients: "Multiple",
    preview_transaction: "Preview transaction",
    send_button: "Send now",
    succeeded: {
      continue_button: "Done",
      network: {
        label: "Network"
      },
      recipient: {
        label: "Recipient"
      },
      title: "Transaction successfully sent to",
      total_amount: {
        label: "Total amount"
      }
    },
    validation: {
      amount: {
        invalid_decimals: "Please enter a value up to the {{decimals}}th decimal place.",
        invalid_format: "The amount is in invalid format",
        over_balance: "Insufficient funds to send this amount.",
        required: "The amount field is required"
      },
      recipient: {
        invalid_format: "The address is in invalid format",
        required: "The recipient is required"
      }
    },
    info_message: {
      refresh_balance_time: "Your balance may take up to 30s to refresh."
    },
    warning_message: {
      insufficient_funds: "Insufficient funds due to gas price increase from estimate. Please add {{amountLeft}} {{currencySymbol}} to continue.",
      insufficient_gas_funds: "Insufficient gas funds. Please add {{amountLeft}} {{currencySymbol}} to continue.",
      failed_simulation: "Unable to simulate transaction, funds may be lost if submitted.",
      not_enough_solana: "Insufficient funds to process this transaction"
    },
    error_message: {
      gas_not_sponsored: "The gas fee has increased. Confirm if you still want to complete this transaction."
    }
  },
  /**
   * @description copy keys for Select Chain view
   * @default
   * {
      description: "This wallet supports multiple chains. Select which chain you'd like to connect to",
      using_hardware_wallet_toggle_label: 'Using Ledger',
    }
   */
  dyn_select_chain: {
    description: "This wallet supports multiple chains. Select which chain you'd like to connect to",
    using_hardware_wallet_toggle_label: "Using Ledger"
  },
  /**
   * @description copy keys for Select Wallet view
   * @default
   * {
      description: "This wallet supports multiple chains. Select which chain you'd like to connect to",
      using_hardware_wallet_toggle_label: 'Using Ledger with {{chainName}}',
    }
   */
  dyn_select_wallet: {
    description: "Select your preferred {{walletName}} wallet?"
  },
  /**
   * @description copy keys for Select Chain view
   * @default
   * {
      title: "Connect",
      description:
        "This wallet supports using ledger. Toggle on ledger to enable it.",
      using_hardware_wallet_toggle_label: "Using Ledger with {{chainName}}",
      button: "Connect",
    }
   */
  dyn_select_hardware_wallet: {
    title: "Connect",
    description: "This wallet supports using ledger. Toggle on ledger to enable it.",
    using_hardware_wallet_toggle_label: "Using Ledger with {{chainName}}",
    button: "Connect"
  },
  /**
   * @description copy keys for sign message flow views
   * @default
   * {
      cancel_button: 'Cancel',
      sign_button: 'Sign',
      title: 'Requesting Signature',
    }
   */
  dyn_sign_message: {
    cancel_button: "Cancel",
    sign_button: "Sign",
    title: "Requesting Signature"
  },
  /**
   * @description copy keys for social redirect view
   * @default
   * {
      logging_in: 'Logging you in',
    }
   */
  dyn_social_redirect: {
    logging_in: "Logging you in"
  },
  /**
   * @description copy keys for wallet redirect view
   * @default
   * {
      loading: 'Loading...',
    }
   */
  dyn_wallet_redirect: {
    loading: "Loading..."
  },
  /**
   * @description copy keys for messages related to time since a date
   * @default
   * {
      second: 'second',
      seconds: 'seconds',
      minute: 'minute',
      minutes: 'minutes',
      hour: 'hour',
      hours: 'hours',
      day: 'day',
      days: 'days',
      month: 'month',
      months: 'months',
      year: 'year',
      years: 'years',
      ago: 'ago',
      created: 'Created',
   }
   */
  dyn_time_since: {
    second: "second",
    seconds: "seconds",
    minute: "minute",
    minutes: "minutes",
    hour: "hour",
    hours: "hours",
    day: "day",
    days: "days",
    month: "month",
    months: "months",
    year: "year",
    years: "years",
    ago: "ago",
    created: "Created"
  },
  /**
   * @description copy keys for connecting wallets view
   * @default
   * {
      mobile: {
        wallet_list: {
          helper: 'Get your first wallet',
          title: 'WalletConnect wallets',
        },
      },
    }
   */
  dyn_wallet_conect: {
    mobile: {
      wallet_list: {
        helper: "Get your first wallet",
        title: "WalletConnect wallets"
      }
    }
  },
  /**
   * @description copy keys for linking wallets to profile view
   * @default
   * {
      cannot_link: {
        cancel_button: 'Cancel',
        description: 'This wallet is the only wallet in your other account. You cannot transfer it, since then you will lose access to that account.',
        link_other_button: 'Link a different wallet',
        title: 'Cannot link this wallet to a new account',
      },
      confirm_button: 'Link wallet to current account',
      existent_account: {
        acceptance: 'I understand that linking this wallet means that I will lose access to the other account.',
        warning: 'Linking your wallet to this account will unlink it from its previously associated account',
      },
      log_out_button: 'Log out',
      title: 'Transfer this wallet?'
    }
   */
  dyn_wallet_link: {
    cannot_link: {
      cancel_button: "Cancel",
      description: "This wallet is the only wallet in your other account. You cannot transfer it, since then you will lose access to that account.",
      link_other_button: "Link a different wallet",
      title: "Cannot link this wallet to a new account"
    },
    confirm_button: "Link wallet to current account",
    existent_account: {
      acceptance: "I understand that linking this wallet means that I will lose access to the other account.",
      warning: "Linking your wallet to this account will unlink it from its previously associated account"
    },
    log_out_button: "Log out",
    title: "Transfer this wallet?"
  },
  /**
   * @description copy keys for connecting wallets list view
   * @default
   * {
      configuration_mismatch: 'Oops, no login methods have been configured.',
      helper: 'Get your first wallet',
      search: {
        label: 'Search through {{numberOfWallets}} wallets...',
        not_found: {
          description: 'The wallet you’re looking for may not be available, or linking more than one of these wallets might not be possible.',
          title: 'Wallet not available',
        },
      },
      title: {
        connect: 'Connect a new wallet',
        link: 'Link a new wallet',
        select: 'Select your wallet',
      },
      view_all: 'View all wallets',
      wallet_missing: {
        description: 'Try search instead',
        title: "Don't see your wallet?",
      },
    }
   */
  dyn_wallet_list: {
    configuration_mismatch: "Oops, no login methods have been configured.",
    helper: "Get your first wallet",
    search: {
      label: "Search through {{numberOfWallets}} wallets...",
      not_found: {
        description: "The wallet you’re looking for may not be available, or linking more than one of these wallets might not be possible.",
        title: "Wallet not available"
      }
    },
    title: {
      connect: "Connect a new wallet",
      link: "Link a new wallet",
      select: "Select your wallet"
    },
    view_all: "View all wallets",
    wallet_missing: {
      description: "Try search instead",
      title: "Don't see your wallet?"
    }
  },
  /**
   * @description copy keys for transferring wallets between accounts view
   * @default
   * {
      sign: {
        spinner: {
          cancel: 'Cancel',
          confirm_transfer:
          'Sign the message to confirm transferring this wallet to this account.',
        },
        title: 'Sign to confirm transfer',
      },
    }
   */
  dyn_wallet_transfer: {
    sign: {
      spinner: {
        cancel: "Cancel",
        confirm_transfer: "Sign the message to confirm transferring this wallet to this account."
      },
      title: "Sign to confirm transfer"
    }
  },
  /**
   * @description copy keys for Dynamic widget
   * @default
   * {
      connect: 'Log in or sign up',
      empty_wallets: '{{action}} additional wallets to see them here.',
      other_wallets: 'My other wallets',
    }
   */
  dyn_widget: {
    connect: "Log in or sign up",
    empty_wallets: "{{action}} additional wallets to see them here.",
    other_wallets: "My other wallets",
    empty_wallets_action_link: "Link",
    empty_wallets_action_connect: "Connect"
  },
  /**
   * @description copy keys for Dynamic wallet information card
   * @default
   * {
      balance: 'Balance'
    }
   */
  dyn_wallet_information: {
    balance: "Balance",
    multi_asset: {
      empty_state: "No assets in this wallet"
    }
  },
  /**
   * @description copy keys for Unlink wallet prompt
   * @default
   * {
      disconnect_title: 'Disconnect your wallet?',
      unlink_title: 'Unlink your wallet?',
      disconnect_description: 'Are you sure you want to disconnect your wallet?',
      unlink_description: 'Are you sure you want to unlink your wallet?',
      disconnect_button: 'Yes, disconnect',
      unlink_button: 'Yes, unlink',
      cancel_button: 'No',
    }
   */
  dyn_unlink_wallet_pop_up: {
    disconnect_title: "Disconnect your wallet?",
    unlink_title: "Unlink your wallet?",
    disconnect_description: "Are you sure you want to disconnect your wallet?",
    unlink_description: "Are you sure you want to unlink your wallet?",
    disconnect_button: "Yes, disconnect",
    unlink_button: "Yes, unlink",
    cancel_button: "No"
  },
  /**
   * @description copy keys for the user profile widget
   * @default
   * {
      my_information: {
        title: 'My information',
      },
      my_wallet: {
        title: 'My wallet',
      },
      social_accounts: {
        title: 'Social accounts',
      },
      tooltips: {
        verified_email: 'This email is verified',
        verified_phone: 'This phone number is verified',
      },
      wallets: {
        link_wallet_button: 'Link wallet',
        title: 'Wallets',
      },
    }
   */
  dyn_user_profile: {
    my_information: {
      title: "My information"
    },
    my_wallet: {
      title: "My wallet"
    },
    social_accounts: {
      title: "Social accounts"
    },
    tooltips: {
      verified_email: "This email is verified",
      verified_phone: "This phone number is verified"
    },
    wallets: {
      link_wallet_button: "Link wallet",
      title: "Want to add a wallet?"
    },
    edit_profile_button: "Edit Profile"
  },
  /**
   * @description copy keys for Detected new wallet prompt
   * @default
   * {
      title: 'Account Change Detected',
      description: 'Your active account in {{walletName}} has changed. This account is not currently linked to this app. Do you want to add it?',
      confirm_button: 'Yes, link this wallet',
    }
   */
  dyn_detected_new_wallet: {
    title: "Account Change Detected",
    description: "Your active account in {{walletName}} has changed. This account is not currently linked to this app. Do you want to add it?",
    confirm_button: "Yes, link this wallet"
  },
  /**
     * @description copy keys for sync wallet view
     * @default
     * {
        switch_wallet: {
          title: 'Your wallets are mismatched. \nSwitch to continue.',
          active_address: {
            heading: 'Currently active in wallet',
          },
          expected_address: {
            heading: 'Currently active on website',
            prompt: 'Manually switch to this wallet',
          },
        },
        reconnecting: {
          title: 'This wallet is not connected',
          description: 'Reconnecting wallet {{walletAddress}} to make it active...',
        },
        reconnect_with_qr_code: {
          title: 'This wallet is not connected',
        },
        cancel_button: 'Cancel',
        retry_button: 'Retry',
      }
    */
  dyn_sync_wallet: {
    switch_wallet: {
      title: "Your wallets are mismatched. \nSwitch to continue.",
      active_address: {
        heading: "Currently active in wallet"
      },
      expected_address: {
        heading: "Currently active on website",
        prompt: "Manually switch to this wallet"
      }
    },
    reconnecting: {
      title: "This wallet is not connected",
      description: "Reconnecting wallet {{walletAddress}} to make it active..."
    },
    reconnect_with_qr_code: {
      title: "This wallet is not connected"
    },
    cancel_button: "Cancel",
    retry_button: "Retry"
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/locale/helpers/deepMerge.js
var deepMerge = (obj1, obj2) => {
  if (typeof obj1 !== "object" || typeof obj2 !== "object") {
    return obj2;
  }
  const result = Object.assign({}, obj1);
  for (const key in obj2) {
    if (Object.prototype.hasOwnProperty.call(obj2, key)) {
      if (typeof obj2[key] === "object" && Object.prototype.hasOwnProperty.call(obj1, key) && typeof obj1[key] === "object") {
        result[key] = deepMerge(obj1[key], obj2[key]);
      } else {
        result[key] = obj2[key];
      }
    }
  }
  return result;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/locale/locale.js
var Locale = class _Locale {
  static setResources(customResources) {
    if (_Locale.__resources__) {
      return;
    }
    if (!customResources) {
      _Locale.__resources__ = {
        en: { translation }
      };
      return;
    }
    const sdkResources = {};
    Object.keys(customResources).forEach((lang) => {
      const mergedResource = Object.assign({}, translation);
      sdkResources[lang] = {
        translation: deepMerge(mergedResource, customResources[lang])
      };
    });
    _Locale.__resources__ = sdkResources;
  }
  static setup(resources) {
    if (_Locale.__initialized__ && _Locale.__i18nInstance__) {
      return _Locale.__i18nInstance__;
    }
    _Locale.setResources(resources);
    const i18nInstance2 = instance.createInstance();
    i18nInstance2.use(initReactI18next).init({
      fallbackLng: "en",
      interpolation: {
        escapeValue: false
        // not needed for react as it escapes by default
      },
      lng: "en",
      resources: _Locale.getResources()
    });
    _Locale.__i18nInstance__ = i18nInstance2;
    _Locale.__initialized__ = true;
    return _Locale.__i18nInstance__;
  }
  static getInstance() {
    if (!_Locale.__initialized__) {
      this.setup();
    }
    if (!_Locale.__i18nInstance__ || !_Locale.__initialized__) {
      throw new Error("Locale is not initialized");
    }
    return _Locale.__i18nInstance__;
  }
};
Locale.__i18nInstance__ = null;
Locale.__initialized__ = false;
Locale.getResources = () => Locale.__resources__;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/projectSettings/projectSettings.js
var import_jsx_runtime205 = __toESM(require_jsx_runtime(), 1);
var import_react237 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/settings/settings.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var import_react30 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getMinAuthToken/getMinAuthToken.js
var getMinAuthToken = () => {
  if (typeof window === "undefined")
    return void 0;
  const token = StorageService.getItem(AUTH_MIN_TOKEN, {
    priority: ["secureStorage", "localStorage"]
  });
  if (!token || isMinAuthTokenExpired(token))
    return void 0;
  return token;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/api.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var import_react29 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isCookieEnabled/isCookieEnabled.js
var isCookieEnabled = () => {
  var _a, _b, _c, _d;
  if (PlatformService.isNativeMobile) {
    return false;
  }
  const securitySettings = (_b = (_a = getProjectSettings()) === null || _a === void 0 ? void 0 : _a.settings) === null || _b === void 0 ? void 0 : _b.security;
  if (!securitySettings)
    return false;
  const dynamicCookiesEnabled = (((_c = securitySettings.auth) === null || _c === void 0 ? void 0 : _c.storage) || []).includes(AuthStorageEnum.Cookie);
  const byoJwtCookieEnabled = Boolean((_d = securitySettings.externalAuth) === null || _d === void 0 ? void 0 : _d.cookieName);
  return dynamicCookiesEnabled || byoJwtCookieEnabled;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/api.js
var sdkApi = ({ customHeaders } = {}) => {
  const settings = {
    basePath: ApiEndpoint.getBaseUrl(),
    headers: Object.assign({ "Content-Type": "application/json" }, customHeaders)
  };
  const minJwt = getMinAuthToken();
  if (minJwt) {
    settings.headers.Authorization = `Bearer ${minJwt}`;
  }
  const credentials = isCookieEnabled() ? "include" : void 0;
  settings.headers["x-dyn-version"] = `WalletKit/${VERSION}`;
  settings.headers["x-dyn-api-version"] = `API/${API_VERSION}`;
  return new SDKApi(new Configuration(Object.assign(Object.assign({}, settings), { credentials, fetchApi: FetchService.fetch })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/settings/settings.js
var fetchProjectSettings = (environmentId) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const res = yield sdkApi().getEnvironmentSettings({
      environmentId,
      sdkVersion: `WalletKit/${VERSION}`
    }, {
      credentials: "omit"
    });
    return res;
  } catch (e2) {
    logger2.error(e2);
    return void 0;
  }
});
var sendDynamicProps = (environmentId, settingsToSend) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const { dynamicContextProps, dynamicWagmiSettings, frameworkSettings } = settingsToSend;
    if (dynamicContextProps) {
      yield sendDynamicContextSettings(environmentId, { dynamicContextProps, frameworkSettings }, isDynamicContextSessionSettingExpired, setDynamicContextSessionSettings);
    }
    if (dynamicWagmiSettings) {
      yield sendDynamicContextSettings(environmentId, { dynamicWagmiSettings }, isWagmiSessionSettingExpired, setWagmiSessionSettings);
    }
  } catch (error) {
    logger2.warn("Error caught when sending sdkSettings to api. Please notify Dynamic, and send the DynamicContextProvider settings you currently have configured", { error });
  }
});
var sendDynamicContextSettings = (environmentId, sdkSettingsRequest, isSdkSettingExpired, setSDKSessionSettings) => __awaiter(void 0, void 0, void 0, function* () {
  if (!isSdkSettingExpired()) {
    return;
  }
  yield sdkApi().logDynamicSdkSettings({ environmentId, sdkSettingsRequest });
  setSDKSessionSettings();
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/AccessDeniedContext/AccessDeniedContext.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var import_react31 = __toESM(require_react(), 1);
var AccessDeniedContext = (0, import_react31.createContext)(void 0);
var AccessDeniedContextProvider = ({ children }) => {
  const [deniedOauthUsername, setDeniedOauthUsername] = (0, import_react31.useState)("");
  const [deniedAddress, setDeniedAddress] = (0, import_react31.useState)("");
  const [deniedOauthProvider, setDeniedOauthProvider] = (0, import_react31.useState)(void 0);
  const value = (0, import_react31.useMemo)(() => ({
    deniedAddress,
    deniedOauthProvider,
    deniedOauthUsername,
    setDeniedAddress,
    setDeniedOauthProvider,
    setDeniedOauthUsername
  }), [deniedAddress, deniedOauthProvider, deniedOauthUsername]);
  return (0, import_jsx_runtime10.jsx)(AccessDeniedContext.Provider, { value, children });
};
var useAccessDeniedContext = () => {
  const context = (0, import_react31.useContext)(AccessDeniedContext);
  if (context === void 0) {
    throw new Error("usage of useAccessDeniedContext not wrapped in `AccessDeniedContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/AccountExistsContext/AccountExistsContext.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var import_react32 = __toESM(require_react(), 1);
var AccountExistsContext = (0, import_react32.createContext)(void 0);
var AccountExistsContextProvider = ({ children }) => {
  const [existentAccountData, setExistentAccountData] = (0, import_react32.useState)();
  const value = (0, import_react32.useMemo)(() => ({
    existentAccountData,
    setExistentAccountData
  }), [existentAccountData, setExistentAccountData]);
  return (0, import_jsx_runtime11.jsx)(AccountExistsContext.Provider, { value, children });
};
var useAccountExistsContext = () => {
  const context = (0, import_react32.useContext)(AccountExistsContext);
  if (context === void 0) {
    throw new Error("usage of useAccountExistsContext not wrapped in `AccountExistsContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/UserWalletsContext/UserWalletsContext.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var import_react33 = __toESM(require_react(), 1);
var UserWalletsContext = (0, import_react33.createContext)(void 0);
var UserWalletsProvider = ({ children }) => {
  const [userWallets, _setUserWallets] = (0, import_react33.useState)([]);
  const addedWalletsIds = (0, import_react33.useRef)([]);
  const removedWalletsIds = (0, import_react33.useRef)([]);
  const setUserWallets = (0, import_react33.useCallback)((returnUpdatedWallets) => {
    _setUserWallets((prevWallets) => {
      const updatedWallets = returnUpdatedWallets(prevWallets);
      addedWalletsIds.current.forEach((walletId) => {
        const wallet = updatedWallets.find(({ id }) => id === walletId);
        if (!wallet)
          return;
        dynamicEvents.emit("walletAdded", wallet, updatedWallets);
      });
      removedWalletsIds.current.forEach((walletId) => {
        const wallet = prevWallets.find(({ id }) => id === walletId);
        if (!wallet)
          return;
        dynamicEvents.emit("walletRemoved", wallet, updatedWallets);
      });
      addedWalletsIds.current = [];
      removedWalletsIds.current = [];
      return updatedWallets;
    });
  }, []);
  return (0, import_jsx_runtime12.jsx)(UserWalletsContext.Provider, { value: {
    addedWalletsIds,
    registerUserWallet: (newWallet) => setUserWallets((userWallets2) => [...userWallets2, newWallet]),
    removeUserWallet: (walletId) => setUserWallets((userWallets2) => userWallets2.filter(({ id }) => walletId !== id)),
    removedWalletsIds,
    setUserWallets,
    userWallets
  }, children });
};
var useInternalUserWallets = () => {
  const context = (0, import_react33.useContext)(UserWalletsContext);
  if (!context)
    throw new Error("Can only call useInternalUserWallets inside UserWalletsProvider");
  return context;
};
var useUserWallets = () => {
  const context = (0, import_react33.useContext)(UserWalletsContext);
  if (!context)
    throw new Error("Can only call useUserWallets inside UserWalletsProvider");
  return context.userWallets;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/VerificationContext/VerificationContext.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var import_react34 = __toESM(require_react(), 1);
var VerificationContext = (0, import_react34.createContext)(void 0);
var VerificationProvider = ({ children }) => {
  const [displayedDestination, setDisplayedDestination] = (0, import_react34.useState)(void 0);
  const [verificationUUID, setVerificationUUID] = (0, import_react34.useState)(void 0);
  const [retryData, setRetryData] = (0, import_react34.useState)(void 0);
  const value = (0, import_react34.useMemo)(() => ({
    displayedDestination,
    retryData,
    setDisplayedDestination,
    setRetryData,
    setVerificationUUID,
    verificationUUID
  }), [displayedDestination, retryData, verificationUUID]);
  return (0, import_jsx_runtime13.jsx)(VerificationContext.Provider, { value, children });
};
var useVerification = () => {
  const context = (0, import_react34.useContext)(VerificationContext);
  if (context === void 0) {
    throw new Error("usage of useVerification not wrapped in `VerificationProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/projectSettings/projectSettings.js
var import_react_dom103 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/WalletContext/WalletContext.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var import_react35 = __toESM(require_react(), 1);
var WalletContext = (0, import_react35.createContext)(void 0);
var WalletContextProvider = ({ children }) => {
  const [isLoadingEmbeddedWallet, setIsLoadingEmbeddedWallet] = (0, import_react35.useState)(false);
  const value = (0, import_react35.useMemo)(() => ({
    isLoadingEmbeddedWallet,
    setIsLoadingEmbeddedWallet
  }), [isLoadingEmbeddedWallet]);
  return (0, import_jsx_runtime14.jsx)(WalletContext.Provider, { value, children });
};
var useWalletContext = () => {
  const context = (0, import_react35.useContext)(WalletContext);
  if (context === void 0) {
    throw new Error("usage of useWalletContext not wrapped in `WalletContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js
var iframeContainerId = "dyn-secure-enclave-container-id";
var iframeElementId = "dyn-secure-enclave-element-id";
var revealIframeContainerId = "dyn-secure-enclave-export-container-id";
var revealIframeElementId = "dyn-secure-enclave-export-element-id";
var EmbeddedWalletVersion;
(function(EmbeddedWalletVersion2) {
  EmbeddedWalletVersion2["V1"] = "V1";
  EmbeddedWalletVersion2["V2"] = "V2";
})(EmbeddedWalletVersion || (EmbeddedWalletVersion = {}));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePromise/usePromise.js
var import_react36 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePromise/utils/resolveFetcher/resolveFetcher.js
var isPromise = (value) => value instanceof Promise;
var resolveFetcher = (fetcher_1, _a, callback_1) => __awaiter(void 0, [fetcher_1, _a, callback_1], void 0, function* (fetcher, { retries }, callback) {
  const totalNumberOfAttempts = retries ? retries + 1 : 1;
  let currentAttempt = 0;
  let data;
  let err;
  while (currentAttempt < totalNumberOfAttempts) {
    currentAttempt = currentAttempt + 1;
    try {
      const result = fetcher();
      if (isPromise(result)) {
        data = yield result;
      } else {
        data = result;
      }
      err = void 0;
      if (data) {
        break;
      }
    } catch (error) {
      err = error;
    }
  }
  callback(err, data);
  return data;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePromise/usePromise.js
var usePromise = (fetcher, options2) => {
  const lastCallTimestamp = (0, import_react36.useRef)((/* @__PURE__ */ new Date()).getTime());
  const { deps = [], initialData = void 0, enabled = true, retries = 0, onBeforeFetch = () => {
  }, onReject = () => {
  }, onResolve = () => {
  } } = options2 || {};
  const [data, setData] = (0, import_react36.useState)(initialData);
  const [isLoading, setIsLoading] = (0, import_react36.useState)(enabled);
  const [error, setError] = (0, import_react36.useState)(void 0);
  const trigger = (0, import_react36.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    const callTimestamp = (/* @__PURE__ */ new Date()).getTime();
    const diffFromLastCall = callTimestamp - lastCallTimestamp.current;
    if (diffFromLastCall < 5) {
      logger2.warn("usePromise: Fetcher function was called in very quick succession. Please make sure the fetcher function is not synchronous and that you are not calling it inside a loop.", deps);
    }
    lastCallTimestamp.current = callTimestamp;
    setIsLoading(true);
    onBeforeFetch();
    return resolveFetcher(fetcher, { retries }, (resultError, resultData) => {
      if (callTimestamp !== lastCallTimestamp.current)
        return;
      if (resultError) {
        logger2.error(resultError);
        setError(resultError);
        onReject === null || onReject === void 0 ? void 0 : onReject(resultError);
        return;
      }
      setData(resultData);
      onResolve === null || onResolve === void 0 ? void 0 : onResolve(resultData);
    }).finally(() => setIsLoading(false));
  }), deps);
  (0, import_react36.useEffect)(() => {
    if (enabled)
      trigger();
  }, [trigger, enabled]);
  return (0, import_react36.useMemo)(() => ({
    data,
    error,
    isLoading,
    retrigger: trigger
  }), [data, error, isLoading, trigger]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/ThemeContext.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var import_react39 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isSSR/isSSR.js
var isSSR = () => typeof window === "undefined";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/themesData.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var import_react37 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/getValueByKey/index.js
var getValueByKey = (objectData, keyName) => objectData[keyName];

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/themesData.js
var getDefaultColor = (name = "light") => name === "light" ? "#2660FF" : "#7000FF";
var themesData = {
  border: "rounded",
  brandStyle: "subtle",
  customColor: "",
  template: "default",
  themes: {
    auto: {
      colors: {
        accent_1: "#2C303A",
        accent_2: "#3C414D",
        accent_3: "#4C525F",
        background: "#15181F",
        border: "1px solid #2C303A",
        error_1: "rgba(255, 106, 106, 0.2)",
        error_2: "#FF6A6A",
        footer: "#2C303A",
        primary: "#15181F",
        secondary: "#2C303A",
        ternary: "#2660FF",
        textPrimary: "#FFF",
        textSecondary: "#ACACB9"
      },
      name: "auto"
    },
    dark: {
      colors: {
        accent_1: "#2C303A",
        accent_2: "#3C414D",
        accent_3: "#4C525F",
        background: "#15181F",
        border: "1px solid #2C303A",
        error_1: "rgba(255, 106, 106, 0.2)",
        error_2: "#FF6A6A",
        footer: "#2C303A",
        primary: "#15181F",
        secondary: "#2C303A",
        ternary: "#2660FF",
        textPrimary: "#FFF",
        textSecondary: "#ACACB9"
      },
      name: "dark"
    },
    light: {
      colors: {
        accent_1: "#FFF",
        accent_2: "#F0F3FF",
        accent_3: "#E9EDFC",
        background: "#FFFFFF",
        border: "1px solid #E9EDFC",
        error_1: "rgba(255, 70, 70, 0.1)",
        error_2: "#FF4646",
        footer: "#F7F9FE",
        primary: "#F7F7F9",
        secondary: "#FFFFFF",
        ternary: "#2660FF",
        textPrimary: "#404040",
        textSecondary: "#80858B"
      },
      name: "light"
    }
  },
  view: "extended",
  walletColor: {
    color: "#1648F9",
    gradient: "90deg, #1648F9 0%, #4B73FF 100%"
  }
};
var getThemeConfig = (modalSettings, themeMode) => {
  const { border, brand, view, primaryColor } = modalSettings || {};
  const themeName = themeMode || (modalSettings === null || modalSettings === void 0 ? void 0 : modalSettings.theme) || "light";
  const themeTemplate = (modalSettings === null || modalSettings === void 0 ? void 0 : modalSettings.template) || "default";
  return Object.assign(Object.assign({}, themesData), { border: border || themesData.border, brandStyle: brand || themesData.brandStyle, customColor: primaryColor || themesData.customColor, template: themeTemplate, theme: getValueByKey(themesData.themes, themeName), view: view || themesData.view });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/utils/stylesheetBuilder/stylesheetBuilder.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var import_react38 = __toESM(require_react(), 1);
var findOrCreateLinkTag = () => {
  if (isSSR())
    return;
  const existingStyleTag = document.querySelector('[data-source="dynamic-theme-cdn"]');
  if (existingStyleTag) {
    return existingStyleTag;
  }
  const linkTag = document.createElement("link");
  document.head.append(linkTag);
  linkTag.dataset.source = "dynamic-theme-cdn";
  linkTag.rel = "stylesheet";
  return linkTag;
};
var findOrCreateStyleTag = () => {
  if (isSSR())
    return;
  const existingStyleTag = document.querySelector('[data-source="dynamic-theme"]');
  if (existingStyleTag) {
    return existingStyleTag;
  }
  const styleTag = document.createElement("style");
  document.head.append(styleTag);
  styleTag.dataset.source = "dynamic-theme";
  return styleTag;
};
var buildStylesheet = (theme) => {
  const { customColor, brandStyle } = theme;
  const footerBackgroundColor = brandStyle === "bold" ? customColor : void 0;
  const footerIconColor = brandStyle === "subtle" ? customColor : void 0;
  const cssAttributes = [
    ["--dynamic-brand-primary-color", customColor],
    ["--dynamic-badge-dot-background", customColor],
    ["--dynamic-footer-background-color", footerBackgroundColor],
    ["--dynamic-footer-icon-color", footerIconColor]
  ];
  return `@layer dynamic-project-environment-theme {
  #dynamic-widget, #dynamic-modal, .dynamic-shadow-dom {
    ${cssAttributes.filter(([, value]) => value !== void 0 && value !== "").map(([key, value]) => `${key}: ${value};`).join("\n    ")}
  }
}`;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ThemeContext/ThemeContext.js
var ThemeContext = (0, import_react39.createContext)(void 0);
var ThemeContextProvider = ({ customerTheme, designSettings, children }) => {
  const [theme, _setTheme] = (0, import_react39.useState)(customerTheme || getThemeConfig(designSettings === null || designSettings === void 0 ? void 0 : designSettings.modal));
  const linkTag = (0, import_react39.useRef)(findOrCreateLinkTag());
  const styleTag = (0, import_react39.useRef)(findOrCreateStyleTag());
  const setTheme = (0, import_react39.useCallback)((newTheme) => {
    _setTheme(newTheme);
    if (isSSR() || linkTag.current === void 0 || styleTag.current === void 0)
      return;
    document.body.dataset.dynamicTheme = newTheme.theme.name;
    document.body.dataset.dynamicThemeBrand = newTheme.brandStyle;
    const linkHref = newTheme.template === "default" ? "" : `https://app.dynamic.xyz/assets/templates/${newTheme.template}.css`;
    if (linkTag.current.href !== linkHref)
      linkTag.current.href = linkHref;
    const builtStylesheet = buildStylesheet(newTheme);
    if (styleTag.current.innerHTML === builtStylesheet)
      return;
    styleTag.current.innerHTML = builtStylesheet;
  }, []);
  const changeTheme = (0, import_react39.useCallback)((passedTheme, footerColor) => {
    var _a;
    const selectedTheme = (_a = themesData.themes) === null || _a === void 0 ? void 0 : _a[passedTheme];
    const updatedThemeData = Object.assign(Object.assign({}, theme), { theme: Object.assign(Object.assign({}, selectedTheme), { colors: Object.assign(Object.assign({}, selectedTheme.colors), { ternary: footerColor !== null && footerColor !== void 0 ? footerColor : selectedTheme.colors.ternary }) }) });
    setTheme(updatedThemeData);
  }, [setTheme, theme]);
  const changeTemplate = (0, import_react39.useCallback)((template) => setTheme(Object.assign(Object.assign({}, theme), { template })), [setTheme, theme]);
  const changeBorder = (0, import_react39.useCallback)((border) => setTheme(Object.assign(Object.assign({}, theme), { border })), [setTheme, theme]);
  const changeView = (0, import_react39.useCallback)((view) => setTheme(Object.assign(Object.assign({}, theme), { view })), [setTheme, theme]);
  const changePrimaryColor = (0, import_react39.useCallback)((customColor) => setTheme(Object.assign(Object.assign({}, theme), { customColor })), [setTheme, theme]);
  const changeBrandStyle = (0, import_react39.useCallback)((brandStyle) => setTheme(Object.assign(Object.assign({}, theme), { brandStyle })), [setTheme, theme]);
  (0, import_react39.useEffect)(() => setTheme(customerTheme || getThemeConfig(designSettings === null || designSettings === void 0 ? void 0 : designSettings.modal)), [customerTheme, designSettings === null || designSettings === void 0 ? void 0 : designSettings.modal, setTheme]);
  const value = (0, import_react39.useMemo)(() => ({
    changeBorder,
    changeBrandStyle,
    changePrimaryColor,
    changeTemplate,
    changeTheme,
    changeView,
    theme
  }), [
    theme,
    changeBorder,
    changeBrandStyle,
    changeTemplate,
    changeTheme,
    changePrimaryColor,
    changeView
  ]);
  return (0, import_jsx_runtime17.jsx)(ThemeContext.Provider, { value, children });
};
var useThemeContext = () => {
  const context = (0, import_react39.useContext)(ThemeContext);
  if (context === void 0) {
    throw new Error("useThemeContext must be used within a ThemeContextProvider");
  }
  return context;
};

// node_modules/nanoclone/src/index.js
var map;
try {
  map = Map;
} catch (_) {
}
var set;
try {
  set = Set;
} catch (_) {
}
function baseClone(src, circulars, clones) {
  if (!src || typeof src !== "object" || typeof src === "function") {
    return src;
  }
  if (src.nodeType && "cloneNode" in src) {
    return src.cloneNode(true);
  }
  if (src instanceof Date) {
    return new Date(src.getTime());
  }
  if (src instanceof RegExp) {
    return new RegExp(src);
  }
  if (Array.isArray(src)) {
    return src.map(clone);
  }
  if (map && src instanceof map) {
    return new Map(Array.from(src.entries()));
  }
  if (set && src instanceof set) {
    return new Set(Array.from(src.values()));
  }
  if (src instanceof Object) {
    circulars.push(src);
    var obj = Object.create(src);
    clones.push(obj);
    for (var key in src) {
      var idx = circulars.findIndex(function(i) {
        return i === src[key];
      });
      obj[key] = idx > -1 ? clones[idx] : baseClone(src[key], circulars, clones);
    }
    return obj;
  }
  return src;
}
function clone(src) {
  return baseClone(src, [], []);
}

// node_modules/yup/es/util/printValue.js
var toString = Object.prototype.toString;
var errorToString = Error.prototype.toString;
var regExpToString = RegExp.prototype.toString;
var symbolToString = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
function printNumber(val) {
  if (val != +val) return "NaN";
  const isNegativeZero = val === 0 && 1 / val < 0;
  return isNegativeZero ? "-0" : "" + val;
}
function printSimpleValue(val, quoteStrings = false) {
  if (val == null || val === true || val === false) return "" + val;
  const typeOf = typeof val;
  if (typeOf === "number") return printNumber(val);
  if (typeOf === "string") return quoteStrings ? `"${val}"` : val;
  if (typeOf === "function") return "[Function " + (val.name || "anonymous") + "]";
  if (typeOf === "symbol") return symbolToString.call(val).replace(SYMBOL_REGEXP, "Symbol($1)");
  const tag = toString.call(val).slice(8, -1);
  if (tag === "Date") return isNaN(val.getTime()) ? "" + val : val.toISOString(val);
  if (tag === "Error" || val instanceof Error) return "[" + errorToString.call(val) + "]";
  if (tag === "RegExp") return regExpToString.call(val);
  return null;
}
function printValue(value, quoteStrings) {
  let result = printSimpleValue(value, quoteStrings);
  if (result !== null) return result;
  return JSON.stringify(value, function(key, value2) {
    let result2 = printSimpleValue(this[key], quoteStrings);
    if (result2 !== null) return result2;
    return value2;
  }, 2);
}

// node_modules/yup/es/locale.js
var mixed = {
  default: "${path} is invalid",
  required: "${path} is a required field",
  oneOf: "${path} must be one of the following values: ${values}",
  notOneOf: "${path} must not be one of the following values: ${values}",
  notType: ({
    path,
    type,
    value,
    originalValue
  }) => {
    let isCast = originalValue != null && originalValue !== value;
    let msg = `${path} must be a \`${type}\` type, but the final value was: \`${printValue(value, true)}\`` + (isCast ? ` (cast from the value \`${printValue(originalValue, true)}\`).` : ".");
    if (value === null) {
      msg += `
 If "null" is intended as an empty value be sure to mark the schema as \`.nullable()\``;
    }
    return msg;
  },
  defined: "${path} must be defined"
};
var string = {
  length: "${path} must be exactly ${length} characters",
  min: "${path} must be at least ${min} characters",
  max: "${path} must be at most ${max} characters",
  matches: '${path} must match the following: "${regex}"',
  email: "${path} must be a valid email",
  url: "${path} must be a valid URL",
  uuid: "${path} must be a valid UUID",
  trim: "${path} must be a trimmed string",
  lowercase: "${path} must be a lowercase string",
  uppercase: "${path} must be a upper case string"
};
var number = {
  min: "${path} must be greater than or equal to ${min}",
  max: "${path} must be less than or equal to ${max}",
  lessThan: "${path} must be less than ${less}",
  moreThan: "${path} must be greater than ${more}",
  positive: "${path} must be a positive number",
  negative: "${path} must be a negative number",
  integer: "${path} must be an integer"
};
var date = {
  min: "${path} field must be later than ${min}",
  max: "${path} field must be at earlier than ${max}"
};
var boolean = {
  isValue: "${path} field must be ${value}"
};
var object = {
  noUnknown: "${path} field has unspecified keys: ${unknown}"
};
var array = {
  min: "${path} field must have at least ${min} items",
  max: "${path} field must have less than or equal to ${max} items",
  length: "${path} must have ${length} items"
};
var locale_default = Object.assign(/* @__PURE__ */ Object.create(null), {
  mixed,
  string,
  number,
  date,
  object,
  array,
  boolean
});

// node_modules/yup/es/Condition.js
var import_has = __toESM(require_has());

// node_modules/yup/es/util/isSchema.js
var isSchema = (obj) => obj && obj.__isYupSchema__;
var isSchema_default = isSchema;

// node_modules/yup/es/Condition.js
var Condition = class {
  constructor(refs, options2) {
    this.fn = void 0;
    this.refs = refs;
    this.refs = refs;
    if (typeof options2 === "function") {
      this.fn = options2;
      return;
    }
    if (!(0, import_has.default)(options2, "is")) throw new TypeError("`is:` is required for `when()` conditions");
    if (!options2.then && !options2.otherwise) throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
    let {
      is,
      then,
      otherwise
    } = options2;
    let check = typeof is === "function" ? is : (...values) => values.every((value) => value === is);
    this.fn = function(...args) {
      let options3 = args.pop();
      let schema = args.pop();
      let branch = check(...args) ? then : otherwise;
      if (!branch) return void 0;
      if (typeof branch === "function") return branch(schema);
      return schema.concat(branch.resolve(options3));
    };
  }
  resolve(base, options2) {
    let values = this.refs.map((ref) => ref.getValue(options2 == null ? void 0 : options2.value, options2 == null ? void 0 : options2.parent, options2 == null ? void 0 : options2.context));
    let schema = this.fn.apply(base, values.concat(base, options2));
    if (schema === void 0 || schema === base) return base;
    if (!isSchema_default(schema)) throw new TypeError("conditions must return a schema object");
    return schema.resolve(options2);
  }
};
var Condition_default = Condition;

// node_modules/yup/es/util/toArray.js
function toArray(value) {
  return value == null ? [] : [].concat(value);
}

// node_modules/yup/es/ValidationError.js
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
var strReg = /\$\{\s*(\w+)\s*\}/g;
var ValidationError = class _ValidationError extends Error {
  static formatError(message, params) {
    const path = params.label || params.path || "this";
    if (path !== params.path) params = _extends3({}, params, {
      path
    });
    if (typeof message === "string") return message.replace(strReg, (_, key) => printValue(params[key]));
    if (typeof message === "function") return message(params);
    return message;
  }
  static isError(err) {
    return err && err.name === "ValidationError";
  }
  constructor(errorOrErrors, value, field, type) {
    super();
    this.value = void 0;
    this.path = void 0;
    this.type = void 0;
    this.errors = void 0;
    this.params = void 0;
    this.inner = void 0;
    this.name = "ValidationError";
    this.value = value;
    this.path = field;
    this.type = type;
    this.errors = [];
    this.inner = [];
    toArray(errorOrErrors).forEach((err) => {
      if (_ValidationError.isError(err)) {
        this.errors.push(...err.errors);
        this.inner = this.inner.concat(err.inner.length ? err.inner : err);
      } else {
        this.errors.push(err);
      }
    });
    this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
    if (Error.captureStackTrace) Error.captureStackTrace(this, _ValidationError);
  }
};

// node_modules/yup/es/util/runTests.js
var once2 = (cb) => {
  let fired = false;
  return (...args) => {
    if (fired) return;
    fired = true;
    cb(...args);
  };
};
function runTests(options2, cb) {
  let {
    endEarly,
    tests,
    args,
    value,
    errors,
    sort,
    path
  } = options2;
  let callback = once2(cb);
  let count = tests.length;
  const nestedErrors = [];
  errors = errors ? errors : [];
  if (!count) return errors.length ? callback(new ValidationError(errors, value, path)) : callback(null, value);
  for (let i = 0; i < tests.length; i++) {
    const test = tests[i];
    test(args, function finishTestRun(err) {
      if (err) {
        if (!ValidationError.isError(err)) {
          return callback(err, value);
        }
        if (endEarly) {
          err.value = value;
          return callback(err, value);
        }
        nestedErrors.push(err);
      }
      if (--count <= 0) {
        if (nestedErrors.length) {
          if (sort) nestedErrors.sort(sort);
          if (errors.length) nestedErrors.push(...errors);
          errors = nestedErrors;
        }
        if (errors.length) {
          callback(new ValidationError(errors, value, path), value);
          return;
        }
        callback(null, value);
      }
    });
  }
}

// node_modules/yup/es/util/createValidation.js
var import_mapValues = __toESM(require_mapValues());

// node_modules/yup/es/Reference.js
var import_property_expr = __toESM(require_property_expr());
var prefixes = {
  context: "$",
  value: "."
};
var Reference = class {
  constructor(key, options2 = {}) {
    this.key = void 0;
    this.isContext = void 0;
    this.isValue = void 0;
    this.isSibling = void 0;
    this.path = void 0;
    this.getter = void 0;
    this.map = void 0;
    if (typeof key !== "string") throw new TypeError("ref must be a string, got: " + key);
    this.key = key.trim();
    if (key === "") throw new TypeError("ref must be a non-empty string");
    this.isContext = this.key[0] === prefixes.context;
    this.isValue = this.key[0] === prefixes.value;
    this.isSibling = !this.isContext && !this.isValue;
    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : "";
    this.path = this.key.slice(prefix.length);
    this.getter = this.path && (0, import_property_expr.getter)(this.path, true);
    this.map = options2.map;
  }
  getValue(value, parent, context) {
    let result = this.isContext ? context : this.isValue ? value : parent;
    if (this.getter) result = this.getter(result || {});
    if (this.map) result = this.map(result);
    return result;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */
  cast(value, options2) {
    return this.getValue(value, options2 == null ? void 0 : options2.parent, options2 == null ? void 0 : options2.context);
  }
  resolve() {
    return this;
  }
  describe() {
    return {
      type: "ref",
      key: this.key
    };
  }
  toString() {
    return `Ref(${this.key})`;
  }
  static isRef(value) {
    return value && value.__isYupRef;
  }
};
Reference.prototype.__isYupRef = true;

// node_modules/yup/es/util/createValidation.js
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function createValidation(config2) {
  function validate(_ref2, cb) {
    let {
      value,
      path = "",
      label,
      options: options2,
      originalValue,
      sync
    } = _ref2, rest = _objectWithoutPropertiesLoose2(_ref2, ["value", "path", "label", "options", "originalValue", "sync"]);
    const {
      name,
      test,
      params,
      message
    } = config2;
    let {
      parent,
      context
    } = options2;
    function resolve(item) {
      return Reference.isRef(item) ? item.getValue(value, parent, context) : item;
    }
    function createError(overrides = {}) {
      const nextParams = (0, import_mapValues.default)(_extends4({
        value,
        originalValue,
        label,
        path: overrides.path || path
      }, params, overrides.params), resolve);
      const error = new ValidationError(ValidationError.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);
      error.params = nextParams;
      return error;
    }
    let ctx = _extends4({
      path,
      parent,
      type: name,
      createError,
      resolve,
      options: options2,
      originalValue
    }, rest);
    if (!sync) {
      try {
        Promise.resolve(test.call(ctx, value, ctx)).then((validOrError) => {
          if (ValidationError.isError(validOrError)) cb(validOrError);
          else if (!validOrError) cb(createError());
          else cb(null, validOrError);
        }).catch(cb);
      } catch (err) {
        cb(err);
      }
      return;
    }
    let result;
    try {
      var _ref22;
      result = test.call(ctx, value, ctx);
      if (typeof ((_ref22 = result) == null ? void 0 : _ref22.then) === "function") {
        throw new Error(`Validation test of type: "${ctx.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`);
      }
    } catch (err) {
      cb(err);
      return;
    }
    if (ValidationError.isError(result)) cb(result);
    else if (!result) cb(createError());
    else cb(null, result);
  }
  validate.OPTIONS = config2;
  return validate;
}

// node_modules/yup/es/util/reach.js
var import_property_expr2 = __toESM(require_property_expr());
var trim = (part) => part.substr(0, part.length - 1).substr(1);
function getIn(schema, path, value, context = value) {
  let parent, lastPart, lastPartDebug;
  if (!path) return {
    parent,
    parentPath: path,
    schema
  };
  (0, import_property_expr2.forEach)(path, (_part, isBracket, isArray2) => {
    let part = isBracket ? trim(_part) : _part;
    schema = schema.resolve({
      context,
      parent,
      value
    });
    if (schema.innerType) {
      let idx = isArray2 ? parseInt(part, 10) : 0;
      if (value && idx >= value.length) {
        throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. because there is no value at that index. `);
      }
      parent = value;
      value = value && value[idx];
      schema = schema.innerType;
    }
    if (!isArray2) {
      if (!schema.fields || !schema.fields[part]) throw new Error(`The schema does not contain the path: ${path}. (failed at: ${lastPartDebug} which is a type: "${schema._type}")`);
      parent = value;
      value = value && value[part];
      schema = schema.fields[part];
    }
    lastPart = part;
    lastPartDebug = isBracket ? "[" + _part + "]" : "." + _part;
  });
  return {
    schema,
    parent,
    parentPath: lastPart
  };
}

// node_modules/yup/es/util/ReferenceSet.js
var ReferenceSet = class _ReferenceSet {
  constructor() {
    this.list = void 0;
    this.refs = void 0;
    this.list = /* @__PURE__ */ new Set();
    this.refs = /* @__PURE__ */ new Map();
  }
  get size() {
    return this.list.size + this.refs.size;
  }
  describe() {
    const description = [];
    for (const item of this.list) description.push(item);
    for (const [, ref] of this.refs) description.push(ref.describe());
    return description;
  }
  toArray() {
    return Array.from(this.list).concat(Array.from(this.refs.values()));
  }
  resolveAll(resolve) {
    return this.toArray().reduce((acc, e2) => acc.concat(Reference.isRef(e2) ? resolve(e2) : e2), []);
  }
  add(value) {
    Reference.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
  }
  delete(value) {
    Reference.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);
  }
  clone() {
    const next = new _ReferenceSet();
    next.list = new Set(this.list);
    next.refs = new Map(this.refs);
    return next;
  }
  merge(newItems, removeItems) {
    const next = this.clone();
    newItems.list.forEach((value) => next.add(value));
    newItems.refs.forEach((value) => next.add(value));
    removeItems.list.forEach((value) => next.delete(value));
    removeItems.refs.forEach((value) => next.delete(value));
    return next;
  }
};

// node_modules/yup/es/schema.js
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
var BaseSchema = class {
  constructor(options2) {
    this.deps = [];
    this.tests = void 0;
    this.transforms = void 0;
    this.conditions = [];
    this._mutate = void 0;
    this._typeError = void 0;
    this._whitelist = new ReferenceSet();
    this._blacklist = new ReferenceSet();
    this.exclusiveTests = /* @__PURE__ */ Object.create(null);
    this.spec = void 0;
    this.tests = [];
    this.transforms = [];
    this.withMutation(() => {
      this.typeError(mixed.notType);
    });
    this.type = (options2 == null ? void 0 : options2.type) || "mixed";
    this.spec = _extends5({
      strip: false,
      strict: false,
      abortEarly: true,
      recursive: true,
      nullable: false,
      presence: "optional"
    }, options2 == null ? void 0 : options2.spec);
  }
  // TODO: remove
  get _type() {
    return this.type;
  }
  _typeCheck(_value) {
    return true;
  }
  clone(spec) {
    if (this._mutate) {
      if (spec) Object.assign(this.spec, spec);
      return this;
    }
    const next = Object.create(Object.getPrototypeOf(this));
    next.type = this.type;
    next._typeError = this._typeError;
    next._whitelistError = this._whitelistError;
    next._blacklistError = this._blacklistError;
    next._whitelist = this._whitelist.clone();
    next._blacklist = this._blacklist.clone();
    next.exclusiveTests = _extends5({}, this.exclusiveTests);
    next.deps = [...this.deps];
    next.conditions = [...this.conditions];
    next.tests = [...this.tests];
    next.transforms = [...this.transforms];
    next.spec = clone(_extends5({}, this.spec, spec));
    return next;
  }
  label(label) {
    let next = this.clone();
    next.spec.label = label;
    return next;
  }
  meta(...args) {
    if (args.length === 0) return this.spec.meta;
    let next = this.clone();
    next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
    return next;
  }
  // withContext<TContext extends AnyObject>(): BaseSchema<
  //   TCast,
  //   TContext,
  //   TOutput
  // > {
  //   return this as any;
  // }
  withMutation(fn) {
    let before = this._mutate;
    this._mutate = true;
    let result = fn(this);
    this._mutate = before;
    return result;
  }
  concat(schema) {
    if (!schema || schema === this) return this;
    if (schema.type !== this.type && this.type !== "mixed") throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema.type}`);
    let base = this;
    let combined = schema.clone();
    const mergedSpec = _extends5({}, base.spec, combined.spec);
    combined.spec = mergedSpec;
    combined._typeError || (combined._typeError = base._typeError);
    combined._whitelistError || (combined._whitelistError = base._whitelistError);
    combined._blacklistError || (combined._blacklistError = base._blacklistError);
    combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
    combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist);
    combined.tests = base.tests;
    combined.exclusiveTests = base.exclusiveTests;
    combined.withMutation((next) => {
      schema.tests.forEach((fn) => {
        next.test(fn.OPTIONS);
      });
    });
    combined.transforms = [...base.transforms, ...combined.transforms];
    return combined;
  }
  isType(v) {
    if (this.spec.nullable && v === null) return true;
    return this._typeCheck(v);
  }
  resolve(options2) {
    let schema = this;
    if (schema.conditions.length) {
      let conditions = schema.conditions;
      schema = schema.clone();
      schema.conditions = [];
      schema = conditions.reduce((schema2, condition) => condition.resolve(schema2, options2), schema);
      schema = schema.resolve(options2);
    }
    return schema;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */
  cast(value, options2 = {}) {
    let resolvedSchema = this.resolve(_extends5({
      value
    }, options2));
    let result = resolvedSchema._cast(value, options2);
    if (value !== void 0 && options2.assert !== false && resolvedSchema.isType(result) !== true) {
      let formattedValue = printValue(value);
      let formattedResult = printValue(result);
      throw new TypeError(`The value of ${options2.path || "field"} could not be cast to a value that satisfies the schema type: "${resolvedSchema._type}". 

attempted value: ${formattedValue} 
` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ""));
    }
    return result;
  }
  _cast(rawValue, _options) {
    let value = rawValue === void 0 ? rawValue : this.transforms.reduce((value2, fn) => fn.call(this, value2, rawValue, this), rawValue);
    if (value === void 0) {
      value = this.getDefault();
    }
    return value;
  }
  _validate(_value, options2 = {}, cb) {
    let {
      sync,
      path,
      from = [],
      originalValue = _value,
      strict = this.spec.strict,
      abortEarly = this.spec.abortEarly
    } = options2;
    let value = _value;
    if (!strict) {
      value = this._cast(value, _extends5({
        assert: false
      }, options2));
    }
    let args = {
      value,
      path,
      options: options2,
      originalValue,
      schema: this,
      label: this.spec.label,
      sync,
      from
    };
    let initialTests = [];
    if (this._typeError) initialTests.push(this._typeError);
    let finalTests = [];
    if (this._whitelistError) finalTests.push(this._whitelistError);
    if (this._blacklistError) finalTests.push(this._blacklistError);
    runTests({
      args,
      value,
      path,
      sync,
      tests: initialTests,
      endEarly: abortEarly
    }, (err) => {
      if (err) return void cb(err, value);
      runTests({
        tests: this.tests.concat(finalTests),
        args,
        path,
        sync,
        value,
        endEarly: abortEarly
      }, cb);
    });
  }
  validate(value, options2, maybeCb) {
    let schema = this.resolve(_extends5({}, options2, {
      value
    }));
    return typeof maybeCb === "function" ? schema._validate(value, options2, maybeCb) : new Promise((resolve, reject) => schema._validate(value, options2, (err, value2) => {
      if (err) reject(err);
      else resolve(value2);
    }));
  }
  validateSync(value, options2) {
    let schema = this.resolve(_extends5({}, options2, {
      value
    }));
    let result;
    schema._validate(value, _extends5({}, options2, {
      sync: true
    }), (err, value2) => {
      if (err) throw err;
      result = value2;
    });
    return result;
  }
  isValid(value, options2) {
    return this.validate(value, options2).then(() => true, (err) => {
      if (ValidationError.isError(err)) return false;
      throw err;
    });
  }
  isValidSync(value, options2) {
    try {
      this.validateSync(value, options2);
      return true;
    } catch (err) {
      if (ValidationError.isError(err)) return false;
      throw err;
    }
  }
  _getDefault() {
    let defaultValue = this.spec.default;
    if (defaultValue == null) {
      return defaultValue;
    }
    return typeof defaultValue === "function" ? defaultValue.call(this) : clone(defaultValue);
  }
  getDefault(options2) {
    let schema = this.resolve(options2 || {});
    return schema._getDefault();
  }
  default(def) {
    if (arguments.length === 0) {
      return this._getDefault();
    }
    let next = this.clone({
      default: def
    });
    return next;
  }
  strict(isStrict = true) {
    let next = this.clone();
    next.spec.strict = isStrict;
    return next;
  }
  _isPresent(value) {
    return value != null;
  }
  defined(message = mixed.defined) {
    return this.test({
      message,
      name: "defined",
      exclusive: true,
      test(value) {
        return value !== void 0;
      }
    });
  }
  required(message = mixed.required) {
    return this.clone({
      presence: "required"
    }).withMutation((s) => s.test({
      message,
      name: "required",
      exclusive: true,
      test(value) {
        return this.schema._isPresent(value);
      }
    }));
  }
  notRequired() {
    let next = this.clone({
      presence: "optional"
    });
    next.tests = next.tests.filter((test) => test.OPTIONS.name !== "required");
    return next;
  }
  nullable(isNullable = true) {
    let next = this.clone({
      nullable: isNullable !== false
    });
    return next;
  }
  transform(fn) {
    let next = this.clone();
    next.transforms.push(fn);
    return next;
  }
  /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */
  test(...args) {
    let opts;
    if (args.length === 1) {
      if (typeof args[0] === "function") {
        opts = {
          test: args[0]
        };
      } else {
        opts = args[0];
      }
    } else if (args.length === 2) {
      opts = {
        name: args[0],
        test: args[1]
      };
    } else {
      opts = {
        name: args[0],
        message: args[1],
        test: args[2]
      };
    }
    if (opts.message === void 0) opts.message = mixed.default;
    if (typeof opts.test !== "function") throw new TypeError("`test` is a required parameters");
    let next = this.clone();
    let validate = createValidation(opts);
    let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
    if (opts.exclusive) {
      if (!opts.name) throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
    }
    if (opts.name) next.exclusiveTests[opts.name] = !!opts.exclusive;
    next.tests = next.tests.filter((fn) => {
      if (fn.OPTIONS.name === opts.name) {
        if (isExclusive) return false;
        if (fn.OPTIONS.test === validate.OPTIONS.test) return false;
      }
      return true;
    });
    next.tests.push(validate);
    return next;
  }
  when(keys2, options2) {
    if (!Array.isArray(keys2) && typeof keys2 !== "string") {
      options2 = keys2;
      keys2 = ".";
    }
    let next = this.clone();
    let deps = toArray(keys2).map((key) => new Reference(key));
    deps.forEach((dep) => {
      if (dep.isSibling) next.deps.push(dep.key);
    });
    next.conditions.push(new Condition_default(deps, options2));
    return next;
  }
  typeError(message) {
    let next = this.clone();
    next._typeError = createValidation({
      message,
      name: "typeError",
      test(value) {
        if (value !== void 0 && !this.schema.isType(value)) return this.createError({
          params: {
            type: this.schema._type
          }
        });
        return true;
      }
    });
    return next;
  }
  oneOf(enums, message = mixed.oneOf) {
    let next = this.clone();
    enums.forEach((val) => {
      next._whitelist.add(val);
      next._blacklist.delete(val);
    });
    next._whitelistError = createValidation({
      message,
      name: "oneOf",
      test(value) {
        if (value === void 0) return true;
        let valids = this.schema._whitelist;
        let resolved = valids.resolveAll(this.resolve);
        return resolved.includes(value) ? true : this.createError({
          params: {
            values: valids.toArray().join(", "),
            resolved
          }
        });
      }
    });
    return next;
  }
  notOneOf(enums, message = mixed.notOneOf) {
    let next = this.clone();
    enums.forEach((val) => {
      next._blacklist.add(val);
      next._whitelist.delete(val);
    });
    next._blacklistError = createValidation({
      message,
      name: "notOneOf",
      test(value) {
        let invalids = this.schema._blacklist;
        let resolved = invalids.resolveAll(this.resolve);
        if (resolved.includes(value)) return this.createError({
          params: {
            values: invalids.toArray().join(", "),
            resolved
          }
        });
        return true;
      }
    });
    return next;
  }
  strip(strip = true) {
    let next = this.clone();
    next.spec.strip = strip;
    return next;
  }
  describe() {
    const next = this.clone();
    const {
      label,
      meta
    } = next.spec;
    const description = {
      meta,
      label,
      type: next.type,
      oneOf: next._whitelist.describe(),
      notOneOf: next._blacklist.describe(),
      tests: next.tests.map((fn) => ({
        name: fn.OPTIONS.name,
        params: fn.OPTIONS.params
      })).filter((n, idx, list) => list.findIndex((c) => c.name === n.name) === idx)
    };
    return description;
  }
};
BaseSchema.prototype.__isYupSchema__ = true;
for (const method of ["validate", "validateSync"]) BaseSchema.prototype[`${method}At`] = function(path, value, options2 = {}) {
  const {
    parent,
    parentPath,
    schema
  } = getIn(this, path, value, options2.context);
  return schema[method](parent && parent[parentPath], _extends5({}, options2, {
    parent,
    path
  }));
};
for (const alias of ["equals", "is"]) BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;
for (const alias of ["not", "nope"]) BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;
BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;

// node_modules/yup/es/mixed.js
var Mixed = BaseSchema;
function create() {
  return new Mixed();
}
create.prototype = Mixed.prototype;

// node_modules/yup/es/util/isAbsent.js
var isAbsent = (value) => value == null;
var isAbsent_default = isAbsent;

// node_modules/yup/es/boolean.js
function create2() {
  return new BooleanSchema();
}
var BooleanSchema = class extends BaseSchema {
  constructor() {
    super({
      type: "boolean"
    });
    this.withMutation(() => {
      this.transform(function(value) {
        if (!this.isType(value)) {
          if (/^(true|1)$/i.test(String(value))) return true;
          if (/^(false|0)$/i.test(String(value))) return false;
        }
        return value;
      });
    });
  }
  _typeCheck(v) {
    if (v instanceof Boolean) v = v.valueOf();
    return typeof v === "boolean";
  }
  isTrue(message = boolean.isValue) {
    return this.test({
      message,
      name: "is-value",
      exclusive: true,
      params: {
        value: "true"
      },
      test(value) {
        return isAbsent_default(value) || value === true;
      }
    });
  }
  isFalse(message = boolean.isValue) {
    return this.test({
      message,
      name: "is-value",
      exclusive: true,
      params: {
        value: "false"
      },
      test(value) {
        return isAbsent_default(value) || value === false;
      }
    });
  }
};
create2.prototype = BooleanSchema.prototype;

// node_modules/yup/es/string.js
var rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
var rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
var rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
var isTrimmed = (value) => isAbsent_default(value) || value === value.trim();
var objStringTag = {}.toString();
function create3() {
  return new StringSchema();
}
var StringSchema = class extends BaseSchema {
  constructor() {
    super({
      type: "string"
    });
    this.withMutation(() => {
      this.transform(function(value) {
        if (this.isType(value)) return value;
        if (Array.isArray(value)) return value;
        const strValue = value != null && value.toString ? value.toString() : value;
        if (strValue === objStringTag) return value;
        return strValue;
      });
    });
  }
  _typeCheck(value) {
    if (value instanceof String) value = value.valueOf();
    return typeof value === "string";
  }
  _isPresent(value) {
    return super._isPresent(value) && !!value.length;
  }
  length(length, message = string.length) {
    return this.test({
      message,
      name: "length",
      exclusive: true,
      params: {
        length
      },
      test(value) {
        return isAbsent_default(value) || value.length === this.resolve(length);
      }
    });
  }
  min(min, message = string.min) {
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      test(value) {
        return isAbsent_default(value) || value.length >= this.resolve(min);
      }
    });
  }
  max(max, message = string.max) {
    return this.test({
      name: "max",
      exclusive: true,
      message,
      params: {
        max
      },
      test(value) {
        return isAbsent_default(value) || value.length <= this.resolve(max);
      }
    });
  }
  matches(regex, options2) {
    let excludeEmptyString = false;
    let message;
    let name;
    if (options2) {
      if (typeof options2 === "object") {
        ({
          excludeEmptyString = false,
          message,
          name
        } = options2);
      } else {
        message = options2;
      }
    }
    return this.test({
      name: name || "matches",
      message: message || string.matches,
      params: {
        regex
      },
      test: (value) => isAbsent_default(value) || value === "" && excludeEmptyString || value.search(regex) !== -1
    });
  }
  email(message = string.email) {
    return this.matches(rEmail, {
      name: "email",
      message,
      excludeEmptyString: true
    });
  }
  url(message = string.url) {
    return this.matches(rUrl, {
      name: "url",
      message,
      excludeEmptyString: true
    });
  }
  uuid(message = string.uuid) {
    return this.matches(rUUID, {
      name: "uuid",
      message,
      excludeEmptyString: false
    });
  }
  //-- transforms --
  ensure() {
    return this.default("").transform((val) => val === null ? "" : val);
  }
  trim(message = string.trim) {
    return this.transform((val) => val != null ? val.trim() : val).test({
      message,
      name: "trim",
      test: isTrimmed
    });
  }
  lowercase(message = string.lowercase) {
    return this.transform((value) => !isAbsent_default(value) ? value.toLowerCase() : value).test({
      message,
      name: "string_case",
      exclusive: true,
      test: (value) => isAbsent_default(value) || value === value.toLowerCase()
    });
  }
  uppercase(message = string.uppercase) {
    return this.transform((value) => !isAbsent_default(value) ? value.toUpperCase() : value).test({
      message,
      name: "string_case",
      exclusive: true,
      test: (value) => isAbsent_default(value) || value === value.toUpperCase()
    });
  }
};
create3.prototype = StringSchema.prototype;

// node_modules/yup/es/number.js
var isNaN2 = (value) => value != +value;
function create4() {
  return new NumberSchema();
}
var NumberSchema = class extends BaseSchema {
  constructor() {
    super({
      type: "number"
    });
    this.withMutation(() => {
      this.transform(function(value) {
        let parsed = value;
        if (typeof parsed === "string") {
          parsed = parsed.replace(/\s/g, "");
          if (parsed === "") return NaN;
          parsed = +parsed;
        }
        if (this.isType(parsed)) return parsed;
        return parseFloat(parsed);
      });
    });
  }
  _typeCheck(value) {
    if (value instanceof Number) value = value.valueOf();
    return typeof value === "number" && !isNaN2(value);
  }
  min(min, message = number.min) {
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      test(value) {
        return isAbsent_default(value) || value >= this.resolve(min);
      }
    });
  }
  max(max, message = number.max) {
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        max
      },
      test(value) {
        return isAbsent_default(value) || value <= this.resolve(max);
      }
    });
  }
  lessThan(less, message = number.lessThan) {
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        less
      },
      test(value) {
        return isAbsent_default(value) || value < this.resolve(less);
      }
    });
  }
  moreThan(more, message = number.moreThan) {
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        more
      },
      test(value) {
        return isAbsent_default(value) || value > this.resolve(more);
      }
    });
  }
  positive(msg = number.positive) {
    return this.moreThan(0, msg);
  }
  negative(msg = number.negative) {
    return this.lessThan(0, msg);
  }
  integer(message = number.integer) {
    return this.test({
      name: "integer",
      message,
      test: (val) => isAbsent_default(val) || Number.isInteger(val)
    });
  }
  truncate() {
    return this.transform((value) => !isAbsent_default(value) ? value | 0 : value);
  }
  round(method) {
    var _method;
    let avail = ["ceil", "floor", "round", "trunc"];
    method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || "round";
    if (method === "trunc") return this.truncate();
    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError("Only valid options for round() are: " + avail.join(", "));
    return this.transform((value) => !isAbsent_default(value) ? Math[method](value) : value);
  }
};
create4.prototype = NumberSchema.prototype;

// node_modules/yup/es/util/isodate.js
var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
function parseIsoDate(date2) {
  var numericKeys = [1, 4, 5, 6, 7, 10, 11], minutesOffset = 0, timestamp, struct;
  if (struct = isoReg.exec(date2)) {
    for (var i = 0, k; k = numericKeys[i]; ++i) struct[k] = +struct[k] || 0;
    struct[2] = (+struct[2] || 1) - 1;
    struct[3] = +struct[3] || 1;
    struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0;
    if ((struct[8] === void 0 || struct[8] === "") && (struct[9] === void 0 || struct[9] === "")) timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);
    else {
      if (struct[8] !== "Z" && struct[9] !== void 0) {
        minutesOffset = struct[10] * 60 + struct[11];
        if (struct[9] === "+") minutesOffset = 0 - minutesOffset;
      }
      timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }
  } else timestamp = Date.parse ? Date.parse(date2) : NaN;
  return timestamp;
}

// node_modules/yup/es/date.js
var invalidDate = /* @__PURE__ */ new Date("");
var isDate = (obj) => Object.prototype.toString.call(obj) === "[object Date]";
function create5() {
  return new DateSchema();
}
var DateSchema = class extends BaseSchema {
  constructor() {
    super({
      type: "date"
    });
    this.withMutation(() => {
      this.transform(function(value) {
        if (this.isType(value)) return value;
        value = parseIsoDate(value);
        return !isNaN(value) ? new Date(value) : invalidDate;
      });
    });
  }
  _typeCheck(v) {
    return isDate(v) && !isNaN(v.getTime());
  }
  prepareParam(ref, name) {
    let param;
    if (!Reference.isRef(ref)) {
      let cast = this.cast(ref);
      if (!this._typeCheck(cast)) throw new TypeError(`\`${name}\` must be a Date or a value that can be \`cast()\` to a Date`);
      param = cast;
    } else {
      param = ref;
    }
    return param;
  }
  min(min, message = date.min) {
    let limit = this.prepareParam(min, "min");
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      test(value) {
        return isAbsent_default(value) || value >= this.resolve(limit);
      }
    });
  }
  max(max, message = date.max) {
    let limit = this.prepareParam(max, "max");
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        max
      },
      test(value) {
        return isAbsent_default(value) || value <= this.resolve(limit);
      }
    });
  }
};
DateSchema.INVALID_DATE = invalidDate;
create5.prototype = DateSchema.prototype;
create5.INVALID_DATE = invalidDate;

// node_modules/yup/es/object.js
var import_has3 = __toESM(require_has());
var import_snakeCase = __toESM(require_snakeCase());
var import_camelCase = __toESM(require_camelCase());
var import_mapKeys = __toESM(require_mapKeys());
var import_mapValues2 = __toESM(require_mapValues());
var import_property_expr4 = __toESM(require_property_expr());

// node_modules/yup/es/util/sortFields.js
var import_has2 = __toESM(require_has());
var import_toposort = __toESM(require_toposort());
var import_property_expr3 = __toESM(require_property_expr());
function sortFields(fields, excludedEdges = []) {
  let edges = [];
  let nodes = /* @__PURE__ */ new Set();
  let excludes = new Set(excludedEdges.map(([a, b]) => `${a}-${b}`));
  function addNode(depPath, key) {
    let node2 = (0, import_property_expr3.split)(depPath)[0];
    nodes.add(node2);
    if (!excludes.has(`${key}-${node2}`)) edges.push([key, node2]);
  }
  for (const key in fields) if ((0, import_has2.default)(fields, key)) {
    let value = fields[key];
    nodes.add(key);
    if (Reference.isRef(value) && value.isSibling) addNode(value.path, key);
    else if (isSchema_default(value) && "deps" in value) value.deps.forEach((path) => addNode(path, key));
  }
  return import_toposort.default.array(Array.from(nodes), edges).reverse();
}

// node_modules/yup/es/util/sortByKeyOrder.js
function findIndex(arr, err) {
  let idx = Infinity;
  arr.some((key, ii) => {
    var _err$path;
    if (((_err$path = err.path) == null ? void 0 : _err$path.indexOf(key)) !== -1) {
      idx = ii;
      return true;
    }
  });
  return idx;
}
function sortByKeyOrder(keys2) {
  return (a, b) => {
    return findIndex(keys2, a) - findIndex(keys2, b);
  };
}

// node_modules/yup/es/object.js
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
var isObject = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
function unknown(ctx, value) {
  let known = Object.keys(ctx.fields);
  return Object.keys(value).filter((key) => known.indexOf(key) === -1);
}
var defaultSort = sortByKeyOrder([]);
var ObjectSchema = class extends BaseSchema {
  constructor(spec) {
    super({
      type: "object"
    });
    this.fields = /* @__PURE__ */ Object.create(null);
    this._sortErrors = defaultSort;
    this._nodes = [];
    this._excludedEdges = [];
    this.withMutation(() => {
      this.transform(function coerce(value) {
        if (typeof value === "string") {
          try {
            value = JSON.parse(value);
          } catch (err) {
            value = null;
          }
        }
        if (this.isType(value)) return value;
        return null;
      });
      if (spec) {
        this.shape(spec);
      }
    });
  }
  _typeCheck(value) {
    return isObject(value) || typeof value === "function";
  }
  _cast(_value, options2 = {}) {
    var _options$stripUnknown;
    let value = super._cast(_value, options2);
    if (value === void 0) return this.getDefault();
    if (!this._typeCheck(value)) return value;
    let fields = this.fields;
    let strip = (_options$stripUnknown = options2.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
    let props = this._nodes.concat(Object.keys(value).filter((v) => this._nodes.indexOf(v) === -1));
    let intermediateValue = {};
    let innerOptions = _extends6({}, options2, {
      parent: intermediateValue,
      __validating: options2.__validating || false
    });
    let isChanged = false;
    for (const prop of props) {
      let field = fields[prop];
      let exists2 = (0, import_has3.default)(value, prop);
      if (field) {
        let fieldValue;
        let inputValue = value[prop];
        innerOptions.path = (options2.path ? `${options2.path}.` : "") + prop;
        field = field.resolve({
          value: inputValue,
          context: options2.context,
          parent: intermediateValue
        });
        let fieldSpec = "spec" in field ? field.spec : void 0;
        let strict = fieldSpec == null ? void 0 : fieldSpec.strict;
        if (fieldSpec == null ? void 0 : fieldSpec.strip) {
          isChanged = isChanged || prop in value;
          continue;
        }
        fieldValue = !options2.__validating || !strict ? (
          // TODO: use _cast, this is double resolving
          field.cast(value[prop], innerOptions)
        ) : value[prop];
        if (fieldValue !== void 0) {
          intermediateValue[prop] = fieldValue;
        }
      } else if (exists2 && !strip) {
        intermediateValue[prop] = value[prop];
      }
      if (intermediateValue[prop] !== value[prop]) {
        isChanged = true;
      }
    }
    return isChanged ? intermediateValue : value;
  }
  _validate(_value, opts = {}, callback) {
    let errors = [];
    let {
      sync,
      from = [],
      originalValue = _value,
      abortEarly = this.spec.abortEarly,
      recursive = this.spec.recursive
    } = opts;
    from = [{
      schema: this,
      value: originalValue
    }, ...from];
    opts.__validating = true;
    opts.originalValue = originalValue;
    opts.from = from;
    super._validate(_value, opts, (err, value) => {
      if (err) {
        if (!ValidationError.isError(err) || abortEarly) {
          return void callback(err, value);
        }
        errors.push(err);
      }
      if (!recursive || !isObject(value)) {
        callback(errors[0] || null, value);
        return;
      }
      originalValue = originalValue || value;
      let tests = this._nodes.map((key) => (_, cb) => {
        let path = key.indexOf(".") === -1 ? (opts.path ? `${opts.path}.` : "") + key : `${opts.path || ""}["${key}"]`;
        let field = this.fields[key];
        if (field && "validate" in field) {
          field.validate(value[key], _extends6({}, opts, {
            // @ts-ignore
            path,
            from,
            // inner fields are always strict:
            // 1. this isn't strict so the casting will also have cast inner values
            // 2. this is strict in which case the nested values weren't cast either
            strict: true,
            parent: value,
            originalValue: originalValue[key]
          }), cb);
          return;
        }
        cb(null);
      });
      runTests({
        sync,
        tests,
        value,
        errors,
        endEarly: abortEarly,
        sort: this._sortErrors,
        path: opts.path
      }, callback);
    });
  }
  clone(spec) {
    const next = super.clone(spec);
    next.fields = _extends6({}, this.fields);
    next._nodes = this._nodes;
    next._excludedEdges = this._excludedEdges;
    next._sortErrors = this._sortErrors;
    return next;
  }
  concat(schema) {
    let next = super.concat(schema);
    let nextFields = next.fields;
    for (let [field, schemaOrRef] of Object.entries(this.fields)) {
      const target = nextFields[field];
      if (target === void 0) {
        nextFields[field] = schemaOrRef;
      } else if (target instanceof BaseSchema && schemaOrRef instanceof BaseSchema) {
        nextFields[field] = schemaOrRef.concat(target);
      }
    }
    return next.withMutation(() => next.shape(nextFields, this._excludedEdges));
  }
  getDefaultFromShape() {
    let dft = {};
    this._nodes.forEach((key) => {
      const field = this.fields[key];
      dft[key] = "default" in field ? field.getDefault() : void 0;
    });
    return dft;
  }
  _getDefault() {
    if ("default" in this.spec) {
      return super._getDefault();
    }
    if (!this._nodes.length) {
      return void 0;
    }
    return this.getDefaultFromShape();
  }
  shape(additions, excludes = []) {
    let next = this.clone();
    let fields = Object.assign(next.fields, additions);
    next.fields = fields;
    next._sortErrors = sortByKeyOrder(Object.keys(fields));
    if (excludes.length) {
      if (!Array.isArray(excludes[0])) excludes = [excludes];
      next._excludedEdges = [...next._excludedEdges, ...excludes];
    }
    next._nodes = sortFields(fields, next._excludedEdges);
    return next;
  }
  pick(keys2) {
    const picked = {};
    for (const key of keys2) {
      if (this.fields[key]) picked[key] = this.fields[key];
    }
    return this.clone().withMutation((next) => {
      next.fields = {};
      return next.shape(picked);
    });
  }
  omit(keys2) {
    const next = this.clone();
    const fields = next.fields;
    next.fields = {};
    for (const key of keys2) {
      delete fields[key];
    }
    return next.withMutation(() => next.shape(fields));
  }
  from(from, to, alias) {
    let fromGetter = (0, import_property_expr4.getter)(from, true);
    return this.transform((obj) => {
      if (obj == null) return obj;
      let newObj = obj;
      if ((0, import_has3.default)(obj, from)) {
        newObj = _extends6({}, obj);
        if (!alias) delete newObj[from];
        newObj[to] = fromGetter(obj);
      }
      return newObj;
    });
  }
  noUnknown(noAllow = true, message = object.noUnknown) {
    if (typeof noAllow === "string") {
      message = noAllow;
      noAllow = true;
    }
    let next = this.test({
      name: "noUnknown",
      exclusive: true,
      message,
      test(value) {
        if (value == null) return true;
        const unknownKeys = unknown(this.schema, value);
        return !noAllow || unknownKeys.length === 0 || this.createError({
          params: {
            unknown: unknownKeys.join(", ")
          }
        });
      }
    });
    next.spec.noUnknown = noAllow;
    return next;
  }
  unknown(allow = true, message = object.noUnknown) {
    return this.noUnknown(!allow, message);
  }
  transformKeys(fn) {
    return this.transform((obj) => obj && (0, import_mapKeys.default)(obj, (_, key) => fn(key)));
  }
  camelCase() {
    return this.transformKeys(import_camelCase.default);
  }
  snakeCase() {
    return this.transformKeys(import_snakeCase.default);
  }
  constantCase() {
    return this.transformKeys((key) => (0, import_snakeCase.default)(key).toUpperCase());
  }
  describe() {
    let base = super.describe();
    base.fields = (0, import_mapValues2.default)(this.fields, (value) => value.describe());
    return base;
  }
};
function create6(spec) {
  return new ObjectSchema(spec);
}
create6.prototype = ObjectSchema.prototype;

// node_modules/yup/es/array.js
function _extends7() {
  _extends7 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function create7(type) {
  return new ArraySchema(type);
}
var ArraySchema = class extends BaseSchema {
  constructor(type) {
    super({
      type: "array"
    });
    this.innerType = void 0;
    this.innerType = type;
    this.withMutation(() => {
      this.transform(function(values) {
        if (typeof values === "string") try {
          values = JSON.parse(values);
        } catch (err) {
          values = null;
        }
        return this.isType(values) ? values : null;
      });
    });
  }
  _typeCheck(v) {
    return Array.isArray(v);
  }
  get _subType() {
    return this.innerType;
  }
  _cast(_value, _opts) {
    const value = super._cast(_value, _opts);
    if (!this._typeCheck(value) || !this.innerType) return value;
    let isChanged = false;
    const castArray = value.map((v, idx) => {
      const castElement = this.innerType.cast(v, _extends7({}, _opts, {
        path: `${_opts.path || ""}[${idx}]`
      }));
      if (castElement !== v) {
        isChanged = true;
      }
      return castElement;
    });
    return isChanged ? castArray : value;
  }
  _validate(_value, options2 = {}, callback) {
    var _options$abortEarly, _options$recursive;
    let errors = [];
    let sync = options2.sync;
    let path = options2.path;
    let innerType = this.innerType;
    let endEarly = (_options$abortEarly = options2.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly;
    let recursive = (_options$recursive = options2.recursive) != null ? _options$recursive : this.spec.recursive;
    let originalValue = options2.originalValue != null ? options2.originalValue : _value;
    super._validate(_value, options2, (err, value) => {
      if (err) {
        if (!ValidationError.isError(err) || endEarly) {
          return void callback(err, value);
        }
        errors.push(err);
      }
      if (!recursive || !innerType || !this._typeCheck(value)) {
        callback(errors[0] || null, value);
        return;
      }
      originalValue = originalValue || value;
      let tests = new Array(value.length);
      for (let idx = 0; idx < value.length; idx++) {
        let item = value[idx];
        let path2 = `${options2.path || ""}[${idx}]`;
        let innerOptions = _extends7({}, options2, {
          path: path2,
          strict: true,
          parent: value,
          index: idx,
          originalValue: originalValue[idx]
        });
        tests[idx] = (_, cb) => innerType.validate(item, innerOptions, cb);
      }
      runTests({
        sync,
        path,
        value,
        errors,
        endEarly,
        tests
      }, callback);
    });
  }
  clone(spec) {
    const next = super.clone(spec);
    next.innerType = this.innerType;
    return next;
  }
  concat(schema) {
    let next = super.concat(schema);
    next.innerType = this.innerType;
    if (schema.innerType) next.innerType = next.innerType ? (
      // @ts-expect-error Lazy doesn't have concat()
      next.innerType.concat(schema.innerType)
    ) : schema.innerType;
    return next;
  }
  of(schema) {
    let next = this.clone();
    if (!isSchema_default(schema)) throw new TypeError("`array.of()` sub-schema must be a valid yup schema not: " + printValue(schema));
    next.innerType = schema;
    return next;
  }
  length(length, message = array.length) {
    return this.test({
      message,
      name: "length",
      exclusive: true,
      params: {
        length
      },
      test(value) {
        return isAbsent_default(value) || value.length === this.resolve(length);
      }
    });
  }
  min(min, message) {
    message = message || array.min;
    return this.test({
      message,
      name: "min",
      exclusive: true,
      params: {
        min
      },
      // FIXME(ts): Array<typeof T>
      test(value) {
        return isAbsent_default(value) || value.length >= this.resolve(min);
      }
    });
  }
  max(max, message) {
    message = message || array.max;
    return this.test({
      message,
      name: "max",
      exclusive: true,
      params: {
        max
      },
      test(value) {
        return isAbsent_default(value) || value.length <= this.resolve(max);
      }
    });
  }
  ensure() {
    return this.default(() => []).transform((val, original) => {
      if (this._typeCheck(val)) return val;
      return original == null ? [] : [].concat(original);
    });
  }
  compact(rejector) {
    let reject = !rejector ? (v) => !!v : (v, i, a) => !rejector(v, i, a);
    return this.transform((values) => values != null ? values.filter(reject) : values);
  }
  describe() {
    let base = super.describe();
    if (this.innerType) base.innerType = this.innerType.describe();
    return base;
  }
  nullable(isNullable = true) {
    return super.nullable(isNullable);
  }
  defined() {
    return super.defined();
  }
  required(msg) {
    return super.required(msg);
  }
};
create7.prototype = ArraySchema.prototype;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js
var userFieldsSchema = create6().shape({
  alias: create3(),
  btcWallet: create3(),
  ckbWallet: create3(),
  country: create3(),
  discordNotification: create2(),
  dogeWallet: create3(),
  email: create3(),
  emailNotification: create2(),
  firstName: create3(),
  jobTitle: create3(),
  kasWallet: create3(),
  kdaWallet: create3(),
  lastName: create3(),
  ltcWallet: create3(),
  metadata: create6(),
  newsletterNotification: create2(),
  phoneNumber: create3(),
  tShirtSize: create3(),
  team: create3(),
  username: create3()
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/LoadingContext/LoadingContext.js
var import_jsx_runtime204 = __toESM(require_jsx_runtime(), 1);
var import_react236 = __toESM(require_react(), 1);
var import_react_dom102 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/MockContext/MockContext.js
var import_jsx_runtime203 = __toESM(require_jsx_runtime(), 1);
var import_react235 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FooterAnimationContext/index.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var import_react40 = __toESM(require_react(), 1);
var FooterAnimationContext = (0, import_react40.createContext)(void 0);
var FooterAnimationContextProvider = ({ children }) => {
  const { view } = useViewContext();
  const [isFooterExpanded, setIsFooterExpanded] = (0, import_react40.useState)(false);
  (0, import_react40.useEffect)(() => {
    setIsFooterExpanded(false);
  }, [view]);
  const value = (0, import_react40.useMemo)(() => ({
    isFooterExpanded,
    setIsFooterExpanded
  }), [isFooterExpanded]);
  return (0, import_jsx_runtime18.jsx)(FooterAnimationContext.Provider, { value, children: (0, import_jsx_runtime18.jsx)("div", { children }) });
};
var useFooterAnimationContext = () => {
  const context = (0, import_react40.useContext)(FooterAnimationContext);
  if (!context)
    throw new Error("Can only call useFooterAnimationContext inside FooterAnimationContextProvider");
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/AccordionItem/AccordionItem.js
var import_jsx_runtime170 = __toESM(require_jsx_runtime(), 1);
var import_react210 = __toESM(require_react(), 1);
var import_react_dom80 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useResizeObserver/useResizeObserver.js
var import_react41 = __toESM(require_react(), 1);
var useResizeObserver = (ref, callback) => {
  const [rect, setRect] = (0, import_react41.useState)();
  const onResize = (0, import_react41.useCallback)((entries) => {
    if (!Array.isArray(entries)) {
      return;
    }
    const [entry] = entries;
    setRect(entry.contentRect);
    if (callback) {
      callback(entry.contentRect);
    }
  }, [callback, setRect]);
  (0, import_react41.useLayoutEffect)(() => {
    if (!ref.current) {
      return;
    }
    let observer = new ResizeObserver(onResize);
    observer.observe(ref.current);
    return () => {
      observer === null || observer === void 0 ? void 0 : observer.disconnect();
      observer = null;
    };
  }, [ref]);
  return [rect];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/useFields.js
var import_react43 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FieldsStateContext/FieldsStateContext.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var import_react42 = __toESM(require_react(), 1);
var FieldsStateContext = (0, import_react42.createContext)(void 0);
var FieldsStateProvider = ({ children }) => {
  const selectedPhoneCountry = (0, import_react42.useRef)();
  return (0, import_jsx_runtime19.jsx)(FieldsStateContext.Provider, { value: { selectedPhoneCountry }, children });
};
var useFieldsState = () => {
  const context = (0, import_react42.useContext)(FieldsStateContext);
  if (!context)
    throw new DynamicError("Can only call useFieldsState inside FieldsStateProvider");
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/useFields.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/fields.js
var PHONE_NUMBER_REGEX = /^(\+[1-9]\d{1,14})?$/;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/validatePhoneLength/validatePhoneLength.js
var validatePhoneLength = (phone, country) => de({ dialCode: country.dialCode, phone }).length > 0;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/useFields.js
var customFieldValidationMap = {
  checkbox: create7(),
  select: create3(),
  text: create3()
};
var useFields = () => {
  const { t: t2 } = useTranslation();
  const { selectedPhoneCountry } = useFieldsState();
  const fieldsConfig = (0, import_react43.useMemo)(() => ({
    alias: {
      key: "dyn_collect_user_data.fields.alias.label",
      label: t2("dyn_collect_user_data.fields.alias.label"),
      type: "string",
      validation: create3().trim()
    },
    country: {
      key: "dyn_collect_user_data.fields.country.label",
      label: t2("dyn_collect_user_data.fields.country.label"),
      type: "select",
      validation: create3().oneOf(countryCodes.map((c) => c.code))
    },
    email: {
      autoComplete: "email",
      key: "dyn_collect_user_data.fields.email.label",
      label: t2("dyn_collect_user_data.fields.email.label"),
      type: "email",
      validation: create3().email(t2("dyn_collect_user_data.fields.email.validation"))
    },
    firstName: {
      key: "dyn_collect_user_data.fields.first_name.label",
      label: t2("dyn_collect_user_data.fields.first_name.label"),
      type: "string",
      validation: create3().trim()
    },
    jobTitle: {
      key: "dyn_collect_user_data.fields.job_title.label",
      label: t2("dyn_collect_user_data.fields.job_title.label"),
      type: "string",
      validation: create3().trim()
    },
    lastName: {
      key: "dyn_collect_user_data.fields.last_name.label",
      label: t2("dyn_collect_user_data.fields.last_name.label"),
      type: "string",
      validation: create3().trim()
    },
    phoneNumber: {
      key: "dyn_collect_user_data.fields.phone_number.label",
      label: t2("dyn_collect_user_data.fields.phone_number.label"),
      type: "string",
      validation: create3().test("length", t2("dyn_collect_user_data.fields.phone_number.too_short"), (phone) => {
        if (!selectedPhoneCountry.current)
          return true;
        return phone === void 0 || phone.length === 0 || validatePhoneLength(phone, selectedPhoneCountry.current);
      }).matches(PHONE_NUMBER_REGEX, t2("dyn_collect_user_data.fields.phone_number.validation"))
    },
    policiesConsent: {
      key: "dyn_collect_user_data.fields.policies_consent.label",
      label: t2("dyn_collect_user_data.fields.policies_consent.label"),
      type: "boolean",
      validation: create2()
    },
    tShirtSize: {
      key: "dyn_collect_user_data.fields.t_shirt_size.label",
      label: t2("dyn_collect_user_data.fields.t_shirt_size.label"),
      type: "select",
      validation: create3().oneOf(tShirtSizes)
    },
    team: {
      key: "dyn_collect_user_data.fields.team.label",
      label: t2("dyn_collect_user_data.fields.team.label"),
      type: "select",
      validation: create3().oneOf(teamNames)
    },
    username: {
      key: "dyn_collect_user_data.fields.username.label",
      label: t2("dyn_collect_user_data.fields.username.label"),
      type: "string",
      // From chatGPT:
      // - string can contain letters A-Z, a-z, numbers 0-9, or symbols $ ! # % ?
      // - string must be length 3 to 20
      // - string cannot contain consecutive symbols
      validation: create3().matches(/^(?!.*([$!#%?])\1)[A-Za-z0-9$!#%?_-]{3,20}$/, t2("dyn_collect_user_data.fields.username.validation"))
    }
  }), [selectedPhoneCountry, t2]);
  return { fieldsConfig };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/UserFieldEditorContext/UserFieldEditorContext.js
var import_jsx_runtime169 = __toESM(require_jsx_runtime(), 1);
var import_react209 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/UserFieldEditorModal/UserFieldEditorModal.js
var import_jsx_runtime167 = __toESM(require_jsx_runtime(), 1);
var import_react208 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Alert/Alert.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var import_react45 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Icon/Icon.js
var import_react44 = __toESM(require_react(), 1);
var Icon = ({ children, className = "", color, size }) => {
  const colorClassNameMap = {
    "brand-primary": "icon--color-brand-primary",
    "success-1": "icon--color-success-1",
    "text-error": "icon--color-text-error",
    "text-primary": "icon--color-text-primary",
    "text-secondary": "icon--color-text-secondary",
    "text-tertiary": "icon--color-text-tertiary"
  };
  const sizeClassNameMap = {
    large: "icon--size-large",
    medium: "icon--size-medium",
    mini: "icon--size-mini",
    mlarge: "icon--size-mlarge",
    small: "icon--size-small",
    xsmall: "icon--size-xsmall"
  };
  const effectiveClassName = classNames(className, color ? colorClassNameMap[color] : "", size ? sizeClassNameMap[size] : "");
  return (0, import_react44.cloneElement)(children, { className: effectiveClassName });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Alert/Alert.js
var errorIconMap = {
  error: (0, import_jsx_runtime21.jsx)(SvgError, {})
};
var Alert = ({ children, icon, variant = "error", contentDataTestId, className = "" }) => (0, import_jsx_runtime21.jsxs)("div", { className: classNames("alert", {
  "alert--error": variant === "error",
  "alert--info": variant === "info",
  "alert--warning": variant === "warning"
}, className), children: [icon && (0, import_jsx_runtime21.jsx)(Icon, { size: "small", className: "alert__icon", children: typeof icon === "string" ? errorIconMap[icon] : icon }), (0, import_jsx_runtime21.jsx)(Typography, { variant: "body_small", "data-testid": contentDataTestId, children })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/UserFieldEditorModal/UserFieldEditorModal.js
var import_react_dom78 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/environmentId.js
var { getEnvironmentId, useEnvironmentId, setEnvironmentId } = createStoreState("environmentId");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/walletConnectorOptions.js
var { getWalletConnectorOptions, setWalletConnectorOptions, useWalletConnectorOptions, resetWalletConnectorOptions } = createStoreState("walletConnectorOptions");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ShadowDOM/ShadowDOM.js
var import_jsx_runtime155 = __toESM(require_jsx_runtime(), 1);
var import_react194 = __toESM(require_react(), 1);
var import_react_dom71 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconButton/IconButton.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var import_react46 = __toESM(require_react(), 1);
var IconButton = (0, import_react46.forwardRef)((_a, ref) => {
  var { className = "", color } = _a, props = __rest(_a, ["className", "color"]);
  return (0, import_jsx_runtime22.jsx)("button", Object.assign({}, props, { className: classNames("icon-button", className), ref }));
});
IconButton.displayName = "IconButton";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineWidget/InlineWidget.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var import_react47 = __toESM(require_react(), 1);
var InlineWidget = (0, import_react47.forwardRef)(({ children, className, dataTestId }, ref) => (0, import_jsx_runtime23.jsx)("div", { ref, "data-testid": dataTestId, className: classNames("inline-widget", className), children }));
InlineWidget.displayName = "InlineWidget";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Input/Input.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var import_react48 = __toESM(require_react(), 1);
var Input = (0, import_react48.forwardRef)((_a, ref) => {
  var { className = "", id, label, type, onChange, onBlur: onBlur3, name, value, optional, error = false, disabled, message, placeholder, variant = "dense", suffix, containerClassName } = _a, rest = __rest(_a, ["className", "id", "label", "type", "onChange", "onBlur", "name", "value", "optional", "error", "disabled", "message", "placeholder", "variant", "suffix", "containerClassName"]);
  return (0, import_jsx_runtime24.jsxs)("div", { className: classNames("input__container", containerClassName, {
    "input__container--dense": variant === "dense",
    "input__container--regular": variant === "regular"
  }), children: [(0, import_jsx_runtime24.jsx)("input", Object.assign({}, rest, { name, value, onChange, onBlur: onBlur3, type, id, placeholder: variant === "regular" || !label ? placeholder : label, disabled, className: classNames("input", className, {
    "input--no-label": !label,
    input__error: error,
    input__has_trailing: optional
  }), ref })), (0, import_jsx_runtime24.jsx)("label", { htmlFor: id, className: classNames("input__label"), children: label }), suffix && (0, import_jsx_runtime24.jsx)("div", { className: classNames("input__suffix"), children: suffix }), optional && (0, import_jsx_runtime24.jsx)("span", { className: "input__trailing", children: "Optional" }), Boolean(message) && (0, import_jsx_runtime24.jsx)(Typography, { variant: "body_mini", className: classNames("input__message", {
    input__message__error: error
  }), children: message })] });
});
Input.displayName = "Input";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IsBrowser/IsBrowser.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var import_react49 = __toESM(require_react(), 1);
var IsNestedBrowserContext = (0, import_react49.createContext)(false);
var IsBrowser = ({ children }) => {
  const isNested = (0, import_react49.useContext)(IsNestedBrowserContext);
  const [isBrowser, setIsBrowser] = (0, import_react49.useState)(false);
  (0, import_react49.useEffect)(() => {
    setIsBrowser(true);
  }, []);
  if (isBrowser || isNested)
    return (0, import_jsx_runtime25.jsx)(IsNestedBrowserContext.Provider, { value: true, children });
  return (0, import_jsx_runtime25.jsx)(import_jsx_runtime25.Fragment, {});
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/Dropdown/Dropdown.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var import_react58 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/Popper/Popper.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var import_react52 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/PopperContent/PopperContent.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
var import_react50 = __toESM(require_react(), 1);
var mapTransformOriginToClassName = {
  "bottom-left": "popper-content__transform-origin-bottom-left",
  "bottom-right": "popper-content__transform-origin-bottom-right",
  "top-left": "popper-content__transform-origin-top-left",
  "top-right": "popper-content__transform-origin-top-right"
};
var PopperContent = (0, import_react50.forwardRef)(({ children, transformOrigin, style, className }, ref) => (0, import_jsx_runtime26.jsx)("div", { "data-testid": "popper-content", ref, className: classNames("popper-content", mapTransformOriginToClassName[transformOrigin], className), style, children }));
PopperContent.displayName = "PopperContent";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/PopperContext/PopperContext.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var import_react51 = __toESM(require_react(), 1);
var popperContext = (0, import_react51.createContext)(void 0);
var PopperProvider = ({ children }) => {
  const { Provider: Provider2 } = popperContext;
  const containerRef = (0, import_react51.useRef)(null);
  return (0, import_jsx_runtime27.jsx)(Provider2, { value: {
    containerRef
  }, children: (0, import_jsx_runtime27.jsx)("div", { ref: containerRef, style: { position: "relative" }, children }) });
};
var usePopper = () => {
  const context = (0, import_react51.useContext)(popperContext);
  if (!context) {
    throw new Error("To use popper, use the PopperProvider above in the dom hierarchy");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/utils/getChildPosition/getChildPosition.js
var getChildPosition = (root2, element) => {
  const rootRect = root2.getBoundingClientRect();
  const elementRect = element.getBoundingClientRect();
  return {
    left: elementRect.x - rootRect.x,
    top: elementRect.y - rootRect.y
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/Popper/Popper.js
var Popper = (0, import_react52.forwardRef)(({ anchorRef, anchorOrigin = "top-left", transformOrigin = "top-left", children, style, className }, ref) => {
  const { containerRef } = usePopper();
  const [anchorPosition, setAnchorPosition] = (0, import_react52.useState)();
  const container = containerRef.current;
  (0, import_react52.useEffect)(() => {
    const container2 = containerRef.current;
    const anchor = anchorRef.current;
    if (!container2 || !anchor)
      return;
    setAnchorPosition(getChildPosition(container2, anchor));
  }, [anchorRef, containerRef, setAnchorPosition]);
  const anchorOriginPosition = (0, import_react52.useMemo)(() => {
    var _a;
    const anchorRect = (_a = anchorRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
    if (!anchorPosition || !anchorRect)
      return;
    switch (anchorOrigin) {
      case "top-left":
        return anchorPosition;
      case "top-right":
        return Object.assign(Object.assign({}, anchorPosition), { left: anchorPosition.left + anchorRect.width });
      case "bottom-left":
        return Object.assign(Object.assign({}, anchorPosition), { top: anchorPosition.top + anchorRect.height });
      case "bottom-right":
        return Object.assign(Object.assign({}, anchorPosition), { left: anchorPosition.left + anchorRect.width, top: anchorPosition.top + anchorRect.height });
      default:
        return void 0;
    }
  }, [anchorPosition, anchorRef, anchorOrigin]);
  if (!anchorOriginPosition || container === null)
    return null;
  return (0, import_react_dom.createPortal)((0, import_jsx_runtime28.jsx)(PopperContent, { ref, transformOrigin, style: Object.assign(Object.assign({}, anchorOriginPosition), style), className, children }), container);
});
Popper.displayName = "Popper";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useForwardedRef/useForwardedRef.js
var import_react53 = __toESM(require_react(), 1);
var useForwardedRef = (ref) => {
  const innerRef = (0, import_react53.useRef)(null);
  (0, import_react53.useEffect)(() => {
    if (!ref)
      return;
    if (typeof ref === "function") {
      ref(innerRef.current);
    } else {
      ref.current = innerRef.current;
    }
  }, [ref, innerRef]);
  return innerRef;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useOnClickOutside/index.js
var import_react54 = __toESM(require_react(), 1);
var useOnClickOutside = (ref, handler) => {
  const handlerRef = (0, import_react54.useRef)(handler);
  handlerRef.current = handler;
  (0, import_react54.useEffect)(() => {
    const listener = (event) => {
      event.stopPropagation();
      const realTarget = event.composedPath().shift();
      if (!ref.current || ref.current.contains(event.currentTarget) || ref.current.contains(realTarget)) {
        return;
      }
      handlerRef.current(event);
    };
    document.addEventListener("touchstart", listener);
    document.addEventListener("click", listener);
    return () => {
      document.removeEventListener("touchstart", listener);
      document.removeEventListener("click", listener);
    };
  }, [ref]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Popper/utils/isScrollable/isScrollable.js
var isScrollable = (element) => {
  const hasScrollableContent = element.scrollHeight > element.clientHeight;
  const overflowYStyle = window.getComputedStyle(element).overflowY;
  const isOverflowHidden = overflowYStyle.indexOf("hidden") !== -1;
  return hasScrollableContent && !isOverflowHidden;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/utils/watchToScrollInHierarchy/watchToScrollInHierarchy.js
var watchToScrollInHierarchy = (root2, element, callback) => {
  const elementsWithListener = [];
  let currentElement = element;
  while (currentElement !== null) {
    const reachedRoot = currentElement === root2;
    if (isScrollable(currentElement)) {
      currentElement.addEventListener("scroll", callback);
      elementsWithListener.push(currentElement);
    }
    currentElement = currentElement.parentElement;
    if (reachedRoot) {
      break;
    }
  }
  return () => elementsWithListener.forEach((element2) => element2.removeEventListener("scroll", callback));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTransition/useTransition.js
var import_react57 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/animationFrameTimeout/animationFrameTimeout.js
var animationFrameTimeout = (callback, duration) => {
  const startTime2 = performance.now();
  const canceller = { id: -1 };
  const tick = () => {
    canceller.id = requestAnimationFrame((now) => {
      if (now - startTime2 > duration) {
        callback();
      } else {
        tick();
      }
    });
  };
  tick();
  return canceller;
};
var clearAnimationFrameTimeout = (canceller) => {
  if (canceller.id)
    cancelAnimationFrame(canceller.id);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUpdateEffect/useUpdateEffect.js
var import_react56 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsFirstRender/useIsFirstRender.js
var import_react55 = __toESM(require_react(), 1);
var useIsFirstRender = () => {
  const isFirst = (0, import_react55.useRef)(true);
  (0, import_react55.useEffect)(() => {
    if (isFirst.current) {
      isFirst.current = false;
    }
  }, []);
  return isFirst.current;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUpdateEffect/useUpdateEffect.js
var useUpdateEffect = (effect, deps) => {
  const isFirst = useIsFirstRender();
  (0, import_react56.useEffect)(() => {
    if (!isFirst) {
      return effect();
    }
  }, deps);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTransitionEvents/useTransitionEvents.js
var useTransitionEvents = (stage, events) => {
  const mapCallbackToStage = {
    ENTERED: events === null || events === void 0 ? void 0 : events.onEntered,
    ENTERING: events === null || events === void 0 ? void 0 : events.onEntering,
    EXITING: events === null || events === void 0 ? void 0 : events.onExiting,
    UNMOUNT: events === null || events === void 0 ? void 0 : events.onUnmount
  };
  return useUpdateEffect(() => {
    var _a;
    (_a = mapCallbackToStage[stage]) === null || _a === void 0 ? void 0 : _a.call(mapCallbackToStage);
    return () => {
      var _a2;
      if (stage === "EXITING") {
        (_a2 = mapCallbackToStage.UNMOUNT) === null || _a2 === void 0 ? void 0 : _a2.call(mapCallbackToStage);
      }
    };
  }, [stage]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTransition/useTransition.js
var DEFAULT_DURATION = 100;
var useTransition = (_a) => {
  var { isShown, inDuration, outDuration, duration = DEFAULT_DURATION, delay, inDelay, outDelay, animateOnMount = true } = _a, events = __rest(_a, ["isShown", "inDuration", "outDuration", "duration", "delay", "inDelay", "outDelay", "animateOnMount"]);
  const initialStage = animateOnMount ? "UNMOUNT" : "ENTERED";
  const animationFrameTimeoutIdRef = (0, import_react57.useRef)({ id: -1 });
  const timeoutIdRef = (0, import_react57.useRef)({ id: -1 });
  const [stage, setStage] = (0, import_react57.useState)(initialStage);
  const [mount, setMount] = (0, import_react57.useState)(!animateOnMount);
  const [currentDuration, setCurrentDuration] = (0, import_react57.useState)(duration);
  const performTransition = (runTransition, transitionDelay) => {
    if (transitionDelay) {
      timeoutIdRef.current = animationFrameTimeout(runTransition, transitionDelay);
    } else {
      runTransition();
    }
  };
  const performEnter = (0, import_react57.useCallback)(() => {
    const animationDuration = inDuration || duration;
    setCurrentDuration(animationDuration);
    setMount(true);
    setStage("ENTERING");
    animationFrameTimeoutIdRef.current = animationFrameTimeout(() => {
      setStage("ENTERED");
    }, animationDuration);
  }, [duration, inDuration]);
  const performExit = (0, import_react57.useCallback)(() => {
    const animationDuration = outDuration || duration;
    setCurrentDuration(animationDuration);
    setStage("EXITING");
    animationFrameTimeoutIdRef.current = animationFrameTimeout(() => {
      setMount(false);
      setStage("UNMOUNT");
    }, animationDuration);
  }, [duration, outDuration]);
  (0, import_react57.useEffect)(() => {
    if (isShown && stage !== "ENTERED") {
      const enterDelay = inDelay || delay;
      performTransition(performEnter, enterDelay);
    } else if (!isShown && stage !== "UNMOUNT") {
      const exitDelay = outDelay || delay;
      performTransition(performExit, exitDelay);
    }
    return () => {
      clearAnimationFrameTimeout(animationFrameTimeoutIdRef.current);
      clearAnimationFrameTimeout(timeoutIdRef.current);
    };
  }, [inDelay, outDelay, performEnter, performExit, isShown, delay, stage]);
  useTransitionEvents(stage, events);
  return { currentDuration, mount, stage };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/Dropdown/Dropdown.js
var IN_DURATION = 300;
var OUT_DURATION = 300;
var Dropdown = (0, import_react58.forwardRef)((_a, ref) => {
  var { children, isOpen, onClickOutside, onScroll, className, style, maxHeight = 300 } = _a, popperProps = __rest(_a, ["children", "isOpen", "onClickOutside", "onScroll", "className", "style", "maxHeight"]);
  const { containerRef } = usePopper();
  const contentRef = useForwardedRef(ref);
  useOnClickOutside(contentRef, () => onClickOutside === null || onClickOutside === void 0 ? void 0 : onClickOutside());
  (0, import_react58.useEffect)(() => {
    if (!containerRef.current || !popperProps.anchorRef.current)
      return;
    return watchToScrollInHierarchy(containerRef.current, popperProps.anchorRef.current, () => onScroll === null || onScroll === void 0 ? void 0 : onScroll());
  }, [containerRef, popperProps.anchorRef, onScroll]);
  const { mount, stage, currentDuration } = useTransition({
    inDuration: IN_DURATION,
    isShown: isOpen,
    outDuration: OUT_DURATION
  });
  const transitionClassName = classNames({
    "dropdown--entering": stage === "ENTERING",
    "dropdown--exiting": stage === "EXITING"
  });
  if (!mount)
    return null;
  return (0, import_jsx_runtime29.jsx)(Popper, Object.assign({}, popperProps, { ref: contentRef, children: (0, import_jsx_runtime29.jsx)("div", { className: classNames("dropdown", transitionClassName, className), style: Object.assign({ "--max-height": `${maxHeight}px`, animationDuration: `${currentDuration}ms` }, style), children }) }));
});
Dropdown.displayName = "Dropdown";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/ZoomTransition/ZoomTransition.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var import_react59 = __toESM(require_react(), 1);
var getZoomTransitionDefaultStyles = (duration) => ({
  transition: `transform ${duration}ms linear, opacity ${duration}ms linear`
});
var transitionStyles = {
  ENTERED: {
    opacity: "1",
    transform: "scale(1)"
  },
  ENTERING: {
    opacity: "0",
    transform: "scale(0.9)"
  },
  EXITING: {
    opacity: "0",
    transform: "scale(1.1)"
  }
};
var UnoptimizedZoomTransition = (_a) => {
  var { children, className } = _a, transitionProps = __rest(_a, ["children", "className"]);
  const { mount, stage, currentDuration } = useTransition(transitionProps);
  const defaultStyles = getZoomTransitionDefaultStyles(currentDuration);
  const stageStyles = transitionStyles[stage];
  if (!mount)
    return null;
  return (0, import_jsx_runtime30.jsx)("div", { className: classNames(className, "zoom-transition__root"), style: Object.assign(Object.assign({}, defaultStyles), stageStyles), children });
};
var ZoomTransition = import_react59.default.memo(UnoptimizedZoomTransition);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/SlideInUpTransition/SlideInUpTransition.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var import_react60 = __toESM(require_react(), 1);
var getSlideInUpTransitionDefaultStyles = (duration, curve = "linear") => ({
  transition: `transform ${duration}ms ${curve}, opacity ${duration}ms ${curve}`
});
var transitionStyles2 = {
  ENTERED: {
    transform: "translateY(0)"
  },
  ENTERING: {
    transform: "translateY(0.625rem)"
  },
  EXITING: {
    transform: "translateY(0.625rem)"
  }
};
var UnoptimizedSlideInUpTransition = (_a) => {
  var { children, className } = _a, transitionProps = __rest(_a, ["children", "className"]);
  const { mount, stage, currentDuration } = useTransition(transitionProps);
  const defaultStyles = getSlideInUpTransitionDefaultStyles(currentDuration);
  const stageStyles = transitionStyles2[stage];
  if (!mount)
    return null;
  return (0, import_jsx_runtime31.jsx)("div", { className, style: Object.assign(Object.assign({}, defaultStyles), stageStyles), children });
};
var SlideInUpTransition = import_react60.default.memo(UnoptimizedSlideInUpTransition);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/OpacityTransition/OpacityTransition.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var import_react61 = __toESM(require_react(), 1);
var getOpacityTransitionDefaultStyles = (duration) => ({
  transition: `opacity ${duration}ms linear`
});
var transitionStyles3 = {
  ENTERED: {
    opacity: 1
  },
  ENTERING: {
    opacity: 0
  },
  EXITING: {
    opacity: 0
  },
  UNMOUNT: {
    opacity: 0
  }
};
var UnoptimizedOpacityTransition = (_a) => {
  var { children, style, className } = _a, transitionProps = __rest(_a, ["children", "style", "className"]);
  const { mount, stage, currentDuration } = useTransition(transitionProps);
  const defaultStyles = getOpacityTransitionDefaultStyles(currentDuration);
  const stageStyles = transitionStyles3[stage];
  if (!mount)
    return null;
  return (0, import_jsx_runtime32.jsx)("div", { className, style: Object.assign(Object.assign(Object.assign({}, defaultStyles), stageStyles), style), children });
};
var OpacityTransition = import_react61.default.memo(UnoptimizedOpacityTransition);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
var import_react62 = __toESM(require_react(), 1);
var OverlayCardContext = (0, import_react62.createContext)(void 0);
var OverlayCardTarget = ({ children }) => {
  const [portal, setPortal] = (0, import_react62.useState)(null);
  const [openedCards, setOpenedCards] = (0, import_react62.useState)(/* @__PURE__ */ new Set());
  return (0, import_jsx_runtime33.jsxs)(OverlayCardContext.Provider, { value: (0, import_react62.useMemo)(() => ({
    closeCard: (cardId) => setOpenedCards((cards) => {
      cards.delete(cardId);
      return new Set(cards);
    }),
    openCard: (cardId) => setOpenedCards((cards) => {
      cards.add(cardId);
      return new Set(cards);
    }),
    portal
  }), [portal]), children: [children, openedCards.size > 0 && (0, import_jsx_runtime33.jsx)("div", { className: "overlay-card-target", ref: setPortal })] });
};
var useOverlayCardTarget = (isOpen) => {
  var _a;
  const context = (0, import_react62.useContext)(OverlayCardContext);
  const id = (0, import_react62.useId)();
  (0, import_react62.useEffect)(() => {
    if (!context || !isOpen)
      return;
    context.openCard(id);
    return () => {
      context.closeCard(id);
    };
  }, [context, id, isOpen]);
  return (_a = context === null || context === void 0 ? void 0 : context.portal) !== null && _a !== void 0 ? _a : void 0;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js
var import_jsx_runtime152 = __toESM(require_jsx_runtime(), 1);
var import_react192 = __toESM(require_react(), 1);
var import_react_dom70 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AnimatePresence/AnimatePresence.js
var import_react191 = __toESM(require_react(), 1);
var import_jsx_runtime151 = __toESM(require_jsx_runtime(), 1);
var import_react_dom69 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useForceUpdate/useForceUpdate.js
var import_react63 = __toESM(require_react(), 1);
var useForceUpdate = () => {
  const [, setValue] = (0, import_react63.useState)(0);
  return () => setValue((value) => value + 1);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePrevious/usePrevious.js
var import_react64 = __toESM(require_react(), 1);
var usePrevious2 = (value) => {
  const ref = (0, import_react64.useRef)();
  (0, import_react64.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
};

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose3(r, e2) {
  if (null == r) return {};
  var t2 = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (e2.includes(n)) continue;
    t2[n] = r[n];
  }
  return t2;
}

// node_modules/react-focus-lock/dist/es2015/Combination.js
var React11 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/Lock.js
var React8 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/focus-lock/dist/es2015/constants.js
var FOCUS_GROUP = "data-focus-lock";
var FOCUS_DISABLED = "data-focus-lock-disabled";
var FOCUS_ALLOW = "data-no-focus-lock";
var FOCUS_AUTO = "data-autofocus-inside";
var FOCUS_NO_AUTOFOCUS = "data-no-autofocus";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react65 = __toESM(require_react());
function useCallbackRef(initialValue, callback) {
  var ref = (0, import_react65.useState)(function() {
    return {
      // value
      value: initialValue,
      // last callback
      callback,
      // "memoized" public interface
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
var React3 = __toESM(require_react());
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React3.useLayoutEffect : React3.useEffect;
var currentValues = /* @__PURE__ */ new WeakMap();
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  useIsomorphicLayoutEffect(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}

// node_modules/react-focus-lock/dist/es2015/Lock.js
var import_react68 = __toESM(require_react());

// node_modules/react-focus-lock/dist/es2015/FocusGuard.js
var React4 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var hiddenGuard = {
  width: "1px",
  height: "0px",
  padding: 0,
  overflow: "hidden",
  position: "fixed",
  top: "1px",
  left: "1px"
};
var InFocusGuard = function InFocusGuard2(_ref2) {
  var children = _ref2.children;
  return React4.createElement(React4.Fragment, null, React4.createElement("div", {
    key: "guard-first",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }), children, children && React4.createElement("div", {
    key: "guard-last",
    "data-focus-guard": true,
    "data-focus-auto-guard": true,
    style: hiddenGuard
  }));
};
InFocusGuard.propTypes = true ? {
  children: import_prop_types.default.node
} : {};
InFocusGuard.defaultProps = {
  children: null
};

// node_modules/tslib/tslib.es6.js
var __assign = function() {
  __assign = Object.assign || function __assign2(t2) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t2[p] = s[p];
    }
    return t2;
  };
  return __assign.apply(this, arguments);
};
function __rest2(s, e2) {
  var t2 = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e2.indexOf(p) < 0)
    t2[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e2.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t2[p[i]] = s[p[i]];
    }
  return t2;
}

// node_modules/use-sidecar/dist/es2015/hoc.js
var React5 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react66 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a) {
  return a;
}
function innerCreateMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x) {
          return x !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function(x) {
          return cb(x);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x) {
          pendingQueue.push(x);
          cycle();
        },
        filter: function(filter) {
          pendingQueue = pendingQueue.filter(filter);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createMedium(defaults, middleware) {
  if (middleware === void 0) {
    middleware = ItoI;
  }
  return innerCreateMedium(defaults, middleware);
}
function createSidecarMedium(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign({ async: true, ssr: false }, options2);
  return medium;
}

// node_modules/use-sidecar/dist/es2015/renderProp.js
var React6 = __toESM(require_react());
var import_react67 = __toESM(require_react());

// node_modules/use-sidecar/dist/es2015/exports.js
var React7 = __toESM(require_react());
var SideCar = function(_a) {
  var sideCar2 = _a.sideCar, rest = __rest2(_a, ["sideCar"]);
  if (!sideCar2) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar2.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React7.createElement(Target, __assign({}, rest));
};
SideCar.isSideCarExport = true;

// node_modules/react-focus-lock/dist/es2015/medium.js
var mediumFocus = createMedium({}, function(_ref2) {
  var target = _ref2.target, currentTarget = _ref2.currentTarget;
  return {
    target,
    currentTarget
  };
});
var mediumBlur = createMedium();
var mediumEffect = createMedium();
var mediumSidecar = createSidecarMedium({
  async: true
  // focus-lock sidecar is not required on the server
  // however, it might be required for JSDOM tests
  // ssr: true,
});

// node_modules/react-focus-lock/dist/es2015/Lock.js
var emptyArray = [];
var FocusLock = React8.forwardRef(function FocusLockUI(props, parentRef) {
  var _extends210;
  var _React$useState = React8.useState(), realObserved = _React$useState[0], setObserved = _React$useState[1];
  var observed = React8.useRef();
  var isActive = React8.useRef(false);
  var originalFocusedElement = React8.useRef(null);
  var children = props.children, disabled = props.disabled, noFocusGuards = props.noFocusGuards, persistentFocus = props.persistentFocus, crossFrame = props.crossFrame, autoFocus = props.autoFocus, allowTextSelection = props.allowTextSelection, group = props.group, className = props.className, whiteList = props.whiteList, hasPositiveIndices = props.hasPositiveIndices, _props$shards = props.shards, shards = _props$shards === void 0 ? emptyArray : _props$shards, _props$as = props.as, Container = _props$as === void 0 ? "div" : _props$as, _props$lockProps = props.lockProps, containerProps = _props$lockProps === void 0 ? {} : _props$lockProps, SideCar2 = props.sideCar, shouldReturnFocus = props.returnFocus, focusOptions = props.focusOptions, onActivationCallback = props.onActivation, onDeactivationCallback = props.onDeactivation;
  var _React$useState2 = React8.useState({}), id = _React$useState2[0];
  var onActivation = React8.useCallback(function() {
    originalFocusedElement.current = originalFocusedElement.current || document && document.activeElement;
    if (observed.current && onActivationCallback) {
      onActivationCallback(observed.current);
    }
    isActive.current = true;
  }, [onActivationCallback]);
  var onDeactivation = React8.useCallback(function() {
    isActive.current = false;
    if (onDeactivationCallback) {
      onDeactivationCallback(observed.current);
    }
  }, [onDeactivationCallback]);
  (0, import_react68.useEffect)(function() {
    if (!disabled) {
      originalFocusedElement.current = null;
    }
  }, []);
  var returnFocus = React8.useCallback(function(allowDefer) {
    var returnFocusTo = originalFocusedElement.current;
    if (returnFocusTo && returnFocusTo.focus) {
      var howToReturnFocus = typeof shouldReturnFocus === "function" ? shouldReturnFocus(returnFocusTo) : shouldReturnFocus;
      if (howToReturnFocus) {
        var returnFocusOptions = typeof howToReturnFocus === "object" ? howToReturnFocus : void 0;
        originalFocusedElement.current = null;
        if (allowDefer) {
          Promise.resolve().then(function() {
            return returnFocusTo.focus(returnFocusOptions);
          });
        } else {
          returnFocusTo.focus(returnFocusOptions);
        }
      }
    }
  }, [shouldReturnFocus]);
  var onFocus3 = React8.useCallback(function(event) {
    if (isActive.current) {
      mediumFocus.useMedium(event);
    }
  }, []);
  var onBlur3 = mediumBlur.useMedium;
  var setObserveNode = React8.useCallback(function(newObserved) {
    if (observed.current !== newObserved) {
      observed.current = newObserved;
      setObserved(newObserved);
    }
  }, []);
  if (true) {
    if (typeof allowTextSelection !== "undefined") {
      console.warn("React-Focus-Lock: allowTextSelection is deprecated and enabled by default");
    }
    React8.useEffect(function() {
      if (!observed.current && typeof Container !== "string") {
        console.error("FocusLock: could not obtain ref to internal node");
      }
    }, []);
  }
  var lockProps = _extends((_extends210 = {}, _extends210[FOCUS_DISABLED] = disabled && "disabled", _extends210[FOCUS_GROUP] = group, _extends210), containerProps);
  var hasLeadingGuards = noFocusGuards !== true;
  var hasTailingGuards = hasLeadingGuards && noFocusGuards !== "tail";
  var mergedRef = useMergeRefs([parentRef, setObserveNode]);
  return React8.createElement(React8.Fragment, null, hasLeadingGuards && [
    // nearest focus guard
    React8.createElement("div", {
      key: "guard-first",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 0,
      style: hiddenGuard
    }),
    // first tabbed element guard
    hasPositiveIndices ? React8.createElement("div", {
      key: "guard-nearest",
      "data-focus-guard": true,
      tabIndex: disabled ? -1 : 1,
      style: hiddenGuard
    }) : null
  ], !disabled && React8.createElement(SideCar2, {
    id,
    sideCar: mediumSidecar,
    observed: realObserved,
    disabled,
    persistentFocus,
    crossFrame,
    autoFocus,
    whiteList,
    shards,
    onActivation,
    onDeactivation,
    returnFocus,
    focusOptions
  }), React8.createElement(Container, _extends({
    ref: mergedRef
  }, lockProps, {
    className,
    onBlur: onBlur3,
    onFocus: onFocus3
  }), children), hasTailingGuards && React8.createElement("div", {
    "data-focus-guard": true,
    tabIndex: disabled ? -1 : 0,
    style: hiddenGuard
  }));
});
FocusLock.propTypes = true ? {
  children: import_prop_types2.node,
  disabled: import_prop_types2.bool,
  returnFocus: (0, import_prop_types2.oneOfType)([import_prop_types2.bool, import_prop_types2.object, import_prop_types2.func]),
  focusOptions: import_prop_types2.object,
  noFocusGuards: import_prop_types2.bool,
  hasPositiveIndices: import_prop_types2.bool,
  allowTextSelection: import_prop_types2.bool,
  autoFocus: import_prop_types2.bool,
  persistentFocus: import_prop_types2.bool,
  crossFrame: import_prop_types2.bool,
  group: import_prop_types2.string,
  className: import_prop_types2.string,
  whiteList: import_prop_types2.func,
  shards: (0, import_prop_types2.arrayOf)(import_prop_types2.any),
  as: (0, import_prop_types2.oneOfType)([import_prop_types2.string, import_prop_types2.func, import_prop_types2.object]),
  lockProps: import_prop_types2.object,
  onActivation: import_prop_types2.func,
  onDeactivation: import_prop_types2.func,
  sideCar: import_prop_types2.any.isRequired
} : {};
FocusLock.defaultProps = {
  children: void 0,
  disabled: false,
  returnFocus: false,
  focusOptions: void 0,
  noFocusGuards: false,
  autoFocus: true,
  persistentFocus: false,
  crossFrame: true,
  hasPositiveIndices: void 0,
  allowTextSelection: void 0,
  group: void 0,
  className: void 0,
  whiteList: void 0,
  shards: void 0,
  as: "div",
  lockProps: {},
  onActivation: void 0,
  onDeactivation: void 0
};
var Lock_default = FocusLock;

// node_modules/react-focus-lock/dist/es2015/Trap.js
var React10 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t2, e2) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t3, e3) {
    return t3.__proto__ = e3, t3;
  }, _setPrototypeOf(t2, e2);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t2, o) {
  t2.prototype = Object.create(o.prototype), t2.prototype.constructor = t2, _setPrototypeOf(t2, o);
}

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t2, r) {
  if ("object" != _typeof(t2) || !t2) return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i = e2.call(t2, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t2);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t2) {
  var i = toPrimitive(t2, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e2, r, t2) {
  return (r = toPropertyKey(r)) in e2 ? Object.defineProperty(e2, r, {
    value: t2,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e2[r] = t2, e2;
}

// node_modules/react-clientside-effect/lib/index.es.js
var import_react69 = __toESM(require_react());
function withSideEffect(reducePropsToState2, handleStateChangeOnClient2) {
  if (true) {
    if (typeof reducePropsToState2 !== "function") {
      throw new Error("Expected reducePropsToState to be a function.");
    }
    if (typeof handleStateChangeOnClient2 !== "function") {
      throw new Error("Expected handleStateChangeOnClient to be a function.");
    }
  }
  function getDisplayName2(WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
  }
  return function wrap(WrappedComponent) {
    if (true) {
      if (typeof WrappedComponent !== "function") {
        throw new Error("Expected WrappedComponent to be a React component.");
      }
    }
    var mountedInstances = [];
    var state;
    function emitChange() {
      state = reducePropsToState2(mountedInstances.map(function(instance2) {
        return instance2.props;
      }));
      handleStateChangeOnClient2(state);
    }
    var SideEffect = function(_PureComponent) {
      _inheritsLoose(SideEffect2, _PureComponent);
      function SideEffect2() {
        return _PureComponent.apply(this, arguments) || this;
      }
      SideEffect2.peek = function peek() {
        return state;
      };
      var _proto = SideEffect2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        mountedInstances.push(this);
        emitChange();
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        emitChange();
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        var index = mountedInstances.indexOf(this);
        mountedInstances.splice(index, 1);
        emitChange();
      };
      _proto.render = function render() {
        return import_react69.default.createElement(WrappedComponent, this.props);
      };
      return SideEffect2;
    }(import_react69.PureComponent);
    _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName2(WrappedComponent) + ")");
    return SideEffect;
  };
}
var index_es_default = withSideEffect;

// node_modules/focus-lock/dist/es2015/utils/array.js
var toArray2 = function(a) {
  var ret = Array(a.length);
  for (var i = 0; i < a.length; ++i) {
    ret[i] = a[i];
  }
  return ret;
};
var asArray = function(a) {
  return Array.isArray(a) ? a : [a];
};
var getFirst = function(a) {
  return Array.isArray(a) ? a[0] : a;
};

// node_modules/focus-lock/dist/es2015/utils/is.js
var isElementHidden = function(node2) {
  if (node2.nodeType !== Node.ELEMENT_NODE) {
    return false;
  }
  var computedStyle = window.getComputedStyle(node2, null);
  if (!computedStyle || !computedStyle.getPropertyValue) {
    return false;
  }
  return computedStyle.getPropertyValue("display") === "none" || computedStyle.getPropertyValue("visibility") === "hidden";
};
var getParentNode = function(node2) {
  return node2.parentNode && node2.parentNode.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    node2.parentNode.host
  ) : node2.parentNode;
};
var isTopNode = function(node2) {
  return node2 === document || node2 && node2.nodeType === Node.DOCUMENT_NODE;
};
var isVisibleUncached = function(node2, checkParent) {
  return !node2 || isTopNode(node2) || !isElementHidden(node2) && checkParent(getParentNode(node2));
};
var isVisibleCached = function(visibilityCache, node2) {
  var cached = visibilityCache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isVisibleUncached(node2, isVisibleCached.bind(void 0, visibilityCache));
  visibilityCache.set(node2, result);
  return result;
};
var isAutoFocusAllowedUncached = function(node2, checkParent) {
  return node2 && !isTopNode(node2) ? isAutoFocusAllowed(node2) ? checkParent(getParentNode(node2)) : false : true;
};
var isAutoFocusAllowedCached = function(cache, node2) {
  var cached = cache.get(node2);
  if (cached !== void 0) {
    return cached;
  }
  var result = isAutoFocusAllowedUncached(node2, isAutoFocusAllowedCached.bind(void 0, cache));
  cache.set(node2, result);
  return result;
};
var getDataset = function(node2) {
  return node2.dataset;
};
var isHTMLButtonElement = function(node2) {
  return node2.tagName === "BUTTON";
};
var isHTMLInputElement = function(node2) {
  return node2.tagName === "INPUT";
};
var isRadioElement = function(node2) {
  return isHTMLInputElement(node2) && node2.type === "radio";
};
var notHiddenInput = function(node2) {
  return !((isHTMLInputElement(node2) || isHTMLButtonElement(node2)) && (node2.type === "hidden" || node2.disabled));
};
var isAutoFocusAllowed = function(node2) {
  var attribute = node2.getAttribute(FOCUS_NO_AUTOFOCUS);
  return ![true, "true", ""].includes(attribute);
};
var isGuard = function(node2) {
  var _a;
  return Boolean(node2 && ((_a = getDataset(node2)) === null || _a === void 0 ? void 0 : _a.focusGuard));
};
var isNotAGuard = function(node2) {
  return !isGuard(node2);
};
var isDefined = function(x) {
  return Boolean(x);
};

// node_modules/focus-lock/dist/es2015/utils/tabOrder.js
var tabSort = function(a, b) {
  var tabDiff = a.tabIndex - b.tabIndex;
  var indexDiff = a.index - b.index;
  if (tabDiff) {
    if (!a.tabIndex) {
      return 1;
    }
    if (!b.tabIndex) {
      return -1;
    }
  }
  return tabDiff || indexDiff;
};
var orderByTabIndex = function(nodes, filterNegative, keepGuards) {
  return toArray2(nodes).map(function(node2, index) {
    return {
      node: node2,
      index,
      tabIndex: keepGuards && node2.tabIndex === -1 ? (node2.dataset || {}).focusGuard ? 0 : -1 : node2.tabIndex
    };
  }).filter(function(data) {
    return !filterNegative || data.tabIndex >= 0;
  }).sort(tabSort);
};

// node_modules/focus-lock/dist/es2015/utils/tabbables.js
var tabbables = [
  "button:enabled",
  "select:enabled",
  "textarea:enabled",
  "input:enabled",
  // elements with explicit roles will also use explicit tabindex
  // '[role="button"]',
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[tabindex]",
  "[contenteditable]",
  "[autofocus]"
];

// node_modules/focus-lock/dist/es2015/utils/tabUtils.js
var queryTabbables = tabbables.join(",");
var queryGuardTabbables = "".concat(queryTabbables, ", [data-focus-guard]");
var getFocusablesWithShadowDom = function(parent, withGuards) {
  return toArray2((parent.shadowRoot || parent).children).reduce(function(acc, child) {
    return acc.concat(child.matches(withGuards ? queryGuardTabbables : queryTabbables) ? [child] : [], getFocusablesWithShadowDom(child));
  }, []);
};
var getFocusablesWithIFrame = function(parent, withGuards) {
  var _a;
  if (parent instanceof HTMLIFrameElement && ((_a = parent.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {
    return getFocusables([parent.contentDocument.body], withGuards);
  }
  return [parent];
};
var getFocusables = function(parents, withGuards) {
  return parents.reduce(function(acc, parent) {
    var _a;
    var focusableWithShadowDom = getFocusablesWithShadowDom(parent, withGuards);
    var focusableWithIframes = (_a = []).concat.apply(_a, focusableWithShadowDom.map(function(node2) {
      return getFocusablesWithIFrame(node2, withGuards);
    }));
    return acc.concat(
      // add all tabbables inside and within shadow DOMs in DOM order
      focusableWithIframes,
      // add if node is tabbable itself
      parent.parentNode ? toArray2(parent.parentNode.querySelectorAll(queryTabbables)).filter(function(node2) {
        return node2 === parent;
      }) : []
    );
  }, []);
};
var getParentAutofocusables = function(parent) {
  var parentFocus = parent.querySelectorAll("[".concat(FOCUS_AUTO, "]"));
  return toArray2(parentFocus).map(function(node2) {
    return getFocusables([node2]);
  }).reduce(function(acc, nodes) {
    return acc.concat(nodes);
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/DOMutils.js
var filterFocusable = function(nodes, visibilityCache) {
  return toArray2(nodes).filter(function(node2) {
    return isVisibleCached(visibilityCache, node2);
  }).filter(function(node2) {
    return notHiddenInput(node2);
  });
};
var filterAutoFocusable = function(nodes, cache) {
  if (cache === void 0) {
    cache = /* @__PURE__ */ new Map();
  }
  return toArray2(nodes).filter(function(node2) {
    return isAutoFocusAllowedCached(cache, node2);
  });
};
var getTabbableNodes = function(topNodes, visibilityCache, withGuards) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes, withGuards), visibilityCache), true, withGuards);
};
var getAllTabbableNodes = function(topNodes, visibilityCache) {
  return orderByTabIndex(filterFocusable(getFocusables(topNodes), visibilityCache), false);
};
var parentAutofocusables = function(topNode, visibilityCache) {
  return filterFocusable(getParentAutofocusables(topNode), visibilityCache);
};
var contains = function(scope, element) {
  if (scope.shadowRoot) {
    return contains(scope.shadowRoot, element);
  } else {
    if (Object.getPrototypeOf(scope).contains !== void 0 && Object.getPrototypeOf(scope).contains.call(scope, element)) {
      return true;
    }
    return toArray2(scope.children).some(function(child) {
      var _a;
      if (child instanceof HTMLIFrameElement) {
        var iframeBody = (_a = child.contentDocument) === null || _a === void 0 ? void 0 : _a.body;
        if (iframeBody) {
          return contains(iframeBody, element);
        }
        return false;
      }
      return contains(child, element);
    });
  }
};

// node_modules/focus-lock/dist/es2015/utils/all-affected.js
var filterNested = function(nodes) {
  var contained = /* @__PURE__ */ new Set();
  var l = nodes.length;
  for (var i = 0; i < l; i += 1) {
    for (var j = i + 1; j < l; j += 1) {
      var position = nodes[i].compareDocumentPosition(nodes[j]);
      if ((position & Node.DOCUMENT_POSITION_CONTAINED_BY) > 0) {
        contained.add(j);
      }
      if ((position & Node.DOCUMENT_POSITION_CONTAINS) > 0) {
        contained.add(i);
      }
    }
  }
  return nodes.filter(function(_, index) {
    return !contained.has(index);
  });
};
var getTopParent = function(node2) {
  return node2.parentNode ? getTopParent(node2.parentNode) : node2;
};
var getAllAffectedNodes = function(node2) {
  var nodes = asArray(node2);
  return nodes.filter(Boolean).reduce(function(acc, currentNode) {
    var group = currentNode.getAttribute(FOCUS_GROUP);
    acc.push.apply(acc, group ? filterNested(toArray2(getTopParent(currentNode).querySelectorAll("[".concat(FOCUS_GROUP, '="').concat(group, '"]:not([').concat(FOCUS_DISABLED, '="disabled"])')))) : [currentNode]);
    return acc;
  }, []);
};

// node_modules/focus-lock/dist/es2015/utils/safe.js
var safeProbe = function(cb) {
  try {
    return cb();
  } catch (e2) {
    return void 0;
  }
};

// node_modules/focus-lock/dist/es2015/utils/getActiveElement.js
var getActiveElement = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  if (!inDocument || !inDocument.activeElement) {
    return void 0;
  }
  var activeElement = inDocument.activeElement;
  return activeElement.shadowRoot ? getActiveElement(activeElement.shadowRoot) : activeElement instanceof HTMLIFrameElement && safeProbe(function() {
    return activeElement.contentWindow.document;
  }) ? getActiveElement(activeElement.contentWindow.document) : activeElement;
};

// node_modules/focus-lock/dist/es2015/focusInside.js
var focusInFrame = function(frame, activeElement) {
  return frame === activeElement;
};
var focusInsideIframe = function(topNode, activeElement) {
  return Boolean(toArray2(topNode.querySelectorAll("iframe")).some(function(node2) {
    return focusInFrame(node2, activeElement);
  }));
};
var focusInside = function(topNode, activeElement) {
  if (activeElement === void 0) {
    activeElement = getActiveElement(getFirst(topNode).ownerDocument);
  }
  if (!activeElement || activeElement.dataset && activeElement.dataset.focusGuard) {
    return false;
  }
  return getAllAffectedNodes(topNode).some(function(node2) {
    return contains(node2, activeElement) || focusInsideIframe(node2, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/focusIsHidden.js
var focusIsHidden = function(inDocument) {
  if (inDocument === void 0) {
    inDocument = document;
  }
  var activeElement = getActiveElement(inDocument);
  if (!activeElement) {
    return false;
  }
  return toArray2(inDocument.querySelectorAll("[".concat(FOCUS_ALLOW, "]"))).some(function(node2) {
    return contains(node2, activeElement);
  });
};

// node_modules/focus-lock/dist/es2015/utils/correctFocus.js
var findSelectedRadio = function(node2, nodes) {
  return nodes.filter(isRadioElement).filter(function(el) {
    return el.name === node2.name;
  }).filter(function(el) {
    return el.checked;
  })[0] || node2;
};
var correctNode = function(node2, nodes) {
  if (isRadioElement(node2) && node2.name) {
    return findSelectedRadio(node2, nodes);
  }
  return node2;
};
var correctNodes = function(nodes) {
  var resultSet = /* @__PURE__ */ new Set();
  nodes.forEach(function(node2) {
    return resultSet.add(correctNode(node2, nodes));
  });
  return nodes.filter(function(node2) {
    return resultSet.has(node2);
  });
};

// node_modules/focus-lock/dist/es2015/utils/firstFocus.js
var pickFirstFocus = function(nodes) {
  if (nodes[0] && nodes.length > 1) {
    return correctNode(nodes[0], nodes);
  }
  return nodes[0];
};
var pickFocusable = function(nodes, index) {
  if (nodes.length > 1) {
    return nodes.indexOf(correctNode(nodes[index], nodes));
  }
  return index;
};

// node_modules/focus-lock/dist/es2015/solver.js
var NEW_FOCUS = "NEW_FOCUS";
var newFocus = function(innerNodes, outerNodes, activeElement, lastNode) {
  var cnt = innerNodes.length;
  var firstFocus = innerNodes[0];
  var lastFocus = innerNodes[cnt - 1];
  var isOnGuard = isGuard(activeElement);
  if (activeElement && innerNodes.indexOf(activeElement) >= 0) {
    return void 0;
  }
  var activeIndex = activeElement !== void 0 ? outerNodes.indexOf(activeElement) : -1;
  var lastIndex = lastNode ? outerNodes.indexOf(lastNode) : activeIndex;
  var lastNodeInside = lastNode ? innerNodes.indexOf(lastNode) : -1;
  var indexDiff = activeIndex - lastIndex;
  var firstNodeIndex = outerNodes.indexOf(firstFocus);
  var lastNodeIndex = outerNodes.indexOf(lastFocus);
  var correctedNodes = correctNodes(outerNodes);
  var correctedIndex = activeElement !== void 0 ? correctedNodes.indexOf(activeElement) : -1;
  var correctedIndexDiff = correctedIndex - (lastNode ? correctedNodes.indexOf(lastNode) : activeIndex);
  var returnFirstNode = pickFocusable(innerNodes, 0);
  var returnLastNode = pickFocusable(innerNodes, cnt - 1);
  if (activeIndex === -1 || lastNodeInside === -1) {
    return NEW_FOCUS;
  }
  if (!indexDiff && lastNodeInside >= 0) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnLastNode;
  }
  if (activeIndex >= lastNodeIndex && isOnGuard && Math.abs(indexDiff) > 1) {
    return returnFirstNode;
  }
  if (indexDiff && Math.abs(correctedIndexDiff) > 1) {
    return lastNodeInside;
  }
  if (activeIndex <= firstNodeIndex) {
    return returnLastNode;
  }
  if (activeIndex > lastNodeIndex) {
    return returnFirstNode;
  }
  if (indexDiff) {
    if (Math.abs(indexDiff) > 1) {
      return lastNodeInside;
    }
    return (cnt + lastNodeInside + indexDiff) % cnt;
  }
  return void 0;
};

// node_modules/focus-lock/dist/es2015/utils/auto-focus.js
var findAutoFocused = function(autoFocusables) {
  return function(node2) {
    var _a;
    var autofocus = (_a = getDataset(node2)) === null || _a === void 0 ? void 0 : _a.autofocus;
    return (
      // @ts-expect-error
      node2.autofocus || //
      autofocus !== void 0 && autofocus !== "false" || //
      autoFocusables.indexOf(node2) >= 0
    );
  };
};
var pickAutofocus = function(nodesIndexes, orderedNodes, groups) {
  var nodes = nodesIndexes.map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var autoFocusable = filterAutoFocusable(nodes.filter(findAutoFocused(groups)));
  if (autoFocusable && autoFocusable.length) {
    return pickFirstFocus(autoFocusable);
  }
  return pickFirstFocus(filterAutoFocusable(orderedNodes));
};

// node_modules/focus-lock/dist/es2015/utils/parenting.js
var getParents = function(node2, parents) {
  if (parents === void 0) {
    parents = [];
  }
  parents.push(node2);
  if (node2.parentNode) {
    getParents(node2.parentNode.host || node2.parentNode, parents);
  }
  return parents;
};
var getCommonParent = function(nodeA, nodeB) {
  var parentsA = getParents(nodeA);
  var parentsB = getParents(nodeB);
  for (var i = 0; i < parentsA.length; i += 1) {
    var currentParent = parentsA[i];
    if (parentsB.indexOf(currentParent) >= 0) {
      return currentParent;
    }
  }
  return false;
};
var getTopCommonParent = function(baseActiveElement, leftEntry, rightEntries) {
  var activeElements = asArray(baseActiveElement);
  var leftEntries = asArray(leftEntry);
  var activeElement = activeElements[0];
  var topCommon = false;
  leftEntries.filter(Boolean).forEach(function(entry) {
    topCommon = getCommonParent(topCommon || entry, entry) || topCommon;
    rightEntries.filter(Boolean).forEach(function(subEntry) {
      var common = getCommonParent(activeElement, subEntry);
      if (common) {
        if (!topCommon || contains(common, topCommon)) {
          topCommon = common;
        } else {
          topCommon = getCommonParent(common, topCommon);
        }
      }
    });
  });
  return topCommon;
};
var allParentAutofocusables = function(entries, visibilityCache) {
  return entries.reduce(function(acc, node2) {
    return acc.concat(parentAutofocusables(node2, visibilityCache));
  }, []);
};

// node_modules/focus-lock/dist/es2015/focusMerge.js
var reorderNodes = function(srcNodes, dstNodes) {
  var remap = /* @__PURE__ */ new Map();
  dstNodes.forEach(function(entity) {
    return remap.set(entity.node, entity);
  });
  return srcNodes.map(function(node2) {
    return remap.get(node2);
  }).filter(isDefined);
};
var getFocusMerge = function(topNode, lastNode) {
  var activeElement = getActiveElement(asArray(topNode).length > 0 ? document : getFirst(topNode).ownerDocument);
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(activeElement || topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var anyFocusable = getAllTabbableNodes(entries, visibilityCache);
  var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  });
  if (!innerElements[0]) {
    innerElements = anyFocusable;
    if (!innerElements[0]) {
      return void 0;
    }
  }
  var outerNodes = getAllTabbableNodes([commonParent], visibilityCache).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var orderedInnerElements = reorderNodes(outerNodes, innerElements);
  var innerNodes = orderedInnerElements.map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  var newId = newFocus(innerNodes, outerNodes, activeElement, lastNode);
  if (newId === NEW_FOCUS) {
    var focusNode = pickAutofocus(anyFocusable, innerNodes, allParentAutofocusables(entries, visibilityCache));
    if (focusNode) {
      return { node: focusNode };
    } else {
      console.warn("focus-lock: cannot find any node to move focus into");
      return void 0;
    }
  }
  if (newId === void 0) {
    return newId;
  }
  return orderedInnerElements[newId];
};

// node_modules/focus-lock/dist/es2015/focusables.js
var getFocusabledIn = function(topNode) {
  var entries = getAllAffectedNodes(topNode).filter(isNotAGuard);
  var commonParent = getTopCommonParent(topNode, topNode, entries);
  var visibilityCache = /* @__PURE__ */ new Map();
  var outerNodes = getTabbableNodes([commonParent], visibilityCache, true);
  var innerElements = getTabbableNodes(entries, visibilityCache).filter(function(_a) {
    var node2 = _a.node;
    return isNotAGuard(node2);
  }).map(function(_a) {
    var node2 = _a.node;
    return node2;
  });
  return outerNodes.map(function(_a) {
    var node2 = _a.node, index = _a.index;
    return {
      node: node2,
      index,
      lockItem: innerElements.indexOf(node2) >= 0,
      guard: isGuard(node2)
    };
  });
};

// node_modules/focus-lock/dist/es2015/setFocus.js
var focusOn = function(target, focusOptions) {
  if ("focus" in target) {
    target.focus(focusOptions);
  }
  if ("contentWindow" in target && target.contentWindow) {
    target.contentWindow.focus();
  }
};
var guardCount = 0;
var lockDisabled = false;
var setFocus = function(topNode, lastNode, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var focusable = getFocusMerge(topNode, lastNode);
  if (lockDisabled) {
    return;
  }
  if (focusable) {
    if (guardCount > 2) {
      console.error("FocusLock: focus-fighting detected. Only one focus management system could be active. See https://github.com/theKashey/focus-lock/#focus-fighting");
      lockDisabled = true;
      setTimeout(function() {
        lockDisabled = false;
      }, 1);
      return;
    }
    guardCount++;
    focusOn(focusable.node, options2.focusOptions);
    guardCount--;
  }
};

// node_modules/focus-lock/dist/es2015/index.js
var es2015_default = setFocus;

// node_modules/react-focus-lock/dist/es2015/util.js
function deferAction(action) {
  var _window = window, setImmediate = _window.setImmediate;
  if (typeof setImmediate !== "undefined") {
    setImmediate(action);
  } else {
    setTimeout(action, 1);
  }
}
var inlineProp = function inlineProp2(name, value) {
  var obj = {};
  obj[name] = value;
  return obj;
};

// node_modules/react-focus-lock/dist/es2015/Trap.js
var focusOnBody = function focusOnBody2() {
  return document && document.activeElement === document.body;
};
var isFreeFocus = function isFreeFocus2() {
  return focusOnBody() || focusIsHidden();
};
var lastActiveTrap = null;
var lastActiveFocus = null;
var lastPortaledElement = null;
var focusWasOutsideWindow = false;
var defaultWhitelist = function defaultWhitelist2() {
  return true;
};
var focusWhitelisted = function focusWhitelisted2(activeElement) {
  return (lastActiveTrap.whiteList || defaultWhitelist)(activeElement);
};
var recordPortal = function recordPortal2(observerNode, portaledElement) {
  lastPortaledElement = {
    observerNode,
    portaledElement
  };
};
var focusIsPortaledPair = function focusIsPortaledPair2(element) {
  return lastPortaledElement && lastPortaledElement.portaledElement === element;
};
function autoGuard(startIndex, end, step, allNodes) {
  var lastGuard = null;
  var i = startIndex;
  do {
    var item = allNodes[i];
    if (item.guard) {
      if (item.node.dataset.focusAutoGuard) {
        lastGuard = item;
      }
    } else if (item.lockItem) {
      if (i !== startIndex) {
        return;
      }
      lastGuard = null;
    } else {
      break;
    }
  } while ((i += step) !== end);
  if (lastGuard) {
    lastGuard.node.tabIndex = 0;
  }
}
var extractRef = function extractRef2(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var focusWasOutside = function focusWasOutside2(crossFrameOption) {
  if (crossFrameOption) {
    return Boolean(focusWasOutsideWindow);
  }
  return focusWasOutsideWindow === "meanwhile";
};
var checkInHost = function checkInHost2(check, el, boundary) {
  return el && // find host equal to active element and check nested active element
  (el.host === check && (!el.activeElement || boundary.contains(el.activeElement)) || el.parentNode && checkInHost2(check, el.parentNode, boundary));
};
var withinHost = function withinHost2(activeElement, workingArea) {
  return workingArea.some(function(area) {
    return checkInHost(activeElement, area, area);
  });
};
var activateTrap = function activateTrap2() {
  var result = false;
  if (lastActiveTrap) {
    var _lastActiveTrap = lastActiveTrap, observed = _lastActiveTrap.observed, persistentFocus = _lastActiveTrap.persistentFocus, autoFocus = _lastActiveTrap.autoFocus, shards = _lastActiveTrap.shards, crossFrame = _lastActiveTrap.crossFrame, focusOptions = _lastActiveTrap.focusOptions;
    var workingNode = observed || lastPortaledElement && lastPortaledElement.portaledElement;
    var activeElement = document && document.activeElement;
    if (workingNode) {
      var workingArea = [workingNode].concat(shards.map(extractRef).filter(Boolean));
      if (!activeElement || focusWhitelisted(activeElement)) {
        if (persistentFocus || focusWasOutside(crossFrame) || !isFreeFocus() || !lastActiveFocus && autoFocus) {
          if (workingNode && !// active element is "inside" working area
          (focusInside(workingArea) || // check for shadow-dom contained elements
          activeElement && withinHost(activeElement, workingArea) || focusIsPortaledPair(activeElement, workingNode))) {
            if (document && !lastActiveFocus && activeElement && !autoFocus) {
              if (activeElement.blur) {
                activeElement.blur();
              }
              document.body.focus();
            } else {
              result = es2015_default(workingArea, lastActiveFocus, {
                focusOptions
              });
              lastPortaledElement = {};
            }
          }
          focusWasOutsideWindow = false;
          lastActiveFocus = document && document.activeElement;
        }
      }
      if (document) {
        var newActiveElement = document && document.activeElement;
        var allNodes = getFocusabledIn(workingArea);
        var focusedIndex = allNodes.map(function(_ref2) {
          var node2 = _ref2.node;
          return node2;
        }).indexOf(newActiveElement);
        if (focusedIndex > -1) {
          allNodes.filter(function(_ref2) {
            var guard = _ref2.guard, node2 = _ref2.node;
            return guard && node2.dataset.focusAutoGuard;
          }).forEach(function(_ref3) {
            var node2 = _ref3.node;
            return node2.removeAttribute("tabIndex");
          });
          autoGuard(focusedIndex, allNodes.length, 1, allNodes);
          autoGuard(focusedIndex, -1, -1, allNodes);
        }
      }
    }
  }
  return result;
};
var onTrap = function onTrap2(event) {
  if (activateTrap() && event) {
    event.stopPropagation();
    event.preventDefault();
  }
};
var onBlur = function onBlur2() {
  return deferAction(activateTrap);
};
var onFocus = function onFocus2(event) {
  var source = event.target;
  var currentNode = event.currentTarget;
  if (!currentNode.contains(source)) {
    recordPortal(currentNode, source);
  }
};
var FocusWatcher = function FocusWatcher2() {
  return null;
};
var FocusTrap = function FocusTrap2(_ref4) {
  var children = _ref4.children;
  return React10.createElement("div", {
    onBlur,
    onFocus
  }, children);
};
FocusTrap.propTypes = true ? {
  children: import_prop_types3.default.node.isRequired
} : {};
var onWindowBlur = function onWindowBlur2() {
  focusWasOutsideWindow = "just";
  setTimeout(function() {
    focusWasOutsideWindow = "meanwhile";
  }, 0);
};
var attachHandler = function attachHandler2() {
  document.addEventListener("focusin", onTrap);
  document.addEventListener("focusout", onBlur);
  window.addEventListener("blur", onWindowBlur);
};
var detachHandler = function detachHandler2() {
  document.removeEventListener("focusin", onTrap);
  document.removeEventListener("focusout", onBlur);
  window.removeEventListener("blur", onWindowBlur);
};
function reducePropsToState(propsList) {
  return propsList.filter(function(_ref5) {
    var disabled = _ref5.disabled;
    return !disabled;
  });
}
function handleStateChangeOnClient(traps) {
  var trap = traps.slice(-1)[0];
  if (trap && !lastActiveTrap) {
    attachHandler();
  }
  var lastTrap = lastActiveTrap;
  var sameTrap = lastTrap && trap && trap.id === lastTrap.id;
  lastActiveTrap = trap;
  if (lastTrap && !sameTrap) {
    lastTrap.onDeactivation();
    if (!traps.filter(function(_ref6) {
      var id = _ref6.id;
      return id === lastTrap.id;
    }).length) {
      lastTrap.returnFocus(!trap);
    }
  }
  if (trap) {
    lastActiveFocus = null;
    if (!sameTrap || lastTrap.observed !== trap.observed) {
      trap.onActivation();
    }
    activateTrap(true);
    deferAction(activateTrap);
  } else {
    detachHandler();
    lastActiveFocus = null;
  }
}
mediumFocus.assignSyncMedium(onFocus);
mediumBlur.assignMedium(onBlur);
mediumEffect.assignMedium(function(cb) {
  return cb({
    moveFocusInside: es2015_default,
    focusInside
  });
});
var Trap_default = index_es_default(reducePropsToState, handleStateChangeOnClient)(FocusWatcher);

// node_modules/react-focus-lock/dist/es2015/Combination.js
var FocusLockCombination = React11.forwardRef(function FocusLockUICombination(props, ref) {
  return React11.createElement(Lock_default, _extends({
    sideCar: Trap_default,
    ref
  }, props));
});
var _ref = Lock_default.propTypes || {};
var sideCar = _ref.sideCar;
var propTypes = _objectWithoutPropertiesLoose3(_ref, ["sideCar"]);
FocusLockCombination.propTypes = true ? propTypes : {};
var Combination_default = FocusLockCombination;

// node_modules/react-focus-lock/dist/es2015/AutoFocusInside.js
var React12 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());
var AutoFocusInside = function AutoFocusInside2(_ref2) {
  var disabled = _ref2.disabled, children = _ref2.children, className = _ref2.className;
  return React12.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !disabled), {
    className
  }), children);
};
AutoFocusInside.propTypes = true ? {
  children: import_prop_types4.default.node.isRequired,
  disabled: import_prop_types4.default.bool,
  className: import_prop_types4.default.string
} : {};
AutoFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/MoveFocusInside.js
var React13 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var useFocusInside = function useFocusInside2(observedRef) {
  React13.useEffect(function() {
    var enabled = true;
    mediumEffect.useMedium(function(car) {
      var observed = observedRef && observedRef.current;
      if (enabled && observed) {
        if (!car.focusInside(observed)) {
          car.moveFocusInside(observed, null);
        }
      }
    });
    return function() {
      enabled = false;
    };
  }, [observedRef]);
};
function MoveFocusInside(_ref2) {
  var isDisabled = _ref2.disabled, className = _ref2.className, children = _ref2.children;
  var ref = React13.useRef(null);
  useFocusInside(isDisabled ? void 0 : ref);
  return React13.createElement("div", _extends({}, inlineProp(FOCUS_AUTO, !isDisabled), {
    ref,
    className
  }), children);
}
MoveFocusInside.propTypes = true ? {
  children: import_prop_types5.default.node.isRequired,
  disabled: import_prop_types5.default.bool,
  className: import_prop_types5.default.string
} : {};
MoveFocusInside.defaultProps = {
  disabled: false,
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/FreeFocusInside.js
var React14 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var FreeFocusInside = function FreeFocusInside2(_ref2) {
  var children = _ref2.children, className = _ref2.className;
  return React14.createElement("div", _extends({}, inlineProp(FOCUS_ALLOW, true), {
    className
  }), children);
};
FreeFocusInside.propTypes = true ? {
  children: import_prop_types6.default.node.isRequired,
  className: import_prop_types6.default.string
} : {};
FreeFocusInside.defaultProps = {
  className: void 0
};

// node_modules/react-focus-lock/dist/es2015/index.js
var es2015_default2 = Combination_default;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AnimatePresence/AnimatePresence.js
var import_qrcode67 = __toESM(require_browser(), 1);

// node_modules/formik/dist/formik.esm.js
var import_react70 = __toESM(require_react());
var import_react_fast_compare = __toESM(require_react_fast_compare());

// node_modules/deepmerge/dist/es.js
var isMergeableObject = function isMergeableObject2(value) {
  return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
  return !!value && typeof value === "object";
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
var canUseSymbol = typeof Symbol === "function" && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options2) {
  return options2.clone !== false && options2.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options2) : value;
}
function defaultArrayMerge(target, source, options2) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options2);
  });
}
function mergeObject(target, source, options2) {
  var destination = {};
  if (options2.isMergeableObject(target)) {
    Object.keys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options2);
    });
  }
  Object.keys(source).forEach(function(key) {
    if (!options2.isMergeableObject(source[key]) || !target[key]) {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options2);
    } else {
      destination[key] = deepmerge(target[key], source[key], options2);
    }
  });
  return destination;
}
function deepmerge(target, source, options2) {
  options2 = options2 || {};
  options2.arrayMerge = options2.arrayMerge || defaultArrayMerge;
  options2.isMergeableObject = options2.isMergeableObject || isMergeableObject;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options2);
  } else if (sourceIsArray) {
    return options2.arrayMerge(target, source, options2);
  } else {
    return mergeObject(target, source, options2);
  }
}
deepmerge.all = function deepmergeAll(array2, options2) {
  if (!Array.isArray(array2)) {
    throw new Error("first argument should be an array");
  }
  return array2.reduce(function(prev, next) {
    return deepmerge(prev, next, options2);
  }, {});
};
var deepmerge_1 = deepmerge;
var es_default = deepmerge_1;

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e2) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/_overArg.js
function overArg(func2, transform) {
  return function(arg) {
    return func2(transform(arg));
  };
}
var overArg_default = overArg;

// node_modules/lodash-es/_getPrototype.js
var getPrototype = overArg_default(Object.getPrototypeOf, Object);
var getPrototype_default = getPrototype;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isPlainObject.js
var objectTag = "[object Object]";
var funcProto = Function.prototype;
var objectProto3 = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty2 = objectProto3.hasOwnProperty;
var objectCtorString = funcToString.call(Object);
function isPlainObject(value) {
  if (!isObjectLike_default(value) || baseGetTag_default(value) != objectTag) {
    return false;
  }
  var proto = getPrototype_default(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
  return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
var isPlainObject_default = isPlainObject;

// node_modules/lodash-es/_listCacheClear.js
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}
var listCacheClear_default = listCacheClear;

// node_modules/lodash-es/eq.js
function eq(value, other) {
  return value === other || value !== value && other !== other;
}
var eq_default = eq;

// node_modules/lodash-es/_assocIndexOf.js
function assocIndexOf(array2, key) {
  var length = array2.length;
  while (length--) {
    if (eq_default(array2[length][0], key)) {
      return length;
    }
  }
  return -1;
}
var assocIndexOf_default = assocIndexOf;

// node_modules/lodash-es/_listCacheDelete.js
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}
var listCacheDelete_default = listCacheDelete;

// node_modules/lodash-es/_listCacheGet.js
function listCacheGet(key) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  return index < 0 ? void 0 : data[index][1];
}
var listCacheGet_default = listCacheGet;

// node_modules/lodash-es/_listCacheHas.js
function listCacheHas(key) {
  return assocIndexOf_default(this.__data__, key) > -1;
}
var listCacheHas_default = listCacheHas;

// node_modules/lodash-es/_listCacheSet.js
function listCacheSet(key, value) {
  var data = this.__data__, index = assocIndexOf_default(data, key);
  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}
var listCacheSet_default = listCacheSet;

// node_modules/lodash-es/_ListCache.js
function ListCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
ListCache.prototype.clear = listCacheClear_default;
ListCache.prototype["delete"] = listCacheDelete_default;
ListCache.prototype.get = listCacheGet_default;
ListCache.prototype.has = listCacheHas_default;
ListCache.prototype.set = listCacheSet_default;
var ListCache_default = ListCache;

// node_modules/lodash-es/_stackClear.js
function stackClear() {
  this.__data__ = new ListCache_default();
  this.size = 0;
}
var stackClear_default = stackClear;

// node_modules/lodash-es/_stackDelete.js
function stackDelete(key) {
  var data = this.__data__, result = data["delete"](key);
  this.size = data.size;
  return result;
}
var stackDelete_default = stackDelete;

// node_modules/lodash-es/_stackGet.js
function stackGet(key) {
  return this.__data__.get(key);
}
var stackGet_default = stackGet;

// node_modules/lodash-es/_stackHas.js
function stackHas(key) {
  return this.__data__.has(key);
}
var stackHas_default = stackHas;

// node_modules/lodash-es/isObject.js
function isObject2(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject2;

// node_modules/lodash-es/isFunction.js
var asyncTag = "[object AsyncFunction]";
var funcTag = "[object Function]";
var genTag = "[object GeneratorFunction]";
var proxyTag = "[object Proxy]";
function isFunction(value) {
  if (!isObject_default(value)) {
    return false;
  }
  var tag = baseGetTag_default(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
var isFunction_default = isFunction;

// node_modules/lodash-es/_coreJsData.js
var coreJsData = root_default["__core-js_shared__"];
var coreJsData_default = coreJsData;

// node_modules/lodash-es/_isMasked.js
var maskSrcKey = function() {
  var uid = /[^.]+$/.exec(coreJsData_default && coreJsData_default.keys && coreJsData_default.keys.IE_PROTO || "");
  return uid ? "Symbol(src)_1." + uid : "";
}();
function isMasked(func2) {
  return !!maskSrcKey && maskSrcKey in func2;
}
var isMasked_default = isMasked;

// node_modules/lodash-es/_toSource.js
var funcProto2 = Function.prototype;
var funcToString2 = funcProto2.toString;
function toSource(func2) {
  if (func2 != null) {
    try {
      return funcToString2.call(func2);
    } catch (e2) {
    }
    try {
      return func2 + "";
    } catch (e2) {
    }
  }
  return "";
}
var toSource_default = toSource;

// node_modules/lodash-es/_baseIsNative.js
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto3 = Function.prototype;
var objectProto4 = Object.prototype;
var funcToString3 = funcProto3.toString;
var hasOwnProperty3 = objectProto4.hasOwnProperty;
var reIsNative = RegExp(
  "^" + funcToString3.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function baseIsNative(value) {
  if (!isObject_default(value) || isMasked_default(value)) {
    return false;
  }
  var pattern = isFunction_default(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource_default(value));
}
var baseIsNative_default = baseIsNative;

// node_modules/lodash-es/_getValue.js
function getValue(object3, key) {
  return object3 == null ? void 0 : object3[key];
}
var getValue_default = getValue;

// node_modules/lodash-es/_getNative.js
function getNative(object3, key) {
  var value = getValue_default(object3, key);
  return baseIsNative_default(value) ? value : void 0;
}
var getNative_default = getNative;

// node_modules/lodash-es/_Map.js
var Map2 = getNative_default(root_default, "Map");
var Map_default = Map2;

// node_modules/lodash-es/_nativeCreate.js
var nativeCreate = getNative_default(Object, "create");
var nativeCreate_default = nativeCreate;

// node_modules/lodash-es/_hashClear.js
function hashClear() {
  this.__data__ = nativeCreate_default ? nativeCreate_default(null) : {};
  this.size = 0;
}
var hashClear_default = hashClear;

// node_modules/lodash-es/_hashDelete.js
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}
var hashDelete_default = hashDelete;

// node_modules/lodash-es/_hashGet.js
var HASH_UNDEFINED = "__lodash_hash_undefined__";
var objectProto5 = Object.prototype;
var hasOwnProperty4 = objectProto5.hasOwnProperty;
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate_default) {
    var result = data[key];
    return result === HASH_UNDEFINED ? void 0 : result;
  }
  return hasOwnProperty4.call(data, key) ? data[key] : void 0;
}
var hashGet_default = hashGet;

// node_modules/lodash-es/_hashHas.js
var objectProto6 = Object.prototype;
var hasOwnProperty5 = objectProto6.hasOwnProperty;
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate_default ? data[key] !== void 0 : hasOwnProperty5.call(data, key);
}
var hashHas_default = hashHas;

// node_modules/lodash-es/_hashSet.js
var HASH_UNDEFINED2 = "__lodash_hash_undefined__";
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate_default && value === void 0 ? HASH_UNDEFINED2 : value;
  return this;
}
var hashSet_default = hashSet;

// node_modules/lodash-es/_Hash.js
function Hash(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
Hash.prototype.clear = hashClear_default;
Hash.prototype["delete"] = hashDelete_default;
Hash.prototype.get = hashGet_default;
Hash.prototype.has = hashHas_default;
Hash.prototype.set = hashSet_default;
var Hash_default = Hash;

// node_modules/lodash-es/_mapCacheClear.js
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    "hash": new Hash_default(),
    "map": new (Map_default || ListCache_default)(),
    "string": new Hash_default()
  };
}
var mapCacheClear_default = mapCacheClear;

// node_modules/lodash-es/_isKeyable.js
function isKeyable(value) {
  var type = typeof value;
  return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
var isKeyable_default = isKeyable;

// node_modules/lodash-es/_getMapData.js
function getMapData(map2, key) {
  var data = map2.__data__;
  return isKeyable_default(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
var getMapData_default = getMapData;

// node_modules/lodash-es/_mapCacheDelete.js
function mapCacheDelete(key) {
  var result = getMapData_default(this, key)["delete"](key);
  this.size -= result ? 1 : 0;
  return result;
}
var mapCacheDelete_default = mapCacheDelete;

// node_modules/lodash-es/_mapCacheGet.js
function mapCacheGet(key) {
  return getMapData_default(this, key).get(key);
}
var mapCacheGet_default = mapCacheGet;

// node_modules/lodash-es/_mapCacheHas.js
function mapCacheHas(key) {
  return getMapData_default(this, key).has(key);
}
var mapCacheHas_default = mapCacheHas;

// node_modules/lodash-es/_mapCacheSet.js
function mapCacheSet(key, value) {
  var data = getMapData_default(this, key), size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}
var mapCacheSet_default = mapCacheSet;

// node_modules/lodash-es/_MapCache.js
function MapCache(entries) {
  var index = -1, length = entries == null ? 0 : entries.length;
  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}
MapCache.prototype.clear = mapCacheClear_default;
MapCache.prototype["delete"] = mapCacheDelete_default;
MapCache.prototype.get = mapCacheGet_default;
MapCache.prototype.has = mapCacheHas_default;
MapCache.prototype.set = mapCacheSet_default;
var MapCache_default = MapCache;

// node_modules/lodash-es/_stackSet.js
var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache_default) {
    var pairs = data.__data__;
    if (!Map_default || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache_default(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}
var stackSet_default = stackSet;

// node_modules/lodash-es/_Stack.js
function Stack(entries) {
  var data = this.__data__ = new ListCache_default(entries);
  this.size = data.size;
}
Stack.prototype.clear = stackClear_default;
Stack.prototype["delete"] = stackDelete_default;
Stack.prototype.get = stackGet_default;
Stack.prototype.has = stackHas_default;
Stack.prototype.set = stackSet_default;
var Stack_default = Stack;

// node_modules/lodash-es/_arrayEach.js
function arrayEach(array2, iteratee) {
  var index = -1, length = array2 == null ? 0 : array2.length;
  while (++index < length) {
    if (iteratee(array2[index], index, array2) === false) {
      break;
    }
  }
  return array2;
}
var arrayEach_default = arrayEach;

// node_modules/lodash-es/_defineProperty.js
var defineProperty = function() {
  try {
    var func2 = getNative_default(Object, "defineProperty");
    func2({}, "", {});
    return func2;
  } catch (e2) {
  }
}();
var defineProperty_default = defineProperty;

// node_modules/lodash-es/_baseAssignValue.js
function baseAssignValue(object3, key, value) {
  if (key == "__proto__" && defineProperty_default) {
    defineProperty_default(object3, key, {
      "configurable": true,
      "enumerable": true,
      "value": value,
      "writable": true
    });
  } else {
    object3[key] = value;
  }
}
var baseAssignValue_default = baseAssignValue;

// node_modules/lodash-es/_assignValue.js
var objectProto7 = Object.prototype;
var hasOwnProperty6 = objectProto7.hasOwnProperty;
function assignValue(object3, key, value) {
  var objValue = object3[key];
  if (!(hasOwnProperty6.call(object3, key) && eq_default(objValue, value)) || value === void 0 && !(key in object3)) {
    baseAssignValue_default(object3, key, value);
  }
}
var assignValue_default = assignValue;

// node_modules/lodash-es/_copyObject.js
function copyObject(source, props, object3, customizer) {
  var isNew = !object3;
  object3 || (object3 = {});
  var index = -1, length = props.length;
  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object3[key], source[key], key, object3, source) : void 0;
    if (newValue === void 0) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue_default(object3, key, newValue);
    } else {
      assignValue_default(object3, key, newValue);
    }
  }
  return object3;
}
var copyObject_default = copyObject;

// node_modules/lodash-es/_baseTimes.js
function baseTimes(n, iteratee) {
  var index = -1, result = Array(n);
  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}
var baseTimes_default = baseTimes;

// node_modules/lodash-es/_baseIsArguments.js
var argsTag = "[object Arguments]";
function baseIsArguments(value) {
  return isObjectLike_default(value) && baseGetTag_default(value) == argsTag;
}
var baseIsArguments_default = baseIsArguments;

// node_modules/lodash-es/isArguments.js
var objectProto8 = Object.prototype;
var hasOwnProperty7 = objectProto8.hasOwnProperty;
var propertyIsEnumerable = objectProto8.propertyIsEnumerable;
var isArguments = baseIsArguments_default(/* @__PURE__ */ function() {
  return arguments;
}()) ? baseIsArguments_default : function(value) {
  return isObjectLike_default(value) && hasOwnProperty7.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
};
var isArguments_default = isArguments;

// node_modules/lodash-es/isArray.js
var isArray = Array.isArray;
var isArray_default = isArray;

// node_modules/lodash-es/stubFalse.js
function stubFalse() {
  return false;
}
var stubFalse_default = stubFalse;

// node_modules/lodash-es/isBuffer.js
var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer2 = moduleExports ? root_default.Buffer : void 0;
var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
var isBuffer = nativeIsBuffer || stubFalse_default;
var isBuffer_default = isBuffer;

// node_modules/lodash-es/_isIndex.js
var MAX_SAFE_INTEGER = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
}
var isIndex_default = isIndex;

// node_modules/lodash-es/isLength.js
var MAX_SAFE_INTEGER2 = 9007199254740991;
function isLength(value) {
  return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER2;
}
var isLength_default = isLength;

// node_modules/lodash-es/_baseIsTypedArray.js
var argsTag2 = "[object Arguments]";
var arrayTag = "[object Array]";
var boolTag = "[object Boolean]";
var dateTag = "[object Date]";
var errorTag = "[object Error]";
var funcTag2 = "[object Function]";
var mapTag = "[object Map]";
var numberTag = "[object Number]";
var objectTag2 = "[object Object]";
var regexpTag = "[object RegExp]";
var setTag = "[object Set]";
var stringTag = "[object String]";
var weakMapTag = "[object WeakMap]";
var arrayBufferTag = "[object ArrayBuffer]";
var dataViewTag = "[object DataView]";
var float32Tag = "[object Float32Array]";
var float64Tag = "[object Float64Array]";
var int8Tag = "[object Int8Array]";
var int16Tag = "[object Int16Array]";
var int32Tag = "[object Int32Array]";
var uint8Tag = "[object Uint8Array]";
var uint8ClampedTag = "[object Uint8ClampedArray]";
var uint16Tag = "[object Uint16Array]";
var uint32Tag = "[object Uint32Array]";
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag2] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag2] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag2] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
function baseIsTypedArray(value) {
  return isObjectLike_default(value) && isLength_default(value.length) && !!typedArrayTags[baseGetTag_default(value)];
}
var baseIsTypedArray_default = baseIsTypedArray;

// node_modules/lodash-es/_baseUnary.js
function baseUnary(func2) {
  return function(value) {
    return func2(value);
  };
}
var baseUnary_default = baseUnary;

// node_modules/lodash-es/_nodeUtil.js
var freeExports2 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule2 = freeExports2 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports2 = freeModule2 && freeModule2.exports === freeExports2;
var freeProcess = moduleExports2 && freeGlobal_default.process;
var nodeUtil = function() {
  try {
    var types = freeModule2 && freeModule2.require && freeModule2.require("util").types;
    if (types) {
      return types;
    }
    return freeProcess && freeProcess.binding && freeProcess.binding("util");
  } catch (e2) {
  }
}();
var nodeUtil_default = nodeUtil;

// node_modules/lodash-es/isTypedArray.js
var nodeIsTypedArray = nodeUtil_default && nodeUtil_default.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary_default(nodeIsTypedArray) : baseIsTypedArray_default;
var isTypedArray_default = isTypedArray;

// node_modules/lodash-es/_arrayLikeKeys.js
var objectProto9 = Object.prototype;
var hasOwnProperty8 = objectProto9.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
  var isArr = isArray_default(value), isArg = !isArr && isArguments_default(value), isBuff = !isArr && !isArg && isBuffer_default(value), isType = !isArr && !isArg && !isBuff && isTypedArray_default(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes_default(value.length, String) : [], length = result.length;
  for (var key in value) {
    if ((inherited || hasOwnProperty8.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    isIndex_default(key, length)))) {
      result.push(key);
    }
  }
  return result;
}
var arrayLikeKeys_default = arrayLikeKeys;

// node_modules/lodash-es/_isPrototype.js
var objectProto10 = Object.prototype;
function isPrototype(value) {
  var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto10;
  return value === proto;
}
var isPrototype_default = isPrototype;

// node_modules/lodash-es/_nativeKeys.js
var nativeKeys = overArg_default(Object.keys, Object);
var nativeKeys_default = nativeKeys;

// node_modules/lodash-es/_baseKeys.js
var objectProto11 = Object.prototype;
var hasOwnProperty9 = objectProto11.hasOwnProperty;
function baseKeys(object3) {
  if (!isPrototype_default(object3)) {
    return nativeKeys_default(object3);
  }
  var result = [];
  for (var key in Object(object3)) {
    if (hasOwnProperty9.call(object3, key) && key != "constructor") {
      result.push(key);
    }
  }
  return result;
}
var baseKeys_default = baseKeys;

// node_modules/lodash-es/isArrayLike.js
function isArrayLike(value) {
  return value != null && isLength_default(value.length) && !isFunction_default(value);
}
var isArrayLike_default = isArrayLike;

// node_modules/lodash-es/keys.js
function keys(object3) {
  return isArrayLike_default(object3) ? arrayLikeKeys_default(object3) : baseKeys_default(object3);
}
var keys_default = keys;

// node_modules/lodash-es/_baseAssign.js
function baseAssign(object3, source) {
  return object3 && copyObject_default(source, keys_default(source), object3);
}
var baseAssign_default = baseAssign;

// node_modules/lodash-es/_nativeKeysIn.js
function nativeKeysIn(object3) {
  var result = [];
  if (object3 != null) {
    for (var key in Object(object3)) {
      result.push(key);
    }
  }
  return result;
}
var nativeKeysIn_default = nativeKeysIn;

// node_modules/lodash-es/_baseKeysIn.js
var objectProto12 = Object.prototype;
var hasOwnProperty10 = objectProto12.hasOwnProperty;
function baseKeysIn(object3) {
  if (!isObject_default(object3)) {
    return nativeKeysIn_default(object3);
  }
  var isProto = isPrototype_default(object3), result = [];
  for (var key in object3) {
    if (!(key == "constructor" && (isProto || !hasOwnProperty10.call(object3, key)))) {
      result.push(key);
    }
  }
  return result;
}
var baseKeysIn_default = baseKeysIn;

// node_modules/lodash-es/keysIn.js
function keysIn(object3) {
  return isArrayLike_default(object3) ? arrayLikeKeys_default(object3, true) : baseKeysIn_default(object3);
}
var keysIn_default = keysIn;

// node_modules/lodash-es/_baseAssignIn.js
function baseAssignIn(object3, source) {
  return object3 && copyObject_default(source, keysIn_default(source), object3);
}
var baseAssignIn_default = baseAssignIn;

// node_modules/lodash-es/_cloneBuffer.js
var freeExports3 = typeof exports == "object" && exports && !exports.nodeType && exports;
var freeModule3 = freeExports3 && typeof module == "object" && module && !module.nodeType && module;
var moduleExports3 = freeModule3 && freeModule3.exports === freeExports3;
var Buffer3 = moduleExports3 ? root_default.Buffer : void 0;
var allocUnsafe = Buffer3 ? Buffer3.allocUnsafe : void 0;
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}
var cloneBuffer_default = cloneBuffer;

// node_modules/lodash-es/_copyArray.js
function copyArray(source, array2) {
  var index = -1, length = source.length;
  array2 || (array2 = Array(length));
  while (++index < length) {
    array2[index] = source[index];
  }
  return array2;
}
var copyArray_default = copyArray;

// node_modules/lodash-es/_arrayFilter.js
function arrayFilter(array2, predicate) {
  var index = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
  while (++index < length) {
    var value = array2[index];
    if (predicate(value, index, array2)) {
      result[resIndex++] = value;
    }
  }
  return result;
}
var arrayFilter_default = arrayFilter;

// node_modules/lodash-es/stubArray.js
function stubArray() {
  return [];
}
var stubArray_default = stubArray;

// node_modules/lodash-es/_getSymbols.js
var objectProto13 = Object.prototype;
var propertyIsEnumerable2 = objectProto13.propertyIsEnumerable;
var nativeGetSymbols = Object.getOwnPropertySymbols;
var getSymbols = !nativeGetSymbols ? stubArray_default : function(object3) {
  if (object3 == null) {
    return [];
  }
  object3 = Object(object3);
  return arrayFilter_default(nativeGetSymbols(object3), function(symbol) {
    return propertyIsEnumerable2.call(object3, symbol);
  });
};
var getSymbols_default = getSymbols;

// node_modules/lodash-es/_copySymbols.js
function copySymbols(source, object3) {
  return copyObject_default(source, getSymbols_default(source), object3);
}
var copySymbols_default = copySymbols;

// node_modules/lodash-es/_arrayPush.js
function arrayPush(array2, values) {
  var index = -1, length = values.length, offset = array2.length;
  while (++index < length) {
    array2[offset + index] = values[index];
  }
  return array2;
}
var arrayPush_default = arrayPush;

// node_modules/lodash-es/_getSymbolsIn.js
var nativeGetSymbols2 = Object.getOwnPropertySymbols;
var getSymbolsIn = !nativeGetSymbols2 ? stubArray_default : function(object3) {
  var result = [];
  while (object3) {
    arrayPush_default(result, getSymbols_default(object3));
    object3 = getPrototype_default(object3);
  }
  return result;
};
var getSymbolsIn_default = getSymbolsIn;

// node_modules/lodash-es/_copySymbolsIn.js
function copySymbolsIn(source, object3) {
  return copyObject_default(source, getSymbolsIn_default(source), object3);
}
var copySymbolsIn_default = copySymbolsIn;

// node_modules/lodash-es/_baseGetAllKeys.js
function baseGetAllKeys(object3, keysFunc, symbolsFunc) {
  var result = keysFunc(object3);
  return isArray_default(object3) ? result : arrayPush_default(result, symbolsFunc(object3));
}
var baseGetAllKeys_default = baseGetAllKeys;

// node_modules/lodash-es/_getAllKeys.js
function getAllKeys(object3) {
  return baseGetAllKeys_default(object3, keys_default, getSymbols_default);
}
var getAllKeys_default = getAllKeys;

// node_modules/lodash-es/_getAllKeysIn.js
function getAllKeysIn(object3) {
  return baseGetAllKeys_default(object3, keysIn_default, getSymbolsIn_default);
}
var getAllKeysIn_default = getAllKeysIn;

// node_modules/lodash-es/_DataView.js
var DataView = getNative_default(root_default, "DataView");
var DataView_default = DataView;

// node_modules/lodash-es/_Promise.js
var Promise2 = getNative_default(root_default, "Promise");
var Promise_default = Promise2;

// node_modules/lodash-es/_Set.js
var Set2 = getNative_default(root_default, "Set");
var Set_default = Set2;

// node_modules/lodash-es/_WeakMap.js
var WeakMap2 = getNative_default(root_default, "WeakMap");
var WeakMap_default = WeakMap2;

// node_modules/lodash-es/_getTag.js
var mapTag2 = "[object Map]";
var objectTag3 = "[object Object]";
var promiseTag = "[object Promise]";
var setTag2 = "[object Set]";
var weakMapTag2 = "[object WeakMap]";
var dataViewTag2 = "[object DataView]";
var dataViewCtorString = toSource_default(DataView_default);
var mapCtorString = toSource_default(Map_default);
var promiseCtorString = toSource_default(Promise_default);
var setCtorString = toSource_default(Set_default);
var weakMapCtorString = toSource_default(WeakMap_default);
var getTag = baseGetTag_default;
if (DataView_default && getTag(new DataView_default(new ArrayBuffer(1))) != dataViewTag2 || Map_default && getTag(new Map_default()) != mapTag2 || Promise_default && getTag(Promise_default.resolve()) != promiseTag || Set_default && getTag(new Set_default()) != setTag2 || WeakMap_default && getTag(new WeakMap_default()) != weakMapTag2) {
  getTag = function(value) {
    var result = baseGetTag_default(value), Ctor = result == objectTag3 ? value.constructor : void 0, ctorString = Ctor ? toSource_default(Ctor) : "";
    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag2;
        case mapCtorString:
          return mapTag2;
        case promiseCtorString:
          return promiseTag;
        case setCtorString:
          return setTag2;
        case weakMapCtorString:
          return weakMapTag2;
      }
    }
    return result;
  };
}
var getTag_default = getTag;

// node_modules/lodash-es/_initCloneArray.js
var objectProto14 = Object.prototype;
var hasOwnProperty11 = objectProto14.hasOwnProperty;
function initCloneArray(array2) {
  var length = array2.length, result = new array2.constructor(length);
  if (length && typeof array2[0] == "string" && hasOwnProperty11.call(array2, "index")) {
    result.index = array2.index;
    result.input = array2.input;
  }
  return result;
}
var initCloneArray_default = initCloneArray;

// node_modules/lodash-es/_Uint8Array.js
var Uint8Array2 = root_default.Uint8Array;
var Uint8Array_default = Uint8Array2;

// node_modules/lodash-es/_cloneArrayBuffer.js
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array_default(result).set(new Uint8Array_default(arrayBuffer));
  return result;
}
var cloneArrayBuffer_default = cloneArrayBuffer;

// node_modules/lodash-es/_cloneDataView.js
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
var cloneDataView_default = cloneDataView;

// node_modules/lodash-es/_cloneRegExp.js
var reFlags = /\w*$/;
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}
var cloneRegExp_default = cloneRegExp;

// node_modules/lodash-es/_cloneSymbol.js
var symbolProto = Symbol_default ? Symbol_default.prototype : void 0;
var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}
var cloneSymbol_default = cloneSymbol;

// node_modules/lodash-es/_cloneTypedArray.js
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer_default(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
var cloneTypedArray_default = cloneTypedArray;

// node_modules/lodash-es/_initCloneByTag.js
var boolTag2 = "[object Boolean]";
var dateTag2 = "[object Date]";
var mapTag3 = "[object Map]";
var numberTag2 = "[object Number]";
var regexpTag2 = "[object RegExp]";
var setTag3 = "[object Set]";
var stringTag2 = "[object String]";
var symbolTag = "[object Symbol]";
var arrayBufferTag2 = "[object ArrayBuffer]";
var dataViewTag3 = "[object DataView]";
var float32Tag2 = "[object Float32Array]";
var float64Tag2 = "[object Float64Array]";
var int8Tag2 = "[object Int8Array]";
var int16Tag2 = "[object Int16Array]";
var int32Tag2 = "[object Int32Array]";
var uint8Tag2 = "[object Uint8Array]";
var uint8ClampedTag2 = "[object Uint8ClampedArray]";
var uint16Tag2 = "[object Uint16Array]";
var uint32Tag2 = "[object Uint32Array]";
function initCloneByTag(object3, tag, isDeep) {
  var Ctor = object3.constructor;
  switch (tag) {
    case arrayBufferTag2:
      return cloneArrayBuffer_default(object3);
    case boolTag2:
    case dateTag2:
      return new Ctor(+object3);
    case dataViewTag3:
      return cloneDataView_default(object3, isDeep);
    case float32Tag2:
    case float64Tag2:
    case int8Tag2:
    case int16Tag2:
    case int32Tag2:
    case uint8Tag2:
    case uint8ClampedTag2:
    case uint16Tag2:
    case uint32Tag2:
      return cloneTypedArray_default(object3, isDeep);
    case mapTag3:
      return new Ctor();
    case numberTag2:
    case stringTag2:
      return new Ctor(object3);
    case regexpTag2:
      return cloneRegExp_default(object3);
    case setTag3:
      return new Ctor();
    case symbolTag:
      return cloneSymbol_default(object3);
  }
}
var initCloneByTag_default = initCloneByTag;

// node_modules/lodash-es/_baseCreate.js
var objectCreate = Object.create;
var baseCreate = /* @__PURE__ */ function() {
  function object3() {
  }
  return function(proto) {
    if (!isObject_default(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object3.prototype = proto;
    var result = new object3();
    object3.prototype = void 0;
    return result;
  };
}();
var baseCreate_default = baseCreate;

// node_modules/lodash-es/_initCloneObject.js
function initCloneObject(object3) {
  return typeof object3.constructor == "function" && !isPrototype_default(object3) ? baseCreate_default(getPrototype_default(object3)) : {};
}
var initCloneObject_default = initCloneObject;

// node_modules/lodash-es/_baseIsMap.js
var mapTag4 = "[object Map]";
function baseIsMap(value) {
  return isObjectLike_default(value) && getTag_default(value) == mapTag4;
}
var baseIsMap_default = baseIsMap;

// node_modules/lodash-es/isMap.js
var nodeIsMap = nodeUtil_default && nodeUtil_default.isMap;
var isMap = nodeIsMap ? baseUnary_default(nodeIsMap) : baseIsMap_default;
var isMap_default = isMap;

// node_modules/lodash-es/_baseIsSet.js
var setTag4 = "[object Set]";
function baseIsSet(value) {
  return isObjectLike_default(value) && getTag_default(value) == setTag4;
}
var baseIsSet_default = baseIsSet;

// node_modules/lodash-es/isSet.js
var nodeIsSet = nodeUtil_default && nodeUtil_default.isSet;
var isSet = nodeIsSet ? baseUnary_default(nodeIsSet) : baseIsSet_default;
var isSet_default = isSet;

// node_modules/lodash-es/_baseClone.js
var CLONE_DEEP_FLAG = 1;
var CLONE_FLAT_FLAG = 2;
var CLONE_SYMBOLS_FLAG = 4;
var argsTag3 = "[object Arguments]";
var arrayTag2 = "[object Array]";
var boolTag3 = "[object Boolean]";
var dateTag3 = "[object Date]";
var errorTag2 = "[object Error]";
var funcTag3 = "[object Function]";
var genTag2 = "[object GeneratorFunction]";
var mapTag5 = "[object Map]";
var numberTag3 = "[object Number]";
var objectTag4 = "[object Object]";
var regexpTag3 = "[object RegExp]";
var setTag5 = "[object Set]";
var stringTag3 = "[object String]";
var symbolTag2 = "[object Symbol]";
var weakMapTag3 = "[object WeakMap]";
var arrayBufferTag3 = "[object ArrayBuffer]";
var dataViewTag4 = "[object DataView]";
var float32Tag3 = "[object Float32Array]";
var float64Tag3 = "[object Float64Array]";
var int8Tag3 = "[object Int8Array]";
var int16Tag3 = "[object Int16Array]";
var int32Tag3 = "[object Int32Array]";
var uint8Tag3 = "[object Uint8Array]";
var uint8ClampedTag3 = "[object Uint8ClampedArray]";
var uint16Tag3 = "[object Uint16Array]";
var uint32Tag3 = "[object Uint32Array]";
var cloneableTags = {};
cloneableTags[argsTag3] = cloneableTags[arrayTag2] = cloneableTags[arrayBufferTag3] = cloneableTags[dataViewTag4] = cloneableTags[boolTag3] = cloneableTags[dateTag3] = cloneableTags[float32Tag3] = cloneableTags[float64Tag3] = cloneableTags[int8Tag3] = cloneableTags[int16Tag3] = cloneableTags[int32Tag3] = cloneableTags[mapTag5] = cloneableTags[numberTag3] = cloneableTags[objectTag4] = cloneableTags[regexpTag3] = cloneableTags[setTag5] = cloneableTags[stringTag3] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag3] = cloneableTags[uint8ClampedTag3] = cloneableTags[uint16Tag3] = cloneableTags[uint32Tag3] = true;
cloneableTags[errorTag2] = cloneableTags[funcTag3] = cloneableTags[weakMapTag3] = false;
function baseClone2(value, bitmask, customizer, key, object3, stack) {
  var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
  if (customizer) {
    result = object3 ? customizer(value, key, object3, stack) : customizer(value);
  }
  if (result !== void 0) {
    return result;
  }
  if (!isObject_default(value)) {
    return value;
  }
  var isArr = isArray_default(value);
  if (isArr) {
    result = initCloneArray_default(value);
    if (!isDeep) {
      return copyArray_default(value, result);
    }
  } else {
    var tag = getTag_default(value), isFunc = tag == funcTag3 || tag == genTag2;
    if (isBuffer_default(value)) {
      return cloneBuffer_default(value, isDeep);
    }
    if (tag == objectTag4 || tag == argsTag3 || isFunc && !object3) {
      result = isFlat || isFunc ? {} : initCloneObject_default(value);
      if (!isDeep) {
        return isFlat ? copySymbolsIn_default(value, baseAssignIn_default(result, value)) : copySymbols_default(value, baseAssign_default(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object3 ? value : {};
      }
      result = initCloneByTag_default(value, tag, isDeep);
    }
  }
  stack || (stack = new Stack_default());
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);
  if (isSet_default(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone2(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap_default(value)) {
    value.forEach(function(subValue, key2) {
      result.set(key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
    });
  }
  var keysFunc = isFull ? isFlat ? getAllKeysIn_default : getAllKeys_default : isFlat ? keysIn_default : keys_default;
  var props = isArr ? void 0 : keysFunc(value);
  arrayEach_default(props || value, function(subValue, key2) {
    if (props) {
      key2 = subValue;
      subValue = value[key2];
    }
    assignValue_default(result, key2, baseClone2(subValue, bitmask, customizer, key2, value, stack));
  });
  return result;
}
var baseClone_default = baseClone2;

// node_modules/lodash-es/clone.js
var CLONE_SYMBOLS_FLAG2 = 4;
function clone2(value) {
  return baseClone_default(value, CLONE_SYMBOLS_FLAG2);
}
var clone_default = clone2;

// node_modules/lodash-es/_arrayMap.js
function arrayMap(array2, iteratee) {
  var index = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
  while (++index < length) {
    result[index] = iteratee(array2[index], index, array2);
  }
  return result;
}
var arrayMap_default = arrayMap;

// node_modules/lodash-es/isSymbol.js
var symbolTag3 = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag3;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/memoize.js
var FUNC_ERROR_TEXT = "Expected a function";
function memoize(func2, resolver) {
  if (typeof func2 != "function" || resolver != null && typeof resolver != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func2.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache_default)();
  return memoized;
}
memoize.Cache = MapCache_default;
var memoize_default = memoize;

// node_modules/lodash-es/_memoizeCapped.js
var MAX_MEMOIZE_SIZE = 500;
function memoizeCapped(func2) {
  var result = memoize_default(func2, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });
  var cache = result.cache;
  return result;
}
var memoizeCapped_default = memoizeCapped;

// node_modules/lodash-es/_stringToPath.js
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var reEscapeChar = /\\(\\)?/g;
var stringToPath = memoizeCapped_default(function(string3) {
  var result = [];
  if (string3.charCodeAt(0) === 46) {
    result.push("");
  }
  string3.replace(rePropName, function(match, number2, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
  });
  return result;
});
var stringToPath_default = stringToPath;

// node_modules/lodash-es/_toKey.js
var INFINITY = 1 / 0;
function toKey(value) {
  if (typeof value == "string" || isSymbol_default(value)) {
    return value;
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
var toKey_default = toKey;

// node_modules/lodash-es/_baseToString.js
var INFINITY2 = 1 / 0;
var symbolProto2 = Symbol_default ? Symbol_default.prototype : void 0;
var symbolToString2 = symbolProto2 ? symbolProto2.toString : void 0;
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isArray_default(value)) {
    return arrayMap_default(value, baseToString) + "";
  }
  if (isSymbol_default(value)) {
    return symbolToString2 ? symbolToString2.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY2 ? "-0" : result;
}
var baseToString_default = baseToString;

// node_modules/lodash-es/toString.js
function toString2(value) {
  return value == null ? "" : baseToString_default(value);
}
var toString_default = toString2;

// node_modules/lodash-es/toPath.js
function toPath(value) {
  if (isArray_default(value)) {
    return arrayMap_default(value, toKey_default);
  }
  return isSymbol_default(value) ? [value] : copyArray_default(stringToPath_default(toString_default(value)));
}
var toPath_default = toPath;

// node_modules/tiny-warning/dist/tiny-warning.esm.js
var isProduction = false;
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text = "Warning: " + message;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x) {
    }
  }
}
var tiny_warning_esm_default = warning;

// node_modules/formik/dist/formik.esm.js
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());

// node_modules/lodash-es/cloneDeep.js
var CLONE_DEEP_FLAG2 = 1;
var CLONE_SYMBOLS_FLAG3 = 4;
function cloneDeep(value) {
  return baseClone_default(value, CLONE_DEEP_FLAG2 | CLONE_SYMBOLS_FLAG3);
}
var cloneDeep_default = cloneDeep;

// node_modules/formik/dist/formik.esm.js
function _extends8() {
  _extends8 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends8.apply(this, arguments);
}
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
var isEmptyArray = function isEmptyArray2(value) {
  return Array.isArray(value) && value.length === 0;
};
var isFunction2 = function isFunction3(obj) {
  return typeof obj === "function";
};
var isObject3 = function isObject4(obj) {
  return obj !== null && typeof obj === "object";
};
var isInteger = function isInteger2(obj) {
  return String(Math.floor(Number(obj))) === obj;
};
var isString2 = function isString3(obj) {
  return Object.prototype.toString.call(obj) === "[object String]";
};
var isEmptyChildren = function isEmptyChildren2(children) {
  return import_react70.Children.count(children) === 0;
};
var isPromise2 = function isPromise3(value) {
  return isObject3(value) && isFunction2(value.then);
};
function getActiveElement2(doc) {
  doc = doc || (typeof document !== "undefined" ? document : void 0);
  if (typeof doc === "undefined") {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e2) {
    return doc.body;
  }
}
function getIn2(obj, key, def, p) {
  if (p === void 0) {
    p = 0;
  }
  var path = toPath_default(key);
  while (obj && p < path.length) {
    obj = obj[path[p++]];
  }
  return obj === void 0 ? def : obj;
}
function setIn(obj, path, value) {
  var res = clone_default(obj);
  var resVal = res;
  var i = 0;
  var pathArray = toPath_default(path);
  for (; i < pathArray.length - 1; i++) {
    var currentPath = pathArray[i];
    var currentObj = getIn2(obj, pathArray.slice(0, i + 1));
    if (currentObj && (isObject3(currentObj) || Array.isArray(currentObj))) {
      resVal = resVal[currentPath] = clone_default(currentObj);
    } else {
      var nextPath = pathArray[i + 1];
      resVal = resVal[currentPath] = isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};
    }
  }
  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {
    return obj;
  }
  if (value === void 0) {
    delete resVal[pathArray[i]];
  } else {
    resVal[pathArray[i]] = value;
  }
  if (i === 0 && value === void 0) {
    delete res[pathArray[i]];
  }
  return res;
}
function setNestedObjectValues(object3, value, visited, response) {
  if (visited === void 0) {
    visited = /* @__PURE__ */ new WeakMap();
  }
  if (response === void 0) {
    response = {};
  }
  for (var _i = 0, _Object$keys = Object.keys(object3); _i < _Object$keys.length; _i++) {
    var k = _Object$keys[_i];
    var val = object3[k];
    if (isObject3(val)) {
      if (!visited.get(val)) {
        visited.set(val, true);
        response[k] = Array.isArray(val) ? [] : {};
        setNestedObjectValues(val, value, visited, response[k]);
      }
    } else {
      response[k] = value;
    }
  }
  return response;
}
var FormikContext = (0, import_react70.createContext)(void 0);
FormikContext.displayName = "FormikContext";
var FormikProvider = FormikContext.Provider;
var FormikConsumer = FormikContext.Consumer;
function useFormikContext() {
  var formik = (0, import_react70.useContext)(FormikContext);
  !!!formik ? true ? tiny_warning_esm_default(false, "Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.") : tiny_warning_esm_default(false) : void 0;
  return formik;
}
function formikReducer(state, msg) {
  switch (msg.type) {
    case "SET_VALUES":
      return _extends8({}, state, {
        values: msg.payload
      });
    case "SET_TOUCHED":
      return _extends8({}, state, {
        touched: msg.payload
      });
    case "SET_ERRORS":
      if ((0, import_react_fast_compare.default)(state.errors, msg.payload)) {
        return state;
      }
      return _extends8({}, state, {
        errors: msg.payload
      });
    case "SET_STATUS":
      return _extends8({}, state, {
        status: msg.payload
      });
    case "SET_ISSUBMITTING":
      return _extends8({}, state, {
        isSubmitting: msg.payload
      });
    case "SET_ISVALIDATING":
      return _extends8({}, state, {
        isValidating: msg.payload
      });
    case "SET_FIELD_VALUE":
      return _extends8({}, state, {
        values: setIn(state.values, msg.payload.field, msg.payload.value)
      });
    case "SET_FIELD_TOUCHED":
      return _extends8({}, state, {
        touched: setIn(state.touched, msg.payload.field, msg.payload.value)
      });
    case "SET_FIELD_ERROR":
      return _extends8({}, state, {
        errors: setIn(state.errors, msg.payload.field, msg.payload.value)
      });
    case "RESET_FORM":
      return _extends8({}, state, msg.payload);
    case "SET_FORMIK_STATE":
      return msg.payload(state);
    case "SUBMIT_ATTEMPT":
      return _extends8({}, state, {
        touched: setNestedObjectValues(state.values, true),
        isSubmitting: true,
        submitCount: state.submitCount + 1
      });
    case "SUBMIT_FAILURE":
      return _extends8({}, state, {
        isSubmitting: false
      });
    case "SUBMIT_SUCCESS":
      return _extends8({}, state, {
        isSubmitting: false
      });
    default:
      return state;
  }
}
var emptyErrors = {};
var emptyTouched = {};
function useFormik(_ref2) {
  var _ref$validateOnChange = _ref2.validateOnChange, validateOnChange = _ref$validateOnChange === void 0 ? true : _ref$validateOnChange, _ref$validateOnBlur = _ref2.validateOnBlur, validateOnBlur = _ref$validateOnBlur === void 0 ? true : _ref$validateOnBlur, _ref$validateOnMount = _ref2.validateOnMount, validateOnMount = _ref$validateOnMount === void 0 ? false : _ref$validateOnMount, isInitialValid = _ref2.isInitialValid, _ref$enableReinitiali = _ref2.enableReinitialize, enableReinitialize = _ref$enableReinitiali === void 0 ? false : _ref$enableReinitiali, onSubmit = _ref2.onSubmit, rest = _objectWithoutPropertiesLoose4(_ref2, ["validateOnChange", "validateOnBlur", "validateOnMount", "isInitialValid", "enableReinitialize", "onSubmit"]);
  var props = _extends8({
    validateOnChange,
    validateOnBlur,
    validateOnMount,
    onSubmit
  }, rest);
  var initialValues = (0, import_react70.useRef)(props.initialValues);
  var initialErrors = (0, import_react70.useRef)(props.initialErrors || emptyErrors);
  var initialTouched = (0, import_react70.useRef)(props.initialTouched || emptyTouched);
  var initialStatus = (0, import_react70.useRef)(props.initialStatus);
  var isMounted = (0, import_react70.useRef)(false);
  var fieldRegistry = (0, import_react70.useRef)({});
  if (true) {
    (0, import_react70.useEffect)(function() {
      !(typeof isInitialValid === "undefined") ? true ? tiny_warning_esm_default(false, "isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.") : tiny_warning_esm_default(false) : void 0;
    }, []);
  }
  (0, import_react70.useEffect)(function() {
    isMounted.current = true;
    return function() {
      isMounted.current = false;
    };
  }, []);
  var _React$useReducer = (0, import_react70.useReducer)(formikReducer, {
    values: props.initialValues,
    errors: props.initialErrors || emptyErrors,
    touched: props.initialTouched || emptyTouched,
    status: props.initialStatus,
    isSubmitting: false,
    isValidating: false,
    submitCount: 0
  }), state = _React$useReducer[0], dispatch = _React$useReducer[1];
  var runValidateHandler = (0, import_react70.useCallback)(function(values, field) {
    return new Promise(function(resolve, reject) {
      var maybePromisedErrors = props.validate(values, field);
      if (maybePromisedErrors == null) {
        resolve(emptyErrors);
      } else if (isPromise2(maybePromisedErrors)) {
        maybePromisedErrors.then(function(errors) {
          resolve(errors || emptyErrors);
        }, function(actualException) {
          if (true) {
            console.warn("Warning: An unhandled error was caught during validation in <Formik validate />", actualException);
          }
          reject(actualException);
        });
      } else {
        resolve(maybePromisedErrors);
      }
    });
  }, [props.validate]);
  var runValidationSchema = (0, import_react70.useCallback)(function(values, field) {
    var validationSchema = props.validationSchema;
    var schema = isFunction2(validationSchema) ? validationSchema(field) : validationSchema;
    var promise = field && schema.validateAt ? schema.validateAt(field, values) : validateYupSchema(values, schema);
    return new Promise(function(resolve, reject) {
      promise.then(function() {
        resolve(emptyErrors);
      }, function(err) {
        if (err.name === "ValidationError") {
          resolve(yupToFormErrors(err));
        } else {
          if (true) {
            console.warn("Warning: An unhandled error was caught during validation in <Formik validationSchema />", err);
          }
          reject(err);
        }
      });
    });
  }, [props.validationSchema]);
  var runSingleFieldLevelValidation = (0, import_react70.useCallback)(function(field, value) {
    return new Promise(function(resolve) {
      return resolve(fieldRegistry.current[field].validate(value));
    });
  }, []);
  var runFieldLevelValidations = (0, import_react70.useCallback)(function(values) {
    var fieldKeysWithValidation = Object.keys(fieldRegistry.current).filter(function(f) {
      return isFunction2(fieldRegistry.current[f].validate);
    });
    var fieldValidations = fieldKeysWithValidation.length > 0 ? fieldKeysWithValidation.map(function(f) {
      return runSingleFieldLevelValidation(f, getIn2(values, f));
    }) : [Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];
    return Promise.all(fieldValidations).then(function(fieldErrorsList) {
      return fieldErrorsList.reduce(function(prev, curr, index) {
        if (curr === "DO_NOT_DELETE_YOU_WILL_BE_FIRED") {
          return prev;
        }
        if (curr) {
          prev = setIn(prev, fieldKeysWithValidation[index], curr);
        }
        return prev;
      }, {});
    });
  }, [runSingleFieldLevelValidation]);
  var runAllValidations = (0, import_react70.useCallback)(function(values) {
    return Promise.all([runFieldLevelValidations(values), props.validationSchema ? runValidationSchema(values) : {}, props.validate ? runValidateHandler(values) : {}]).then(function(_ref22) {
      var fieldErrors = _ref22[0], schemaErrors = _ref22[1], validateErrors = _ref22[2];
      var combinedErrors = es_default.all([fieldErrors, schemaErrors, validateErrors], {
        arrayMerge
      });
      return combinedErrors;
    });
  }, [props.validate, props.validationSchema, runFieldLevelValidations, runValidateHandler, runValidationSchema]);
  var validateFormWithHighPriority = useEventCallback(function(values) {
    if (values === void 0) {
      values = state.values;
    }
    dispatch({
      type: "SET_ISVALIDATING",
      payload: true
    });
    return runAllValidations(values).then(function(combinedErrors) {
      if (!!isMounted.current) {
        dispatch({
          type: "SET_ISVALIDATING",
          payload: false
        });
        dispatch({
          type: "SET_ERRORS",
          payload: combinedErrors
        });
      }
      return combinedErrors;
    });
  });
  (0, import_react70.useEffect)(function() {
    if (validateOnMount && isMounted.current === true && (0, import_react_fast_compare.default)(initialValues.current, props.initialValues)) {
      validateFormWithHighPriority(initialValues.current);
    }
  }, [validateOnMount, validateFormWithHighPriority]);
  var resetForm = (0, import_react70.useCallback)(function(nextState) {
    var values = nextState && nextState.values ? nextState.values : initialValues.current;
    var errors = nextState && nextState.errors ? nextState.errors : initialErrors.current ? initialErrors.current : props.initialErrors || {};
    var touched = nextState && nextState.touched ? nextState.touched : initialTouched.current ? initialTouched.current : props.initialTouched || {};
    var status2 = nextState && nextState.status ? nextState.status : initialStatus.current ? initialStatus.current : props.initialStatus;
    initialValues.current = values;
    initialErrors.current = errors;
    initialTouched.current = touched;
    initialStatus.current = status2;
    var dispatchFn = function dispatchFn2() {
      dispatch({
        type: "RESET_FORM",
        payload: {
          isSubmitting: !!nextState && !!nextState.isSubmitting,
          errors,
          touched,
          status: status2,
          values,
          isValidating: !!nextState && !!nextState.isValidating,
          submitCount: !!nextState && !!nextState.submitCount && typeof nextState.submitCount === "number" ? nextState.submitCount : 0
        }
      });
    };
    if (props.onReset) {
      var maybePromisedOnReset = props.onReset(state.values, imperativeMethods);
      if (isPromise2(maybePromisedOnReset)) {
        maybePromisedOnReset.then(dispatchFn);
      } else {
        dispatchFn();
      }
    } else {
      dispatchFn();
    }
  }, [props.initialErrors, props.initialStatus, props.initialTouched]);
  (0, import_react70.useEffect)(function() {
    if (isMounted.current === true && !(0, import_react_fast_compare.default)(initialValues.current, props.initialValues)) {
      if (enableReinitialize) {
        initialValues.current = props.initialValues;
        resetForm();
      }
      if (validateOnMount) {
        validateFormWithHighPriority(initialValues.current);
      }
    }
  }, [enableReinitialize, props.initialValues, resetForm, validateOnMount, validateFormWithHighPriority]);
  (0, import_react70.useEffect)(function() {
    if (enableReinitialize && isMounted.current === true && !(0, import_react_fast_compare.default)(initialErrors.current, props.initialErrors)) {
      initialErrors.current = props.initialErrors || emptyErrors;
      dispatch({
        type: "SET_ERRORS",
        payload: props.initialErrors || emptyErrors
      });
    }
  }, [enableReinitialize, props.initialErrors]);
  (0, import_react70.useEffect)(function() {
    if (enableReinitialize && isMounted.current === true && !(0, import_react_fast_compare.default)(initialTouched.current, props.initialTouched)) {
      initialTouched.current = props.initialTouched || emptyTouched;
      dispatch({
        type: "SET_TOUCHED",
        payload: props.initialTouched || emptyTouched
      });
    }
  }, [enableReinitialize, props.initialTouched]);
  (0, import_react70.useEffect)(function() {
    if (enableReinitialize && isMounted.current === true && !(0, import_react_fast_compare.default)(initialStatus.current, props.initialStatus)) {
      initialStatus.current = props.initialStatus;
      dispatch({
        type: "SET_STATUS",
        payload: props.initialStatus
      });
    }
  }, [enableReinitialize, props.initialStatus, props.initialTouched]);
  var validateField = useEventCallback(function(name) {
    if (fieldRegistry.current[name] && isFunction2(fieldRegistry.current[name].validate)) {
      var value = getIn2(state.values, name);
      var maybePromise = fieldRegistry.current[name].validate(value);
      if (isPromise2(maybePromise)) {
        dispatch({
          type: "SET_ISVALIDATING",
          payload: true
        });
        return maybePromise.then(function(x) {
          return x;
        }).then(function(error) {
          dispatch({
            type: "SET_FIELD_ERROR",
            payload: {
              field: name,
              value: error
            }
          });
          dispatch({
            type: "SET_ISVALIDATING",
            payload: false
          });
        });
      } else {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field: name,
            value: maybePromise
          }
        });
        return Promise.resolve(maybePromise);
      }
    } else if (props.validationSchema) {
      dispatch({
        type: "SET_ISVALIDATING",
        payload: true
      });
      return runValidationSchema(state.values, name).then(function(x) {
        return x;
      }).then(function(error) {
        dispatch({
          type: "SET_FIELD_ERROR",
          payload: {
            field: name,
            value: error[name]
          }
        });
        dispatch({
          type: "SET_ISVALIDATING",
          payload: false
        });
      });
    }
    return Promise.resolve();
  });
  var registerField = (0, import_react70.useCallback)(function(name, _ref3) {
    var validate = _ref3.validate;
    fieldRegistry.current[name] = {
      validate
    };
  }, []);
  var unregisterField = (0, import_react70.useCallback)(function(name) {
    delete fieldRegistry.current[name];
  }, []);
  var setTouched = useEventCallback(function(touched, shouldValidate) {
    dispatch({
      type: "SET_TOUCHED",
      payload: touched
    });
    var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var setErrors = (0, import_react70.useCallback)(function(errors) {
    dispatch({
      type: "SET_ERRORS",
      payload: errors
    });
  }, []);
  var setValues = useEventCallback(function(values, shouldValidate) {
    var resolvedValues = isFunction2(values) ? values(state.values) : values;
    dispatch({
      type: "SET_VALUES",
      payload: resolvedValues
    });
    var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(resolvedValues) : Promise.resolve();
  });
  var setFieldError = (0, import_react70.useCallback)(function(field, value) {
    dispatch({
      type: "SET_FIELD_ERROR",
      payload: {
        field,
        value
      }
    });
  }, []);
  var setFieldValue = useEventCallback(function(field, value, shouldValidate) {
    dispatch({
      type: "SET_FIELD_VALUE",
      payload: {
        field,
        value
      }
    });
    var willValidate = shouldValidate === void 0 ? validateOnChange : shouldValidate;
    return willValidate ? validateFormWithHighPriority(setIn(state.values, field, value)) : Promise.resolve();
  });
  var executeChange = (0, import_react70.useCallback)(function(eventOrTextValue, maybePath) {
    var field = maybePath;
    var val = eventOrTextValue;
    var parsed;
    if (!isString2(eventOrTextValue)) {
      if (eventOrTextValue.persist) {
        eventOrTextValue.persist();
      }
      var target = eventOrTextValue.target ? eventOrTextValue.target : eventOrTextValue.currentTarget;
      var type = target.type, name = target.name, id = target.id, value = target.value, checked = target.checked, outerHTML = target.outerHTML, options2 = target.options, multiple = target.multiple;
      field = maybePath ? maybePath : name ? name : id;
      if (!field && true) {
        warnAboutMissingIdentifier({
          htmlContent: outerHTML,
          documentationAnchorLink: "handlechange-e-reactchangeeventany--void",
          handlerName: "handleChange"
        });
      }
      val = /number|range/.test(type) ? (parsed = parseFloat(value), isNaN(parsed) ? "" : parsed) : /checkbox/.test(type) ? getValueForCheckbox(getIn2(state.values, field), checked, value) : options2 && multiple ? getSelectedValues(options2) : value;
    }
    if (field) {
      setFieldValue(field, val);
    }
  }, [setFieldValue, state.values]);
  var handleChange = useEventCallback(function(eventOrPath) {
    if (isString2(eventOrPath)) {
      return function(event) {
        return executeChange(event, eventOrPath);
      };
    } else {
      executeChange(eventOrPath);
    }
  });
  var setFieldTouched = useEventCallback(function(field, touched, shouldValidate) {
    if (touched === void 0) {
      touched = true;
    }
    dispatch({
      type: "SET_FIELD_TOUCHED",
      payload: {
        field,
        value: touched
      }
    });
    var willValidate = shouldValidate === void 0 ? validateOnBlur : shouldValidate;
    return willValidate ? validateFormWithHighPriority(state.values) : Promise.resolve();
  });
  var executeBlur = (0, import_react70.useCallback)(function(e2, path) {
    if (e2.persist) {
      e2.persist();
    }
    var _e$target = e2.target, name = _e$target.name, id = _e$target.id, outerHTML = _e$target.outerHTML;
    var field = path ? path : name ? name : id;
    if (!field && true) {
      warnAboutMissingIdentifier({
        htmlContent: outerHTML,
        documentationAnchorLink: "handleblur-e-any--void",
        handlerName: "handleBlur"
      });
    }
    setFieldTouched(field, true);
  }, [setFieldTouched]);
  var handleBlur = useEventCallback(function(eventOrString) {
    if (isString2(eventOrString)) {
      return function(event) {
        return executeBlur(event, eventOrString);
      };
    } else {
      executeBlur(eventOrString);
    }
  });
  var setFormikState = (0, import_react70.useCallback)(function(stateOrCb) {
    if (isFunction2(stateOrCb)) {
      dispatch({
        type: "SET_FORMIK_STATE",
        payload: stateOrCb
      });
    } else {
      dispatch({
        type: "SET_FORMIK_STATE",
        payload: function payload() {
          return stateOrCb;
        }
      });
    }
  }, []);
  var setStatus = (0, import_react70.useCallback)(function(status2) {
    dispatch({
      type: "SET_STATUS",
      payload: status2
    });
  }, []);
  var setSubmitting = (0, import_react70.useCallback)(function(isSubmitting) {
    dispatch({
      type: "SET_ISSUBMITTING",
      payload: isSubmitting
    });
  }, []);
  var submitForm = useEventCallback(function() {
    dispatch({
      type: "SUBMIT_ATTEMPT"
    });
    return validateFormWithHighPriority().then(function(combinedErrors) {
      var isInstanceOfError = combinedErrors instanceof Error;
      var isActuallyValid = !isInstanceOfError && Object.keys(combinedErrors).length === 0;
      if (isActuallyValid) {
        var promiseOrUndefined;
        try {
          promiseOrUndefined = executeSubmit();
          if (promiseOrUndefined === void 0) {
            return;
          }
        } catch (error) {
          throw error;
        }
        return Promise.resolve(promiseOrUndefined).then(function(result) {
          if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_SUCCESS"
            });
          }
          return result;
        })["catch"](function(_errors) {
          if (!!isMounted.current) {
            dispatch({
              type: "SUBMIT_FAILURE"
            });
            throw _errors;
          }
        });
      } else if (!!isMounted.current) {
        dispatch({
          type: "SUBMIT_FAILURE"
        });
        if (isInstanceOfError) {
          throw combinedErrors;
        }
      }
      return;
    });
  });
  var handleSubmit = useEventCallback(function(e2) {
    if (e2 && e2.preventDefault && isFunction2(e2.preventDefault)) {
      e2.preventDefault();
    }
    if (e2 && e2.stopPropagation && isFunction2(e2.stopPropagation)) {
      e2.stopPropagation();
    }
    if (typeof document !== "undefined") {
      var activeElement = getActiveElement2();
      if (activeElement !== null && activeElement instanceof HTMLButtonElement) {
        !(activeElement.attributes && activeElement.attributes.getNamedItem("type")) ? true ? tiny_warning_esm_default(false, 'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type="submit"`. If this is not a submit button, please add `type="button"`.') : tiny_warning_esm_default(false) : void 0;
      }
    }
    submitForm()["catch"](function(reason) {
      console.warn("Warning: An unhandled error was caught from submitForm()", reason);
    });
  });
  var imperativeMethods = {
    resetForm,
    validateForm: validateFormWithHighPriority,
    validateField,
    setErrors,
    setFieldError,
    setFieldTouched,
    setFieldValue,
    setStatus,
    setSubmitting,
    setTouched,
    setValues,
    setFormikState,
    submitForm
  };
  var executeSubmit = useEventCallback(function() {
    return onSubmit(state.values, imperativeMethods);
  });
  var handleReset = useEventCallback(function(e2) {
    if (e2 && e2.preventDefault && isFunction2(e2.preventDefault)) {
      e2.preventDefault();
    }
    if (e2 && e2.stopPropagation && isFunction2(e2.stopPropagation)) {
      e2.stopPropagation();
    }
    resetForm();
  });
  var getFieldMeta = (0, import_react70.useCallback)(function(name) {
    return {
      value: getIn2(state.values, name),
      error: getIn2(state.errors, name),
      touched: !!getIn2(state.touched, name),
      initialValue: getIn2(initialValues.current, name),
      initialTouched: !!getIn2(initialTouched.current, name),
      initialError: getIn2(initialErrors.current, name)
    };
  }, [state.errors, state.touched, state.values]);
  var getFieldHelpers = (0, import_react70.useCallback)(function(name) {
    return {
      setValue: function setValue(value, shouldValidate) {
        return setFieldValue(name, value, shouldValidate);
      },
      setTouched: function setTouched2(value, shouldValidate) {
        return setFieldTouched(name, value, shouldValidate);
      },
      setError: function setError(value) {
        return setFieldError(name, value);
      }
    };
  }, [setFieldValue, setFieldTouched, setFieldError]);
  var getFieldProps = (0, import_react70.useCallback)(function(nameOrOptions) {
    var isAnObject = isObject3(nameOrOptions);
    var name = isAnObject ? nameOrOptions.name : nameOrOptions;
    var valueState = getIn2(state.values, name);
    var field = {
      name,
      value: valueState,
      onChange: handleChange,
      onBlur: handleBlur
    };
    if (isAnObject) {
      var type = nameOrOptions.type, valueProp = nameOrOptions.value, is = nameOrOptions.as, multiple = nameOrOptions.multiple;
      if (type === "checkbox") {
        if (valueProp === void 0) {
          field.checked = !!valueState;
        } else {
          field.checked = !!(Array.isArray(valueState) && ~valueState.indexOf(valueProp));
          field.value = valueProp;
        }
      } else if (type === "radio") {
        field.checked = valueState === valueProp;
        field.value = valueProp;
      } else if (is === "select" && multiple) {
        field.value = field.value || [];
        field.multiple = true;
      }
    }
    return field;
  }, [handleBlur, handleChange, state.values]);
  var dirty = (0, import_react70.useMemo)(function() {
    return !(0, import_react_fast_compare.default)(initialValues.current, state.values);
  }, [initialValues.current, state.values]);
  var isValid = (0, import_react70.useMemo)(function() {
    return typeof isInitialValid !== "undefined" ? dirty ? state.errors && Object.keys(state.errors).length === 0 : isInitialValid !== false && isFunction2(isInitialValid) ? isInitialValid(props) : isInitialValid : state.errors && Object.keys(state.errors).length === 0;
  }, [isInitialValid, dirty, state.errors, props]);
  var ctx = _extends8({}, state, {
    initialValues: initialValues.current,
    initialErrors: initialErrors.current,
    initialTouched: initialTouched.current,
    initialStatus: initialStatus.current,
    handleBlur,
    handleChange,
    handleReset,
    handleSubmit,
    resetForm,
    setErrors,
    setFormikState,
    setFieldTouched,
    setFieldValue,
    setFieldError,
    setStatus,
    setSubmitting,
    setTouched,
    setValues,
    submitForm,
    validateForm: validateFormWithHighPriority,
    validateField,
    isValid,
    dirty,
    unregisterField,
    registerField,
    getFieldProps,
    getFieldMeta,
    getFieldHelpers,
    validateOnBlur,
    validateOnChange,
    validateOnMount
  });
  return ctx;
}
function Formik(props) {
  var formikbag = useFormik(props);
  var component = props.component, children = props.children, render = props.render, innerRef = props.innerRef;
  (0, import_react70.useImperativeHandle)(innerRef, function() {
    return formikbag;
  });
  if (true) {
    (0, import_react70.useEffect)(function() {
      !!props.render ? true ? tiny_warning_esm_default(false, "<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>") : tiny_warning_esm_default(false) : void 0;
    }, []);
  }
  return (0, import_react70.createElement)(FormikProvider, {
    value: formikbag
  }, component ? (0, import_react70.createElement)(component, formikbag) : render ? render(formikbag) : children ? isFunction2(children) ? children(formikbag) : !isEmptyChildren(children) ? import_react70.Children.only(children) : null : null);
}
function warnAboutMissingIdentifier(_ref4) {
  var htmlContent = _ref4.htmlContent, documentationAnchorLink = _ref4.documentationAnchorLink, handlerName = _ref4.handlerName;
  console.warn("Warning: Formik called `" + handlerName + "`, but you forgot to pass an `id` or `name` attribute to your input:\n    " + htmlContent + "\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#" + documentationAnchorLink + "\n  ");
}
function yupToFormErrors(yupError) {
  var errors = {};
  if (yupError.inner) {
    if (yupError.inner.length === 0) {
      return setIn(errors, yupError.path, yupError.message);
    }
    for (var _iterator = yupError.inner, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
      var _ref5;
      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref5 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref5 = _i.value;
      }
      var err = _ref5;
      if (!getIn2(errors, err.path)) {
        errors = setIn(errors, err.path, err.message);
      }
    }
  }
  return errors;
}
function validateYupSchema(values, schema, sync, context) {
  if (sync === void 0) {
    sync = false;
  }
  if (context === void 0) {
    context = {};
  }
  var validateData = prepareDataForValidation(values);
  return schema[sync ? "validateSync" : "validate"](validateData, {
    abortEarly: false,
    context
  });
}
function prepareDataForValidation(values) {
  var data = Array.isArray(values) ? [] : {};
  for (var k in values) {
    if (Object.prototype.hasOwnProperty.call(values, k)) {
      var key = String(k);
      if (Array.isArray(values[key]) === true) {
        data[key] = values[key].map(function(value) {
          if (Array.isArray(value) === true || isPlainObject_default(value)) {
            return prepareDataForValidation(value);
          } else {
            return value !== "" ? value : void 0;
          }
        });
      } else if (isPlainObject_default(values[key])) {
        data[key] = prepareDataForValidation(values[key]);
      } else {
        data[key] = values[key] !== "" ? values[key] : void 0;
      }
    }
  }
  return data;
}
function arrayMerge(target, source, options2) {
  var destination = target.slice();
  source.forEach(function merge(e2, i) {
    if (typeof destination[i] === "undefined") {
      var cloneRequested = options2.clone !== false;
      var shouldClone = cloneRequested && options2.isMergeableObject(e2);
      destination[i] = shouldClone ? es_default(Array.isArray(e2) ? [] : {}, e2, options2) : e2;
    } else if (options2.isMergeableObject(e2)) {
      destination[i] = es_default(target[i], e2, options2);
    } else if (target.indexOf(e2) === -1) {
      destination.push(e2);
    }
  });
  return destination;
}
function getSelectedValues(options2) {
  return Array.from(options2).filter(function(el) {
    return el.selected;
  }).map(function(el) {
    return el.value;
  });
}
function getValueForCheckbox(currentValue, checked, valueProp) {
  if (typeof currentValue === "boolean") {
    return Boolean(checked);
  }
  var currentArrayOfValues = [];
  var isValueInArray = false;
  var index = -1;
  if (!Array.isArray(currentValue)) {
    if (!valueProp || valueProp == "true" || valueProp == "false") {
      return Boolean(checked);
    }
  } else {
    currentArrayOfValues = currentValue;
    index = currentValue.indexOf(valueProp);
    isValueInArray = index >= 0;
  }
  if (checked && valueProp && !isValueInArray) {
    return currentArrayOfValues.concat(valueProp);
  }
  if (!isValueInArray) {
    return currentArrayOfValues;
  }
  return currentArrayOfValues.slice(0, index).concat(currentArrayOfValues.slice(index + 1));
}
var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react70.useLayoutEffect : import_react70.useEffect;
function useEventCallback(fn) {
  var ref = (0, import_react70.useRef)(fn);
  useIsomorphicLayoutEffect2(function() {
    ref.current = fn;
  });
  return (0, import_react70.useCallback)(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current.apply(void 0, args);
  }, []);
}
function Field(_ref2) {
  var validate = _ref2.validate, name = _ref2.name, render = _ref2.render, children = _ref2.children, is = _ref2.as, component = _ref2.component, props = _objectWithoutPropertiesLoose4(_ref2, ["validate", "name", "render", "children", "as", "component"]);
  var _useFormikContext = useFormikContext(), formik = _objectWithoutPropertiesLoose4(_useFormikContext, ["validate", "validationSchema"]);
  if (true) {
    (0, import_react70.useEffect)(function() {
      !!render ? true ? tiny_warning_esm_default(false, '<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name="' + name + '" render={({field, form}) => ...} /> with <Field name="' + name + '">{({field, form, meta}) => ...}</Field>') : tiny_warning_esm_default(false) : void 0;
      !!(is && children && isFunction2(children)) ? true ? tiny_warning_esm_default(false, "You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.") : tiny_warning_esm_default(false) : void 0;
      !!(component && children && isFunction2(children)) ? true ? tiny_warning_esm_default(false, "You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.") : tiny_warning_esm_default(false) : void 0;
      !!(render && children && !isEmptyChildren(children)) ? true ? tiny_warning_esm_default(false, "You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored") : tiny_warning_esm_default(false) : void 0;
    }, []);
  }
  var registerField = formik.registerField, unregisterField = formik.unregisterField;
  (0, import_react70.useEffect)(function() {
    registerField(name, {
      validate
    });
    return function() {
      unregisterField(name);
    };
  }, [registerField, unregisterField, name, validate]);
  var field = formik.getFieldProps(_extends8({
    name
  }, props));
  var meta = formik.getFieldMeta(name);
  var legacyBag = {
    field,
    form: formik
  };
  if (render) {
    return render(_extends8({}, legacyBag, {
      meta
    }));
  }
  if (isFunction2(children)) {
    return children(_extends8({}, legacyBag, {
      meta
    }));
  }
  if (component) {
    if (typeof component === "string") {
      var innerRef = props.innerRef, rest = _objectWithoutPropertiesLoose4(props, ["innerRef"]);
      return (0, import_react70.createElement)(component, _extends8({
        ref: innerRef
      }, field, rest), children);
    }
    return (0, import_react70.createElement)(component, _extends8({
      field,
      form: formik
    }, props), children);
  }
  var asElement = is || "input";
  if (typeof asElement === "string") {
    var _innerRef = props.innerRef, _rest = _objectWithoutPropertiesLoose4(props, ["innerRef"]);
    return (0, import_react70.createElement)(asElement, _extends8({
      ref: _innerRef
    }, field, _rest), children);
  }
  return (0, import_react70.createElement)(asElement, _extends8({}, field, props), children);
}
var Form = (0, import_react70.forwardRef)(function(props, ref) {
  var action = props.action, rest = _objectWithoutPropertiesLoose4(props, ["action"]);
  var _action = action != null ? action : "#";
  var _useFormikContext = useFormikContext(), handleReset = _useFormikContext.handleReset, handleSubmit = _useFormikContext.handleSubmit;
  return (0, import_react70.createElement)("form", Object.assign({
    onSubmit: handleSubmit,
    ref,
    onReset: handleReset,
    action: _action
  }, rest));
});
Form.displayName = "Form";
function connect(Comp) {
  var C = function C2(props) {
    return (0, import_react70.createElement)(FormikConsumer, null, function(formik) {
      !!!formik ? true ? tiny_warning_esm_default(false, "Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: " + Comp.name) : tiny_warning_esm_default(false) : void 0;
      return (0, import_react70.createElement)(Comp, Object.assign({}, props, {
        formik
      }));
    });
  };
  var componentDisplayName = Comp.displayName || Comp.name || Comp.constructor && Comp.constructor.name || "Component";
  C.WrappedComponent = Comp;
  C.displayName = "FormikConnect(" + componentDisplayName + ")";
  return (0, import_hoist_non_react_statics.default)(
    C,
    Comp
    // cast type to ComponentClass (even if SFC)
  );
}
var move = function move2(array2, from, to) {
  var copy2 = copyArrayLike(array2);
  var value = copy2[from];
  copy2.splice(from, 1);
  copy2.splice(to, 0, value);
  return copy2;
};
var swap = function swap2(arrayLike, indexA, indexB) {
  var copy2 = copyArrayLike(arrayLike);
  var a = copy2[indexA];
  copy2[indexA] = copy2[indexB];
  copy2[indexB] = a;
  return copy2;
};
var insert = function insert2(arrayLike, index, value) {
  var copy2 = copyArrayLike(arrayLike);
  copy2.splice(index, 0, value);
  return copy2;
};
var replace = function replace2(arrayLike, index, value) {
  var copy2 = copyArrayLike(arrayLike);
  copy2[index] = value;
  return copy2;
};
var copyArrayLike = function copyArrayLike2(arrayLike) {
  if (!arrayLike) {
    return [];
  } else if (Array.isArray(arrayLike)) {
    return [].concat(arrayLike);
  } else {
    var maxIndex = Object.keys(arrayLike).map(function(key) {
      return parseInt(key);
    }).reduce(function(max, el) {
      return el > max ? el : max;
    }, 0);
    return Array.from(_extends8({}, arrayLike, {
      length: maxIndex + 1
    }));
  }
};
var FieldArrayInner = function(_React$Component) {
  _inheritsLoose2(FieldArrayInner2, _React$Component);
  function FieldArrayInner2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.updateArrayField = function(fn, alterTouched, alterErrors) {
      var _this$props = _this.props, name = _this$props.name, setFormikState = _this$props.formik.setFormikState;
      setFormikState(function(prevState) {
        var updateErrors = typeof alterErrors === "function" ? alterErrors : fn;
        var updateTouched = typeof alterTouched === "function" ? alterTouched : fn;
        var values = setIn(prevState.values, name, fn(getIn2(prevState.values, name)));
        var fieldError = alterErrors ? updateErrors(getIn2(prevState.errors, name)) : void 0;
        var fieldTouched = alterTouched ? updateTouched(getIn2(prevState.touched, name)) : void 0;
        if (isEmptyArray(fieldError)) {
          fieldError = void 0;
        }
        if (isEmptyArray(fieldTouched)) {
          fieldTouched = void 0;
        }
        return _extends8({}, prevState, {
          values,
          errors: alterErrors ? setIn(prevState.errors, name, fieldError) : prevState.errors,
          touched: alterTouched ? setIn(prevState.touched, name, fieldTouched) : prevState.touched
        });
      });
    };
    _this.push = function(value) {
      return _this.updateArrayField(function(arrayLike) {
        return [].concat(copyArrayLike(arrayLike), [cloneDeep_default(value)]);
      }, false, false);
    };
    _this.handlePush = function(value) {
      return function() {
        return _this.push(value);
      };
    };
    _this.swap = function(indexA, indexB) {
      return _this.updateArrayField(function(array2) {
        return swap(array2, indexA, indexB);
      }, true, true);
    };
    _this.handleSwap = function(indexA, indexB) {
      return function() {
        return _this.swap(indexA, indexB);
      };
    };
    _this.move = function(from, to) {
      return _this.updateArrayField(function(array2) {
        return move(array2, from, to);
      }, true, true);
    };
    _this.handleMove = function(from, to) {
      return function() {
        return _this.move(from, to);
      };
    };
    _this.insert = function(index, value) {
      return _this.updateArrayField(function(array2) {
        return insert(array2, index, value);
      }, function(array2) {
        return insert(array2, index, null);
      }, function(array2) {
        return insert(array2, index, null);
      });
    };
    _this.handleInsert = function(index, value) {
      return function() {
        return _this.insert(index, value);
      };
    };
    _this.replace = function(index, value) {
      return _this.updateArrayField(function(array2) {
        return replace(array2, index, value);
      }, false, false);
    };
    _this.handleReplace = function(index, value) {
      return function() {
        return _this.replace(index, value);
      };
    };
    _this.unshift = function(value) {
      var length = -1;
      _this.updateArrayField(function(array2) {
        var arr = array2 ? [value].concat(array2) : [value];
        if (length < 0) {
          length = arr.length;
        }
        return arr;
      }, function(array2) {
        var arr = array2 ? [null].concat(array2) : [null];
        if (length < 0) {
          length = arr.length;
        }
        return arr;
      }, function(array2) {
        var arr = array2 ? [null].concat(array2) : [null];
        if (length < 0) {
          length = arr.length;
        }
        return arr;
      });
      return length;
    };
    _this.handleUnshift = function(value) {
      return function() {
        return _this.unshift(value);
      };
    };
    _this.handleRemove = function(index) {
      return function() {
        return _this.remove(index);
      };
    };
    _this.handlePop = function() {
      return function() {
        return _this.pop();
      };
    };
    _this.remove = _this.remove.bind(_assertThisInitialized(_this));
    _this.pop = _this.pop.bind(_assertThisInitialized(_this));
    return _this;
  }
  var _proto = FieldArrayInner2.prototype;
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.validateOnChange && this.props.formik.validateOnChange && !(0, import_react_fast_compare.default)(getIn2(prevProps.formik.values, prevProps.name), getIn2(this.props.formik.values, this.props.name))) {
      this.props.formik.validateForm(this.props.formik.values);
    }
  };
  _proto.remove = function remove(index) {
    var result;
    this.updateArrayField(
      // so this gets call 3 times
      function(array2) {
        var copy2 = array2 ? copyArrayLike(array2) : [];
        if (!result) {
          result = copy2[index];
        }
        if (isFunction2(copy2.splice)) {
          copy2.splice(index, 1);
        }
        return copy2;
      },
      true,
      true
    );
    return result;
  };
  _proto.pop = function pop() {
    var result;
    this.updateArrayField(
      // so this gets call 3 times
      function(array2) {
        var tmp = array2;
        if (!result) {
          result = tmp && tmp.pop && tmp.pop();
        }
        return tmp;
      },
      true,
      true
    );
    return result;
  };
  _proto.render = function render() {
    var arrayHelpers = {
      push: this.push,
      pop: this.pop,
      swap: this.swap,
      move: this.move,
      insert: this.insert,
      replace: this.replace,
      unshift: this.unshift,
      remove: this.remove,
      handlePush: this.handlePush,
      handlePop: this.handlePop,
      handleSwap: this.handleSwap,
      handleMove: this.handleMove,
      handleInsert: this.handleInsert,
      handleReplace: this.handleReplace,
      handleUnshift: this.handleUnshift,
      handleRemove: this.handleRemove
    };
    var _this$props2 = this.props, component = _this$props2.component, render2 = _this$props2.render, children = _this$props2.children, name = _this$props2.name, _this$props2$formik = _this$props2.formik, restOfFormik = _objectWithoutPropertiesLoose4(_this$props2$formik, ["validate", "validationSchema"]);
    var props = _extends8({}, arrayHelpers, {
      form: restOfFormik,
      name
    });
    return component ? (0, import_react70.createElement)(component, props) : render2 ? render2(props) : children ? typeof children === "function" ? children(props) : !isEmptyChildren(children) ? import_react70.Children.only(children) : null : null;
  };
  return FieldArrayInner2;
}(import_react70.Component);
FieldArrayInner.defaultProps = {
  validateOnChange: true
};
var FieldArray = connect(FieldArrayInner);
var ErrorMessageImpl = function(_React$Component) {
  _inheritsLoose2(ErrorMessageImpl2, _React$Component);
  function ErrorMessageImpl2() {
    return _React$Component.apply(this, arguments) || this;
  }
  var _proto = ErrorMessageImpl2.prototype;
  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {
    if (getIn2(this.props.formik.errors, this.props.name) !== getIn2(props.formik.errors, this.props.name) || getIn2(this.props.formik.touched, this.props.name) !== getIn2(props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length) {
      return true;
    } else {
      return false;
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, component = _this$props.component, formik = _this$props.formik, render2 = _this$props.render, children = _this$props.children, name = _this$props.name, rest = _objectWithoutPropertiesLoose4(_this$props, ["component", "formik", "render", "children", "name"]);
    var touch = getIn2(formik.touched, name);
    var error = getIn2(formik.errors, name);
    return !!touch && !!error ? render2 ? isFunction2(render2) ? render2(error) : null : children ? isFunction2(children) ? children(error) : null : component ? (0, import_react70.createElement)(component, rest, error) : error : null;
  };
  return ErrorMessageImpl2;
}(import_react70.Component);
var ErrorMessage = connect(ErrorMessageImpl);
var FastFieldInner = function(_React$Component) {
  _inheritsLoose2(FastFieldInner2, _React$Component);
  function FastFieldInner2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    var render = props.render, children = props.children, component = props.component, is = props.as, name = props.name;
    !!render ? true ? tiny_warning_esm_default(false, "<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={" + name + "}>{props => ...}</FastField> instead.") : tiny_warning_esm_default(false) : void 0;
    !!(component && render) ? true ? tiny_warning_esm_default(false, "You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored") : tiny_warning_esm_default(false) : void 0;
    !!(is && children && isFunction2(children)) ? true ? tiny_warning_esm_default(false, "You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.") : tiny_warning_esm_default(false) : void 0;
    !!(component && children && isFunction2(children)) ? true ? tiny_warning_esm_default(false, "You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.") : tiny_warning_esm_default(false) : void 0;
    !!(render && children && !isEmptyChildren(children)) ? true ? tiny_warning_esm_default(false, "You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored") : tiny_warning_esm_default(false) : void 0;
    return _this;
  }
  var _proto = FastFieldInner2.prototype;
  _proto.shouldComponentUpdate = function shouldComponentUpdate(props) {
    if (this.props.shouldUpdate) {
      return this.props.shouldUpdate(props, this.props);
    } else if (props.name !== this.props.name || getIn2(props.formik.values, this.props.name) !== getIn2(this.props.formik.values, this.props.name) || getIn2(props.formik.errors, this.props.name) !== getIn2(this.props.formik.errors, this.props.name) || getIn2(props.formik.touched, this.props.name) !== getIn2(this.props.formik.touched, this.props.name) || Object.keys(this.props).length !== Object.keys(props).length || props.formik.isSubmitting !== this.props.formik.isSubmitting) {
      return true;
    } else {
      return false;
    }
  };
  _proto.componentDidMount = function componentDidMount() {
    this.props.formik.registerField(this.props.name, {
      validate: this.props.validate
    });
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.name !== prevProps.name) {
      this.props.formik.unregisterField(prevProps.name);
      this.props.formik.registerField(this.props.name, {
        validate: this.props.validate
      });
    }
    if (this.props.validate !== prevProps.validate) {
      this.props.formik.registerField(this.props.name, {
        validate: this.props.validate
      });
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.props.formik.unregisterField(this.props.name);
  };
  _proto.render = function render() {
    var _this$props = this.props, name = _this$props.name, render2 = _this$props.render, is = _this$props.as, children = _this$props.children, component = _this$props.component, formik = _this$props.formik, props = _objectWithoutPropertiesLoose4(_this$props, ["validate", "name", "render", "as", "children", "component", "shouldUpdate", "formik"]);
    var restOfFormik = _objectWithoutPropertiesLoose4(formik, ["validate", "validationSchema"]);
    var field = formik.getFieldProps(_extends8({
      name
    }, props));
    var meta = {
      value: getIn2(formik.values, name),
      error: getIn2(formik.errors, name),
      touched: !!getIn2(formik.touched, name),
      initialValue: getIn2(formik.initialValues, name),
      initialTouched: !!getIn2(formik.initialTouched, name),
      initialError: getIn2(formik.initialErrors, name)
    };
    var bag = {
      field,
      meta,
      form: restOfFormik
    };
    if (render2) {
      return render2(bag);
    }
    if (isFunction2(children)) {
      return children(bag);
    }
    if (component) {
      if (typeof component === "string") {
        var innerRef = props.innerRef, rest = _objectWithoutPropertiesLoose4(props, ["innerRef"]);
        return (0, import_react70.createElement)(component, _extends8({
          ref: innerRef
        }, field, rest), children);
      }
      return (0, import_react70.createElement)(component, _extends8({
        field,
        form: formik
      }, props), children);
    }
    var asElement = is || "input";
    if (typeof asElement === "string") {
      var _innerRef = props.innerRef, _rest = _objectWithoutPropertiesLoose4(props, ["innerRef"]);
      return (0, import_react70.createElement)(asElement, _extends8({
        ref: _innerRef
      }, field, _rest), children);
    }
    return (0, import_react70.createElement)(asElement, _extends8({}, field, props), children);
  };
  return FastFieldInner2;
}(import_react70.Component);
var FastField = connect(FastFieldInner);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/WalletGroupContext/WalletGroupContext.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var import_react71 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getWalletGroupType/getWalletGroupType.js
var getWalletGroupType = (walletGroup) => {
  if (!walletGroup.groupedWallets.length) {
    throw new Error("Wallet group must have at least one wallet");
  }
  const [wallet] = walletGroup.groupedWallets;
  if (wallet.chainGroup) {
    return "multi-chain";
  }
  if (wallet.walletGroup) {
    return "multi-wallet";
  }
  return void 0;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/WalletGroupContext/WalletGroupContext.js
var WalletGroupContext = import_react71.default.createContext(void 0);
var useWalletGroupContext = () => {
  const context = import_react71.default.useContext(WalletGroupContext);
  if (context === void 0) {
    throw new Error("usage of useWalletGroupContext not wrapped in `WalletGroupContextProvider`.");
  }
  return context;
};
var WalletGroupContextProvider = ({ children }) => {
  const [selectedWalletGroup, setSelectedWalletGroup] = import_react71.default.useState();
  const { setView } = useViewContext();
  const navigateToWalletGroup = import_react71.default.useCallback((walletGroup) => {
    setSelectedWalletGroup(walletGroup);
    const walletGroupType = getWalletGroupType(walletGroup);
    const mapGroupTypeToView = {
      "multi-chain": "wallet-group",
      "multi-wallet": "select-wallet-in-wallet-group"
    };
    const view = walletGroupType ? mapGroupTypeToView[walletGroupType] : mapGroupTypeToView["multi-chain"];
    setView(view);
  }, [setSelectedWalletGroup, setView]);
  const contextValue = {
    navigateToWalletGroup,
    selectedWalletGroup
  };
  return (0, import_jsx_runtime34.jsx)(WalletGroupContext.Provider, { value: contextValue, children });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SocialRedirectContext/SocialRedirectContext.js
var import_jsx_runtime150 = __toESM(require_jsx_runtime(), 1);
var import_react190 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getReferencedAccount/getReferencedAccount.js
var getReferencedAccount = (user, walletId) => {
  const accountForWalletId = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((account) => account.id === walletId);
  return user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((account) => account.id === (accountForWalletId === null || accountForWalletId === void 0 ? void 0 : accountForWalletId.refId));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useDynamicContext/useInternalDynamicContext.js
var import_react72 = __toESM(require_react(), 1);
var useInternalDynamicContext = () => {
  const context = (0, import_react72.useContext)(DynamicContext);
  if (context === void 0) {
    throw new Error("useInternalDynamicContext must be used within a DynamicContextProvider");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useVerifyWallet/useVerifyWallet.js
var import_react184 = __toESM(require_react(), 1);
var import_jsx_runtime145 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/errors.js
var ACTIVE_SESSION = "session_active";
var ERROR_SENDING_CODE = "error_sending_code";
var ERROR_PROCESSING_REVEAL_REQUEST = "error_processing_reveal_request";
var INVALID_REQUEST = "invalid_request";
var INVALID_WALLET_DATA = "invalid_wallet";
var SECURE_ENCLAVE_PROVIDER_NOT_ENABLED = "secure_enclave_provider_not_enabled";
var USER_NOT_LOGGED_IN = "user_not_logged_in";
var CODE_SENT = "code_sent";
var SESSION_CREATED = "session_created";
var SESSION_RESTORED = "session_restored";
var ACCESS_BLOCKED_ERROR_CODE = 451;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/generateMessages/index.js
var generateMessages = (publicWalletAddress, walletConnector, nonce, projectEnvironmentId, displaySiweStatement, siweStatement) => __awaiter(void 0, void 0, void 0, function* () {
  if (publicWalletAddress === void 0) {
    throw new DynamicError("Unable to fetch the public address from the wallet");
  }
  if (!walletConnector.connectedChain) {
    throw new DynamicError("Wallet is not connected");
  }
  let chainId = yield walletConnector.getNetwork();
  if (chainId === void 0) {
    if (walletConnector.key === "bloctoevm") {
      chainId = 137;
    } else if (walletConnector.connectedChain === "EVM") {
      chainId = 1;
    }
  }
  const parsedAddress = walletConnector.parseAddress(publicWalletAddress);
  const messageToSign = generateMessageToSign({
    blockchain: walletConnector.connectedChain,
    chainId,
    domain: window.location.host,
    nonce,
    // The SIWE parser library used to validate signed messages for EVM/Ethereum
    // checks that an address is in EIP55 format, so make sure we do that here.
    // see: https://eips.ethereum.org/EIPS/eip-55
    publicKey: parsedAddress,
    requestId: projectEnvironmentId,
    resources: walletConnector.providerResources,
    statement: displaySiweStatement ? siweStatement.replace(/(\r\n|\n|\r)/gm, " ").trim() : void 0,
    uri: window.location.href
  });
  const signedMessage = yield walletConnector.proveOwnership(parsedAddress, messageToSign);
  if (!signedMessage) {
    throw new DynamicError("Unable to sign the message");
  }
  return { messageToSign, signedMessage };
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getVerifyArgs/getVerifyArgs.js
var getVerifyArgs = (_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, nonce, walletProvider, environmentId, displaySiweStatement, skipEmptyAccountCheck, siweStatement, publicWalletAddress, signedMessageOverride, messageToSignOverride }) {
  const chain = walletConnector.connectedChain;
  if (signedMessageOverride && messageToSignOverride) {
    const [network2, additionalWalletAddresses2] = yield Promise.all([
      walletConnector.getNetwork(),
      walletConnector.getAdditionalAddresses(publicWalletAddress)
    ]);
    return {
      additionalWalletAddresses: additionalWalletAddresses2,
      chain,
      messageToSign: messageToSignOverride,
      network: String(network2),
      publicWalletAddress,
      signedMessage: signedMessageOverride,
      skipEmptyAccountCheck,
      walletName: walletConnector.key,
      walletProvider
    };
  }
  const { messageToSign, signedMessage } = yield generateMessages(publicWalletAddress, walletConnector, nonce, environmentId, displaySiweStatement, siweStatement);
  const [network, additionalWalletAddresses] = yield Promise.all([
    walletConnector.getNetwork(),
    walletConnector.getAdditionalAddresses(publicWalletAddress)
  ]);
  return {
    additionalWalletAddresses,
    chain,
    messageToSign,
    network: String(network),
    publicWalletAddress,
    signedMessage,
    skipEmptyAccountCheck,
    walletName: walletConnector.key,
    walletProvider
  };
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/wallets/wallets.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
var import_react74 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/createUserProfile/createUserProfile.js
var createUserProfileFromSdkUser = (user) => {
  var _a, _b, _c, _d, _e2, _f, _g16, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
  const kyc = {
    alias: (_a = user.alias) !== null && _a !== void 0 ? _a : void 0,
    btcWallet: (_b = user.btcWallet) !== null && _b !== void 0 ? _b : void 0,
    ckbWallet: (_c = user.ckbWallet) !== null && _c !== void 0 ? _c : void 0,
    country: (_d = user.country) !== null && _d !== void 0 ? _d : void 0,
    discordNotification: (_e2 = user.discordNotification) !== null && _e2 !== void 0 ? _e2 : void 0,
    dogeWallet: (_f = user.dogeWallet) !== null && _f !== void 0 ? _f : void 0,
    email: (_g16 = user.email) !== null && _g16 !== void 0 ? _g16 : void 0,
    emailNotification: (_h = user.emailNotification) !== null && _h !== void 0 ? _h : void 0,
    firstName: (_j = user.firstName) !== null && _j !== void 0 ? _j : void 0,
    jobTitle: (_k = user.jobTitle) !== null && _k !== void 0 ? _k : void 0,
    kasWallet: (_l = user.kasWallet) !== null && _l !== void 0 ? _l : void 0,
    kdaWallet: (_m = user.kdaWallet) !== null && _m !== void 0 ? _m : void 0,
    lastName: (_o = user.lastName) !== null && _o !== void 0 ? _o : void 0,
    ltcWallet: (_p = user.ltcWallet) !== null && _p !== void 0 ? _p : void 0,
    newsletterNotification: (_q = user.newsletterNotification) !== null && _q !== void 0 ? _q : void 0,
    phoneNumber: (_r = user.phoneNumber) !== null && _r !== void 0 ? _r : void 0,
    policiesConsent: (_s = user.policiesConsent) !== null && _s !== void 0 ? _s : void 0,
    tShirtSize: (_t = user.tShirtSize) !== null && _t !== void 0 ? _t : void 0,
    team: (_u = user.team) !== null && _u !== void 0 ? _u : void 0,
    username: (_v = user.username) !== null && _v !== void 0 ? _v : void 0
  };
  const userProfile = Object.assign({ environmentId: user.projectEnvironmentId, lastVerifiedCredentialId: (_w = user.lastVerifiedCredentialId) !== null && _w !== void 0 ? _w : void 0, lists: user.lists, metadata: user.metadata, mfaBackupCodeAcknowledgement: user.mfaBackupCodeAcknowledgement, missingFields: user.missingFields, newUser: user.newUser, scope: user.scope, sessionId: (_x = user.sessionId) !== null && _x !== void 0 ? _x : "missing-sessionId", userId: user.id, verifiedCredentials: user.verifiedCredentials || [] }, kyc);
  return userProfile;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var import_react73 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/storeAuthToken/index.js
var storeAuthToken = (jwt, minifiedJwt) => {
  StorageService.setItem(AUTH_TOKEN, jwt, {
    priority: ["secureStorage", "localStorage"]
  });
  StorageService.setItem(AUTH_MIN_TOKEN, minifiedJwt, {
    priority: ["secureStorage", "localStorage"]
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/storeExpiresAt/storeExpiresAt.js
var storeExpiresAt = (expiresAt) => {
  StorageService.setItem(AUTH_EXPIRES_AT, expiresAt);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.js
var storeAuthTokenAndUser = ({ user, jwt, minifiedJwt, expiresAt }) => {
  storeExpiresAt(expiresAt);
  if (jwt && minifiedJwt) {
    storeAuthToken(jwt, minifiedJwt);
    if (isCookieEnabled()) {
      const expireDate = new Date(expiresAt * 1e3).toUTCString();
      const authCookie = `${DYNAMIC_AUTH_COOKIE_NAME}=${minifiedJwt}; expires=${expireDate}; path=/; SameSite=Lax`;
      document.cookie = authCookie;
    }
  }
  const userProfile = createUserProfileFromSdkUser(user);
  setUser(userProfile);
  return userProfile;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/wallets/wallets.js
var storeSelectedWallet = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, walletId }) {
  try {
    const response = yield sdkApi().selectUserWallet({
      environmentId,
      userWalletSelectionRequest: {
        walletId
      }
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    logger2.error("error storing selected wallet", e2);
    return void 0;
  }
});
var linkWallet = (environmentId_1, _b) => __awaiter(void 0, [environmentId_1, _b], void 0, function* (environmentId, { messageToSign, network, signedMessage, publicWalletAddress, chain, walletName, walletProvider, additionalWalletAddresses, backup, password, passwordSource }) {
  const verifyRequest = VerifyRequestFromJSON({
    additionalWalletAddresses,
    backup,
    chain,
    messageToSign,
    network,
    password,
    passwordSource,
    publicWalletAddress,
    signedMessage,
    walletName,
    walletProvider
  });
  try {
    const response = yield sdkApi().verifyLink({
      environmentId,
      verifyRequest
    });
    storeAuthTokenAndUser(response);
    return response;
  } catch (e2) {
    logger2.error(e2);
    const data = yield e2.json();
    if (data.code === "reassign_wallet_confirm" || data.code === "reassign_wallet_error") {
      throw new WalletUsedError(data.code);
    }
    if (data.code === "merge_accounts_confirmation") {
      throw new MergeAccountsConfirmationError({
        code: data.code,
        mergeConflicts: data.payload.mergeConflicts,
        walletAddress: publicWalletAddress
      });
    }
    if (data.error.code === "sandbox_maximum_threshold_reached") {
      throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    throw new DynamicError(data.error);
  }
});
var unlinkWallet = (_c) => __awaiter(void 0, [_c], void 0, function* ({ environmentId, primaryWalletId, walletId, onSuccess }) {
  try {
    const response = yield sdkApi().verifyUnlink({
      environmentId,
      verifyUnlinkRequest: {
        primaryWalletId,
        walletId
      }
    });
    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess();
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return void 0;
  }
});
var transferWallet = (environmentId_2, _d) => __awaiter(void 0, [environmentId_2, _d], void 0, function* (environmentId, { network, messageToSign, signedMessage, publicWalletAddress, chain, walletName, walletProvider, skipEmptyAccountCheck = false }) {
  const verifyRequest = {
    chain,
    messageToSign,
    network,
    publicWalletAddress,
    signedMessage,
    skipEmptyAccountCheck,
    walletName,
    walletProvider
  };
  try {
    const response = yield sdkApi().verifyTransfer({
      environmentId,
      verifyRequest
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    logger2.error("error transferring wallet", e2);
    return void 0;
  }
});
var verifyWallet = (environmentId_3, _e2) => __awaiter(void 0, [environmentId_3, _e2], void 0, function* (environmentId, { messageToSign, signedMessage, publicWalletAddress, chain, walletName, walletProvider, captchaToken, network, oauth, additionalWalletAddresses, sessionPublicKey }) {
  const verifyRequest = VerifyRequestFromJSON({
    additionalWalletAddresses,
    captchaToken,
    chain,
    messageToSign,
    network,
    oauth,
    publicWalletAddress,
    sessionPublicKey,
    signedMessage,
    walletName,
    walletProvider
  });
  try {
    const response = yield sdkApi().verify({
      environmentId,
      verifyRequest
    });
    return response;
  } catch (e2) {
    logger2.error(e2);
    const data = yield e2.json();
    if (data.code === "wallet_not_deployed") {
      throw new WalletNotDeployedError();
    }
    if (data.error.code === "chainalysis_blocked_wallet") {
      throw new ChainalysisError(data.payload.walletPublicKey);
    }
    if (data.error.code === "gate_blocked") {
      throw new GateBlockedError(data.payload.walletPublicKey);
    }
    if (data.error.code === "missing_from_list") {
      throw new NoAccessError({
        walletPublicKey: data.payload.walletPublicKey
      });
    }
    if (data.code === "email_associated_with_different_provider") {
      throw new AccountExistsError(data.error, data.payload);
    }
    if (data.error.code === "sandbox_maximum_threshold_reached") {
      throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    return void 0;
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getSiweStatement/getSiweStatement.js
var getSiweStatement = ({ appName, siweStatement }) => {
  const defaultMessage = `Welcome to ${appName}. Signing is the only way we can truly know that you are the owner of the wallet you are connecting. Signing is a safe, gas-less transaction that does not in any way give ${appName} permission to perform any transactions with your wallet.`;
  return siweStatement || defaultMessage;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getWalletProvider/getWalletProvider.js
var getWalletProvider = (connector) => {
  if (connector.isEmbeddedWallet) {
    return "embeddedWallet";
  }
  if (connector.canConnectViaCustodialService) {
    return "custodialService";
  }
  if (connector.isInstalledOnBrowser()) {
    return "browserExtension";
  }
  return isMobile() ? "deepLink" : "qrCode";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useVerifyWallet/useVerifyWallet.js
var import_react_dom65 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserAuth/useUserAuth.js
var import_react182 = __toESM(require_react(), 1);
var import_jsx_runtime143 = __toESM(require_jsx_runtime(), 1);
var import_react_dom64 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useEmbeddedWallet.js
var import_react180 = __toESM(require_react(), 1);
var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.js
var findEmbeddedWalletFromVerifiedCredentials = (user, chains) => {
  var _a;
  const verifiedCredentials = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.filter(({ walletProvider }) => walletProvider === WalletProviderEnum.EmbeddedWallet);
  if ((verifiedCredentials === null || verifiedCredentials === void 0 ? void 0 : verifiedCredentials.length) && (chains === null || chains === void 0 ? void 0 : chains.length)) {
    return verifiedCredentials.find(({ chain }) => chain && chains.includes(VerifiedCredentialNameToChainEnum[chain]));
  }
  return verifiedCredentials === null || verifiedCredentials === void 0 ? void 0 : verifiedCredentials.shift();
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isProviderEnabled/isProviderEnabled.js
var isProviderEnabled = (providers, provider) => providers.some((providerItem) => {
  const providerEnabled = providerItem.provider === provider && Boolean(providerItem.enabledAt);
  if (providerItem.provider === ProviderEnum.MagicLink) {
    return providerEnabled && Boolean(providerItem.providerProjectId);
  }
  return providerEnabled;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isTurnkeyEnabled/isTurnkeyEnabled.js
var isTurnkeyEnabled = (projectSettings) => {
  var _a;
  return isProviderEnabled((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [], ProviderEnum.Turnkey);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isCoinbaseWaasEnabled/isCoinbaseWaasEnabled.js
var isCoinbaseWaasEnabled = (projectSettings) => {
  var _a;
  return isProviderEnabled((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [], ProviderEnum.CoinbaseWaas);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/hasEmbeddedWallet/hasEmbeddedWallet.js
var hasEmbeddedWallet = (user, walletNameFilter) => {
  var _a;
  return Boolean(user && ((_a = user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.some(({ walletProvider, walletName }) => walletProvider === WalletProviderEnum.EmbeddedWallet && (!walletNameFilter || (walletName === null || walletName === void 0 ? void 0 : walletName.startsWith(walletNameFilter))))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useEmbeddedWallet.js
var import_react_dom62 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js
var findPrimaryEmbeddedChain = (projectSettings) => {
  var _a, _b, _c;
  const embeddedChainConfig = ((_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.chainConfigurations) || [];
  return ((_c = embeddedChainConfig.find((chain) => chain.primary)) === null || _c === void 0 ? void 0 : _c.name) === "SOL" ? ChainEnum.Sol : ChainEnum.Evm;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsTurnkeyWallet/useIsTurnkeyWallet.js
var import_react169 = __toESM(require_react(), 1);
var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getUserVerifiedCredentialType/getUserVerifiedCredentialType.js
var getUserVerifiedCredentialType = (user, type) => {
  var _a, _b, _c;
  if (!user) {
    return void 0;
  }
  if (type) {
    return (_b = (_a = user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find((credentials) => credentials.format === type)) === null || _b === void 0 ? void 0 : _b.format;
  }
  const verifiedCredential = (_c = user.verifiedCredentials) === null || _c === void 0 ? void 0 : _c.find((credentials) => credentials.id === user.lastVerifiedCredentialId);
  return verifiedCredential === null || verifiedCredential === void 0 ? void 0 : verifiedCredential.format;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsTurnkeyWallet/useIsTurnkeyWallet.js
var import_react_dom55 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSmartWallets/useSmartWallets.js
var import_react168 = __toESM(require_react(), 1);
var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
var import_react_dom54 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/findWalletOptionFor/findWalletOptionFor.js
var findWalletOptionFor = (account, walletOptions) => {
  var _a;
  const walletKey = account.walletName;
  if (walletKey === "turnkeyhd") {
    const chain = account.chain ? VerifiedCredentialNameToChainEnum[account.chain] : void 0;
    return walletOptions.find((wallet) => walletKey === wallet.key && wallet.walletConnector.connectedChain === chain);
  }
  return (_a = walletOptions.find((wallet) => walletKey === wallet.key)) !== null && _a !== void 0 ? _a : walletOptions.find((wallet) => wallet.key === "fallbackconnector");
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSmartWallets/useSmartWallets.js
var import_qrcode52 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js
var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);
var import_react167 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/chain/getChainIcon.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var import_react75 = __toESM(require_react(), 1);
var chainIconMap = {
  algorand: AlgorandIcon,
  bitcoin: BitcoinIcon,
  cosmos: CosmosIcon,
  evm: EthereumIcon,
  flow: FlowIcon,
  solana: SolanaIcon,
  starknet: StarknetIcon
};
var getChainIcon = (chain) => {
  var _a, _b, _c;
  const chainName = (_b = (_a = getChainInfo(chain)) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : "";
  return (_c = chainIconMap[chainName]) !== null && _c !== void 0 ? _c : SvgError;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeWalletCard/DynamicBridgeWalletCard.js
var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
var import_react163 = __toESM(require_react(), 1);
var import_react_dom50 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js
var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
var import_react162 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/context/DynamicWidgetContext.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
var import_react132 = __toESM(require_react(), 1);
var import_react_dom30 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKYCFlag/useKYCFlag.js
var import_react130 = __toESM(require_react(), 1);
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getEnabledKYC/index.js
var getEnabledKYC = (kyc) => {
  var _a;
  return (_a = kyc === null || kyc === void 0 ? void 0 : kyc.filter(({ enabled }) => Boolean(enabled))) !== null && _a !== void 0 ? _a : [];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getUserProfileFields/getUserProfileFields.js
var filterFields = ["social"];
var mapUserFieldsToKycSettings = (user, projectSettingsKyc) => {
  const fields = Object.entries(user).reduce((previousValue, [fieldName, fieldValue]) => {
    if (fieldValue) {
      const kycSetting = projectSettingsKyc.find((field) => field.name === fieldName);
      if (kycSetting && !kycSetting.enabled) {
        previousValue.push(Object.assign({}, kycSetting));
      }
    }
    return previousValue;
  }, []);
  return fields;
};
var getEditableUserProfileFields = (projectSettings) => getEnabledKYC(projectSettings).filter(({ name, type }) => type === KycFieldType.Custom || !filterFields.includes(name));
var getNonEditableUserProfileFields = ({ projectSettingsKyc = [], user }) => {
  if (!user)
    return [];
  const userProfileFields = mapUserFieldsToKycSettings(user, projectSettingsKyc);
  return userProfileFields.filter(({ name }) => !filterFields.includes(name));
};
var getUserProfileFields = ({ projectSettingsKyc = [], customFields = [], user }) => {
  var _a;
  const editableUserProfileFields = getEditableUserProfileFields([
    ...projectSettingsKyc,
    ...customFields
  ]);
  const nonEditableUserProfileFields = getNonEditableUserProfileFields({
    projectSettingsKyc,
    user
  });
  let concatedList = [
    ...editableUserProfileFields,
    ...nonEditableUserProfileFields
  ];
  const hasEmbeddedWallet2 = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find(({ walletProvider }) => walletProvider === WalletProviderEnum.EmbeddedWallet);
  const userHasEmail = Boolean(user === null || user === void 0 ? void 0 : user.email);
  const userHasPhoneNumber = Boolean(user === null || user === void 0 ? void 0 : user.phoneNumber);
  if (hasEmbeddedWallet2) {
    concatedList = concatedList.map((field) => {
      if (field.name === "email" && userHasEmail || field.name === "phoneNumber" && userHasPhoneNumber) {
        return Object.assign(Object.assign({}, field), { enabled: false });
      }
      return field;
    });
  }
  return concatedList.sort((a, b) => {
    const indexA = projectSettingsKyc.findIndex((field) => field.name === a.name);
    const indexB = projectSettingsKyc.findIndex((field) => field.name === b.name);
    return indexA - indexB;
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isSocialKycEnabled/isSocialKycEnabled.js
var isSocialKycEnabled = (projectSettings) => {
  var _a;
  return Boolean((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.kyc.find(({ name }) => name === "social")) === null || _a === void 0 ? void 0 : _a.enabled);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKYCFlag/useKYCFlag.js
var import_react_dom29 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useOnlyConnectedMode/useOnlyConnectedMode.js
var import_react129 = __toESM(require_react(), 1);
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var import_react_dom28 = __toESM(require_react_dom(), 1);
var import_qrcode26 = __toESM(require_browser(), 1);

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized2(e2) {
  if (void 0 === e2) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e2;
}

// node_modules/@hcaptcha/react-hcaptcha/dist/esm/index.js
var React15 = __toESM(require_react());

// node_modules/@hcaptcha/react-hcaptcha/dist/esm/utils.js
function generateQuery(params) {
  return Object.entries(params).filter(function(_ref2) {
    var key = _ref2[0], value = _ref2[1];
    return value || value === false;
  }).map(function(_ref2) {
    var key = _ref2[0], value = _ref2[1];
    return encodeURIComponent(key) + "=" + encodeURIComponent(value);
  }).join("&");
}

// node_modules/@hcaptcha/react-hcaptcha/dist/esm/index.js
var SCRIPT_ID = "hcaptcha-api-script-id";
var HCAPTCHA_LOAD_FN_NAME = "hcaptchaOnLoad";
var resolveFn;
var rejectFn;
var mountPromise = new Promise(function(resolve, reject) {
  resolveFn = resolve;
  rejectFn = reject;
});
var mountCaptchaScript = function mountCaptchaScript2(params) {
  if (params === void 0) {
    params = {};
  }
  if (document.getElementById(SCRIPT_ID)) {
    return mountPromise;
  }
  window[HCAPTCHA_LOAD_FN_NAME] = resolveFn;
  var domain = params.apihost || "https://js.hcaptcha.com";
  delete params.apihost;
  var script = document.createElement("script");
  script.id = SCRIPT_ID;
  script.src = domain + "/1/api.js?render=explicit&onload=" + HCAPTCHA_LOAD_FN_NAME;
  script.async = true;
  script.onerror = function(event) {
    return rejectFn("script-error");
  };
  var query = generateQuery(params);
  script.src += query !== "" ? "&" + query : "";
  document.head.appendChild(script);
  return mountPromise;
};
var HCaptcha = function(_React$Component) {
  _inheritsLoose(HCaptcha2, _React$Component);
  function HCaptcha2(props) {
    var _this;
    _this = _React$Component.call(this, props) || this;
    _this.renderCaptcha = _this.renderCaptcha.bind(_assertThisInitialized2(_this));
    _this.resetCaptcha = _this.resetCaptcha.bind(_assertThisInitialized2(_this));
    _this.removeCaptcha = _this.removeCaptcha.bind(_assertThisInitialized2(_this));
    _this.isReady = _this.isReady.bind(_assertThisInitialized2(_this));
    _this.loadCaptcha = _this.loadCaptcha.bind(_assertThisInitialized2(_this));
    _this.handleOnLoad = _this.handleOnLoad.bind(_assertThisInitialized2(_this));
    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized2(_this));
    _this.handleExpire = _this.handleExpire.bind(_assertThisInitialized2(_this));
    _this.handleError = _this.handleError.bind(_assertThisInitialized2(_this));
    _this.handleOpen = _this.handleOpen.bind(_assertThisInitialized2(_this));
    _this.handleClose = _this.handleClose.bind(_assertThisInitialized2(_this));
    _this.handleChallengeExpired = _this.handleChallengeExpired.bind(_assertThisInitialized2(_this));
    var isApiReady = typeof hcaptcha !== "undefined";
    _this.ref = React15.createRef();
    _this.apiScriptRequested = false;
    _this.state = {
      isApiReady,
      isRemoved: false,
      elementId: props.id,
      captchaId: ""
    };
    return _this;
  }
  var _proto = HCaptcha2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    var isApiReady = this.state.isApiReady;
    if (isApiReady) {
      this.renderCaptcha();
      return;
    }
    this.loadCaptcha();
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    var captchaId = this.state.captchaId;
    if (!this.isReady()) {
      return;
    }
    hcaptcha.reset(captchaId);
    hcaptcha.remove(captchaId);
  };
  _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    if (this.state.isApiReady !== nextState.isApiReady || this.state.isRemoved !== nextState.isRemoved) {
      return false;
    }
    return true;
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this2 = this;
    var keys2 = ["sitekey", "size", "theme", "tabindex", "languageOverride", "endpoint"];
    var match = keys2.every(function(key) {
      return prevProps[key] === _this2.props[key];
    });
    if (!match) {
      this.removeCaptcha(function() {
        _this2.renderCaptcha();
      });
    }
  };
  _proto.loadCaptcha = function loadCaptcha() {
    if (this.apiScriptRequested) {
      return;
    }
    var _this$props = this.props, apihost = _this$props.apihost, assethost = _this$props.assethost, endpoint = _this$props.endpoint, host = _this$props.host, imghost = _this$props.imghost, hl = _this$props.languageOverride, reCaptchaCompat = _this$props.reCaptchaCompat, reportapi = _this$props.reportapi, sentry = _this$props.sentry, custom = _this$props.custom;
    var mountParams = {
      apihost,
      assethost,
      endpoint,
      hl,
      host,
      imghost,
      recaptchacompat: reCaptchaCompat === false ? "off" : null,
      reportapi,
      sentry,
      custom
    };
    mountCaptchaScript(mountParams).then(this.handleOnLoad)["catch"](this.handleError);
    this.apiScriptRequested = true;
  };
  _proto.renderCaptcha = function renderCaptcha(onReady) {
    var isApiReady = this.state.isApiReady;
    if (!isApiReady) return;
    var renderParams = Object.assign({
      "open-callback": this.handleOpen,
      "close-callback": this.handleClose,
      "error-callback": this.handleError,
      "chalexpired-callback": this.handleChallengeExpired,
      "expired-callback": this.handleExpire,
      "callback": this.handleSubmit
    }, this.props, {
      hl: this.props.hl || this.props.languageOverride,
      languageOverride: void 0
    });
    var captchaId = hcaptcha.render(this.ref.current, renderParams);
    this.setState({
      isRemoved: false,
      captchaId
    }, function() {
      onReady && onReady();
    });
  };
  _proto.resetCaptcha = function resetCaptcha() {
    var captchaId = this.state.captchaId;
    if (!this.isReady()) {
      return;
    }
    hcaptcha.reset(captchaId);
  };
  _proto.removeCaptcha = function removeCaptcha(callback) {
    var captchaId = this.state.captchaId;
    if (!this.isReady()) {
      return;
    }
    this.setState({
      isRemoved: true
    }, function() {
      hcaptcha.remove(captchaId);
      callback && callback();
    });
  };
  _proto.handleOnLoad = function handleOnLoad() {
    var _this3 = this;
    this.setState({
      isApiReady: true
    }, function() {
      _this3.renderCaptcha(function() {
        var onLoad = _this3.props.onLoad;
        if (onLoad) onLoad();
      });
    });
  };
  _proto.handleSubmit = function handleSubmit(event) {
    var onVerify = this.props.onVerify;
    var _this$state = this.state, isRemoved = _this$state.isRemoved, captchaId = _this$state.captchaId;
    if (typeof hcaptcha === "undefined" || isRemoved) return;
    var token = hcaptcha.getResponse(captchaId);
    var ekey = hcaptcha.getRespKey(captchaId);
    onVerify(token, ekey);
  };
  _proto.handleExpire = function handleExpire() {
    var onExpire = this.props.onExpire;
    var captchaId = this.state.captchaId;
    if (!this.isReady()) {
      return;
    }
    hcaptcha.reset(captchaId);
    if (onExpire) onExpire();
  };
  _proto.handleError = function handleError(event) {
    var onError = this.props.onError;
    var captchaId = this.state.captchaId;
    if (this.isReady()) {
      hcaptcha.reset(captchaId);
    }
    if (onError) onError(event);
  };
  _proto.isReady = function isReady() {
    var _this$state2 = this.state, isApiReady = _this$state2.isApiReady, isRemoved = _this$state2.isRemoved;
    return isApiReady && !isRemoved;
  };
  _proto.handleOpen = function handleOpen() {
    if (!this.isReady() || !this.props.onOpen) {
      return;
    }
    this.props.onOpen();
  };
  _proto.handleClose = function handleClose() {
    if (!this.isReady() || !this.props.onClose) {
      return;
    }
    this.props.onClose();
  };
  _proto.handleChallengeExpired = function handleChallengeExpired() {
    if (!this.isReady() || !this.props.onChalExpired) {
      return;
    }
    this.props.onChalExpired();
  };
  _proto.execute = function execute(opts) {
    if (opts === void 0) {
      opts = null;
    }
    var captchaId = this.state.captchaId;
    if (!this.isReady()) {
      return;
    }
    if (opts && typeof opts !== "object") {
      opts = null;
    }
    return hcaptcha.execute(captchaId, opts);
  };
  _proto.setData = function setData(data) {
    var captchaId = this.state.captchaId;
    if (!this.isReady()) {
      return;
    }
    if (data && typeof data !== "object") {
      data = null;
    }
    hcaptcha.setData(captchaId, data);
  };
  _proto.getResponse = function getResponse() {
    return hcaptcha.getResponse(this.state.captchaId);
  };
  _proto.getRespKey = function getRespKey() {
    return hcaptcha.getRespKey(this.state.captchaId);
  };
  _proto.render = function render() {
    var elementId = this.state.elementId;
    return React15.createElement("div", {
      ref: this.ref,
      id: elementId
    });
  };
  return HCaptcha2;
}(React15.Component);
var esm_default = HCaptcha;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/IpConfigurationContext/IpConfigurationContext.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
var import_react76 = __toESM(require_react(), 1);
var IpConfigurationContext = (0, import_react76.createContext)(void 0);
var IpConfigurationContextProvider = ({ children }) => {
  const [ipConfiguration, setIpConfiguration] = (0, import_react76.useState)(null);
  const getIpConfiguration = (0, import_react76.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    if (ipConfiguration) {
      return ipConfiguration;
    }
    try {
      const response = yield fetch("http://ip-api.com/json");
      if (!response.ok) {
        return;
      }
      const data = yield response.json();
      if (data.status !== "success") {
        return;
      }
      const { country, countryCode } = data;
      const configuration = { country, countryCode };
      setIpConfiguration(configuration);
      return configuration;
    } catch (e2) {
      logger.warn("Error fetching IP configuration", e2);
      return;
    }
  }), [ipConfiguration, setIpConfiguration]);
  const removeIpConfiguration = () => {
    setIpConfiguration(null);
  };
  const value = (0, import_react76.useMemo)(() => ({
    getIpConfiguration,
    removeIpConfiguration
  }), [getIpConfiguration]);
  return (0, import_jsx_runtime38.jsx)(IpConfigurationContext.Provider, { value, children });
};
var useIpConfigurationContext = () => {
  const context = (0, import_react76.useContext)(IpConfigurationContext);
  if (context === void 0) {
    throw new Error("usage of useIpConfigurationContext not wrapped in `IpConfigurationContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/PasskeyContext/PasskeyContext.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var import_react128 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/embeddedWallets/embeddedWallets.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var import_react77 = __toESM(require_react(), 1);
var createTurnkeyEmbeddedWallet = (_a) => __awaiter(void 0, [_a], void 0, function* ({ attestation, challenge, environmentId, chains = [EmbeddedWalletChainEnum.Evm], passkeyAlias }) {
  const embeddedWallets = [
    {
      chains,
      embeddedWalletProvider: EmbeddedWalletProviderEnum.Turnkeyhd,
      isAuthenticatorAttached: false,
      passkeyAlias
    }
  ];
  if (attestation && challenge) {
    embeddedWallets[0] = Object.assign(Object.assign({}, embeddedWallets[0]), { embeddedWalletSpecificOpts: {
      attestation,
      challenge
    }, isAuthenticatorAttached: true });
  }
  try {
    const response = yield sdkApi().createEmbeddedWallets({
      createEmbeddedWalletsRequest: {
        embeddedWallets
      },
      environmentId
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    logger2.error("Error creating embedded wallet: ", e2);
    return void 0;
  }
});
var initEmbeddedWalletSession = (_b) => __awaiter(void 0, [_b], void 0, function* ({ authenticatorType, walletId, publicKey, environmentId }) {
  if (authenticatorType === "passkey") {
    return sdkApi().initPasskeyRecovery({
      environmentId,
      initPasskeyRecoveryRequest: {
        turnkeyRecoveryTargetPublicKey: publicKey,
        walletId
      }
    });
  }
  return sdkApi().initEmailAuth({
    environmentId,
    initEmailAuthRequest: {
      turnkeyEmailAuthTargetPublicKey: publicKey,
      walletId
    }
  });
});
var completePasskeyRecovery = (_c) => __awaiter(void 0, [_c], void 0, function* ({ walletId, attestation, challenge, environmentId }) {
  try {
    const response = yield sdkApi().completePasskeyRecovery({
      completePasskeyRecoveryRequest: {
        attestation,
        challenge,
        walletId
      },
      environmentId
    });
    return storeAuthTokenAndUser(response);
  } catch (e2) {
    logger2.error("Error completing passkey recovery: ", e2);
    return void 0;
  }
});
var updatePasskeyRecoveryEmail = (_d) => __awaiter(void 0, [_d], void 0, function* ({ environmentId, updateRecoveryEmailRequest }) {
  try {
    yield sdkApi().updateEmbeddedWalletRecoveryEmail({
      environmentId,
      updateRecoveryEmailRequest
    });
  } catch (e2) {
    logger2.error("Error while trying to update recovery email: ", e2);
    throw new DynamicError("Error updating recovery email");
  }
});
var getUserPasskeys = (_e2) => __awaiter(void 0, [_e2], void 0, function* ({ environmentId }) {
  try {
    const data = yield sdkApi().getUserPasskeys({
      environmentId
    });
    return data;
  } catch (e2) {
    logger2.error(e2);
    return {
      count: 0,
      passkeys: []
    };
  }
});
var updateUserPasskey = (_f) => __awaiter(void 0, [_f], void 0, function* ({ environmentId, id, alias }) {
  try {
    const data = yield sdkApi().updatePasskey({
      environmentId,
      updateUserPasskeyRequest: { alias, id }
    });
    return data;
  } catch (e2) {
    logger2.error(e2);
    return void 0;
  }
});
var exportEmbeddedWallet = (_g16) => __awaiter(void 0, [_g16], void 0, function* ({ environmentId, walletId, activityId }) {
  try {
    const data = yield sdkApi().embeddedWalletExport({
      activityId,
      environmentId,
      walletId
    });
    return data;
  } catch (e2) {
    logger2.error(e2);
    return { exportBundle: "" };
  }
});
var getWalletAuthToken = (_h) => __awaiter(void 0, [_h], void 0, function* ({ environmentId, type }) {
  try {
    const authToken = yield sdkApi().getAuthToken({
      environmentId,
      type
    });
    return authToken.token;
  } catch (e2) {
    return void 0;
  }
});
var getEmbeddedWalletBackup = (_j) => __awaiter(void 0, [_j], void 0, function* ({ environmentId }) {
  try {
    const response = yield sdkApi().getEmbeddedWalletBackups({
      environmentId
    });
    return response.secret;
  } catch (e2) {
    return void 0;
  }
});
var getEmbeddedWalletPasscode = (_k) => __awaiter(void 0, [_k], void 0, function* ({ environmentId }) {
  try {
    const response = yield sdkApi().getEmbeddedWalletPasscode({
      environmentId
    });
    return response.secret;
  } catch (e2) {
    return void 0;
  }
});
var claimEmbeddedWallet = (_l) => __awaiter(void 0, [_l], void 0, function* ({ environmentId, walletId }) {
  var _m, _o;
  try {
    const response = yield sdkApi().claimEmbeddedWallet({
      embeddedWalletPasscodeClaimRequest: {
        walletId
      },
      environmentId
    });
    storeAuthTokenAndUser(response);
    return response;
  } catch (e2) {
    logger2.error(e2);
    const data = yield (_m = e2 === null || e2 === void 0 ? void 0 : e2.json) === null || _m === void 0 ? void 0 : _m.call(e2);
    if (!((_o = data === null || data === void 0 ? void 0 : data.error) === null || _o === void 0 ? void 0 : _o.code)) {
      return { code: "unknown_error" };
    }
    throw e2;
  }
});
var registerSessionKey = (_p) => __awaiter(void 0, [_p], void 0, function* ({ environmentId, publicKey }) {
  try {
    yield sdkApi().registerSessionKey({
      environmentId,
      registerSessionKeyRequest: { publicKey }
    });
    return publicKey;
  } catch (e2) {
    logger2.error("Error registering session key", e2);
    return void 0;
  }
});
var getCreateEmbeddedWalletAccountRequest = (_q) => __awaiter(void 0, [_q], void 0, function* ({ environmentId, chain }) {
  try {
    const response = yield sdkApi().getCreateWalletAccountRequest({
      chain,
      environmentId
    });
    return response;
  } catch (e2) {
    logger2.error("Error fetching create embedded wallet account request: ", e2);
    throw new DynamicError("Error fetching create embedded wallet account request");
  }
});
var createEmbeddedWalletAccount = (_r) => __awaiter(void 0, [_r], void 0, function* ({ environmentId, createEmbeddedWalletAccountRequest }) {
  try {
    const response = yield sdkApi().createWalletAccount({
      createWalletAccountRequest: {
        turnkeySignedRequest: createEmbeddedWalletAccountRequest
      },
      environmentId
    });
    return response;
  } catch (e2) {
    logger2.error("Error creating embedded wallet account: ", e2);
    throw new DynamicError("Error creating embedded wallet account");
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/PasskeyContext/PasskeyContext.js
var import_react_dom27 = __toESM(require_react_dom(), 1);
var import_qrcode25 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/internalImplementation/utils/createPartialStoreSetter/createPartialStoreSetter.js
var createPartialStoreSetter = ({ get: get2, set: set2 }) => (key, value) => set2(Object.assign(Object.assign({}, get2()), { [key]: value }));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/sendBalances.js
var { getSendBalanceState, setSendBalanceState, useSendBalanceState, resetSendBalanceState } = createStoreState("sendBalanceState");
var setSendBalanceVariable = createPartialStoreSetter({
  get: getSendBalanceState,
  set: setSendBalanceState
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/TransactionConfirmationView/helpers/transactionErrorMessage.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var import_react78 = __toESM(require_react(), 1);
var magicRpcError = -32603;
var errorCodesMapping = {
  "-32002": "Insufficient funds for this transaction.",
  0: "The operation either timed out or was not allowed.",
  16: "Invalid Passkey signature. Select the passkey for this account and device.",
  3: "You reached the limit of passkeys for this account.",
  5: "Invalid Passkey signature.",
  INSUFFICIENT_FUNDS: "Insufficient funds for this transaction.",
  [magicRpcError.toString()]: "A network error has occurred. Please try again later"
};
var errorReasonsMapping = {
  "provided ENS name resolves to null": "Invalid address. Please check that the entered address is correct."
};
var getCode = (error) => {
  var _a;
  const err = error;
  return (err === null || err === void 0 ? void 0 : err.code) || ((_a = err === null || err === void 0 ? void 0 : err.cause) === null || _a === void 0 ? void 0 : _a.code);
};
var getMessage = (error) => {
  const err = error;
  return err === null || err === void 0 ? void 0 : err.message;
};
var hasReason = (error) => "reason" in error && error.reason !== void 0;
var isTransactionExecutionError = (error) => error !== void 0 && error !== null && typeof error === "object" && "walk" in error && typeof error["walk"] === "function";
var transactionErrorMessage = (err) => {
  let error = err;
  if (isTransactionExecutionError(err)) {
    error = err.walk();
  }
  logger2.debug("transaction error:", error);
  if (TransactionGasCannotBeSponsoredError.isInstance(error)) {
    return;
  }
  if (InsufficientFundsError.isInstance(error)) {
    return errorCodesMapping.INSUFFICIENT_FUNDS;
  }
  if (isMagicInsufficientFundsError(error)) {
    return errorCodesMapping.INSUFFICIENT_FUNDS;
  }
  const code = getCode(error);
  if (code !== void 0 && errorCodesMapping[code]) {
    return errorCodesMapping[code];
  }
  if (hasReason(error) && errorReasonsMapping[error.reason]) {
    return errorReasonsMapping[error.reason];
  }
  return "Something went wrong.";
};
var isMagicInsufficientFundsError = (error) => {
  const code = getCode(error);
  const message = getMessage(error);
  return code === magicRpcError && Boolean(message === null || message === void 0 ? void 0 : message.includes("insufficient funds for gas * price + value"));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var import_react127 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DotsMenu/DotsMenu.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var import_react125 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DotsMenuDropdown/DotsMenuDropdown.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var import_react124 = __toESM(require_react(), 1);
var import_react_dom25 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Badge/Badge.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
var Badge = ({ className = "", dot, text, copykey, variant = "secondary" }) => (0, import_jsx_runtime41.jsxs)("div", { className: classNames("badge__container", `badge__container__${variant}`, className), children: [dot && (0, import_jsx_runtime41.jsx)("span", { "data-testid": "badge__dot", className: "badge__dot" }), (0, import_jsx_runtime41.jsx)("span", { copykey, children: text })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var import_react79 = __toESM(require_react(), 1);
var DynamicBridgeWidgetContext = import_react79.default.createContext(void 0);
var useDynamicBridgeWidgetContext = () => {
  const context = (0, import_react79.useContext)(DynamicBridgeWidgetContext);
  if (context === void 0) {
    throw new Error("usage of useDynamicBridgeWidgetContext not wrapped in `DynamicBridgeWidgetContextProvider`.");
  }
  return context;
};
var initialView = "wallets";
var DynamicBridgeWidgetContextProvider = ({ children }) => {
  const widgetRef = (0, import_react79.useRef)(null);
  const inlineControlsRef = (0, import_react79.useRef)(null);
  const [bridgeWidgetView, setBridgeWidgetView] = (0, import_react79.useState)(initialView);
  const onDynamicBridgeWidgetClose = (0, import_react79.useCallback)(() => {
    setBridgeWidgetView(initialView);
  }, []);
  const goToProfileView = (0, import_react79.useCallback)(() => {
    setBridgeWidgetView("profile");
  }, []);
  const bridgeWidgetRootContextValue = {
    bridgeWidgetView,
    events: {
      onDynamicBridgeWidgetClose
    },
    goToProfileView,
    inlineControlsRef,
    setBridgeWidgetView,
    widgetRef
  };
  return (0, import_jsx_runtime42.jsx)(DynamicBridgeWidgetContext.Provider, { value: bridgeWidgetRootContextValue, children });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var import_react80 = __toESM(require_react(), 1);
var DynamicWidgetCard = (0, import_react80.forwardRef)(({ children }, ref) => (0, import_jsx_runtime43.jsx)("div", { ref, className: "dynamic-widget-card", children }));
DynamicWidgetCard.displayName = "DynamicWidgetCard";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/WidgetRegistry/WidgetRegistryContextProvider.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var import_react81 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/randomString/randomString.js
var randomString = (length) => {
  const CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
  let result = "";
  for (let i = length; i > 0; --i) {
    result += CHARS[Math.floor(Math.random() * CHARS.length)];
  }
  return result;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/WidgetRegistry/WidgetRegistryContextProvider.js
var widgetRegistryContext = (0, import_react81.createContext)(null);
var WidgetRegistryContextProvider = ({ children }) => {
  const [registry, setRegistry] = (0, import_react81.useState)({});
  const registerId = (0, import_react81.useCallback)((widgetId, widgetType) => {
    setRegistry((prevRegistry) => Object.assign(Object.assign({}, prevRegistry), { [widgetId]: {
      type: widgetType
    } }));
  }, [setRegistry]);
  const removeId = (0, import_react81.useCallback)((widgetId) => {
    setRegistry((prevRegistry) => {
      const newRegistry = Object.assign({}, prevRegistry);
      delete newRegistry[widgetId];
      return newRegistry;
    });
  }, [setRegistry]);
  const checkWidgetPresence = (0, import_react81.useCallback)((widgetType) => Object.values(registry).some((widget) => widget.type === widgetType), [registry]);
  return (0, import_jsx_runtime44.jsx)(widgetRegistryContext.Provider, { value: { checkWidgetPresence, registerId, removeId }, children });
};
var useWidgetRegistry = () => {
  const context = (0, import_react81.useContext)(widgetRegistryContext);
  if (context === null) {
    throw new Error("usage of useWidgetRegistry not wrapped in `WidgetRegistryContextProvider`.");
  }
  return context;
};
var useRegisterWidget = (widgetType, enabled = true) => {
  const idRef = (0, import_react81.useRef)(randomString(8));
  const { registerId, removeId } = useWidgetRegistry();
  (0, import_react81.useEffect)(() => {
    if (enabled === false) {
      return;
    }
    registerId(idRef.current, widgetType);
    return () => {
      removeId(idRef.current);
    };
  }, [widgetType, enabled, registerId, removeId]);
};
var useWidgetRegistryCheck = (widgetType) => {
  const { checkWidgetPresence } = useWidgetRegistry();
  return checkWidgetPresence(widgetType);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FundingContext/FundingContext.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
var import_react123 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/onrampProviders.js
var ONRAMP_PROVIDERS = ["banxa"];

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isOnrampProvider/isOnrampProvider.js
var isOnrampProvider = (provider) => ONRAMP_PROVIDERS.includes(provider.provider);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getWalletAdditionalAddressByType/getWalletAdditionalAddressByType.js
var getWalletAdditionalAddressByType = (type, wallet) => {
  var _a, _b;
  return (_b = (_a = wallet === null || wallet === void 0 ? void 0 : wallet.additionalAddresses) === null || _a === void 0 ? void 0 : _a.find((address) => address.type === type)) === null || _b === void 0 ? void 0 : _b.address;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/onramp/onramp.js
var getOnrampProviders = (_a) => __awaiter(void 0, [_a], void 0, function* ({ chain, environmentId, networkId, token, walletAddress }) {
  const { onramps } = yield sdkApi().getSupportedOnramps({
    chain,
    environmentId,
    networkId: networkId ? String(networkId) : void 0,
    token,
    walletAddress
  });
  if (!onramps || onramps.length === 0) {
    throw new Error("No onramps");
  }
  return onramps;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FundingContext/FundingContext.js
var import_react_dom24 = __toESM(require_react_dom(), 1);
var import_qrcode22 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SendBalanceContext/SendBalanceContext.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
var import_react122 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConfirmationModal/useConfirmationModal.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var import_react83 = __toESM(require_react(), 1);
var import_react_dom2 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useElementById/useElementById.js
var import_react82 = __toESM(require_react(), 1);
var useElementById = () => {
  const targetElement = (0, import_react82.useRef)(null);
  const createRootElement = (elementId = "dynamic-modal", parentElementId) => {
    if (typeof window === "undefined")
      return targetElement;
    const isElementCreated = window.document.getElementById(elementId);
    if (isElementCreated) {
      targetElement.current = isElementCreated;
      return targetElement;
    }
    const parentElement = parentElementId ? window.document.getElementById(parentElementId) : void 0;
    targetElement.current = window.document.createElement("div");
    targetElement.current.setAttribute("id", elementId);
    targetElement.current.setAttribute("class", elementId);
    targetElement.current.setAttribute("data-testid", elementId);
    targetElement.current.style.pointerEvents = "auto";
    if (parentElement) {
      parentElement.appendChild(targetElement.current);
    } else {
      window.document.body.appendChild(targetElement.current);
    }
    return targetElement;
  };
  return {
    createRootElement
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConfirmationModal/useConfirmationModal.js
var useConfirmationModal = ({ elementId }) => {
  const { createRootElement } = useElementById();
  const modalRootElementRef = createRootElement(elementId);
  const [node2, setNode] = (0, import_react83.useState)(null);
  const open = (0, import_react83.useCallback)((builder) => __awaiter(void 0, void 0, void 0, function* () {
    const promise = new Promise((resolve, reject) => {
      try {
        setNode(builder(resolve, reject));
      } catch (err) {
        reject(err);
      }
    });
    return promise.finally(() => {
      setNode(void 0);
    });
  }), [setNode]);
  return {
    modal: node2 ? (0, import_jsx_runtime45.jsx)("div", { children: (0, import_react_dom2.createPortal)(node2, modalRootElementRef.current) }) : void 0,
    open
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SendBalanceContext/SendBalanceContext.js
var import_react_dom23 = __toESM(require_react_dom(), 1);
var import_qrcode21 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/SendBalanceModal/SendBalanceModal.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var import_react121 = __toESM(require_react(), 1);
var import_react_dom22 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/VerticalDrawerTransition/VerticalDrawerTransition.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var import_react86 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
var import_qrcode = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/ConnectWithOtpContext.js
var import_react84 = __toESM(require_react(), 1);
var ConnectWithOtpContext = (0, import_react84.createContext)(void 0);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/constants.js
var mapEmailProviderToProviderEnum = {
  dynamic: ProviderEnum.Dynamic,
  magicLink: ProviderEnum.MagicLink
};
var allSupportedProviders = Object.values(mapEmailProviderToProviderEnum);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ReinitializeContext/ReinitializeContextProvider.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
var import_react85 = __toESM(require_react(), 1);
var reinitializeContext = (0, import_react85.createContext)(void 0);
var ReinitializeContextProvider = ({ children, onReinitialize }) => {
  const [key, setKey] = (0, import_react85.useState)();
  const onReinitializeCallbackRef = (0, import_react85.useRef)(onReinitialize);
  onReinitializeCallbackRef.current = onReinitialize;
  const reinitialize = (0, import_react85.useCallback)(() => {
    var _a;
    const newKey = randomString(8);
    (_a = onReinitializeCallbackRef.current) === null || _a === void 0 ? void 0 : _a.call(onReinitializeCallbackRef, newKey);
    setKey(newKey);
  }, []);
  return (0, import_jsx_runtime46.jsx)(reinitializeContext.Provider, { value: { key, reinitialize }, children: (0, import_react85.cloneElement)(children, { key }) });
};
var useReinitialize = () => {
  const context = (0, import_react85.useContext)(reinitializeContext);
  if (context === void 0) {
    throw new Error("usage of useReinitialize not wrapped in `ReinitializeContextProvider`.");
  }
  return context.reinitialize;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/tokenBalances.js
var { getTokenBalancesState, setTokenBalancesState, useTokenBalancesState } = createStoreState("tokenBalancesState");
var setTokenBalanceVariable = createPartialStoreSetter({
  get: getTokenBalancesState,
  set: setTokenBalancesState
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Transition/VerticalDrawerTransition/VerticalDrawerTransition.js
var VerticalDrawerTransition = (_a) => {
  var { style, children, className } = _a, props = __rest(_a, ["style", "children", "className"]);
  const containerRef = (0, import_react86.useRef)(null);
  const childRef = (0, import_react86.useRef)(null);
  const [childEntry] = useResizeObserver(childRef);
  const containerChildHeight = (0, import_react86.useMemo)(() => childEntry === null || childEntry === void 0 ? void 0 : childEntry.height, [childEntry]);
  const { mount, stage, currentDuration } = useTransition(Object.assign({ animateOnMount: false }, props));
  const maxHeight = (0, import_react86.useMemo)(() => {
    if (!mount || stage === "EXITING" || stage === "UNMOUNT") {
      return 0;
    }
    return containerChildHeight;
  }, [stage, containerChildHeight, mount]);
  return (0, import_jsx_runtime47.jsx)("div", { ref: containerRef, className: classNames(className, "vertical-drawer-animation"), style: Object.assign(Object.assign({}, style), { maxHeight, transitionDuration: `${currentDuration}ms` }), children: (0, import_jsx_runtime47.jsx)("div", { ref: childRef, children: mount && children }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Modal/Modal.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var import_react87 = __toESM(require_react(), 1);
var import_react_dom4 = __toESM(require_react_dom(), 1);
var import_qrcode2 = __toESM(require_browser(), 1);
var Modal = ({ children, className, isShown = true, transitionProps }) => (0, import_jsx_runtime48.jsx)("div", { className: classNames("modal", className), children: (0, import_jsx_runtime48.jsx)(SlideInUpTransition, Object.assign({}, transitionProps, { isShown, children: (0, import_jsx_runtime48.jsx)("div", { className: "modal__items", children }) })) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalCard/ModalCard.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var ModalCard = ({ children, borderRadius = "default", border = false, sharpBottomRadiusOnMobile = true, dataTestId = "modal-card" }) => (0, import_jsx_runtime49.jsx)("div", { "data-testid": dataTestId, className: classNames("modal-card", {
  "modal-card--sharp-mobile-bottom-radius": sharpBottomRadiusOnMobile,
  "modal-card--with-border": border
}, `modal-card--radius-${borderRadius}`), children });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Portal/Portal.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);
var import_react89 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKeyboardEventListener/useKeyboardEventListener.js
var import_react88 = __toESM(require_react(), 1);
var useKeyboardEventListener = ({ disabled, inputKey, onKeyPressed }) => {
  (0, import_react88.useEffect)(() => {
    const handleKeydown = (evt) => {
      if (disabled || evt.key !== inputKey)
        return;
      onKeyPressed(evt);
    };
    document.addEventListener("keydown", handleKeydown);
    return () => {
      document.removeEventListener("keydown", handleKeydown);
    };
  }, [disabled, inputKey, onKeyPressed]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Portal/Portal.js
var import_qrcode3 = __toESM(require_browser(), 1);
var ModalComponent = ({ children, handleClose, withBackdrop = true, zIndex, whiteList }) => {
  const { view } = useViewContext();
  const shouldCloseOnBackdropClick = (view === null || view === void 0 ? void 0 : view.type) && view.type !== "collect-user-data" && view.type !== "login-with-email-verification" && view.type !== "login-with-sms-verification" && view.type !== "verify-sms" && view.type !== "verify-email" && view.type !== "mfa-verification" && view.type !== "mfa-display-backup-codes";
  const onBackdropClick = (e2) => {
    if (!shouldCloseOnBackdropClick)
      return;
    e2.stopPropagation();
    handleClose(e2);
  };
  useKeyboardEventListener({
    disabled: !shouldCloseOnBackdropClick,
    inputKey: "Escape",
    onKeyPressed: handleClose
  });
  return (0, import_jsx_runtime50.jsxs)(es2015_default2, { className: "portal__container", whiteList, children: [withBackdrop && (0, import_jsx_runtime50.jsx)("div", {
    "data-testid": "portal-backdrop",
    role: "button",
    onClick: (e2) => {
      onBackdropClick(e2);
    },
    tabIndex: 0,
    "aria-label": "Close modal",
    // z-index - 2 to ensure that the backdrop is always behind the content
    style: { zIndex: zIndex ? zIndex - 2 : void 0 },
    className: "portal__backdrop"
  }), (0, import_jsx_runtime50.jsx)("div", { style: { zIndex }, children })] });
};
var Portal = ({ children, isShown, handleClose, withBackdrop, zIndex, transitionEvents, elementId = "dynamic-modal" }) => {
  const { createRootElement } = useElementById();
  const modalRootElementRef = createRootElement(elementId);
  return (0, import_react_dom5.createPortal)((0, import_jsx_runtime50.jsx)(ShadowDOM, { zIndex, dataTestId: "dynamic-modal-shadow", children: (0, import_jsx_runtime50.jsx)(OpacityTransition, Object.assign({ isShown }, transitionEvents, { children: (0, import_jsx_runtime50.jsx)(ModalComponent, { handleClose, withBackdrop, whiteList: (node2) => modalRootElementRef.current.contains(node2), children }) })) }), modalRootElementRef.current);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SendBalanceView/SendBalanceView.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var import_react120 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ChainIcon/ChainIcon.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var import_react90 = __toESM(require_react(), 1);
var ChainIcon = ({ chain, chainName }) => {
  const ChainIconComponent = getChainIcon(chainName);
  return (0, import_jsx_runtime51.jsx)(Icon, { size: "small", children: (chain === null || chain === void 0 ? void 0 : chain.icon) ? (0, import_jsx_runtime51.jsx)("img", { src: chain.icon, alt: `${chain.name} icon` }) : (0, import_jsx_runtime51.jsx)(ChainIconComponent, {}) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/SendBalancePageLayout.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var import_react101 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/arrow-left.js
var React16 = __toESM(require_react(), 1);
var _path2;
var _excluded2 = ["title", "titleId"];
function _extends9() {
  _extends9 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends9.apply(this, arguments);
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose5(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgArrowLeft = function SvgArrowLeft2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties2(_ref2, _excluded2);
  return React16.createElement("svg", _extends9({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React16.createElement("title", {
    id: titleId
  }, title2) : null, _path2 || (_path2 = React16.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.707 4.293a1 1 0 0 1 0 1.414L5.414 11H21a1 1 0 1 1 0 2H5.414l5.293 5.293a1 1 0 0 1-1.414 1.414l-7-7a1 1 0 0 1 0-1.414l7-7a1 1 0 0 1 1.414 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/close.js
var React17 = __toESM(require_react(), 1);
var _path3;
var _excluded3 = ["title", "titleId"];
function _extends10() {
  _extends10 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends10.apply(this, arguments);
}
function _objectWithoutProperties3(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose6(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgClose = function SvgClose2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties3(_ref2, _excluded3);
  return React17.createElement("svg", _extends10({
    width: 20,
    height: 20,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React17.createElement("title", {
    id: titleId
  }, title2) : null, _path3 || (_path3 = React17.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.41 4.41a.833.833 0 0 1 1.18 0L10 8.822l4.41-4.41a.833.833 0 1 1 1.18 1.178L11.178 10l4.41 4.41a.833.833 0 1 1-1.178 1.18L10 11.177 5.588 15.59a.833.833 0 1 1-1.178-1.178L8.82 10l-4.41-4.41a.833.833 0 0 1 0-1.18Z",
    fill: "currentcolor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/networksAndChains/networksAndChains.js
var eth = {
  logoURI: "https://app.dynamic.xyz/assets/networks/eth.svg",
  name: "Ethereum",
  symbol: "ETH"
};
var networkMap = {
  avalanche: {
    logoURI: "https://app.dynamic.xyz/assets/networks/avax.svg",
    name: "Avalanche",
    symbol: "AVAX"
  },
  polygon: {
    logoURI: "https://app.dynamic.xyz/assets/networks/polygon.svg",
    name: "Polygon",
    symbol: "MATIC"
  },
  solana: {
    logoURI: "https://app.dynamic.xyz/assets/networks/solana.svg",
    name: "Solana",
    symbol: "SOL"
  }
};
var getNativeTokenInfo = (blockchain = "eth") => networkMap[blockchain] || eth;
var allowedChains = {
  "arbitrum one": "arbitrum",
  avalanche: "avalanche",
  base: "base",
  eth: "eth",
  "op mainnet": "optimism",
  optimism: "optimism",
  polygon: "polygon",
  sepolia: "sepolia",
  solana: "solana"
};
var getEvmChainName = (chainId) => {
  const map2 = {
    1: "Ethereum",
    10: "OP Mainnet",
    11155111: "Sepolia",
    137: "Polygon",
    42161: "Arbitrum One",
    43114: "Avalanche",
    8453: "Base"
  };
  return map2[chainId] || "Unknown";
};
var getIconUrl = (chainName) => {
  const chain = allowedChains[chainName === null || chainName === void 0 ? void 0 : chainName.toLowerCase()] || "eth";
  return `https://app.dynamic.xyz/assets/networks/${chain}.svg`;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/SendBalancePageLayout.js
var import_react_dom10 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalHeader/ModalHeader.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var import_react91 = __toESM(require_react(), 1);
var ModalHeader = ({ alignContent, children, leading, displayLeading = true, trailing, displayTrailing = true, style, displayBorder }) => {
  const hasLeading = displayLeading && leading && import_react91.Children.count(leading);
  const hasTrailing = displayTrailing && trailing && import_react91.Children.count(trailing);
  return (0, import_jsx_runtime52.jsxs)("div", { className: classNames("modal-header", {
    "modal-header--align-content-bottom": alignContent === "bottom",
    "modal-header--border": displayBorder,
    "modal-header--empty": !hasLeading && !children && !hasTrailing
  }), style, children: [displayLeading && (0, import_jsx_runtime52.jsx)("div", { className: classNames("modal-header__leading", {
    "modal-header__leading--empty": !hasLeading
  }), children: leading }), children, displayTrailing && (0, import_jsx_runtime52.jsx)("div", { className: classNames("modal-header__trailing", {
    "modal-header__trailing--empty": !hasTrailing
  }), children: trailing })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PoweredByDynamic/PoweredByDynamic.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var import_react92 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/assets/dynamic-logo.js
var React18 = __toESM(require_react(), 1);
var _g;
var _defs;
var _excluded4 = ["title", "titleId"];
function _extends11() {
  _extends11 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends11.apply(this, arguments);
}
function _objectWithoutProperties4(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose7(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgDynamicLogo = function SvgDynamicLogo2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties4(_ref2, _excluded4);
  return React18.createElement("svg", _extends11({
    fill: "none",
    viewBox: "0 0 114 21",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React18.createElement("title", {
    id: titleId
  }, title2) : null, _g || (_g = React18.createElement("g", {
    clipPath: "url(#dynamic-logo_svg__a)",
    fill: "currentColor"
  }, React18.createElement("path", {
    d: "M10.053 2.002c-.43.4-.85.793-1.273 1.184-1.959 1.818-3.918 3.638-5.879 5.453-.45.417-.915.817-1.48 1.061C.75 9.99.365 9.81.15 9.085-.153 8.072.009 7.128.59 6.258 1.087 5.517 1.71 4.9 2.354 4.3A178.857 178.857 0 0 1 5.45 1.47c.457-.408.957-.78 1.567-.905 1.828-.368 2.994 1.384 3.038 1.436l-.002.001zM1.259 11.254c1.112-.32 1.946-1.026 2.758-1.768 2.59-2.363 5.176-4.728 7.777-7.078A16.823 16.823 0 0 1 13.609.96C14.42.408 15.303.33 16.173.855c.314.189.623.409.878.672a106.565 106.565 0 0 1 5.28 5.866c.298.358.542.774.744 1.196.375.785.279 1.561-.178 2.293-.409.655-.956 1.192-1.52 1.702a699.92 699.92 0 0 1-6.653 5.96c-.6.53-1.26 1.004-1.94 1.422-1.282.791-2.568.693-3.737-.244A16.245 16.245 0 0 1 7.14 17.92c-1.883-2.087-3.73-4.203-5.592-6.31-.094-.106-.18-.22-.29-.358v.002zM39.574.915h2.808V16.14h-2.808v-1.284c-.827 1.06-2.003 1.587-3.526 1.587-1.522 0-2.717-.555-3.755-1.664s-1.556-2.469-1.556-4.078c0-1.609.518-2.968 1.556-4.077s2.288-1.665 3.755-1.665 2.7.53 3.526 1.587V.913v.002zm-5.17 11.996c.573.572 1.294.859 2.166.859s1.589-.287 2.155-.86c.566-.572.849-1.309.849-2.207 0-.898-.283-1.635-.85-2.207-.565-.572-1.283-.859-2.154-.859s-1.593.287-2.166.86c-.574.571-.86 1.308-.86 2.206 0 .898.286 1.635.86 2.208zM51.766 5.264h3.004l-3.968 10.894c-.566 1.554-1.315 2.682-2.251 3.385-.934.704-2.098 1.02-3.489.947v-2.61c.755.015 1.352-.144 1.796-.477.442-.334.796-.87 1.057-1.61L43.453 5.268h3.069l2.837 7.308 2.409-7.308-.002-.002zM61.908 4.959c1.19 0 2.174.398 2.949 1.196.777.798 1.163 1.9 1.163 3.305v6.678h-2.808v-6.33c0-.723-.196-1.279-.588-1.664-.392-.383-.914-.576-1.567-.576-.725 0-1.306.224-1.74.674s-.654 1.124-.654 2.022v5.872h-2.808V5.261h2.808v1.218c.683-1.014 1.763-1.522 3.243-1.522l.002.002zM76.243 5.264h2.808V16.14h-2.808v-1.283c-.842 1.06-2.024 1.587-3.548 1.587s-2.695-.555-3.733-1.665-1.556-2.468-1.556-4.077c0-1.61.518-2.968 1.556-4.078C70 5.514 71.242 4.96 72.695 4.96c1.524 0 2.706.53 3.548 1.587V5.262v.002zm-5.182 7.646c.566.572 1.284.86 2.156.86s1.592-.288 2.166-.86c.573-.572.86-1.309.86-2.207 0-.898-.287-1.635-.86-2.207-.574-.572-1.295-.86-2.166-.86s-1.59.288-2.156.86c-.566.572-.849 1.309-.849 2.207 0 .898.283 1.635.85 2.207zM92.864 4.959c1.249 0 2.246.406 2.993 1.218.748.813 1.121 1.9 1.121 3.263v6.7H94.17V9.637c0-.652-.16-1.16-.48-1.523s-.769-.544-1.35-.544c-.638 0-1.135.211-1.49.631-.356.42-.533 1.03-.533 1.828v6.113h-2.808V9.638c0-.651-.16-1.159-.48-1.522-.32-.363-.77-.544-1.35-.544-.623 0-1.121.21-1.491.631-.37.42-.555 1.03-.555 1.828v6.113h-2.808V5.269h2.808v1.153c.653-.972 1.661-1.457 3.027-1.457 1.365 0 2.321.522 2.96 1.566.724-1.044 1.807-1.566 3.242-1.566l.002-.006zM100.15 3.959c-.464 0-.868-.17-1.208-.511a1.653 1.653 0 0 1-.512-1.207c0-.465.17-.87.512-1.219.34-.348.744-.522 1.208-.522.464 0 .888.174 1.23.522.341.348.511.754.511 1.219 0 .464-.17.866-.511 1.207-.34.34-.751.511-1.23.511zM98.757 16.14V5.265h2.808V16.14h-2.808zM108.69 16.443c-1.641 0-3.008-.55-4.103-1.654-1.095-1.101-1.643-2.464-1.643-4.088s.548-2.987 1.643-4.089 2.464-1.653 4.103-1.653c1.06 0 2.024.253 2.895.76.871.508 1.532 1.19 1.981 2.045l-2.416 1.413a2.464 2.464 0 0 0-.989-1.067 2.878 2.878 0 0 0-1.491-.39c-.842 0-1.539.28-2.091.837-.551.559-.827 1.272-.827 2.142 0 .87.276 1.563.827 2.12.552.56 1.249.837 2.091.837.566 0 1.069-.126 1.513-.381.442-.254.773-.606.99-1.056l2.438 1.393a5.463 5.463 0 0 1-2.024 2.055c-.871.515-1.835.772-2.895.772l-.002.004z"
  }))), _defs || (_defs = React18.createElement("defs", null, React18.createElement("clipPath", {
    id: "dynamic-logo_svg__a"
  }, React18.createElement("path", {
    transform: "translate(0 .5)",
    fill: "#fff",
    d: "M0 0h113.61v20H0z"
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PoweredByDynamic/PoweredByDynamic.js
var import_react_dom6 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetFooter/DynamicWidgetFooter.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var DynamicWidgetFooter = ({ children }) => (0, import_jsx_runtime53.jsx)("div", { className: "dynamic-widget-footer", "data-testid": "dynamic-widget-footer", children });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PoweredByDynamic/PoweredByDynamic.js
var import_qrcode4 = __toESM(require_browser(), 1);
var URL2 = "https://dynamic.xyz";
var alignClassNames = {
  center: "powered-by-dynamic--center",
  right: "powered-by-dynamic--right"
};
var PoweredByDynamic = ({ align = "center", classNameLogo, classNameRoot, classNameText, asFooter }) => {
  var _a;
  const { projectSettings } = useInternalDynamicContext();
  if (((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.displayDynamicMessaging) === false) {
    return null;
  }
  const content = (0, import_jsx_runtime54.jsxs)("a", { target: "_blank", href: URL2, className: classNames("powered-by-dynamic", alignClassNames[align], classNameRoot), rel: "noreferrer", children: [(0, import_jsx_runtime54.jsx)(Typography, { as: "span", color: "tertiary", weight: "regular", variant: "body_mini", className: classNames("powered-by-dynamic__text", classNameText), children: "Powered by" }), (0, import_jsx_runtime54.jsx)(SvgDynamicLogo, { className: classNames("powered-by-dynamic__logo", classNameLogo) })] });
  if (asFooter)
    return (0, import_jsx_runtime54.jsx)(DynamicWidgetFooter, { children: content });
  return content;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/SendBalancePageLayout.js
var import_qrcode8 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalanceForm/SendBalanceForm.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var import_react100 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getOrdinalNumber/getOrdinalNumber.js
var getOrdinalNumber = (number2) => {
  if (number2 < 1) {
    return "";
  }
  if (number2 % 10 === 1 && number2 % 100 !== 11) {
    return `${number2}st`;
  } else if (number2 % 10 === 2 && number2 % 100 !== 12) {
    return `${number2}nd`;
  } else if (number2 % 10 === 3 && number2 % 100 !== 13) {
    return `${number2}rd`;
  }
  return `${number2}th`;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalanceForm/SendBalanceForm.js
var import_react_dom9 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TypographyButton/TypographyButton.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Button/Button.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var import_react94 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Spinner/spinner.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var import_react93 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/spinner.js
var React19 = __toESM(require_react(), 1);
var _circle;
var _g2;
var _excluded5 = ["title", "titleId"];
function _extends12() {
  _extends12 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends12.apply(this, arguments);
}
function _objectWithoutProperties5(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose8(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose8(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSpinner = function SvgSpinner2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties5(_ref2, _excluded5);
  return React19.createElement("svg", _extends12({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React19.createElement("title", {
    id: titleId
  }, title2) : null, React19.createElement("circle", {
    cx: 12,
    cy: 12,
    r: 11,
    stroke: "currentColor",
    strokeWidth: 2,
    style: {
      opacity: 0.1
    }
  }), React19.createElement("mask", {
    id: "spinner_svg__a",
    style: {
      maskType: "alpha"
    },
    maskUnits: "userSpaceOnUse",
    x: 0,
    y: 0,
    width: 24,
    height: 24
  }, _circle || (_circle = React19.createElement("circle", {
    cx: 12,
    cy: 12,
    r: 11,
    stroke: "currentColor",
    strokeWidth: 2
  }))), _g2 || (_g2 = React19.createElement("g", {
    mask: "url(#spinner_svg__a)"
  }, React19.createElement("path", {
    fill: "currentColor",
    d: "M12-16.5h27v27H12z"
  }))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Spinner/spinner.js
var Spinner = ({ className = "" }) => (0, import_jsx_runtime55.jsx)(SvgSpinner, { className: classNames("spinner", className) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Button/Button.js
var Button = ({ buttonClassName = "", buttonPadding = "medium", buttonVariant = "primary", children, feedback, expanded, dataTestId, disabled = false, showInternalLoading = true, loading = false, onClick, type, startSlot, endSlot }) => {
  const [internalButtonLoading, setInternalButtonLoading] = (0, import_react94.useState)(false);
  const [isFeedbackVisible, setIsFeedbackVisible] = (0, import_react94.useState)(false);
  const buttonVariantClassNameMap = {
    "brand-primary": "button--brand-primary",
    primary: "button--primary",
    secondary: "button--secondary",
    tertiary: "button--tertiary"
  };
  const buttonPaddingClassNameMap = {
    default: "button--padding-default",
    large: "button--padding-large",
    "login-screen-height": "button--padding-login-screen-height",
    medium: "button--padding-medium",
    none: "button--padding-none",
    small: "button--padding-small"
  };
  const buttonEffectiveClassName = classNames("button", {
    "button--expanded": Boolean(expanded),
    "button--loading": Boolean(loading)
  }, buttonPadding ? buttonPaddingClassNameMap[buttonPadding] : "", buttonVariant ? buttonVariantClassNameMap[buttonVariant] : "", buttonClassName);
  const handleClick = (e2) => __awaiter(void 0, void 0, void 0, function* () {
    if (onClick) {
      const onClickResult = onClick(e2);
      if (onClickResult instanceof Promise) {
        if (showInternalLoading) {
          setInternalButtonLoading(true);
        }
        try {
          yield onClickResult;
        } finally {
          setInternalButtonLoading(false);
        }
      }
    }
    if (feedback) {
      setIsFeedbackVisible(true);
      setTimeout(() => {
        setIsFeedbackVisible(false);
      }, 2e3);
    }
  });
  const buttonContent = (0, import_jsx_runtime56.jsxs)(import_jsx_runtime56.Fragment, { children: [startSlot && (0, import_jsx_runtime56.jsx)("div", { className: "button__start-slot", children: startSlot }), (feedback || children) && (isFeedbackVisible && feedback ? feedback : children), endSlot && (0, import_jsx_runtime56.jsx)("div", { className: "button__end-slot", children: endSlot })] });
  return (0, import_jsx_runtime56.jsxs)("button", { type, onClick: handleClick, className: buttonEffectiveClassName, disabled: disabled || internalButtonLoading || loading, "data-testid": dataTestId, children: [(internalButtonLoading || loading) && (0, import_jsx_runtime56.jsx)("div", { className: "button__spinner-container", "data-testid": "button__spinner", children: (0, import_jsx_runtime56.jsx)(Spinner, { className: "button__spinner" }) }), buttonContent] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TypographyButton/TypographyButton.js
var TypographyButton = (_a) => {
  var _b;
  var { children, typographyProps = {
    variant: "button_primary"
  }, copykey } = _a, props = __rest(_a, ["children", "typographyProps", "copykey"]);
  return (0, import_jsx_runtime57.jsx)(Button, Object.assign({}, props, { children: (0, import_jsx_runtime57.jsx)(Typography, Object.assign({ variant: "button_primary", as: "span" }, typographyProps, { color: (_b = typographyProps.color) !== null && _b !== void 0 ? _b : "primary", copykey, children })) }));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/FormFieldLabel/FormFieldLabel.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var FormFieldLabel = ({ children, htmlFor, className, divider }) => (0, import_jsx_runtime58.jsx)("label", { className: classNames("form-field-label", { "form-field-label__with-divider": divider }, className), htmlFor, children });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalanceForm/SendBalanceForm.js
var import_qrcode7 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/roundToNthDecimal/roundToNthDecimal.js
var roundToNthDecimal = (value, decimal) => {
  if (!value)
    return;
  const factor = Math.pow(10, decimal);
  const rounded = Math.round(value * factor) / factor;
  const zeros = "0".repeat(decimal - 1);
  return rounded === 0 ? `<0.${zeros}1` : rounded;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/components/TokensBalanceDropdown/TokensBalanceDropdown.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var import_react97 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/stroke.js
var React20 = __toESM(require_react(), 1);
var _path4;
var _excluded6 = ["title", "titleId"];
function _extends13() {
  _extends13 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends13.apply(this, arguments);
}
function _objectWithoutProperties6(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose9(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose9(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgStroke = function SvgStroke2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties6(_ref2, _excluded6);
  return React20.createElement("svg", _extends13({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React20.createElement("title", {
    id: titleId
  }, title2) : null, _path4 || (_path4 = React20.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M8.293 19.707a1 1 0 0 1 0-1.414L14.586 12 8.293 5.707a1 1 0 0 1 1.414-1.414l7 7a1 1 0 0 1 0 1.414l-7 7a1 1 0 0 1-1.414 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/components/TokensBalanceDropdown/TokensBalanceDropdown.js
var import_react_dom8 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Skeleton/Skeleton.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var Skeleton = ({ count = 1, className, style }) => {
  const elements = [];
  for (let i = 0; i < count; i++) {
    elements.push((0, import_jsx_runtime59.jsx)("span", { className: `skeleton ${className} `, style, children: "‌" }));
  }
  return (0, import_jsx_runtime59.jsx)("span", { "data-testid": "loading-skeleton-container", children: elements.map((element, id) => (0, import_jsx_runtime59.jsx)("span", { "data-testid": "loading-skeleton", children: element }, `skeleton-${id}`)) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/erc20/abi.js
var erc20Abi = [
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_spender",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_from",
        type: "address"
      },
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [
      {
        name: "",
        type: "uint8"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "balance",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [
      {
        name: "",
        type: "string"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address"
      },
      {
        name: "_spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    payable: true,
    stateMutability: "payable",
    type: "fallback"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  }
];

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/MenuList/MenuList.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OverlayCard/OverlayCard.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var import_react95 = __toESM(require_react(), 1);
var import_react_dom7 = __toESM(require_react_dom(), 1);
var import_qrcode5 = __toESM(require_browser(), 1);
var OverlayCard = ({ isOpen, children, onClickOverlay, style, className }) => {
  const target = useOverlayCardTarget(isOpen);
  usePreventPageScroll(isOpen && !target);
  const contentRef = (0, import_react95.useRef)(null);
  useOnClickOutside(contentRef, () => onClickOverlay === null || onClickOverlay === void 0 ? void 0 : onClickOverlay());
  const content = (0, import_jsx_runtime60.jsxs)("div", { className: classNames("overlay-card", {
    "overlay-card--disabled": !isOpen
  }), style: { position: target === void 0 ? "fixed" : "absolute" }, children: [(0, import_jsx_runtime60.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime60.jsx)(OpacityTransition, { className: "overlay-card__animation" }), children: isOpen && (0, import_jsx_runtime60.jsx)("div", { onClick: onClickOverlay, className: "overlay-card__overlay" }) }), (0, import_jsx_runtime60.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime60.jsx)(SlideInUpTransition, { className: "overlay-card__animation overlay-card__animation--limit-height" }), children: isOpen && (0, import_jsx_runtime60.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime60.jsx)(OpacityTransition, { className: "overlay-card__animation" }), children: isOpen && (0, import_jsx_runtime60.jsx)("div", { ref: contentRef, className: classNames(className, "overlay-card__content"), style, children }) }) })] });
  if (target)
    return (0, import_react_dom7.createPortal)(content, target);
  return (0, import_react_dom7.createPortal)((0, import_jsx_runtime60.jsx)(ShadowDOM, { children: content }), document.body);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MenuList/MenuList/MenuList.js
var import_react96 = __toESM(require_react(), 1);
var MenuList = ({ isOpen, onClickClose, popperProps, dropdownClassName, dropdownStyle, overlayCardClassName, overlayCardStyle, className, style, children, mobileTitle }) => {
  const closeButton = (0, import_jsx_runtime61.jsx)(IconButton, { onClick: onClickClose, type: "button", children: (0, import_jsx_runtime61.jsx)(SvgClose, {}) });
  if (isMobile())
    return (0, import_jsx_runtime61.jsxs)(OverlayCard, { isOpen, onClickOverlay: onClickClose, className: classNames(overlayCardClassName, className), style: Object.assign(Object.assign({}, style), overlayCardStyle), children: [(0, import_jsx_runtime61.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime61.jsx)(Typography, { as: "h1", variant: "title", color: "primary", children: mobileTitle }) }), (0, import_jsx_runtime61.jsx)("div", { className: "menu-list__overlay-card__container", children })] });
  return (0, import_jsx_runtime61.jsx)(Dropdown, Object.assign({ isOpen, onClickOutside: onClickClose, onScroll: onClickClose, className: classNames(dropdownClassName, className), style: Object.assign(Object.assign({}, style), dropdownStyle) }, popperProps, { children }));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/components/TokensBalanceDropdown/TokensBalanceDropdown.js
var import_qrcode6 = __toESM(require_browser(), 1);
var TokensBalanceDropdown = ({ tokenBalances, currentToken, setCurrentToken, isLoading, setFieldValue, setErrors }) => {
  const { t: t2 } = useTranslation();
  const [isDropdownOpen, setIsDropdownOpen] = (0, import_react97.useState)(false);
  const filteredTokenBalances = (tokenBalances === null || tokenBalances === void 0 ? void 0 : tokenBalances.filter((token) => token.name)) || [];
  const { primaryWallet } = useInternalDynamicContext();
  const anchorRef = (0, import_react97.useRef)(null);
  const fetchTokenData = (selectedToken) => __awaiter(void 0, void 0, void 0, function* () {
    if (!primaryWallet || !("getPublicClient" in primaryWallet) || typeof primaryWallet.getPublicClient !== "function") {
      return;
    }
    const publicClient = yield primaryWallet.getPublicClient();
    if (!publicClient)
      return;
    const erc20Contract = {
      abi: erc20Abi,
      address: selectedToken.address
    };
    const results = yield publicClient.multicall({
      contracts: [
        Object.assign(Object.assign({}, erc20Contract), { args: [primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address], functionName: "balanceOf" }),
        Object.assign(Object.assign({}, erc20Contract), { functionName: "decimals" })
      ]
    });
    const [balance, decimals] = results.map((v) => Number(v.result));
    if (balance && decimals) {
      selectedToken.balance = balance / Math.pow(10, decimals);
      selectedToken.rawBalance = balance;
      if (tokenBalances) {
        const index = tokenBalances.findIndex((t3) => t3.name === selectedToken.name);
        tokenBalances[index] = selectedToken;
      }
      selectedToken.decimals = decimals;
    }
  });
  const handleTokenClick = (selectedTokenName) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const selectedToken = (_a = tokenBalances === null || tokenBalances === void 0 ? void 0 : tokenBalances.find((t3) => t3.name === selectedTokenName)) !== null && _a !== void 0 ? _a : void 0;
    if ((selectedToken === null || selectedToken === void 0 ? void 0 : selectedToken.address) && (selectedToken === null || selectedToken === void 0 ? void 0 : selectedToken.address.startsWith("0x"))) {
      fetchTokenData(selectedToken);
    }
    if (selectedToken) {
      if (tokenBalances && ((_b = tokenBalances[0]) === null || _b === void 0 ? void 0 : _b.price))
        setSendBalanceVariable("nativePrice", tokenBalances[0].price);
      setCurrentToken(selectedToken);
      setFieldValue("amount", "");
      setSendBalanceVariable("amount", 0);
      setErrors({});
    }
    setIsDropdownOpen(!isDropdownOpen);
  });
  if (isLoading) {
    return (0, import_jsx_runtime62.jsx)(Skeleton, {});
  }
  const tokenLogo = (token, size) => (token === null || token === void 0 ? void 0 : token.logoURI) ? (0, import_jsx_runtime62.jsx)("img", { src: token.logoURI, alt: token === null || token === void 0 ? void 0 : token.name, width: size, height: size }) : (0, import_jsx_runtime62.jsx)("div", { className: "token-balance-item__skeleton-icon", "data-testid": "token-balance-item__skeleton-icon" });
  return (0, import_jsx_runtime62.jsxs)("div", { className: "tokens-balance-dropdown", ref: anchorRef, onClick: () => setIsDropdownOpen(!isDropdownOpen), "data-testid": "tokens-balance-dropdown", children: [!isLoading && (0, import_jsx_runtime62.jsxs)("div", { className: "tokens-balance-dropdown__selected", children: [tokenLogo(currentToken, "20"), (0, import_jsx_runtime62.jsx)(Typography, { variant: "body_normal", color: "primary", children: currentToken === null || currentToken === void 0 ? void 0 : currentToken.name }), (0, import_jsx_runtime62.jsx)(Icon, { color: "text-primary", size: "small", className: classNames("evm-network-control__arrow-icon", {
    "evm-network-control__arrow-icon--active": isDropdownOpen
  }), children: (0, import_jsx_runtime62.jsx)(SvgStroke, {}) })] }), (0, import_jsx_runtime62.jsx)(MenuList, { className: "tokens-balance-dropdown__menu_list", isOpen: isDropdownOpen, popperProps: {
    anchorOrigin: "bottom-left",
    anchorRef
  }, mobileTitle: "Select token", children: filteredTokenBalances.length > 0 ? filteredTokenBalances.map((t3) => (0, import_jsx_runtime62.jsxs)("button", { className: "tokens-balance-dropdown__menu_list_item", onClick: () => handleTokenClick(t3.name), children: [(0, import_jsx_runtime62.jsxs)("div", { className: "tokens-balance-dropdown__menu_list_item__name", children: [tokenLogo(t3, "16"), (0, import_jsx_runtime62.jsx)(Typography, { variant: "body_small", color: "primary", children: t3.name })] }), (0, import_jsx_runtime62.jsxs)("div", { className: "tokens-balance-dropdown__menu_list_item__balance", children: [(0, import_jsx_runtime62.jsx)(Typography, { variant: "body_small", color: "secondary", children: t3.symbol }), (0, import_jsx_runtime62.jsx)(Typography, { variant: "body_small", color: "primary", children: roundToNthDecimal(t3.balance, 6) })] })] }, t3.address)) : (0, import_jsx_runtime62.jsx)("div", { className: "token-balance-list__empty", children: (0, import_jsx_runtime62.jsx)(Typography, { variant: "body_small", color: "secondary", children: t2("dyn_wallet_information.multi_asset.empty_state") }) }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionConfirmationPageLayout/utils.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var import_react99 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useEffectOnce/useEffectOnce.js
var import_react98 = __toESM(require_react(), 1);
var useEffectOnce = (effect) => {
  (0, import_react98.useEffect)(effect, []);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionConfirmationPageLayout/utils.js
var useCurrencySymbol = (currentToken, currency) => (currentToken === null || currentToken === void 0 ? void 0 : currentToken.symbol) || currency;
var getValueRounded = (isNativeToken, transaction) => {
  let value;
  if (isNativeToken)
    value = transaction.value ? transaction.format(transaction.value) : "0";
  else {
    value = (transaction === null || transaction === void 0 ? void 0 : transaction.nonNativeValue) && (transaction === null || transaction === void 0 ? void 0 : transaction.formatNonNativeToken) ? transaction.formatNonNativeToken(transaction.nonNativeValue, transaction.nonNativeDecimal || 18) : "0";
  }
  return roundToNthDecimal(Number(value), 6);
};
var calculateFiatPrice = (amount, price, decimals) => {
  if (amount === void 0 || isNaN(amount) || !decimals || !price)
    return 0;
  const SCALE = BigInt(Math.pow(10, decimals));
  const paddedPrice = Number(price.toFixed(decimals));
  try {
    const scaledTokenAmount = BigInt(amount * Number(SCALE));
    const fiatPriceBigInt = BigInt(paddedPrice * Number(SCALE));
    const product = scaledTokenAmount * fiatPriceBigInt;
    return Number(product / SCALE) / Number(SCALE);
  } catch (e2) {
    return void 0;
  }
};
var getDisplayFiatPrice = (amountValue, currentToken) => {
  if (!(currentToken === null || currentToken === void 0 ? void 0 : currentToken.price))
    return "--";
  const fiatValue = calculateFiatPrice(amountValue, currentToken.price, currentToken.decimals);
  if (fiatValue === void 0) {
    return "--";
  }
  return fiatValue === 0 || fiatValue >= 0.01 ? fiatValue.toFixed(2) : "<0.01";
};
var useHandleRecovery = (walletConnector, usingSessionKey2, onSuccess, shouldInitRecovery, initPasskeyRecoveryProcess, hideModal) => {
  const handleRecovery = () => __awaiter(void 0, void 0, void 0, function* () {
    if ((yield shouldInitRecovery()) && walletConnector && !usingSessionKey2(walletConnector)) {
      yield initPasskeyRecoveryProcess("email", "sendTransaction");
    }
    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess("callHandlerOutsideModal");
  });
  useEffectOnce(() => {
    if (hideModal) {
      handleRecovery();
    }
  });
};
var useHandleSubmitWithChecks = (config2, recoveryHandlers, viewHandlers) => (e2) => __awaiter(void 0, void 0, void 0, function* () {
  const { walletConnector, usingSessionKey: usingSessionKey2, onClickSend, isTurnkeyWallet, userNeedsCrossDomainPasskey } = config2;
  const { shouldInitRecovery, initPasskeyRecoveryProcess } = recoveryHandlers;
  const { setView, setShowAuthFlow } = viewHandlers;
  if (walletConnector && usingSessionKey2(walletConnector)) {
    onClickSend(e2);
    return;
  }
  if (yield shouldInitRecovery()) {
    yield initPasskeyRecoveryProcess("email", "sendTransaction");
  }
  if (isTurnkeyWallet && userNeedsCrossDomainPasskey) {
    setView("passkey-new-domain-detected");
    setShowAuthFlow(true, {
      ignoreIfIsEmbeddedWidget: false,
      performMultiWalletChecks: false
    });
    dynamicEvents.once("passkeyRecoveryCompleted", () => {
      onClickSend(e2);
    });
    return;
  }
  onClickSend(e2);
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalanceForm/SendBalanceForm.js
var sendBalanceFormInitialValues = {
  amount: "",
  recipient: ""
};
var getDisplayErrorMessage = (errors, t2, field, decimals) => {
  const mapFieldAndErrorToMessage = {
    amount: {
      invalidDecimals: t2("dyn_send_transaction.validation.amount.invalid_decimals", { decimals }),
      invalidFormat: t2("dyn_send_transaction.validation.amount.invalid_decimals", { decimals }),
      overBalance: t2("dyn_send_transaction.validation.amount.over_balance"),
      required: t2("dyn_send_transaction.validation.amount.required")
    },
    recipient: {
      invalidFormat: t2("dyn_send_transaction.validation.recipient.invalid_format"),
      required: t2("dyn_send_transaction.validation.recipient.required")
    }
  };
  const errorType = errors[field];
  if (errorType) {
    const errorMessage = mapFieldAndErrorToMessage[field][errorType];
    return errorMessage.replace("{decimals}", getOrdinalNumber(decimals !== null && decimals !== void 0 ? decimals : 0));
  }
  return "";
};
var SendBalanceForm = ({ initialValues, onSubmit, decimals = 18, validateAddress = () => true, validateAmount = () => true, currentToken, transaction, tokenBalances, setCurrentToken, isLoading }) => {
  const { t: t2 } = useTranslation();
  const { showFiat } = useInternalDynamicContext();
  const floatingValueRef = (0, import_react100.useRef)(null);
  const [leftSymbolPadding, setLeftSymbolPadding] = (0, import_react100.useState)(0);
  const { amount } = useSendBalanceState();
  (0, import_react100.useEffect)(() => {
    if (floatingValueRef.current) {
      const floatingDivWidth = floatingValueRef.current.offsetWidth;
      setLeftSymbolPadding(floatingDivWidth + 15);
    }
  }, [currentToken]);
  const sendBalanceFormValidationSchema = (0, import_react100.useMemo)(() => {
    const decimalsRegex = new RegExp(`^\\d*(\\.\\d{1,${decimals}})?$`);
    return create6().shape({
      amount: create3().required("required").matches(/^\d*(\.\d+)?$/, "invalidFormat").matches(decimalsRegex, "invalidDecimals").test({
        message: "overBalance",
        test: (value) => validateAmount(value)
      }),
      recipient: create3().required("required").test({
        message: "invalidFormat",
        test: (value) => validateAddress(value)
      })
    });
  }, [decimals, validateAddress, validateAmount]);
  return (0, import_jsx_runtime64.jsx)(Formik, { initialValues: initialValues || sendBalanceFormInitialValues, validationSchema: sendBalanceFormValidationSchema, onSubmit: (values) => onSubmit(values), validateOnChange: false, validateOnBlur: false, children: ({ errors, touched, values, handleChange, setFieldValue, setErrors }) => {
    var _a;
    return (0, import_jsx_runtime64.jsxs)(Form, { className: "send-balance-form", children: [(0, import_jsx_runtime64.jsxs)("div", { className: "send-balance-page-layout__balance-container", children: [(0, import_jsx_runtime64.jsx)(FormFieldLabel, { children: "Select any token" }), (0, import_jsx_runtime64.jsx)(TokensBalanceDropdown, { tokenBalances: tokenBalances !== null && tokenBalances !== void 0 ? tokenBalances : currentToken && [currentToken], currentToken, setCurrentToken, isLoading, setFieldValue, setErrors })] }), (0, import_jsx_runtime64.jsxs)("div", { className: "send-balance-form__amount-container", children: [(0, import_jsx_runtime64.jsx)(Field, { variant: "regular", className: `send-balance-form__amount-container__field ${showFiat ? "fiat" : ""}`, name: "amount", id: "amount", onChange: (e2) => {
      const newValue = e2.target.value;
      if (newValue !== "" && !/^(?:\d+|\d*\.\d*|)$/.test(newValue)) {
        return;
      }
      setErrors({});
      handleChange(e2);
      if (!newValue || Number.isNaN(newValue)) {
        setSendBalanceVariable("amount", 0);
        return;
      }
      setSendBalanceVariable("amount", (currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) ? Number(newValue) : void 0);
    }, placeholder: t2("dyn_send_transaction.data.amount.placeholder"), as: Input, error: errors["amount"], copykey: "dyn_send_transaction.data.amount.label", message: touched["amount"] && getDisplayErrorMessage(errors, t2, "amount", decimals), style: {
      paddingLeft: `${leftSymbolPadding}px`
    } }), (0, import_jsx_runtime64.jsx)("div", { className: "send-balance-form__amount-container__floating_value", ref: floatingValueRef, children: (0, import_jsx_runtime64.jsx)(Typography, { variant: "title", weight: "regular", color: "secondary", children: currentToken === null || currentToken === void 0 ? void 0 : currentToken.symbol }) }), (0, import_jsx_runtime64.jsx)("div", { className: "send-balance-form__amount-container__balance", children: showFiat && !Number.isNaN(amount) && (0, import_jsx_runtime64.jsxs)(import_jsx_runtime64.Fragment, { children: [(0, import_jsx_runtime64.jsx)(Typography, { variant: "body_mini", weight: "bold", color: "secondary", children: "$" }), (0, import_jsx_runtime64.jsx)(Typography, { variant: "body_mini", weight: "regular", color: "secondary", children: getDisplayFiatPrice(amount, currentToken) })] }) })] }), (0, import_jsx_runtime64.jsx)(Typography, { className: "send-balance-form__amount_available", variant: "body_small", weight: "regular", color: "secondary", as: "div", children: (0, import_jsx_runtime64.jsxs)("div", { style: { display: "flex", gap: "0.225rem" }, children: [(0, import_jsx_runtime64.jsx)(Typography, { className: "send-balance-form__amount_available__line", variant: "body_small", weight: "bold", color: "primary", as: "div", children: (_a = roundToNthDecimal(currentToken === null || currentToken === void 0 ? void 0 : currentToken.balance, 6)) !== null && _a !== void 0 ? _a : 0 }), `${currentToken === null || currentToken === void 0 ? void 0 : currentToken.symbol} Available`] }) }), (0, import_jsx_runtime64.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", children: "Recipient Address" }), (0, import_jsx_runtime64.jsx)(Field, { className: "send-balance-form__field", placeholder: t2("dyn_send_transaction.data.recipient.placeholder"), label: t2("dyn_send_transaction.data.recipient.label"), id: "recipient", name: "recipient", as: Input, error: errors["recipient"], copykey: "dyn_send_transaction.data.recipient.label", message: touched["recipient"] && getDisplayErrorMessage(errors, t2, "recipient") }), (0, import_jsx_runtime64.jsx)(TypographyButton, { dataTestId: "sendBalanceFormSubmitButton", expanded: true, type: "submit", buttonVariant: "primary", buttonPadding: "small", buttonClassName: "send-balance-form__button", copykey: "dyn_send_transaction.preview_transaction", children: t2("dyn_send_transaction.preview_transaction") })] });
  } });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/components/TokensBalanceDropdown/constants.js
var zeroAddress = "0x0000000000000000000000000000000000000000";
var nativeSolanaAddress = "11111111111111111111111111111111";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SendBalancePageLayout/SendBalancePageLayout.js
var SendBalancePageLayout = ({ error, onClickClose, onClickBack, onSubmit, displayPoweredByDynamicFooter = false, transaction, networkCurrencyDecimals, tokenBalances, currentToken, setCurrentToken, isLoading, isNativeToken }) => {
  var _a;
  const { t: t2 } = useTranslation();
  const { primaryWallet } = useInternalDynamicContext();
  const { chainName } = useSendBalanceState();
  const closeButton = onClickClose && (0, import_jsx_runtime65.jsx)(IconButton, { type: "button", onClick: onClickClose, "data-testid": "close-button", children: (0, import_jsx_runtime65.jsx)(SvgClose, {}) });
  const backButton = onClickBack && (0, import_jsx_runtime65.jsx)(IconButton, { type: "button", onClick: onClickBack, "data-testid": "back-button", children: (0, import_jsx_runtime65.jsx)(SvgArrowLeft, {}) });
  const { data: balance } = usePromise(() => transaction.getBalance(), {
    deps: [transaction]
  });
  (0, import_react101.useEffect)(() => {
    const getNativeTokenAndFetchBalance = () => __awaiter(void 0, void 0, void 0, function* () {
      const token = Object.assign(Object.assign({}, getNativeTokenInfo(chainName === null || chainName === void 0 ? void 0 : chainName.toLowerCase())), { address: chainName === "Solana" ? nativeSolanaAddress : zeroAddress, balance: 0, decimals: chainName === "Solana" ? 9 : 18, rawBalance: 0 });
      const tokenBalance = yield primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.getBalance();
      if (tokenBalance) {
        token.balance = Number(tokenBalance);
        token.rawBalance = Number(tokenBalance) / Math.pow(10, token.decimals);
      }
      setCurrentToken(token);
    });
    const updateTokenBalances = () => __awaiter(void 0, void 0, void 0, function* () {
      if (isLoading)
        return;
      if (tokenBalances === void 0 || Array.isArray(tokenBalances) && tokenBalances.length === 0) {
        yield getNativeTokenAndFetchBalance();
      } else if (!currentToken) {
        setCurrentToken(tokenBalances[0]);
      }
    });
    updateTokenBalances();
  }, [tokenBalances]);
  const getAmount = () => {
    if (isNativeToken) {
      return transaction.value ? transaction.format(transaction.value) : "";
    }
    return (transaction === null || transaction === void 0 ? void 0 : transaction.formatNonNativeToken) && (transaction === null || transaction === void 0 ? void 0 : transaction.nonNativeValue) && (transaction === null || transaction === void 0 ? void 0 : transaction.nonNativeDecimal) ? transaction.formatNonNativeToken(transaction.nonNativeValue, transaction.nonNativeDecimal) : "";
  };
  return (0, import_jsx_runtime65.jsxs)(import_jsx_runtime65.Fragment, { children: [(0, import_jsx_runtime65.jsx)(ModalHeader, { leading: backButton, trailing: closeButton, alignContent: "bottom", children: (0, import_jsx_runtime65.jsx)("div", { className: "send-balance-page-layout__header-content", children: (0, import_jsx_runtime65.jsx)(Typography, { variant: "title", color: "primary", copykey: "dyn_send_transaction.data.send", children: t2("dyn_send_transaction.data.send") }) }) }), (0, import_jsx_runtime65.jsxs)("div", { className: "send-balance-page-layout__body", children: [(0, import_jsx_runtime65.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime65.jsx)(VerticalDrawerTransition, {}), children: error && (0, import_jsx_runtime65.jsx)("div", { className: "send-balance-page-layout__error", children: (0, import_jsx_runtime65.jsx)(Alert, { icon: "error", variant: "error", children: error }) }) }), (0, import_jsx_runtime65.jsx)(SendBalanceForm, { tokenBalances, setCurrentToken, isLoading, onSubmit: ({ amount, recipient }) => {
    if (isNativeToken) {
      transaction.value = transaction.parse(amount);
    } else if (transaction.parseNonNativeToken) {
      transaction.nonNativeValue = transaction.parseNonNativeToken(amount, (currentToken === null || currentToken === void 0 ? void 0 : currentToken.decimals) || 18);
      transaction.value = BigInt(0);
      transaction.nonNativeAddress = currentToken === null || currentToken === void 0 ? void 0 : currentToken.address;
      transaction.nonNativeDecimal = currentToken === null || currentToken === void 0 ? void 0 : currentToken.decimals;
    }
    transaction.to = recipient;
    onSubmit();
  }, initialValues: {
    amount: getAmount(),
    recipient: (_a = transaction.to) !== null && _a !== void 0 ? _a : ""
  }, decimals: isNativeToken ? networkCurrencyDecimals : currentToken === null || currentToken === void 0 ? void 0 : currentToken.decimals, validateAddress: (value) => {
    if (!value)
      return true;
    return transaction.validateAddressFormat(value);
  }, validateAmount: (amountText) => {
    if (!amountText)
      return false;
    if (isNativeToken) {
      if (!balance)
        return false;
      const amount2 = transaction.parse(amountText);
      return amount2 <= balance;
    }
    if (!(currentToken === null || currentToken === void 0 ? void 0 : currentToken.rawBalance) || !transaction.parseNonNativeToken)
      return false;
    const amount = Number(transaction.parseNonNativeToken(amountText, (currentToken === null || currentToken === void 0 ? void 0 : currentToken.decimals) || 18));
    return amount <= currentToken.rawBalance;
  }, currentToken, transaction }), displayPoweredByDynamicFooter && (0, import_jsx_runtime65.jsx)(PoweredByDynamic, { classNameRoot: "send-balance-page-layout__footer" })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionStatusLayout/TransactionStatusLayout.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var import_react102 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/check-blue.js
var React21 = __toESM(require_react(), 1);
var _path5;
var _excluded7 = ["title", "titleId"];
function _extends14() {
  _extends14 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends14.apply(this, arguments);
}
function _objectWithoutProperties7(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose10(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose10(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgCheckBlue = function SvgCheckBlue2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties7(_ref2, _excluded7);
  return React21.createElement("svg", _extends14({
    width: 65,
    height: 64,
    viewBox: "0 0 65 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React21.createElement("title", {
    id: titleId
  }, title2) : null, _path5 || (_path5 = React21.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32.5 64c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32C14.827 0 .5 14.327.5 32c0 17.673 14.327 32 32 32Zm12.845-39.155a1.667 1.667 0 1 0-2.357-2.357L27.5 37.976l-5.488-5.488a1.667 1.667 0 1 0-2.357 2.357l6.666 6.667c.651.65 1.707.65 2.357 0l16.667-16.667Z",
    fill: "#4779FF"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/shortenWalletAddress/shortenWalletAddress.js
var shortenWalletAddress = (walletAddress, first = 6, last = 4) => {
  if (!walletAddress)
    return "";
  return walletAddress.replace(walletAddress.substring(first, Number(walletAddress.length) - last), "...");
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionStatusLayout/TransactionStatusLayout.js
var import_react_dom11 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/fiatUtils/fiatUtils.js
var getGasFiatValue = (currentToken, transaction, nativePrice) => {
  if (!(currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) || !transaction.fee.gas)
    return;
  let currentNativePrice = currentToken.price;
  if (nativePrice) {
    currentNativePrice = nativePrice;
  }
  return (Number(transaction.format(transaction.fee.gas)) * currentNativePrice).toFixed(2);
};
var getTotalFiatCost = (currentToken, transaction, nativePrice, transactionValue) => {
  const gasValue = getGasFiatValue(currentToken, transaction, nativePrice);
  if (!gasValue || !(currentToken === null || currentToken === void 0 ? void 0 : currentToken.price))
    return;
  const totalFiatCost = Number(gasValue) + Number(transactionValue) * currentToken.price;
  return totalFiatCost.toFixed(2);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionStatusLayout/TransactionStatusLayout.js
var import_qrcode9 = __toESM(require_browser(), 1);
var TransactionStatusLayout = ({ destinationAddress, transactionValue, networkCurrency, onDone, displayPoweredByDynamicFooter = true, onClickClose, transaction, currentToken, isNativeToken }) => {
  const { t: t2 } = useTranslation();
  const { showFiat } = useInternalDynamicContext();
  const { nativePrice } = useSendBalanceState();
  const closeButton = onClickClose && (0, import_jsx_runtime66.jsx)(IconButton, { type: "button", onClick: onClickClose, "data-testid": "close", children: (0, import_jsx_runtime66.jsx)(SvgClose, {}) });
  const totalFiatCost = getTotalFiatCost(currentToken, transaction, nativePrice, transactionValue);
  return (0, import_jsx_runtime66.jsxs)("div", { className: "transaction-status-layout", children: [(0, import_jsx_runtime66.jsx)(ModalHeader, { trailing: closeButton, alignContent: "bottom", children: (0, import_jsx_runtime66.jsx)(Icon, { size: "large", className: "transaction-status-layout__status-icon", children: (0, import_jsx_runtime66.jsx)(SvgCheckBlue, {}) }) }), (0, import_jsx_runtime66.jsxs)("div", { className: "transaction-status-layout__body", children: [(0, import_jsx_runtime66.jsxs)("div", { className: "transaction-status-layout__sent_to", children: [(0, import_jsx_runtime66.jsxs)(Typography, { variant: "body_small", color: "secondary", className: "transaction-status-layout__title", copykey: "dyn_send_transaction.succeeded.title", children: [t2("dyn_send_transaction.succeeded.title"), " "] }), (0, import_jsx_runtime66.jsx)(Typography, { variant: "body_small", color: "primary", className: "transaction-status-layout__title", copykey: "dyn_send_transaction.succeeded.title", children: shortenWalletAddress(destinationAddress, 3, 3) })] }), (0, import_jsx_runtime66.jsx)("div", { className: "transaction-status-layout__content", children: (0, import_jsx_runtime66.jsx)("div", { className: "transaction-status-layout__rows", children: (0, import_jsx_runtime66.jsxs)(Typography, { variant: "title", color: "primary", className: "transaction-status-layout__title", copykey: "dyn_send_transaction.succeeded.title", children: [`${getValueRounded(isNativeToken, transaction)} ${networkCurrency} `, showFiat && (currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) && `($${Number(totalFiatCost) <= 0.01 ? "<0.01" : totalFiatCost})`] }) }) }), (0, import_jsx_runtime66.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime66.jsx)(VerticalDrawerTransition, {}), children: (0, import_jsx_runtime66.jsx)("div", { className: "transaction-confirmation__warning", children: (0, import_jsx_runtime66.jsx)(Alert, { variant: "info", copykey: "dyn_send_transaction.info_message.refresh_balance_time", children: t2("dyn_send_transaction.info_message.refresh_balance_time") }) }) }), (0, import_jsx_runtime66.jsx)("div", { className: "transaction-status-layout__actions", children: (0, import_jsx_runtime66.jsx)(TypographyButton, { buttonVariant: "brand-primary", buttonPadding: "small", expanded: true, onClick: onDone, loading: false, copykey: "dyn_send_transaction.succeeded.continue_button", dataTestId: "transaction-done-continue", children: t2("dyn_send_transaction.succeeded.continue_button") }) }), displayPoweredByDynamicFooter && (0, import_jsx_runtime66.jsx)(PoweredByDynamic, { classNameRoot: "transaction-status-layout__footer" })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SendBalanceView/SendBalanceView.js
var import_react_dom21 = __toESM(require_react_dom(), 1);
var import_qrcode19 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useFetchChain/useFetchChain.js
var import_react103 = __toESM(require_react(), 1);
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var import_react_dom12 = __toESM(require_react_dom(), 1);
var import_qrcode10 = __toESM(require_browser(), 1);
var useFetchChain = (connector) => {
  const fetchChain = () => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!connector)
      return { chainId: void 0, name: "", symbol: void 0 };
    const chainId = yield connector.getNetwork();
    const { connectedChain } = connector;
    const chainInfo = getChainInfoWithOverrides(connectedChain || "");
    const chainWithIcon = {
      chainId,
      name: chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.displayName,
      symbol: chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.symbol
    };
    if (chainId && connector.evmNetworks) {
      const result = connector.evmNetworks.find((element) => element.chainId === chainId);
      chainWithIcon.name = (_a = result === null || result === void 0 ? void 0 : result.vanityName) !== null && _a !== void 0 ? _a : chainWithIcon.name;
      chainWithIcon.icon = result === null || result === void 0 ? void 0 : result.iconUrls[0];
    }
    return chainWithIcon;
  });
  const { data: chain, isLoading } = usePromise(fetchChain, {
    deps: [connector]
  });
  return { chain, isLoading };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/TransactionConfirmationView/TransactionConfirmationView.js
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var import_react117 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getAppOrigin/getAppOrigin.js
var getAppOrigin = () => {
  if (typeof window !== "undefined") {
    return window.location.origin;
  }
  return void 0;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/TransactionConfirmationView/TransactionConfirmationView.js
var import_react_dom18 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useInterval/useInterval.js
var import_react105 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsomorphicLayoutEffect/useIsomorphicLayoutEffect.js
var import_react104 = __toESM(require_react(), 1);
var useIsomorphicLayoutEffect3 = typeof window !== "undefined" ? import_react104.useLayoutEffect : import_react104.useEffect;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useInterval/useInterval.js
var useInterval = (callback, delay) => {
  const savedCallback = (0, import_react105.useRef)(callback);
  useIsomorphicLayoutEffect3(() => {
    savedCallback.current = callback;
  }, [callback]);
  (0, import_react105.useEffect)(() => {
    if (!delay && delay !== 0) {
      return;
    }
    const id = setInterval(() => savedCallback.current(), delay);
    return () => clearInterval(id);
  }, [delay]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMutation/useMutation.js
var import_react106 = __toESM(require_react(), 1);
var useMutation = (mutation, options2 = {}) => {
  const [state, setState] = (0, import_react106.useState)({
    isLoading: false
  });
  const mutate = (0, import_react106.useCallback)((variables) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    let data;
    setState({
      isLoading: true
    });
    try {
      const mutationResult = mutation(variables);
      if (mutationResult instanceof Promise) {
        data = yield mutationResult;
      } else {
        data = mutationResult;
      }
      setState({
        data,
        isLoading: false
      });
      try {
        (_a = options2 === null || options2 === void 0 ? void 0 : options2.onSuccess) === null || _a === void 0 ? void 0 : _a.call(options2, data, variables);
      } catch (err) {
        logger.error(err);
      }
      return data;
    } catch (error) {
      setState({ error, isLoading: false });
      logger.error(error);
      try {
        (_b = options2 === null || options2 === void 0 ? void 0 : options2.onFailure) === null || _b === void 0 ? void 0 : _b.call(options2, error, variables);
      } catch (err) {
        logger.error(err);
      }
    }
    return void 0;
  }), [mutation, options2]);
  return Object.assign(Object.assign({}, state), { hasData: Boolean(state.data), hasError: Boolean(state.error), mutate });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/TransactionConfirmationView/TransactionConfirmationView.js
var import_qrcode16 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useFetchCurrency/useFetchCurrency.js
var import_react107 = __toESM(require_react(), 1);
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var import_react_dom13 = __toESM(require_react_dom(), 1);
var import_qrcode11 = __toESM(require_browser(), 1);
var useFetchCurrency = (connector, network) => {
  const fetchChainCurrency = () => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    if (!connector)
      return null;
    const chainId = yield connector.getNetwork();
    const chainInfo = getChainInfoWithOverrides((_a = connector.connectedChain) !== null && _a !== void 0 ? _a : "");
    if (!chainId) {
      return chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.symbol;
    }
    const network2 = connector.connectedChain === "STARK" ? "starknetNetworks" : "evmNetworks";
    const result = (_b = connector[network2]) === null || _b === void 0 ? void 0 : _b.find((element) => element.chainId === chainId);
    return (_d = (_c = result === null || result === void 0 ? void 0 : result.nativeCurrency) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.symbol;
  });
  const { data: currency, isLoading } = usePromise(fetchChainCurrency, {
    deps: [network]
  });
  return { currency, isLoading };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var import_react115 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/send.js
var React22 = __toESM(require_react(), 1);
var _g3;
var _excluded8 = ["title", "titleId"];
function _extends15() {
  _extends15 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends15.apply(this, arguments);
}
function _objectWithoutProperties8(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose11(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose11(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSend = function SvgSend2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties8(_ref2, _excluded8);
  return React22.createElement("svg", _extends15({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React22.createElement("title", {
    id: titleId
  }, title2) : null, _g3 || (_g3 = React22.createElement("g", {
    clipPath: "url(#send_svg__clip0_6894_96)"
  }, React22.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "m3.846 9.3.03-.01 14.64-5.728c.199-.078.399-.156.567-.205.156-.046.465-.126.794-.02.374.123.664.413.786.787.107.33.027.638-.019.794-.049.168-.127.368-.205.567L14.702 20.15c-.08.204-.16.408-.239.568-.073.147-.226.436-.537.614a1.277 1.277 0 0 1-1.136.072c-.323-.137-.496-.405-.58-.542-.09-.149-.184-.342-.278-.535l-2.693-5.52-5.546-2.724-.027-.014c-.193-.094-.385-.189-.533-.28-.137-.082-.403-.256-.54-.578a1.277 1.277 0 0 1 .074-1.136c.178-.31.466-.463.612-.536.16-.079.363-.158.567-.238Zm.972 1.425 4.88 2.396 2.912-2.913a.848.848 0 0 1 1.2-.017.848.848 0 0 1-.017 1.2l-2.898 2.898 2.384 4.888 5.433-13.888-13.894 5.436Z",
    fill: "currentColor",
    fillOpacity: 0.4
  }))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/usingSessionKeys/usingSessionKeys.js
var usingSessionKey = (walletConnector) => isSessionKeyCompatibleWalletConnector(walletConnector) || isAccountAbstractionConnector(walletConnector) && isSessionKeyCompatibleWalletConnector(walletConnector.getEOAConnector());

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.js
var import_react_dom17 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePasskeyRecovery/usePasskeyRecovery.js
var import_react111 = __toESM(require_react(), 1);
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getEnabledEmbeddedWalletsAuthenticators/getEnabledEmbeddedWalletsAuthenticators.js
var getEnabledEmbeddedWalletsAuthenticators = (supportedSecurityMethods) => {
  if (!supportedSecurityMethods || !Object.keys(supportedSecurityMethods).length) {
    return {};
  }
  const enabledSecurityMethods = {};
  Object.keys(supportedSecurityMethods).filter((key) => {
    var _a;
    return (_a = supportedSecurityMethods[key]) === null || _a === void 0 ? void 0 : _a.isEnabled;
  }).forEach((key) => enabledSecurityMethods[key] = supportedSecurityMethods[key]);
  return enabledSecurityMethods;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/user/user.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var import_react108 = __toESM(require_react(), 1);
var updateUserProfileFields = (environmentId, fields) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const response = yield sdkApi().updateSelf({
      environmentId,
      userFields: fields
    });
    const userProfile = yield storeAuthTokenAndUser(response);
    return Object.assign(Object.assign({}, response), { userProfile });
  } catch (e2) {
    logger2.error(e2);
    if (e2 instanceof Response) {
      const error = yield e2.json();
      if (error.code === "email_already_exists") {
        throw new EmailAlreadyExistsError();
      } else if (error.code === "custom_field_data_not_unique") {
        throw new CustomFieldNotUniqueError();
      } else if (error.code === "username_already_exists") {
        throw new UsernameAlreadyExistsError();
      } else if (error.code === "too_many_verification_attempts") {
        throw new TooManyEmailVerificationsError();
      } else if (error.code === "invalid_phone" || error.code === "invalid_sms_verification") {
        throw new InvalidPhoneNumberError(error.error);
      }
    }
    throw e2;
  }
});
var mergeUserAccounts = (environmentId) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const response = yield sdkApi().mergeUsers({
      environmentId
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    logger2.error(e2);
    throw e2;
  }
});
var verifyMergeUsers = (environmentId, mergeConflictResolutions) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const response = yield sdkApi().verifyMergeUsers({
      environmentId,
      mergeUserConflictResolutions: {
        mergeUserResolutions: mergeConflictResolutions
      }
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    logger2.error(e2);
    throw e2;
  }
});
var refreshUserJwt = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId }) {
  try {
    const response = yield sdkApi().refreshAuth({
      environmentId
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return void 0;
  }
});
var getAuthenticatedUser = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId }) {
  try {
    return yield sdkApi().getAuthenticatedUser({
      environmentId
    });
  } catch (e2) {
    if (e2.status === 401) {
      logger2.error("No valid auth for getAuthenticatedUser", e2);
      throw new CookieInvalidError();
    }
    logger2.error("Other error getting authenticated user", e2);
    return void 0;
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getEmbeddedWalletSessionExpiration/getEmbeddedWalletSessionExpiration.js
var sessionExpirationUnit = {
  days: 86400,
  hours: 3600,
  minutes: 60
};
var getEmbeddedWalletSessionExpiration = (duration) => {
  if (!duration) {
    return 0;
  }
  const { unit, amount } = duration;
  const sessionExpiration = amount || 0;
  const decodedSessionExpirationUnit = sessionExpirationUnit[unit] || 0;
  return sessionExpiration * decodedSessionExpirationUnit;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePasskeyRecovery/usePasskeyRecovery.js
var import_react_dom15 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/utils/passkeyRecovery/passkeyRecovery.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var import_react109 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/removeElementById/removeElementById.js
var removeElementById = (elementId) => {
  let elementToRemove;
  if (typeof window !== "undefined") {
    elementToRemove = window.document.getElementById(elementId);
    const parentElement = elementToRemove === null || elementToRemove === void 0 ? void 0 : elementToRemove.parentElement;
    if (!elementToRemove || !parentElement) {
      return;
    }
    parentElement.removeChild(elementToRemove);
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/constants.js
var iframeContainerId2 = "dyn-passkey-recovery-id";
var iframeElementId2 = "dyn-passkey-recovery-element-id";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/utils/passkeyRecovery/passkeyRecovery.js
var initEmbeddedWalletSession2 = (_a) => __awaiter(void 0, [_a], void 0, function* ({ authenticatorType, iframeContainer, iframeElementId: iframeElementId4, environmentId, user, wallet, sessionExpiration }) {
  var _b;
  if (!user) {
    throw new DynamicError(USER_NOT_LOGGED_IN);
  }
  if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !(wallet === null || wallet === void 0 ? void 0 : wallet.id) || !isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings");
  }
  const turnkeyRecoveryHandler = (_b = wallet.connector) === null || _b === void 0 ? void 0 : _b.getAuthenticatorHandler();
  if (authenticatorType === "passkey" && turnkeyRecoveryHandler.isSessionActive()) {
    return addNewPasskeyAuthenticator({
      environmentId,
      user,
      wallet
    });
  }
  const publicKey = yield turnkeyRecoveryHandler.initRecovery(authenticatorType, iframeContainer, iframeElementId4, sessionExpiration);
  if (!publicKey) {
    throw new DynamicError("Something went wrong");
  }
  const response = yield initEmbeddedWalletSession({
    authenticatorType,
    environmentId,
    publicKey,
    walletId: wallet.id
  });
  turnkeyRecoveryHandler.recoveryUserId = authenticatorType === "passkey" ? response.turnkeyRecoveryUserId : response.turnkeyUserId;
  return;
});
var passkeyRecoveryBundleValidation = (_c) => __awaiter(void 0, [_c], void 0, function* ({ user, bundleInput, wallet }) {
  var _d, _e2, _f, _g16;
  if (!bundleInput) {
    throw new DynamicError("Code must be informed");
  }
  if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !(wallet === null || wallet === void 0 ? void 0 : wallet.id) || !isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings");
  }
  if (!user) {
    throw new DynamicError(USER_NOT_LOGGED_IN);
  }
  const organizationId = (_f = (_e2 = (_d = user.verifiedCredentials) === null || _d === void 0 ? void 0 : _d.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _e2 === void 0 ? void 0 : _e2.walletProperties) === null || _f === void 0 ? void 0 : _f.turnkeySubOrganizationId;
  const turnkeyRecoveryHandler = (_g16 = wallet.connector) === null || _g16 === void 0 ? void 0 : _g16.getAuthenticatorHandler();
  yield turnkeyRecoveryHandler.verifyRecoveryCode(bundleInput, organizationId);
  const sessionSettings = {
    createdAt: (/* @__PURE__ */ new Date()).getTime(),
    emailCode: bundleInput,
    userId: turnkeyRecoveryHandler.recoveryUserId
  };
  StorageService.setItem(EMBEDDED_WALLET_SESSION_SETTINGS, sessionSettings);
});
var resentRecoveryEmail = (_h) => __awaiter(void 0, [_h], void 0, function* ({ authenticatorType, user, environmentId, wallet }) {
  var _j;
  if (!user) {
    throw new DynamicError(USER_NOT_LOGGED_IN);
  }
  if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !(wallet === null || wallet === void 0 ? void 0 : wallet.id) || !isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings");
  }
  const publicKey = (_j = wallet.connector) === null || _j === void 0 ? void 0 : _j.getAuthenticatorHandler().publicKey;
  if (!publicKey) {
    throw new DynamicError("Could not proceed with your request. Please restart the process.");
  }
  return initEmbeddedWalletSession({
    authenticatorType,
    environmentId,
    publicKey,
    walletId: wallet === null || wallet === void 0 ? void 0 : wallet.id
  });
});
var completePasskeyRecovery2 = (_k) => __awaiter(void 0, [_k], void 0, function* ({ user, environmentId, wallet }) {
  const { connector, user: updatedUser } = yield recoverTurnkeyWallet({
    addPasskeyAuthenticator: false,
    environmentId,
    user,
    wallet
  });
  connector.getAuthenticatorHandler().clear();
  removeElementById(iframeElementId2);
  return updatedUser;
});
var addNewPasskeyAuthenticator = (_l) => __awaiter(void 0, [_l], void 0, function* ({ user, environmentId, wallet }) {
  const { user: updatedUser } = yield recoverTurnkeyWallet({
    addPasskeyAuthenticator: true,
    environmentId,
    user,
    wallet
  });
  return updatedUser;
});
var recoverTurnkeyWallet = (_m) => __awaiter(void 0, [_m], void 0, function* ({ wallet, user, environmentId, addPasskeyAuthenticator }) {
  var _o, _p, _q;
  if (!user) {
    throw new DynamicError(USER_NOT_LOGGED_IN);
  }
  if (!wallet || !wallet.connector || !wallet.id || !isPasskeyWalletConnector(wallet.connector)) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings");
  }
  const connector = wallet.connector;
  connector.setEmail(user.email);
  const turnkeySubOrganizationId = (_q = (_p = (_o = user.verifiedCredentials) === null || _o === void 0 ? void 0 : _o.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _p === void 0 ? void 0 : _p.walletProperties) === null || _q === void 0 ? void 0 : _q.turnkeySubOrganizationId;
  if (!turnkeySubOrganizationId) {
    throw new DynamicError("The authentication token is invalid - turnkeySubOrganizationId is missing");
  }
  const turnkeyRecoveryHandler = wallet.connector.getAuthenticatorHandler();
  const { attestation, challenge } = yield connector.getWebAuthnAttestation();
  if (addPasskeyAuthenticator) {
    yield turnkeyRecoveryHandler.addPasskeyAuthenticator({
      attestation,
      challenge,
      turnkeySubOrganizationId
    });
  } else {
    yield turnkeyRecoveryHandler.completeRecovery({
      attestation,
      challenge,
      turnkeySubOrganizationId
    });
  }
  const updatedUser = yield completePasskeyRecovery({
    attestation,
    challenge,
    environmentId,
    walletId: wallet.id
  });
  if (!updatedUser) {
    throw new DynamicError("No user returned from passkey recovery");
  }
  const chain = connector.connectedChain;
  const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(updatedUser, [chain]);
  if (!embeddedWalletVerifiedCredential) {
    throw new DynamicError("EmbeddedWalletVerifiedCredential not found");
  }
  connector.setVerifiedCredentials(updatedUser.verifiedCredentials);
  return {
    connector,
    user: updatedUser
  };
});
var canRestoreEmbeddedWalletSession = (sessionExpirationTime) => {
  if (!(sessionExpirationTime === null || sessionExpirationTime === void 0 ? void 0 : sessionExpirationTime.amount)) {
    return false;
  }
  const sessionSettings = StorageService.getItem(EMBEDDED_WALLET_SESSION_SETTINGS);
  if (!sessionSettings) {
    return false;
  }
  const sessionExpiration = sessionExpirationTime.amount * (sessionExpirationTime.unit === "minutes" ? 60 : 3600);
  const recoveryExpirationSeconds = (sessionSettings === null || sessionSettings === void 0 ? void 0 : sessionSettings.createdAt) + sessionExpiration * 1e3;
  const expirationTime = new Date(recoveryExpirationSeconds);
  if (/* @__PURE__ */ new Date() >= expirationTime) {
    StorageService.removeItem(EMBEDDED_WALLET_SESSION_SETTINGS);
    return false;
  }
  return true;
};
var restoreEmbeddedWalletSession = (_r) => __awaiter(void 0, [_r], void 0, function* ({ user, iframeContainer, iframeElementId: iframeElementId4, wallet, sessionExpiration }) {
  var _s, _t, _u, _v;
  if (!user) {
    throw new DynamicError(USER_NOT_LOGGED_IN);
  }
  if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !(wallet === null || wallet === void 0 ? void 0 : wallet.id) || !isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings");
  }
  const sessionSettings = StorageService.getItem(EMBEDDED_WALLET_SESSION_SETTINGS);
  const turnkeyRecoveryHandler = (_s = wallet.connector) === null || _s === void 0 ? void 0 : _s.getAuthenticatorHandler();
  if (!sessionSettings || Boolean(turnkeyRecoveryHandler.recoveryUserId)) {
    return false;
  }
  const publicKey = yield turnkeyRecoveryHandler.initRecovery("email", iframeContainer, iframeElementId4, sessionExpiration);
  if (!publicKey) {
    throw new DynamicError("Could not open embedded wallet connection communication");
  }
  turnkeyRecoveryHandler.recoveryUserId = sessionSettings.userId;
  const organizationId = (_v = (_u = (_t = user.verifiedCredentials) === null || _t === void 0 ? void 0 : _t.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _u === void 0 ? void 0 : _u.walletProperties) === null || _v === void 0 ? void 0 : _v.turnkeySubOrganizationId;
  yield turnkeyRecoveryHandler.verifyRecoveryCode(sessionSettings.emailCode, organizationId);
  return true;
});
var addEmailRecovery = (_w) => __awaiter(void 0, [_w], void 0, function* ({ user, environmentId, wallet }) {
  var _x, _y;
  if (!(user === null || user === void 0 ? void 0 : user.email)) {
    throw new DynamicError(USER_NOT_LOGGED_IN);
  }
  if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !(wallet === null || wallet === void 0 ? void 0 : wallet.id) || !isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !isEmailWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings");
  }
  const { turnkeySubOrganizationId, turnkeyUserId } = (_y = (_x = user.verifiedCredentials) === null || _x === void 0 ? void 0 : _x.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _y === void 0 ? void 0 : _y.walletProperties;
  if (!turnkeySubOrganizationId || !turnkeyUserId) {
    throw new DynamicError("The authentication token is invalid - turnkeySubOrganizationId or turnkeyUserID is missing");
  }
  const turnkeyRecoveryHandler = wallet.connector.getAuthenticatorHandler();
  const { signedRequest } = yield turnkeyRecoveryHandler.addEmailRecovery({
    email: user.email,
    organizationId: turnkeySubOrganizationId,
    turnkeyUserId
  });
  yield updatePasskeyRecoveryEmail({
    environmentId,
    updateRecoveryEmailRequest: { turnkeySignedRequest: signedRequest }
  });
  wallet.connector.setEmail(user.email);
  return refreshUserJwt({ environmentId });
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useInitEmbeddedWalletAuthMethod/useInitEmbeddedWalletAuthMethod.js
var import_react110 = __toESM(require_react(), 1);
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var import_react_dom14 = __toESM(require_react_dom(), 1);
var import_qrcode12 = __toESM(require_browser(), 1);
var useInitEmbeddedWalletAuthMethod = () => {
  const { primaryWallet, environmentId, user, projectSettings, setShowAuthFlow } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const [isLoading, setIsLoading] = (0, import_react110.useState)(false);
  const [error, setError] = (0, import_react110.useState)();
  const { getEOAWallet } = useSmartWallets();
  const initAuthMethod = (_a) => __awaiter(void 0, [_a], void 0, function* ({ authenticatorType, iframeContainer, currentAction }) {
    var _b, _c, _d, _e2, _f;
    setIsLoading(true);
    const wallet = (_b = primaryWallet && getEOAWallet(primaryWallet)) !== null && _b !== void 0 ? _b : primaryWallet;
    const sessionExpiration = ((_d = (_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _c === void 0 ? void 0 : _c.sessionKeyDuration) === null || _d === void 0 ? void 0 : _d.amount) || 0;
    const sessionExpirationUnit2 = ((_f = (_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _e2 === void 0 ? void 0 : _e2.sessionKeyDuration) === null || _f === void 0 ? void 0 : _f.unit) === "minutes" ? 60 : 3600;
    const showEmailBundle = authenticatorType === "email" || !(wallet === null || wallet === void 0 ? void 0 : wallet.connector).getAuthenticatorHandler().isSessionActive();
    try {
      yield initEmbeddedWalletSession2({
        authenticatorType,
        environmentId,
        iframeContainer,
        iframeElementId: iframeElementId2,
        sessionExpiration: sessionExpiration * sessionExpirationUnit2 || void 0,
        user,
        wallet
      });
      if (showEmailBundle) {
        setView("passkey-recovery-bundle", {
          authenticatorType,
          currentAction
        });
        setShowAuthFlow(true, {
          ignoreIfIsEmbeddedWidget: false,
          performMultiWalletChecks: false
        });
      } else {
        setShowAuthFlow(false);
      }
    } catch (err) {
      setError(err);
      logger2.error("Failed to create embedded wallet session", err);
      dynamicEvents.emit("passkeyRecoveryFailed", err);
    } finally {
      setIsLoading(false);
    }
  });
  return {
    error,
    initAuthMethod,
    isLoading
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePasskeyRecovery/usePasskeyRecovery.js
var import_qrcode13 = __toESM(require_browser(), 1);
var usePasskeyRecovery = () => {
  var _a, _b, _c;
  const { environmentId, primaryWallet, projectSettings, setShowAuthFlow, user } = useInternalDynamicContext();
  const { createRootElement } = useElementById();
  const iframeContainerRef = createRootElement(iframeContainerId2);
  const { isTurnkeyWalletWithoutAuthenticator, hasRecoveryEmail } = useIsTurnkeyWallet();
  const { initAuthMethod } = useInitEmbeddedWalletAuthMethod();
  const { setDisplayedDestination: setEmailForVerification, setVerificationUUID } = useVerification();
  const { getEOAWallet } = useSmartWallets();
  const { setView } = useViewContext();
  const wallet = (_a = primaryWallet && getEOAWallet(primaryWallet)) !== null && _a !== void 0 ? _a : primaryWallet;
  const isSessionRestored = (0, import_react111.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    var _d, _e2;
    if (!((_d = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _d === void 0 ? void 0 : _d.sessionKeyDuration) || !canRestoreEmbeddedWalletSession((_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _e2 === void 0 ? void 0 : _e2.sessionKeyDuration)) {
      return false;
    }
    const sessionExpiration = getEmbeddedWalletSessionExpiration(projectSettings.sdk.embeddedWallets.sessionKeyDuration);
    try {
      return yield restoreEmbeddedWalletSession({
        iframeContainer: iframeContainerRef.current,
        iframeElementId: iframeElementId2,
        sessionExpiration,
        user,
        wallet: primaryWallet
      });
    } catch (err) {
      logger2.error("Failed to restore embedded wallet", err);
    }
    return false;
  }), [
    user,
    iframeContainerRef,
    primaryWallet,
    (_c = (_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _b === void 0 ? void 0 : _b.embeddedWallets) === null || _c === void 0 ? void 0 : _c.sessionKeyDuration
  ]);
  const shouldInitRecovery = (0, import_react111.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    if (!wallet || !isPasskeyWalletConnector(wallet.connector)) {
      return false;
    }
    const turnkeyRecoveryHandler = wallet.connector.getAuthenticatorHandler();
    if (!isTurnkeyWalletWithoutAuthenticator || turnkeyRecoveryHandler.isSessionActive() || (yield isSessionRestored())) {
      return false;
    }
    return true;
  }), [wallet, isTurnkeyWalletWithoutAuthenticator, isSessionRestored]);
  const initPasskeyRecoveryProcess = (0, import_react111.useCallback)((authenticatorType, currentAction) => __awaiter(void 0, void 0, void 0, function* () {
    var _f;
    const validateRecoveryRequest = () => {
      if (!user) {
        throw new Error(USER_NOT_LOGGED_IN);
      }
      if (!isTurnkeyEnabled(projectSettings)) {
        throw new Error("Dynamic embedded wallet is not enabled. Go to the dashboard and make sure to have both Dynamic embedded wallet and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the  DynamicContextProvider > settings > walletConnectors.");
      }
      if (!hasEmbeddedWallet(user)) {
        throw new Error("Dynamic embedded wallet not found");
      }
      if (wallet && !isPasskeyWalletConnector(wallet.connector)) {
        throw new Error("Dynamic embedded wallet not found.");
      }
    };
    validateRecoveryRequest();
    const turnkeyRecoveryHandler = (wallet === null || wallet === void 0 ? void 0 : wallet.connector).getAuthenticatorHandler();
    if (authenticatorType === "passkey" && turnkeyRecoveryHandler.isSessionActive()) {
      yield addNewPasskeyAuthenticator({
        environmentId,
        user,
        wallet
      });
      setShowAuthFlow(false);
      return wallet;
    }
    const supportedAuthenticators = getEnabledEmbeddedWalletsAuthenticators((_f = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _f === void 0 ? void 0 : _f.supportedSecurityMethods);
    const supportedAuthenticatorMethods = supportedAuthenticators ? Object.keys(supportedAuthenticators) : [];
    if (!hasRecoveryEmail) {
      setView("passkey-recovery-add-email", { shouldInitRecovery: true });
      setShowAuthFlow(true, {
        ignoreIfIsEmbeddedWidget: false,
        performMultiWalletChecks: false
      });
    } else if (!authenticatorType && supportedAuthenticatorMethods.length > 1) {
      setView("embedded-wallet-auth-choice", { currentAction });
      setShowAuthFlow(true, {
        ignoreIfIsEmbeddedWidget: false,
        performMultiWalletChecks: false
      });
    } else {
      const [authType] = supportedAuthenticatorMethods;
      if (authenticatorType && !supportedAuthenticatorMethods.includes(authenticatorType)) {
        authenticatorType = authType;
      }
      yield initAuthMethod({
        authenticatorType: authenticatorType || authType,
        currentAction,
        iframeContainer: iframeContainerRef.current
      });
    }
    return new Promise((resolve, reject) => {
      dynamicEvents.once("passkeyRecoveryCompleted", (wallet2) => resolve(wallet2));
      dynamicEvents.once("passkeyRecoveryFailed", (error) => reject(error));
    });
  }), [
    wallet,
    projectSettings,
    hasRecoveryEmail,
    environmentId,
    user,
    setShowAuthFlow,
    setView,
    initAuthMethod,
    iframeContainerRef
  ]);
  const addRecoveryEmail = (emailInput) => __awaiter(void 0, void 0, void 0, function* () {
    try {
      let updatedUser = user;
      if (!(user === null || user === void 0 ? void 0 : user.email)) {
        updatedUser = yield updateUserProfile(emailInput);
      }
      yield addEmailRecovery({
        environmentId,
        user: updatedUser,
        wallet: primaryWallet
      });
      dynamicEvents.emit("embeddedWalletRecoveryEmailCompleted", "");
    } catch (err) {
      logger2.error("Failed to add recovery email", err);
      dynamicEvents.emit("embeddedWalletRecoveryEmailFailed", err);
    }
  });
  const updateUserProfile = (emailInput) => __awaiter(void 0, void 0, void 0, function* () {
    try {
      const { nextView, emailVerification, userProfile } = yield updateUserProfileFields(environmentId, {
        email: emailInput
      });
      if (nextView === NextViewEnum.Done) {
        return userProfile;
      }
      setView("verify-email", { isEmailRecoveryFlow: true });
      setEmailForVerification(emailInput);
      setVerificationUUID(emailVerification === null || emailVerification === void 0 ? void 0 : emailVerification.verificationUUID);
      return new Promise((resolve, reject) => {
        dynamicEvents.once("emailVerificationResult", (wasSuccessful) => {
          if (wasSuccessful) {
            resolve(userProfile);
          }
          reject("Failed to verify email");
        });
      });
    } catch (err) {
      logger2.error("Failed to update user email", err);
      throw err;
    }
  });
  return {
    addRecoveryEmail,
    initPasskeyRecoveryProcess,
    shouldInitRecovery
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.js
var import_qrcode15 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionCard/TransactionCard.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
var import_react114 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/tooltip.js
var React23 = __toESM(require_react(), 1);
var _path6;
var _excluded9 = ["title", "titleId"];
function _extends16() {
  _extends16 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends16.apply(this, arguments);
}
function _objectWithoutProperties9(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose12(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose12(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgTooltip = function SvgTooltip2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties9(_ref2, _excluded9);
  return React23.createElement("svg", _extends16({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React23.createElement("title", {
    id: titleId
  }, title2) : null, _path6 || (_path6 = React23.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 4a8 8 0 1 0 0 16 8 8 0 0 0 0-16ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm10-5a1 1 0 0 1 1 1v4a1 1 0 1 1-2 0V8a1 1 0 0 1 1-1Zm-1 9a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H12a1 1 0 0 1-1-1Z",
    fill: "#ABACB2"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Tooltip/Tooltip.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var import_react113 = __toESM(require_react(), 1);
var import_react_dom16 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/tooltip-arrow.js
var React24 = __toESM(require_react(), 1);
var _path7;
var _excluded10 = ["title", "titleId"];
function _extends17() {
  _extends17 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends17.apply(this, arguments);
}
function _objectWithoutProperties10(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose13(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose13(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgTooltipArrow = function SvgTooltipArrow2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties10(_ref2, _excluded10);
  return React24.createElement("svg", _extends17({
    width: 8,
    height: 4,
    viewBox: "0 0 8 4",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React24.createElement("title", {
    id: titleId
  }, title2) : null, _path7 || (_path7 = React24.createElement("path", {
    d: "M4 3.75 7.031 0H.97L4 3.75Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/debounce/debounce.js
var debounce = (callback, timeout) => {
  let timeoutId;
  const onTimeoutTick = () => {
    callback();
  };
  const debouncedFn = () => {
    clearTimeout(timeoutId);
    timeoutId = window.setTimeout(onTimeoutTick, timeout);
  };
  return debouncedFn;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHover/useHover.js
var import_react112 = __toESM(require_react(), 1);
var useHover = ({ initialValue = false, falseOnClick = false, onHover, onHoverOff }) => {
  const [hover, setHover] = (0, import_react112.useState)(initialValue);
  const handlers = {
    onMouseDown: () => setHover(true),
    onMouseEnter: () => {
      onHover === null || onHover === void 0 ? void 0 : onHover();
      setHover(true);
    },
    onMouseLeave: () => {
      onHoverOff === null || onHoverOff === void 0 ? void 0 : onHoverOff();
      setHover(false);
    },
    onMouseUp: () => setHover(falseOnClick)
  };
  return [hover, handlers];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Tooltip/Tooltip.js
var import_qrcode14 = __toESM(require_browser(), 1);
var Tooltip = ({ children, content, className, as: Tag = "span", copykey }) => {
  const { createRootElement } = useElementById();
  const portalRoot = createRootElement("dynamic-tooltips");
  const [vector, setVector] = (0, import_react113.useState)([0, 0]);
  const childrenRef = (0, import_react113.useRef)(null);
  const [visible, setVisible] = (0, import_react113.useState)(false);
  const calcPosition = (0, import_react113.useCallback)(() => {
    if (childrenRef.current) {
      const childrenBounding = childrenRef.current.getBoundingClientRect();
      setVector([
        childrenBounding.left + childrenBounding.width / 2,
        childrenBounding.top - 6
        //add 6px margin over the children
      ]);
    }
  }, []);
  const [, childrenHoverHandlers] = useHover({
    falseOnClick: true,
    initialValue: false,
    onHover: () => {
      calcPosition();
      setVisible(true);
    },
    onHoverOff: () => {
      setVisible(false);
    }
  });
  (0, import_react113.useEffect)(() => {
    calcPosition();
    const resizeListener = debounce(() => {
      calcPosition();
    }, 3);
    window.addEventListener("resize", resizeListener);
    return () => {
      window.removeEventListener("resize", resizeListener);
    };
  }, [calcPosition]);
  return (0, import_jsx_runtime73.jsxs)(import_jsx_runtime73.Fragment, { children: [(0, import_react_dom16.createPortal)((0, import_jsx_runtime73.jsx)(ShadowDOM, { zIndex: tooltipZIndex, children: (0, import_jsx_runtime73.jsxs)("div", { "data-testid": "dynamicTooltip", className: classNames("dynamic-tooltip", {
    "dynamic-tooltip--visible": visible
  }, className), style: { left: vector[0], top: vector[1] }, copykey, children: [content, (0, import_jsx_runtime73.jsx)(SvgTooltipArrow, { className: "dynamic-tooltip__arrow" })] }) }), portalRoot.current), (0, import_jsx_runtime73.jsx)(Tag, Object.assign({ ref: childrenRef }, childrenHoverHandlers, { children }))] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionCard/TransactionCard.js
var TransactionCard = ({ transaction, currentToken, currencySymbol, valueRounded, showFiat, transactionValue, isGasSponsored, gasFiatValue, totalGasFiatValue, currency, total, t: t2, walletKey }) => {
  const { amount, chainName } = useSendBalanceState();
  const currentChainName = chainName || "eth";
  return (0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card", children: [(0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card__header", children: [(0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card__icon", children: [(0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card__icon__container", children: [(0, import_jsx_runtime74.jsx)("img", { src: (currentToken === null || currentToken === void 0 ? void 0 : currentToken.logoURI) || getIconUrl(currentChainName), alt: currencySymbol, width: 25, height: 25 }), (0, import_jsx_runtime74.jsx)("img", { className: "transaction-card__icon__container__network", src: getIconUrl(currentChainName), alt: currencySymbol, width: 25, height: 25 })] }), (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", color: "primary", children: currencySymbol })] }), (0, import_jsx_runtime74.jsxs)("div", { children: [(0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card__info", children: [(0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", color: "secondary", children: currencySymbol }), (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", color: "primary", children: valueRounded || ((transaction === null || transaction === void 0 ? void 0 : transaction.value) ? transaction.format(transaction.value, { precision: 6 }) : "") })] }), showFiat && transactionValue && (0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card__info", children: [(0, import_jsx_runtime74.jsx)(Typography, { variant: "body_small", color: "secondary", children: "$" }), (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_small", color: "primary", children: getDisplayFiatPrice(amount, currentToken) })] })] })] }), (0, import_jsx_runtime74.jsx)("div", { className: "transaction-card__arrow", children: (0, import_jsx_runtime74.jsx)("span", { children: "↓" }) }), (0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card__destination", children: [(0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card__icon__container", children: [(0, import_jsx_runtime74.jsx)(Icon, { size: "medium", children: (0, import_jsx_runtime74.jsx)(WalletIcon, { walletKey, width: 25, height: 25 }) }), (0, import_jsx_runtime74.jsx)("img", { className: "transaction-card__icon__container__network", src: getIconUrl(currentChainName), alt: currencySymbol, width: 30, height: 30 })] }), (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", color: "primary", className: "transaction-card__wallet-address", children: shortenWalletAddress(transaction.to, 4, 4) })] }), !isGasSponsored && (0, import_jsx_runtime74.jsxs)("div", { className: "transaction-card__total", children: [(0, import_jsx_runtime74.jsxs)("div", { className: "row", "data-testid": "transaction-estimated-gas-fee", children: [(0, import_jsx_runtime74.jsx)("div", { children: (0, import_jsx_runtime74.jsxs)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "flex-row gap-native", children: [t2("dyn_send_transaction.confirmation.data.gas_estimate"), (0, import_jsx_runtime74.jsx)(Tooltip, { content: t2("dyn_send_transaction.confirmation.data.gas_tooltip"), copykey: t2("dyn_send_transaction.confirmation.data.gas_tooltip"), className: "transaction-confirmation", children: (0, import_jsx_runtime74.jsx)(Icon, { size: "small", className: "fee-tooltip", children: (0, import_jsx_runtime74.jsx)(SvgTooltip, {}) }) })] }) }), showFiat && (currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) ? (0, import_jsx_runtime74.jsxs)("div", { className: "flex-row", children: [(0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", children: "~ $" }), (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "primary", children: Number(gasFiatValue) <= 0.01 ? "<0.01" : gasFiatValue })] }) : (0, import_jsx_runtime74.jsxs)("div", { className: "flex-row gap-native", children: [(0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "primary", children: transaction.fee.gas ? transaction.format(transaction.fee.gas, { precision: 6 }) : "--" }), (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", children: currency })] })] }), (currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) && (0, import_jsx_runtime74.jsxs)("div", { className: "row", "data-testid": "transaction-total", children: [(0, import_jsx_runtime74.jsx)("div", { children: (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", weight: "bold", color: "primary", children: t2("dyn_send_transaction.confirmation.data.total") }) }), !showFiat ? (0, import_jsx_runtime74.jsxs)("div", { className: "flex-row gap-native", children: [(0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", weight: "bold", color: "primary", children: total ? transaction.format(total, { precision: 6 }) : t2("dyn_send_transaction.confirmation.not_applied") }), (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", weight: "bold", color: "primary", children: currency })] }) : (0, import_jsx_runtime74.jsxs)("div", { className: "flex-row", children: [(0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", color: "primary", children: "~ $" }), (0, import_jsx_runtime74.jsx)(Typography, { variant: "body_normal", color: "primary", children: Number(totalGasFiatValue) <= 0.01 ? "<0.01" : totalGasFiatValue })] })] })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.js
var TransactionConfirmationPageLayout = ({ onClickClose, isLoading, onClickBack, onClickSend, disableSendButton, displayPoweredByDynamicFooter = false, alert, walletConnector, transaction, currentToken, children, hideModal, onSuccess, transactionValue, total, isGasSponsored, isNativeToken, walletKey }) => {
  var _a;
  const { t: t2 } = useTranslation();
  const { isTurnkeyWallet } = useIsTurnkeyWallet();
  const { setShowAuthFlow, showFiat } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { userNeedsCrossDomainPasskey } = usePasskeyContext();
  const { initPasskeyRecoveryProcess, shouldInitRecovery } = usePasskeyRecovery();
  const { currency } = useFetchCurrency(walletConnector);
  const currencySymbol = useCurrencySymbol(currentToken, currency);
  const { nativePrice } = useSendBalanceState();
  useHandleRecovery(walletConnector, usingSessionKey, onSuccess, shouldInitRecovery, initPasskeyRecoveryProcess, hideModal);
  const handleSubmitWithChecks = useHandleSubmitWithChecks({
    isTurnkeyWallet,
    onClickSend,
    userNeedsCrossDomainPasskey,
    usingSessionKey,
    walletConnector
  }, { initPasskeyRecoveryProcess, shouldInitRecovery }, { setShowAuthFlow, setView });
  const closeButton = onClickClose && (0, import_jsx_runtime75.jsx)(IconButton, { type: "button", onClick: onClickClose, "data-testid": "close", disabled: isLoading, children: (0, import_jsx_runtime75.jsx)(SvgClose, {}) });
  const backButton = onClickBack && (0, import_jsx_runtime75.jsx)(IconButton, { type: "button", onClick: onClickBack, "data-testid": "back-button", children: (0, import_jsx_runtime75.jsx)(SvgArrowLeft, {}) });
  const gasFiatValue = getGasFiatValue(currentToken, transaction, nativePrice);
  const totalGasFiatValue = getTotalFiatCost(currentToken, transaction, nativePrice, transactionValue);
  return hideModal ? null : (0, import_jsx_runtime75.jsxs)(import_jsx_runtime75.Fragment, { children: [(0, import_jsx_runtime75.jsx)(ModalHeader, { trailing: closeButton, leading: backButton, alignContent: "bottom", children: (0, import_jsx_runtime75.jsx)("div", { className: "send-balance-page-layout__header-content", children: (0, import_jsx_runtime75.jsx)(Typography, { variant: "title", color: "primary", copykey: "dyn_send_transaction.data.confirmation_tx", children: t2("dyn_send_transaction.data.confirmation_tx") }) }) }), (0, import_jsx_runtime75.jsx)(PasskeyCreatedSuccessBanner, {}), (0, import_jsx_runtime75.jsxs)("div", { className: "transaction-confirmation__body", children: [(0, import_jsx_runtime75.jsxs)("div", { className: "transaction-confirmation__content", children: [(0, import_jsx_runtime75.jsx)(TransactionCard, { transaction, currentToken, currencySymbol, valueRounded: (_a = getValueRounded(Boolean(isNativeToken), transaction)) === null || _a === void 0 ? void 0 : _a.toString(), showFiat, transactionValue, isGasSponsored, gasFiatValue: gasFiatValue || "0", totalGasFiatValue: totalGasFiatValue || "0", currency, total, t: t2, walletKey }), (0, import_jsx_runtime75.jsx)("div", { className: "transaction-confirmation__rows", children })] }), (0, import_jsx_runtime75.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime75.jsx)(VerticalDrawerTransition, {}), children: alert && (0, import_jsx_runtime75.jsx)("div", { className: "transaction-confirmation__warning", children: alert }) }), (0, import_jsx_runtime75.jsxs)("div", { className: "transaction-confirmation__actions", children: [(onClickBack || onClickClose) && (0, import_jsx_runtime75.jsx)(TypographyButton, { buttonVariant: "primary", buttonPadding: "small", onClick: onClickBack || onClickClose, expanded: true, disabled: isLoading, copykey: "dyn_send_transaction.confirmation.cancel_button", children: t2("dyn_send_transaction.confirmation.cancel_button") }), (0, import_jsx_runtime75.jsx)(TypographyButton, { buttonVariant: "brand-primary", buttonPadding: "small", onClick: handleSubmitWithChecks, expanded: true, loading: isLoading, disabled: disableSendButton, copykey: "dyn_send_transaction.confirmation.send", startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime75.jsx)(Icon, { size: "small", color: "text-secondary", children: (0, import_jsx_runtime75.jsx)(SvgSend, {}) })
  ), dataTestId: "transaction-confirmation-send", children: t2("dyn_send_transaction.confirmation.send") })] }), displayPoweredByDynamicFooter && (0, import_jsx_runtime75.jsx)(PoweredByDynamic, { classNameRoot: "transaction-confirmation__footer" })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/TransactionConfirmationView/hooks/useTransactionTotal/useTransactionTotal.js
var import_react116 = __toESM(require_react(), 1);
var useTransactionTotal = ({ transactionValue, gasTotalPrice, isGasSponsored = false }) => (0, import_react116.useMemo)(() => {
  if (isGasSponsored) {
    return transactionValue !== void 0 ? transactionValue : BigInt(0);
  }
  if (gasTotalPrice !== void 0 && transactionValue !== void 0) {
    return gasTotalPrice + transactionValue;
  }
  return transactionValue || gasTotalPrice;
}, [gasTotalPrice, transactionValue, isGasSponsored]);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/TransactionConfirmationView/TransactionConfirmationView.js
var FEE_REFRESH_INTERVAL = 2e4;
var TransactionConfirmationView = ({ transaction, onError, onSuccess, mutation, onClickBack, walletConnector, onClickClose, title: title2, displayPoweredByDynamicFooter = false, copykey, hideModal, currentToken, isNativeToken, transactionValue, isModal }) => {
  const { appName, appLogoUrl, primaryWallet } = useInternalDynamicContext();
  const appOrigin = getAppOrigin();
  const [isGasSponsored, setIsGasSponsored] = (0, import_react117.useState)(false);
  const update = useForceUpdate();
  const { t: t2 } = useTranslation();
  const { currency } = useFetchCurrency(walletConnector);
  const { chainName } = useSendBalanceState();
  const fetchTransactionFee = () => {
    if (chainName === "Solana" && transaction.fee.gas !== void 0)
      return;
    transaction.fetchFee().finally(update);
  };
  const { isLoading: isGasSponsoredLoading } = usePromise(() => {
    if (!isAccountAbstractionConnector(walletConnector)) {
      return false;
    }
    return walletConnector.canSponsorTransactionGas(transaction);
  }, {
    initialData: false,
    onReject: logger2.error,
    onResolve: (isGasSponsored2) => {
      setIsGasSponsored(isGasSponsored2);
      if (!isGasSponsored2 && isAccountAbstractionConnector(walletConnector)) {
        walletConnector.disableGasSponsorshipOnce();
      }
    }
  });
  const { mutate: send, isLoading, error: transactionError } = useMutation(mutation, {
    onFailure: (error) => {
      fetchTransactionFee();
      if (TransactionGasCannotBeSponsoredError.isInstance(error)) {
        logger2.debug(error);
        setIsGasSponsored(false);
        if (isAccountAbstractionConnector(walletConnector)) {
          walletConnector.disableGasSponsorshipOnce();
        }
      }
      logger2.error(error);
      onError === null || onError === void 0 ? void 0 : onError(error);
    },
    onSuccess: (tx) => onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(tx)
  });
  useInterval(fetchTransactionFee, isLoading ? null : FEE_REFRESH_INTERVAL);
  useEffectOnce(fetchTransactionFee);
  const total = useTransactionTotal({
    gasTotalPrice: transaction.fee.gas,
    isGasSponsored,
    transactionValue: transaction.value
  });
  const errorMessage = transactionError && transactionErrorMessage(transactionError);
  const { data: balance, isLoading: isBalanceLoading } = usePromise(() => transaction.getBalance());
  const hasInsufficientFunds = (0, import_react117.useMemo)(() => {
    if (!total || !balance)
      return false;
    return balance < total;
  }, [balance, total]);
  const missingFunds = (0, import_react117.useMemo)(() => {
    if (!total || !balance)
      return void 0;
    return total - balance;
  }, [total, balance]);
  const alert = (0, import_react117.useMemo)(() => {
    if (transaction.notEnoughFundsError) {
      return (0, import_jsx_runtime76.jsx)(Alert, { icon: "error", variant: "error", copykey: "dyn_send_transaction.warning_message.not_enough_solana", children: t2("dyn_send_transaction.warning_message.not_enough_solana") });
    } else if (transaction.value === void 0) {
      return (0, import_jsx_runtime76.jsx)(Alert, { icon: "error", variant: "warning", contentDataTestId: "warning_content", copykey: "dyn_send_transaction.warning_message.failed_simulation", children: t2("dyn_send_transaction.warning_message.failed_simulation") });
    }
    if (errorMessage)
      return null;
    if (TransactionGasCannotBeSponsoredError.isInstance(transactionError)) {
      return (0, import_jsx_runtime76.jsx)(Alert, { icon: "error", variant: "error", copykey: "dyn_send_transaction.error_message.gas_not_sponsored", children: t2("dyn_send_transaction.error_message.gas_not_sponsored") });
    }
    if (!isNativeToken && !isGasSponsoredLoading && !isBalanceLoading && missingFunds === void 0 && transaction.fee.gas) {
      return (0, import_jsx_runtime76.jsx)(Alert, { icon: "error", variant: "warning", contentDataTestId: "warning_content", copykey: "dyn_send_transaction.warning_message.insufficient_gas_funds", children: t2("dyn_send_transaction.warning_message.insufficient_gas_funds", {
        amountLeft: transaction.format(transaction.fee.gas, {
          precision: 6
        }),
        currencySymbol: currency
      }) });
    }
    const showInsufficientFundsWarningMessage = hasInsufficientFunds && missingFunds;
    if (!showInsufficientFundsWarningMessage)
      return;
    const amountLeft = transaction.format(missingFunds, { precision: 5 });
    return (0, import_jsx_runtime76.jsx)(Alert, { icon: "error", variant: "warning", contentDataTestId: "warning_content", copykey: "dyn_send_transaction.warning_message.insufficient_funds", children: t2("dyn_send_transaction.warning_message.insufficient_funds", {
      amountLeft,
      currencySymbol: currency
    }) });
  }, [
    transaction,
    errorMessage,
    transactionError,
    hasInsufficientFunds,
    missingFunds,
    t2,
    currency,
    transaction.fee.gas,
    isNativeToken,
    isLoading
  ]);
  return (0, import_jsx_runtime76.jsxs)(TransactionConfirmationPageLayout, { onClickBack, onClickClose, copykey, title: title2, appOrigin, appName, appLogoUrl, hideModal, isLoading, onClickSend: () => send(), onSuccess: (tx) => onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(tx), displayPoweredByDynamicFooter, disableSendButton: isBalanceLoading, error: errorMessage, alert, walletConnector, transaction, total, currentToken, transactionValue, isNativeToken, isGasSponsored, isGasSponsoredLoading, walletKey: (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.key) || "", children: [(0, import_jsx_runtime76.jsxs)("div", { className: "row flex", "data-testid": "transaction-wallet_used", children: [(0, import_jsx_runtime76.jsx)(Typography, { weight: "regular", color: "secondary", className: "label", children: t2("dyn_send_transaction.confirmation.data.wallet_used") }), (0, import_jsx_runtime76.jsxs)(Typography, { weight: "regular", color: "primary", className: "flex gap", children: [(0, import_jsx_runtime76.jsx)(WalletIcon, { walletKey: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.key, width: 20, height: 20 }), " ", shortenWalletAddress(transaction.from, 4, 4)] })] }), isModal && (0, import_jsx_runtime76.jsxs)(import_jsx_runtime76.Fragment, { children: [(0, import_jsx_runtime76.jsxs)("div", { className: "row flex", "data-testid": "transaction-destination", children: [(0, import_jsx_runtime76.jsx)(Typography, { weight: "regular", color: "secondary", className: "label", children: t2("dyn_send_transaction.confirmation.data.destination") }), (0, import_jsx_runtime76.jsxs)(Typography, { weight: "regular", color: "primary", className: "flex gap", children: [(0, import_jsx_runtime76.jsx)(WalletIcon, { walletKey: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.key, width: 20, height: 20 }), " ", shortenWalletAddress(transaction.to, 4, 4)] })] }), (0, import_jsx_runtime76.jsxs)("div", { className: "row flex", "data-testid": "transaction-amount", children: [(0, import_jsx_runtime76.jsx)(Typography, { weight: "regular", color: "secondary", className: "label", children: t2("dyn_send_transaction.confirmation.data.amount") }), (0, import_jsx_runtime76.jsx)(Typography, { weight: "regular", color: "primary", className: "flex gap", children: transaction.value ? transaction.format(transaction.value, { precision: 6 }) : "" })] })] }), (0, import_jsx_runtime76.jsxs)("div", { className: "row flex", "data-testid": "transaction-network_used", children: [(0, import_jsx_runtime76.jsx)(Typography, { weight: "regular", color: "secondary", className: "label", children: t2("dyn_send_transaction.confirmation.data.network_used") }), (0, import_jsx_runtime76.jsx)(Typography, { weight: "regular", color: "primary", children: chainName })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useNetworkDataFromWallet/useNetworkDataFromWallet.js
var import_react118 = __toESM(require_react(), 1);
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var import_react_dom19 = __toESM(require_react_dom(), 1);
var import_qrcode17 = __toESM(require_browser(), 1);
var useNetworkDataFromWallet = (wallet) => {
  var _a, _b;
  const { data: network } = usePromise(() => wallet === null || wallet === void 0 ? void 0 : wallet.connector.getNetwork(), {
    enabled: Boolean(wallet)
  });
  const { networkConfigurations } = useInternalDynamicContext();
  if (!wallet || !network)
    return void 0;
  if (wallet.chain === "SOL") {
    return (_a = networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations.solana) === null || _a === void 0 ? void 0 : _a[0];
  }
  return (_b = networkConfigurations === null || networkConfigurations === void 0 ? void 0 : networkConfigurations[wallet.connector.connectedChain.toLowerCase()]) === null || _b === void 0 ? void 0 : _b.find((_network) => _network.chainId === network);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTokenBalances/useTokenBalances.js
var import_react119 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/chains/balances.js
var getAccountTokenBalances = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, chainName = ChainEnum.Evm, networkId, accountAddress, includeNative = false, includePrices = false, forceRefresh = false }) {
  const customHeaders = forceRefresh ? { "Cache-Control": "no-cache" } : void 0;
  const data = yield sdkApi({ customHeaders }).getAccountBalances({
    accountAddress,
    chainName,
    environmentId,
    includeNative,
    includePrices,
    networkId
  });
  return data;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTokenBalances/useTokenBalances.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
var import_react_dom20 = __toESM(require_react_dom(), 1);
var import_qrcode18 = __toESM(require_browser(), 1);
var useTokenBalances = ({ accountAddress, networkId, chainName = ChainEnum.Evm, tokenAddresses, includeFiat = false, includeNativeBalance = false } = {}) => {
  const tokenBalancesState = useTokenBalancesState();
  const { tokenBalances, isLoading, error } = tokenBalancesState;
  const { primaryWallet, environmentId, network, user } = useInternalDynamicContext();
  const walletConnector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
  const requestChainName = chainName !== null && chainName !== void 0 ? chainName : walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain;
  const requestAccount = accountAddress !== null && accountAddress !== void 0 ? accountAddress : primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address;
  const requestNetwork = networkId !== null && networkId !== void 0 ? networkId : network;
  const fetchAccountBalances = (0, import_react119.useCallback)((...args_1) => __awaiter(void 0, [...args_1], void 0, function* (forceRefresh = false) {
    if (!user) {
      setTokenBalanceVariable("error", USER_NOT_LOGGED_IN);
      return;
    }
    if (![ChainEnum.Evm, ChainEnum.Sol].includes(requestChainName)) {
      setTokenBalanceVariable("error", `Chain ${requestChainName} is not supported for token balances`);
      return;
    }
    const isValidEvmRequest = chainName === ChainEnum.Evm && requestNetwork && Object.values(GetAccountBalancesNetworkIdEnum).includes(requestNetwork);
    const isValidRequest = isValidEvmRequest || chainName === ChainEnum.Sol;
    if (isLoading || !requestAccount || !isValidRequest) {
      setTokenBalanceVariable("tokenBalances", void 0);
      return;
    }
    setTokenBalanceVariable("isLoading", true);
    try {
      const response = yield getAccountTokenBalances({
        accountAddress: requestAccount,
        chainName: requestChainName,
        environmentId,
        forceRefresh,
        includeNative: includeNativeBalance,
        includePrices: includeFiat,
        networkId: chainName === ChainEnum.Evm ? Number(requestNetwork) : 0
      });
      if (!response)
        return;
      setTokenBalanceVariable("error", void 0);
      setTokenBalanceVariable("tokenBalances", response);
    } catch (e2) {
      const errorMessage = (e2 === null || e2 === void 0 ? void 0 : e2.code) === 429 ? "Too many requests fetching balances" : e2 === null || e2 === void 0 ? void 0 : e2.message;
      setTokenBalanceVariable("error", errorMessage);
    } finally {
      setTokenBalanceVariable("isLoading", false);
    }
  }), [
    user,
    requestChainName,
    chainName,
    requestNetwork,
    isLoading,
    requestAccount,
    environmentId,
    includeNativeBalance,
    includeFiat
  ]);
  useInternalDynamicEvents("tokenBalancesChanged", () => fetchAccountBalances(true));
  (0, import_react119.useEffect)(() => {
    fetchAccountBalances();
  }, [requestAccount, requestNetwork]);
  const lowerTokenAddresses = tokenAddresses === null || tokenAddresses === void 0 ? void 0 : tokenAddresses.map((address) => address.toLowerCase());
  const filteredTokenBalances = lowerTokenAddresses ? tokenBalances === null || tokenBalances === void 0 ? void 0 : tokenBalances.filter((token) => lowerTokenAddresses === null || lowerTokenAddresses === void 0 ? void 0 : lowerTokenAddresses.includes(token.address.toLowerCase())) : tokenBalances;
  return {
    error,
    fetchAccountBalances,
    isError: Boolean(error),
    isLoading,
    tokenBalances: filteredTokenBalances
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SendBalanceView/SendBalanceView.js
var zeroAddress2 = "0x0000000000000000000000000000000000000000";
var nativeSolanaAddress2 = "11111111111111111111111111111111";
var usingNative = (token) => token.address === zeroAddress2 || token.address === nativeSolanaAddress2;
var getTransactionValue = (transaction, isNativeToken) => {
  if (isNativeToken)
    return transaction.value ? transaction.format(transaction.value, { precision: 6 }) : "0";
  return transaction.nonNativeValue && transaction.formatNonNativeToken ? transaction.formatNonNativeToken(transaction.nonNativeValue, transaction.nonNativeDecimal || 18) : "0";
};
var SendBalanceView = ({ initialRecipientAddress = "", initialValue, onClickBack, onClickClose, onError, onSuccess, onDone, displayPoweredByDynamicFooter = false }) => {
  const [stage, setStage] = (0, import_react120.useState)("form");
  const { primaryWallet, walletUiUtils } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const [isNativeToken, setIsNativeToken] = (0, import_react120.useState)(false);
  const [currentToken, setCurrentToken] = (0, import_react120.useState)(void 0);
  const [tokenBalances, setTokenBalances] = (0, import_react120.useState)(void 0);
  const { showFiat } = useInternalDynamicContext();
  const walletConnector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
  const { chain } = useFetchChain(walletConnector);
  const { chainName } = useSendBalanceState();
  const { tokenBalances: unorderedTokenBalances, isLoading } = useTokenBalances({
    chainName: (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === "SOL" ? ChainEnum.Sol : ChainEnum.Evm,
    includeFiat: showFiat,
    includeNativeBalance: true
  });
  if (!primaryWallet) {
    throw new DynamicError("Primary wallet is not available, send balance cannot be displayed");
  }
  const moveNativeTokenToFirstPosition = (tokenBalances2) => {
    const filteredArray = tokenBalances2.filter((t3) => t3.address !== zeroAddress2 && t3.address !== nativeSolanaAddress2);
    const nativeToken = tokenBalances2.find((t3) => usingNative(t3));
    return nativeToken ? [nativeToken].concat(filteredArray) : filteredArray;
  };
  if (walletConnector && !isSendBalanceWalletConnector(walletConnector)) {
    throw new DynamicError("Primary wallet is not eligible for this operation. It must implement ISendBalanceWalletConnector");
  }
  const [transaction, setTransaction] = (0, import_react120.useState)(null);
  (0, import_react120.useEffect)(() => {
    const evmChain = (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) !== "SOL" ? getEvmChainName(Number(chain === null || chain === void 0 ? void 0 : chain.chainId)) : void 0;
    setSendBalanceVariable("chainName", evmChain || (chain === null || chain === void 0 ? void 0 : chain.name) || (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain));
    return () => {
      resetSendBalanceState();
    };
  }, [chain === null || chain === void 0 ? void 0 : chain.name, walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain]);
  (0, import_react120.useEffect)(() => {
    if (unorderedTokenBalances)
      setTokenBalances(moveNativeTokenToFirstPosition(unorderedTokenBalances));
  }, [unorderedTokenBalances]);
  (0, import_react120.useEffect)(() => {
    if (!walletConnector)
      return;
    if (currentToken)
      setIsNativeToken(usingNative(currentToken));
    walletConnector.createUiTransaction(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address).then((transaction2) => {
      if (initialRecipientAddress)
        transaction2.to = initialRecipientAddress;
      if (initialValue)
        transaction2.value = initialValue;
      if (currentToken && !usingNative(currentToken)) {
        transaction2.nonNativeAddress = currentToken === null || currentToken === void 0 ? void 0 : currentToken.address;
        transaction2.nonNativeValue = BigInt(0);
        transaction2.nonNativeDecimal = currentToken === null || currentToken === void 0 ? void 0 : currentToken.decimals;
      }
      setTransaction(transaction2);
    }).catch((error) => {
      logger2.debug("[SendBalanceView] Error creating transaction", error);
      if (error instanceof DynamicError && error.code === "0") {
        onDone === null || onDone === void 0 ? void 0 : onDone();
        return;
      }
      onError === null || onError === void 0 ? void 0 : onError(error);
    });
  }, [currentToken]);
  const networkData = useNetworkDataFromWallet(primaryWallet);
  if (!transaction || !networkData) {
    return (0, import_jsx_runtime79.jsx)("div", { className: "send-balance-widget-view__spinner", "data-testid": "send-balance-spinner", children: (0, import_jsx_runtime79.jsx)(Spinner, {}) });
  }
  const handleSuccessToRefreshBalance = (txHash) => __awaiter(void 0, void 0, void 0, function* () {
    if ((walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === "SOL") {
      setTimeout(() => dynamicEvents.emit("tokenBalancesChanged"), 5e3);
    }
    if (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.confirmTransactionStatus) {
      yield walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.confirmTransactionStatus(txHash);
      dynamicEvents.emit("tokenBalancesChanged");
    }
  });
  const networkCurrency = (currentToken === null || currentToken === void 0 ? void 0 : currentToken.symbol) || networkData.nativeCurrency.symbol;
  const currencyIcon = chain && (0, import_jsx_runtime79.jsx)(ChainIcon, { chain, chainName });
  const buildFormStage = () => (0, import_jsx_runtime79.jsx)(SendBalancePageLayout, { transaction, onClickBack, networkName: networkData.vanityName || networkData.name, networkIcon: currencyIcon, networkCurrencyDecimals: networkData.nativeCurrency.symbol === "SOL" ? 9 : networkData.nativeCurrency.decimals, walletAddress: shortenWalletAddress(currentToken === null || currentToken === void 0 ? void 0 : currentToken.address, 3, 3), walletKey: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.key, onClickClose, displayPoweredByDynamicFooter, onSubmit: () => setStage("confirmation"), tokenBalances: tokenBalances !== null && tokenBalances !== void 0 ? tokenBalances : currentToken && [currentToken], currentToken, setCurrentToken, isLoading, isNativeToken });
  const buildTransactionStage = () => (0, import_jsx_runtime79.jsx)(TransactionConfirmationView, { walletConnector: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector, transaction, mutation: () => {
    walletUiUtils.disabledConfirmationOnce();
    return transaction.submit();
  }, copykey: "dyn_send_transaction.confirmation.title", title: t2("dyn_send_transaction.confirmation.title"), onClickBack: () => setStage("form"), onError, displayPoweredByDynamicFooter, onSuccess: (txHash) => __awaiter(void 0, void 0, void 0, function* () {
    if (!txHash)
      return;
    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(txHash);
    setStage("success");
    handleSuccessToRefreshBalance(txHash);
  }), currentToken, isNativeToken, transactionValue: getTransactionValue(transaction, isNativeToken) });
  const buildSuccessState = () => {
    var _a;
    return (0, import_jsx_runtime79.jsx)(TransactionStatusLayout, { transactionValue: getTransactionValue(transaction, isNativeToken), destinationAddress: (_a = transaction.to) !== null && _a !== void 0 ? _a : "", networkCurrency, networkName: chainName || "", NetworkIcon: currencyIcon, onClickClose, onDone: () => onDone === null || onDone === void 0 ? void 0 : onDone(), displayPoweredByDynamicFooter, transaction, currentToken, isNativeToken });
  };
  const getCurrentView = () => {
    switch (stage) {
      case "form":
        return buildFormStage();
      case "confirmation":
        return buildTransactionStage();
      case "success":
        return buildSuccessState();
    }
  };
  return getCurrentView();
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/SendBalanceModal/SendBalanceModal.js
var import_qrcode20 = __toESM(require_browser(), 1);
var SendBalanceModal = ({ initialRecipientAddress, initialValue, onReject, onSuccess }) => {
  usePreventPageScroll(true);
  const [show, setShow] = (0, import_react121.useState)(true);
  const errorRef = (0, import_react121.useRef)(null);
  const receiptRef = (0, import_react121.useRef)(null);
  const handleOnModalUnmount = (0, import_react121.useCallback)(() => {
    if (receiptRef.current) {
      onSuccess(receiptRef.current);
      return;
    }
    onReject(errorRef.current || new UserRejectedTransactionError());
  }, [onReject, onSuccess]);
  const closeModal = () => {
    setShow(false);
  };
  return (0, import_jsx_runtime80.jsx)(Portal, { handleClose: closeModal, isShown: show, zIndex: authModalZIndex, withBackdrop: true, elementId: "dynamic-send-balance", transitionEvents: {
    onUnmount: handleOnModalUnmount
  }, children: (0, import_jsx_runtime80.jsx)(Modal, { children: (0, import_jsx_runtime80.jsx)(ModalCard, { children: (0, import_jsx_runtime80.jsx)(VerticalDrawerTransition, { isShown: true, children: (0, import_jsx_runtime80.jsx)(SendBalanceView, { initialRecipientAddress, initialValue, onError: (error) => errorRef.current = error, onClickClose: closeModal, onDone: closeModal, displayPoweredByDynamicFooter: true, onSuccess: (receipt) => {
    errorRef.current = null;
    receiptRef.current = receipt;
  } }) }) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SendBalanceContext/SendBalanceContext.errors.js
var noWalletError = new DynamicError("No wallet connected");
var invalidWalletTypeError = new DynamicError("Primary wallet must use embedded wallet");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SendBalanceContext/SendBalanceContext.js
var SendBalanceContext = (0, import_react122.createContext)(void 0);
var SendBalanceContextProvider = ({ children }) => {
  const { primaryWallet } = useInternalDynamicContext();
  const { open, modal } = useConfirmationModal({
    elementId: "dynamic-send-balance"
  });
  const openSendBalanceModal = (0, import_react122.useCallback)((props) => __awaiter(void 0, void 0, void 0, function* () {
    return open((resolve, reject) => {
      if (!primaryWallet) {
        throw noWalletError;
      }
      if (!isSendBalanceWalletConnector(primaryWallet.connector)) {
        throw invalidWalletTypeError;
      }
      return (0, import_jsx_runtime81.jsx)(SendBalanceModal, { onReject: reject, onSuccess: resolve, initialRecipientAddress: props === null || props === void 0 ? void 0 : props.recipientAddress, initialValue: props === null || props === void 0 ? void 0 : props.value });
    });
  }), [open, primaryWallet]);
  return (0, import_jsx_runtime81.jsxs)(SendBalanceContext.Provider, { value: { open: openSendBalanceModal }, children: [modal, children] });
};
var useSendBalance = () => {
  const context = (0, import_react122.useContext)(SendBalanceContext);
  if (context === void 0) {
    throw new Error("usage of useSendBalance not wrapped in `SendBalanceContextProvider`.");
  }
  const passkeyContext = (0, import_react122.useContext)(PasskeyContext);
  if (passkeyContext === void 0) {
    throw new Error("usage of useSendBalance not wrapped in `PasskeyContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FundingContext/FundingContext.js
var FundingContext = (0, import_react123.createContext)(void 0);
var FundingContextProvider = ({ children }) => {
  var _a, _b;
  const fundingRef = (0, import_react123.useRef)(null);
  const [showFunding, setShowFunding] = (0, import_react123.useState)(false);
  const [supportsFunding, setSupportsFunding] = (0, import_react123.useState)(false);
  const [fundingUrl, setFundingUrl] = (0, import_react123.useState)("");
  const { environmentId, network, primaryWallet, projectSettings } = useInternalDynamicContext();
  const fundingEnabled = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) === null || _a === void 0 ? void 0 : _a.some((p) => isOnrampProvider(p) && Boolean(p.enabledAt))) !== null && _b !== void 0 ? _b : false;
  const updateSupportsFunding = (0, import_react123.useCallback)((...args_1) => __awaiter(void 0, [...args_1], void 0, function* ({ address, token } = {}) {
    var _c;
    if (!fundingEnabled)
      return;
    if (!primaryWallet)
      return;
    const chainName = (_c = getChainInfo(primaryWallet.chain)) === null || _c === void 0 ? void 0 : _c.name;
    if (!chainName)
      return;
    const bitcoinAddress = isBitcoinConnector(primaryWallet.connector) && getWalletAdditionalAddressByType(WalletAddressType.Payment, primaryWallet);
    const chainHasNetwork = network && chainName === "evm";
    try {
      const [{ url }] = yield getOnrampProviders({
        chain: chainName,
        environmentId,
        networkId: chainHasNetwork ? network.toString() : void 0,
        token,
        walletAddress: address || bitcoinAddress || primaryWallet.address
      });
      if (!url)
        throw new Error("No onramp url found");
      setFundingUrl(url);
      setSupportsFunding(true);
    } catch (error) {
      setSupportsFunding(false);
    }
  }), [environmentId, fundingEnabled, network, primaryWallet]);
  const value = (0, import_react123.useMemo)(() => ({
    fundingEnabled,
    fundingRef,
    fundingUrl,
    setShowFunding,
    showFunding,
    supportsFunding,
    updateSupportsFunding
  }), [
    fundingEnabled,
    fundingUrl,
    showFunding,
    supportsFunding,
    updateSupportsFunding
  ]);
  (0, import_react123.useEffect)(() => {
    updateSupportsFunding();
  }, [environmentId, fundingEnabled, network, primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address]);
  return (0, import_jsx_runtime82.jsx)(FundingContext.Provider, { value, children });
};
var useFundingContext = () => {
  const context = (0, import_react123.useContext)(FundingContext);
  if (context === void 0) {
    throw new Error("usage of useFundingContext not wrapped in `FundingContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DotsMenuDropdown/DotsMenuDropdown.js
var import_qrcode23 = __toESM(require_browser(), 1);
var DotsMenuDropdown = ({ options: options2, setShowMenu }) => (0, import_jsx_runtime83.jsx)("div", { className: "dots-menu-dropdown__container", style: { zIndex: tooltipZIndex }, children: options2.map((option) => option.hide ? null : (0, import_jsx_runtime83.jsxs)("div", { className: "dots-menu-dropdown__item", onClick: () => {
  option.callback();
  setShowMenu(false);
}, children: [option.Icon && (0, import_jsx_runtime83.jsx)(Icon, { color: "text-tertiary", children: option.Icon }), (0, import_jsx_runtime83.jsxs)(Typography, { className: "dots-menu-dropdown__item-text", color: option.fontColor ? option.fontColor : "secondary", weight: option.fontWeight, children: [option.text, " ", option.badge ? (0, import_jsx_runtime83.jsx)(Badge, { text: option.badge }) : null] }), option.endSlot && (0, import_jsx_runtime83.jsx)("div", { className: "dots-menu-dropdown__item__end-slot", children: option.endSlot })] }, option.text)) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/three-dots.js
var React25 = __toESM(require_react(), 1);
var _path8;
var _excluded11 = ["title", "titleId"];
function _extends18() {
  _extends18 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends18.apply(this, arguments);
}
function _objectWithoutProperties11(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose14(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose14(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgThreeDots = function SvgThreeDots2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties11(_ref2, _excluded11);
  return React25.createElement("svg", _extends18({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React25.createElement("title", {
    id: titleId
  }, title2) : null, _path8 || (_path8 = React25.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M8 2a1.333 1.333 0 1 1 0 2.667A1.333 1.333 0 0 1 8 2Zm0 4.667a1.333 1.333 0 1 1 0 2.666 1.333 1.333 0 0 1 0-2.666Zm0 4.666A1.333 1.333 0 1 1 8 14a1.333 1.333 0 0 1 0-2.667Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DotsMenu/DotsMenu.js
var DotsMenu = ({ options: options2, buttonClassName, buttonClassNameWithOpenMenu, direction = "right", iconOverride }) => {
  const dotsMenuRef = (0, import_react125.useRef)(null);
  const popperContentRef = (0, import_react125.useRef)(null);
  const [showMenu, setShowMenu] = (0, import_react125.useState)(false);
  useOnClickOutside(popperContentRef, () => setShowMenu(false));
  return (0, import_jsx_runtime84.jsxs)(import_jsx_runtime84.Fragment, { children: [(0, import_jsx_runtime84.jsx)(IconButton, { ref: dotsMenuRef, onClick: () => setShowMenu(true), "data-testid": "dotsMenu", className: showMenu ? buttonClassNameWithOpenMenu : buttonClassName, children: iconOverride ? iconOverride : (0, import_jsx_runtime84.jsx)(Icon, { children: (0, import_jsx_runtime84.jsx)(SvgThreeDots, {}) }) }), (0, import_jsx_runtime84.jsx)(Dropdown, { isOpen: showMenu, onClickOutside: () => setShowMenu(false), onScroll: () => setShowMenu(false), anchorRef: dotsMenuRef, ref: popperContentRef, anchorOrigin: direction === "right" ? "bottom-left" : "top-right", transformOrigin: direction === "right" ? "top-left" : "bottom-right", children: (0, import_jsx_runtime84.jsx)(DotsMenuDropdown, { options: options2, setShowMenu }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/shortenEmail/shortenEmail.js
var DEFAULT_BREAKPOINT = 12;
var DEFAULT_CUT_END = 4;
var DEFAULT_CUT_START = 4;
var shortenString = (str, start, end) => str.replace(str.substring(start, end), "...");
var shortenEmail = (email, options2) => {
  if (!email)
    return "";
  const breakpoint = (options2 === null || options2 === void 0 ? void 0 : options2.breakpoint) || DEFAULT_BREAKPOINT;
  const cutStart = (options2 === null || options2 === void 0 ? void 0 : options2.cutStart) || DEFAULT_CUT_START;
  const cutEnd = (options2 === null || options2 === void 0 ? void 0 : options2.cutEnd) || DEFAULT_CUT_END;
  let [username, domain] = email.split("@");
  const shouldShortenUsername = (username === null || username === void 0 ? void 0 : username.length) > breakpoint;
  if (shouldShortenUsername) {
    username = shortenString(username, cutStart, username.length - cutEnd);
  }
  const shouldShortenDomain = (domain === null || domain === void 0 ? void 0 : domain.length) > breakpoint;
  if (shouldShortenDomain) {
    domain = shortenString(domain, cutStart, domain.length - cutEnd);
  }
  return `${username}@${domain}`;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js
var import_react_dom26 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/helpers/getPasskeyProviderFromUserAgent.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var import_react126 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/detectBrowser/detectBrowser.js
var detectBrowserName = (customUserAgent) => {
  const userAgent = customUserAgent || navigator.userAgent;
  if (userAgent.match(/brave/i)) {
    return "brave";
  } else if (userAgent.match(/edg/i)) {
    return "edge";
  } else if (userAgent.match(/chrome|chromium|crios/i)) {
    return "chrome";
  } else if (userAgent.match(/firefox|fxios/i)) {
    return "firefox";
  } else if (userAgent.match(/safari/i)) {
    return "safari";
  }
  return void 0;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/helpers/getPasskeyProviderFromUserAgent.js
var getPasskeyProviderFromUserAgent = (userAgent) => {
  const isIPhone2 = userAgent.match(/iPhone/i);
  if (isIPhone2) {
    return "iPhone";
  }
  const isAndroid2 = userAgent.match(/Android/i);
  if (isAndroid2) {
    return "android";
  }
  const browser2 = detectBrowserName(userAgent);
  return browser2;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/helpers/getTimeSince.js
var getTimeSince = (date2) => {
  const { t: t2 } = Locale.getInstance();
  const currentTime = Date.now();
  const timeDifference = currentTime - date2.getTime();
  const minute = 60 * 1e3;
  const hour = 60 * minute;
  const day = 24 * hour;
  const month = 30 * day;
  const year = 365 * day;
  if (timeDifference >= year) {
    const yearsAgo = Math.floor(timeDifference / year);
    return {
      unit: yearsAgo === 1 ? t2("dyn_time_since.year") : t2("dyn_time_since.years"),
      value: yearsAgo
    };
  }
  if (timeDifference >= month) {
    const monthsAgo = Math.floor(timeDifference / month);
    return {
      unit: monthsAgo === 1 ? t2("dyn_time_since.month") : t2("dyn_time_since.months"),
      value: monthsAgo
    };
  }
  if (timeDifference >= day) {
    const daysAgo = Math.floor(timeDifference / day);
    return {
      unit: daysAgo === 1 ? t2("dyn_time_since.day") : t2("dyn_time_since.days"),
      value: daysAgo
    };
  }
  if (timeDifference >= hour) {
    const hoursAgo = Math.floor(timeDifference / hour);
    return {
      unit: hoursAgo === 1 ? t2("dyn_time_since.hour") : t2("dyn_time_since.hours"),
      value: hoursAgo
    };
  }
  if (timeDifference >= minute) {
    const minutesAgo = Math.floor(timeDifference / minute);
    return {
      unit: minutesAgo === 1 ? t2("dyn_time_since.minute") : t2("dyn_time_since.minutes"),
      value: minutesAgo
    };
  }
  const secondsAgo = Math.floor(timeDifference / 1e3);
  return {
    unit: secondsAgo === 1 ? t2("dyn_time_since.second") : t2("dyn_time_since.seconds"),
    value: secondsAgo
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js
var import_qrcode24 = __toESM(require_browser(), 1);
var mapPasskeyProviderToIcon = {
  android: (0, import_jsx_runtime86.jsx)(AndroidIcon, {}),
  brave: (0, import_jsx_runtime86.jsx)(BraveIcon, {}),
  chrome: (0, import_jsx_runtime86.jsx)(ChromeIcon, {}),
  edge: (0, import_jsx_runtime86.jsx)(EdgeIcon, {}),
  firefox: (0, import_jsx_runtime86.jsx)(FirefoxIcon, {}),
  iPhone: (0, import_jsx_runtime86.jsx)(AppleIcon, {}),
  opera: (0, import_jsx_runtime86.jsx)(OperaIcon, {}),
  safari: (0, import_jsx_runtime86.jsx)(SafariIcon, {})
};
var PasskeyCard = ({ passkey }) => {
  var _a;
  const { t: t2 } = useTranslation();
  const { setShowAuthFlow } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { setPasskey, setPasskeyIcon } = usePasskeyContext();
  const menuOptions = [
    {
      Icon: null,
      callback: () => {
        setShowAuthFlow(true);
        setPasskey(passkey);
        setPasskeyIcon(() => {
          var _a2;
          return (_a2 = PasskeyProviderIcon()) !== null && _a2 !== void 0 ? _a2 : void 0;
        });
        setView("rename-passkey");
      },
      text: "Rename"
    }
  ];
  const [showTooltip, setShowTooltip] = (0, import_react127.useState)(false);
  const { value: timeSinceValue, unit: timeSinceUnit } = getTimeSince(passkey.createdAt);
  const PasskeyProviderIcon = () => {
    if (!passkey.userAgent)
      return null;
    const provider = getPasskeyProviderFromUserAgent(passkey.userAgent);
    if (!provider)
      return null;
    return mapPasskeyProviderToIcon[provider];
  };
  const getPasskeyProviderName = () => {
    if (!passkey.userAgent)
      return null;
    const provider = getPasskeyProviderFromUserAgent(passkey.userAgent);
    if (!provider)
      return null;
    return t2(`dyn_manage_passkeys.passkey_providers.${provider}`);
  };
  const handleShowTooltip = () => {
    setShowTooltip(true);
    setTimeout(() => {
      setShowTooltip(false);
    }, 2e3);
  };
  return (0, import_jsx_runtime86.jsxs)("div", { className: "passkey-card", children: [(0, import_jsx_runtime86.jsx)("div", { className: "passkey-card__info", children: (0, import_jsx_runtime86.jsxs)("div", { className: "passkey-card__info__text", children: [(0, import_jsx_runtime86.jsxs)(Typography, { "data-testid": "passkey-alias", variant: "body_normal", color: "primary", title: passkey.alias, onClick: handleShowTooltip, children: [(0, import_jsx_runtime86.jsxs)("div", { className: "passkey-card__body", children: [(0, import_jsx_runtime86.jsxs)("div", { className: "passkey-card__left", children: [(0, import_jsx_runtime86.jsx)("div", { className: "passkey-card__info__icon", "data-testid": "provider-icon", children: (0, import_jsx_runtime86.jsx)(PasskeyProviderIcon, {}) }), ((_a = passkey.alias) === null || _a === void 0 ? void 0 : _a.includes("@")) ? shortenEmail(passkey.alias, {
    breakpoint: 12,
    cutEnd: 4,
    cutStart: 4
  }) : passkey.alias] }), (0, import_jsx_runtime86.jsx)(DotsMenu, { options: menuOptions })] }), (0, import_jsx_runtime86.jsx)("span", { className: classNames("passkey-card__info__tooltip", {
    "passkey-card__info__tooltip--visible": showTooltip
  }), children: passkey.alias })] }), getPasskeyProviderName() && (0, import_jsx_runtime86.jsxs)(Typography, { variant: "body_small", color: "secondary", children: [t2("dyn_manage_passkeys.passkey_from"), " ", getPasskeyProviderName()] })] }) }), (0, import_jsx_runtime86.jsx)("div", { className: "passkey-card__date", children: (0, import_jsx_runtime86.jsxs)(Typography, { variant: "body_small", color: "secondary", copykey: "dyn_time_since.created", children: [t2("dyn_time_since.created"), " ", `${timeSinceValue} ${timeSinceUnit} ${t2("dyn_time_since.ago")}`] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/PasskeyContext/PasskeyContext.js
var PasskeyContext = (0, import_react128.createContext)(void 0);
var PasskeyContextProviderWithBrowser = ({ children }) => {
  var _a, _b, _c, _d, _e2, _f, _g16, _h;
  const { userHasEmbeddedWallet } = useEmbeddedWallet();
  const { isSessionKeyCompatible, isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet();
  const { environmentId, projectSettings, user } = useInternalDynamicContext();
  const [passkeyEdited, setPasskeyEdited] = (0, import_react128.useState)(false);
  const [passkey, setPasskey] = (0, import_react128.useState)(void 0);
  const [passkeyIcon, setPasskeyIcon] = (0, import_react128.useState)(void 0);
  const [_showSecureAccountBanner, setShowSecureAccountBanner] = useLocalStorage(EMBEDDED_WALLET_SECURE_BANNER, true);
  const showSecureAccountBanner = (0, import_react128.useMemo)(() => {
    var _a2, _b2, _c2, _d2;
    const isPasskeyEnabled = Boolean((_d2 = (_c2 = (_b2 = (_a2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a2 === void 0 ? void 0 : _a2.embeddedWallets) === null || _b2 === void 0 ? void 0 : _b2.supportedSecurityMethods) === null || _c2 === void 0 ? void 0 : _c2.passkey) === null || _d2 === void 0 ? void 0 : _d2.isEnabled);
    return _showSecureAccountBanner !== false && isTurnkeyWalletWithoutAuthenticator && isPasskeyEnabled;
  }, [
    isTurnkeyWalletWithoutAuthenticator,
    _showSecureAccountBanner,
    (_d = (_c = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.supportedSecurityMethods) === null || _c === void 0 ? void 0 : _c.passkey) === null || _d === void 0 ? void 0 : _d.isEnabled
  ]);
  const showAlert = (0, import_react128.useCallback)(() => {
    var _a2, _b2, _c2, _d2;
    const isPasskeyEnabled = Boolean((_d2 = (_c2 = (_b2 = (_a2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a2 === void 0 ? void 0 : _a2.embeddedWallets) === null || _b2 === void 0 ? void 0 : _b2.supportedSecurityMethods) === null || _c2 === void 0 ? void 0 : _c2.passkey) === null || _d2 === void 0 ? void 0 : _d2.isEnabled);
    const isPregeneratedWalletsWithPasskeyRequired = !showSecureAccountBanner && isTurnkeyWalletWithoutAuthenticator && isPasskeyEnabled;
    return !isSessionKeyCompatible && isPregeneratedWalletsWithPasskeyRequired;
  }, [
    (_h = (_g16 = (_f = (_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _e2 === void 0 ? void 0 : _e2.embeddedWallets) === null || _f === void 0 ? void 0 : _f.supportedSecurityMethods) === null || _g16 === void 0 ? void 0 : _g16.passkey) === null || _h === void 0 ? void 0 : _h.isEnabled,
    showSecureAccountBanner,
    isSessionKeyCompatible,
    isTurnkeyWalletWithoutAuthenticator
  ]);
  const getUserPasskeysResult = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    const data = yield getUserPasskeys({
      environmentId
    });
    return data.passkeys;
  }), {
    deps: [environmentId, user, userHasEmbeddedWallet(), passkeyEdited],
    enabled: Boolean(environmentId && user && userHasEmbeddedWallet())
  });
  const userHasPasskeysForCurrentOrigin = (0, import_react128.useMemo)(() => {
    if (typeof window === "undefined") {
      return false;
    }
    const hostname = PlatformService.getHostname();
    if (!getUserPasskeysResult.data)
      return false;
    return getUserPasskeysResult.data.some((passkey2) => {
      if (!passkey2.origin)
        return false;
      try {
        const passkeyHostname = new URL(passkey2.origin).hostname;
        return passkeyHostname === getTLD() || passkeyHostname === hostname;
      } catch (e2) {
        logger2.error(e2);
        return false;
      }
    });
  }, [getUserPasskeysResult.data]);
  const userNeedsCrossDomainPasskey = !isTurnkeyWalletWithoutAuthenticator && !userHasPasskeysForCurrentOrigin;
  const value = (0, import_react128.useMemo)(() => {
    var _a2;
    return {
      passkey,
      passkeyEdited,
      passkeyIcon,
      setPasskey,
      setPasskeyEdited,
      setPasskeyIcon,
      setShowSecureAccountBanner,
      showAlert,
      showSecureAccountBanner,
      userHasPasskeysForCurrentOrigin,
      userNeedsCrossDomainPasskey,
      userPasskeys: (_a2 = getUserPasskeysResult.data) !== null && _a2 !== void 0 ? _a2 : [],
      userPasskeysLoading: getUserPasskeysResult.isLoading
    };
  }, [
    passkey,
    passkeyEdited,
    passkeyIcon,
    userHasPasskeysForCurrentOrigin,
    getUserPasskeysResult.data,
    getUserPasskeysResult.isLoading,
    userNeedsCrossDomainPasskey,
    showAlert,
    setShowSecureAccountBanner,
    showSecureAccountBanner
  ]);
  return (0, import_jsx_runtime87.jsx)(PasskeyContext.Provider, { value, children });
};
var PasskeyContextProvider = ({ children }) => (0, import_jsx_runtime87.jsx)(PasskeyContextProviderWithBrowser, { children });
var usePasskeyContext = () => {
  const context = (0, import_react128.useContext)(PasskeyContext);
  if (context === void 0) {
    throw new Error("usage of PasskeyContext not wrapped in `PasskeyContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useOnlyConnectedMode/useOnlyConnectedMode.js
var useOnlyConnectedMode = () => {
  const { authMode, user } = useInternalDynamicContext();
  return authMode === "connect-only" && !user;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useKYCFlag/useKYCFlag.js
var import_qrcode27 = __toESM(require_browser(), 1);
var useKYCFlag = () => {
  const isOnlyConnectedMode = useOnlyConnectedMode();
  const { projectSettings, user } = useInternalDynamicContext();
  if (isOnlyConnectedMode)
    return false;
  const hasAnyKYCFields = getUserProfileFields({
    customFields: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.customFields,
    projectSettingsKyc: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.kyc,
    user
  });
  return hasAnyKYCFields.length > 0 || isSocialKycEnabled(projectSettings);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/context/DynamicWidgetContext.js
var import_qrcode28 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useViewController/useViewController.js
var import_react131 = __toESM(require_react(), 1);
var useViewController = (initialView2) => {
  const [_view, setView] = (0, import_react131.useState)(null);
  const goToInitialView = () => setView(null);
  return {
    goToInitialView,
    setView,
    view: _view || initialView2
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/context/DynamicWidgetContext.js
var DynamicWidgetContext = (0, import_react132.createContext)(void 0);
var DynamicWidgetContextProvider = ({ children }) => {
  const widgetRef = (0, import_react132.useRef)(null);
  const inlineControlsRef = (0, import_react132.useRef)(null);
  const availableWalletsContainerRef = (0, import_react132.useRef)(null);
  const { setShowDynamicUserProfile, showDynamicUserProfile, multiWallet } = useInternalDynamicContext();
  const isKYCEnabled = useKYCFlag();
  const { view: dynamicWidgetView, setView: setDynamicWidgetView, goToInitialView: goToInitialDynamicWidgetView } = useViewController(isKYCEnabled && !multiWallet ? "profile" : "wallets");
  const goToProfileView = (0, import_react132.useCallback)(() => {
    if (isKYCEnabled)
      return setDynamicWidgetView("profile");
    setDynamicWidgetView("wallets");
  }, [isKYCEnabled, multiWallet]);
  const overridenWidgetView = (0, import_react132.useMemo)(() => {
    if (dynamicWidgetView === "manage-passkeys" || dynamicWidgetView === "manage-mfa")
      return "settings";
    if (!isKYCEnabled && !multiWallet && dynamicWidgetView !== "settings" && dynamicWidgetView !== "profile")
      return "wallets";
    if (dynamicWidgetView === "edit-profile")
      return "profile";
    if (dynamicWidgetView === "global-wallet")
      return "wallets";
    return dynamicWidgetView;
  }, [dynamicWidgetView, isKYCEnabled, multiWallet]);
  useInternalDynamicEvents("logout", () => goToInitialDynamicWidgetView());
  const value = (0, import_react132.useMemo)(() => ({
    availableWalletsContainerRef,
    dynamicWidgetView,
    goToInitialDynamicWidgetView,
    goToProfileView,
    inlineControlsRef,
    isOpen: showDynamicUserProfile,
    overridenWidgetView,
    setDynamicWidgetView,
    setIsOpen: setShowDynamicUserProfile,
    widgetRef
  }), [
    dynamicWidgetView,
    goToInitialDynamicWidgetView,
    goToProfileView,
    showDynamicUserProfile,
    setDynamicWidgetView,
    setShowDynamicUserProfile,
    overridenWidgetView
  ]);
  return (0, import_jsx_runtime90.jsx)(DynamicWidgetContext.Provider, { value, children });
};
var useWidgetContext = () => {
  const context = (0, import_react132.useContext)(DynamicWidgetContext);
  if (context === void 0) {
    throw new Error("usage of useWidgetContext not wrapped in `DynamicWidgetContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js
var import_react_dom49 = __toESM(require_react_dom(), 1);
var import_qrcode47 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetWalletHeader/DynamicWidgetWalletHeader.js
var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
var import_react161 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/add.js
var React26 = __toESM(require_react(), 1);
var _path9;
var _excluded12 = ["title", "titleId"];
function _extends19() {
  _extends19 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends19.apply(this, arguments);
}
function _objectWithoutProperties12(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose15(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose15(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgAdd = function SvgAdd2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties12(_ref2, _excluded12);
  return React26.createElement("svg", _extends19({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React26.createElement("title", {
    id: titleId
  }, title2) : null, _path9 || (_path9 = React26.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M8 2c.368 0 .667.298.667.667v4.666h4.666a.667.667 0 1 1 0 1.334H8.667v4.666a.667.667 0 1 1-1.334 0V8.667H2.667a.667.667 0 0 1 0-1.334h4.666V2.667C7.333 2.298 7.632 2 8 2Z",
    fill: "currentColor",
    fillOpacity: 0.4
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/link.js
var React27 = __toESM(require_react(), 1);
var _path10;
var _excluded13 = ["title", "titleId"];
function _extends20() {
  _extends20 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends20.apply(this, arguments);
}
function _objectWithoutProperties13(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose16(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose16(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgLink = function SvgLink2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties13(_ref2, _excluded13);
  return React27.createElement("svg", _extends20({
    width: 17,
    height: 16,
    viewBox: "0 0 17 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React27.createElement("title", {
    id: titleId
  }, title2) : null, _path10 || (_path10 = React27.createElement("path", {
    d: "M11.833 4.667H9.167V6h2.666c1.1 0 2 .9 2 2s-.9 2-2 2H9.167v1.333h2.666a3.335 3.335 0 0 0 0-6.666Zm-4 5.333H5.167c-1.1 0-2-.9-2-2s.9-2 2-2h2.666V4.667H5.167a3.335 3.335 0 0 0 0 6.666h2.666V10Zm-2-2.667h5.334v1.334H5.833V7.333Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getActiveOauthCredential/getActiveOauthCredential.js
var getActiveOauthCredential = (user) => {
  var _a;
  return (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find((credentials) => credentials.format === "oauth" && credentials.id === user.lastVerifiedCredentialId);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getCustomCountries/getCustomCountries.js
var getCustomCountries = (supportedCountriesForVerification) => {
  const customCountries = R.map(M).map((country) => {
    if (country.iso2 === "br")
      country.format = "(..) .....-....";
    if (country.iso2 === "fr")
      country.format = "(.) .. .. .. ..";
    return Se(country);
  });
  if (supportedCountriesForVerification) {
    return customCountries.filter(([, iso2]) => supportedCountriesForVerification.includes(iso2));
  }
  return customCountries;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/formatPhone/formatPhone.js
var formatPhone = (phone) => {
  var _a;
  const { country } = X({
    // Enables using custom formatting
    countries: getCustomCountries(),
    phone
  });
  if (!country)
    return phone;
  const strippedPhone = de({ dialCode: country.dialCode, phone });
  const mask = Q({ country, phone });
  const regex = /\./g;
  if (((_a = mask.match(regex)) !== null && _a !== void 0 ? _a : []).length !== removeNonDigits(strippedPhone).length)
    return phone;
  let i = 0;
  const formattedPhone = mask.replace(regex, () => strippedPhone[i++]);
  return `+${country.dialCode} ${formattedPhone}`;
};
var removeNonDigits = (text) => text.replace(/\D+/g, "");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getUserIdentifier/getUserIdentifier.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
var import_react133 = __toESM(require_react(), 1);
var getUserIdentifier = (user) => {
  const oauthCredential = getActiveOauthCredential(user);
  if (oauthCredential === null || oauthCredential === void 0 ? void 0 : oauthCredential.publicIdentifier) {
    return oauthCredential.publicIdentifier;
  }
  if (user === null || user === void 0 ? void 0 : user.email)
    return shortenEmail(user.email);
  if (user === null || user === void 0 ? void 0 : user.phoneNumber)
    return formatPhone(user.phoneNumber);
  return "My Profile";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetWalletHeader/DynamicWidgetWalletHeader.js
var import_react_dom48 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserAvatar/UserAvatar.js
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Image/Image.js
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
var import_react134 = __toESM(require_react(), 1);
var Image = ({ src, alt = "", fallback, className, dataTestId }) => {
  const [error, setError] = (0, import_react134.useState)(false);
  const handleError = () => {
    setError(true);
  };
  return src && !error ? (0, import_jsx_runtime92.jsx)("img", { src, alt, onError: handleError, className, "data-testid": dataTestId }) : (0, import_jsx_runtime92.jsx)(import_jsx_runtime92.Fragment, { children: fallback });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserAvatar/UserAvatar.js
var UserAvatar = ({ user, containerClassName, renderWithFallback = true }) => {
  const getConnectedSocialAccountAvatarUrl = () => {
    var _a, _b, _c;
    const avatarUrl = (_c = (_b = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find((credential) => {
      var _a2;
      return user.lastVerifiedCredentialId === credential.id && ((_a2 = credential.oauthAccountPhotos) === null || _a2 === void 0 ? void 0 : _a2.length);
    })) === null || _b === void 0 ? void 0 : _b.oauthAccountPhotos) === null || _c === void 0 ? void 0 : _c[0];
    return avatarUrl;
  };
  const source = getConnectedSocialAccountAvatarUrl();
  if (!source && !renderWithFallback)
    return null;
  return (0, import_jsx_runtime93.jsx)("div", { className: classNames("user-profile-social-account__connected-avatar", containerClassName), children: (0, import_jsx_runtime93.jsx)(Image, { className: "user-profile-social-account__image", src: source, alt: "User avatar", dataTestId: "user-avatar", fallback: (0, import_jsx_runtime93.jsx)(UserProfileIcon, {}) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetWalletHeader/DynamicWidgetWalletHeader.js
var import_qrcode46 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SecureEmbeddedWalletCard/SecureEmbeddedWalletCard.js
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
var import_react135 = __toESM(require_react(), 1);
var import_react_dom31 = __toESM(require_react_dom(), 1);
var import_qrcode29 = __toESM(require_browser(), 1);
var SecureEmbeddedWalletCard = ({ className }) => {
  const { t: t2 } = useTranslation();
  const { primaryWallet } = useInternalDynamicContext();
  const { initPasskeyRecoveryProcess } = usePasskeyRecovery();
  const { showSecureAccountBanner, setShowSecureAccountBanner } = usePasskeyContext();
  const { getEOAWallet } = useSmartWallets();
  const eoaWallet = primaryWallet && getEOAWallet(primaryWallet);
  const isSessionKeyCompatible = primaryWallet && isSessionKeyCompatibleWallet(primaryWallet) || eoaWallet && isSessionKeyCompatibleWallet(eoaWallet);
  if (!showSecureAccountBanner || isSessionKeyCompatible)
    return null;
  return (0, import_jsx_runtime94.jsxs)("div", { className: classNames("secure-embedded-wallet-card", className), children: [(0, import_jsx_runtime94.jsxs)("div", { className: "secure-embedded-wallet-card__text-content", "data-testid": "secure-wallet-button", onClick: () => initPasskeyRecoveryProcess(), children: [(0, import_jsx_runtime94.jsx)(Typography, { variant: "body_small", color: "primary", copykey: "dyn_secure_pregenerated_wallet.description", children: t2("dyn_secure_pregenerated_wallet.description") }), (0, import_jsx_runtime94.jsx)(Typography, { variant: "body_small", weight: "bold", color: "brand-primary", copykey: "dyn_secure_pregenerated_wallet.action", className: "secure-embedded-wallet-card__link", children: t2("dyn_secure_pregenerated_wallet.action") })] }), (0, import_jsx_runtime94.jsx)("div", { children: (0, import_jsx_runtime94.jsx)(IconButton, { color: "text-secondary", onClick: () => setShowSecureAccountBanner(false), children: (0, import_jsx_runtime94.jsx)(SvgClose, { width: 16, height: 16 }) }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveWalletInformation.js
var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
var import_react159 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/chevron-down.js
var React28 = __toESM(require_react(), 1);
var _path11;
var _excluded14 = ["title", "titleId"];
function _extends21() {
  _extends21 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends21.apply(this, arguments);
}
function _objectWithoutProperties14(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose17(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose17(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgChevronDown = function SvgChevronDown2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties14(_ref2, _excluded14);
  return React28.createElement("svg", _extends21({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React28.createElement("title", {
    id: titleId
  }, title2) : null, _path11 || (_path11 = React28.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.862 5.529c.26-.26.682-.26.943 0L8 9.724l4.195-4.195a.667.667 0 1 1 .943.943L8.47 11.138a.667.667 0 0 1-.943 0L2.862 6.472a.667.667 0 0 1 0-.943Z",
    fill: "#7B7D86"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveWalletInformation.js
var import_react_dom46 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/helpers/helpers.js
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
var import_react136 = __toESM(require_react(), 1);
var replaceAll = (text, char, replace3) => {
  const re2 = new RegExp(char, "g");
  return text.replace(re2, replace3);
};
var copyToClipboard = (textToCopy) => {
  navigator.clipboard.writeText(textToCopy);
};
var smartFloor = (value) => Math.floor(ceil(value, 13));
var WITHOUT_DECIMAL_VALUE = 1e3;
var MAX_BALANCE_VALUE = 1e6;
var PRECISION_FLOOR_DIVIDER = 1e4;
var roundBalance = (balanceString, decimals = 4) => {
  const clearedBalance = parseFloat(replaceAll(balanceString, '"', ""));
  if (clearedBalance > MAX_BALANCE_VALUE) {
    const dividedValue = Math.floor(clearedBalance);
    const roundedBalance2 = Math.floor(dividedValue / MAX_BALANCE_VALUE * PRECISION_FLOOR_DIVIDER) / PRECISION_FLOOR_DIVIDER;
    return `${roundedBalance2}M`;
  }
  if (clearedBalance > WITHOUT_DECIMAL_VALUE) {
    return String(Math.floor(clearedBalance));
  }
  const decimalsPrecision = Math.pow(10, decimals);
  const minBalanceValue = 1 / decimalsPrecision;
  if (clearedBalance < minBalanceValue && clearedBalance > 0)
    return `< ${minBalanceValue}`;
  const roundedBalance = smartFloor(clearedBalance * decimalsPrecision) / decimalsPrecision;
  if (roundedBalance === 0)
    return "0.0";
  return String(roundedBalance);
};
var capitalize2 = (text) => text.charAt(0).toUpperCase() + text.slice(1);
var getExportKeysOption = (connector, providerSettings) => {
  var _a;
  if (!connector || !(providerSettings === null || providerSettings === void 0 ? void 0 : providerSettings.length) || !isMagicConnector(connector)) {
    return;
  }
  const keyExportUrl = (_a = providerSettings.find((provider) => provider.provider === ProviderEnum.MagicLink)) === null || _a === void 0 ? void 0 : _a.keyExportUrl;
  if (!keyExportUrl) {
    return;
  }
  return () => {
    window.open(keyExportUrl, "_blank");
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AuthProviderIcon/AuthProviderIcon.js
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
var import_react141 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/embedded-wallet-icon.js
var React29 = __toESM(require_react(), 1);
var _g4;
var _excluded15 = ["title", "titleId"];
function _extends22() {
  _extends22 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends22.apply(this, arguments);
}
function _objectWithoutProperties15(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose18(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose18(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgEmbeddedWalletIcon = function SvgEmbeddedWalletIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties15(_ref2, _excluded15);
  return React29.createElement("svg", _extends22({
    width: 28,
    height: 28,
    viewBox: "0 0 28 28",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React29.createElement("title", {
    id: titleId
  }, title2) : null, _g4 || (_g4 = React29.createElement("g", {
    "data-testid": "wallet-icon-embedded",
    fill: "#4779FF"
  }, React29.createElement("path", {
    d: "M17.5 2.333a2.333 2.333 0 0 1 2.334 2.334h-14a4.654 4.654 0 0 0-3.426 1.497A4.668 4.668 0 0 1 7 2.334h10.5ZM25.666 11.667A4.667 4.667 0 0 0 21 7H7a4.667 4.667 0 0 0-4.667 4.667V21A4.667 4.667 0 0 0 7 25.667h14A4.667 4.667 0 0 0 25.666 21v-9.333Z"
  }))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/pixelToRem/pixelToRem.js
var pixelToRem = (pixel) => `${pixel / 16}rem`;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AuthProviderIcon/AuthProviderIcon.js
var import_react_dom32 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFindSocialIcon/useFindSocialIcon.js
var import_react139 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useColorSchemePreference/useColorSchemePreference.js
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
var import_react138 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useMediaQuery/useMediaQuery.js
var import_react137 = __toESM(require_react(), 1);
var useMediaQuery = (query) => {
  const getMatches = (query2) => {
    if (typeof window !== "undefined") {
      return window.matchMedia(query2).matches;
    }
    return false;
  };
  const [matches, setMatches] = (0, import_react137.useState)(getMatches(query));
  const handleChange = () => setMatches(getMatches(query));
  (0, import_react137.useEffect)(() => {
    const matchMedia = window.matchMedia(query);
    handleChange();
    matchMedia.addEventListener("change", handleChange);
    return () => {
      matchMedia.removeEventListener("change", handleChange);
    };
  }, [query]);
  return matches;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useColorSchemePreference/useColorSchemePreference.js
var useColorSchemePreference = () => {
  const isDarkMode = useMediaQuery("(prefers-color-scheme: dark)");
  return isDarkMode ? "dark" : "light";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIconThemeVariant/useIconThemeVariant.js
var useIconThemeVariant = () => {
  const { theme: { theme: { name } } } = useThemeContext();
  const preference = useColorSchemePreference();
  const variant = name === "auto" ? preference : name;
  return variant;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFindSocialIcon/useFindSocialIcon.js
var useFindSocialIcon = () => {
  const variant = useIconThemeVariant();
  return (0, import_react139.useCallback)((provider) => findSocialIcon(provider, variant), [variant]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AuthProviderIcon/AuthProviderIcon.js
var import_qrcode30 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/WalletIconWithNetwork/WalletIconWithNetwork.js
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
var import_react140 = __toESM(require_react(), 1);
var WalletIconWithNetwork = ({ iconSize: iconSize2 = 24, chainName, Icon: Icon2, showNetwork = true, walletKey }) => {
  const ChainIcon2 = chainName ? getChainIcon(chainName) : void 0;
  return (0, import_jsx_runtime97.jsxs)("div", { className: "wallet-icon-with-network__container", children: [Icon2 ? (0, import_jsx_runtime97.jsx)(Icon2, { style: {
    height: pixelToRem(iconSize2),
    width: pixelToRem(iconSize2)
  } }) : (0, import_jsx_runtime97.jsx)(WalletIcon, { walletKey, style: {
    height: pixelToRem(iconSize2),
    width: pixelToRem(iconSize2)
  } }), ChainIcon2 && showNetwork && (0, import_jsx_runtime97.jsx)("div", { "data-testid": "network-container", className: classNames("wallet-icon-with-network__network-container"), children: (0, import_jsx_runtime97.jsx)(ChainIcon2, {}) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AuthProviderIcon/AuthProviderIcon.js
var getWalletIcon = ({ findSocialIcon: findSocialIcon2, wallet, user }) => {
  if (isEmailOTPWalletConnector(wallet.connector)) {
    return SignInWithEmailIcon;
  }
  if (isSocialWalletConnector(wallet.connector)) {
    const socialAccountDataForWallet = getReferencedAccount(user, wallet.id);
    if (!socialAccountDataForWallet || !socialAccountDataForWallet.oauthProvider) {
      return SignInWithEmailIcon;
    }
    const { oauthProvider } = socialAccountDataForWallet;
    try {
      const MagicSocialWalletIcon = findSocialIcon2(oauthProvider);
      return MagicSocialWalletIcon;
    } catch (err) {
      logger2.error(err);
    }
  }
  if (isEmbeddedConnector(wallet.connector) || isAccountAbstractionConnector(wallet.connector)) {
    return SvgEmbeddedWalletIcon;
  }
  return null;
};
var AuthProviderIcon = ({ iconSize: iconSize2 = 64, showNetworkIcon = false, wallet }) => {
  const { primaryWallet, selectedWalletConnector, user, userWithMissingInfo } = useInternalDynamicContext();
  const { deniedOauthProvider, deniedAddress } = useAccessDeniedContext();
  const { isLoadingEmbeddedWallet } = useWalletContext();
  const findSocialIcon2 = useFindSocialIcon();
  if (deniedOauthProvider) {
    const MagicSocialWalletIcon = findSocialIcon2(deniedOauthProvider);
    if (!MagicSocialWalletIcon) {
      return null;
    }
    return (0, import_jsx_runtime98.jsx)(MagicSocialWalletIcon, { style: {
      height: pixelToRem(iconSize2),
      width: pixelToRem(iconSize2)
    } });
  }
  if (deniedAddress) {
    return (0, import_jsx_runtime98.jsx)(WalletIcon, { walletKey: selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.key, style: { height: pixelToRem(iconSize2), width: pixelToRem(iconSize2) } });
  }
  const walletForIcon = wallet ? wallet : primaryWallet;
  if (!walletForIcon) {
    if (isLoadingEmbeddedWallet) {
      return (0, import_jsx_runtime98.jsx)(WalletIconWithNetwork, { iconSize: iconSize2, Icon: SvgEmbeddedWalletIcon, chainName: "EVM", showNetwork: false });
    }
    return null;
  }
  const Icon2 = getWalletIcon({
    findSocialIcon: findSocialIcon2,
    user: user !== null && user !== void 0 ? user : userWithMissingInfo,
    wallet: walletForIcon
  });
  return (0, import_jsx_runtime98.jsx)(WalletIconWithNetwork, { iconSize: iconSize2, Icon: Icon2 !== null && Icon2 !== void 0 ? Icon2 : null, chainName: walletForIcon.chain, showNetwork: showNetworkIcon, walletKey: walletForIcon.key });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/Balance/Balance.js
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
var import_react143 = __toESM(require_react(), 1);
var import_react_dom34 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useFetchBalance/useFetchBalance.js
var import_react142 = __toESM(require_react(), 1);
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
var import_react_dom33 = __toESM(require_react_dom(), 1);
var import_qrcode31 = __toESM(require_browser(), 1);
var useFetchBalance = ({ wallet, chain, network }) => {
  const [balance, setBalance] = (0, import_react142.useState)("0.0");
  const isFetchBalanceDisabled = !chain || wallet.connector.supportsNetworkSwitching() && !network;
  const fetchBalance = () => __awaiter(void 0, void 0, void 0, function* () {
    if (isFetchBalanceDisabled)
      return;
    const value = yield wallet.getBalance();
    setBalance(value);
  });
  const { isLoading } = usePromise(fetchBalance, {
    deps: [wallet.address, network === null || network === void 0 ? void 0 : network.toString(), chain],
    enabled: !isFetchBalanceDisabled
  });
  return { balance, isLoading };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/Balance/Balance.js
var import_qrcode32 = __toESM(require_browser(), 1);
var Balance = ({ wallet, network, className }) => {
  const { currency, isLoading: isLoadingCurrency } = useFetchCurrency(wallet.connector, network);
  const { balance, isLoading: isLoadingBalance } = useFetchBalance({
    chain: currency,
    network,
    wallet
  });
  if (!balance)
    return null;
  return (0, import_jsx_runtime100.jsxs)(Typography, { className, variant: "body_normal", color: "primary", children: [isLoadingBalance ? (0, import_jsx_runtime100.jsx)(Skeleton, { className: "balance-skeleton" }) : roundBalance(balance), " ", !isLoadingCurrency && (0, import_jsx_runtime100.jsx)(Typography, { as: "span", variant: "body_normal", color: "secondary", children: currency })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useFetchNameService/useFetchNameService.js
var import_react144 = __toESM(require_react(), 1);
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
var import_react_dom35 = __toESM(require_react_dom(), 1);
var import_qrcode33 = __toESM(require_browser(), 1);
var useFetchNameService = (address) => {
  const { getNameService, network } = useInternalDynamicContext();
  const { data: nameService } = usePromise(() => getNameService(address), {
    deps: [address, network, getNameService]
  });
  return nameService;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/NetworkPicker.js
var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
var import_react151 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isNetworkUnsupported/isNetworkUnsupported.js
var isNetworkUnsupported = (network, evmNetworks) => !(evmNetworks === null || evmNetworks === void 0 ? void 0 : evmNetworks.find((element) => network && element.chainId === parseChainId(network)));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/NetworkPicker.js
var import_react_dom40 = __toESM(require_react_dom(), 1);
var import_qrcode38 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/NetworkAction/NetworkAction.js
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/Network/Network.js
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
var import_react146 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/check.js
var React30 = __toESM(require_react(), 1);
var _path12;
var _excluded16 = ["title", "titleId"];
function _extends23() {
  _extends23 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends23.apply(this, arguments);
}
function _objectWithoutProperties16(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose19(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose19(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgCheck = function SvgCheck2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties16(_ref2, _excluded16);
  return React30.createElement("svg", _extends23({
    width: 14,
    height: 14,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React30.createElement("title", {
    id: titleId
  }, title2) : null, _path12 || (_path12 = React30.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M11.496 3.67a.583.583 0 0 1 0 .826l-5.834 5.833a.583.583 0 0 1-.824 0L2.504 7.996a.583.583 0 1 1 .825-.825L5.25 9.09l5.42-5.42a.583.583 0 0 1 .826 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/Network/Network.js
var import_react_dom36 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithSpinner/Spinner/Spinner.js
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var import_react145 = __toESM(require_react(), 1);
var defaultCustomColor = "#4779FF";
var Spinner2 = ({ className = "", size = 16, customSpinnerColor = "" }) => {
  const { theme } = useThemeContext();
  const color = customSpinnerColor || theme.customColor || defaultCustomColor;
  return (0, import_jsx_runtime102.jsxs)("svg", { style: {
    height: pixelToRem(size),
    width: pixelToRem(size)
  }, viewBox: "0 0 42 42", fill: "none", xmlns: "http://www.w3.org/2000/svg", className, "data-testid": "spinner", children: [(0, import_jsx_runtime102.jsx)("mask", { id: "path-1-inside-1_1433_60360", fill: "white", children: (0, import_jsx_runtime102.jsx)("path", { d: "M40.53 42C41.3419 42 42.0027 41.3416 41.9743 40.5303C41.7987 35.5162 40.726 30.5699 38.8029 25.9273C36.6922 20.8316 33.5985 16.2016 29.6985 12.3015C25.7984 8.40145 21.1684 5.30776 16.0727 3.19706C11.4301 1.27403 6.48384 0.201284 1.46972 0.0257219C0.658363 -0.00268681 0 0.658141 0 1.47C0 2.28186 0.658382 2.93711 1.46967 2.96766C6.09758 3.1419 10.6617 4.138 14.9476 5.91326C19.6866 7.87621 23.9925 10.7534 27.6196 14.3804C31.2467 18.0075 34.1238 22.3134 36.0867 27.0524C37.862 31.3383 38.8581 35.9024 39.0323 40.5303C39.0629 41.3416 39.7181 42 40.53 42Z" }) }), (0, import_jsx_runtime102.jsx)("path", { d: "M40.53 42C41.3419 42 42.0027 41.3416 41.9743 40.5303C41.7987 35.5162 40.726 30.5699 38.8029 25.9273C36.6922 20.8316 33.5985 16.2016 29.6985 12.3015C25.7984 8.40145 21.1684 5.30776 16.0727 3.19706C11.4301 1.27403 6.48384 0.201284 1.46972 0.0257219C0.658363 -0.00268681 0 0.658141 0 1.47C0 2.28186 0.658382 2.93711 1.46967 2.96766C6.09758 3.1419 10.6617 4.138 14.9476 5.91326C19.6866 7.87621 23.9925 10.7534 27.6196 14.3804C31.2467 18.0075 34.1238 22.3134 36.0867 27.0524C37.862 31.3383 38.8581 35.9024 39.0323 40.5303C39.0629 41.3416 39.7181 42 40.53 42Z", stroke: "url(#paint0_linear_1433_60360)", strokeWidth: "4", mask: "url(#path-1-inside-1_1433_60360)" }), (0, import_jsx_runtime102.jsx)("defs", { children: (0, import_jsx_runtime102.jsxs)("linearGradient", { id: "paint0_linear_1433_60360", x1: "41", y1: "42", x2: "1.5", y2: "-1.82007e-07", gradientUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime102.jsx)("stop", { stopColor: color }), (0, import_jsx_runtime102.jsx)("stop", { offset: "1", stopColor: color, stopOpacity: "0" })] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/Network/Network.js
var import_qrcode34 = __toESM(require_browser(), 1);
var Network = ({ iconUrl, isActive, networkName, className, checkboxClassName = "", isChanging, notSupported = false }) => (0, import_jsx_runtime103.jsxs)("div", { className: classNames("network", className, {
  "network--not-supported": notSupported
}), children: [(0, import_jsx_runtime103.jsxs)("div", { className: "network__container", children: [iconUrl ? (0, import_jsx_runtime103.jsx)("img", { src: iconUrl, className: "network__title-icon", alt: `${networkName} icon` }) : (0, import_jsx_runtime103.jsx)(SvgError, {}), (0, import_jsx_runtime103.jsxs)("div", { className: "network__title-container", children: [(0, import_jsx_runtime103.jsx)(Typography, { variant: "button_primary", className: "network__title-copy", as: "span", weight: "medium", color: notSupported ? "secondary" : "primary", children: networkName }), notSupported && (0, import_jsx_runtime103.jsx)(Typography, { variant: "body_mini", className: "network__title-copy", as: "span", weight: "medium", color: notSupported ? "secondary" : "primary", "data-testid": "network-not-supported", children: "Switch network in your wallet" })] })] }), (0, import_jsx_runtime103.jsxs)("div", { className: classNames("network__status-container", {
  "network__status-container--active": isActive
}, checkboxClassName), "data-testid": "single-network-checkbox", children: [isActive && (0, import_jsx_runtime103.jsx)(SvgCheck, { className: "network__status-icon" }), isChanging && (0, import_jsx_runtime103.jsx)(Spinner2, { className: "network__status-spinner-icon", size: 12 })] })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/NetworkAction/NetworkAction.js
var NetworkAction = ({ iconUrl, networkId, network, onClick, networkName, checkboxClassName = "", newNetworkId, notSupported }) => (0, import_jsx_runtime104.jsx)("div", { className: classNames("network-action", {
  "network--not-supported": notSupported
}), onClick: () => {
  !notSupported && onClick(networkId);
}, "data-testid": "network-action", children: (0, import_jsx_runtime104.jsx)(Network, { iconUrl, isActive: networkId === network, networkName, checkboxClassName, isChanging: newNetworkId === networkId, notSupported }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/NetworkControl/NetworkControl.js
var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/EvmNetworkControl/EvmNetworkControl.js
var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
var import_react149 = __toESM(require_react(), 1);
var import_react_dom38 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/NetworkControlSkeleton/NetworkControlSkeleton.js
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
var import_react147 = __toESM(require_react(), 1);
var import_react_dom37 = __toESM(require_react_dom(), 1);
var import_qrcode35 = __toESM(require_browser(), 1);
var NetworkControlSkeleton = ({ className }) => (0, import_jsx_runtime105.jsxs)("div", { className: classNames("network-control-skeleton", className), "data-testid": "network-control-loading", children: [(0, import_jsx_runtime105.jsx)("div", { className: "network-control-skeleton__icon" }), (0, import_jsx_runtime105.jsx)(Skeleton, { className: "network-control-skeleton__skeleton" })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/UnsupportedNetwork/UnsupportedNetwork.js
var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
var import_react148 = __toESM(require_react(), 1);
var UnsupportedNetwork = ({ showMsg }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime106.jsxs)(import_jsx_runtime106.Fragment, { children: [(0, import_jsx_runtime106.jsx)(Icon, { size: "small", children: (0, import_jsx_runtime106.jsx)(SvgError, {}) }), showMsg && (0, import_jsx_runtime106.jsx)(Typography, { className: "evm-network-control__network-name", as: "span", color: "error-1", variant: "body_small", copykey: "dyn_network_not_supported.button", children: t2("dyn_network_not_supported.button") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/EvmNetworkControl/EvmNetworkControl.js
var import_qrcode36 = __toESM(require_browser(), 1);
var EvmNetworkControl = ({ evmNetworks, className = "", activeClassName = "", network, walletConnector, isOpen, setIsOpen, showNetworkName = false }) => {
  var _a;
  const currentEvmNetwork = evmNetworks === null || evmNetworks === void 0 ? void 0 : evmNetworks.find((element) => network && element.chainId === parseChainId(network));
  if (evmNetworks && !evmNetworks.length) {
    return (0, import_jsx_runtime107.jsx)("div", { "data-testid": "EvmNetworkControl", className: classNames("evm-network-control__container evm-network-control__container--error", className), children: (0, import_jsx_runtime107.jsx)(UnsupportedNetwork, { showMsg: showNetworkName }) });
  }
  if (!network) {
    return (0, import_jsx_runtime107.jsx)("div", { "data-testid": "EvmNetworkControl", className: classNames("evm-network-control__container", className), children: (0, import_jsx_runtime107.jsx)(NetworkControlSkeleton, {}) });
  }
  if ((evmNetworks === null || evmNetworks === void 0 ? void 0 : evmNetworks.length) === 1) {
    const unsupportedNetworkClassName = classNames(className, "evm-network-control__container", "evm-network-control__container--error", {
      [activeClassName]: isOpen,
      "evm-network-control__container": Boolean(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.supportsNetworkSwitching())
    });
    if (!currentEvmNetwork) {
      return (0, import_jsx_runtime107.jsxs)("button", { "data-testid": "EvmNetworkControl", type: "button", onClick: () => setIsOpen(!isOpen), className: unsupportedNetworkClassName, children: [(0, import_jsx_runtime107.jsx)(UnsupportedNetwork, { showMsg: showNetworkName }), (0, import_jsx_runtime107.jsx)(Icon, { color: "text-primary", size: "small", className: classNames("evm-network-control__arrow-icon", {
        "evm-network-control__arrow-icon--active": isOpen
      }), children: (0, import_jsx_runtime107.jsx)(SvgStroke, {}) })] });
    }
    return (0, import_jsx_runtime107.jsxs)("div", { "data-testid": "EvmNetworkControl", onClick: () => network && setIsOpen(!isOpen), className: classNames("evm-network-control__container", {
      [activeClassName]: isOpen
    }, className), children: [currentEvmNetwork.iconUrls.length > 0 && (0, import_jsx_runtime107.jsx)(Icon, { size: "small", children: (0, import_jsx_runtime107.jsx)("img", { src: currentEvmNetwork.iconUrls[0], alt: `${currentEvmNetwork.name} icon` }) }), showNetworkName && (0, import_jsx_runtime107.jsx)(Typography, { className: "evm-network-control__network-name", as: "span", variant: "body_small", children: currentEvmNetwork.vanityName || currentEvmNetwork.name })] });
  }
  return (0, import_jsx_runtime107.jsxs)("button", { "data-testid": "EvmNetworkControl", type: "button", onClick: (e2) => {
    e2.stopPropagation();
    network && setIsOpen(!isOpen);
  }, className: classNames(className, {
    [activeClassName]: isOpen,
    "evm-network-control__container": Boolean(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.supportsNetworkSwitching()),
    "evm-network-control__container--error": !(currentEvmNetwork === null || currentEvmNetwork === void 0 ? void 0 : currentEvmNetwork.name)
  }), children: [(currentEvmNetwork === null || currentEvmNetwork === void 0 ? void 0 : currentEvmNetwork.name) ? (0, import_jsx_runtime107.jsxs)(import_jsx_runtime107.Fragment, { children: [((_a = currentEvmNetwork === null || currentEvmNetwork === void 0 ? void 0 : currentEvmNetwork.iconUrls) === null || _a === void 0 ? void 0 : _a[0]) && (0, import_jsx_runtime107.jsx)(Icon, { size: "small", children: (0, import_jsx_runtime107.jsx)("img", { src: currentEvmNetwork.iconUrls[0], alt: `${currentEvmNetwork.name} icon` }) }), showNetworkName && (0, import_jsx_runtime107.jsx)(Typography, { className: "evm-network-control__network-name", as: "span", variant: "body_small", children: currentEvmNetwork.vanityName || currentEvmNetwork.name })] }) : (0, import_jsx_runtime107.jsx)(UnsupportedNetwork, { showMsg: showNetworkName }), evmNetworks && evmNetworks.length > 1 && (0, import_jsx_runtime107.jsx)(Icon, { color: "text-primary", size: "small", className: classNames("evm-network-control__arrow-icon", {
    "evm-network-control__arrow-icon--active": isOpen
  }), children: (0, import_jsx_runtime107.jsx)(SvgStroke, {}) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/NonNetworkSwitchingSupportedControl/NonNetworkSwitchingSupportedControl.js
var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
var import_react150 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/capitalize/capitalize.js
var capitalize3 = (value) => {
  var _a;
  return ((_a = value[0]) === null || _a === void 0 ? void 0 : _a.toUpperCase()) + value.slice(1).toLowerCase();
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/NonNetworkSwitchingSupportedControl/NonNetworkSwitchingSupportedControl.js
var import_react_dom39 = __toESM(require_react_dom(), 1);
var import_qrcode37 = __toESM(require_browser(), 1);
var NonNetworkSwitchingSupportedControl = ({ walletConnector, className, showNetworkName = false }) => {
  const { chain, isLoading } = useFetchChain(walletConnector);
  const chainName = (chain === null || chain === void 0 ? void 0 : chain.name) || "";
  const ChainIcon2 = getChainIcon(walletConnector.connectedChain || "");
  if (isLoading) {
    return (0, import_jsx_runtime108.jsx)(NetworkControlSkeleton, { className });
  }
  return (0, import_jsx_runtime108.jsxs)("div", { "data-testid": "NonNetworkSwitchingSupportedControl", className: classNames("non-network-switching-supported-control", className), children: [(0, import_jsx_runtime108.jsx)(Icon, { size: "small", children: (chain === null || chain === void 0 ? void 0 : chain.icon) ? (0, import_jsx_runtime108.jsx)("img", { src: chain.icon, alt: `${chain.name} icon` }) : (0, import_jsx_runtime108.jsx)(ChainIcon2, {}) }), showNetworkName && (0, import_jsx_runtime108.jsx)(Typography, { className: classNames("non-network-switching-supported-control__network-name"), as: "span", variant: "body_small", children: capitalize3(chainName) }), (0, import_jsx_runtime108.jsx)("span", {})] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/components/NetworkControl/NetworkControl.js
var NetworkControl = ({ loading, walletConnector, buttonClassName, network, evmNetworks, activeClassName, isOpen, setIsOpen, showNetworkName }) => {
  const chainSwitchLoading = (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === ChainEnum.Evm && typeof network === "string";
  if (loading || chainSwitchLoading) {
    return (0, import_jsx_runtime109.jsx)(NetworkControlSkeleton, { className: buttonClassName });
  } else if ((walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) && !walletConnector.supportsNetworkSwitching()) {
    return (0, import_jsx_runtime109.jsx)(NonNetworkSwitchingSupportedControl, { className: buttonClassName, showNetworkName, walletConnector });
  } else {
    return (0, import_jsx_runtime109.jsx)(EvmNetworkControl, { showNetworkName, evmNetworks, activeClassName, className: buttonClassName, network, loading, isOpen, walletConnector, setIsOpen });
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NetworkPicker/NetworkPicker.js
var NetworkPicker = ({ activeClassName = "", buttonClassName = "", checkboxClassName = "", connector, evmNetworks, isNetworkPickerOpen, listClassName = "", mainClassName = "", setIsNetworkPickerOpen, showNetworkName, customCallbackOnSuccess, currentNetwork, isLoading = false }) => {
  const pickerRef = (0, import_react151.useRef)(null);
  const [newNetworkId, setNewNetworkId] = (0, import_react151.useState)(void 0);
  const { loadingNetwork } = useInternalDynamicContext();
  const { data: supportedWalletNetworks } = usePromise(() => isWalletConnectConnector(connector) ? connector.getSupportedNetworks() : Promise.resolve(evmNetworks.map(({ networkId }) => `${networkId}`)), {
    deps: [connector, evmNetworks, isNetworkPickerOpen],
    initialData: void 0
  });
  const shouldAllowOpenDropdown = isNetworkUnsupported(currentNetwork, evmNetworks) || (evmNetworks === null || evmNetworks === void 0 ? void 0 : evmNetworks.length) > 1;
  const anchorRef = (0, import_react151.useRef)(null);
  const handleNetworkChange = (networkId) => __awaiter(void 0, void 0, void 0, function* () {
    setNewNetworkId(networkId);
    try {
      yield connector === null || connector === void 0 ? void 0 : connector.switchNetwork({
        networkChainId: networkId
      });
      customCallbackOnSuccess === null || customCallbackOnSuccess === void 0 ? void 0 : customCallbackOnSuccess();
    } catch (error) {
      logger2.debug(error);
    } finally {
      setNewNetworkId(void 0);
      setIsNetworkPickerOpen(false);
    }
  });
  return (0, import_jsx_runtime110.jsxs)("div", { className: classNames("non-widget-network-picker", mainClassName), ref: pickerRef, "data-testid": "network-picker", children: [(0, import_jsx_runtime110.jsxs)("div", { className: "network-picker-network-control", children: [(0, import_jsx_runtime110.jsx)(NetworkControl, { evmNetworks, activeClassName, network: currentNetwork, loading: loadingNetwork || isLoading, isOpen: isNetworkPickerOpen, setIsOpen: setIsNetworkPickerOpen, walletConnector: connector, showNetworkName, buttonClassName }), (0, import_jsx_runtime110.jsx)("div", { ref: anchorRef, className: "network-picker-network-control__anchor" })] }), shouldAllowOpenDropdown && (0, import_jsx_runtime110.jsx)(MenuList, { className: listClassName, isOpen: isNetworkPickerOpen, onClickClose: () => setIsNetworkPickerOpen(false), popperProps: {
    anchorOrigin: "bottom-left",
    anchorRef
  }, mobileTitle: "Select network", children: evmNetworks.map(({ name, networkId, vanityName, iconUrls }) => (0, import_jsx_runtime110.jsx)(NetworkAction, { iconUrl: iconUrls === null || iconUrls === void 0 ? void 0 : iconUrls[0], networkId, networkName: vanityName || name, network: currentNetwork, onClick: handleNetworkChange, checkboxClassName, newNetworkId, notSupported: supportedWalletNetworks && !supportedWalletNetworks.includes(`${networkId}`) }, networkId)) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/StatusDot/StatusDot.js
var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
var StatusDot = ({ variant, containerClassName }) => (0, import_jsx_runtime111.jsx)("div", { "data-testid": "status-dot-container", className: classNames("status-dot__container", containerClassName || ""), children: (0, import_jsx_runtime111.jsx)("div", { "data-testid": "status-dot", className: classNames("status-dot", `status-dot--${variant}`) }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveWalletInformation.js
var import_qrcode44 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isMultiAssetSupportedNetwork/constants.js
var MULTI_ASSET_SUPPORTED_NETWORKS = Object.values(GetAccountBalancesNetworkIdEnum);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isMultiAssetSupportedNetwork/isMultiAssetSupportedNetwork.js
var isMultiAssetSupportedNetwork = (walletConnector, network) => {
  const isNetworkMultiAssetSupported = (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === ChainEnum.Sol || (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === ChainEnum.Evm && typeof network === "number" && MULTI_ASSET_SUPPORTED_NETWORKS.includes(network);
  return Boolean(isNetworkMultiAssetSupported);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveBitcoinWalletAddresses/ActiveBitcoinWalletAddresses.js
var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
var import_react153 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/copy.js
var React31 = __toESM(require_react(), 1);
var _path13;
var _path22;
var _excluded17 = ["title", "titleId"];
function _extends24() {
  _extends24 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends24.apply(this, arguments);
}
function _objectWithoutProperties17(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose20(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose20(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgCopy = function SvgCopy2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties17(_ref2, _excluded17);
  return React31.createElement("svg", _extends24({
    width: 18,
    height: 18,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React31.createElement("title", {
    id: titleId
  }, title2) : null, _path13 || (_path13 = React31.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M8.333 1.667a2.5 2.5 0 0 0-2.5 2.5v1.666H7.5V4.167c0-.46.373-.834.833-.834h7.5c.46 0 .833.373.833.834v7.5c0 .46-.373.833-.833.833h-1.667v1.667h1.667a2.5 2.5 0 0 0 2.5-2.5v-7.5a2.5 2.5 0 0 0-2.5-2.5h-7.5Z",
    fill: "currentColor"
  })), _path22 || (_path22 = React31.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.667 8.333a2.5 2.5 0 0 1 2.5-2.5h7.5a2.5 2.5 0 0 1 2.5 2.5v7.5a2.5 2.5 0 0 1-2.5 2.5h-7.5a2.5 2.5 0 0 1-2.5-2.5v-7.5Zm2.5-.833a.833.833 0 0 0-.833.833v7.5c0 .46.373.834.833.834h7.5c.46 0 .833-.373.833-.834v-7.5a.833.833 0 0 0-.833-.833h-7.5Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveBitcoinWalletAddresses/ActiveBitcoinWalletAddresses.js
var import_react_dom41 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/CopyButton/CopyButton.js
var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
var import_react152 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TextButton/TextButton.js
var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
var TextButton = (_a) => {
  var { className = "" } = _a, props = __rest(_a, ["className"]);
  return (0, import_jsx_runtime112.jsx)("button", Object.assign({ className: classNames("text-button", className) }, props));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/CopyButton/CopyButton.js
var CopyButton = ({ children, className = "", textToCopy, onClick, variant = "text", copykey, buttonPadding = "small", buttonVariant = "primary", buttonClassName = "", startSlot, disabled }) => {
  const [copied, setCopied] = (0, import_react152.useState)(false);
  const copyToClipboard2 = () => {
    navigator.clipboard.writeText(textToCopy);
    setCopied(true);
    onClick === null || onClick === void 0 ? void 0 : onClick();
  };
  const CopyButtonTooltip = () => (0, import_jsx_runtime113.jsx)(Tooltip, { className: "copy-button__tooltip", content: copied ? "Copied" : "Copy", children });
  if (variant === "text") {
    return (0, import_jsx_runtime113.jsx)(TextButton, { className: classNames("copy-button__container", className), onClick: () => copyToClipboard2(), onMouseLeave: () => setCopied(false), copykey, disabled, children: (0, import_jsx_runtime113.jsx)(CopyButtonTooltip, {}) });
  }
  return (0, import_jsx_runtime113.jsx)(TypographyButton, { expanded: true, buttonPadding, buttonVariant, buttonClassName, onClick: () => copyToClipboard2(), copykey, startSlot, disabled, children: (0, import_jsx_runtime113.jsx)(CopyButtonTooltip, {}) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveBitcoinWalletAddresses/ActiveBitcoinWalletAddresses.js
var import_qrcode39 = __toESM(require_browser(), 1);
var ActiveBitcoinWalletAddresses = ({ menuOption, wallet }) => {
  var _a, _b;
  const { t: t2 } = useTranslation();
  const ordinalsAddress = (_a = getWalletAdditionalAddressByType(WalletAddressType.Ordinals, wallet)) !== null && _a !== void 0 ? _a : wallet === null || wallet === void 0 ? void 0 : wallet.address;
  const paymenyAddress = (_b = getWalletAdditionalAddressByType(WalletAddressType.Payment, wallet)) !== null && _b !== void 0 ? _b : wallet === null || wallet === void 0 ? void 0 : wallet.address;
  return (0, import_jsx_runtime114.jsxs)(import_jsx_runtime114.Fragment, { children: [(0, import_jsx_runtime114.jsxs)("div", { className: "active-wallet-information__address-container", children: [(0, import_jsx_runtime114.jsxs)("div", { children: [(0, import_jsx_runtime114.jsx)(Typography, { className: "active-wallet-information__address", weight: "regular", variant: "body_small", color: "secondary", children: t2("dyn_active_wallet_info.ordinals_address") }), (0, import_jsx_runtime114.jsx)(Typography, { className: "active-wallet-information__address", weight: "medium", variant: "body_normal", color: "primary", children: shortenWalletAddress(ordinalsAddress, 4, 4) })] }), (0, import_jsx_runtime114.jsx)(DotsMenu, { "data-testid": "dots-menu", options: menuOption, buttonClassName: "active-wallet-information__dots-menu", buttonClassNameWithOpenMenu: "active-wallet-information__dots-menu" })] }), (0, import_jsx_runtime114.jsxs)("div", { className: "active-wallet-information__address-container", children: [(0, import_jsx_runtime114.jsxs)("div", { children: [(0, import_jsx_runtime114.jsx)(Typography, { className: "active-wallet-information__address", weight: "regular", variant: "body_small", color: "secondary", children: t2("dyn_active_wallet_info.payment_address") }), (0, import_jsx_runtime114.jsx)(Typography, { className: "active-wallet-information__address", weight: "regular", variant: "body_small", color: "primary", children: shortenWalletAddress(paymenyAddress, 4, 4) })] }), (0, import_jsx_runtime114.jsx)(CopyButton, { textToCopy: paymenyAddress !== null && paymenyAddress !== void 0 ? paymenyAddress : "", children: (0, import_jsx_runtime114.jsx)(Icon, { size: "xsmall", children: (0, import_jsx_runtime114.jsx)(SvgCopy, {}) }) })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveWalletAddress/ActiveWalletAddress.js
var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
var import_react155 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/gear.js
var React32 = __toESM(require_react(), 1);
var _path14;
var _excluded18 = ["title", "titleId"];
function _extends25() {
  _extends25 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends25.apply(this, arguments);
}
function _objectWithoutProperties18(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose21(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose21(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgGear = function SvgGear2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties18(_ref2, _excluded18);
  return React32.createElement("svg", _extends25({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React32.createElement("title", {
    id: titleId
  }, title2) : null, _path14 || (_path14 = React32.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9.353 4.081c.674-2.775 4.62-2.775 5.294 0a.724.724 0 0 0 1.08.448c2.44-1.486 5.23 1.305 3.744 3.744a.724.724 0 0 0 .448 1.08c2.775.674 2.775 4.62 0 5.294a.724.724 0 0 0-.448 1.08c1.486 2.44-1.305 5.23-3.744 3.744a.724.724 0 0 0-1.08.448c-.674 2.775-4.62 2.775-5.294 0a.724.724 0 0 0-1.08-.448c-2.44 1.486-5.23-1.305-3.744-3.744a.724.724 0 0 0-.448-1.08c-2.775-.674-2.775-4.62 0-5.294a.724.724 0 0 0 .448-1.08c-1.486-2.44 1.305-5.23 3.744-3.744a.724.724 0 0 0 1.08-.448Zm3.35.472c-.178-.737-1.227-.737-1.407 0a2.724 2.724 0 0 1-4.064 1.684c-.648-.395-1.39.347-.995.995.96 1.575.109 3.63-1.684 4.064-.737.18-.737 1.229 0 1.408a2.724 2.724 0 0 1 1.684 4.064c-.395.648.347 1.39.995.995a2.724 2.724 0 0 1 4.064 1.684c.18.737 1.229.737 1.408 0a2.724 2.724 0 0 1 4.064-1.684c.648.395 1.39-.347.995-.995a2.724 2.724 0 0 1 1.684-4.064c.737-.18.737-1.229 0-1.408a2.724 2.724 0 0 1-1.684-4.064c.395-.648-.347-1.39-.995-.995-1.575.96-3.63.109-4.064-1.684ZM12 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-4 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z",
    fill: "#ABACB2"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveWalletAddress/ActiveWalletAddress.js
var import_react_dom42 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithStatus/IconWithStatus.js
var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
var import_react154 = __toESM(require_react(), 1);
var IconWithStatus = ({ Icon: Icon$1, InnerIcon, primaryWalletKey, containerClassName, iconSize: iconSize2 = 16, variant = "green" }) => {
  const Inner = primaryWalletKey ? (0, import_jsx_runtime115.jsx)("div", { className: "inner-icon__container", children: (0, import_jsx_runtime115.jsx)("div", { className: classNames("inner-icon"), children: (0, import_jsx_runtime115.jsx)(Icon, { size: "medium", children: (0, import_jsx_runtime115.jsx)(WalletIcon, { walletKey: primaryWalletKey }) }) }) }) : (0, import_jsx_runtime115.jsx)("div", { className: "inner-icon__container", children: (0, import_jsx_runtime115.jsx)("div", { className: classNames("inner-icon", `inner-icon--${variant}`), children: InnerIcon && (0, import_jsx_runtime115.jsx)(InnerIcon, {}) }) });
  return (0, import_jsx_runtime115.jsxs)("div", { className: classNames("icon-with-status__container", containerClassName || ""), children: [typeof Icon$1 === "string" ? (0, import_jsx_runtime115.jsx)("img", { style: {
    height: pixelToRem(iconSize2),
    width: pixelToRem(iconSize2)
  }, src: Icon$1, alt: "", className: "icon" }) : (0, import_jsx_runtime115.jsx)(Icon$1, { style: {
    height: pixelToRem(iconSize2),
    width: pixelToRem(iconSize2)
  } }), InnerIcon || primaryWalletKey ? Inner : (0, import_jsx_runtime115.jsx)(StatusDot, { variant, containerClassName: "icon-with-status__status-dot" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveWalletAddress/ActiveWalletAddress.js
var import_qrcode40 = __toESM(require_browser(), 1);
var ActiveWalletAddress = ({ address, nameServiceName, menuOption, fullWidth = false, isLoading = false }) => {
  const { showAlert } = usePasskeyContext();
  return (0, import_jsx_runtime116.jsxs)("div", { className: "active-wallet-information__address-container", children: [(0, import_jsx_runtime116.jsxs)("div", { children: [(0, import_jsx_runtime116.jsx)(Typography, { className: fullWidth ? "active-wallet-information__handle--full-width" : "active-wallet-information__handle", color: "primary", variant: "body_normal", children: nameServiceName }), (0, import_jsx_runtime116.jsx)(Typography, { className: "active-wallet-information__address", weight: nameServiceName ? "regular" : "medium", variant: nameServiceName ? "body_small" : "body_normal", color: nameServiceName ? "secondary" : "primary", children: isLoading ? (0, import_jsx_runtime116.jsx)(Skeleton, { className: "active-wallet-information__address-skeleton" }) : shortenWalletAddress(address, 4, 4) })] }), (0, import_jsx_runtime116.jsx)(DotsMenu, { "data-testid": "dots-menu", options: menuOption, buttonClassName: "active-wallet-information__dots-menu", buttonClassNameWithOpenMenu: "active-wallet-information__dots-menu", iconOverride: showAlert() ? (0, import_jsx_runtime116.jsx)(IconWithStatus, { Icon: () => (0, import_jsx_runtime116.jsx)(SvgGear, { width: 16, height: 16 }), variant: "yellow" }) : (0, import_jsx_runtime116.jsx)(SvgGear, { width: 16, height: 16 }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/TokenBalanceList/TokenBalanceList.js
var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
var import_react158 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/TokenBalanceItem/TokenBalanceItem.js
var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
var import_react156 = __toESM(require_react(), 1);
var import_react_dom43 = __toESM(require_react_dom(), 1);
var import_qrcode41 = __toESM(require_browser(), 1);
var currencyFormatter = new Intl.NumberFormat("en-US", {
  currency: "USD",
  style: "currency"
});
var TokenBalanceItem = ({ tokenBalance }) => {
  const { showFiat } = useInternalDynamicContext();
  const roundToSixDecimal = (value) => {
    const rounded = Math.round(value * 1e6) / 1e6;
    return rounded === 0 ? "<0.000001" : rounded;
  };
  const formattedFiatValue = () => {
    var _a;
    if (tokenBalance.marketValue !== 0 && !tokenBalance.marketValue) {
      return "$-";
    }
    return tokenBalance.marketValue >= 0.01 ? currencyFormatter.format(parseFloat((_a = tokenBalance.marketValue) === null || _a === void 0 ? void 0 : _a.toFixed(2))) : "<$0.01";
  };
  return (0, import_jsx_runtime117.jsxs)("div", { className: "token-balance-item", children: [(0, import_jsx_runtime117.jsxs)("div", { className: "token-balance-item__name", children: [tokenBalance.logoURI ? (0, import_jsx_runtime117.jsx)(Image, { src: tokenBalance.logoURI, alt: tokenBalance.symbol, className: "token-balance-item__icon", dataTestId: "token-balance-item-icon" }) : (0, import_jsx_runtime117.jsx)("div", { className: "token-balance-item__skeleton-icon", "data-testid": "token-balance-item__skeleton-icon" }), (0, import_jsx_runtime117.jsx)("div", { children: (0, import_jsx_runtime117.jsx)(Typography, { variant: "body_small", className: "token-balance-item__title", color: "primary", children: tokenBalance.name }) })] }), (0, import_jsx_runtime117.jsxs)("div", { className: "flex", children: [showFiat ? (0, import_jsx_runtime117.jsx)(Typography, { variant: "body_small", weight: "bold", color: "primary", style: { textAlign: "right" }, children: formattedFiatValue() }) : null, (0, import_jsx_runtime117.jsx)("div", { className: "token-balance-item__value", children: (0, import_jsx_runtime117.jsxs)("div", { className: "token-balance-item__value__balance", "data-testid": "token-balance-item-balance", children: [(0, import_jsx_runtime117.jsx)(Typography, { variant: "body_small", color: "secondary", style: { marginRight: "2px" }, children: roundToSixDecimal(tokenBalance.balance) }), (0, import_jsx_runtime117.jsx)(Typography, { variant: "body_small", color: "secondary", children: tokenBalance.symbol })] }) })] })] }, tokenBalance.address);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/TokenBalanceList/TokenBalanceList.js
var import_react_dom45 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Divider/Divider.js
var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
var import_react157 = __toESM(require_react(), 1);
var import_react_dom44 = __toESM(require_react_dom(), 1);
var import_qrcode42 = __toESM(require_browser(), 1);
var Divider = ({ text, className, style, fullWidth = false, children }) => (0, import_jsx_runtime118.jsxs)("div", { className: classNames("divider", className, {
  "divider__full-width": fullWidth
}), style, children: [(0, import_jsx_runtime118.jsx)("div", { className: "divider__dash" }), Boolean(text) && (0, import_jsx_runtime118.jsx)(Typography, { className: "divider__text", variant: "body_small", color: "secondary", children: text }), children && (0, import_jsx_runtime118.jsx)("div", { children }), (0, import_jsx_runtime118.jsx)("div", { className: "divider__dash" })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/TokenBalanceList/TokenBalanceList.js
var import_qrcode43 = __toESM(require_browser(), 1);
var TokenBalanceList = ({ tokenBalances }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime119.jsx)("ul", { className: "token-balance-list", children: (tokenBalances === null || tokenBalances === void 0 ? void 0 : tokenBalances.length) === 0 ? (0, import_jsx_runtime119.jsx)("div", { className: "token-balance-list__empty", children: (0, import_jsx_runtime119.jsx)(Typography, { variant: "body_small", color: "secondary", children: t2("dyn_wallet_information.multi_asset.empty_state") }) }) : tokenBalances === null || tokenBalances === void 0 ? void 0 : tokenBalances.map((tokenBalance, idx) => (0, import_jsx_runtime119.jsxs)(import_react158.default.Fragment, { children: [(0, import_jsx_runtime119.jsx)(TokenBalanceItem, { tokenBalance }), tokenBalances.length !== idx + 1 ? (0, import_jsx_runtime119.jsx)(Divider, { className: "token-balance-list__divider" }) : null] }, idx)) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/ActiveWalletInformation/ActiveWalletInformation.js
var ICON_SIZE = 28;
var ActiveWalletInformation = ({ isLoading = false }) => {
  var _a, _b, _c, _d, _e2;
  const { t: t2 } = useTranslation();
  const [isNetworkPickerOpen, setIsNetworkPickerOpen] = (0, import_react159.useState)(false);
  const [balanceIsExpanded, setBalanceIsExpanded] = (0, import_react159.useState)(false);
  const [hasShadow, setHasShadow] = (0, import_react159.useState)(false);
  const contentRef = (0, import_react159.useRef)(null);
  const { primaryWallet, network, projectSettings, user, authMode, showFiat, multiAsset } = useInternalDynamicContext();
  const { setDynamicWidgetView } = useWidgetContext();
  const { isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet();
  const { isLoading: isLoadingTokenBalances, tokenBalances, error: errorTokenBalances } = useTokenBalances({
    chainName: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.connectedChain,
    includeFiat: showFiat,
    includeNativeBalance: true
  });
  const primaryConnector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
  const filteredTokenBalances = (tokenBalances === null || tokenBalances === void 0 ? void 0 : tokenBalances.filter((token) => token.name)) || [];
  const address = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address;
  const nameService = useFetchNameService(address);
  const { getEOAWallet } = useSmartWallets();
  const { data: testnet } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    return Boolean(yield primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.isTestnet());
  }), { deps: [network], initialData: false });
  const exportKeysOption = getExportKeysOption(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector, projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers);
  const { showAlert } = usePasskeyContext();
  const wallet = (_a = primaryWallet && getEOAWallet(primaryWallet)) !== null && _a !== void 0 ? _a : primaryWallet;
  const isBitcoin = primaryWallet && isBitcoinConnector(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector);
  const isEmbeddedWallet = Boolean(wallet && (((_c = (_b = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _b === void 0 ? void 0 : _b.key) === null || _c === void 0 ? void 0 : _c.startsWith("turnkey")) || ((_e2 = (_d = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _d === void 0 ? void 0 : _d.key) === null || _e2 === void 0 ? void 0 : _e2.startsWith("coinbasempc"))));
  const options2 = [
    {
      Icon: null,
      callback: () => (nameService === null || nameService === void 0 ? void 0 : nameService.name) && navigator.clipboard.writeText(nameService === null || nameService === void 0 ? void 0 : nameService.name),
      hide: !(nameService === null || nameService === void 0 ? void 0 : nameService.name),
      text: "Copy ENS"
    },
    {
      Icon: null,
      callback: () => address && navigator.clipboard.writeText(address),
      hide: !address,
      text: "Copy wallet address"
    },
    {
      Icon: null,
      callback: () => setDynamicWidgetView("settings"),
      endSlot: showAlert() ? (0, import_jsx_runtime120.jsx)(StatusDot, { variant: "yellow" }) : void 0,
      hide: !isEmbeddedWallet,
      text: "Wallet settings"
    },
    {
      Icon: null,
      callback: exportKeysOption || (() => logger2.info("No option to export private keys")),
      hide: !exportKeysOption,
      text: "Export private keys"
    }
  ];
  const evmNetworks = (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector) && (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector).evmNetworks || [];
  const showTestnetAlert = testnet && !isTurnkeyWalletWithoutAuthenticator;
  const shouldHideNetwork = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.hideNetworkInDynamicWidget;
  const activeWalletAddress = () => {
    if (isBitcoin) {
      return (0, import_jsx_runtime120.jsx)(ActiveBitcoinWalletAddresses, { wallet: primaryWallet, menuOption: options2 });
    } else {
      return (0, import_jsx_runtime120.jsx)(ActiveWalletAddress, { address, nameServiceName: (nameService === null || nameService === void 0 ? void 0 : nameService.name) || (user === null || user === void 0 ? void 0 : user.email), menuOption: options2, isLoading, fullWidth: shouldHideNetwork });
    }
  };
  const enableMultiAsset = authMode === "connect-and-sign" && multiAsset;
  const isNetworkMultiAssetSupported = isMultiAssetSupportedNetwork(primaryConnector, network);
  const isTooManyRequests = errorTokenBalances === "Too many requests fetching balances";
  const showMultiAsset = !isTooManyRequests && isNetworkMultiAssetSupported && enableMultiAsset;
  filteredTokenBalances.sort((a, b) => ((b === null || b === void 0 ? void 0 : b.marketValue) || 0) - ((a === null || a === void 0 ? void 0 : a.marketValue) || 0));
  const totalValue = filteredTokenBalances.reduce((acc, token) => acc + ((token === null || token === void 0 ? void 0 : token.marketValue) || 0), 0);
  const currencyFormatter2 = new Intl.NumberFormat("en-US", {
    currency: "USD",
    style: "currency"
  });
  const primaryWalletNativeBalance = () => primaryWallet ? (0, import_jsx_runtime120.jsx)(Balance, { className: "balance-header__balance", wallet: primaryWallet, network }) : (0, import_jsx_runtime120.jsx)(Skeleton, { className: "balance-header__skeleton" });
  const handleScroll = () => {
    if (contentRef.current) {
      setHasShadow(contentRef.current.scrollTop > 0);
    }
  };
  const multiAssetHeader = () => (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [(0, import_jsx_runtime120.jsx)("div", { className: `${hasShadow ? "shadow" : ""}`, children: (0, import_jsx_runtime120.jsxs)("button", { onClick: () => {
    if (!isLoadingTokenBalances) {
      setBalanceIsExpanded(!balanceIsExpanded);
    }
  }, className: "balance-header", children: [(0, import_jsx_runtime120.jsxs)("div", { className: "balance-header__title", children: [(0, import_jsx_runtime120.jsx)(Typography, { color: "secondary", variant: "body_small", style: { marginRight: "8px" }, children: "Balance:" }), showFiat ? (0, import_jsx_runtime120.jsx)(Typography, { variant: "body_normal", color: "primary", children: totalValue === 0 || totalValue >= 0.01 ? currencyFormatter2.format(parseFloat(totalValue.toFixed(2))) : "<$0.01" }) : primaryWalletNativeBalance()] }), (0, import_jsx_runtime120.jsx)("div", { className: balanceIsExpanded ? "balance-header__chevron" : "", children: (0, import_jsx_runtime120.jsx)(SvgChevronDown, {}) })] }) }), (0, import_jsx_runtime120.jsx)(AccordionItem, { isOpen: balanceIsExpanded, className: `multi-asset-balance-container__accordion ${"multi-asset-balance-container__accordion" + (balanceIsExpanded ? "--expanded" : "--collapsed")}`, handleScroll, ref: contentRef, children: (0, import_jsx_runtime120.jsx)(TokenBalanceList, { tokenBalances: filteredTokenBalances }) })] });
  if (isLoading) {
    return (0, import_jsx_runtime120.jsx)(Skeleton, {});
  }
  return (0, import_jsx_runtime120.jsxs)("div", { className: "active-wallet-information-container", "data-testid": "active-wallet-information", children: [(0, import_jsx_runtime120.jsxs)("div", { className: "active-wallet-information", children: [(0, import_jsx_runtime120.jsxs)("div", { className: "active-wallet-information__header", children: [(0, import_jsx_runtime120.jsx)("div", { className: "active-wallet-information__avatar", children: (nameService === null || nameService === void 0 ? void 0 : nameService.avatar) ? (0, import_jsx_runtime120.jsx)("div", { className: "active-wallet-information__avatar__name-service", children: (0, import_jsx_runtime120.jsx)("img", { src: nameService === null || nameService === void 0 ? void 0 : nameService.avatar, alt: "" }) }) : (0, import_jsx_runtime120.jsx)("div", { className: "active-wallet-information__wallet-img", children: (0, import_jsx_runtime120.jsx)(AuthProviderIcon, { iconSize: ICON_SIZE }) }) }), (0, import_jsx_runtime120.jsxs)("div", { className: "active-wallet-information__details", children: [(0, import_jsx_runtime120.jsx)("div", { className: classNames("active-wallet-information__addresses-container", {
    "active-wallet-information__addresses-container--centered": !(nameService === null || nameService === void 0 ? void 0 : nameService.name)
  }), children: activeWalletAddress() }), !shouldHideNetwork && (0, import_jsx_runtime120.jsx)(NetworkPicker, { currentNetwork: network, connector: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector, isNetworkPickerOpen, setIsNetworkPickerOpen, mainClassName: "active-wallet-information__network-picker", buttonClassName: "active-wallet-information__network-picker-button", evmNetworks, showNetworkName: true, isLoading })] })] }), showTestnetAlert && (0, import_jsx_runtime120.jsx)(Alert, { variant: "warning", copykey: "dyn_active_wallet_info.testnet_warning", children: t2("dyn_active_wallet_info.testnet_warning") })] }), showMultiAsset ? (0, import_jsx_runtime120.jsx)("div", { className: "multi-asset-balance-container", children: multiAssetHeader() }) : (0, import_jsx_runtime120.jsxs)("div", { className: "balance-container", children: [(0, import_jsx_runtime120.jsx)(Typography, { color: "secondary", variant: "body_small", children: "Balance" }), primaryWalletNativeBalance()] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/UnknownWalletInformation/UnknownWalletInformation.js
var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
var import_react160 = __toESM(require_react(), 1);
var import_react_dom47 = __toESM(require_react_dom(), 1);
var import_qrcode45 = __toESM(require_browser(), 1);
var UnknownWalletInformation = ({ address }) => {
  const { handleLogOut } = useInternalDynamicContext();
  const options2 = [
    {
      Icon: null,
      callback: () => address && navigator.clipboard.writeText(address),
      hide: !address,
      text: "Copy wallet address"
    },
    {
      Icon: null,
      callback: handleLogOut,
      text: "Disconnect"
    }
  ];
  return (0, import_jsx_runtime121.jsx)("div", { className: "unknown-wallet-information-container", children: (0, import_jsx_runtime121.jsx)("div", { className: "unknown-wallet-information", children: (0, import_jsx_runtime121.jsx)("div", { className: "unknown-wallet-information__header", children: (0, import_jsx_runtime121.jsx)("div", { className: "unknown-wallet-information__details", children: (0, import_jsx_runtime121.jsxs)("div", { className: "unknown-wallet-information__actions-container", children: [(0, import_jsx_runtime121.jsx)("div", { children: (0, import_jsx_runtime121.jsx)(Typography, { className: "unknown-wallet-information__address", weight: "medium", variant: "body_normal", color: "primary", children: shortenWalletAddress(address, 4, 4) }) }), (0, import_jsx_runtime121.jsx)(DotsMenu, { options: options2, buttonClassName: "unknown-wallet-information__dots-menu", buttonClassNameWithOpenMenu: "unknown-wallet-information__dots-menu" })] }) }) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetWalletHeader/DynamicWidgetWalletHeader.js
var LinkButton = import_react161.default.memo(({ connector }) => {
  const { setDynamicWidgetView } = useWidgetContext();
  const handleOnClickLink = () => {
    setDynamicWidgetView("global-wallet");
  };
  if (!connector.globalWallet)
    return null;
  return (0, import_jsx_runtime122.jsx)(TypographyButton, { expanded: true, dataTestId: "link-button", buttonPadding: "small", buttonVariant: "primary", onClick: handleOnClickLink, startSlot: (0, import_jsx_runtime122.jsx)(Icon, { size: "small", color: "text-secondary", children: (0, import_jsx_runtime122.jsx)(SvgLink, {}) }), children: "Connect" });
});
LinkButton.displayName = "LinkButton";
var DynamicWidgetWalletHeader = ({ variant }) => {
  const { primaryWallet, user } = useInternalDynamicContext();
  const { open: openSendBalanceModal } = useSendBalance();
  const { supportsFunding, setShowFunding, fundingEnabled } = useFundingContext();
  const { setDynamicWidgetView, setIsOpen } = useWidgetContext();
  const { isLoadingEmbeddedWallet } = useWalletContext();
  const { t: t2 } = useTranslation();
  const isSendBalanceEnabled = (0, import_react161.useMemo)(() => {
    const connector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
    if (!connector)
      return false;
    return isSendBalanceWalletConnector(connector);
  }, [primaryWallet]);
  const handleOnClickSend = () => {
    if (variant === "dropdown") {
      setIsOpen(false);
      openSendBalanceModal().catch((err) => logger2.error(err));
    } else {
      setDynamicWidgetView("send-balance");
    }
  };
  const renderWalletHeader = () => {
    const unknownWallet = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((credential) => credential.walletName === "unknown");
    if (primaryWallet || isLoadingEmbeddedWallet) {
      return (0, import_jsx_runtime122.jsx)(ActiveWalletInformation, { isLoading: isLoadingEmbeddedWallet });
    } else if (unknownWallet) {
      return (0, import_jsx_runtime122.jsx)(UnknownWalletInformation, { address: unknownWallet.address });
    } else {
      return (0, import_jsx_runtime122.jsx)("div", { className: "dynamic-widget-wallet-header__icon-container", children: (0, import_jsx_runtime122.jsx)(UserAvatar, { user }) });
    }
  };
  const isActionsVisible = isSendBalanceEnabled || fundingEnabled;
  return (0, import_jsx_runtime122.jsxs)("div", { className: "dynamic-widget-wallet-header", "data-testid": "dynamic-widget-wallet-header", children: [renderWalletHeader(), isLoadingEmbeddedWallet && (0, import_jsx_runtime122.jsx)("div", { className: "dynamic-widget-wallet-header__wallet-info", children: (0, import_jsx_runtime122.jsx)("div", { className: "dynamic-widget-wallet-header__wallet-loading", children: (0, import_jsx_runtime122.jsx)(Alert, { variant: "info", icon: (0, import_jsx_runtime122.jsx)(Spinner, { className: "button__spinner" }), children: t2("dyn_creating_wallet.loading_message") }) }) }), primaryWallet ? (0, import_jsx_runtime122.jsxs)("div", { "data-testid": "primaryWalletStatus", className: "dynamic-widget-wallet-header__wallet-info", children: [(0, import_jsx_runtime122.jsx)(SecureEmbeddedWalletCard, { className: "dynamic-widget-wallet-header__wallet-info__secure-wallet" }), isActionsVisible && (0, import_jsx_runtime122.jsxs)("div", { className: "dynamic-widget-wallet-header__wallet-actions", children: [fundingEnabled && (0, import_jsx_runtime122.jsx)(TypographyButton, { expanded: true, dataTestId: "buy-crypto-button", buttonPadding: "small", buttonVariant: "primary", onClick: () => setShowFunding(true), disabled: !supportsFunding, startSlot: (0, import_jsx_runtime122.jsx)(Icon, { size: "small", color: "text-secondary", children: (0, import_jsx_runtime122.jsx)(SvgAdd, {}) }), children: "Buy" }), isSendBalanceEnabled && (0, import_jsx_runtime122.jsx)(TypographyButton, { expanded: true, dataTestId: "send-balance-button", buttonPadding: "small", buttonVariant: "primary", onClick: handleOnClickSend, startSlot: (0, import_jsx_runtime122.jsx)(Icon, { size: "small", color: "text-secondary", children: (0, import_jsx_runtime122.jsx)(SvgSend, {}) }), children: "Send" }), (0, import_jsx_runtime122.jsx)(LinkButton, { connector: primaryWallet.connector })] })] }) : (0, import_jsx_runtime122.jsx)(Typography, { className: "dynamic-widget-wallet-header__email", variant: "body_normal", weight: "regular", children: !isLoadingEmbeddedWallet && getUserIdentifier(user) })] });
};
import_react161.default.memo(DynamicWidgetWalletHeader);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js
var DynamicWidgetHeader = ({ variant }) => {
  const { overridenWidgetView } = useWidgetContext();
  const { multiWallet } = useInternalDynamicContext();
  return (0, import_jsx_runtime123.jsxs)("div", { className: "dynamic-widget-header", children: [(0, import_jsx_runtime123.jsx)(PasskeyCreatedSuccessBanner, { className: "dynamic-widget-header__passkey-success" }), (overridenWidgetView === "wallets" || overridenWidgetView === "profile" && !multiWallet) && (0, import_jsx_runtime123.jsx)(DynamicWidgetWalletHeader, { variant })] });
};
var MemoizedDynamicWidgetHeader = import_react162.default.memo(DynamicWidgetHeader);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeWalletCard/DynamicBridgeWalletCard.js
var import_qrcode48 = __toESM(require_browser(), 1);
var DynamicBridgeWalletCard = ({ className, networkIcon, networkName, children }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime124.jsxs)("div", { className: classNames("dynamic-bridge-wallet-card", className), children: [(0, import_jsx_runtime124.jsxs)("div", { className: "dynamic-bridge-wallet-card__network", children: [networkIcon && import_react163.default.cloneElement(networkIcon, {
    className: "dynamic-bridge-wallet-card__network-icon"
  }), networkName && (0, import_jsx_runtime124.jsx)(Typography, { className: "dynamic-bridge-wallet-card__network-name", variant: "body_small", color: "primary", weight: "medium", as: "span", copykey: "dyn_bridge.widget.wallet_network", children: t2("dyn_bridge.widget.wallet_network", {
    networkName
  }) })] }), children] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeWalletCardBody/DynamicBridgeWalletCardBody.js
var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
var import_react165 = __toESM(require_react(), 1);
var import_react_dom51 = __toESM(require_react_dom(), 1);
var import_qrcode49 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/WalletInformationCard/WalletInformationCard.js
var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);
var import_react164 = __toESM(require_react(), 1);
var WalletInformationCard = ({ address, ens, balance, icon, network, menu }) => {
  const { t: t2 } = useTranslation();
  const details = (0, import_react164.useMemo)(() => {
    const shortenAddress = shortenWalletAddress(address, 4, 4);
    if (ens) {
      return (0, import_jsx_runtime125.jsxs)(import_jsx_runtime125.Fragment, { children: [(0, import_jsx_runtime125.jsx)(Typography, { color: "primary", variant: "body_normal", truncate: true, children: ens }), (0, import_jsx_runtime125.jsx)(Typography, { weight: "regular", variant: "body_small", color: "secondary", children: shortenAddress })] });
    }
    return (0, import_jsx_runtime125.jsx)(Typography, { weight: "medium", variant: "body_normal", color: "primary", children: shortenAddress });
  }, [ens, address]);
  return (0, import_jsx_runtime125.jsxs)("div", { className: "wallet-information-card", children: [(0, import_jsx_runtime125.jsxs)("div", { className: "wallet-information-card__header", children: [(0, import_jsx_runtime125.jsxs)("div", { className: "wallet-information-card__details-container", children: [icon && (0, import_jsx_runtime125.jsx)(Icon, { className: "wallet-information-card__icon", children: icon }), (0, import_jsx_runtime125.jsx)("div", { className: "wallet-information-card__details", children: details }), (0, import_jsx_runtime125.jsx)("div", { className: "wallet-information-card__menu", children: menu })] }), network] }), (0, import_jsx_runtime125.jsxs)("div", { className: "wallet-information-card__balance-container", children: [(0, import_jsx_runtime125.jsx)(Typography, { color: "secondary", variant: "body_small", copykey: "dyn_wallet_information.balance", children: t2("dyn_wallet_information.balance") }), balance] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeWalletCardBody/DynamicBridgeWalletCardBody.js
var DynamicBridgeWalletCardBody = ({ walletAddress, walletBalance, walletKey, onDisconnectClick }) => {
  const { t: t2 } = useTranslation();
  const nameService = useFetchNameService(walletAddress);
  const options2 = [
    {
      Icon: null,
      callback: () => (nameService === null || nameService === void 0 ? void 0 : nameService.name) && navigator.clipboard.writeText(nameService === null || nameService === void 0 ? void 0 : nameService.name),
      hide: !(nameService === null || nameService === void 0 ? void 0 : nameService.name),
      text: t2("dyn_bridge.widget.copy.ens")
    },
    {
      Icon: null,
      callback: () => walletAddress && navigator.clipboard.writeText(walletAddress),
      hide: !walletAddress,
      text: t2("dyn_bridge.widget.copy.address")
    },
    {
      Icon: null,
      callback: () => onDisconnectClick === null || onDisconnectClick === void 0 ? void 0 : onDisconnectClick(),
      hide: !onDisconnectClick,
      text: t2("dyn_bridge.widget.disconnect")
    }
  ];
  return (0, import_jsx_runtime126.jsx)(WalletInformationCard, { ens: nameService === null || nameService === void 0 ? void 0 : nameService.name, address: walletAddress, icon: (0, import_jsx_runtime126.jsx)(WalletIcon, { walletKey }), balance: walletBalance, menu: (0, import_jsx_runtime126.jsx)(DotsMenu, { options: options2 }), copykey: "dyn_bridge.widget" });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js
var import_react_dom53 = __toESM(require_react_dom(), 1);
var import_qrcode51 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeWidgetEmptyCard/DynamicBridgeWidgetEmptyCard.js
var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
var import_react166 = __toESM(require_react(), 1);
var import_react_dom52 = __toESM(require_react_dom(), 1);
var import_qrcode50 = __toESM(require_browser(), 1);
var DynamicBridgeWidgetEmptyCard = ({ chain }) => {
  const { t: t2 } = useTranslation();
  const { bridgeChainsToConnect, setShowAuthFlow, setShowBridgeWidget } = useInternalDynamicContext();
  if (!(bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length) || !chain) {
    return null;
  }
  const chainInfo = getChainInfoWithOverrides(chain);
  const ChainIcon2 = getChainIcon(chain);
  return (0, import_jsx_runtime127.jsxs)("div", { role: "button", className: "dynamic-bridge-widget-empty-card", onClick: () => {
    setShowBridgeWidget(false);
    setShowAuthFlow(true);
  }, children: [(0, import_jsx_runtime127.jsx)(ChainIcon2, { className: "dynamic-bridge-widget-empty-card__icon" }), (0, import_jsx_runtime127.jsx)(Typography, { variant: "body_normal", weight: "medium", as: "span", color: "primary", className: "dynamic-bridge-widget-empty-card__text", copykey: "dyn_bridge.widget.connect_with_network", children: t2("dyn_bridge.widget.connect_with_network", {
    blockchainName: chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.blockchainName
  }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js
var SecondaryWallets = ({ hideUnlinkAction = false }) => {
  const { disconnectWallet, getConnectedWalletById, bridgeChains } = useInternalDynamicContext();
  const wallet = getConnectedWalletById("connect-wallet-1");
  const NetworkIcon = wallet && getChainIcon(wallet === null || wallet === void 0 ? void 0 : wallet.chain);
  const networkInfo = wallet && getChainInfoWithOverrides(wallet === null || wallet === void 0 ? void 0 : wallet.chain);
  return (0, import_jsx_runtime128.jsxs)(import_jsx_runtime128.Fragment, { children: [!wallet && (0, import_jsx_runtime128.jsx)(DynamicBridgeWidgetEmptyCard, { chain: bridgeChains === null || bridgeChains === void 0 ? void 0 : bridgeChains[1].chain }), wallet && NetworkIcon && (0, import_jsx_runtime128.jsx)(DynamicBridgeWalletCard, { networkIcon: (0, import_jsx_runtime128.jsx)(NetworkIcon, {}), networkName: networkInfo === null || networkInfo === void 0 ? void 0 : networkInfo.displayName, children: (0, import_jsx_runtime128.jsx)(DynamicBridgeWalletCardBody, { walletKey: wallet.connector.key, walletAddress: wallet.address, walletBalance: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime128.jsx)(Balance, { wallet, network: wallet.chain })
  ), onDisconnectClick: !hideUnlinkAction ? () => disconnectWallet(wallet.id) : void 0 }, wallet.id) })] });
};
var MemoSecondaryWallets = import_react167.default.memo(SecondaryWallets);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSmartWallets/useSmartWallets.js
var useSmartWallets = () => {
  const { user, walletConnectorOptions } = useInternalDynamicContext();
  const getSCWAccount = (0, import_react168.useCallback)((wallet) => {
    const { verifiedCredentials } = user !== null && user !== void 0 ? user : {};
    if (!verifiedCredentials)
      return;
    const scwAccount = verifiedCredentials.find((credential) => credential.id === wallet.id);
    return (scwAccount === null || scwAccount === void 0 ? void 0 : scwAccount.walletProvider) === WalletProviderEnum.SmartContractWallet ? scwAccount : void 0;
  }, [user]);
  const getEOAWallet = (0, import_react168.useCallback)((wallet) => {
    var _a, _b, _c;
    const verifiedCredentials = user === null || user === void 0 ? void 0 : user.verifiedCredentials;
    if (!verifiedCredentials)
      return;
    const scwAccount = getSCWAccount(wallet);
    const eoaAccount = verifiedCredentials.find((credential) => credential.id === (scwAccount === null || scwAccount === void 0 ? void 0 : scwAccount.signerRefId));
    if (!(eoaAccount === null || eoaAccount === void 0 ? void 0 : eoaAccount.address) || !(eoaAccount === null || eoaAccount === void 0 ? void 0 : eoaAccount.chain))
      return;
    const { walletConnector } = (_a = findWalletOptionFor(eoaAccount, walletConnectorOptions)) !== null && _a !== void 0 ? _a : {};
    const isTurnkey = (_b = eoaAccount.walletName) === null || _b === void 0 ? void 0 : _b.startsWith("turnkey");
    const isAuthenticated = !isTurnkey || Boolean((_c = eoaAccount.walletProperties) === null || _c === void 0 ? void 0 : _c.isAuthenticatorAttached);
    return walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.createWallet({
      address: eoaAccount.address,
      chain: walletConnector.connectedChain,
      connector: walletConnector,
      id: eoaAccount.id,
      isAuthenticated,
      key: walletConnector.key
    });
  }, [getSCWAccount, user === null || user === void 0 ? void 0 : user.verifiedCredentials, walletConnectorOptions]);
  const getSmartWallet = (0, import_react168.useCallback)((wallet) => {
    var _a;
    const verifiedCredentials = user === null || user === void 0 ? void 0 : user.verifiedCredentials;
    if (!verifiedCredentials)
      return;
    const eoaAccount = verifiedCredentials.find((credential) => credential.id === wallet.id);
    const scwAccount = verifiedCredentials.find((credential) => credential.signerRefId === (eoaAccount === null || eoaAccount === void 0 ? void 0 : eoaAccount.id));
    if (!(scwAccount === null || scwAccount === void 0 ? void 0 : scwAccount.address) || !(scwAccount === null || scwAccount === void 0 ? void 0 : scwAccount.chain))
      return;
    const { walletConnector } = (_a = findWalletOptionFor(scwAccount, walletConnectorOptions)) !== null && _a !== void 0 ? _a : {};
    return walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.createWallet({
      address: scwAccount.address,
      chain: walletConnector.connectedChain,
      connector: walletConnector,
      id: scwAccount.id,
      isAuthenticated: true,
      key: walletConnector.key
    });
  }, [user === null || user === void 0 ? void 0 : user.verifiedCredentials, walletConnectorOptions]);
  return (0, import_react168.useMemo)(() => ({
    getEOAWallet,
    getSmartWallet,
    isSmartWallet: (wallet) => getSCWAccount(wallet) !== void 0
  }), [getEOAWallet, getSCWAccount, getSmartWallet]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsTurnkeyWallet/useIsTurnkeyWallet.js
var import_qrcode53 = __toESM(require_browser(), 1);
var useIsTurnkeyWallet = () => {
  var _a, _b, _c;
  const { primaryWallet, user } = useInternalDynamicContext();
  const { getEOAWallet } = useSmartWallets();
  const wallet = (_a = primaryWallet && getEOAWallet(primaryWallet)) !== null && _a !== void 0 ? _a : primaryWallet;
  const getTurnkeyVerifiedCredential = () => {
    if (!wallet || !user || !wallet.connector.key.startsWith("turnkey")) {
      return void 0;
    }
    const primaryWalletId = wallet.id;
    const turnkeyVC = user.verifiedCredentials.find((vc) => vc.id === primaryWalletId);
    if (!turnkeyVC) {
      return void 0;
    }
    return turnkeyVC;
  };
  const getUnclaimedTurnkeyTheSignerOfScw = () => {
    if (!wallet || !user) {
      return false;
    }
    const unclaimedTurnkeyVc = user.verifiedCredentials.find((vc) => {
      var _a2, _b2;
      return ((_a2 = vc.walletName) === null || _a2 === void 0 ? void 0 : _a2.startsWith("turnkey")) && ((_b2 = vc.walletProperties) === null || _b2 === void 0 ? void 0 : _b2.isAuthenticatorAttached) === false;
    });
    const smartContractWalletWithUnclaimedTurnkeySigner = user.verifiedCredentials.find((vc) => unclaimedTurnkeyVc && vc.signerRefId === unclaimedTurnkeyVc.id);
    return smartContractWalletWithUnclaimedTurnkeySigner;
  };
  const turnkeyVerifiedCredential = getTurnkeyVerifiedCredential();
  const isUnclaimedTurnkeyTheSignerOfScw = Boolean(getUnclaimedTurnkeyTheSignerOfScw());
  const isTurnkeyWallet = Boolean(turnkeyVerifiedCredential || isUnclaimedTurnkeyTheSignerOfScw);
  const hasTurnkeyVerifiedCredentialAuthenticator = Boolean((_b = turnkeyVerifiedCredential === null || turnkeyVerifiedCredential === void 0 ? void 0 : turnkeyVerifiedCredential.walletProperties) === null || _b === void 0 ? void 0 : _b.isAuthenticatorAttached);
  const isTurnkeyWalletWithoutAuthenticator = isTurnkeyWallet && !hasTurnkeyVerifiedCredentialAuthenticator || isUnclaimedTurnkeyTheSignerOfScw;
  const hasRecoveryEmail = isTurnkeyWallet && Boolean(getUserVerifiedCredentialType(user, JwtVerifiedCredentialFormatEnum.Email));
  const isSessionKeyCompatible = isTurnkeyWallet && Boolean((_c = turnkeyVerifiedCredential === null || turnkeyVerifiedCredential === void 0 ? void 0 : turnkeyVerifiedCredential.walletProperties) === null || _c === void 0 ? void 0 : _c.isSessionKeyCompatible);
  return {
    hasRecoveryEmail,
    hasTurnkeyVerifiedCredentialAuthenticator,
    isSessionKeyCompatible,
    isTurnkeyWallet,
    isTurnkeyWalletWithoutAuthenticator,
    turnkeyVerifiedCredential
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/useSecureEnclaveEmbeddedWallet.js
var import_react174 = __toESM(require_react(), 1);
var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/findTurnkeyWallet/findTurnkeyWallet.js
var findTurnkeyWalletByChain = (walletOptions, chainName) => {
  const chain = chainName ? VerifiedCredentialNameToChainEnum[chainName] : void 0;
  return walletOptions === null || walletOptions === void 0 ? void 0 : walletOptions.find(({ key, walletConnector }) => key.startsWith("turnkey") && (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === chain);
};
var findTurnkeyWalletByPrimaryChain = (walletOptions, chainConfigurations, verifiedCredentials) => {
  var _a;
  const primaryEmbeddedChain = ((_a = chainConfigurations === null || chainConfigurations === void 0 ? void 0 : chainConfigurations.find((chain) => chain.primary)) === null || _a === void 0 ? void 0 : _a.name) || ChainEnum.Evm;
  const walletConnector = findTurnkeyWalletByChain(walletOptions, ChainEnumToVerifiedCredentialName[primaryEmbeddedChain]);
  const turnkeyVC = verifiedCredentials === null || verifiedCredentials === void 0 ? void 0 : verifiedCredentials.find(({ walletName, chain }) => (walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey")) && chain === ChainEnumToVerifiedCredentialName[primaryEmbeddedChain]);
  if (!walletConnector) {
    return void 0;
  }
  return Object.assign(Object.assign({}, turnkeyVC), walletConnector);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getUserWalletsFromVerifiedCredentials/getUserWalletsFromVerifiedCredentials.js
var getUserWalletsFromVerifiedCredentials = (user) => {
  var _a;
  return (_a = user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.filter(
    // Only wallets has walletProviders
    ({ walletProvider }) => walletProvider
  );
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/addPasskeyIdentifierToWalletConnector/addPasskeyIdentifierToWalletConnector.js
var addPasskeyIdentifierToWalletConnector = (walletConnector, user) => {
  var _a;
  const passkeyIdentifier = (user === null || user === void 0 ? void 0 : user.phoneNumber) || ((_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((vc) => vc.oauthDisplayName)) === null || _a === void 0 ? void 0 : _a.oauthDisplayName) || "";
  walletConnector.setPasskeyIdentifier(passkeyIdentifier);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getEmbeddedWalletAuthHandler/getEmbeddedWalletAuthHandler.js
var getEmbeddedWalletAuthHandler = (walletConnector) => {
  if (!walletConnector || "getAuthenticatorHandler" in walletConnector === false) {
    throw new DynamicError("Invalid connector type");
  }
  const turnkeyAuthenticatorHandler = walletConnector.getAuthenticatorHandler();
  return turnkeyAuthenticatorHandler;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/useSecureEnclaveEmbeddedWallet.js
var import_react_dom58 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmbeddedReveal/utils/turnkeyExport/turnkeyExport.js
var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);
var import_react170 = __toESM(require_react(), 1);
var initExport = (_a) => __awaiter(void 0, [_a], void 0, function* ({ iframeContainer, iframeElementId: iframeElementId4, wallet }) {
  var _b;
  if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !(wallet === null || wallet === void 0 ? void 0 : wallet.id) || !isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings", INVALID_WALLET_DATA);
  }
  const turnkeyExportHandler = (_b = wallet.connector) === null || _b === void 0 ? void 0 : _b.getExportHandler();
  const publicKey = yield turnkeyExportHandler.initExport(iframeContainer, iframeElementId4);
  if (!publicKey) {
    throw new DynamicError("Something went wrong", ERROR_PROCESSING_REVEAL_REQUEST);
  }
  return turnkeyExportHandler;
});
var handleExportInitCheck = ({ user, wallet }) => {
  var _a, _b;
  if (!user) {
    throw new DynamicError(USER_NOT_LOGGED_IN);
  }
  if (!(wallet === null || wallet === void 0 ? void 0 : wallet.connector) || !(wallet === null || wallet === void 0 ? void 0 : wallet.id) || !isPasskeyWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings");
  }
  const connector = wallet.connector;
  connector.setEmail(user.email);
  const walletProperties = (_b = (_a = user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _b === void 0 ? void 0 : _b.walletProperties;
  const turnkeyHDWalletId = walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.turnkeyHDWalletId;
  const privateKeyId = walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.turnkeyPrivateKeyId;
  const organizationId = walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.turnkeySubOrganizationId;
  if (!organizationId || turnkeyHDWalletId === void 0 && privateKeyId === void 0) {
    throw new DynamicError("Invalid token!");
  }
  return {
    connector,
    organizationId,
    privateKeyId,
    turnkeyHDWalletId
  };
};
var extractExportBundle = ({ address, privateKeyId, activity }) => {
  var _a, _b, _c;
  const exportWalletResult = address ? (_a = activity.result) === null || _a === void 0 ? void 0 : _a.exportWalletAccountResult : (_b = activity.result) === null || _b === void 0 ? void 0 : _b.exportWalletResult;
  const result = privateKeyId ? (_c = activity.result) === null || _c === void 0 ? void 0 : _c.exportPrivateKeyResult : exportWalletResult;
  return result === null || result === void 0 ? void 0 : result.exportBundle;
};
var exportCredential = (_c) => __awaiter(void 0, [_c], void 0, function* ({ user, wallet, environmentId, address }) {
  const { connector, turnkeyHDWalletId, privateKeyId, organizationId } = handleExportInitCheck({
    user,
    wallet
  });
  const turnkeyExportHandler = connector.getExportHandler();
  const targetPublicKey = turnkeyExportHandler.publicKey;
  if (!targetPublicKey) {
    throw new DynamicError("Must initialize export first", ERROR_PROCESSING_REVEAL_REQUEST);
  }
  let newActivity;
  if (turnkeyHDWalletId) {
    newActivity = yield turnkeyExportHandler.exportWallet({
      address,
      organizationId,
      walletId: turnkeyHDWalletId
    });
  } else if (privateKeyId) {
    newActivity = yield turnkeyExportHandler.exportPrivateKey({
      organizationId,
      privateKeyId
    });
  }
  const activityId = newActivity.id;
  const activityStatus = newActivity.status;
  let exportBundle;
  if (activityStatus === "ACTIVITY_STATUS_COMPLETED") {
    exportBundle = extractExportBundle({
      activity: newActivity,
      address,
      privateKeyId
    });
  } else {
    const res = yield exportEmbeddedWallet({
      activityId,
      environmentId,
      walletId: (wallet === null || wallet === void 0 ? void 0 : wallet.id) || ""
    });
    exportBundle = res === null || res === void 0 ? void 0 : res.exportBundle;
  }
  if (!exportBundle) {
    throw new DynamicError("Invalid export response", ERROR_PROCESSING_REVEAL_REQUEST);
  }
  if (address || privateKeyId) {
    return turnkeyExportHandler.verifyExportPrivateKey({
      chain: wallet === null || wallet === void 0 ? void 0 : wallet.chain,
      exportBundle,
      organizationId
    });
  }
  return turnkeyExportHandler.verifyExportWallet({
    exportBundle,
    organizationId
  });
});
var cleanupExport = (_d) => __awaiter(void 0, [_d], void 0, function* ({ wallet }) {
  var _e2;
  const connector = wallet === null || wallet === void 0 ? void 0 : wallet.connector;
  (_e2 = connector === null || connector === void 0 ? void 0 : connector.getExportHandler()) === null || _e2 === void 0 ? void 0 : _e2.clear();
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/validations/validateTurnkeyProviderEnabled/validateTurnkeyProviderEnabled.js
var validateTurnkeyProviderEnabled = (projectSettings) => {
  const isTurnkeyProviderEnabled = isTurnkeyEnabled(projectSettings);
  if (!isTurnkeyProviderEnabled) {
    throw new DynamicError("No embedded wallet is enabled. Go to the dashboard and make sure to have both Embedded wallets and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the DynamicContextProvider > settings > walletConnectors.", SECURE_ENCLAVE_PROVIDER_NOT_ENABLED);
  }
  return isTurnkeyProviderEnabled;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/useTurnkey/useTurnkey.js
var import_react173 = __toESM(require_react(), 1);
var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);
var import_react_dom57 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useCreateDynamicEmbeddedWalletMutation/useCreateDynamicEmbeddedWalletMutation.js
var import_react172 = __toESM(require_react(), 1);
var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
var import_react_dom56 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/utils/createEmbeddedWalletRequest/createEmbeddedWalletRequest.js
var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);
var import_react171 = __toESM(require_react(), 1);
var createEmbeddedWalletRequest = (_a) => __awaiter(void 0, [_a], void 0, function* ({ user, walletConnector, environmentId, chains, webAuthnAttestation, withAuthenticator }) {
  if (!walletConnector) {
    throw new DynamicError("Connector is missing. Please make sure you added EthereumWalletConnectors and/or SolanaWalletConnectors to DynamicProvider settings");
  }
  if (!user) {
    throw new DynamicError("User is not defined");
  }
  walletConnector.setEmail(user.email);
  let authenticatorBody;
  if (withAuthenticator || webAuthnAttestation !== void 0) {
    if (!user.email) {
      addPasskeyIdentifierToWalletConnector(walletConnector, user);
    }
    const { attestation, challenge, displayName } = webAuthnAttestation || (yield walletConnector.getWebAuthnAttestation());
    authenticatorBody = {
      attestation,
      challenge,
      passkeyAlias: displayName
    };
  }
  const updatedUser = yield createTurnkeyEmbeddedWallet(Object.assign({
    chains,
    environmentId
  }, authenticatorBody));
  if (!updatedUser) {
    throw new DynamicError("Failed to create embedded wallet");
  }
  const primaryChain = walletConnector.connectedChain;
  const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(updatedUser, [primaryChain]);
  if (!embeddedWalletVerifiedCredential) {
    throw new DynamicError("EmbeddedWalletVerifiedCredential not found");
  }
  walletConnector.setVerifiedCredentials(updatedUser.verifiedCredentials);
  return {
    embeddedWalletVerifiedCredential,
    updatedUser,
    walletConnector
  };
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/utils/findPasskeyEmailWalletConnector/findPasskeyEmailWalletConnector.js
var findPasskeyEmailWalletConnector = (wallets2, chain) => {
  const walletConnector = wallets2.map(({ walletConnector: walletConnector2 }) => walletConnector2).find((walletConnector2) => isPasskeyWalletConnector(walletConnector2) && isEmailWalletConnector(walletConnector2) && walletConnector2.connectedChain === chain);
  return walletConnector;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/utils/smartWallet/smartWallet.js
var findOwner = (account, verifiedCredentials) => verifiedCredentials.find((credential) => credential.id === account.signerRefId);
var findSmartWallet = (account, verifiedCredentials) => verifiedCredentials.find((credential) => credential.signerRefId === account.id);
var isOwnerOfASmartWallet = (account, verifiedCredentials) => Boolean(findSmartWallet(account, verifiedCredentials));
var initializeSmartWallet = (_a) => __awaiter(void 0, [_a], void 0, function* ({ account, verifiedCredentials, walletConnectorOptions }) {
  var _b, _c;
  const owner = findOwner(account, verifiedCredentials);
  if (!owner) {
    throw new Error("could not find associated eoa account for smart wallet");
  }
  const ownerWallet = findWalletOptionFor(owner, walletConnectorOptions);
  if (!ownerWallet) {
    throw new Error("could not find owner wallet from wallet options");
  }
  if (ownerWallet && isTurnkeyWalletConnector(ownerWallet.walletConnector)) {
    const sortedVcs = (_c = (_b = ownerWallet.walletConnector) === null || _b === void 0 ? void 0 : _b.verifiedCredentials) === null || _c === void 0 ? void 0 : _c.reduce((acc, vc) => {
      if (vc.smartWalletRefAddress && account.address && account.chain && isSameAddress(vc.smartWalletRefAddress, account.address, VerifiedCredentialNameToChainEnum[account.chain])) {
        return [vc, ...acc];
      }
      return [...acc, vc];
    }, []);
    if (sortedVcs) {
      ownerWallet.walletConnector.setVerifiedCredentials(sortedVcs);
    }
  }
  const smartWallet = findWalletOptionFor(account, walletConnectorOptions);
  if (!smartWallet) {
    throw new Error("could not find smart wallet from wallet options");
  }
  const connector = smartWallet.walletConnector;
  if (!isAccountAbstractionConnector(connector)) {
    throw new Error("could not initialize smart wallet");
  }
  yield connector.setEoaConnector(ownerWallet.walletConnector);
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useCreateDynamicEmbeddedWalletMutation/useCreateDynamicEmbeddedWalletMutation.js
var import_qrcode54 = __toESM(require_browser(), 1);
var useCreateDynamicEmbeddedWalletMutation = () => {
  var _a, _b;
  const { setPrimaryWalletId, user, setShowAuthFlow, projectSettings } = useInternalDynamicContext();
  const [isLoading, setIsLoading] = (0, import_react172.useState)(false);
  const [error, setError] = (0, import_react172.useState)();
  const embeddedChainConfig = ((_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.chainConfigurations) || [];
  const primaryEmbeddedChain = findPrimaryEmbeddedChain(projectSettings);
  const embeddedChains = embeddedChainConfig.filter((chain) => chain.enabled).map((c) => c.name === "SOL" ? EmbeddedWalletChainEnum.Sol : EmbeddedWalletChainEnum.Evm);
  const createDynamicEmbeddedWalletMutation = (0, import_react172.useCallback)((_c) => __awaiter(void 0, [_c], void 0, function* ({ environmentId, walletConnectorOptions, withAuthenticator, options: options2, chains }) {
    var _d, _e2;
    setIsLoading(true);
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    try {
      const { embeddedWalletVerifiedCredential, updatedUser, walletConnector } = yield createEmbeddedWalletRequest({
        chains: chains !== null && chains !== void 0 ? chains : embeddedChains,
        environmentId,
        user,
        walletConnector: findPasskeyEmailWalletConnector(walletConnectorOptions, primaryEmbeddedChain),
        webAuthnAttestation: options2 === null || options2 === void 0 ? void 0 : options2.webAuthnAttestation,
        withAuthenticator
      });
      const turnkeyVerifiedCredentials = (_d = updatedUser.verifiedCredentials) === null || _d === void 0 ? void 0 : _d.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"));
      const isAuthenticated = Boolean((_e2 = turnkeyVerifiedCredentials === null || turnkeyVerifiedCredentials === void 0 ? void 0 : turnkeyVerifiedCredentials.walletProperties) === null || _e2 === void 0 ? void 0 : _e2.isAuthenticatorAttached);
      const passkeyWallet = walletConnector.createWallet({
        address: (yield walletConnector.getAddress()) || "",
        chain: walletConnector.connectedChain,
        connector: walletConnector,
        id: embeddedWalletVerifiedCredential.id,
        isAuthenticated,
        key: embeddedWalletVerifiedCredential.walletName || walletConnector.key
      });
      const smartWallet = findSmartWallet(embeddedWalletVerifiedCredential, updatedUser.verifiedCredentials);
      if (!smartWallet) {
        setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
      } else {
        yield initializeSmartWallet({
          account: smartWallet,
          verifiedCredentials: updatedUser.verifiedCredentials,
          walletConnectorOptions
        });
        setPrimaryWalletId(smartWallet.id);
      }
      dynamicEvents.emit("embeddedWalletCreated", passkeyWallet, turnkeyVerifiedCredentials, updatedUser);
      setShowAuthFlow(false, { performMultiWalletChecks: false });
    } catch (err) {
      logger2.error("Failed to create embedded wallet", err);
      setError(err);
      dynamicEvents.emit("embeddedWalletFailed", err);
    } finally {
      setIsLoading(false);
    }
  }), [
    embeddedChains,
    primaryEmbeddedChain,
    setPrimaryWalletId,
    setShowAuthFlow,
    user
  ]);
  return {
    createDynamicEmbeddedWalletMutation,
    error,
    isLoading
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/useTurnkey/useTurnkey.js
var import_qrcode55 = __toESM(require_browser(), 1);
var useTurnkey = () => {
  const { projectSettings, setPrimaryWalletId, walletConnectorOptions, setShowAuthFlow, environmentId, user, primaryWallet } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { createDynamicEmbeddedWalletMutation } = useCreateDynamicEmbeddedWalletMutation();
  const { getEOAWallet } = useSmartWallets();
  const startHeadlessEmbeddedWalletCreationFlow = (0, import_react173.useCallback)((chains, options2) => __awaiter(void 0, void 0, void 0, function* () {
    yield createDynamicEmbeddedWalletMutation({
      chains,
      environmentId,
      options: options2,
      walletConnectorOptions,
      withAuthenticator: false
    });
    setShowAuthFlow(false, { performMultiWalletChecks: false });
    return new Promise((resolve, reject) => {
      dynamicEvents.once("embeddedWalletCreated", (wallet) => resolve(wallet));
      dynamicEvents.once("embeddedWalletFailed", (error) => reject(error));
    });
  }), [
    createDynamicEmbeddedWalletMutation,
    environmentId,
    walletConnectorOptions,
    setShowAuthFlow
  ]);
  const startPasskeyEmbeddedWalletCreationFlow = (0, import_react173.useCallback)((chains) => __awaiter(void 0, void 0, void 0, function* () {
    setShowAuthFlow(true, {
      ignoreIfIsEmbeddedWidget: false,
      performMultiWalletChecks: false
    });
    setView("passkey-intro", { chains });
    return new Promise((resolve, reject) => {
      dynamicEvents.once("embeddedWalletCreated", (wallet) => resolve(wallet));
      dynamicEvents.once("embeddedWalletFailed", (error) => {
        if (error instanceof DOMException && error.name === "NotAllowedError") {
          logger2.error("User cancelled the passkey creation.", error);
          return;
        }
        reject(error);
      });
    });
  }), [setShowAuthFlow, setView]);
  const returnEmbeddedWallet = (0, import_react173.useCallback)((embeddedWalletVerifiedCredential) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const { chain } = embeddedWalletVerifiedCredential;
    const turnkeyWallet = findTurnkeyWalletByChain(walletConnectorOptions, chain);
    let newPrimaryWalletId = null;
    if (user) {
      (_a = turnkeyWallet === null || turnkeyWallet === void 0 ? void 0 : turnkeyWallet.walletConnector) === null || _a === void 0 ? void 0 : _a.setVerifiedCredentials(user.verifiedCredentials);
      const smartWallet = findSmartWallet(embeddedWalletVerifiedCredential, user.verifiedCredentials);
      if (smartWallet) {
        yield initializeSmartWallet({
          account: smartWallet,
          verifiedCredentials: user.verifiedCredentials,
          walletConnectorOptions
        });
        newPrimaryWalletId = smartWallet.id;
      } else {
        newPrimaryWalletId = embeddedWalletVerifiedCredential.id;
      }
    }
    if (newPrimaryWalletId)
      setPrimaryWalletId(newPrimaryWalletId);
    const isAuthenticated = Boolean((_b = embeddedWalletVerifiedCredential.walletProperties) === null || _b === void 0 ? void 0 : _b.isAuthenticatorAttached);
    if (!(turnkeyWallet === null || turnkeyWallet === void 0 ? void 0 : turnkeyWallet.walletConnector)) {
      throw new Error("Could not find the embedded wallet connector");
    }
    const connector = turnkeyWallet.walletConnector;
    const passkeyWallet = connector.createWallet({
      address: (yield connector.getAddress()) || "",
      chain: connector.connectedChain,
      connector,
      id: embeddedWalletVerifiedCredential.id,
      isAuthenticated,
      key: embeddedWalletVerifiedCredential.walletName || connector.key || ""
    });
    return Promise.resolve(passkeyWallet);
  }), [setPrimaryWalletId, walletConnectorOptions, user]);
  const createTurnkeyWallet = (0, import_react173.useCallback)((chains, options2) => __awaiter(void 0, void 0, void 0, function* () {
    var _c, _d, _e2, _f, _g16, _h;
    if (!user) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    const isManualMode = ((_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _c === void 0 ? void 0 : _c.automaticEmbeddedWalletCreation) === false;
    const shouldCreateV2WalletsByDefault = ((_d = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _d === void 0 ? void 0 : _d.defaultWalletVersion) === EmbeddedWalletVersionEnum.V2;
    const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user, chains);
    const userWalletsCredentials = getUserWalletsFromVerifiedCredentials(user);
    if (!(userWalletsCredentials === null || userWalletsCredentials === void 0 ? void 0 : userWalletsCredentials.length) || !embeddedWalletVerifiedCredential && isManualMode) {
      const hasEmailVC = getUserVerifiedCredentialType(user, JwtVerifiedCredentialFormatEnum.Email);
      if (!((_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _e2 === void 0 ? void 0 : _e2.forceAuthenticatorAtSignup) && hasEmailVC || (options2 === null || options2 === void 0 ? void 0 : options2.webAuthnAttestation) || shouldCreateV2WalletsByDefault) {
        return startHeadlessEmbeddedWalletCreationFlow(chains, options2);
      } else {
        return startPasskeyEmbeddedWalletCreationFlow(chains);
      }
    } else {
      if (embeddedWalletVerifiedCredential && user.newUser && ((_f = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _f === void 0 ? void 0 : _f.automaticEmbeddedWalletCreation)) {
        const walletConnector = findPasskeyEmailWalletConnector(walletConnectorOptions, findPrimaryEmbeddedChain(projectSettings));
        if (!walletConnector) {
          throw new Error("Could not find the embedded wallet connector");
        }
        const wallet = walletConnector.createWallet({
          address: (yield walletConnector.getAddress()) || "",
          chain: walletConnector.connectedChain,
          connector: walletConnector,
          id: embeddedWalletVerifiedCredential.id,
          isAuthenticated: Boolean((_g16 = embeddedWalletVerifiedCredential === null || embeddedWalletVerifiedCredential === void 0 ? void 0 : embeddedWalletVerifiedCredential.walletProperties) === null || _g16 === void 0 ? void 0 : _g16.isAuthenticatorAttached),
          key: (_h = embeddedWalletVerifiedCredential.walletName) !== null && _h !== void 0 ? _h : walletConnector.key
        });
        setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
        dynamicEvents.emit("embeddedWalletCreated", wallet, embeddedWalletVerifiedCredential, user);
      }
    }
    setShowAuthFlow(false, { performMultiWalletChecks: false });
    if (!embeddedWalletVerifiedCredential) {
      throw new Error("Primary wallet is not an embedded wallet");
    }
    return returnEmbeddedWallet(embeddedWalletVerifiedCredential);
  }), [
    user,
    projectSettings,
    primaryWallet,
    getEOAWallet,
    setShowAuthFlow,
    returnEmbeddedWallet,
    startHeadlessEmbeddedWalletCreationFlow,
    startPasskeyEmbeddedWalletCreationFlow,
    walletConnectorOptions,
    setPrimaryWalletId
  ]);
  return {
    createTurnkeyWallet
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/useSecureEnclaveEmbeddedWallet.js
var import_qrcode56 = __toESM(require_browser(), 1);
var isConnectorSessionKeyActive = (connector) => {
  var _a;
  if (!connector || !isSessionKeyCompatibleWalletConnector(connector))
    return false;
  return Boolean((_a = connector.sessionKeys) === null || _a === void 0 ? void 0 : _a.publicKey);
};
var useSecureEnclaveEmbeddedWallet = () => {
  var _a, _b, _c, _d;
  const { projectSettings, primaryWallet, user, environmentId, walletConnectorOptions } = useInternalDynamicContext();
  const { createTurnkeyWallet } = useTurnkey();
  const { hasRecoveryEmail } = useIsTurnkeyWallet();
  const { createRootElement } = useElementById();
  const { isLoadingEmbeddedWallet, setIsLoadingEmbeddedWallet } = useWalletContext();
  const { getEOAWallet } = useSmartWallets();
  const wallet = (_a = primaryWallet && getEOAWallet(primaryWallet)) !== null && _a !== void 0 ? _a : primaryWallet;
  const userHasEmbeddedWallet = (0, import_react174.useCallback)(() => hasEmbeddedWallet(user, "turnkey"), [user]);
  const getWalletVersion = (0, import_react174.useCallback)(() => {
    if (isSessionKeyCompatibleWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
      return EmbeddedWalletVersion.V2;
    }
    return EmbeddedWalletVersion.V1;
  }, [wallet === null || wallet === void 0 ? void 0 : wallet.connector]);
  const { shouldInitRecovery, initPasskeyRecoveryProcess } = usePasskeyRecovery();
  const createEmbeddedWallet = (0, import_react174.useCallback)((chains, options2) => __awaiter(void 0, void 0, void 0, function* () {
    var _e2;
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    const userWalletsCredentials = getUserWalletsFromVerifiedCredentials(user);
    const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user, chains);
    const isManualMode = ((_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _e2 === void 0 ? void 0 : _e2.automaticEmbeddedWalletCreation) === false;
    if ((userWalletsCredentials === null || userWalletsCredentials === void 0 ? void 0 : userWalletsCredentials.length) && !embeddedWalletVerifiedCredential && !isManualMode) {
      throw new EmbeddedWalletException("User already has a linked branded wallet, and manual mode creation is not enabled.");
    }
    validateTurnkeyProviderEnabled(projectSettings);
    setIsLoadingEmbeddedWallet(false);
    return createTurnkeyWallet(chains, options2);
  }), [createTurnkeyWallet, projectSettings, setIsLoadingEmbeddedWallet, user]);
  const createEmbeddedWalletAccount$1 = (0, import_react174.useCallback)((_f) => __awaiter(void 0, [_f], void 0, function* ({ chain }) {
    var _g16, _h, _j;
    if (!user) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    validateTurnkeyProviderEnabled(projectSettings);
    const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user);
    const turnkeyWalletId = (_g16 = embeddedWalletVerifiedCredential === null || embeddedWalletVerifiedCredential === void 0 ? void 0 : embeddedWalletVerifiedCredential.walletProperties) === null || _g16 === void 0 ? void 0 : _g16.turnkeyHDWalletId;
    if (!turnkeyWalletId) {
      throw new DynamicError("No HD wallet was found for this user to derive a wallet account. Use createEmbeddedWallet first", "NoHdWalletFound");
    }
    const requestToStamp = yield getCreateEmbeddedWalletAccountRequest({
      chain,
      environmentId
    });
    if (isSessionKeyCompatibleWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
      yield (_h = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _h === void 0 ? void 0 : _h.createOrRestoreSession({
        ignoreRestore: true
      });
    } else if (yield shouldInitRecovery()) {
      yield initPasskeyRecoveryProcess("email");
    }
    const signedRequest = yield (_j = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _j === void 0 ? void 0 : _j.stampCreateWalletAccountRequest({
      request: requestToStamp
    });
    yield createEmbeddedWalletAccount({
      createEmbeddedWalletAccountRequest: signedRequest,
      environmentId
    });
    return refreshUserJwt({ environmentId });
  }), [
    environmentId,
    wallet === null || wallet === void 0 ? void 0 : wallet.connector,
    initPasskeyRecoveryProcess,
    projectSettings,
    shouldInitRecovery,
    user
  ]);
  const createOrRestoreSession = (0, import_react174.useCallback)((options2) => __awaiter(void 0, void 0, void 0, function* () {
    var _k, _l, _m, _o, _p, _q;
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    const primaryConnector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
    if (primaryConnector && isSessionKeyCompatibleWalletConnector(primaryConnector)) {
      return primaryConnector.createOrRestoreSession();
    }
    const eoaConnector = wallet === null || wallet === void 0 ? void 0 : wallet.connector;
    if (eoaConnector && isSessionKeyCompatibleWalletConnector(eoaConnector)) {
      return eoaConnector.createOrRestoreSession();
    }
    const turnkeyRecoveryHandler = getEmbeddedWalletAuthHandler(wallet === null || wallet === void 0 ? void 0 : wallet.connector);
    if (turnkeyRecoveryHandler.isSessionActive()) {
      return ACTIVE_SESSION;
    }
    const turnkeyAuthIframeContainerRef = createRootElement(iframeContainerId);
    if (canRestoreEmbeddedWalletSession((_k = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _k === void 0 ? void 0 : _k.sessionKeyDuration)) {
      try {
        const sessionRestored = yield restoreEmbeddedWalletSession({
          iframeContainer: turnkeyAuthIframeContainerRef.current,
          iframeElementId,
          sessionExpiration: getEmbeddedWalletSessionExpiration((_m = (_l = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _l === void 0 ? void 0 : _l.embeddedWallets) === null || _m === void 0 ? void 0 : _m.sessionKeyDuration),
          user,
          wallet: primaryWallet
        });
        if (sessionRestored)
          return SESSION_RESTORED;
      } catch (err) {
        logger2.error("Failed to restore embedded wallet", err);
      }
    }
    if (!(options2 === null || options2 === void 0 ? void 0 : options2.oneTimeCode)) {
      throw new DynamicError("One-time code is required to create a session.", INVALID_REQUEST);
    }
    if (!userHasEmbeddedWallet() || !hasRecoveryEmail) {
      throw new DynamicError("User does not have a secure enclave wallet or a verified email", INVALID_WALLET_DATA);
    }
    const organizationId = (_q = (_p = (_o = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _o === void 0 ? void 0 : _o.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _p === void 0 ? void 0 : _p.walletProperties) === null || _q === void 0 ? void 0 : _q.turnkeySubOrganizationId;
    yield turnkeyRecoveryHandler.verifyRecoveryCode(options2.oneTimeCode, organizationId);
    const sessionSettings = {
      createdAt: (/* @__PURE__ */ new Date()).getTime(),
      emailCode: options2.oneTimeCode,
      userId: turnkeyRecoveryHandler.recoveryUserId
    };
    StorageService.setItem(EMBEDDED_WALLET_SESSION_SETTINGS, sessionSettings);
    return SESSION_CREATED;
  }), [
    createRootElement,
    user,
    hasRecoveryEmail,
    primaryWallet,
    (_c = (_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _b === void 0 ? void 0 : _b.embeddedWallets) === null || _c === void 0 ? void 0 : _c.sessionKeyDuration,
    userHasEmbeddedWallet,
    wallet === null || wallet === void 0 ? void 0 : wallet.connector
  ]);
  const createPasskey = (0, import_react174.useCallback)((options2) => __awaiter(void 0, void 0, void 0, function* () {
    var _r, _s;
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    validateTurnkeyProviderEnabled(projectSettings);
    const turnkeyWallet = findTurnkeyWalletByPrimaryChain(walletConnectorOptions, (_r = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _r === void 0 ? void 0 : _r.chainConfigurations, user.verifiedCredentials);
    if (!(turnkeyWallet === null || turnkeyWallet === void 0 ? void 0 : turnkeyWallet.walletConnector)) {
      throw new DynamicError("Wallet connector not found", INVALID_WALLET_DATA);
    }
    const walletConnector = turnkeyWallet.walletConnector;
    walletConnector.setEmail(user === null || user === void 0 ? void 0 : user.email);
    if (user && !(user === null || user === void 0 ? void 0 : user.email)) {
      addPasskeyIdentifierToWalletConnector(walletConnector, user);
    }
    const hasEmailVC = getUserVerifiedCredentialType(user, JwtVerifiedCredentialFormatEnum.Email);
    if (!("id" in turnkeyWallet) || !hasEmailVC) {
      return walletConnector.getWebAuthnAttestation();
    }
    const turnkeySubOrganizationId = (_s = turnkeyWallet === null || turnkeyWallet === void 0 ? void 0 : turnkeyWallet.walletProperties) === null || _s === void 0 ? void 0 : _s.turnkeySubOrganizationId;
    if (!turnkeySubOrganizationId) {
      throw new DynamicError("No sub organization id found for the wallet", INVALID_WALLET_DATA);
    }
    const turnkAuthenticatorHandler = getEmbeddedWalletAuthHandler(walletConnector);
    yield createOrRestoreSession(options2);
    const { attestation, challenge, displayName } = yield walletConnector.getWebAuthnAttestation();
    yield turnkAuthenticatorHandler.addPasskeyAuthenticator({
      attestation,
      challenge,
      turnkeySubOrganizationId
    });
    const updatedUser = yield completePasskeyRecovery({
      attestation,
      challenge,
      environmentId,
      walletId: turnkeyWallet === null || turnkeyWallet === void 0 ? void 0 : turnkeyWallet.id
    });
    if (!updatedUser) {
      throw new DynamicError("Error completing passkey recovery");
    }
    return { attestation, challenge, displayName };
  }), [
    createOrRestoreSession,
    environmentId,
    projectSettings,
    user,
    walletConnectorOptions
  ]);
  const getPasskeys = (0, import_react174.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    const data = yield getUserPasskeys({
      environmentId
    });
    return data.passkeys;
  }), [user, environmentId]);
  const isEmailAuthSessionActive = (0, import_react174.useMemo)(() => {
    var _a2;
    const eoaConnector = wallet === null || wallet === void 0 ? void 0 : wallet.connector;
    if (!eoaConnector || !("getAuthenticatorHandler" in eoaConnector))
      return false;
    return (_a2 = getEmbeddedWalletAuthHandler(eoaConnector)) === null || _a2 === void 0 ? void 0 : _a2.isSessionActive();
  }, [wallet === null || wallet === void 0 ? void 0 : wallet.connector]);
  const isSessionKeySessionAAActive = (0, import_react174.useMemo)(() => isConnectorSessionKeyActive(wallet === null || wallet === void 0 ? void 0 : wallet.connector), [wallet === null || wallet === void 0 ? void 0 : wallet.connector]);
  const isSessionKeySessionActive = (0, import_react174.useMemo)(() => isConnectorSessionKeyActive(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector), [primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector]);
  const isSessionActive = isEmailAuthSessionActive || isSessionKeySessionActive || isSessionKeySessionAAActive;
  const revealEmbeddedWalletKey = (0, import_react174.useCallback)((_t) => __awaiter(void 0, [_t], void 0, function* ({ type, htmlContainerId }) {
    var _u, _v, _w, _x, _y, _z;
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    yield cleanupExport({
      wallet
    });
    const turnkeyWallet = findTurnkeyWalletByPrimaryChain(walletConnectorOptions, (_u = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _u === void 0 ? void 0 : _u.chainConfigurations, user === null || user === void 0 ? void 0 : user.verifiedCredentials);
    const turnkeyHDWalletId = (_v = turnkeyWallet === null || turnkeyWallet === void 0 ? void 0 : turnkeyWallet.walletProperties) === null || _v === void 0 ? void 0 : _v.turnkeyHDWalletId;
    if (type === "recoveryPhrase" && !turnkeyHDWalletId) {
      type = "privateKey";
    }
    const iframeContainerElement = createRootElement(revealIframeElementId, htmlContainerId || revealIframeContainerId);
    iframeContainerElement.current.style.display = "none";
    if (isSessionKeyCompatibleWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
      yield (_w = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _w === void 0 ? void 0 : _w.createOrRestoreSession();
    }
    yield initExport({
      iframeContainer: iframeContainerElement.current,
      iframeElementId: revealIframeElementId,
      wallet
    });
    try {
      yield exportCredential({
        address: type === "privateKey" ? wallet === null || wallet === void 0 ? void 0 : wallet.address : void 0,
        environmentId,
        user,
        wallet
      });
    } catch (_0) {
      if (isSessionKeyCompatibleWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector) && ((_x = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _x === void 0 ? void 0 : _x.removeSessionKeys)) {
        yield (_y = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _y === void 0 ? void 0 : _y.removeSessionKeys();
        yield (_z = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _z === void 0 ? void 0 : _z.createOrRestoreSession({
          ignoreRestore: true
        });
      }
      yield exportCredential({
        address: type === "privateKey" ? wallet === null || wallet === void 0 ? void 0 : wallet.address : void 0,
        environmentId,
        user,
        wallet
      });
    }
    iframeContainerElement.current.style.display = "block";
    return true;
  }), [
    createRootElement,
    environmentId,
    wallet,
    (_d = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _d === void 0 ? void 0 : _d.chainConfigurations,
    user,
    walletConnectorOptions
  ]);
  const sendOneTimeCode = (0, import_react174.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    var _1, _2;
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    const targetTurnkeyWallet = findTurnkeyWalletByPrimaryChain(walletConnectorOptions, (_1 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _1 === void 0 ? void 0 : _1.chainConfigurations, user.verifiedCredentials);
    if (!targetTurnkeyWallet || !("id" in targetTurnkeyWallet)) {
      throw new DynamicError("User does not have a valid secure enclave wallet", INVALID_WALLET_DATA);
    }
    const turnkeyAuthenticatorHandler = getEmbeddedWalletAuthHandler(targetTurnkeyWallet === null || targetTurnkeyWallet === void 0 ? void 0 : targetTurnkeyWallet.walletConnector);
    const targetTurnkeyWalletId = targetTurnkeyWallet.id;
    const isSessionActive2 = turnkeyAuthenticatorHandler.isSessionActive();
    if (isSessionActive2) {
      throw new DynamicError("Session is active. No need to create a new one", ACTIVE_SESSION);
    }
    const turnkeyAuthIframeContainerRef = createRootElement(iframeContainerId);
    const publicKey = yield turnkeyAuthenticatorHandler.initRecovery("email", turnkeyAuthIframeContainerRef.current, iframeElementId, getEmbeddedWalletSessionExpiration((_2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _2 === void 0 ? void 0 : _2.sessionKeyDuration));
    if (!publicKey) {
      throw new DynamicError(ERROR_SENDING_CODE);
    }
    const response = yield initEmbeddedWalletSession({
      authenticatorType: "email",
      environmentId,
      publicKey,
      walletId: targetTurnkeyWalletId
    });
    turnkeyAuthenticatorHandler.recoveryUserId = response.turnkeyUserId;
    return CODE_SENT;
  }), [
    createRootElement,
    user,
    environmentId,
    projectSettings,
    walletConnectorOptions
  ]);
  return (0, import_react174.useMemo)(() => ({
    createEmbeddedWallet,
    createEmbeddedWalletAccount: createEmbeddedWalletAccount$1,
    createOrRestoreSession,
    createPasskey,
    getPasskeys,
    getWalletVersion,
    isLoadingEmbeddedWallet,
    isSessionActive,
    revealEmbeddedWalletKey,
    sendOneTimeCode,
    userHasEmbeddedWallet
  }), [
    createEmbeddedWallet,
    createEmbeddedWalletAccount$1,
    createOrRestoreSession,
    createPasskey,
    getPasskeys,
    getWalletVersion,
    isLoadingEmbeddedWallet,
    isSessionActive,
    revealEmbeddedWalletKey,
    sendOneTimeCode,
    userHasEmbeddedWallet
  ]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/useMPCEmbeddedWallet.js
var import_react179 = __toESM(require_react(), 1);
var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.js
var findCoinbaseMPCWallet = (walletOptions) => walletOptions === null || walletOptions === void 0 ? void 0 : walletOptions.find(({ key }) => key === "coinbasempc");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/requiresPasswordForEmbeddedWallet/requiresPasswordForEmbeddedWallet.js
var requiresPasswordForEmbeddedWallet = (projectSettings) => {
  var _a, _b;
  const embeddedWalletsPasswordSettings = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.supportedSecurityMethods) === null || _b === void 0 ? void 0 : _b.password;
  if (!embeddedWalletsPasswordSettings) {
    return false;
  }
  return embeddedWalletsPasswordSettings.isEnabled && embeddedWalletsPasswordSettings.isDefault;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/requiresPasswordForEmbeddedWalletOnSignup/requiresPasswordForEmbeddedWalletOnSignup.js
var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
var import_react175 = __toESM(require_react(), 1);
var requiresPasswordForEmbeddedWalletOnSignup = (projectSettings) => {
  const embeddedWalletsSettings = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets;
  if (!embeddedWalletsSettings) {
    return false;
  }
  return requiresPasswordForEmbeddedWallet(projectSettings) && Boolean(embeddedWalletsSettings.forceAuthenticatorAtSignup);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/useMPCEmbeddedWallet.js
var import_react_dom61 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/validations/validateMPCProviderEnabled/validateMPCProviderEnabled.js
var validateMPCProviderEnabled = (projectSettings) => {
  if (!projectSettings) {
    throw new Error("Project settings are missing");
  }
  const isCoinbaseWaaSProviderEnabled = isCoinbaseWaasEnabled(projectSettings);
  if (!isCoinbaseWaaSProviderEnabled) {
    throw new Error("No embedded wallet is enabled. Go to the dashboard and make sure to have both Embedded wallets and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the DynamicContextProvider > settings > walletConnectors.");
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletPassword/useEmbeddedWalletPassword.js
var import_react176 = __toESM(require_react(), 1);
var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);
var import_react_dom59 = __toESM(require_react_dom(), 1);
var import_qrcode57 = __toESM(require_browser(), 1);
var useEmbeddedWalletPassword = () => {
  const { primaryWallet, setShowAuthFlow, environmentId } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const createPassword = (0, import_react176.useCallback)((isClaim, isSignUp) => __awaiter(void 0, void 0, void 0, function* () {
    setShowAuthFlow(true, { ignoreIfIsEmbeddedWidget: false });
    if (isClaim) {
      setView("wallet-claim-intro");
    } else {
      setView("create-password-view", {
        isSignUp,
        notCalledFromWalletUtils: true
      });
    }
    return new Promise((resolve, reject) => {
      dynamicEvents.once("embeddedWalletCreatePasswordCompleted", (password) => resolve(password));
      dynamicEvents.once("embeddedWalletCreatePasswordFailed", (error) => reject(error));
    });
  }), [setShowAuthFlow, setView]);
  const claimWallet = (0, import_react176.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    try {
      if (!primaryWallet) {
        throw new Error("No primary wallet");
      }
      const refreshedToken = yield claimEmbeddedWallet({
        environmentId,
        walletId: primaryWallet.id
      });
      if ("code" in refreshedToken) {
        logger2.error("Error updating jwt after claiming wallet");
        return;
      }
    } catch (error) {
      logger2.error("Error claiming wallet", error);
      throw new Error("Error claiming wallet");
    }
  }), [environmentId, primaryWallet]);
  return {
    claimWallet,
    createPassword
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/useCoinbaseMPC/useCoinbaseMPC.js
var import_react178 = __toESM(require_react(), 1);
var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/generateRandomPassword/generateRandomPassword.js
var generateRandomPassword = (length = 20) => {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
  let generatedPassword = "";
  for (let i = 0; i < length; i++) {
    generatedPassword += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return generatedPassword;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getCoinbaseMPCConnectorFetchers/getCoinbaseMPCConnectorFetchers.js
var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
var import_react177 = __toESM(require_react(), 1);
var getCoinbaseMPCConnectorFetchers = ({ environmentId }) => {
  const fetchAuthToken = () => __awaiter(void 0, void 0, void 0, function* () {
    const token = yield getWalletAuthToken({
      environmentId,
      type: EmbeddedWalletAuthType.Mpc
    });
    return token || "";
  });
  const fetchBackupCode = () => __awaiter(void 0, void 0, void 0, function* () {
    const token = yield getEmbeddedWalletBackup({
      environmentId
    });
    return token || "";
  });
  const fetchPasscode = () => __awaiter(void 0, void 0, void 0, function* () {
    const token = yield getEmbeddedWalletPasscode({
      environmentId
    });
    return token || "";
  });
  return { fetchAuthToken, fetchBackupCode, fetchPasscode };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/useCoinbaseMPC/useCoinbaseMPC.js
var import_react_dom60 = __toESM(require_react_dom(), 1);
var import_qrcode58 = __toESM(require_browser(), 1);
var DYNAMIC_PASSWORD_LENGTH = 20;
var useCoinbaseMPC = () => {
  const { user, setPrimaryWalletId, walletConnectorOptions, environmentId, consumeNonce, displaySiweStatement, appName, siweStatement, handleLogOut, setShowAuthFlow } = useInternalDynamicContext();
  const { setError } = useErrorContext();
  const returnExistingCoinbaseMPCWallet = (0, import_react178.useCallback)((validatedUser, connector, embeddedWalletVerifiedCredential) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    connector.setVerifiedCredentials(validatedUser.verifiedCredentials);
    setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
    const coinbaseMPCWallet = connector.createWallet({
      address: (yield connector === null || connector === void 0 ? void 0 : connector.getAddress()) || "",
      chain: connector.connectedChain,
      connector,
      id: embeddedWalletVerifiedCredential.id,
      isAuthenticated: true,
      key: (_a = embeddedWalletVerifiedCredential.walletName) !== null && _a !== void 0 ? _a : connector.key
    });
    return coinbaseMPCWallet;
  }), [setPrimaryWalletId]);
  const linkCoinbaseMPCWallet = (0, import_react178.useCallback)((_b) => __awaiter(void 0, [_b], void 0, function* ({ connector, backupCode, password, source }) {
    const nonce = consumeNonce();
    if (nonce === void 0)
      throw new DynamicError("Missing nonce");
    const address = yield connector.getAddress();
    if (!address)
      throw new DynamicError("Missing address");
    const verifyArgs = yield getVerifyArgs({
      displaySiweStatement,
      environmentId,
      nonce,
      publicWalletAddress: address,
      siweStatement: getSiweStatement({ appName, siweStatement }),
      walletConnector: connector,
      walletProvider: "embeddedWallet"
    });
    const passcodeArgs = source === PasswordSourceTypeEnum.Dynamic ? { password, passwordSource: source } : {};
    const response = yield linkWallet(environmentId, Object.assign(Object.assign(Object.assign({}, passcodeArgs), verifyArgs), { backup: backupCode }));
    if (!response) {
      throw new DynamicError("Unable to link wallet");
    }
    const updatedUserProfile = createUserProfileFromSdkUser(response.user);
    const newSelectedCredentialWallet = updatedUserProfile.verifiedCredentials.find((cred) => cred.id === updatedUserProfile.lastVerifiedCredentialId && cred.format === "blockchain");
    if (!newSelectedCredentialWallet) {
      throw new DynamicError("No primary wallet found");
    }
    setPrimaryWalletId(newSelectedCredentialWallet.id);
    connector.setVerifiedCredentials(updatedUserProfile.verifiedCredentials);
    return { newSelectedCredentialWallet, updatedUser: updatedUserProfile };
  }), [
    appName,
    consumeNonce,
    displaySiweStatement,
    environmentId,
    setPrimaryWalletId,
    siweStatement
  ]);
  const createNewCoinbaseMPCWallet = (0, import_react178.useCallback)((connector, password) => __awaiter(void 0, void 0, void 0, function* () {
    var _c;
    const initialWalletPassword = password ? password : generateRandomPassword(DYNAMIC_PASSWORD_LENGTH);
    const source = password ? PasswordSourceTypeEnum.User : PasswordSourceTypeEnum.Dynamic;
    try {
      const backupCode = yield connector.generateWallet(source, initialWalletPassword);
      const { updatedUser, newSelectedCredentialWallet } = yield linkCoinbaseMPCWallet({
        backupCode,
        connector,
        password: initialWalletPassword,
        source
      });
      const coinbaseMPCWallet = connector.createWallet({
        address: (yield connector === null || connector === void 0 ? void 0 : connector.getAddress()) || "",
        chain: connector === null || connector === void 0 ? void 0 : connector.connectedChain,
        connector,
        id: newSelectedCredentialWallet.id,
        isAuthenticated: true,
        key: (_c = newSelectedCredentialWallet.walletName) !== null && _c !== void 0 ? _c : connector.key
      });
      dynamicEvents.emit("embeddedWalletCreated", coinbaseMPCWallet, newSelectedCredentialWallet, updatedUser);
      return coinbaseMPCWallet;
    } catch (error) {
      logger2.error(error);
      if (error instanceof DynamicError && error.code === "create_embedded_wallet_error") {
        yield handleLogOut();
        setError(error.message);
      }
    }
    return void 0;
  }), [linkCoinbaseMPCWallet, handleLogOut, setError]);
  const createCoinbaseMPCWallet = (0, import_react178.useCallback)((...args_1) => __awaiter(void 0, [...args_1], void 0, function* (chains = [EmbeddedWalletChainEnum.Evm], password) {
    var _d;
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    const connector = (_d = findCoinbaseMPCWallet(walletConnectorOptions)) === null || _d === void 0 ? void 0 : _d.walletConnector;
    if (!connector || !isCoinbaseMpcWalletConnector(connector)) {
      const error = new DynamicError("CoinbaseWaaSWalletConnectors not found");
      logger2.error("Failed to create embedded wallet", error);
      dynamicEvents.emit("embeddedWalletFailed", error);
      setError(error.message);
      throw error;
    }
    setShowAuthFlow(false);
    const { fetchAuthToken } = getCoinbaseMPCConnectorFetchers({
      environmentId
    });
    if (fetchAuthToken) {
      connector.setAuthTokenFetcher(fetchAuthToken);
    }
    const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user, chains);
    if (embeddedWalletVerifiedCredential) {
      return returnExistingCoinbaseMPCWallet(user, connector, embeddedWalletVerifiedCredential);
    }
    return createNewCoinbaseMPCWallet(connector, password);
  }), [
    user,
    walletConnectorOptions,
    setShowAuthFlow,
    environmentId,
    createNewCoinbaseMPCWallet,
    setError,
    returnExistingCoinbaseMPCWallet
  ]);
  return {
    createCoinbaseMPCWallet
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useMPCEmbeddedWallet/useMPCEmbeddedWallet.js
var import_qrcode59 = __toESM(require_browser(), 1);
var useMPCEmbeddedWallet = () => {
  const { projectSettings, walletConnectorOptions, user } = useInternalDynamicContext();
  const { createPassword: internalCreatePassword } = useEmbeddedWalletPassword();
  const { createCoinbaseMPCWallet } = useCoinbaseMPC();
  const { isLoadingEmbeddedWallet, setIsLoadingEmbeddedWallet } = useWalletContext();
  const userHasEmbeddedWallet = () => hasEmbeddedWallet(user, "coinbase");
  const createPassword = (0, import_react179.useCallback)((showIntro) => __awaiter(void 0, void 0, void 0, function* () {
    return internalCreatePassword(showIntro);
  }), [internalCreatePassword]);
  const prepareToCreateMPCWallet = (0, import_react179.useCallback)((chains) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c;
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    const userWalletsCredentials = getUserWalletsFromVerifiedCredentials(user);
    const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user, chains);
    const isManualMode = ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.automaticEmbeddedWalletCreation) === false;
    if ((userWalletsCredentials === null || userWalletsCredentials === void 0 ? void 0 : userWalletsCredentials.length) && !embeddedWalletVerifiedCredential && !isManualMode) {
      throw new EmbeddedWalletException("User already has a linked branded wallet, and manual mode creation is not enabled.");
    }
    validateMPCProviderEnabled(projectSettings);
    const connector = (_b = findCoinbaseMPCWallet(walletConnectorOptions)) === null || _b === void 0 ? void 0 : _b.walletConnector;
    if (!isCoinbaseMpcWalletConnector(connector)) {
      throw new Error("Coinbase MPC wallet connector not found");
    }
    connector.setRequiredPassword((_c = requiresPasswordForEmbeddedWallet(projectSettings)) !== null && _c !== void 0 ? _c : false);
  }), [user, projectSettings, walletConnectorOptions]);
  const canCreateMPCWallet = (0, import_react179.useCallback)((chains) => __awaiter(void 0, void 0, void 0, function* () {
    try {
      yield prepareToCreateMPCWallet(chains);
      return true;
    } catch (e2) {
      return false;
    }
  }), [prepareToCreateMPCWallet]);
  const createEmbeddedWallet = (0, import_react179.useCallback)((chains) => __awaiter(void 0, void 0, void 0, function* () {
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    yield prepareToCreateMPCWallet(chains);
    setIsLoadingEmbeddedWallet(true);
    let password;
    const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user, chains);
    if (!embeddedWalletVerifiedCredential && requiresPasswordForEmbeddedWalletOnSignup(projectSettings)) {
      password = yield internalCreatePassword(false, true);
    }
    const wallet = yield createCoinbaseMPCWallet(chains, password);
    setIsLoadingEmbeddedWallet(false);
    return wallet;
  }), [
    user,
    createCoinbaseMPCWallet,
    internalCreatePassword,
    prepareToCreateMPCWallet,
    projectSettings,
    setIsLoadingEmbeddedWallet
  ]);
  const revealEmbeddedWalletKey = () => __awaiter(void 0, void 0, void 0, function* () {
    throw new DynamicError("Coinbase MPC wallet does not support headless reveal yet");
  });
  return {
    canCreateMPCWallet,
    createEmbeddedWallet,
    createPassword,
    isLoadingEmbeddedWallet,
    revealEmbeddedWalletKey,
    userHasEmbeddedWallet
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useEmbeddedWallet.js
var import_qrcode60 = __toESM(require_browser(), 1);
var useEmbeddedWallet = () => {
  const { user, projectSettings, setPrimaryWalletId } = useInternalDynamicContext();
  const { isTurnkeyWallet } = useIsTurnkeyWallet();
  const { createEmbeddedWallet: createMPCWallet, canCreateMPCWallet, createPassword, revealEmbeddedWalletKey: revealCoinbaseMPCEmbeddedWalletKey } = useMPCEmbeddedWallet();
  const { createEmbeddedWallet: createTurnkeyEmbeddedWallet2, createEmbeddedWalletAccount: createEmbeddedWalletAccount2, createOrRestoreSession, createPasskey, revealEmbeddedWalletKey: revealTurnkeyEmbeddedWalletKey, getPasskeys, isSessionActive, sendOneTimeCode, getWalletVersion: getTurnkeyWalletVersion } = useSecureEnclaveEmbeddedWallet();
  const { isLoadingEmbeddedWallet } = useWalletContext();
  const userHasEmbeddedWallet = (0, import_react180.useCallback)(() => hasEmbeddedWallet(user), [user]);
  const getWalletVersion = (0, import_react180.useCallback)(() => {
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    if (!userHasEmbeddedWallet()) {
      throw new DynamicError("Embedded wallet not found");
    }
    if (isTurnkeyWallet) {
      return getTurnkeyWalletVersion();
    }
    return void 0;
  }, [getTurnkeyWalletVersion, isTurnkeyWallet, user, userHasEmbeddedWallet]);
  const createEmbeddedWallet = (0, import_react180.useCallback)((chains, options2) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield canCreateMPCWallet(chains)) {
      const wallet2 = yield createMPCWallet(chains);
      return wallet2;
    }
    const wallet = yield createTurnkeyEmbeddedWallet2(chains, options2);
    return wallet;
  }), [canCreateMPCWallet, createMPCWallet, createTurnkeyEmbeddedWallet2]);
  const revealWalletKey = (options2) => __awaiter(void 0, void 0, void 0, function* () {
    if (!user) {
      throw new DynamicError(USER_NOT_LOGGED_IN);
    }
    if (!userHasEmbeddedWallet()) {
      throw new DynamicError("Embedded wallet not found");
    }
    if (isTurnkeyWallet) {
      return revealTurnkeyEmbeddedWalletKey(options2);
    }
    return revealCoinbaseMPCEmbeddedWalletKey();
  });
  const shouldAutoCreateEmbeddedWallet = (0, import_react180.useCallback)((verifiedUser) => {
    var _a, _b, _c, _d, _e2;
    const hasEmbeddedWalletProviderEnabled = isTurnkeyEnabled(projectSettings) || isCoinbaseWaasEnabled(projectSettings);
    const hasPrimaryWallet = StorageService.getItem(PRIMARY_WALLET_ID);
    if (!hasEmbeddedWalletProviderEnabled || hasPrimaryWallet) {
      return false;
    }
    if (verifiedUser) {
      const primaryEmbeddedChain = findPrimaryEmbeddedChain(projectSettings);
      const embeddedWalletVerifiedCredentialId = (_a = findEmbeddedWalletFromVerifiedCredentials(verifiedUser, [
        primaryEmbeddedChain
      ])) === null || _a === void 0 ? void 0 : _a.id;
      const AAWalletCredentialId = (_c = (_b = verifiedUser.verifiedCredentials) === null || _b === void 0 ? void 0 : _b.find((vc) => vc.walletProvider === WalletProviderEnum.SmartContractWallet)) === null || _c === void 0 ? void 0 : _c.id;
      const targetPrimaryWalletId = AAWalletCredentialId ? AAWalletCredentialId : embeddedWalletVerifiedCredentialId;
      if (targetPrimaryWalletId) {
        setPrimaryWalletId(targetPrimaryWalletId);
        return false;
      }
    }
    if (
      // if coinbase is enabled it should still call createWallet, despite the turnkey rules
      !isCoinbaseWaasEnabled(projectSettings) && isTurnkeyEnabled(projectSettings) && !((_e2 = (_d = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _d === void 0 ? void 0 : _d.embeddedWallets) === null || _e2 === void 0 ? void 0 : _e2.automaticEmbeddedWalletCreation)
    ) {
      return false;
    }
    return true;
  }, [projectSettings, setPrimaryWalletId]);
  return {
    createEmbeddedWallet,
    createEmbeddedWalletAccount: createEmbeddedWalletAccount2,
    createOrRestoreSession,
    createPasskey,
    createPassword,
    getPasskeys,
    getWalletVersion,
    isLoadingEmbeddedWallet,
    isSessionActive,
    revealWalletKey,
    sendOneTimeCode,
    shouldAutoCreateEmbeddedWallet,
    userHasEmbeddedWallet
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleAuthenticatedUser/useHandleAuthenticatedUser.js
var import_react181 = __toESM(require_react(), 1);
var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);
var import_react_dom63 = __toESM(require_react_dom(), 1);
var import_qrcode61 = __toESM(require_browser(), 1);
var useHandleAuthenticatedUser = () => {
  const { handlers } = useInternalDynamicContext();
  const { handleAuthenticatedUser } = handlers !== null && handlers !== void 0 ? handlers : {};
  const handleAuthenticatedUserRef = (0, import_react181.useRef)(handleAuthenticatedUser);
  handleAuthenticatedUserRef.current = handleAuthenticatedUser;
  return (0, import_react181.useCallback)((user) => __awaiter(void 0, void 0, void 0, function* () {
    if (!handleAuthenticatedUserRef.current)
      return;
    yield runSafe(() => {
      var _a;
      return (_a = handleAuthenticatedUserRef.current) === null || _a === void 0 ? void 0 : _a.call(handleAuthenticatedUserRef, { user });
    });
  }), []);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserAuth/useUserAuth.js
var import_qrcode62 = __toESM(require_browser(), 1);
var sleepToShowSuccessMessage = () => sleep(1500);
var useUserAuth = ({ authMethod }) => {
  const { handleLogOut, setShowAuthFlow, setCallback, setMultiWalletWidgetState, walletConnectorOptions } = useInternalDynamicContext();
  const { setDeniedOauthUsername, setDeniedOauthProvider } = useAccessDeniedContext();
  const { view, setView, goToInitialView } = useViewContext();
  const { setLoading } = useLoadingContext();
  const { setErrorMessage, setError } = useErrorContext();
  const { setExistentAccountData } = useAccountExistsContext();
  const handleAuthenticatedUser = useHandleAuthenticatedUser();
  const { shouldAutoCreateEmbeddedWallet } = useEmbeddedWallet();
  const isVerifyResponse = (response) => response.user;
  const initAuth2 = (_a) => __awaiter(void 0, [_a], void 0, function* ({ isSignIn = true, verifyFunction, onVerifySuccess, onSettled, onError, showSuccessMessage = false, skipDefaultErrorHandling = false }) {
    var _b;
    logger2.debug("initAuth", { authMethod, isSignIn });
    try {
      const verifyResponse = yield verifyFunction();
      if (!verifyResponse) {
        yield cancelAuth();
        throw new DynamicError("No user returned from verify function");
      }
      let verifiedUser;
      if (isVerifyResponse(verifyResponse)) {
        verifiedUser = storeAuthTokenAndUser(verifyResponse);
      } else {
        verifiedUser = verifyResponse;
      }
      onVerifySuccess === null || onVerifySuccess === void 0 ? void 0 : onVerifySuccess(verifiedUser);
      walletConnectorOptions.forEach((walletOption) => {
        walletOption.walletConnector.setVerifiedCredentials(verifiedUser.verifiedCredentials);
      });
      if (hasPendingMfaAction(verifiedUser)) {
        return;
      }
      if (isSignIn && ((_b = verifiedUser.missingFields) === null || _b === void 0 ? void 0 : _b.length)) {
        return;
      }
      setMultiWalletWidgetState("idle");
      yield handleAuthenticatedUser(verifiedUser);
      const shouldCreateWallet = shouldAutoCreateEmbeddedWallet(verifiedUser);
      if (showSuccessMessage) {
        yield sleepToShowSuccessMessage();
      }
      if (isSignIn) {
        setCallback("authSuccess");
      }
      if (!shouldCreateWallet) {
        setShowAuthFlow(false);
      }
      onSettled === null || onSettled === void 0 ? void 0 : onSettled();
    } catch (error) {
      logger2.debug(error);
      if (skipDefaultErrorHandling) {
        onError === null || onError === void 0 ? void 0 : onError(error);
        return;
      }
      handleAuthError(error, { onError });
    } finally {
      setLoading(false);
      onSettled === null || onSettled === void 0 ? void 0 : onSettled();
    }
  });
  const handleAuthError = (error, { options: options2 = {}, onError }) => {
    var _a;
    if (error instanceof MfaInvalidOtpError || error instanceof MfaRateLimitedError) {
      throw error;
    }
    if (error instanceof EmailAlreadyExistsError || error instanceof CustomFieldNotUniqueError || error instanceof UsernameAlreadyExistsError || error instanceof TooManyEmailVerificationsError || error instanceof InvalidPhoneNumberError)
      throw error;
    if (error instanceof NoAccessError) {
      setDeniedOauthProvider(error === null || error === void 0 ? void 0 : error.socialProvider);
      setDeniedOauthUsername((_a = error === null || error === void 0 ? void 0 : error.socialUsername) !== null && _a !== void 0 ? _a : "");
      setView("no-access");
      return;
    }
    if (error instanceof AccountExistsError) {
      setExistentAccountData(error.errorPayload);
      setView("account-exists");
      return;
    }
    if (error instanceof SandboxMaximumThresholdReachedError) {
      setView("sandbox-maximum-threshold-reached");
      return;
    }
    if (error instanceof UserHasAccountWithEmailError) {
      setView("merge-user-accounts-with-same-email", {
        returnToView: "isEmailRecoveryFlow" in options2 && options2.isEmailRecoveryFlow ? "passkey-recovery-add-email" : void 0
      });
      return;
    }
    if (onError) {
      onError === null || onError === void 0 ? void 0 : onError(error);
      return;
    }
    if (error.code) {
      setErrorMessage(error.code);
    } else {
      setError(error.message);
    }
  };
  const handleVerifyMissingFields = (_c) => __awaiter(void 0, [_c], void 0, function* ({ missingFields, isEmailVerificationRequired, isSmsVerificationRequired }) {
    if (isEmailVerificationRequired && missingFields.find((field) => field.name === "email")) {
      setView("verify-email");
      return;
    }
    if (isSmsVerificationRequired && missingFields.find((field) => field.name === "phoneNumber")) {
      setView("verify-sms");
      return;
    }
    setView(view.type);
  });
  const completeAuth = (_d) => __awaiter(void 0, [_d], void 0, function* ({ completeSignInFlow, updateJwtFunction, onValidUpdatedJwt, options: options2 = {} }) {
    logger2.debug("completeAuth", { authMethod });
    try {
      const { updateUserProfileResponse, isSmsVerificationRequired, isEmailVerificationRequired, missingFields } = yield updateJwtFunction();
      onValidUpdatedJwt === null || onValidUpdatedJwt === void 0 ? void 0 : onValidUpdatedJwt();
      const updatedUser = storeAuthTokenAndUser({
        expiresAt: updateUserProfileResponse.expiresAt,
        jwt: updateUserProfileResponse.jwt,
        minifiedJwt: updateUserProfileResponse.minifiedJwt,
        user: updateUserProfileResponse.user
      });
      if (missingFields.length > 0) {
        yield handleVerifyMissingFields({
          isEmailVerificationRequired,
          isSmsVerificationRequired,
          missingFields
        });
        return;
      }
      yield handleAuthenticatedUser(updatedUser);
      setCallback("authSuccess");
      if (completeSignInFlow) {
        const shouldReturn = yield completeSignInFlow(updateUserProfileResponse);
        if (shouldReturn) {
          return;
        }
      }
      const shouldCreateWallet = shouldAutoCreateEmbeddedWallet();
      if (!shouldCreateWallet && updatedUser.mfaBackupCodeAcknowledgement !== MfaBackupCodeAcknowledgement.Pending) {
        setShowAuthFlow(false);
      }
    } catch (error) {
      logger2.debug(error);
      handleAuthError(error, { options: options2 });
    } finally {
      setLoading(false);
    }
  });
  const cancelAuth = () => __awaiter(void 0, void 0, void 0, function* () {
    logger2.debug("cancelAuth", { authMethod });
    yield handleLogOut();
    goToInitialView();
  });
  return {
    cancelAuth,
    completeAuth,
    handleAuthError,
    initAuth: initAuth2
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletSessionKeys/useEmbeddedWalletSessionKeys.js
var import_react183 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/constants/sessionStorage.js
var SECURE_ENCLAVE_WALLET_SESSION_KEYS = "dynamic_secure_enclave_session_keys";
var SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS = {
  priority: ["secureStorage", "localStorage"]
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/utils.js
var buf2hex = (buffer) => [...new Uint8Array(buffer)].map((x) => x.toString(16).padStart(2, "0")).join("");
var base64urlDecode = (s) => {
  s = (s === null || s === void 0 ? void 0 : s.replace(/-/g, "+").replace(/_/g, "/")) || "";
  return Uint8Array.from(atob(s), (c) => c.charCodeAt(0));
};
var compressRawPublicKey = (rawPublicKey) => {
  const rawPublicKeyBytes = new Uint8Array(rawPublicKey);
  const len = rawPublicKeyBytes.byteLength;
  const compressedBytes = rawPublicKeyBytes.slice(0, 1 + len >>> 1);
  compressedBytes[0] = 2 | rawPublicKeyBytes[len - 1] & 1;
  return compressedBytes.buffer;
};
var p256Keygen = () => __awaiter(void 0, void 0, void 0, function* () {
  const p256Keypair = yield crypto.subtle.generateKey({
    name: "ECDSA",
    namedCurve: "P-256"
  }, true, ["sign", "verify"]);
  const rawPublicKey = yield crypto.subtle.exportKey("raw", p256Keypair.publicKey);
  const privateKeyJwk = yield crypto.subtle.exportKey("jwk", p256Keypair.privateKey);
  const compressedPublicKeyBuffer = compressRawPublicKey(rawPublicKey);
  const privateKeyBuffer = base64urlDecode(privateKeyJwk.d);
  return {
    private: buf2hex(privateKeyBuffer),
    public: buf2hex(compressedPublicKeyBuffer),
    public_uncompressed: buf2hex(rawPublicKey)
  };
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletSessionKeys/useEmbeddedWalletSessionKeys.js
var import_jsx_runtime144 = __toESM(require_jsx_runtime(), 1);
var useEmbeddedWalletSessionKeys = (environmentId) => {
  const registerEmbeddedWalletSessionKey = (...args_1) => __awaiter(void 0, [...args_1], void 0, function* ({ ignoreRestore = false } = {}) {
    const sessionKeysSS = StorageService.getItem(SECURE_ENCLAVE_WALLET_SESSION_KEYS, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS);
    if (sessionKeysSS && !ignoreRestore) {
      const sessionKeysInSS = JSON.parse(Buffer.from(sessionKeysSS, "base64").toString());
      return sessionKeysInSS;
    }
    const { publicKey, privateKey } = yield generateSessionKey();
    yield registerSessionKey({
      environmentId,
      publicKey
    });
    return { privateKey, publicKey };
  });
  const generateSessionKey = () => __awaiter(void 0, void 0, void 0, function* () {
    const { private: privateKey, public: publicKey } = yield p256Keygen();
    const newSessionKeys = { privateKey, publicKey };
    const sessionKeysString = JSON.stringify(newSessionKeys);
    const sessionKeysBase64 = Buffer.from(sessionKeysString).toString("base64");
    StorageService.setItem(SECURE_ENCLAVE_WALLET_SESSION_KEYS, sessionKeysBase64, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS);
    return { privateKey, publicKey };
  });
  const removeSessionKey = (0, import_react183.useCallback)(() => StorageService.removeItem(SECURE_ENCLAVE_WALLET_SESSION_KEYS, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS), []);
  const shouldRegisterSessionKeysOnSignin = () => false;
  return {
    generateSessionKey,
    registerEmbeddedWalletSessionKey,
    removeSessionKey,
    shouldRegisterSessionKeysOnSignin
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useVerifyWallet/useVerifyWallet.js
var import_qrcode63 = __toESM(require_browser(), 1);
var useVerifyWallet = ({ consumeNonce, displaySiweStatement, environmentId, projectSettings, setIsSingleWalletAccount }) => {
  const { setExistentAccountData } = useAccountExistsContext();
  const { setDeniedAddress, setDeniedOauthProvider } = useAccessDeniedContext();
  const { setView, goToInitialView } = useViewContext();
  const { setErrorMessage, setError } = useErrorContext();
  const { multiWalletWidgetState, debugError, multiWallet: multiWalletEnabled, appName, primaryWalletId, setShowAuthFlow, setPrimaryWalletId, siweStatement, connectedWallets, authMode, user, setAuthMode, removeConnectedWalletsInfo, events, primaryWallet, enableConnectOnlyFallback, selectedWalletConnector } = useInternalDynamicContext();
  const { addedWalletsIds } = useInternalUserWallets();
  const { initAuth: initAuth2 } = useUserAuth({ authMethod: "wallet" });
  const { generateSessionKey, shouldRegisterSessionKeysOnSignin } = useEmbeddedWalletSessionKeys(environmentId);
  const verifyOnly = !user;
  const shouldFallbackToConnectOnly = enableConnectOnlyFallback && (verifyOnly || !multiWalletEnabled);
  const generateJWT = (walletConnector, walletProvider, getAddressOpts, publicWalletAddress, captchaToken, oauth, signedMessageOverride, messageToSignOverride) => __awaiter(void 0, void 0, void 0, function* () {
    const nonce = consumeNonce();
    if (nonce === void 0)
      throw new DynamicError("Missing nonce");
    const verifyArgs = yield getVerifyArgs({
      displaySiweStatement,
      environmentId,
      getAddressOpts,
      messageToSignOverride,
      nonce,
      publicWalletAddress,
      signedMessageOverride,
      siweStatement: getSiweStatement({ appName, siweStatement }),
      walletConnector,
      walletProvider
    });
    if (shouldRegisterSessionKeysOnSignin()) {
      const keypair = yield generateSessionKey();
      verifyArgs.sessionPublicKey = keypair.publicKey;
    }
    let verifyResponse;
    if (!user || !multiWalletEnabled) {
      verifyResponse = verifyWallet(environmentId, Object.assign(Object.assign({}, verifyArgs), {
        captchaToken,
        oauth
      }));
    } else {
      verifyResponse = linkWallet(environmentId, verifyArgs);
    }
    return { verifyArgs, verifyFunction: () => verifyResponse };
  });
  const updatePrimaryWalletId = ({ walletConnector, verifiedCredentials, lastVerifiedCredentialId }) => {
    const newSelectedCredentialWallet = verifiedCredentials.find((cred) => cred.id === lastVerifiedCredentialId && cred.format === "blockchain");
    if (newSelectedCredentialWallet) {
      const currentPrimaryWallet = verifiedCredentials.find((a) => a.id === primaryWalletId);
      if (verifyOnly || !primaryWallet || multiWalletWidgetState === "awaiting_signature" && newSelectedCredentialWallet.walletName === (currentPrimaryWallet === null || currentPrimaryWallet === void 0 ? void 0 : currentPrimaryWallet.walletName) || (currentPrimaryWallet === null || currentPrimaryWallet === void 0 ? void 0 : currentPrimaryWallet.chain) === "flow" && walletConnector.connectedChain === "FLOW") {
        setPrimaryWalletId(newSelectedCredentialWallet.id);
      }
    }
  };
  const handleWalletUsedError = (e2) => {
    var _a;
    setShowAuthFlow(true);
    setView("wallet-used");
    setIsSingleWalletAccount(false);
    if (e2.code === "reassign_wallet_error") {
      if ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.preventOrphanedAccounts) {
        setView("wallet-cannot-be-transferred");
      }
      setIsSingleWalletAccount(true);
    }
  };
  const handleDisconnectWallet = ({ walletConnector, endSession = true }) => {
    removeConnectedWalletsInfo();
    if (endSession)
      walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.endSession();
  };
  const handleError = (e2, walletConnector, address, oauth) => {
    var _a;
    if (e2.message === "ignore") {
      return;
    }
    if (selectedWalletConnector && selectedWalletConnector.key === walletConnector.key)
      dynamicEvents.emit("authFailure", {
        address,
        connectorName: walletConnector.name,
        option: walletConnector.name,
        type: "wallet"
      }, { error: e2 });
    if (e2 instanceof WalletUsedError) {
      handleDisconnectWallet({ endSession: false, walletConnector });
      return handleWalletUsedError(e2);
    }
    if (e2 instanceof MergeAccountsConfirmationError) {
      setView("merge-user-accounts", Object.assign({}, e2));
      setShowAuthFlow(true);
      return;
    }
    if (e2 instanceof ChainalysisError) {
      handleDisconnectWallet({ walletConnector });
      setDeniedAddress(address);
      setView("chainalysis-blocked-wallet");
      return;
    }
    if (e2 instanceof GateBlockedError) {
      handleDisconnectWallet({ walletConnector });
      setDeniedAddress(address);
      setView("gate-blocked-wallet");
      return;
    }
    if (e2 instanceof SandboxMaximumThresholdReachedError) {
      setView("sandbox-maximum-threshold-reached");
      return;
    }
    if (e2 instanceof NoAccessError) {
      handleDisconnectWallet({ walletConnector });
      setDeniedAddress(address);
      if (isSocialWalletConnector(walletConnector)) {
        setDeniedOauthProvider(oauth === null || oauth === void 0 ? void 0 : oauth.provider);
      }
      setView("no-access");
      return;
    }
    if (e2 instanceof AccountExistsError) {
      handleDisconnectWallet({ walletConnector });
      setExistentAccountData(e2.errorPayload);
      setView("account-exists");
      return;
    }
    if (connectedWallets.length && authMode === "connect-only") {
      throw new DynamicError(e2.message);
    }
    const userRejectedRequestError = (_a = e2 === null || e2 === void 0 ? void 0 : e2.message) === null || _a === void 0 ? void 0 : _a.includes("User rejected the request");
    const fallbackToConnectOnly = shouldFallbackToConnectOnly && !userRejectedRequestError;
    if (fallbackToConnectOnly) {
      logger2.warn("Verification failed, changing to connect-only");
      setAuthMode("connect-only");
      setView("wallet-list");
      return;
    } else {
      handleDisconnectWallet({ walletConnector });
      goToInitialView();
    }
    logger2.error(e2);
    if (debugError) {
      setError(`${e2.message}
 ${e2.stack}`);
    } else {
      setErrorMessage(e2.code);
    }
  };
  return (_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, getAddressOpts, publicWalletAddress, captchaToken, oauth, signedMessageOverride, messageToSignOverride }) {
    const walletProvider = getWalletProvider(walletConnector);
    dynamicEvents.emit("authInit", {
      address: publicWalletAddress,
      connectorName: walletConnector.name,
      option: walletConnector.name,
      type: "wallet"
    });
    try {
      const { verifyFunction, verifyArgs } = yield generateJWT(walletConnector, walletProvider, getAddressOpts, publicWalletAddress, captchaToken, oauth, signedMessageOverride, messageToSignOverride);
      yield initAuth2({
        isSignIn: verifyOnly,
        onError: (e2) => {
          handleError(e2, walletConnector, publicWalletAddress, oauth);
        },
        onVerifySuccess: (user2) => {
          var _a2;
          if (!user2) {
            throw new DynamicError(USER_NOT_LOGGED_IN);
          }
          try {
            (_a2 = events === null || events === void 0 ? void 0 : events.onSignedMessage) === null || _a2 === void 0 ? void 0 : _a2.call(events, {
              messageToSign: verifyArgs.messageToSign,
              signedMessage: verifyArgs.signedMessage
            });
          } catch (_b) {
            logger2.warn("Error calling onSignedMessage callback");
          }
          StorageService.setItem(LAST_USED_WALLET, walletConnector.key);
          setAuthMode("connect-and-sign");
          updatePrimaryWalletId({
            lastVerifiedCredentialId: user2.lastVerifiedCredentialId,
            verifiedCredentials: user2.verifiedCredentials,
            walletConnector
          });
          const walletId = user2.lastVerifiedCredentialId;
          if (walletId) {
            addedWalletsIds.current.push(walletId);
          }
        },
        options: {
          address: publicWalletAddress,
          connectorName: walletConnector.name
        },
        skipDefaultErrorHandling: true,
        verifyFunction
      });
    } catch (e2) {
      handleError(e2, walletConnector, publicWalletAddress, oauth);
    }
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SocialRedirectContext/SocialRedirectContext.js
var import_react_dom68 = __toESM(require_react_dom(), 1);
var import_qrcode66 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SocialRedirectContext/hooks/useRedirectSocialHandler/useRedirectSocialHandler.js
var import_react189 = __toESM(require_react(), 1);
var import_jsx_runtime149 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useEffectOnceCondition/useEffectOnceCondition.js
var import_react185 = __toESM(require_react(), 1);
var useEffectOnceCondition = (effect, condition) => {
  const hasRun = (0, import_react185.useRef)(false);
  const effectRef = (0, import_react185.useRef)(effect);
  effectRef.current = effect;
  (0, import_react185.useEffect)(() => {
    if (condition && !hasRun.current) {
      effectRef.current();
      hasRun.current = true;
    }
  }, [condition]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/socialStorage/socialStorage.js
var SOCIAL_STORAGE_KEY = "dynamic_social_storage";
var searchSocialStorageByState = (targetState) => {
  var _a;
  const socialStorage = StorageService.getItem(SOCIAL_STORAGE_KEY);
  if (!socialStorage)
    return void 0;
  const storageEntries = Object.entries(socialStorage);
  const [provider] = (_a = storageEntries.find(([, { state }]) => state === targetState)) !== null && _a !== void 0 ? _a : [];
  if (!provider)
    return void 0;
  return socialStorage[provider];
};
var setSocialStorageFor = (provider, socialStorageItem) => {
  var _a;
  const socialStorage = (_a = StorageService.getItem(SOCIAL_STORAGE_KEY)) !== null && _a !== void 0 ? _a : {};
  socialStorage[provider] = Object.assign({ provider }, socialStorageItem);
  StorageService.setItem(SOCIAL_STORAGE_KEY, socialStorage);
};
var deleteSocialStorage = (provider) => {
  var _a;
  const socialStorage = (_a = StorageService.getItem(SOCIAL_STORAGE_KEY)) !== null && _a !== void 0 ? _a : {};
  delete socialStorage[provider];
  StorageService.setItem(SOCIAL_STORAGE_KEY, socialStorage);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getSocialSignInProviderForProviderEnum/getSocialSignInProviderForProviderEnum.js
var getSocialSignInProviderForProviderEnum = (provider) => {
  if (!provider)
    return;
  const values = Object.values(SocialSignInProviderEnum);
  for (const value of values) {
    if (value === provider) {
      return value;
    }
  }
  return void 0;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SocialRedirectContext/hooks/useRedirectSocialHandler/useRedirectSocialHandler.js
var import_react_dom67 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSocialAuth/useSocialAuth.js
var import_react188 = __toESM(require_react(), 1);
var import_jsx_runtime148 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/digestSHA256/digestSHA256.js
var digestSHA256 = (str) => {
  const encoder = new TextEncoder();
  const data = encoder.encode(str);
  return window.crypto.subtle.digest("SHA-256", data);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/encodeBase64URL/encodeBase64URL.js
var encodeBase64URL = (str) => {
  const numberArray = [];
  new Uint8Array(str).forEach((item) => numberArray.push(item));
  return btoa(String.fromCharCode.apply(null, numberArray)).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/stringifyURIQuery/stringifyURIQuery.js
var stringifyURIQuery = (obj) => {
  const str = [];
  for (const prop in obj) {
    str.push(encodeURIComponent(prop) + "=" + encodeURIComponent(obj[prop]));
  }
  return str.join("&");
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getProviderByType/getProviderByType.js
var getProviderByType = (providers, providerType) => providers.find((p) => p.provider === providerType);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getOauthLoginUrl/getOauthLoginUrl.js
var OAUTH_LOGIN_DATA = {
  apple: {
    customMobileUrl: true,
    response_mode: "form_post",
    response_type: ["code", "id_token"],
    scope: ["name", "email"],
    url: "https://appleid.apple.com/auth/authorize"
  },
  coinbasesocial: {
    scope: ["wallet:accounts:read", "wallet:user:email"],
    url: "https://www.coinbase.com/oauth/authorize"
  },
  discord: {
    scope: ["identify", "email"],
    url: "https://discord.com/api/oauth2/authorize"
  },
  facebook: {
    scope: ["email", "public_profile"],
    url: "https://www.facebook.com/v3.2/dialog/oauth"
  },
  github: {
    scope: ["user:email", "read:user"],
    url: "https://github.com/login/oauth/authorize"
  },
  google: {
    scope: ["profile", "email"],
    url: "https://accounts.google.com/o/oauth2/v2/auth"
  },
  instagram: {
    scope: ["user_profile", "user_media"],
    url: "https://api.instagram.com/oauth/authorize"
  },
  telegram: {
    url: ""
    // will be constructed dynamically
  },
  twitch: {
    scope: ["user_read"],
    url: "https://id.twitch.tv/oauth2/authorize"
  },
  twitter: {
    scope: ["users.read", "tweet.read"],
    url: "https://twitter.com/i/oauth2/authorize"
  }
};
var getProviderData = (provider) => {
  const entries = Object.entries(OAUTH_LOGIN_DATA);
  for (const [key, value] of entries) {
    if (key === provider) {
      return value;
    }
  }
  return null;
};
var getMobileOauthUrl = (provider, loginData) => {
  if (!loginData.customMobileUrl || !isMobile() || !provider.redirectUrl) {
    return;
  }
  return provider.redirectUrl.replace("redirect", "authorizeHtml");
};
var getOauthLoginUrl = (providers, providerType) => {
  var _a, _b;
  const provider = getProviderByType(providers, providerType);
  if (!(provider === null || provider === void 0 ? void 0 : provider.clientId)) {
    return "";
  }
  const loginData = getProviderData(providerType);
  if (!loginData) {
    return "";
  }
  if (providerType === ProviderEnum.Telegram) {
    loginData.url = (_a = provider.authorizationUrl) !== null && _a !== void 0 ? _a : "";
  }
  const mobileUrl = getMobileOauthUrl(provider, loginData);
  const baseProps = {
    client_id: provider.clientId,
    redirect_uri: (_b = provider.redirectUrl) !== null && _b !== void 0 ? _b : "",
    response_type: "code"
  };
  if (loginData.scope) {
    baseProps.scope = loginData.scope.join(" ");
  }
  if (loginData.prompt) {
    baseProps.prompt = loginData.prompt.join(" ");
  }
  if (loginData.response_mode) {
    baseProps.response_mode = loginData.response_mode;
  }
  if (loginData.response_type) {
    baseProps.response_type = loginData.response_type.join(" ");
  }
  const params = stringifyURIQuery(baseProps);
  return `${mobileUrl !== null && mobileUrl !== void 0 ? mobileUrl : loginData.url}?${params}`;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/oauth/oauth.js
var import_jsx_runtime146 = __toESM(require_jsx_runtime(), 1);
var import_react186 = __toESM(require_react(), 1);
var initAuth = (environmentId, providerType, oauthInitAuthRequest) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    yield sdkApi().initAuth({
      environmentId,
      oauthInitAuthRequest,
      providerType
    });
  } catch (e2) {
    logger2.error(e2);
  }
});
var verifyOAuth = (environmentId_1, providerType_1, _a) => __awaiter(void 0, [environmentId_1, providerType_1, _a], void 0, function* (environmentId, providerType, { code, codeVerifier, state }) {
  const oauthRequest = {
    code,
    codeVerifier,
    state
  };
  try {
    const response = yield sdkApi().oauthVerify({
      environmentId,
      oauthRequest,
      providerType
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return handleVerifyError(e2);
  }
});
var unlinkOAuth = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId, primaryWalletId, verifiedCrentialId }) {
  try {
    const response = yield sdkApi().verifyUnlink({
      environmentId,
      verifyUnlinkRequest: {
        primaryWalletId,
        verifiedCrentialId
      }
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return void 0;
  }
});
var signInOAuth = (environmentId_2, providerType_2, _c) => __awaiter(void 0, [environmentId_2, providerType_2, _c], void 0, function* (environmentId, providerType, { code, codeVerifier, state, captchaToken, sessionPublicKey }) {
  const oauthRequest = {
    captchaToken,
    code,
    codeVerifier,
    sessionPublicKey,
    state
  };
  try {
    const response = yield sdkApi().oauthSignIn({
      environmentId,
      oauthRequest,
      providerType
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return handleSignInError(e2);
  }
});
var getOAuthResult = (environmentId_3, providerType_3, _d) => __awaiter(void 0, [environmentId_3, providerType_3, _d], void 0, function* (environmentId, providerType, { state }) {
  const oauthResultRequest = {
    state
  };
  try {
    const result = yield sdkApi().oauthResult({
      environmentId,
      oauthResultRequest,
      providerType
    });
    return result;
  } catch (e2) {
    logger2.error(e2);
    return void 0;
  }
});
var farcasterSignIn = (environmentId, farcasterSignInRequest) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const response = yield sdkApi().farcasterSignIn({
      environmentId,
      farcasterSignInRequest
    });
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return handleSignInError(e2);
  }
});
var farcasterVerify = (farcasterVerifyRequest) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const response = yield sdkApi().farcasterVerify(farcasterVerifyRequest);
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return handleVerifyError(e2);
  }
});
var telegramSignIn = (environmentId, oauthResultRequest) => __awaiter(void 0, void 0, void 0, function* () {
  const telegramSignInRequest = {
    environmentId,
    oauthResultRequest
  };
  try {
    const response = yield sdkApi().telegramSignIn(telegramSignInRequest);
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return handleSignInError(e2);
  }
});
var telegramVerify = (environmentId, oauthResultRequest) => __awaiter(void 0, void 0, void 0, function* () {
  const telegramVerifyRequest = {
    environmentId,
    oauthResultRequest
  };
  try {
    const response = yield sdkApi().telegramVerify(telegramVerifyRequest);
    const user = storeAuthTokenAndUser(response);
    return user;
  } catch (e2) {
    return handleVerifyError(e2);
  }
});
var handleVerifyError = (e2) => __awaiter(void 0, void 0, void 0, function* () {
  logger2.error(e2);
  const data = yield e2.json();
  if (data.code === "social_account_already_exists") {
    throw new SocialAccountAlreadyExistsError();
  }
  if (data.error.code === "sandbox_maximum_threshold_reached") {
    throw new SandboxMaximumThresholdReachedError(data.error.message);
  }
  return void 0;
});
var handleSignInError = (e2) => __awaiter(void 0, void 0, void 0, function* () {
  var _e2, _f, _g16;
  logger2.error(e2);
  const data = yield e2.json();
  if (data.error.code === "gate_blocked") {
    throw new GateBlockedError(data.payload.walletPublicKey);
  }
  if (data.error.code === "missing_from_list") {
    throw new NoAccessError({
      socialProvider: (_e2 = data === null || data === void 0 ? void 0 : data.payload) === null || _e2 === void 0 ? void 0 : _e2.socialProvider,
      socialUsername: (_f = data === null || data === void 0 ? void 0 : data.payload) === null || _f === void 0 ? void 0 : _f.socialUsername,
      walletPublicKey: (_g16 = data === null || data === void 0 ? void 0 : data.payload) === null || _g16 === void 0 ? void 0 : _g16.walletPublicKey
    });
  }
  if (data.code === "email_associated_with_different_provider") {
    throw new AccountExistsError(data.error, data.payload);
  }
  if (data.error.code === "sandbox_maximum_threshold_reached") {
    throw new SandboxMaximumThresholdReachedError(data.error.message);
  }
  return void 0;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSocialAuth/useSocialAuth.js
var import_react_dom66 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSocialAuth/farcaster/farcaster.js
var import_jsx_runtime147 = __toESM(require_jsx_runtime(), 1);
var import_react187 = __toESM(require_react(), 1);
var CONNECT_URL = "https://relay.farcaster.xyz/v1/channel";
var STATUS_URL = "https://relay.farcaster.xyz/v1/channel/status";
var STATUS_TIMEOUT = 3e5;
var STATUS_INTERVAL = 1e3;
var connect2 = (connectRequest) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const response = yield FetchService.fetch(CONNECT_URL, {
      body: JSON.stringify(connectRequest),
      headers: {
        "Content-Type": "application/json"
      },
      method: "POST"
    });
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return yield response.json();
  } catch (error) {
    logger2.error("Error connecting with farcaster:", error);
    return;
  }
});
var status = (connectStatusRequest) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const response = yield FetchService.fetch(STATUS_URL, {
      headers: {
        Authorization: `Bearer ${connectStatusRequest.channelToken}`,
        "Content-Type": "application/json"
      },
      method: "GET"
    });
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return yield response.json();
  } catch (error) {
    logger2.error("Error fetching farcaster connect status:", error);
    return;
  }
});
var watchStatus = (connectStatusRequest_1, ...args_1) => __awaiter(void 0, [connectStatusRequest_1, ...args_1], void 0, function* (connectStatusRequest, { timeout = STATUS_TIMEOUT, interval = STATUS_INTERVAL } = {}) {
  const deadline = Date.now() + timeout;
  let shouldPoll = true;
  let storedResolve = void 0;
  dynamicEvents.on("farcasterConnectCancelled", () => {
    shouldPoll = false;
    storedResolve === null || storedResolve === void 0 ? void 0 : storedResolve();
    storedResolve = void 0;
  });
  const timeoutCallback = (resolve) => {
    storedResolve = resolve;
    setTimeout(resolve, interval);
  };
  while (shouldPoll && Date.now() < deadline) {
    const response = yield status(connectStatusRequest);
    if (!response) {
      return "rejected";
    }
    if (response.state === "completed") {
      return response;
    }
    yield new Promise(timeoutCallback);
  }
  if (!shouldPoll) {
    return "cancelled";
  }
  logger2.error(`Polling farcaster connect status timed out after ${STATUS_TIMEOUT}ms`);
  return "timeout";
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSocialAuth/useSocialAuth.js
var import_qrcode64 = __toESM(require_browser(), 1);
var socialProviders = [
  "apple",
  "coinbasesocial",
  "discord",
  "facebook",
  "farcaster",
  "github",
  "google",
  "instagram",
  "telegram",
  "twitch",
  "twitter"
];
var providersRequiringPkce = ["twitter", "github"];
var useSocialAuth = ({ sessionTimeout, onSettled, onError, onFarcasterUrl }) => {
  const { environmentId, setShowAuthFlow, socialSettings, projectSettings, consumeNonce, redirectUrl: defaultRedirectUrl } = useInternalDynamicContext();
  const strategy = (0, import_react188.useMemo)(() => (socialSettings === null || socialSettings === void 0 ? void 0 : socialSettings.strategy) || "redirect", [socialSettings]);
  const { setErrorMessage, setError: setContextError } = useErrorContext();
  const { initAuth: initAuth$1 } = useUserAuth({
    authMethod: "social"
  });
  const { generateSessionKey, shouldRegisterSessionKeysOnSignin } = useEmbeddedWalletSessionKeys(environmentId);
  const [isProcessing, setIsProcessing] = (0, import_react188.useState)(false);
  const [error, setError] = (0, import_react188.useState)();
  const clearError = () => {
    setError(void 0);
    setContextError(void 0);
  };
  const onFailed = (provider, reason, options2) => {
    setIsProcessing(false);
    onError === null || onError === void 0 ? void 0 : onError();
    onSettled === null || onSettled === void 0 ? void 0 : onSettled();
    if (provider && (options2 === null || options2 === void 0 ? void 0 : options2.raiseAuthFailure))
      dynamicEvents.emit("authFailure", {
        option: provider,
        provider,
        type: "social"
      }, reason);
  };
  const handleError = (provider, code, message, options2) => {
    const error2 = { code, message };
    logger2.error(message);
    setError(error2);
    setErrorMessage(code);
    onFailed(provider, { error: error2 }, options2);
  };
  const checkValidProvider = (provider, authMode) => {
    if (!provider) {
      handleError(provider, SocialOAuthErrorCode.NO_PROVIDER, "Provider is required", { raiseAuthFailure: authMode === "signin" });
      return false;
    }
    if (!socialProviders.includes(provider)) {
      handleError(provider, SocialOAuthErrorCode.INVALID_PROVIDER, `Invalid social provider. Valid providers are: ${socialProviders.join(", ")}`, { raiseAuthFailure: authMode === "signin" });
      return false;
    }
    return true;
  };
  const linkAccount = (provider, apiCall) => __awaiter(void 0, void 0, void 0, function* () {
    try {
      const response = yield apiCall();
      if (!response) {
        handleError(provider, SocialOAuthErrorCode.VERIFICATION_ERROR, `Failed to link social account: ${provider}`, { raiseAuthFailure: false });
        return;
      }
      onSettled === null || onSettled === void 0 ? void 0 : onSettled();
    } catch (error2) {
      if (error2 instanceof SocialAccountAlreadyExistsError) {
        handleError(provider, SocialOAuthErrorCode.ACCOUNT_ALREADY_LINKED_TO_DIFFERENT_PROFILE, `Social account already linked to a different profile: ${provider}`, { raiseAuthFailure: false });
      }
    }
  });
  const signInAccount = (provider, apiCall) => __awaiter(void 0, void 0, void 0, function* () {
    yield initAuth$1({
      onError: () => handleError(provider, SocialOAuthErrorCode.SIGNIN_ERROR, `Failed to sign-in with social account: ${provider}`, { raiseAuthFailure: true }),
      onSettled,
      options: { provider },
      verifyFunction: () => apiCall()
    });
  });
  const connectSocialAccount = (_a) => __awaiter(void 0, [_a], void 0, function* ({ authMode, provider, validator, captchaToken, redirectUrl, telegramAuthToken }) {
    var _b, _c;
    clearError();
    setIsProcessing(true);
    if (!authMode) {
      logger2.error('Auth mode is required. Please use either "link" or "signin"');
      return;
    }
    if (!checkValidProvider(provider, authMode)) {
      return;
    }
    if (validator && !validator(provider)) {
      return;
    }
    dynamicEvents.emit("authInit", {
      option: provider,
      provider,
      type: "social"
    });
    if (provider === ProviderEnum.Farcaster) {
      return connectWithFarcaster(authMode, {
        captchaToken,
        redirectUrl
      });
    }
    const state = randomString(32);
    const verifier = randomString(43);
    const usingPkce = providersRequiringPkce.includes(provider);
    setSocialStorageFor(provider, {
      captchaToken,
      codeVerifier: usingPkce ? verifier : void 0,
      state
    });
    const loginUrlString = getOauthLoginUrl((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _b !== void 0 ? _b : [], provider);
    if (!loginUrlString) {
      handleError(provider, SocialOAuthErrorCode.NO_OAUTH_URL, `Failed to get login url to connect social account: ${provider}`, { raiseAuthFailure: authMode === "signin" });
      return;
    }
    const oauthLoginUrl = new URL(loginUrlString);
    oauthLoginUrl.searchParams.set("state", state);
    if (usingPkce) {
      const digest = yield digestSHA256(verifier);
      oauthLoginUrl.searchParams.set("code_challenge", encodeBase64URL(digest));
      oauthLoginUrl.searchParams.set("code_challenge_method", "S256");
    }
    const isMobile$1 = isMobile();
    try {
      const authCode = yield Oauth2Service.getOauthCode({
        apiProvider: getProviderByType((_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _c !== void 0 ? _c : [], provider),
        getOAuthResultFromApi: () => getOAuthResult(environmentId, provider, {
          state
        }),
        initWebAuth: ({ redirectUrl: redirectUrl2 } = {}) => initAuth(environmentId, provider, {
          redirectUrl: redirectUrl2 ? removeDynamicOauthParamsFromUrl(redirectUrl2) : void 0,
          state
        }),
        isMobile: isMobile$1,
        oauthLoginUrl,
        onSettled,
        provider,
        redirectUrl: redirectUrl !== null && redirectUrl !== void 0 ? redirectUrl : defaultRedirectUrl,
        sessionTimeout,
        setIsProcessing,
        state,
        strategy
      });
      yield completeConnection({
        authCode,
        authMode,
        captchaToken,
        provider,
        state,
        telegramAuthToken,
        verifier
      });
    } catch (error2) {
      if (!Oauth2Service.isGetOauthCodeError(error2)) {
        logger2.error("Social connection failed with unexpected error:", error2);
        onFailed(provider, { error: error2 }, { raiseAuthFailure: authMode === "signin" });
        return;
      }
      if (error2 === "user-cancelled")
        onFailed(provider, "user-cancelled");
      else {
        handleError(provider, error2.code, error2.message, {
          raiseAuthFailure: authMode === "signin"
        });
      }
    }
  });
  const completeConnection = (_d) => __awaiter(void 0, [_d], void 0, function* ({ authMode, provider, state, authCode, captchaToken, verifier, telegramAuthToken }) {
    try {
      let sessionPublicKey = void 0;
      if (shouldRegisterSessionKeysOnSignin()) {
        const keypair = yield generateSessionKey();
        sessionPublicKey = keypair.publicKey;
      }
      if (authMode === "signin") {
        if (provider === ProviderEnum.Telegram && telegramAuthToken) {
          const apiCall = () => telegramSignIn(environmentId, {
            sessionPublicKey,
            telegramAuthToken
          });
          yield signInAccount(provider, apiCall);
        } else if (provider === ProviderEnum.Telegram) {
          const apiCall = () => telegramSignIn(environmentId, {
            code: authCode,
            sessionPublicKey,
            state
          });
          yield signInAccount(provider, apiCall);
        } else {
          const apiCall = () => signInOAuth(environmentId, provider, {
            captchaToken,
            code: authCode,
            codeVerifier: verifier,
            sessionPublicKey,
            state
          });
          yield signInAccount(provider, apiCall);
        }
      } else {
        if (provider === ProviderEnum.Telegram) {
          const apiCall = () => telegramVerify(environmentId, {
            code: authCode,
            state
          });
          yield linkAccount(provider, apiCall);
        } else {
          const apiCall = () => verifyOAuth(environmentId, provider, {
            code: authCode,
            codeVerifier: verifier,
            state
          });
          yield linkAccount(provider, apiCall);
        }
      }
    } catch (error2) {
      logger2.error("Social connection failed with unexpected error:", error2);
      onFailed(provider, { error: error2 }, { raiseAuthFailure: authMode === "signin" });
    }
  });
  const connectWithFarcaster = (authMode_1, _e2) => __awaiter(void 0, [authMode_1, _e2], void 0, function* (authMode, { captchaToken, redirectUrl }) {
    const dynamicNonce = consumeNonce();
    const domain = PlatformService.getHost();
    const data = yield connect2({
      domain,
      nonce: dynamicNonce,
      redirectUrl: redirectUrl || defaultRedirectUrl,
      siweUri: PlatformService.getOrigin()
    });
    if (!(data === null || data === void 0 ? void 0 : data.url) || !(data === null || data === void 0 ? void 0 : data.channelToken)) {
      handleError(ProviderEnum.Farcaster, SocialOAuthErrorCode.GENERAL_ERROR, "Farcaster didn't return a valid url.", { raiseAuthFailure: authMode === "signin" });
      return;
    }
    if (isMobile()) {
      yield PlatformService.openURL(data.url);
    } else {
      setShowAuthFlow(true);
      onFarcasterUrl === null || onFarcasterUrl === void 0 ? void 0 : onFarcasterUrl(data.url);
    }
    const status2 = yield watchStatus({
      channelToken: data.channelToken
    });
    if (status2 === "cancelled") {
      setIsProcessing(false);
      return;
    }
    if (status2 === "timeout" || status2 === "rejected" || !(status2 === null || status2 === void 0 ? void 0 : status2.message) || !(status2 === null || status2 === void 0 ? void 0 : status2.custody) || !(status2 === null || status2 === void 0 ? void 0 : status2.signature) || !(status2 === null || status2 === void 0 ? void 0 : status2.nonce)) {
      handleError(ProviderEnum.Farcaster, SocialOAuthErrorCode.GENERAL_ERROR, "Farcaster didn't return valid data.", { raiseAuthFailure: authMode === "signin" });
      return;
    }
    const { custody: address, message, signature, nonce } = status2;
    if (authMode === "signin") {
      let sessionPublicKey = void 0;
      if (shouldRegisterSessionKeysOnSignin()) {
        const keypair = yield generateSessionKey();
        sessionPublicKey = keypair.publicKey;
      }
      const apiCall = () => farcasterSignIn(environmentId, {
        address,
        captchaToken,
        domain,
        message,
        nonce,
        sessionPublicKey,
        signature
      });
      yield signInAccount(ProviderEnum.Farcaster, apiCall);
    } else {
      const apiCall = () => farcasterVerify({
        environmentId,
        farcasterSignInRequest: {
          address,
          captchaToken,
          domain,
          message,
          nonce,
          signature
        }
      });
      yield linkAccount(ProviderEnum.Farcaster, apiCall);
      setShowAuthFlow(false, { clearErrors: false });
    }
    setIsProcessing(false);
  });
  return {
    checkValidProvider,
    completeConnection,
    connectSocialAccount,
    error,
    handleError,
    isProcessing,
    setError,
    setIsProcessing
  };
};
var removeDynamicOauthParamsFromUrl = (url) => {
  const urlObject = new URL(url);
  urlObject.searchParams.delete("dynamicOauthState");
  urlObject.searchParams.delete("dynamicOauthCode");
  return urlObject.toString();
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SocialRedirectContext/hooks/useRedirectSocialHandler/useRedirectSocialHandler.js
var import_qrcode65 = __toESM(require_browser(), 1);
var useRedirectSocialHandler = ({ setSocialProvider }) => {
  const { setView } = useViewContext();
  const { setDynamicWidgetView } = useWidgetContext();
  const [socialStorageItem, setSocialStorageItem] = (0, import_react189.useState)(null);
  const { sdkHasLoaded, user, setShowAuthFlow, isRenderingEmbeddedAuthFlow, setShowDynamicUserProfile } = useInternalDynamicContext();
  const { completeConnection } = useSocialAuth({
    sessionTimeout: 1e4
  });
  const updateInterfaceStateForSignIn = (0, import_react189.useCallback)((socialStorageItem2) => {
    const socialSignInProvider = getSocialSignInProviderForProviderEnum(socialStorageItem2.provider);
    setSocialProvider(socialSignInProvider);
    setView("social-redirect-view");
    if (!isRenderingEmbeddedAuthFlow.current) {
      setShowAuthFlow(true);
    }
  }, [setSocialProvider, setView, isRenderingEmbeddedAuthFlow, setShowAuthFlow]);
  const updateInterfaceStateForLink = (0, import_react189.useCallback)(() => {
    setDynamicWidgetView("profile");
    setShowDynamicUserProfile(true);
  }, [setDynamicWidgetView, setShowDynamicUserProfile]);
  useEffectOnce(() => {
    if (isSSR())
      return;
    const url = new URL(window.location.href);
    const dynamicOauthState = url.searchParams.get("dynamicOauthState");
    const dynamicOauthCode = url.searchParams.get("dynamicOauthCode");
    if (!dynamicOauthState || !dynamicOauthCode) {
      return;
    }
    const socialStorageItem2 = searchSocialStorageByState(dynamicOauthState);
    if (!socialStorageItem2)
      return;
    socialStorageItem2.code = dynamicOauthCode;
    setSocialStorageItem(socialStorageItem2);
    deleteSocialStorage(socialStorageItem2.provider);
  });
  useEffectOnceCondition(() => __awaiter(void 0, void 0, void 0, function* () {
    if (!socialStorageItem)
      return;
    const authMode = user ? "link" : "signin";
    if (authMode === "signin") {
      updateInterfaceStateForSignIn(socialStorageItem);
    } else if (authMode === "link") {
      updateInterfaceStateForLink();
    }
    yield completeConnection({
      authCode: socialStorageItem.code,
      authMode,
      captchaToken: socialStorageItem.captchaToken,
      provider: socialStorageItem.provider,
      state: socialStorageItem.state,
      verifier: socialStorageItem.codeVerifier
    });
  }), Boolean(socialStorageItem) && sdkHasLoaded);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/SocialRedirectContext/SocialRedirectContext.js
var SocialRedirectContext = (0, import_react190.createContext)(void 0);
var SocialRedirectContextProvider = ({ children }) => {
  var _a, _b, _c, _d;
  const { setShowAuthFlow, walletConnectorOptions, setSelectedWalletConnectorKey, walletUiUtils, consumeNonce, displaySiweStatement, environmentId, projectSettings, setIsSingleWalletAccount, setShowDynamicUserProfile, setPrimaryWalletId, secondaryWallets, sdkHasLoaded, user, connectWallet, primaryWallet, socialProvidersFilter = (providers) => providers } = useInternalDynamicContext();
  const { setErrorMessage } = useErrorContext();
  const { setView } = useViewContext();
  const { getCaptchaToken } = useCaptchaContext();
  const verifyWallet2 = useVerifyWallet({
    consumeNonce,
    displaySiweStatement,
    environmentId,
    projectSettings,
    setIsSingleWalletAccount
  });
  const signInProvider = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.socialSignIn) === null || _a === void 0 ? void 0 : _a.signInProvider;
  const enabledSocialProvidersInDb = (_c = (_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.socialSignIn) === null || _b === void 0 ? void 0 : _b.providers) !== null && _c !== void 0 ? _c : [];
  const enabledSocialProviders = (_d = socialProvidersFilter(enabledSocialProvidersInDb.filter((provider) => provider.enabled).map((provider) => provider.provider))) !== null && _d !== void 0 ? _d : [];
  const socialWalletConnector = walletConnectorOptions.map(({ walletConnector }) => walletConnector).find(isSocialWalletConnector);
  const [redirectStatus, setRedirectStatus] = (0, import_react190.useState)("idle");
  const [socialProvider, setSocialProvider] = (0, import_react190.useState)();
  const userWallets = primaryWallet ? [primaryWallet, ...secondaryWallets] : secondaryWallets;
  const wallet = userWallets.find((wallet2) => wallet2.connector.key === (socialWalletConnector === null || socialWalletConnector === void 0 ? void 0 : socialWalletConnector.key));
  const socialAccount = (0, import_react190.useMemo)(() => wallet ? getReferencedAccount(user, wallet.id) : void 0, [user, wallet]);
  useInternalDynamicEvents("logout", () => setSocialProvider(void 0));
  const handleError = (0, import_react190.useCallback)((message) => {
    logger2.error(message);
    if (user) {
      setShowAuthFlow(false, { emitCancelAuth: true });
      setShowDynamicUserProfile(true);
    } else {
      setShowAuthFlow(true);
      setView("wallet-list");
      setErrorMessage("-1");
    }
  }, [
    user,
    setErrorMessage,
    setShowAuthFlow,
    setShowDynamicUserProfile,
    setView
  ]);
  (0, import_react190.useEffect)(() => {
    var _a2, _b2;
    if (!projectSettings || !socialWalletConnector || !sdkHasLoaded) {
      const params2 = new URLSearchParams(window.location.search);
      if (params2.has("magic_oauth_request_id")) {
        setView("social-redirect-view");
        setShowAuthFlow(true);
      }
      return;
    }
    const params = new URLSearchParams(window.location.search);
    if (params.has("error") && params.has("provider")) {
      const errorDescription = params.get("error_description");
      handleError(errorDescription !== null && errorDescription !== void 0 ? errorDescription : "Unknown error");
      (_a2 = socialWalletConnector.getSession) === null || _a2 === void 0 ? void 0 : _a2.call(socialWalletConnector);
      return;
    }
    if (params.has("magic_oauth_request_id")) {
      const providerFromParams = params.get("provider");
      setSocialProvider(providerFromParams);
      setRedirectStatus("loading");
      setView("social-redirect-view");
      setShowAuthFlow(true);
      if (!user) {
        setSelectedWalletConnectorKey(socialWalletConnector.key);
      }
      (_b2 = socialWalletConnector.getSession) === null || _b2 === void 0 ? void 0 : _b2.call(socialWalletConnector).then((session) => __awaiter(void 0, void 0, void 0, function* () {
        if (user) {
          if (!socialAccount) {
            throw new Error("Social account not found");
          }
          if (socialAccount.oauthAccountId === session.oauthId) {
            if ((wallet === null || wallet === void 0 ? void 0 : wallet.id) !== (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.id)) {
              setPrimaryWalletId(wallet.id);
              setShowAuthFlow(false);
              setShowDynamicUserProfile(true);
            }
          } else {
            yield socialWalletConnector.endSession();
            setView("social-wrong-account");
          }
        } else {
          yield connectWallet(socialWalletConnector);
          const address = yield socialWalletConnector.getAddress();
          walletUiUtils.disabledConfirmationOnce();
          yield verifyWallet2({
            captchaToken: getCaptchaToken(),
            oauth: {
              accessToken: session.accessToken,
              didToken: session.didToken,
              provider: providerFromParams
            },
            /**
             * justification: if the user just successfully authenticated their social,
             * then the social connector must return an address
             */
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            publicWalletAddress: address,
            walletConnector: socialWalletConnector
          });
        }
        setSocialProvider(void 0);
        setRedirectStatus("success");
      })).catch((error) => {
        setSocialProvider(void 0);
        setRedirectStatus("error");
        handleError(error);
      });
    }
  }, [
    socialAccount,
    user,
    projectSettings,
    sdkHasLoaded,
    secondaryWallets,
    setPrimaryWalletId,
    setSelectedWalletConnectorKey,
    setShowAuthFlow,
    setShowDynamicUserProfile,
    setView,
    socialWalletConnector,
    verifyWallet2,
    walletUiUtils,
    wallet,
    handleError,
    connectWallet,
    primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.id,
    getCaptchaToken
  ]);
  useRedirectSocialHandler({
    setSocialProvider
  });
  return (0, import_jsx_runtime150.jsx)(SocialRedirectContext.Provider, { value: {
    enabledSocialProviders,
    redirectStatus,
    setSocialProvider,
    signInProvider,
    socialAccount,
    socialProvider,
    socialWalletConnector
  }, children });
};
var useSocialRedirectContext = () => {
  const context = (0, import_react190.useContext)(SocialRedirectContext);
  if (context === void 0) {
    throw new Error("useSocialRedirectContext must be used within a SocialRedirectContextProvider");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AnimatePresence/AnimatePresence.js
var AnimatePresence = ({ children, animationComponent }) => {
  const [isShown, setIsShown] = (0, import_react191.useState)(true);
  const forceRerender = useForceUpdate();
  const childrenRef = (0, import_react191.useRef)(null);
  const isChildrenPresent = (0, import_react191.useMemo)(() => Boolean(children), [children]);
  const prevIsChildrenPresent = usePrevious2(isChildrenPresent);
  const onUnmount = (0, import_react191.useCallback)(() => {
    childrenRef.current = null;
    forceRerender();
  }, [forceRerender]);
  (0, import_react191.useEffect)(() => {
    if ((0, import_react191.isValidElement)(children)) {
      childrenRef.current = import_react191.Children.map(children, (child) => (0, import_react191.cloneElement)(child));
    }
  }, [children]);
  (0, import_react191.useEffect)(() => {
    if (isChildrenPresent && !prevIsChildrenPresent) {
      setIsShown(true);
    }
    if (prevIsChildrenPresent && !isChildrenPresent) {
      setIsShown(false);
    }
  }, [isChildrenPresent, prevIsChildrenPresent]);
  return (0, import_react191.cloneElement)(animationComponent, {
    children: children || childrenRef.current,
    isShown,
    onUnmount
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js
var import_qrcode68 = __toESM(require_browser(), 1);
var PasskeySuccessEnum;
(function(PasskeySuccessEnum2) {
  PasskeySuccessEnum2[PasskeySuccessEnum2["CREATED"] = 0] = "CREATED";
  PasskeySuccessEnum2[PasskeySuccessEnum2["EDITED"] = 1] = "EDITED";
})(PasskeySuccessEnum || (PasskeySuccessEnum = {}));
var PasskeyCreatedSuccessBanner = ({ className }) => {
  const { passkeySuccessPopup } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime152.jsxs)(AnimatePresence, { animationComponent: (0, import_jsx_runtime152.jsx)(OpacityTransition, {}), children: [passkeySuccessPopup === PasskeySuccessEnum.EDITED && (0, import_jsx_runtime152.jsx)(ErrorContainer, { variant: "success", className, copykey: "dyn_passkey_success.edited", children: t2("dyn_passkey_success.edited") }), passkeySuccessPopup === PasskeySuccessEnum.CREATED && (0, import_jsx_runtime152.jsx)(ErrorContainer, { variant: "success", className, copykey: "dyn_passkey_success.created", children: t2("dyn_passkey_success.created") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ShadowDOM/ShadowDOM.js
var import_qrcode69 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/styles/index.shadow.js
var css_248z = '@layer shadow-reset{.dynamic-shadow-dom-content{all:initial}}@layer preflight{a,hr{color:inherit}progress,sub,sup{vertical-align:baseline}blockquote,body,dd,dl,fieldset,figure,h1,h2,h3,h4,h5,h6,hr,menu,ol,p,pre,ul{margin:0}fieldset,legend,menu,ol,ul{padding:0}*,:after,:before{border:0 solid;box-sizing:border-box}html{-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;text-size-adjust:100%;font-feature-settings:normal;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4}body{line-height:inherit}hr{border-top-width:1px;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}button,input,optgroup,select,textarea{color:inherit;font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;-moz-appearance:button;appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none;appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;appearance:button;font:inherit}summary{display:list-item}menu,ol,ul{list-style:none}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{color:#9ca3af;opacity:1}input::placeholder,textarea::placeholder{color:#9ca3af;opacity:1}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}[hidden]{display:none}}.accordion-item{overflow:hidden;position:relative;transition-duration:.15s;transition-property:max-height;transition-timing-function:ease-out}.accordion-item--full-height{height:100vh}.accordion-item__curtain{background-color:var(--dynamic-overlay);left:0;opacity:0;position:absolute;right:0;top:0;transition:opacity 50ms ease-in;z-index:1}.accordion-item__curtain--dimmed{bottom:0;opacity:1}.vertical-accordion__container{display:flex;flex-direction:column}.alert{align-items:center;border-radius:calc(var(--dynamic-border-radius)/3);display:flex;gap:.75rem;padding:.75rem}.alert--error{background-color:var(--dynamic-error-2);color:var(--dynamic-error-1)}.alert--warning{background-color:var(--dynamic-alert-2);color:var(--dynamic-alert-1)}.alert--info{background-color:var(--dynamic-brand-secondary-color);color:var(--dynamic-brand-primary-color)}.alert__icon{flex-shrink:0}.badge__container{align-items:center;border-radius:9999px;display:flex;font-size:.625rem;font-weight:500;gap:.25rem;padding:.25rem .5rem;position:relative;transition:color .3s,background-color .3s;white-space:nowrap}.badge__container__primary{background-color:var(--dynamic-badge-primary-background);color:var(--dynamic-badge-primary-color)}.badge__container__secondary{background-color:var(--dynamic-badge-background);color:var(--dynamic-badge-color)}.badge__dot{background-color:var(--dynamic-badge-dot-background);border-radius:9999px;height:.375rem;transition:color .3s,background-color .3s;width:.375rem}.button{align-items:center;cursor:pointer;display:flex;gap:.375rem;justify-content:center;position:relative;transition:all .2s ease}.button:disabled:not(.button--loading){cursor:default;opacity:.5}.button--expanded{width:100%}.button--brand-primary{background:var(--dynamic-brand-primary-color);border:var(--dynamic-button-primary-border);box-shadow:var(--dynamic-shadow-down-1);color:#fff;padding:var(--dynamic-button-primary-padding)}.button--brand-primary .typography{font-size:var(--dynamic-button-primary-font-size)}.button--brand-primary:hover:enabled{box-shadow:var(--dynamic-button-shadow)}.button--brand-primary:active:enabled,.button--primary{box-shadow:var(--dynamic-shadow-down-1)}.button--primary{background:var(--dynamic-button-primary-background);border:var(--dynamic-button-primary-border);padding:var(--dynamic-button-primary-padding)}.button--primary .typography{font-size:var(--dynamic-button-primary-font-size)}.button--primary:hover:enabled{box-shadow:var(--dynamic-button-shadow)}.button--primary:active:enabled,.button--secondary{box-shadow:var(--dynamic-shadow-down-1)}.button--secondary{background:var(--dynamic-button-secondary-background);border:var(--dynamic-button-secondary-border);padding:var(--dynamic-button-secondary-padding)}.button--secondary .typography{font-size:var(--dynamic-button-primary-font-size)}.button--secondary:hover:enabled{background:var(--dynamic-hover)}.button--secondary:active:enabled{background:var(--dynamic-base-3)}.button--tertiary,.button--tertiary .typography{color:var(--dynamic-text-secondary)}.button--tertiary:hover:enabled,.button--tertiary:hover:enabled .typography{color:var(--dynamic-text-primary)}.button--padding-default{border-radius:calc(var(--dynamic-border-radius)/2);padding:.625rem 1rem}.button--padding-large{border-radius:var(--dynamic-button-border-radius);padding:.875rem 1.25rem}.button--padding-medium{border-radius:calc(var(--dynamic-button-border-radius)/1.5);padding:.625rem 1rem}.button--padding-small{border-radius:calc(var(--dynamic-button-border-radius)/2);padding:.5rem .75rem}.button--padding-none{padding:0}.button--padding-login-screen-height{border-radius:calc(var(--dynamic-border-radius)/2);height:2.5rem;padding:0 1rem}.button__spinner{margin-left:auto;margin-right:auto}.button__end-slot,.button__start-slot{display:inline-flex}.button__spinner-container{align-items:center;bottom:0;color:var(--dynamic-text-primary);display:flex;justify-content:center;left:0;position:absolute;right:0;top:0}.button--loading>:not(.button__spinner-container){opacity:0}.checkbox--hidden{cursor:pointer;display:block;height:1rem;opacity:0;position:absolute;width:1rem;z-index:10}.checkbox--hidden:checked+.checkbox--visible{background:var(--dynamic-brand-primary-color);border-style:none}.checkbox--hidden:checked+.checkbox--visible>.checkbox__icon{opacity:1}.checkbox--hidden:disabled{pointer-events:none}.checkbox--visible{align-items:center;background:var(--dynamic-base-3);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/4);display:flex;height:1rem;justify-content:center;position:absolute;transition-duration:.2s;transition-property:all;transition-timing-function:cubic-bezier(.4,0,.2,1);width:1rem;z-index:0}.checkbox__container{height:1rem;position:relative;width:1rem}.checkbox__icon{color:#fff;height:.75rem;opacity:0;transition-duration:.2s;transition-property:opacity;width:.75rem}.connect-button{background:var(--dynamic-connect-button-background);border:var(--dynamic-connect-button-border);border-radius:calc(var(--dynamic-connect-button-radius, var(--dynamic-border-radius))/2);box-shadow:var(--dynamic-connect-button-shadow)}.connect-button:hover:enabled{background:var(--dynamic-connect-button-background-hover);border:var(--dynamic-connect-button-border-hover);box-shadow:var(--dynamic-connect-button-shadow-hover)}.connect-button:hover:enabled .typography{color:var(--dynamic-connect-button-color-hover)}.connect-button .typography{color:var(--dynamic-connect-button-color)}.copy-button__container{position:relative}.copy-button__tooltip{background-color:var(--dynamic-text-primary);color:var(--dynamic-base-2);font-size:.75rem}@keyframes enter-tile{0%{opacity:0;transform:translateY(.5rem)}to{opacity:1;transform:translateY(0)}}.enter-list-tile-animation{animation-duration:.2s;animation-fill-mode:both;animation-iteration-count:1;animation-name:enter-tile;animation-timing-function:ease-out}.error-container{align-items:center;display:flex;justify-content:center;margin-bottom:.5rem;padding:.5rem .75rem}.error-container img,.error-container svg{height:1.25rem;width:1.25rem}.error-container--error{background:var(--dynamic-error-2);color:var(--dynamic-error-1)}.error-container--info{background:var(--dynamic-base-3);color:var(--dynamic-text-primary)}.error-container--success{background:var(--dynamic-success-2);color:var(--dynamic-success-1)}.error-container--multi-wallet{margin-bottom:.75rem}.error--with-icon{margin-left:.875rem}.icon--color-brand-primary{color:var(--dynamic-brand-primary-color)}.icon--color-text-primary{color:var(--dynamic-text-primary)}.icon--color-text-secondary{color:var(--dynamic-text-secondary)}.icon--color-text-tertiary{color:var(--dynamic-text-tertiary)}.icon--color-text-error{color:var(--dynamic-error-1)}.icon--color-success-1{color:var(--dynamic-success-1)}.icon--size-xsmall{height:.75rem;width:.75rem}.icon--size-small{height:1rem;width:1rem}.icon--size-mini{height:1.25rem;width:1.25rem}.icon--size-medium{height:1.5rem;width:1.5rem}.icon--size-mlarge{height:1.875rem;width:1.875rem}.icon--size-large{height:2.375rem;width:2.375rem}.icon-button{align-items:center;border-radius:100%;color:var(--dynamic-text-tertiary);display:flex;justify-content:center}.icon-button svg:hover{color:var(--dynamic-text-secondary)}.icon-button svg:active{color:var(--dynamic-text-primary)}.indicator__container{align-items:center;background:var(--dynamic-base-1);border-radius:100%;bottom:0;display:flex;justify-content:center;position:absolute;right:0}.indicator__icon{background:var(--dynamic-success-1);border-radius:100%}.indicator__wallet-connect{background:#4084ed;bottom:0;color:#fff;position:absolute;right:-.125rem}.icon-with-spinner__container,.indicator__wallet-connect{align-items:center;border-radius:9999px;display:flex;justify-content:center}.icon-with-spinner__container{position:relative}.icon-with-spinner__container img{height:100%;width:100%}.icon-with-spinner__icon-container{align-items:center;display:flex;justify-content:center;position:relative}.icon-with-spinner__spinner-container{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));grid-template-rows:repeat(2,minmax(0,1fr));position:absolute;right:0;top:0}.icon-with-spinner__spinner{grid-column-start:2;grid-row-start:1;height:100%;width:100%}.icon-with-spinner__animation{animation:spin 1.4s linear infinite}.icon-with-status__container{margin-bottom:12px;max-width:-moz-fit-content;max-width:fit-content;position:relative}.icon-with-status__container .icon{border-radius:100%}.icon-with-status__status-dot{bottom:-.125rem;position:absolute;right:-.25rem}.icon-with-status__container .inner-icon__container{background:var(--dynamic-base-1);border-radius:100%;bottom:-.125rem;padding:.1875rem;position:absolute;right:-.1875rem}.icon-with-status__container .inner-icon{border-radius:100%}.icon-with-status__container .inner-icon svg{height:1rem;width:1rem}.icon-with-status__container .inner-icon--green{background:var(--dynamic-success-1)}.icon-with-status__container .inner-icon--red{background:var(--dynamic-error-1)}.icon-with-status__container .inner-icon path{fill:var(--dynamic-base-1)}.icon-with-status__container .status-dot__container{align-items:center;background:var(--dynamic-base-1);border-radius:100%;bottom:-.125rem;display:flex;height:.625rem;justify-content:center;position:absolute;right:-.25rem;width:.625rem}.icon-with-status__container .status-dot{border-radius:100%;height:.375rem;width:.375rem}.icon-with-status__container .status-dot--green{background:var(--dynamic-success-1)}.icon-with-status__container .status-dot--red{background:var(--dynamic-error-1)}.info-item__container{color:var(--dynamic-text-tertiary);display:flex}.info-item__container a{text-decoration:underline}.info-item__container .info-item__icon-container{border-radius:calc(var(--dynamic-border-radius)/3);color:var(--dynamic-text-tertiary);display:flex;margin-right:1.125rem}.info-item__container .info-item__icon-container svg{height:1.5rem;width:1.5rem}.info-item__container .info-item__secondary-text{margin-top:.25rem}.phone-number-field{display:flex;flex-direction:column}.phone-number-field__fields{align-items:stretch;display:flex;position:relative;width:100%}.phone-number-field__fields__country-code{align-items:center;background-color:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)*.4) 0 0 calc(var(--dynamic-border-radius)*.4);border-right:none;cursor:pointer;display:flex;padding-left:.75rem;position:relative;transition:all .2s ease;width:6.25rem}.phone-number-field__fields__country-code--disabled{background-color:var(--dynamic-base-3);pointer-events:none}.phone-number-field__fields__country-code__flag{margin-right:.5rem}.phone-number-field__fields__country-code__plus{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none}.phone-number-field__fields__country-code__container{align-items:center;display:flex;flex:1;pointer-events:none}.phone-number-field__fields__country-code .phone-number-field__fields__country-code__container .phone-number-field__fields__country-code__container__input{border:none;flex:1;padding:0;width:100%}.phone-number-field__fields__country-code__chevron{cursor:pointer;position:absolute;right:.5rem;width:1rem}.phone-number-field__fields__phone-number{align-items:center;display:flex;flex:1;position:relative}.phone-number-field__fields .phone-number-field__fields__phone-number .phone-number-field__fields__phone-number__input{border-radius:0 calc(var(--dynamic-border-radius)*.4) calc(var(--dynamic-border-radius)*.4) 0;padding-left:.75rem}.phone-number-field__fields__placeholder{align-self:center;color:var(--dynamic-text-secondary);left:7.0625rem;pointer-events:none;position:absolute;-webkit-user-select:none;-moz-user-select:none;user-select:none}.phone-number-field__fields__inline-submit{align-self:center;position:absolute;right:.75rem}.phone-number-field__dropdown{width:calc(var(--dynamic-modal-width) - 3rem)}.phone-number-field__dropdown__items{display:flex;flex-direction:column}.phone-number-field__dropdown__items__country{align-items:center;cursor:pointer;display:flex;gap:.375rem;padding:.375rem .75rem}.phone-number-field__dropdown__items__country__flag{width:1.5rem}.phone-number-field__dropdown__items__country__name{font-size:var(--dynamic-text-size-body-small)}.phone-number-field__dropdown__items__country__code{color:var(--dynamic-text-secondary);font-size:var(--dynamic-text-size-body-small)}.phone-number-field__dropdown__items__country:hover{background-color:var(--dynamic-base-4)}.phone-number-field__dropdown__items__country--selected{background-color:var(--dynamic-base-3)}.phone-number-field__error-message{color:var(--dynamic-error-1);padding:.5rem 0}.phone-number-field input::-webkit-inner-spin-button,.phone-number-field input::-webkit-outer-spin-button{-webkit-appearance:none;appearance:none;margin:0}.phone-number-field input[type=number]{-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.inline-submit-button{--icon-arrow:var(--dynamic-text-tertiary);--icon-background:var(--dynamic-base-3);transition:all .2s}.inline-submit-button path,.inline-submit-button rect{transition:all .2s}.inline-submit-button--active,.inline-submit-button:hover{--icon-arrow:var(--dynamic-text-secondary);--icon-background:var(--dynamic-hover)}.inline-submit-button--ready,.inline-submit-button--ready:hover{--icon-arrow:var(--dynamic-base-2);--icon-background:var(--dynamic-brand-primary-color)}.input__container{position:relative}.input__container .input__suffix{position:absolute;right:1rem;top:1rem}.input__container .input{background:var(--dynamic-base-2);border-color:var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)*.4);border-width:.0625rem;color:var(--dynamic-text-primary);font-size:.9375rem;font-weight:400;margin:0;outline:none;transition:all .2s ease;width:100%}.input__container .input:disabled{background:var(--dynamic-base-3);border-color:var(--dynamic-base-4)}.input__container .input:disabled .input__label{color:var(--dynamic-text-tertiary)}.input__container .input__label{color:var(--dynamic-text-secondary);cursor:text;font-size:.625rem;pointer-events:none}.input__container .input:not(.input__error):focus,.input__container .input:not(.input__error):hover{background:var(--dynamic-base-2);border-color:var(--dynamic-base-4)}.input__container .input__error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.input__container .input__error~.input__label,.input__container .input__error~.input__trailing{color:var(--dynamic-error-1)}.input__container .input__has_trailing{padding-right:4rem}.input__container .input__trailing{color:var(--dynamic-text-secondary);font-size:.75rem;font-weight:500;position:absolute;right:.75rem;top:50%;transform:translateY(-50%)}.input__container--dense .input{padding:1.125rem .75rem .375rem}.input__container--dense .input::-moz-placeholder{color:transparent}.input__container--dense .input::placeholder{color:transparent}.input__container--dense .input--no-label{padding-block:.75rem}.input__container--dense .input__label{left:.75rem;position:absolute;top:.4375rem;transition:all .2s ease;-webkit-user-select:none;-moz-user-select:none;user-select:none}.input__container--dense .input:-moz-placeholder-shown~.input__label{font-size:.9375rem;top:.75rem}.input__container--dense .input:placeholder-shown~.input__label{font-size:.9375rem;top:.75rem}.input__container--dense .input:focus~.input__label{font-size:.625rem;top:.4375rem}.input__container--regular{display:flex;flex-direction:column}.input__container--regular .input{padding:.75rem}.input__container--regular .input__label{align-items:center;display:inline-flex;font-size:.75rem;line-height:1rem;margin-bottom:.5rem;order:-1}.input__container--regular .input__label:after{background:var(--dynamic-base-4);content:"";flex:1;height:1px;margin-left:.75rem;right:0}.input__container--regular .input__suffix{top:2.375rem}.input__message{color:var(--dynamic-text-primary);padding:.5rem 0}.input__message__error{color:var(--dynamic-error-1)}.list-tile{align-items:center;background-color:var(--dynamic-wallet-list-tile-background);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-wallet-list-tile-shadow);color:var(--dynamic-text-primary);display:flex;gap:.625rem;padding:var(--dynamic-wallet-list-tile-padding);transition-duration:var(--dynamic-wallet-list-tile-animation-duration);transition-property:all;transition-timing-function:ease-out;width:100%}.list-tile:not(:disabled):active{transform:scale(.95)}.list-tile:not(:disabled):hover{background-color:var(--dynamic-wallet-list-tile-background-hover);border:var(--dynamic-wallet-list-tile-border-hover);box-shadow:var(--dynamic-wallet-list-tile-shadow-hover)}.list-tile__children{flex-grow:1;text-align:left}.modal-header{align-items:center;background:var(--dynamic-header-background);display:flex;justify-content:center;padding:var(--dynamic-header-padding);width:100%}.modal-header--border{border-bottom:var(--dynamic-header-border-bottom)}.modal-header--align-content-bottom{align-items:start}.modal-header--empty{padding-bottom:0}.modal-header__leading,.modal-header__trailing{align-items:center;display:flex;flex:1;gap:.25rem;height:1.5rem;justify-content:flex-start;margin-right:auto}.modal-header__leading--empty{height:0}.modal-header__trailing{justify-content:flex-end;margin-left:auto;margin-right:0}.modal-header__trailing--empty{height:0}.evm-network-control__container{align-items:center;background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);bottom:0;color:var(--dynamic-text-primary);display:flex;gap:.375rem;max-width:100%;padding:.25rem;position:absolute;right:0;transform:translateX(50%)}.evm-network-control__container--error{border:1px solid var(--dynamic-error-1);color:var(--dynamic-error-1);cursor:auto}.evm-network-control__network-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.evm-network-control__arrow-icon{min-width:1rem;transform:rotate(90deg);transition:transform .15s linear}.evm-network-control__arrow-icon--active{transform:rotate(-90deg)}@keyframes spinner-animation{0%{transform:rotate(0)}to{transform:rotate(1turn)}}.network{color:var(--dynamic-text-primary);display:flex;justify-content:space-between;width:100%}.network .network__container{align-items:flex-start;display:flex}.network .network__title-icon{height:1rem;margin-right:.5rem;margin-top:.0625rem;width:1rem}.network .network__title-container{display:flex;flex-direction:column;gap:.25rem}.network .network__title-copy{white-space:nowrap}.network .network__status-container{align-items:center;border-radius:100%;display:flex;height:1rem;justify-content:center;width:1rem}.network .network__status-container .network__status-icon{color:#fff;height:.75rem;width:.75rem}.network .network__status-container .network__status-icon svg path{fill:currentcolor}.network .network__status-container .network__status-spinner-icon{animation:spinner-animation 2s linear infinite;height:.75rem;margin-right:-.9375rem;margin-top:-.75rem;transform-origin:0 100%;width:.75rem}.network .network__status-container--active{background-color:var(--dynamic-brand-primary-color)}.network-action{align-items:center;display:flex;padding:.5rem 1rem}@media (pointer:coarse){.network-action{padding:.5rem 1.5rem}}.network-action:not(.network--not-supported){cursor:pointer}.network-action:not(.network--not-supported):hover{background-color:var(--dynamic-hover)}.network-control-skeleton{align-items:center;border-radius:calc(var(--dynamic-border-radius)/2);display:flex;gap:.375rem;justify-content:center;padding:.1875rem .25rem}.network-control-skeleton__icon{background-color:var(--dynamic-base-3);border:1px solid var(--dynamic-base-4);border-radius:100%;height:1.125rem;width:1.125rem}.network-control-skeleton__skeleton{width:1.875rem}.non-network-switching-supported-control{align-items:center;background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);bottom:0;color:var(--dynamic-text-primary);display:flex;gap:.375rem;justify-content:center;padding:.25rem;position:absolute;right:0;transform:translateX(50%)}.non-network-switching-supported-control--error{background-color:var(--dynamic-error-2);cursor:auto}.non-network-switching-supported-control__network-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.network-picker-network-control{display:flex;flex-direction:column}.network-picker-network-control__anchor{padding-top:.125rem;position:relative}.pin-field__container{display:flex;flex:1;gap:2.5%;justify-content:space-between;margin-top:1rem;max-width:19.5rem;width:100%}.pin-input__input{background:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:.75rem;color:var(--dynamic-text-primary);font-size:1rem;height:2.75rem;max-width:2.75rem;outline:.125rem solid transparent;outline-offset:.125rem;text-align:center;width:100%}.pin-input__input:last-child{margin-right:0}.pin-input__input:disabled{cursor:not-allowed;opacity:.5}.pin-input__input--error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1);color:var(--dynamic-error-1)}.pin-input__input--success{background:var(--dynamic-success-2);border-color:var(--dynamic-success-1);color:var(--dynamic-success-1)}.portal__container{align-items:center;display:flex;height:100%;justify-content:center;width:100%}.portal__backdrop{-webkit-backdrop-filter:var(--dynamic-modal-backdrop-filter);backdrop-filter:var(--dynamic-modal-backdrop-filter);background:var(--dynamic-modal-backdrop-background);cursor:default;height:100%;left:0;position:fixed;top:0;width:100%}.search__container{align-items:center;background:var(--dynamic-search-bar-background);border:var(--dynamic-search-bar-border);border-radius:var(--dynamic-search-border-radius);cursor:text;display:flex;gap:.625rem;height:2.625rem;justify-content:space-between;min-height:2.25rem;padding-left:.75rem;padding-right:.75rem}.search__container,.search__container svg{color:var(--dynamic-text-tertiary)}.search__container:hover:not(.search__container--active,.search__container:focus-within){background:var(--dynamic-search-bar-background-hover);border:var(--dynamic-search-bar-border-hover);color:var(--dynamic-text-secondary)}.search__container:hover:not(.search__container--active,.search__container:focus-within) svg{color:var(--dynamic-text-secondary)}.search__container--active,.search__container:focus-within{background:var(--dynamic-search-bar-background-focus);border:var(--dynamic-search-bar-border-focus);color:var(--dynamic-text-primary)}.search__container--active svg,.search__container:focus-within svg{color:var(--dynamic-text-secondary)}.search-icon__container{align-items:center;color:var(--dynamic-text-tertiary);display:flex;height:1rem;justify-content:center;width:1rem}.search__input{background:none;border:0;color:var(--dynamic-text-primary);display:flex;flex-grow:1;font-size:var(--dynamic-text-size-body-small);font-weight:500;line-height:1rem;margin:0;outline:none;padding-bottom:.25rem;padding-top:.25rem}.search__input::-moz-placeholder{color:var(--dynamic-text-tertiary)}.search__input::placeholder{color:var(--dynamic-text-tertiary)}.search__input:hover::-moz-placeholder{color:var(--dynamic-text-secondary)}.search__input:hover::placeholder{color:var(--dynamic-text-secondary)}.search__input:focus::-moz-placeholder{color:transparent}.search__input:focus::placeholder{color:transparent}.search__button--clear{color:var(--dynamic-text-secondary);font-size:var(--dynamic-text-size-body-mini)}.search__button--clear:hover{color:var(--dynamic-text-primary)}.select__container{cursor:pointer;position:relative}.select__container .select{-webkit-appearance:none;-moz-appearance:none;appearance:none;bottom:0;left:0;opacity:0;outline:none;position:absolute;right:0;top:0}.select__container .select::-moz-placeholder{color:transparent}.select__container .select::placeholder{color:transparent}.select__container .select__body{background:var(--dynamic-base-2);border-color:var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)*.4);border-width:.0625rem;display:block;margin:0;padding:1.125rem .75rem .375rem;position:relative;transition:all .2s ease;width:100%}.select__container .select__value{color:var(--dynamic-text-primary);font-size:.9375rem;font-weight:400}.select__container .select__label{color:var(--dynamic-text-secondary);font-size:.9375rem;left:.75rem;pointer-events:none;position:absolute;top:.75rem;transition:all .2s ease}.select__container .select__control_icon{align-items:center;bottom:0;color:var(--dynamic-text-secondary);display:flex;position:absolute;right:.75rem;top:0}.select__container .select__has_value .select__label{font-size:.625rem;top:.4375rem}.select__container .select:has(.select__error)~.select__body{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.select__container .select__error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.select__container .select__error .select__control_icon,.select__container .select__error .select__label{color:var(--dynamic-error-1)}.select__message{color:var(--dynamic-text-primary);padding-top:.5rem}.select__message__error{color:var(--dynamic-error-1)}.separator{border-top:.0625rem solid var(--dynamic-base-3)}@keyframes shimmer{to{transform:translateX(100%)}}.skeleton{background:var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)/6);display:inline-flex;line-height:1;min-width:100%;overflow:hidden;position:relative;z-index:0}.skeleton:after{animation:shimmer 2s infinite;background-image:var(--dynamic-loading-animation-gradient);bottom:0;content:"";left:0;position:absolute;right:0;top:0;transform:translateX(-100%)}.spinner{animation:spin 1s linear infinite}.spinner path{stroke:var(--dynamic-brand-primary-color)}@keyframes spin{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}.status-dot__container{align-items:center;background:var(--dynamic-base-1);border-radius:100%;display:flex;height:.625rem;justify-content:center;width:.625rem}.status-dot{border-radius:100%;height:.375rem;width:.375rem}.status-dot--green{background:var(--dynamic-success-1)}.status-dot--red{background:var(--dynamic-error-1)}.status-dot--yellow{background:var(--dynamic-alert-1)}.switch__container{display:flex}.switch__container.disabled{opacity:.2;pointer-events:none}.switch__container .button{background:var(--dynamic-base-2);border-radius:0;box-shadow:var(--dynamic-shadow-down-1);color:var(--dynamic-text-primary);font-size:var(--dynamic-text-size-button-primary);font-weight:400;margin:0;padding:.75rem 0;width:100%}.switch__container .button:first-child{border-bottom-left-radius:calc(var(--dynamic-border-radius)/3);border-right:0;border-top-left-radius:calc(var(--dynamic-border-radius)/3)}.switch__container .button:last-child{border-bottom-right-radius:calc(var(--dynamic-border-radius)/3);border-top-right-radius:calc(var(--dynamic-border-radius)/3)}.switch__container .button.active{background:var(--dynamic-brand-primary-color);color:#fff}.text-button{align-items:center;border-radius:calc(var(--dynamic-border-radius)/6);color:var(--dynamic-text-secondary);cursor:pointer;display:flex;font-size:.75rem;font-weight:500;gap:.375rem;padding:.125rem .375rem}.text-button:hover{background-color:var(--dynamic-hover)}.auth-mode-switch__container{align-items:center;color:#fff;display:flex;font-size:1rem;gap:.25rem;margin-bottom:.25rem}.auth-mode-switch__container label{cursor:pointer}.toolkit__container{background:var(--dynamic-base-1);border-bottom-right-radius:calc(var(--dynamic-border-radius)/1.5);border-top-right-radius:calc(var(--dynamic-border-radius)/1.5);display:flex;flex-direction:column;gap:1rem;left:0;padding:1.875rem 3.5rem;position:fixed;top:50%;transform:translateY(-50%);width:18.125rem}@media (pointer:coarse){.toolkit__container{display:none}}.switcher__copy{color:var(--dynamic-text-primary);margin-bottom:.25rem}.tos-and-pp__text{color:var(--dynamic-text-secondary);font-size:var(--dynamic-text-size-body-small);margin:0 auto;text-align:center}.tos-and-pp__text .tos-and-pp__link{color:var(--dynamic-text-link);text-decoration:none}.zoom-transition__root{transform-origin:50% 50%}.vertical-drawer-animation{overflow:hidden;transition-property:max-height;transition-timing-function:ease-out}.typography{font-family:var(--dynamic-font-family-primary);font-weight:500;line-height:normal}.typography--title{font-size:var(--dynamic-text-size-title)}.typography--body-normal{font-size:var(--dynamic-text-size-body-normal)}.typography--body-small{font-size:var(--dynamic-text-size-body-small)}.typography--body-mini{font-size:var(--dynamic-text-size-body-mini)}.typography--button-primary{font-size:var(--dynamic-text-size-button-primary);font-weight:700}.typography--button-secondary{font-size:var(--dynamic-text-size-button-secondary);font-weight:700}.typography--button-tertiary{font-size:var(--dynamic-text-size-button-secondary);font-weight:400}.typography--numbers-big{font-family:var(--dynamic-font-family-numbers);font-size:var(--dynamic-text-size-numbers-big)}.typography--numbers-medium{font-family:var(--dynamic-font-family-numbers);font-size:var(--dynamic-text-size-numbers-medium)}.typography--bold{font-weight:700}.typography--medium{font-weight:500}.typography--regular{font-weight:400}.typography--link{color:var(--dynamic-text-link)}.typography--brand-primary{color:var(--dynamic-brand-primary-color)}.typography--primary{color:var(--dynamic-text-primary)}.typography--secondary{color:var(--dynamic-text-secondary)}.typography--tertiary{color:var(--dynamic-text-tertiary)}.typography--uppercase{text-transform:uppercase}.typography--dynamic-error-1{color:var(--dynamic-error-1)}.typography--errror-2{color:var(--dynamic-error-2)}.typography--connection-green-1{color:var(--dynamic-success-1)}.typography--tooltip{color:var(--dynamic-tooltip-text-color)}.typography--inherit{color:inherit}.typography--white{color:#fff}.typography--truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.powered-by-dynamic{align-items:center;color:var(--dynamic-text-tertiary);display:flex;text-decoration:none;width:100%}.powered-by-dynamic--center{justify-content:center}.powered-by-dynamic--right{justify-content:end}.powered-by-dynamic__logo,.powered-by-dynamic__text{display:inline-block}.powered-by-dynamic__text{margin-right:.25rem}.powered-by-dynamic__logo{display:inline-block;margin-top:.0625rem;max-width:3.6875rem;width:3.6875rem}.dynamic-footer{background:var(--dynamic-footer-background);padding:var(--dynamic-footer-padding);width:100%}.dynamic-footer:not(.dynamic-footer__top-border){padding-top:0}.dynamic-footer__top-border{border-top:var(--dynamic-footer-border-top)}.user-address,.user-address__container{align-items:center;display:flex;justify-content:center}.user-address__container{margin-top:.375rem}.user-address__status-dot{margin-right:.375rem}.user-address__seperator{background-color:var(--dynamic-base-4);height:.5rem;margin:0 .5rem;width:.0625rem}.app-origin-tile{align-items:center;display:flex;flex-direction:column;gap:.125rem}.app-origin-tile__title{align-items:center;display:flex;gap:.25rem}.app-origin-tile__logo{height:1rem;width:auto}.options-switcher{background-color:var(--dynamic-base-4);display:flex;min-height:2rem;position:relative}.options-switcher,.options-switcher__active-rail,.options-switcher__button{border-radius:calc(var(--dynamic-border-radius)/3)}.options-switcher__button{color:var(--dynamic-text-secondary);flex:1;font-size:var(--dynamic-text-size-button-secondary);font-weight:500;position:relative}.options-switcher__button--active{color:var(--dynamic-text-primary)}.options-switcher__active-rail{background-color:var(--dynamic-base-2);box-shadow:var(--dynamic-shadow-down-1);height:100%;position:absolute;transition:left .1s ease-in-out}.dynamic-verified-icon{color:var(--dynamic-success-1)}.user-profile-field__value{align-items:center;display:flex;min-height:.9375rem;overflow:auto}.user-profile-field__verify-icon{margin-left:.25rem}.user-profile-section{margin:0 0 .75rem}.user-profile-section__title{margin-bottom:.5rem}.user-profile-section__header{display:flex;flex-direction:row;justify-content:space-between}.user-profile-section__action{display:flex;margin:0 0 .5rem}.user-profile-social-account__connected-avatar{border-radius:100%;height:100%;overflow:hidden;position:relative;width:100%}.user-profile-social-account__connected-provider-icon{background-color:#fff;border-radius:100%;bottom:-.1875rem;height:.875rem;padding:.09375rem;position:absolute;right:-.3125rem;width:.875rem}.user-profile-social-account__image{-o-object-fit:cover;object-fit:cover}.user-profile-social-account{align-items:center;background-color:var(--dynamic-wallet-list-tile-background);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-wallet-list-tile-shadow);color:var(--dynamic-text-primary);display:flex;gap:.625rem;padding:var(--dynamic-wallet-list-tile-padding);width:100%}.user-profile-social-account__icon{flex-shrink:0;height:1.5rem;position:relative;width:1.5rem}.user-profile-social-account__label{flex-grow:1;text-align:left}.user-profile-social-account__button{box-shadow:none;flex-shrink:0;padding:.1875rem .28125rem}.user-profile-social-account__button .button__spinner-container{left:auto}.user-profile__fields{background-color:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);padding:.75rem}.user-profile__fields,.user-profile__social-accounts{display:flex;flex-direction:column;gap:.5rem}.divider{align-items:center;display:flex;gap:.75rem;justify-content:space-between;padding:1rem 0}.divider__dash{background:var(--dynamic-base-4);height:.0625rem;width:100%}.divider__text{white-space:nowrap}.divider__full-width{width:100%}.dynamic-tooltip{background-color:var(--dynamic-tooltip-color);border-radius:calc(var(--dynamic-border-radius)/4);opacity:0;padding:.125rem .5rem;pointer-events:none;position:absolute;transform:translate(-50%,-100%);transform-origin:50% 50%;-webkit-user-select:none;-moz-user-select:none;user-select:none;white-space:nowrap;z-index:-1}.dynamic-tooltip__arrow{bottom:-.1875rem;color:var(--dynamic-tooltip-color);height:.25rem;left:50%;position:absolute;transform:translateX(-50%);width:.375rem}.dynamic-tooltip--visible{opacity:1;pointer-events:unset;-webkit-user-select:unset;-moz-user-select:unset;user-select:unset;z-index:1}.modal-header-banner{padding:.5rem .75rem;text-align:center}.modal-header-banner__error{background-color:var(--dynamic-error-2)}.modal-header-banner__success{background-color:var(--dynamic-success-2)}.modal-header-banner__notice{background-color:var(--dynamic-brand-secondary-color)}.otp-verification-view{align-items:center;display:flex;flex-direction:column;padding:var(--dynamic-layout-content-padding);text-align:center}.otp-verification-view__icon-with-spinner{margin:0 auto .75rem}.otp-verification-view--message{padding:var(--dynamic-layout-content-error-padding)}.otp-verification-view__status-header{align-items:center;display:flex;justify-content:center}.otp-verification-view__footer{display:flex;flex-direction:column;gap:1rem}.otp-verification-view__destination-container{align-items:center;display:flex;gap:.25rem;justify-content:center}.otp-verification-view__retry-container{margin:1rem auto 0}.overlay-card{bottom:0;height:100%;left:0;max-height:100%;position:absolute;right:0}.overlay-card--disabled{pointer-events:none}.overlay-card__animation{bottom:0;height:100%;left:0;max-height:100%;position:absolute;right:0;top:0}.overlay-card__animation--limit-height{height:80%;max-height:80%;top:unset}.overlay-card__overlay{background-color:var(--dynamic-overlay);bottom:0;left:0;position:absolute;right:0;top:0}.overlay-card__content{background-color:var(--dynamic-base-1);border-radius:calc(var(--dynamic-border-radius)/1.5);border-top:.0625rem solid var(--dynamic-base-4);bottom:0;display:flex;flex-direction:column;left:0;max-height:100%;overflow-y:auto;position:absolute;right:0}@media (pointer:coarse){.overlay-card__content{border-bottom-left-radius:0;border-bottom-right-radius:0}}.overlay-card-target{bottom:0;height:100%;left:0;max-height:100%;overflow:auto;position:absolute;right:0}.icon-list-tile{padding-left:0;padding-right:0}.icon-list-tile--children{align-items:center;display:flex;justify-content:center}.popper-content{display:flex;position:absolute;z-index:100}.popper-content__transform-origin-bottom-left{transform:translateY(-100%)}.popper-content__transform-origin-bottom-right{transform:translate(-100%,-100%)}.popper-content__transform-origin-top-left{transform:translate(0)}.popper-content__transform-origin-top-right{transform:translate(-100%)}.dropdown{align-items:stretch;background-color:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/3);box-shadow:0 .5rem .75rem -.375rem rgba(24,39,75,.06),0 .5rem .75rem -.1875rem rgba(24,39,75,.06);display:flex;flex-direction:column;max-height:var(--max-height);min-width:10rem;overflow-y:auto;padding-block:.1875rem}.dropdown--entering{animation-fill-mode:both;animation-iteration-count:1;animation-name:desktop-dropdown-entering-animation;animation-timing-function:ease-out}.dropdown--exiting{animation-fill-mode:both;animation-iteration-count:1;animation-name:desktop-dropdown-exiting-animation;animation-timing-function:ease-out}.menu-list__overlay-card__container{align-items:stretch;display:flex;flex-direction:column;overflow-y:auto;padding-bottom:1.25rem}.transaction-confirmation.dynamic-tooltip{color:var(--dynamic-base-1)}.transaction-confirmation__actions{align-items:center;display:flex;flex-direction:row;gap:.375rem;padding-top:.5rem;width:100%}.transaction-confirmation__actions .button--brand-primary .icon--color-text-secondary,.transaction-confirmation__actions .button--brand-primary .typography--primary{color:#fff}.transaction-confirmation__footer{padding-top:1rem}.transaction-confirmation__body{align-items:stretch;display:flex;flex:1;flex-direction:column;overflow:hidden;padding:0 1.5rem 1.5rem}.transaction-confirmation__app-origin-tile{padding:.75rem}.transaction-confirmation__content{display:flex;flex:1;flex-direction:column;justify-content:flex-start;margin-top:.25rem;overflow:auto;width:100%}.transaction-confirmation__rows{max-height:14.375rem;padding:.5rem .75rem;width:100%}.transaction-confirmation__rows .flex{display:flex;justify-content:space-between}.transaction-confirmation__rows .flex-row{flex-direction:row;gap:.5rem}.transaction-confirmation__rows .row{padding:.5rem 0}.transaction-confirmation__rows .gap{gap:.3rem}.transaction-confirmation__secure-wallet{margin-bottom:0;margin-top:1rem}.transaction-confirmation__info{text-align:right}.transaction-confirmation__error{padding-top:.75rem}.transaction-confirmation__warning{padding-top:.5rem}.transaction-card{background-color:var(--dynamic-base-2);border-radius:.5rem;display:flex;flex-direction:column;padding:1rem 1rem .2rem}.transaction-card__icon{display:flex;gap:.5rem}.transaction-card__icon p{padding-top:.125rem}.transaction-card__icon__container{position:relative}.transaction-card__icon__container__network{align-items:center;background-color:var(--dynamic-base-1);border:1px solid var(--dynamic-base-1);border-radius:100%;bottom:-5px;display:flex;height:1rem;justify-content:center;position:absolute;right:-5px;width:1rem}.transaction-card__total p .typography{gap:.3rem}.transaction-card__info{display:flex;flex-direction:row;gap:.225rem;justify-content:end}.transaction-card__header{align-items:center;display:flex;justify-content:space-between}.transaction-card__header__info{align-items:flex-end;display:flex;flex-direction:column}.transaction-card__arrow{color:var(--dynamic-text-secondary);font-size:1.25rem;margin-left:.5rem}.transaction-card__destination{align-items:center;display:flex;gap:.5rem;margin-bottom:.75rem;margin-top:.25rem}.transaction-card .row{border-top:1px solid var(--dynamic-base-3);display:flex;justify-content:space-between;padding:.6rem 0}.transaction-card .flex-row{display:flex;flex-direction:row;gap:.1rem}.transaction-card .gap-native{gap:.3rem}.transaction-status-layout{display:flex;flex:1;flex-direction:column;overflow:hidden}.transaction-status-layout .modal-header{padding:3rem .3125rem .625rem}.transaction-status-layout__status-icon{color:var(--dynamic-brand-primary-color);height:4rem;width:4rem}.transaction-status-layout__title{text-align:center}.transaction-status-layout__body{align-items:stretch;display:flex;flex:1;flex-direction:column;padding:.25rem 1.5rem 1.5rem}.transaction-status-layout__sent_to{text-align:center}.transaction-status-layout__sent_to p{display:inline}.transaction-status-layout__content{align-items:center;display:flex;flex-direction:column;justify-content:center;margin-top:.375rem;width:100%}.transaction-status-layout__rows{max-height:14.375rem;overflow-y:auto;padding:.375rem .75rem;width:100%}.transaction-status-layout__rows p{font-size:1.5rem}.transaction-status-layout__rows>.transaction-row:not(:first-child){border-top:1px solid var(--dynamic-base-4)}.transaction-status-layout__actions{margin-top:auto;padding-top:1rem}.transaction-status-layout__actions .button--brand-primary .typography--primary{color:var(--dynamic-base-2)}.transaction-status-layout__footer{padding-top:1rem}.transaction-origin-destination__arrow-icon,.transaction-origin-destination__wallet-icon{display:inline-block}.transaction-origin-destination__arrow-icon,.transaction-origin-destination__text,.transaction-origin-destination__wallet-icon{vertical-align:middle}.transaction-origin-destination__wallet-icon{height:1rem;margin-right:.375rem;width:1rem}.transaction-origin-destination__arrow-icon{color:var(--dynamic-text-tertiary);margin:0 .5625rem}.tokens-balance-dropdown{background-color:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-button-border-radius)/1);cursor:pointer;padding:.875rem .75rem}.tokens-balance-dropdown,.tokens-balance-dropdown__selected{align-items:center;display:flex;gap:.5rem;justify-content:space-between}.tokens-balance-dropdown__selected .evm-network-control__arrow-icon{position:absolute;right:2.625rem}.tokens-balance-dropdown__menu_list{border-radius:calc(var(--dynamic-button-border-radius)/1);padding:.5rem 1rem;width:19.375rem}@media (max-width:640px){.tokens-balance-dropdown__menu_list{margin:0 auto;width:100%}.tokens-balance-dropdown__menu_list .modal-header{padding:1rem 0 1rem 1.25rem}}.tokens-balance-dropdown__menu_list .modal-header__leading,.tokens-balance-dropdown__menu_list .modal-header__trailing{flex:none}.tokens-balance-dropdown__menu_list_item{align-items:center;display:flex;gap:.625rem;justify-content:space-between;padding:.5rem 0;text-align:left}.tokens-balance-dropdown__menu_list_item__name{display:flex;gap:.3125rem;min-width:9.375rem}.tokens-balance-dropdown__menu_list_item__balance{display:flex;gap:.3125rem}.tokens-balance-dropdown__chain{align-items:center;display:flex;gap:.375rem}.tokens-balance-dropdown__chain__icon{height:1rem;width:1rem}.tokens-balance-dropdown__balance-container{align-items:center;display:flex;gap:.25rem}.tokens-balance-dropdown__balance{align-items:center;display:flex;gap:.125rem}.send-balance-page-layout__header-content{align-items:center;display:flex;gap:.5rem}.send-balance-page-layout__body{display:flex;flex:1;flex-direction:column;overflow:auto;padding:.25rem 1.5rem 1.5rem}.send-balance-page-layout__balance-container{display:flex;flex-direction:column;gap:.5rem;padding-bottom:.5rem}.send-balance-page-layout__error{padding-bottom:1rem}.send-balance-page-layout__footer{padding-top:1.5rem}.send-balance-page-layout__network-container{display:flex;justify-content:center;padding-bottom:.5rem}.send-balance-form{display:flex;flex:1;flex-direction:column;gap:.5rem}.send-balance-form__button{margin-top:auto}.send-balance-form__secure-wallet{margin:0}.send-balance-form__field.fiat{padding-left:1.5625rem}.send-balance-form__amount-container{position:relative}.send-balance-form__amount-container__fiat_sign{left:.625rem;position:absolute;top:.6875rem}.send-balance-form__amount-container__double_arrow{position:absolute;right:.625rem;top:.875rem}.send-balance-form__amount-container__balance{display:flex;gap:.25rem;position:absolute;right:.75rem;top:1.4375rem}.send-balance-form__amount-container__field.input{padding-left:3.125rem;transition:none}.send-balance-form__amount-container__floating_value{color:#000;font-size:1rem;left:10px;pointer-events:none;position:absolute;top:1.1875rem;white-space:nowrap}.send-balance-form__amount_available{border-bottom:1px solid var(--dynamic-base-3);padding-bottom:.75rem}.send-balance-form .input__container--regular .input__label:after{content:"";height:0}.select-network-button__icon{display:inline;margin:0 6px 3px;max-height:16px;max-width:16px;vertical-align:middle}.chip{align-items:center;background:var(--dynamic-base-2);border-radius:.75rem;color:var(--dynamic-text-primary);display:inline-flex;gap:.1875rem;height:1.5rem;justify-content:center;padding:.125rem .25rem}.chip__with-icon{padding:.125rem .25rem .125rem .125rem}.chip--icon{border-radius:50%;height:1.25rem;justify-content:center;overflow:hidden;width:1.25rem}.chip--icon,.form-field-label{align-items:center;display:flex}.form-field-label{color:var(--dynamic-text-secondary);cursor:text;font-size:.75rem}.form-field-label__with-divider:after{background:var(--dynamic-base-4);content:"";flex:1;height:1px;margin-left:.75rem;right:0}.step{counter-increment:step;gap:.5rem}.step,.step__icon{align-items:center;display:flex}.step__icon{flex-shrink:0;height:1.25rem;justify-content:center;width:1.25rem}.step__icon--done{background-color:var(--dynamic-success-1);border-radius:50%}.step__icon__check-mark{color:var(--dynamic-base-1);height:1rem;width:1rem}.step__index{align-items:center;border:1px solid var(--dynamic-base-4);border-radius:.625rem;display:flex;height:1.25rem;justify-content:center;min-width:1.25rem;padding:0 .25rem}.step__index-label:before{content:counter(step)}.step__leading{max-width:-moz-fit-content;max-width:fit-content;position:relative}.stepper{counter-reset:step;display:flex;gap:1rem;width:100%}.stepper__divider{flex-grow:1}.modal{left:50%;margin:auto;position:fixed;top:50%;transform:translate(-50%,-50%);width:var(--dynamic-modal-width)}@media (max-width:640px){.modal{bottom:0;max-width:37.5rem;top:auto;transform:translate(-50%);width:100%}}.modal__items{display:flex;flex-direction:column;gap:.75rem}.modal-card{background:var(--dynamic-base-1);border-radius:var(--dynamic-border-radius);box-shadow:var(--dynamic-shadow-down-3);overflow:hidden;width:100%}.modal-card--radius-small{border-radius:calc(var(--dynamic-border-radius)*.75)}.modal-card--with-border{border:1px solid var(--dynamic-base-4)}@media (max-width:640px){.modal-card{bottom:0;max-width:37.5rem;top:auto;transform:translateY(0);width:100%}.modal-card--sharp-mobile-bottom-radius:last-child{border-radius:var(--dynamic-border-radius) var(--dynamic-border-radius) 0 0}}.inline-widget-button{align-items:center;background-color:var(--dynamic-base-1);display:flex;gap:.5rem;min-height:100%;padding:.5rem .75rem;width:-moz-fit-content;width:fit-content}.inline-widget-button:hover{background-color:var(--dynamic-hover)}.inline-widget-button__icon{height:1.25rem;width:1.25rem}.inline-widget-button__vertical-divider{background-color:var(--dynamic-base-3);content:"";height:1rem;width:.0625rem}.inline-widget{align-items:center;background-color:var(--dynamic-base-1);border-radius:calc(var(--dynamic-border-radius)/3);display:flex;justify-content:center;overflow:hidden;width:-moz-fit-content;width:fit-content}.inline-widget>*{border-right:1px solid var(--dynamic-base-3)}.inline-widget>:last-child{border-right:none}.wallet-information-card{background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);display:flex;flex-direction:column}.wallet-information-card__header{border-bottom:1px solid var(--dynamic-base-3);display:flex;gap:.5rem;justify-content:space-between;padding:.75rem}.wallet-information-card__details-container{align-items:center;display:flex;gap:.75rem;justify-content:space-between;min-width:0}.wallet-information-card__menu{flex-shrink:0}.wallet-information-card__icon{height:1.75rem;width:1.75rem}.wallet-information-card__details{display:flex;flex-direction:column;overflow:hidden}.wallet-information-card__balance-container{align-items:center;display:flex;gap:.5rem;justify-content:space-between;padding:.75rem}.social-sign-in{display:flex;flex-wrap:wrap;gap:.375rem;justify-content:space-between}.social-sign-in--tile{flex:1;height:2.5rem}.social-sign-in--tile__full-width{flex:1 0 100%}.social-sign-in--card{display:flex;flex-direction:column;min-height:11.5625rem}.social-sign-in--card--body{display:grid;gap:.375rem;grid-template-columns:auto auto auto auto;padding:.25rem 1.5rem 1.5rem}.social-sign-in--card--tile{height:2.5rem}.sign-typed-data-preview--attribute-row{display:flex;gap:.5rem}.sign-typed-data-preview--fields-list,.sign-typed-data-preview--type-container{display:flex;flex-direction:column;gap:.25rem}.sign-typed-data-preview--type-container{padding-left:1rem}.need-help-section{align-items:center;display:flex;flex-direction:column;gap:.125rem;margin-bottom:.5rem}.need-help-section__links{display:flex;gap:.5rem}.need-help-section__links>*+*{padding-left:.5rem;position:relative}.need-help-section__links>*+:after{border-left:1px solid var(--dynamic-text-secondary);bottom:15%;content:"";left:0;position:absolute;top:15%;width:50%}.need-help-section__helper-link{color:var(--dynamic-text-link)}.textarea__container{position:relative}.textarea__container .textarea__suffix{position:absolute;right:1rem;top:1rem}.textarea__container .textarea{background:var(--dynamic-base-2);border-color:var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)*.4);border-width:.0625rem;color:var(--dynamic-text-primary);font-size:.9375rem;font-weight:400;margin:0;outline:none;resize:none;transition:all .2s ease;width:100%}.textarea__container .textarea:disabled{background:var(--dynamic-base-3);border-color:var(--dynamic-base-4)}.textarea__container .textarea:disabled .textarea__label{color:var(--dynamic-text-tertiary)}.textarea__container .textarea__label{color:var(--dynamic-text-secondary);cursor:text;font-size:.625rem}.textarea__container .textarea:not(.textarea__error):focus,.textarea__container .textarea:not(.textarea__error):hover{background:var(--dynamic-base-2);border-color:var(--dynamic-base-4)}.textarea__container .textarea__error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.textarea__container .textarea__error~.textarea__label,.textarea__container .textarea__error~.textarea__trailing{color:var(--dynamic-error-1)}.textarea__container .textarea__valid{background:var(--dynamic-success-2);border-color:var(--dynamic-success-1)}.textarea__container .textarea__valid~.textarea__label,.textarea__container .textarea__valid~.textarea__trailing{color:var(--dynamic-success-1)}.textarea__container .textarea__has_trailing{padding-right:4rem}.textarea__container .textarea__trailing{color:var(--dynamic-text-secondary);font-size:.75rem;font-weight:500;position:absolute;right:.75rem;top:50%;transform:translateY(-50%)}.textarea__container--dense .textarea{padding:1.125rem .75rem .375rem}.textarea__container--dense .textarea::-moz-placeholder{color:transparent}.textarea__container--dense .textarea::placeholder{color:transparent}.textarea__container--dense .textarea__label{left:.75rem;position:absolute;top:.4375rem;transition:all .2s ease;-webkit-user-select:none;-moz-user-select:none;user-select:none}.textarea__container--dense .textarea:-moz-placeholder-shown~.textarea__label{font-size:.9375rem;top:.75rem}.textarea__container--dense .textarea:placeholder-shown~.textarea__label{font-size:.9375rem;top:.75rem}.textarea__container--dense .textarea:focus~.textarea__label{font-size:.625rem;top:.4375rem}.textarea__container--regular{display:flex;flex-direction:column}.textarea__container--regular .textarea{padding:.75rem}.textarea__container--regular .textarea__label{align-items:center;display:inline-flex;font-size:.75rem;line-height:1rem;margin-bottom:.5rem;order:-1}.textarea__container--regular .textarea__label:after{background:var(--dynamic-base-4);content:"";flex:1;height:1px;margin-left:.75rem;right:0}.textarea__container--regular .textarea__suffix{top:2.375rem}.textarea__message{color:var(--dynamic-text-primary);padding:.5rem 0}.textarea__message__error{color:var(--dynamic-error-1)}input:-webkit-autofill,input:-webkit-autofill:active,input:-webkit-autofill:focus,input:-webkit-autofill:hover,select:-webkit-autofill,select:-webkit-autofill:focus,select:-webkit-autofill:hover,textarea:-webkit-autofill,textarea:-webkit-autofill:focus,textarea:-webkit-autofill:hover{-webkit-text-fill-color:var(--dynamic-text-primary)!important;background:var(--dynamic-base-2);border-color:var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)*.4);border-width:.0625rem;color:var(--dynamic-text-primary)!important;-webkit-transition:background-color 5000s ease-in-out 0s;transition:background-color 5000s ease-in-out 0s}.secure-embedded-wallet-card{background:var(--dynamic-brand-secondary-color);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);color:var(--dynamic-text-primary);display:flex;gap:.625rem;padding:.75rem;transition-duration:var(--dynamic-wallet-list-tile-animation-duration);transition-property:all;transition-timing-function:ease-out;width:100%}.secure-embedded-wallet-card__text-content{align-items:flex-start;cursor:pointer;display:flex;flex-direction:column;flex-grow:1;padding:0;text-align:left}.secure-embedded-wallet-card__text-content,.secure-embedded-wallet-card__text-content:hover{background-color:transparent;box-shadow:none}.secure-embedded-wallet-card__link{line-height:20px;text-decoration:underline}.toggle{-webkit-tap-highlight-color:transparent;cursor:pointer;display:inline-block}.toggle--input{display:none}.toggle--input:checked+.toggle--content__variant-primary{background-color:var(--dynamic-brand-primary-color);color:var(--dynamic-brand-primary-color)}.toggle--input:checked+.toggle--content .toggle--knob{left:1.09375rem}.toggle--input:checked+.toggle--content .toggle--knob>*{opacity:1}.toggle--content{background-color:var(--dynamic-base-3);border-radius:.625rem;height:1.25rem;position:relative;transition:background-color .2s ease;width:2.25rem}.toggle--knob{align-items:center;background-color:#fff;border-radius:100%;display:flex;height:1.0625rem;justify-content:center;left:.09375rem;position:absolute;top:.09375rem;transition:left .2s ease;width:1.0625rem}.toggle--knob>*{opacity:0;transition:opacity .2s ease}.list-tile-animated-trailing{position:relative}.list-tile-animated-trailing__child{position:absolute;right:0;transform:translateY(-50%);transition-duration:.2s;transition-property:opacity,transform;transition-timing-function:ease-in}.list-tile-animated-trailing__hover-element{opacity:0;position:absolute;right:0;transform:translate(-.625rem,-50%);transition-duration:.3s}.list-tile:hover .list-tile-animated-trailing__hover-element{opacity:1;transform:translateY(-50%)}.list-tile:hover .list-tile-animated-trailing__child{opacity:0;transform:translate(-.625rem,-50%)}.wallet-group-view-layout__container{padding:var(--dynamic-layout-content-padding)}.wallet-group-view-layout__icon{height:4rem;margin:0 auto .75rem;width:4rem}.wallet-group-view-layout__list{display:flex;flex-direction:column;gap:.5rem}.wallet-group-view-layout__title{padding-bottom:1rem;text-align:center}.retry-send-verification-code-section{align-items:center;display:flex;flex-direction:column}.retry-send-verification-code-section__confirmation{color:var(--dynamic-success-1);display:flex;gap:.3125rem;padding:.125rem .375rem}.toggle-visibility-button__container{position:relative}.toggle-visibility-button__tooltip{background-color:var(--dynamic-text-primary);color:var(--dynamic-base-2);font-size:.75rem}.qrcode{color:var(--dynamic-base-1);position:relative}.qrcode__container{align-items:center;border-radius:calc(var(--dynamic-border-radius)/1.5);display:flex;height:18.125rem;justify-content:center;margin:auto;width:18.125rem}.qrcode__dot-circle{color:var(--dynamic-text-primary)}.qrcode__icon{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.qrcode-container__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.qrcode-container__container--message{padding:var(--dynamic-layout-content-error-padding)}.qrcode-container__container .button__content{display:flex;gap:.375rem}.qrcode-container__top{align-items:center;background-color:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)*.6);display:flex;flex-direction:column;gap:.625rem;margin-bottom:1.25rem;padding:.75rem}.qrcode-container__top .button-container{align-items:center;display:flex;gap:.5rem;width:100%}.qrcode-container__top .button-container svg path{fill-opacity:100%}.qrcode-container__top .button-container .qr-code-button{height:2.375rem}.qrcode-container__content{max-width:20rem;text-align:center}.qrcode-container__tos{margin-top:1rem;max-width:17.5rem;text-align:center}.qrcode-container__tos .tos__link{color:var(--dynamic-text-link)}.qrcode-container__tos .tos__link:hover{text-decoration:underline}.qr-code-wrapper__scan-issue-message{align-items:center;background:var(--dynamic-base-2);border-bottom:var(--dynamic-button-primary-border);border-radius:0;border-top:var(--dynamic-button-primary-border);color:var(--dynamic-text-primary);display:flex;justify-content:center;padding:.5rem .75rem;text-align:center;width:100%}.qr-code-wrapper__scan-issue-button{color:var(--dynamic-text-link);font-size:.75rem;text-decoration:underline}.radio-button{align-items:center;background-color:var(--dynamic-wallet-list-tile-background);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-wallet-list-tile-shadow);color:var(--dynamic-text-primary);display:flex;gap:.5rem;padding:.75rem;width:100%}.radio-button input{height:1.5rem;width:1.5rem}.mfa-device-skeleton{align-items:center;background-color:var(--dynamic-wallet-list-tile-background);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-wallet-list-tile-shadow);color:var(--dynamic-text-primary);display:flex;flex-direction:row;gap:.625rem;margin-bottom:.625rem;padding:.625rem;width:auto}.mfa-device-skeleton__details{display:flex;flex-direction:column;flex-grow:1;justify-content:space-between;padding-right:.625rem}.phantom-ledger-icon{position:absolute}.phantom-ledger-icon__container{align-items:center;display:flex;height:100%;position:relative}.account-exists__container{align-items:center;background:var(--dynamic-base-1);display:flex;flex-direction:column;padding:.3125rem}.account-exists__main{padding:var(--dynamic-modal-padding)}.account-exists__social-icon{margin:auto}.account-exists__image{padding:.3125rem;width:4.375rem}.account-exists__content{text-align:center}.account-exists__content--primary{margin-bottom:.375rem}.account-exists__content--secondary{margin-bottom:1rem}.account-exists__button--primary{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);box-shadow:var(--dynamic-shadow-down-1);margin:0}.user-data-form__form{display:flex;flex-direction:column}.user-data-form__error{margin-bottom:.625rem}.user-field__checkbox-container{background:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/2);display:flex;flex-direction:column;padding:.625rem}.user-field__checkbox-container--error{background:var(--dynamic-error-2);border-color:var(--dynamic-error-1)}.user-field__consent-checkbox{display:flex;margin-bottom:.5rem}.user-field__consent-checkbox a{color:var(--dynamic-text-link)}.user-field__consent-checkbox:last-child{margin-bottom:0}.user-field__checkbox-label{padding-left:.75rem}.user-field__error-message{color:var(--dynamic-error-1);padding:.25rem}.user-phone-field__optional-label{color:var(--dynamic-text-secondary);font-size:.75rem;font-weight:500;pointer-events:none;position:absolute;right:.75rem;top:50%;transform:translateY(-50%)}.user-data-fields__fields-column{display:flex;flex-direction:column;gap:.375rem;margin-bottom:.5rem;max-height:11.25rem;overflow:auto}.user-data-fields__tooltip{background-color:var(--dynamic-text-primary);color:var(--dynamic-base-2);font-size:.75rem}.collect-user-data::-webkit-scrollbar,.collect-user-data::-webkit-scrollbar-thumb,.collect-user-data::-webkit-scrollbar-track{display:none}.collect-user-data__main-img{width:100%}.collect-user-data__form{padding:var(--dynamic-layout-content-padding)}.collect-user-data__form--error{padding:var(--dynamic-layout-content-error-padding)}.collect-user-data__img-container{align-items:center;display:flex;justify-content:center}.collect-user-data__img{height:1.75rem;width:1.75rem}.collect-user-data__img--rounded{border-radius:9999px}.collect-user-data__wallet-address{margin-left:.5rem}.collect-user-data__success-icon{align-items:center;display:flex;justify-content:center}.collect-user-data__success-icon svg{height:4rem;width:4rem}.collect-user-data__welcome-container{margin:1rem 0;text-align:center}.collect-user-data__welcome-title{margin-bottom:.25rem}.collect-user-data__log-out{margin:.75rem auto 0}.collect-user-data__error--not-supported{align-items:center;border-radius:0;display:flex;justify-content:center;margin:0;width:100%}.collect-user-data__network-picker{margin:auto 0;max-width:-moz-fit-content;max-width:fit-content}.collect-user-data__network-picker-button{border:1px solid var(--dynamic-base-4);position:static;transform:translateX(0)}.collect-user-data__network-picker-button:hover{background:var(--dynamic-hover)}.collect-user-data__network-container{border:var(--dynamic-header-border-bottom);display:flex;justify-content:space-between;padding:var(--dynamic-header-padding);position:relative}.collect-user-data-login-no-wallet::-webkit-scrollbar,.collect-user-data-login-no-wallet::-webkit-scrollbar-thumb,.collect-user-data-login-no-wallet::-webkit-scrollbar-track{display:none}.collect-user-data-login-no-wallet__main-img{width:100%}.collect-user-data-login-no-wallet__user-info-container{align-items:center;border:var(--dynamic-header-border-bottom);display:flex;justify-content:center;padding:var(--dynamic-header-padding)}.collect-user-data-login-no-wallet__user-identification{margin-left:.5rem}.collect-user-data-login-no-wallet__icon-container{height:1.5rem;width:1.5rem}.collect-user-data-login-no-wallet__icon-container .user-profile-social-account__connected-avatar{margin-top:.125rem}.collect-user-data-login-no-wallet__form{padding:var(--dynamic-layout-content-padding)}.collect-user-data-login-no-wallet__success-icon{align-items:center;display:flex;justify-content:center}.collect-user-data-login-no-wallet__success-icon svg{height:4rem;width:4rem}.collect-user-data-login-no-wallet__welcome-container{margin:1rem 0;text-align:center}.collect-user-data-login-no-wallet__welcome-title{margin-bottom:.375rem}.collect-user-data-login-no-wallet__log-out{margin:.75rem auto 0}.email-verification__retry-container{margin:1rem auto 0}.email-verification__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.email-verification__container--error{padding:var(--dynamic-layout-content-error-padding)}.email-verification__icon-with-spinner{margin:0 auto .75rem}.email-verification__error-message{margin:0}.email-verification__error-message,.email-verification__transfer-message{align-items:center;border-radius:0;display:flex;justify-content:center;width:100%}.email-verification__transfer-message{background:var(--dynamic-success-2);color:var(--dynamic-success-1);margin-bottom:.5rem;padding:.5rem .75rem;text-align:center}.email-verification__icon--verified{margin:0 auto 1rem}.email-verification__title{margin-top:.5rem;text-align:center}.email-verification__retry-copy{margin-top:1rem}.email-verification__copy-text-container{margin:0;text-align:center}.email-verification__text-button{color:var(--dynamic-text-link)}.email-verification__text-button:disabled{color:var(--dynamic-text-tertiary);cursor:not-allowed}.email-verification__log-out{margin:.75rem auto 0}.no-qr-code-installed__container{align-items:center;color:var(--dynamic-text-primary);flex-direction:column;margin:-2.25rem 0 0;padding:var(--dynamic-modal-padding);padding-top:0;width:100%}.no-qr-code-installed__container:first-child,.no-qr-code-installed__container:last-child{margin-right:0}.no-qr-code-installed__img{display:flex;height:auto;justify-content:center;margin:auto;text-align:center}.no-qr-code-installed__typography{text-align:center}.no-qr-code-installed__typography--title{margin:1rem 0 .375rem;text-align:center}.no-qr-code-installed__links-section{flex-direction:column;margin:1rem 0}.wallet-help-link__anchor{align-items:center;background:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);color:var(--dynamic-text-primary);display:flex;gap:.625rem;margin-bottom:.5rem;padding:.75rem;position:relative;width:100%}.pending-connect__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.pending-connect__copy-text{color:var(--dynamic-text-secondary);max-width:20rem;text-align:center}.pending-connect__icon-with-spinner{margin:0 auto .75rem}.pending-signature__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.pending-signature__container .pending-signature__icon-with-spinner{margin:0 auto .75rem}.pending-signature__container .pending-signature__copy{color:var(--dynamic-text-secondary);line-height:1.25rem;max-width:20rem;text-align:center}.pending-signature__container .pending-signature__copy--mini{line-height:1rem;margin-top:.25rem}.pending-signature__container .pending-signature__button{box-shadow:var(--dynamic-shadow-down-1);margin-top:.75rem}.social-wrong-account-view__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:0 var(--dynamic-modal-padding) 1.125rem}.social-wrong-account-view__container .social-wrong-account-view__title{color:var(--dynamic-text-primary);line-height:1.5rem}.social-wrong-account-view__container .social-wrong-account-view__copy{color:var(--dynamic-text-secondary);line-height:1.25rem;margin-top:.375rem;max-width:20rem;text-align:center}.social-wrong-account-view__container .social-wrong-account-view__button{box-shadow:var(--dynamic-shadow-down-1);margin-top:.75rem}.social-redirect-view__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-modal-padding)}.social-redirect-view__container .social-redirect-view__title{color:var(--dynamic-text-primary);line-height:2.25rem}.social-redirect-view__container .powered-by-dynamic{margin-top:1.5rem}.sms-verification__text-button{color:var(--dynamic-text-link)}.sms-verification__text-button:disabled{color:var(--dynamic-text-tertiary);cursor:not-allowed}.sms-verification__log-out{margin:.75rem auto 0}.search-instead__container{font-size:.75rem;line-height:1rem;margin-top:2.5rem;padding-bottom:1rem;text-align:center;transition-duration:.3s;transition-property:background-color,border-color,color,fill,stroke;width:100%}.search-instead__container__image{display:flex;justify-content:center;margin:.5rem auto}.wallet-list-item__tile{border-radius:var(--dynamic-wallet-list-tile-border-radius)}.wallet-list-grid-tabs{border-bottom:1px solid var(--dynamic-base-4);border-top:1px solid var(--dynamic-base-4);display:flex;width:100%}.wallet-list-grid-tabs__button{align-items:center;border-left:1px solid var(--dynamic-base-4);display:flex;flex-basis:50%;gap:.25rem;justify-content:center;outline:none;padding:.5rem .625rem}.wallet-list-grid-tabs__button:first-child{border-left:none}.wallet-list-grid-tabs__button--selected{background-color:var(--dynamic-wallet-list-tile-background)}.wallet-list-grid-tabs__button--text{flex-basis:100%}.wallet-list-grid-tabs__icon--selected{filter:grayscale(100%)}.wallet-list__error-container{margin:0}.wallet-list__search-container{padding:var(--dynamic-search-padding)}.wallet-list__tabs-container{margin-bottom:.5rem}.wallet-list__scroll-container{display:flex;flex-direction:column;gap:var(--dynamic-wallet-list-tile-gap);max-height:var(--dynamic-wallet-list-max-height);overflow:auto;padding:var(--dynamic-initial-view-content-padding)}.wallet-list__scroll-container--error{padding:var(--dynamic-layout-content-error-padding)}.wallet-list__scroll-container::-webkit-scrollbar,.wallet-list__scroll-container::-webkit-scrollbar-track{display:none}.wallet-list__scroll-container::-webkit-scrollbar-thumb{display:none}.wallet-list__scroll-container:empty{display:flex}.wallet-list__scroll-container--fixed-height{height:var(--dynamic-wallet-list-max-height)}.wallet-list__search-skeleton{height:2.625rem}.wallet-list__search-skeleton,.wallet-list__tile-skeleton{border-radius:calc(var(--dynamic-border-radius)/2);margin-bottom:.5rem}.wallet-list__tile-skeleton{height:3rem;padding:.75rem}.wallet-list__tiny-footer{background:var(--dynamic-base-1);border-top:.0625rem solid var(--dynamic-base-4);box-shadow:var(--dynamic-shadow-up-1);height:var(--dynamic-border-radius);opacity:1;text-align:center;transition:opacity .15s,visibility .15s;visibility:visible}.wallet-list__tiny-footer--hidden{opacity:0;transition:opacity .15s,visibility .15s;visibility:hidden}.wallet-no-access__container{background:var(--dynamic-base-1)}.wallet-no-access__main{padding:var(--dynamic-modal-padding)}.wallet-no-access__social-info-container{align-items:center;display:flex;justify-content:center;margin-top:1.5rem}.wallet-no-access__waitlist-link{align-items:center;display:flex;gap:8px;justify-content:center}.wallet-no-access__social-icon{margin:auto}.wallet-no-access__image{width:100%}.wallet-no-access__user-info-container{align-items:center;display:flex;flex-direction:column;margin-bottom:1rem}.wallet-no-access__content{text-align:center}.wallet-no-access__content--primary{margin-bottom:.375rem}.wallet-no-access__content--secondary{margin-bottom:1rem}.wallet-no-access__wallet-address{margin-left:.375rem}.wallet-no-access__wallet-address-container{align-items:center;display:flex;justify-content:center}.wallet-no-access__button--primary{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);box-shadow:var(--dynamic-shadow-down-1);margin:0}.wallet-no-access__icon--verified{margin:0 auto 1rem}.wallet-sign-spinner__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.wallet-sign-spinner__copy{color:var(--dynamic-text-secondary);margin:0;text-align:center}.wallet-sign-spinner__button{box-shadow:var(--dynamic-shadow-down-1);margin:.75rem 0 0}.wallet-used-view__container{padding:var(--dynamic-layout-content-padding);text-align:center}.wallet-used-view__icon{display:flex;justify-content:center;margin:0 0 .5rem}.wallet-used-view__icon svg{margin:0 auto}.wallet-used-view__shorten-wallet-address{margin:0 0 1rem}.wallet-used-view__copy{margin:0 0 .75rem}.wallet-used-view__accept-button,.wallet-used-view__footer{margin:0 0 .5rem}.wallet-used-view__logout{background:none;border:none;box-shadow:none;margin:auto}.wallet-used-view__checkbox-label{align-items:center;background-color:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);cursor:pointer;display:flex;gap:.5rem;justify-content:center;margin:1rem auto .5rem;padding:.75rem;text-align:left}.wallet-used-view__checkbox-container{flex-shrink:0}.network-not-supported__content-container{padding:var(--dynamic-layout-content-padding)}.network-not-supported__content-container--error{padding:var(--dynamic-layout-content-error-padding)}.network-not-supported__main-img{width:100%}.network-not-supported__img-container{align-items:center;display:flex;justify-content:center}.network-not-supported__img{border-radius:100%;height:4rem;width:4rem}.network-not-supported__welcome-container{margin:1rem 0;text-align:center}.network-not-supported__welcome-title{margin-bottom:.375rem}.network-not-supported__continue{margin-top:1rem}.network-not-supported__log-out{margin:.75rem auto 0}.network-not-supported__error--not-supported{align-items:center;border-radius:0;display:flex;justify-content:center;margin:0;width:100%}.network-not-supported__network-container{margin-top:.5rem;position:relative}.network-not-supported__network-picker{margin:auto;max-width:-moz-fit-content;max-width:fit-content}.network-not-supported__network-picker-button{position:static;transform:translateX(0)}.email-confirmation-waiting-view{align-items:center;display:flex;flex-direction:column;padding-bottom:1.625rem;text-align:center}.email-confirmation-waiting-view__title{padding-bottom:.375rem}.email-confirmation-waiting-view__email-container{align-items:center;display:flex;gap:.25rem;justify-content:center}.email-confirmation-waiting-view__edit-icon-button{display:inline-flex}.email-confirmation-waiting-view__header-icon{display:flex;justify-content:center;margin-top:-2rem}.email-confirmation-waiting-view__note{max-width:16.25rem;padding-top:1rem;text-align:center}.email-confirmation-waiting-view__powered_by_dynamic_footer{padding-top:1rem;width:100%}.login-with-email-form{display:flex;flex-direction:column;gap:.375rem}.login-with-email-form .input__suffix{top:.6875rem}.login-with-email-form .input__suffix .icon-button{--icon-arrow:var(--dynamic-text-tertiary);--icon-background:var(--dynamic-base-3);transition:all .2s}.login-with-email-form .input__suffix .icon-button path,.login-with-email-form .input__suffix .icon-button rect{transition:all .2s}.login-with-email-form .input__suffix .icon-button--active,.login-with-email-form .input__suffix .icon-button:hover{--icon-arrow:var(--dynamic-text-secondary);--icon-background:var(--dynamic-hover)}.login-with-email-form .input__suffix .icon-button--has-content,.login-with-email-form .input__suffix .icon-button--has-content:hover{--icon-arrow:var(--dynamic-base-2);--icon-background:var(--dynamic-brand-primary-color)}.list-item-button{background:none;box-shadow:none}.list-item-button__trailing{position:relative}.list-item-button__trailing-child{position:absolute;right:0;transition-property:opacity,transform;transition-timing-function:ease-in}.list-item-button__trailing-label{transform:translateY(-50%);transition-duration:.2s}.list-item-button__trailing-icon{transition-duration:.3s}.list-item-button:hover .list-item-button__trailing-label,.list-item-button__trailing-icon{opacity:0;transform:translate(-.625rem,-50%)}.list-item-button:hover .list-item-button__trailing-icon{opacity:1;transform:translateY(-50%)}.login-with-email-wallet-list__skeleton{border-radius:calc(var(--dynamic-border-radius)/2);height:2.625rem;margin-bottom:.5rem}.login-with-email-wallet-list__container{display:flex;flex-direction:column;gap:.375rem}.connect-with-wallet-button{height:2.5rem}.toggleable-section{align-items:stretch;display:flex;flex-direction:column;gap:.75rem}.toggleable-section__toggle-prompt{align-items:center;display:flex;justify-content:space-between}.toggleable-section__toggle-prompt__button{cursor:pointer;margin:-.75rem 0 0 -.75rem;outline:none;padding:.75rem 0 0 .75rem}.toggleable-section__toggle-prompt__button__text{outline:none;transition:all .2s}.toggleable-section__toggle-prompt__button:focus .toggleable-section__toggle-prompt__button__text,.toggleable-section__toggle-prompt__button:focus-visible .toggleable-section__toggle-prompt__button__text,.toggleable-section__toggle-prompt__button:hover .toggleable-section__toggle-prompt__button__text{background-color:var(--dynamic-brand-secondary-color)}.login-with-phone-number-form{display:flex;flex-direction:column;gap:.375rem}.login-with-phone-number-form__fields{align-items:stretch;display:flex;position:relative;width:100%}.login-with-phone-number-form__fields__country-code{align-items:center;background-color:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)*.4) 0 0 calc(var(--dynamic-border-radius)*.4);border-right:none;cursor:pointer;display:flex;padding-left:.75rem;position:relative;transition:all .2s ease;width:6.25rem}.login-with-phone-number-form__fields__country-code--disabled{background-color:var(--dynamic-base-3);pointer-events:none}.login-with-phone-number-form__fields__country-code__flag{margin-right:.5rem}.login-with-phone-number-form__fields__country-code__plus{cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none}.login-with-phone-number-form__fields__country-code__container{align-items:center;display:flex;flex:1;pointer-events:none}.login-with-phone-number-form__fields__country-code__container .login-with-phone-number-form__fields__country-code__container__input{border:none;flex:1;padding:0;width:100%}.login-with-phone-number-form__fields__country-code__chevron{cursor:pointer;position:absolute;right:.5rem;width:1rem}.login-with-phone-number-form__fields__phone-number{align-items:center;display:flex;flex:1;position:relative}.login-with-phone-number-form__fields__phone-number .login-with-phone-number-form__fields__phone-number__input{border-radius:0 calc(var(--dynamic-border-radius)*.4) calc(var(--dynamic-border-radius)*.4) 0;padding-left:.75rem}.login-with-phone-number-form__fields__placeholder{align-self:center;color:var(--dynamic-text-secondary);left:7.0625rem;pointer-events:none;position:absolute;-webkit-user-select:none;-moz-user-select:none;user-select:none}.login-with-phone-number-form__fields__inline-submit{align-self:center;position:absolute;right:.75rem}.login-with-phone-number-form__dropdown{width:calc(var(--dynamic-modal-width) - 3rem)}.login-with-phone-number-form__dropdown__items{display:flex;flex-direction:column}.login-with-phone-number-form__dropdown__items__country{align-items:center;cursor:pointer;display:flex;gap:.375rem;padding:.375rem .75rem}.login-with-phone-number-form__dropdown__items__country__flag{width:1.5rem}.login-with-phone-number-form__dropdown__items__country__name{font-size:var(--dynamic-text-size-body-small)}.login-with-phone-number-form__dropdown__items__country__code{color:var(--dynamic-text-secondary);font-size:var(--dynamic-text-size-body-small)}.login-with-phone-number-form__dropdown__items__country:hover{background-color:var(--dynamic-base-4)}.login-with-phone-number-form__dropdown__items__country--selected{background-color:var(--dynamic-base-3)}.login-with-phone-number-form__error-message{color:var(--dynamic-error-1);padding:.5rem 0}.login-with-phone-number-form input::-webkit-inner-spin-button,.login-with-phone-number-form input::-webkit-outer-spin-button{-webkit-appearance:none;appearance:none;margin:0}.login-with-phone-number-form input[type=number]{-webkit-appearance:textfield;-moz-appearance:textfield;appearance:textfield}.login-view__text{padding:.5rem 0}.login-view__error-container{margin:0}.login-view__container{padding:var(--dynamic-initial-view-content-padding)}.login-view__container--error{padding:var(--dynamic-layout-content-error-padding)}@media (pointer:coarse){.login-view__container{padding:.75rem}}.login-view__scroll{align-items:stretch;gap:.375rem;height:100%;max-height:36.25rem;overflow:auto}.login-view__scroll,.login-view__scroll__section{display:flex;flex-direction:column}.login-view__scroll__section--emailAndPhone+.login-view__scroll__section--social{margin-top:1rem}.login-view__scroll::-webkit-scrollbar,.login-view__scroll::-webkit-scrollbar-track{display:none}.login-view__scroll::-webkit-scrollbar-thumb{display:none}.login-view__scroll:empty{display:flex}.login-view__scroll--full-height{height:100vh}.login-view__scroll--email-first{flex-direction:column-reverse}.login-view__scroll__web2{display:flex;flex-direction:column;gap:.75rem}.captcha-verify-user__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:0 1.5rem 1.5rem;text-align:center}.captcha-verify-user__icon{height:4rem;margin-bottom:1rem;width:4rem}.captcha-verify-user__title{margin-bottom:.375rem}.captcha-verify-user__subtitle{margin-bottom:1rem}.captcha-verify-user__dynamic-logo{margin-top:1rem}.network-not-supported-switch-manual{margin-top:-1.5rem;padding:0 1.5rem 1.5rem}.network-not-supported-switch-manual__img-container{align-items:center;display:flex;justify-content:center;margin-bottom:1rem}.network-not-supported-switch-manual__img{border-radius:100%;height:4rem;width:4rem}.network-not-supported-switch-manual__network-container{position:relative}.network-not-supported-switch-manual__content{text-align:center}.network-not-supported-switch-manual__title{margin:0 0 .375rem}.wallet-group__list{display:flex;flex-direction:column}.wallet-locked-view__error-container{align-items:center;display:flex;justify-content:center}.wallet-locked-view__button-header{margin:.75rem}.wallet-locked-view__button{margin:.75rem auto auto}.wallet-locked-view__icon{margin:auto}.wallet-locked-view__content{padding:0 var(--dynamic-modal-padding) 2.1875rem;text-align:center}@media (pointer:coarse){.wallet-locked-view__content{padding:0 .75rem}}.wallet-locked-view__title{margin-top:.75rem}.wallet-locked-view__log-out{margin:.75rem auto 0}.merge-user-accounts__error{margin-bottom:.75rem;padding:.75rem 1.5rem}.merge-user-accounts__container{display:flex;flex-direction:column;gap:1.5rem;padding:0 1.5rem 1.5rem}@media (pointer:coarse){.merge-user-accounts__container{padding:0 .75rem}}.merge-user-accounts-conflicts__error{margin-bottom:.75rem;padding:.75rem 1.5rem}.merge-user-accounts-conflicts__container{display:flex;flex-direction:column}@media (pointer:coarse){.merge-user-accounts-conflicts__container{padding:0 .75rem}}.merge-user-accounts-conflicts__description{padding:0 1.5rem .75rem}.merge-user-accounts-conflicts__fields{display:flex;flex-direction:column;gap:1rem;max-height:22.5rem;overflow-y:auto;padding:.75rem 1.5rem}.merge-user-accounts-conflicts__fields__item{display:flex;flex-direction:column;gap:.5rem}.merge-user-accounts-conflicts__fields__item__button{padding:.5rem .75rem}.merge-user-accounts-conflicts__buttons{background:var(--dynamic-base-1);box-shadow:0 -8px 48px -8px rgba(109,121,165,.16);display:flex;flex-direction:column;gap:.5rem;padding:.75rem 1.5rem}.merge-user-accounts-with-same-email__container{padding:0 1.5rem 1.5rem}@media (pointer:coarse){.merge-user-accounts-with-same-email__container{padding:0 .75rem}}.merge-user-accounts-with-same-email__accounts{align-items:center;display:flex;justify-content:space-between;margin:-1.5rem auto 1.5rem;max-width:270px;width:100%}.merge-user-accounts-with-same-email__accounts__item{align-items:center;display:flex;flex-direction:column;gap:.625rem;justify-content:center;width:100%}.merge-user-accounts-with-same-email__accounts__item__icon{height:3.5rem;width:3.5rem}.merge-user-accounts-with-same-email__accounts__divider{height:16px;margin-top:-1.5rem;width:16px}.merge-user-accounts-with-same-email__accounts__divider__icon>path{fill:var(--dynamic-text-secondary)}.merge-user-accounts-with-same-email__text{text-align:center}.merge-user-accounts-with-same-email__text__header{color:var(--dynamic-text-primary);margin-bottom:.5rem}.merge-user-accounts-with-same-email__text__body{color:var(--dynamic-text-secondary);margin-bottom:1rem}.merge-user-accounts-with-same-email__text--bold{font-weight:700}.merge-user-accounts-with-same-email__buttons{display:flex;flex-direction:column;gap:.5rem}.merge-user-accounts-with-same-email__buttons__button{width:100%}.wallet-cannot-be-transferred-view__container{padding:var(--dynamic-modal-padding);text-align:center}.wallet-cannot-be-transferred-view__icon{display:flex;justify-content:center;margin:0 0 .5rem}.wallet-cannot-be-transferred-view__icon svg{margin:0 auto}.wallet-cannot-be-transferred-view__shorten-wallet-address{margin:0 0 1rem}.wallet-cannot-be-transferred-view__title{margin:0 0 .375rem}.wallet-cannot-be-transferred-view__copy{margin:0 0 .75rem}.wallet-cannot-be-transferred-view__transfer-alt-wallet-button{margin:0 0 1rem}.wallet-cannot-be-transferred-view__footer{margin:0 0 .5rem}.wallet-cannot-be-transferred-view__cancel{background:none;border:none;box-shadow:none;margin:auto}.user-field-editor__header{align-items:center;display:flex;flex-direction:column;gap:1.25rem;text-align:center}.user-field-editor__header__icon{align-items:center;background-color:var(--dynamic-base-2);border-radius:50%;display:flex;height:4rem;justify-content:center;width:4rem}.user-field-editor__body{align-items:center;display:flex;flex-direction:column;gap:.5rem;margin:0 1.5rem 1.5rem;text-align:center}.user-field-editor__body__subtitle{margin-block:-.375rem .5rem}.user-field-editor__body__form{width:100%}.passkey-intro-view{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.passkey-intro-view__header{display:flex;width:100%}.passkey-intro-view__actions{display:flex;flex-direction:column;gap:.625rem;width:100%}.passkey-intro-view__inline-button{align-items:center;display:inline-flex;gap:.5rem;text-align:left}.passkey-intro-view__inline-button svg path{fill:var(--dynamic-base-2)!important}.passkey-intro-view__log-out{font-size:.875rem;justify-content:center;line-height:20px}.passkey-intro-view__log-out:hover{background-color:transparent}.passkey-intro-view__skip{color:var(--dynamic-text-secondary);font-size:.875rem;justify-content:center;line-height:1rem}.passkey-intro-view__skip:hover{background-color:transparent}.passkey-recovery-view{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.passkey-recovery-view__header{align-items:center;display:flex;justify-content:center;margin-bottom:-5rem;width:12.875rem}.passkey-recovery-view__actions{display:flex;flex-direction:column;gap:.625rem;width:100%}.passkey-recovery-view__input-valid{background:var(--dynamic-success-2)!important;border-color:var(--dynamic-success-1)!important}.passkey-recovery-view__input-valid,.passkey-recovery-view__input-valid~.input__label{color:var(--dynamic-success-1)!important}.passkey-recovery-view__form{display:flex;flex-direction:column;width:100%}.passkey-recovery-view__skip{justify-content:center;margin-top:1.5rem}.passkey-recovery-view__inline-button{align-items:center;display:inline-flex;gap:.5rem;text-align:left}.passkey-recovery-view__inline-button svg path{fill:var(--dynamic-base-2)!important}.passkey-recovery-view__resend-code{align-items:center;display:flex;flex-direction:column}.passkey-recovery-view button.text-button:not(.passkey-recovery-view__skip){color:inherit}.edit-passkeys-widget-view,.edit-passkeys-widget-view__body{display:flex;flex-direction:column}.edit-passkeys-widget-view__body{flex:1;gap:.25rem;justify-content:space-between;margin-top:20px;padding:0 1.5rem 1.5rem}.edit-passkeys-widget-view__icon{height:100px;margin-left:auto;margin-right:auto;margin-top:-40px;width:100px}.edit-passkeys-widget-view__title{margin-left:auto;margin-right:auto;margin-top:20px}.passkey-new-domain-detected{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.passkey-new-domain-detected__header{align-items:center;display:flex;justify-content:center}.passkey-new-domain-detected__actions{display:flex;flex-direction:column;gap:.625rem;width:100%}.passkey-new-domain-detected__inline-button{align-items:center;display:inline-flex;gap:.5rem;text-align:left}.passkey-new-domain-detected__inline-button svg path{fill:var(--dynamic-base-2)!important}.passkey-new-domain-detected__log-out{font-size:.875rem;justify-content:center;line-height:20px}.passkey-new-domain-detected__log-out:hover{background-color:transparent}.embedded-reveal-view{display:flex;flex-direction:column;gap:var(--dynamic-wallet-list-tile-gap);height:100%;overflow:auto}.embedded-reveal-view__header{align-items:center;display:flex;justify-content:center}.embedded-reveal-view__zerodev-warning{background-color:var(--dynamic-error-1);border-radius:.5rem;margin-bottom:1rem;padding:1.25rem}.embedded-reveal-view__zerodev-warning__title-row{align-items:center;display:flex;margin-bottom:.5rem}.embedded-reveal-view__zerodev-warning__icon{flex-shrink:0;height:1.25rem;margin-right:.5rem;width:1.25rem}.embedded-reveal-view__zerodev-warning__link-button{background:none;border:none;cursor:pointer;display:inline;font:inherit;margin-left:.25rem;padding:0}.embedded-reveal-view__zerodev-warning .typography{color:inherit}.embedded-reveal-view__zerodev-warning .typography.underline{text-decoration:underline}.embedded-reveal-view__coinbase{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);color:var(--dynamic-text-secondary);display:flex;flex:1;flex-direction:column;gap:.625rem;max-height:21.875rem;overflow:auto;overflow-wrap:break-word;padding:.75rem}.embedded-reveal-view__body{display:flex;flex:1;flex-direction:column;gap:.75rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.embedded-reveal-view__body__description{display:flex;justify-content:center;text-align:center}.embedded-reveal-view__body__badge{font-size:.75rem}.embedded-reveal-view__body__card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.625rem;max-height:21.875rem;overflow:auto;padding:.75rem}.embedded-reveal-view__body__card__statement{display:flex;gap:.5rem;letter-spacing:-.15px}.embedded-reveal-view__body__card__acknowledgement{display:flex;gap:.5rem;text-align:left}.embedded-reveal-view__body__card__icon{color:var(--dynamic-text-tertiary);height:1.5rem;min-width:1.5rem;width:1.5rem}.embedded-reveal-view__body__card__skeleton{border-radius:.75rem;height:3.75rem}.embedded-reveal-view__body__confirm_card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.75rem;letter-spacing:-.15px;max-height:21.875rem;overflow:auto;padding:1rem}.embedded-reveal-view__body__button{color:#fff}.embedded-auth-choice{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.embedded-auth-choice__header{align-items:center;display:flex;justify-content:center;width:100%}.embedded-auth-choice__skip-button{margin-top:-.25rem}.action-card{background-color:var(--dynamic-base-2);border-radius:.75rem;box-shadow:var(--dynamic-shadow-down-1);display:flex;padding:1rem;text-align:left;transition:all .2s ease}.action-card:hover{box-shadow:var(--dynamic-button-shadow)}.action-card__icon{height:1.75rem;min-width:1.75rem;width:1.75rem}.action-card__icon,.action-card__icon path{fill:var(--dynamic-text-tertiary)}.action-card__action-icon{margin-left:auto;min-width:1rem;transform:rotate(180deg);width:1rem}.action-card__content{display:flex;flex-direction:column;gap:.25rem;margin-left:8px}.action-card__content__row{align-items:flex-start;display:flex;gap:.375rem}.action-card__content__row__badge--primary{background:var(--dynamic-brand-primary-color);color:var(--dynamic-base-2)}.embedded-auth-choice-cards{display:flex;flex-direction:column;gap:.625rem;width:100%}.auth-choice-info{align-items:flex-start;align-self:stretch;background:var(--default-base-2,#fff);border:1px solid var(--default-base-4,#e7e8ed);border-radius:12px;display:flex;flex-direction:column;gap:12px;justify-content:center;padding:16px 12px 12px}.auth-choice-info__container-item{display:flex;flex-direction:row;gap:.5rem;text-align:start}.select-hardware-wallet-view__container{align-items:stretch;display:flex;flex-direction:column;padding:var(--dynamic-layout-content-padding)}.select-hardware-wallet-view__icon{height:6rem;margin:0 auto .75rem;width:4rem}.select-hardware-wallet-view__text{padding-bottom:1rem;text-align:center}.enter-password-view{display:flex;flex-direction:column;gap:var(--dynamic-wallet-list-tile-gap);height:100%;overflow:auto}.enter-password-view__body{display:flex;flex:1;flex-direction:column;gap:.75rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.enter-password-view__body__icon{display:flex;justify-content:center;text-align:center}.enter-password-view__body__description{text-align:center}.enter-password-view__password-input__suffix-icon{color:var(--dynamic-text-tertiary);height:22px;margin-top:-4px;width:22px}.wallet-redirect-view__container{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-modal-padding)}.wallet-redirect-view__container .wallet-redirect-view__title{color:var(--dynamic-text-primary);line-height:2.25rem}.wallet-redirect-view__container .powered-by-dynamic{margin-top:1.5rem}.create-password{display:flex;flex-direction:column;gap:var(--dynamic-wallet-list-tile-gap);height:100%;overflow:auto}.create-password__body{display:flex;flex:1;flex-direction:column;gap:.5rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.create-password__body__header{align-items:center;display:flex;flex-direction:column;gap:1rem;padding:.5rem 0}.create-password__body__card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.3125rem;max-height:21.875rem;overflow:auto;padding:.75rem}.create-password__progress-bar{display:flex;margin:8px 0}.create-password__progress-bar__element{background-color:var(--default-base-4,#e7e8ed);border-radius:24px;height:4px;margin:0 4px;width:100%}.create-password__progress-bar__element__1{background:var(--dynamic-error-1)}.create-password__progress-bar__element__2{background:var(--dynamic-alert-1)}.create-password__progress-bar__element__3{background:var(--dynamic-success-1)}.create-password__password-input__suffix{align-items:center;display:flex;gap:.375rem;margin-top:-.25rem}.create-password__password-input__suffix__icon{color:var(--dynamic-text-tertiary);height:1.375rem;width:1.375rem}.create-password__password-criteria-icon{height:.9375rem;width:.9375rem}.create-password__password-criteria-list{align-items:center;display:flex;gap:.5rem;margin:.125rem 0}.create-password__password-criteria-list__success{color:var(--dynamic-success-1)}.create-password__password-criteria-list__error{color:var(--dynamic-error-1)}.create-password__log-out{margin:0 auto}.save-password-suffix-icon{color:var(--dynamic-text-tertiary);height:22px;margin-top:-4px;width:22px}.save-password-view{display:flex;flex-direction:column;gap:var(--dynamic-wallet-list-tile-gap);height:100%;overflow:auto}.save-password-view__header{align-items:center;display:flex;justify-content:center}.save-password-view__body{display:flex;flex:1;flex-direction:column;gap:.75rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.save-password-view__body__icon{display:flex;justify-content:center;text-align:center}.save-password-view__body__badge{background-color:var(--default-alert-2,#faedd9);color:var(--dynamic-alert-1);font-size:.75rem}.save-password-view__body__description{text-align:center}.save-password-view__body__actions{display:flex;gap:8px;justify-content:space-between}.save-password-view__body__card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.625rem;max-height:21.875rem;overflow:auto;padding:.75rem}.save-password-view__body__card__statement{display:flex;gap:.5rem;letter-spacing:-.15px}.save-password-view__body__card__acknowledgement{display:flex;gap:.5rem;text-align:left}.save-password-view__body__confirm-card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.5rem;letter-spacing:-.15px;max-height:21.875rem;overflow:auto;padding:.625rem}.mpc-claim-intro{display:flex;flex-direction:column;gap:var(--dynamic-wallet-list-tile-gap);height:100%;overflow:auto}.mpc-claim-intro__header{align-items:center;display:flex;justify-content:center}.mpc-claim-intro__body{display:flex;flex:1;flex-direction:column;gap:.75rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.mpc-claim-intro__body__description{display:flex;justify-content:center;text-align:center}.mpc-claim-intro__body__badge{font-size:.75rem}.mpc-claim-intro__body__card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.625rem;max-height:21.875rem;overflow:auto;padding:.75rem}.mpc-claim-intro__body__card__statement{display:flex;gap:.5rem;letter-spacing:-.15px}.mpc-claim-intro__body__card__acknowledgement{display:flex;gap:.5rem;text-align:left}.mpc-claim-intro__body__card__icon{color:var(--dynamic-text-tertiary);height:1.5rem;min-width:1.5rem;width:1.5rem}.mpc-claim-intro__body__card__skeleton{border-radius:.75rem;height:3.75rem}.mpc-claim-intro__body__confirm_card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);display:flex;flex:1;flex-direction:column;gap:.75rem;letter-spacing:-.15px;max-height:21.875rem;overflow:auto;padding:1rem}.mpc-claim-intro__body__button{color:#fff}#dyn-turnkey-export-container-id{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;overflow:auto;padding:.75rem}#dyn-turnkey-export-element-id{word-wrap:break-word;max-height:-moz-min-content;max-height:min-content;width:100%}.mfa-choose-device-view__body{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.mfa-choose-device-view__copy{color:var(--dynamic-text-secondary);line-height:1.25rem;text-align:center;width:75%}.mfa-choose-device-view__button{box-shadow:var(--dynamic-shadow-down-1);display:flex;flex-direction:column;gap:.25rem;margin-top:.75rem;text-align:left}.mfa-choose-device-view__button__header{align-items:center;display:flex;justify-content:space-between;width:100%}.mfa-choose-device-view__button__description.mfa-choose-device-view__button__description{font-size:var(--dynamic-text-size-body-small)}.mfa-choose-device-view__icon--rotate{color:var(--dynamic-text-tertiary);height:1rem;justify-content:end;transform:rotate(180deg);width:1rem}.mfa-choose-device-view__logout{margin-top:1.125rem}.mfa-secure-device-view__body{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:var(--dynamic-layout-content-padding)}.mfa-secure-device-view__copy{color:var(--dynamic-text-secondary);line-height:1.25rem;text-align:center;width:75%}.mfa-secure-device-view__button,.mfa-secure-device-view__logout-button{box-shadow:var(--dynamic-shadow-down-1);margin-top:.75rem}.mfa-secure-device-view__loading-spinner{height:394px}.mfa-secure-device-view__qrcode{align-items:center;background-color:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)*.6);display:flex;flex-direction:column;gap:.625rem;margin:1rem 0;padding:.75rem}.mfa-secure-device-view__qrcode .button-container{display:flex;gap:.5rem;justify-content:center;width:100%}.mfa-secure-device-view__qrcode .button-container svg path{fill-opacity:100%}.mfa-secure-device-view__qrcode .button-container .qr-code-button{height:2.375rem}.mfa-display-backup-codes-view__body{align-items:center;display:flex;flex-direction:column;gap:1rem;justify-content:center;padding:var(--dynamic-layout-content-padding);text-align:center}.mfa-display-backup-codes-view__warning{border-radius:var(--dynamic-border-radius);padding:.25rem .5rem}.mfa-display-backup-codes-view__loading-spinner{height:19.5rem}.mfa-display-backup-codes-view__codes{display:flex;flex-wrap:wrap;gap:.5rem;justify-content:center}.mfa-display-backup-codes-view__code{background-color:var(--dynamic-wallet-list-tile-background);border:var(--dynamic-button-primary-border);border-radius:var(--dynamic-border-radius);color:var(--dynamic-text-secondary);padding:.75rem 1.125rem;text-align:center;width:8.75rem}.mfa-display-backup-codes-view__actions{display:flex;gap:.5rem;width:100%}.mfa-display-backup-codes-view__actions button{border-radius:calc(var(--dynamic-button-border-radius)/1.5)}.mfa-display-backup-codes-view__complete{display:flex;flex-direction:column;gap:.5rem;width:100%}.mfa-display-backup-codes-view__acknowledgement{border-radius:calc(var(--dynamic-button-border-radius)/1.5);justify-content:left}.mfa-display-backup-codes-view__acknowledgement .typography{font-size:var(--dynamic-text-size-button-secondary);font-weight:500}.mfa-recovery-view{align-items:center;display:flex;flex-direction:column;gap:1rem;padding-bottom:1.5rem;padding-left:1.5rem;padding-right:1.5rem;text-align:center}.mfa-recovery-view__body{padding:.3125rem,0}.mfa-recovery-view__actions{display:flex;flex-direction:column;gap:.625rem;width:100%}.mfa-recovery-view__get-help{padding:.3125rem,0}.mfa-verification-view__choose-another-method{display:flex;justify-content:center;margin-bottom:1.5rem;width:100%}.mfa-verification-view__choose-another-method-button{color:var(--dynamic-text-link)}.access-blocked__container{align-items:center;background:var(--dynamic-base-1);display:flex;flex-direction:column;padding:.3125rem}.access-blocked__icon{margin-bottom:.3125rem}.access-blocked__content{margin:.9375rem 0;padding:0 .625rem .625rem;text-align:center}.switch-wallet{white-space:pre-line}.switch-wallet__body{background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);margin-top:.625rem;padding:1rem 0;width:100%}.switch-wallet__body__divider{gap:0;padding:.75rem 0}.switch-wallet__body__divider svg{transform:rotate(90deg)}.switch-wallet__body__expected-address__prompt{margin-bottom:.5rem;margin-top:1rem}.switch-wallet__body__expected-address__address{font-size:1.5rem;line-height:1.25rem}.sync-wallet-view .qr-code-wrapper{padding-top:.5rem}.sync-wallet-view .prompt-modal-portal,.sync-wallet-view .prompt-modal-portal__container{position:relative}.mfa-qrcode-help-content__container{color:var(--dynamic-text-secondary);padding:1.5rem}.mfa-qrcode-help-content__vertical-container{background-color:#fff;border-radius:calc(var(--dynamic-border-radius)/2);display:flex;flex-direction:column}.mfa-qrcode-help-content__setup-container{font-family:Arial,sans-serif;margin:0 auto;max-width:400px;width:100%}.mfa-qrcode-help-content__step{align-items:center;background-color:#fff;border-radius:calc(var(--dynamic-border-radius)/2);color:gray;display:flex;flex-direction:row;height:100%;justify-content:flex-start;margin-bottom:.625rem;max-width:100%;padding:1rem}.mfa-qrcode-help-content__step__title{margin-bottom:.3125rem}.mfa-qrcode-help-content__step__number{align-items:center;align-self:flex-start;background-color:#e3ebff;border-radius:50%;color:#4779ff;display:flex;height:1.5rem;justify-content:center;margin-right:.625rem;min-width:1.5rem;width:1.5rem}.mfa-qrcode-help-content__step__nocopy-box{align-items:center;border:.0625rem solid #e0e0e0;border-radius:.3125rem;display:flex;justify-content:space-between;padding:.625rem}.mfa-qrcode-help-content__step__nocopy-text{word-break:break-all}.mfa-qrcode-help-content__copy-button{background-color:transparent;border:none;cursor:pointer}.sandbox-threshold__main{align-items:center;background:var(--dynamic-base-1);display:flex;flex-direction:column;justify-content:center;padding:0 var(--dynamic-modal-padding) 1.125rem}.sandbox-threshold__title{color:var(--dynamic-text-primary);line-height:1.5rem;text-align:center}.sandbox-threshold__description{color:var(--dynamic-text-secondary);line-height:1.25rem;margin-bottom:1.5rem;margin-top:.75rem;text-align:center}.sandbox-threshold__button{box-shadow:var(--dynamic-shadow-down-1)}.global-wallet-confirm .popup-content .wallet-connection-view{align-items:center;display:flex;flex-direction:column;padding:24px}.global-wallet-confirm .popup-content .wallet-connection-view .dapp-icon{height:64px;margin-bottom:16px;width:64px}.global-wallet-confirm .popup-content .wallet-connection-view .connection-title{color:var(--dynamic-text-primary);margin-bottom:16px;text-align:center}.global-wallet-confirm .popup-content .wallet-connection-view .dapp-url{color:var(--dynamic-text-secondary);margin-bottom:24px;text-align:center}.global-wallet-confirm .popup-content .wallet-connection-view .button-group{display:flex;gap:16px;width:100%}.global-wallet-confirm .popup-content .wallet-connection-view .button-group button{cursor:pointer;flex:1}.global-wallet-confirm .popup-content .wallet-connection-view .button-group button.cancel-button{background-color:var(--dynamic-base-2)}.global-wallet-confirm .popup-content .wallet-connection-view .button-group button.connect-global-button{background-color:#3b82f6;color:#fff}.info-card .wrapper{background:var(--dynamic-base-2);border:1px solid var(--dynamic-border-2);border-radius:16px;display:flex;flex-direction:column;gap:.75rem;padding:1.5rem;text-align:left}.inline-icon-text{display:inline}.inline-icon-text svg{display:inline-block;height:1em;margin:0 .25em;vertical-align:middle;width:1em}.nowrap{align-items:center;display:inline-flex;white-space:nowrap}.learn-more-link{align-items:center;display:flex;justify-content:center;padding:4px;pointer-events:auto;text-decoration:none}.learn-more-link svg{cursor:pointer;height:.5rem;margin-left:.25rem;width:.5rem}.sign-message-confirmation__actions{align-items:center;display:flex;flex-direction:row;gap:.375rem;padding-bottom:1rem;width:100%}.sign-message-confirmation__body{align-items:stretch;display:flex;flex-direction:column;padding:.5rem 1.5rem 1.5rem}.sign-message-confirmation__message-container{align-items:center;background-color:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:var(--dynamic-shadow-down-1);margin-bottom:.5rem;margin-top:.75rem;max-height:18.75rem;overflow-y:scroll;padding:.75rem;width:100%}.sign-message-confirmation__secure-wallet{margin-block:.5rem}.sign-message-confirmation__message{overflow-wrap:break-word;padding-top:.75rem}.sign-message-confirmation__title{text-align:center}.sign-message-confirmation__error{padding-top:.75rem}.bridge-welcome-layout{display:flex;flex-direction:column;gap:.75rem}.bridge-welcome-layout__body{display:flex;flex-direction:column;gap:1.5rem;padding:0 1.5rem 1.5rem}.bridge-welcome-layout__message-container{display:flex;flex-direction:column;gap:.25rem;text-align:center}.bridge-welcome-layout__chain-icon-group{align-items:center;display:flex;flex-direction:row-reverse;padding-top:.875rem}.bridge-welcome-layout__chain-icon{background-color:var(--dynamic-base-1);border-radius:50%;height:4rem;margin-left:-1.375rem;outline:.25rem solid var(--dynamic-base-1);overflow:hidden;width:4rem}.bridge-welcome-layout__chain-icon:last-child{margin-left:0}.select-wallet-list-layout{display:flex;flex-direction:column;min-height:320px}.select-wallet-list-layout__wallet-list{display:flex;flex-direction:column;flex-grow:1;gap:var(--dynamic-wallet-list-tile-gap);max-height:var(--dynamic-wallet-list-max-height);overflow-y:auto;padding:.25rem 1.5rem 1.5rem}.connected-wallets-list-layout{display:flex;flex-direction:column}.connected-wallets-list-layout__body{display:flex;flex-direction:column;gap:1rem;padding:.25rem 1.5rem 1.5rem}.connected-wallets-list-layout__body__text{text-align:center}.bridge-next-wallet-to-connect-layout__chain-icon{height:4rem;margin:1rem 1rem 0;width:4rem}.bridge-next-wallet-to-connect-layout__body{align-items:center;display:flex;flex-direction:column;gap:1.5rem;padding:1rem 1.5rem 1.5rem;text-align:center}.account-control__name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.account-control__icon{min-width:1rem}.account-control__social_icon{height:1rem;width:1rem}.account-control__container{align-items:center;border-radius:calc(var(--dynamic-border-radius)/3);color:var(--dynamic-text-primary);display:flex;gap:.375rem;min-height:100%;padding:.75rem;z-index:10}.account-control__container--multiwallet-disabled{border-bottom-left-radius:0;border-top-left-radius:0}.account-control__container--active,.account-control__container:hover{background-color:var(--dynamic-hover)}.dynamic-widget-inline-controls{background-color:var(--dynamic-base-1);border-radius:calc(var(--dynamic-border-radius)/3);display:flex;font-size:var(--dynamic-text-size-body-small);max-height:2.5rem;min-width:100%;position:relative}.dynamic-widget-inline-controls__network-picker-main{min-width:60px}.dynamic-widget-inline-controls__account-control{max-width:100%;min-width:max(100%,45px)}.dynamic-widget-inline-controls__account-control .account-control__icon{margin-left:auto}.dynamic-widget-inline-controls__account-control-container{min-width:60px;overflow:hidden}.dynamic-widget-inline-controls__network-picker{background:unset;border-bottom-left-radius:calc(var(--dynamic-border-radius)/3);border-bottom-right-radius:unset;border-top-left-radius:calc(var(--dynamic-border-radius)/3);border-top-right-radius:unset;min-width:100%;padding:.75rem;position:unset;transform:unset}.dynamic-widget-inline-controls__network-picker--active,.dynamic-widget-inline-controls__network-picker:hover{background:var(--dynamic-hover)}.dynamic-widget-inline-controls__network-picker-checkbox{margin:0 0 0 .5rem}.dynamic-widget-inline-controls__network-picker-list{top:2.5rem}@media (pointer:coarse){.dynamic-widget-inline-controls__network-picker-list{top:unset}}.dynamic-widget-dropdown{position:absolute;right:0;top:3.0625rem}.dynamic-widget-dropdown__root{min-width:22.5rem}.dynamic-widget-modal{left:50%;margin:0 auto;position:fixed;top:50%;transform:translate(-50%,-50%);width:min(100%,22.5rem)}@media (pointer:coarse){.dynamic-widget-modal{bottom:0;top:unset;transform:translate(-50%);width:100%}}.dynamic-widget-card{background-color:var(--dynamic-base-1);border:.0625rem solid var(--dynamic-base-4);border-radius:var(--dynamic-border-radius);box-shadow:var(--dynamic-shadow-down-3);height:100%;position:relative;transition:max-height .1s linear}@media (pointer:coarse){.dynamic-widget-card{border-bottom-left-radius:0;border-bottom-right-radius:0}}.dynamic-widget-header{padding:1.5rem 1.5rem 0;position:relative}.dynamic-widget-header__switcher{margin:0 0 1rem}.dynamic-widget-header__passkey-success{margin-inline:-1.5rem}.dynamic-widget-wallet-header{position:relative}.dynamic-widget-wallet-header__email{color:var(--dynamic-text-primary);margin:.5rem 0;text-align:center}.dynamic-widget-wallet-header__icon-container{height:4rem;margin:auto;position:relative;width:4rem}.dynamic-widget-wallet-header__icon-container img,.dynamic-widget-wallet-header__icon-container svg{height:100%;width:100%}.dynamic-widget-wallet-header__wallet-info{align-items:center;display:flex;flex-direction:column;justify-content:center;margin:0 0 1rem}.dynamic-widget-wallet-header__wallet-info .text-button{padding:0}.dynamic-widget-wallet-header__wallet-info__secure-wallet{margin-bottom:0;margin-top:1rem}.dynamic-widget-wallet-header__wallet-address{align-items:center;display:flex;justify-content:center}.dynamic-widget-wallet-header__balance{margin-bottom:.0625rem}.dynamic-widget-wallet-header__seperator{background-color:var(--dynamic-base-4);height:.5rem;margin:0 .5rem;width:.0625rem}.dynamic-widget-wallet-header__status-dot{margin-right:.375rem}.dynamic-widget-wallet-header__ens-name{max-width:12.5rem}.dynamic-widget-wallet-header__network-picker.evm-network-control__container{height:1.5rem}.dynamic-widget-wallet-header__network-picker.non-network-switching-supported-control{height:1.5rem;width:1.5rem}.dynamic-widget-wallet-header__network-picker.network-control-skeleton{bottom:0;height:1.5rem;position:absolute;right:0;width:1.5rem}.dynamic-widget-wallet-header__network-picker .evm-network-control__network-name,.dynamic-widget-wallet-header__network-picker .non-network-switching-supported-control__network-name{display:none}.dynamic-widget-wallet-header__wallet-avatar{border-radius:100%;overflow:hidden}.dynamic-widget-wallet-header__wallet-avatar img{height:4rem;width:4rem}.dynamic-widget-wallet-header__wallet-actions{align-items:center;display:flex;gap:.5rem;justify-content:stretch;margin-top:.5rem;width:100%}.dynamic-widget-wallet-header__wallet-loading{margin-bottom:.5rem;margin-top:.5rem;width:100%}.empty-wallet__container{align-items:center;background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);display:flex;flex-direction:column;gap:.75rem;justify-content:center;padding:.5rem;text-align:center;width:100%}.empty-wallet__container--big{margin:0 0 1rem;padding:.75rem}.empty-wallet__icon{height:1.5rem;width:1.5rem}.empty-wallet__icon--big{height:3rem;width:3rem}.empty-wallet__icon>path{fill:var(--dynamic-text-tertiary)}.empty-wallet__text-container{max-width:10rem}.wallet__container{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-3);border-radius:calc(var(--dynamic-border-radius)/2);display:flex;flex-direction:row;padding:.75rem}.wallet__container:not(:last-child){border-bottom-left-radius:0;border-bottom-right-radius:0;margin-bottom:-.75rem;padding-bottom:1.5rem}.wallet__container:hover .wallet__menu{opacity:1}.wallet__menu{color:var(--dynamic-text-tertiary);opacity:0;transition:opacity .15s ease-in-out}@media (pointer:coarse){.wallet__menu{opacity:1}}.wallet__row{align-items:center;display:flex;flex:1}.wallet__row__seperator{background-color:var(--dynamic-base-4);height:.5rem;margin:0 .5rem;width:.0625rem}.wallet__icon-container{margin-right:.375rem}.wallet__ens-name{max-width:9.375rem}.wallet__actions{max-height:0;overflow:hidden;transition:max-height .3s ease-in-out}.wallet__actions__expanded{max-height:6.25rem}.wallet__actions__inner{padding-top:.75rem}.dynamic-widget-footer{border-bottom-left-radius:var(--dynamic-border-radius);border-bottom-right-radius:var(--dynamic-border-radius);border-top:.0625rem solid var(--dynamic-base-4);color:var(--dynamic-text-primary);display:flex;gap:.5rem;margin-top:auto;padding:1rem 1.5rem}.dynamic-widget-footer__button:hover:enabled svg{color:var(--dynamic-text-secondary)}.dynamic-widget-footer__button svg{color:var(--dynamic-text-tertiary)}.dynamic-widget-footer__button-align-right{margin-left:auto}@media (pointer:coarse){.dynamic-widget-footer{border-bottom-left-radius:unset;border-bottom-right-radius:unset}}.wallet-icon-with-status__container{position:relative}.wallet-icon-with-status__dot-container{align-items:center;background-color:var(--dynamic-base-1);border-radius:100%;bottom:0;display:flex;height:.75rem;justify-content:center;position:absolute;right:0;width:.75rem}.wallet-icon-with-status__dot-container .dot{background-color:var(--dynamic-error-1);border-radius:100%;bottom:0;height:.5rem;right:0;width:.5rem}.wallet-icon-with-status__dot-container .dot--green{background-color:var(--dynamic-success-1)}.wallet-icon-with-status__dot-container--secondary{bottom:0;height:.625rem;right:0;transform:translate(25%,25%);width:.625rem}.wallet-icon-with-status__dot-container--secondary .dot{height:.375rem;width:.375rem}.wallet-icon-with-network__container{position:relative}.wallet-icon-with-network__network-container{align-items:center;background-color:var(--dynamic-base-1);border-radius:100%;bottom:-.1875rem;display:flex;height:.75rem;justify-content:center;position:absolute;right:-.1875rem;width:.75rem}.dots-menu-dropdown__container{padding:.375rem 0}.dots-menu-dropdown__item{align-items:center;cursor:pointer;display:flex;font-size:var(--dynamic-text-size-body-small);gap:.5rem;padding:.5rem .75rem;width:100%}.dots-menu-dropdown__item .typography{white-space:nowrap}.dots-menu-dropdown__item__end-slot{position:absolute;right:.75rem}.dots-menu-dropdown__item:hover{background-color:var(--dynamic-hover)}.dots-menu-dropdown__item:hover .typography{color:var(--dynamic-text-primary)}@media (pointer:coarse){.dots-menu-dropdown__item{font-size:var(--dynamic-text-size-body-normal)}}.dots-menu-dropdown__item-text{align-items:center;display:flex;gap:.5rem}@keyframes desktop-dropdown-entering-animation{0%{opacity:0;transform:scale(.8) translateY(0)}70%{transform:scale(1) translateY(0)}to{opacity:1;transform:scale(1) translateY(0)}}@keyframes desktop-dropdown-exiting-animation{0%{opacity:1;transform:scale(1) translateY(0)}25%{opacity:1}50%{transform:scale(1.01) translateY(0)}to{opacity:0;transform:scale(1.02) translateY(1.875rem)}}@keyframes mobile-dropdown-entering-animation{0%{opacity:0;transform:translateY(100%)}to{opacity:1;transform:translateY(0)}}@keyframes mobile-dropdown-exiting-animation{0%{transform:translateY(0)}50%{transform:translateY(0)}to{transform:translateY(200%)}}.dots-menu-wrapper{position:relative}.dots-menu-wrapper__container--entering{animation-fill-mode:both;animation-iteration-count:1;animation-name:desktop-dropdown-entering-animation;animation-timing-function:ease-out}@media (pointer:coarse){.dots-menu-wrapper__container--entering{animation-fill-mode:both;animation-iteration-count:1;animation-name:mobile-dropdown-entering-animation;animation-timing-function:ease-out}}.dots-menu-wrapper__container--exiting{animation-fill-mode:both;animation-iteration-count:1;animation-name:desktop-dropdown-exiting-animation;animation-timing-function:ease-out}@media (pointer:coarse){.dots-menu-wrapper__container--exiting{animation-fill-mode:both;animation-iteration-count:1;animation-name:mobile-dropdown-exiting-animation;animation-timing-function:ease-out}}.dots-menu-wrapper__container{background-color:var(--dynamic-base-2);border:.0625rem solid var(--dynamic-base-4);border-radius:calc(var(--dynamic-border-radius)/3);box-shadow:0 .5rem .75rem -.375rem rgba(24,39,75,.06),0 .5rem .75rem -.1875rem rgba(24,39,75,.06);margin-top:.5rem;position:absolute;right:0;z-index:2147483647}.dots-menu-wrapper__container__alignment__top{bottom:1.375rem}.dots-menu-wrapper__container__alignment__bottom{top:1.375rem}@media (min-width:768px){.dots-menu-wrapper__container{min-width:9.375rem}}@media (pointer:coarse){.dots-menu-wrapper__container{border:none;border-radius:var(--dynamic-border-radius);border-bottom-left-radius:0;border-bottom-right-radius:0;bottom:0;left:calc(50% - 18.75rem);margin:auto;max-width:37.5rem;padding-bottom:2rem;padding-top:0;position:fixed;right:calc(50% - 18.75rem);top:unset;width:100%}}.dots-menu-wrapper__header{display:none;padding:.75rem 1.5rem .25rem}@media (pointer:coarse){.dots-menu-wrapper__header{align-items:center;display:flex;justify-content:space-between}}.dots-menu-wrapper__header__icon{min-height:1.5rem;min-width:1.5rem}.dots-menu-wrapper__backdrop{cursor:default;display:none;height:100%;left:0;position:fixed;top:0;width:100%;z-index:10}@media (pointer:coarse){.dots-menu-wrapper__backdrop{background-color:var(--dynamic-overlay);display:block}}.dynamic-widget-wallets-header{display:flex;flex-direction:row;justify-content:space-between;margin:0 1.5rem}.dynamic-widget-wallets-header__title{margin:0 0 .5rem}.dynamic-widget-wallets-header__add_wallet{display:flex;margin:0 0 .5rem}.dynamic-widget-wallets{margin:0 1.5rem;overflow:auto}.dynamic-widget-wallets__body{display:flex;flex-direction:column;gap:1rem}.dynamic-widget-wallets__body__wallet-list{max-height:13rem}.widget-portal{background-color:var(--dynamic-overlay);top:0;z-index:50}.widget-portal,.widget-portal__container{border-radius:calc(var(--dynamic-border-radius)/1.5);bottom:0;left:0;position:absolute;right:0}.widget-portal__container{background-color:var(--dynamic-base-1);border-top:.0625rem solid var(--dynamic-base-4);padding:1.5rem}@media (pointer:coarse){.widget-portal__container{border-bottom-left-radius:0;border-bottom-right-radius:0}}.widget-portal__container--no-padding{padding:0}.widget-portal__container__header{position:relative}.widget-portal__container__close-button{position:absolute;right:0}.single-wallet-buttons{display:flex;gap:.625rem;padding:0 1.5rem 1.5rem}.single-wallet-buttons--center{align-items:center;display:flex;justify-content:center}.single-wallet-buttons__copied{align-items:center;display:flex;gap:8px}.single-wallet-buttons__copied svg{color:var(--dynamic-success-1)}.email-connector-pending-sign-modal-content{align-items:center;display:flex;flex-direction:column;text-align:center;width:100%}.email-connector-pending-sign-modal-content__body{align-items:center;display:flex;flex-direction:column;gap:.5rem}.active-wallet-information{border-bottom:1px solid var(--dynamic-base-3);display:flex;flex-flow:column;gap:.5rem;padding:.75rem}.active-wallet-information__header{display:flex;gap:.5rem}.active-wallet-information__handle{max-width:80px;overflow:hidden;text-overflow:ellipsis}.active-wallet-information__handle--full-width{max-width:230px;overflow:hidden;text-overflow:ellipsis}.active-wallet-information__dots-menu{color:var(--dynamic-text-tertiary);margin-left:.375rem}.active-wallet-information__dots-menu .icon-with-status__container{margin-bottom:0}.active-wallet-information__dots-menu .icon-with-status__container .status-dot__container{right:-.05rem;top:-.05rem}.active-wallet-information-container{background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2)}.active-wallet-information__details{display:flex;flex:1;gap:.5rem;justify-content:space-between;overflow:hidden}.active-wallet-information__avatar img{height:2rem;min-height:2rem;min-width:2rem;width:2rem}.active-wallet-information__avatar__name-service{align-items:center;border-radius:100%;display:flex;overflow:hidden}.active-wallet-information__addresses-container{display:flex;flex-direction:column;gap:.5rem}.active-wallet-information__addresses-container--centered{justify-content:center}.active-wallet-information__address-container{display:flex}.active-wallet-information__address{align-items:center;display:flex}.active-wallet-information__address-skeleton{width:60px}.active-wallet-information__network-picker{overflow:hidden}.active-wallet-information__network-picker-button{border:1px solid var(--dynamic-base-4);height:100%;position:relative;transform:translateX(0)}.active-wallet-information__network-picker-button:hover{background:var(--dynamic-hover)}.balance-header{justify-content:space-between;padding:1rem .75rem;width:100%}.balance-header,.balance-header__title{align-items:center;display:flex}.balance-header__chevron{rotate:180deg}.balance-header__skeleton{display:table-cell;width:2.5rem}.balance-container{align-items:center;display:flex;justify-content:space-between;padding:1rem .75rem;position:relative}.balance-container__skeleton{display:table-cell;width:2.5rem}.multi-asset-balance-container{align-items:center;position:relative}.multi-asset-balance-container .shadow{border-bottom:1px solid var(--dynamic-base-3)}.multi-asset-balance-container__accordion{overflow-y:auto}.multi-asset-balance-container__accordion--collapsed{max-height:0!important}.multi-asset-balance-container__accordion--expanded{height:100%!important;max-height:11.25rem!important}.prompt-modal{padding:1.5rem}.prompt-modal__header{position:relative;width:100%}.prompt-modal__close-button{position:absolute;right:1rem;top:1rem}.balance-skeleton{display:table-cell;width:1.875rem}.token-balance-item{justify-content:space-between;padding:8px 0;width:100%}.token-balance-item,.token-balance-item__name{align-items:center;display:flex}.token-balance-item__title{max-width:8.4375rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.token-balance-item__icon,.token-balance-item__skeleton-icon{border-radius:100%;height:20px;margin-right:6px;overflow:hidden;width:20px}.token-balance-item__skeleton-icon{background-color:var(--dynamic-base-3)}.token-balance-item__value,.token-balance-item__value__balance{display:flex}.token-balance-list{padding:0 .75rem .75rem}.token-balance-list__empty{align-items:center;display:flex;justify-content:center;padding:.625rem}.token-balance-list__divider{padding:0}.footer-options-switcher__container{background-color:var(--dynamic-base-2);border-bottom-left-radius:var(--dynamic-border-radius);border-bottom-right-radius:var(--dynamic-border-radius);display:flex;justify-content:space-around;margin-top:auto;padding:.75rem 0}.footer-options-switcher__label{font-size:12px;margin-top:.25rem}.footer-options-switcher__tab{align-items:center;color:var(--dynamic-text-secondary);cursor:pointer;display:flex;flex-direction:column;text-align:center}.footer-options-switcher__tab--active{color:var(--dynamic-text-primary)}.dynamic-widget-index-view__email-container{display:flex;flex-direction:column;gap:1rem;text-align:center}.dynamic-widget-index-view__footer{display:flex;justify-content:space-between;width:100%}.dynamic-widget-index-view__user-profile{margin:0 0 1rem;padding:0 1.5rem}.dynamic-widget-index-view__user-profile-title{border-bottom:.0625rem solid var(--dynamic-base-4);margin:0 1.5rem .75rem;padding-bottom:.375rem}.profile-view{flex:1;overflow:auto;padding:0 1.5rem 1.5rem}.profile-view__footer{display:flex;justify-content:space-between;width:100%}.dynamic-widget-edit-profile-view{display:flex;flex:1;flex-direction:column;overflow:hidden}.dynamic-widget-edit-profile-view__fields{flex:1;overflow:auto;padding:0 1.5rem 1rem}.dynamic-widget-edit-profile-view__profile-title{border-bottom:.0625rem solid var(--dynamic-base-4);margin:0 1.5rem .75rem;padding-bottom:.375rem}.send-balance-widget-view{display:flex;flex:1;flex-direction:column;max-width:22.5rem;overflow:auto}.send-balance-widget-view__spinner{align-items:center;display:flex;flex:1;justify-content:center}.passkey-card{background:var(--dynamic-base-2);border:1px solid var(--dynamic-base-4);border-radius:.75rem;box-shadow:0 1px 2px 0 rgba(24,39,75,.04);padding:.75rem;width:100%}.passkey-card__body{display:flex;flex-direction:row;justify-content:space-between}.passkey-card__left{align-items:center;display:flex;gap:.5rem}.passkey-card__info{align-items:center;border-bottom:1px solid var(--dynamic-base-4);gap:.5rem;padding-bottom:.5rem}.passkey-card__info__icon{justify-self:start;width:1.5rem}.passkey-card__info__tooltip{display:none}@media (hover:none),(pointer:coarse){.passkey-card__info__tooltip{background-color:#555;border:1px solid;border-radius:6px;color:#fff;display:block;font-size:12px;opacity:0;padding:3px;position:absolute;transition:opacity .5s;visibility:hidden;width:-moz-fit-content;width:fit-content}.passkey-card__info__tooltip--visible{opacity:1;transition:opacity .3s;visibility:visible}}.passkey-card__date{padding-top:.5rem}.manage-passkeys-widget-view,.manage-passkeys-widget-view__body{display:flex;flex:1;flex-direction:column}.manage-passkeys-widget-view__body{gap:1rem;justify-content:space-between;padding:0 1.5rem 1.5rem}.manage-passkeys-widget-view__body__cards{display:flex;flex:1;flex-direction:column;gap:.5rem;max-height:23.75rem;overflow:auto}.manage-passkeys-widget-view__body__cards__skeleton{border-radius:.75rem;height:3.75rem}.manage-passkeys-widget-view__reveal{display:flex;flex:1;flex-direction:column;gap:.5rem}.manage-passkeys-widget-view__reveal-helper-text{color:var(--dynamic-text-secondary);font-size:.9375rem;line-height:1.25rem}.manage-passkeys-widget-view__reveal-button{border-radius:var(--dynamic-button-border-radius);justify-content:space-between}.manage-passkeys-widget-view__reveal-button__start-slot{align-items:center;display:flex;font-size:.9375rem}.manage-passkeys-widget-view__reveal-button__icon{color:var(--dynamic-text-tertiary);height:1.75rem;margin-right:.5rem}.manage-passkeys-widget-view__reveal-button__icon--rotate{color:var(--dynamic-text-tertiary);height:1rem;justify-content:end;transform:rotate(180deg)}.settings-view{display:flex;flex:1;flex-direction:column;overflow:hidden;padding:1.5rem}.settings-view__logout-button-container{bottom:60px;color:var(--dynamic-text-secondary);width:100%}.settings-view__logout-button-container__button{width:100%}.settings-view__header{align-items:center;display:flex;gap:.5rem}.settings-view__body{display:flex;flex-direction:column;gap:1rem;height:100%;margin-bottom:1.5rem;overflow-y:auto}.settings-view__body__section{display:flex;flex-direction:column;gap:.75rem}.settings-view__body__section__title{color:var(--dynamic-text-secondary);font-size:.9375rem;line-height:1.25rem}.settings-view__body__section__title__info-icon{align-items:center;display:flex;gap:5px}.settings-view__body__section__title__info-icon svg path{fill:var(--dynamic-alert-1)}.settings-view__body__section__button{border-radius:var(--dynamic-button-border-radius);justify-content:space-between}.settings-view__body__section__button__start-slot{align-items:center;display:flex;font-size:.9375rem}.settings-view__body__section__button__badge .badge__container.badge__container__secondary{margin-left:.625rem}.settings-view__body__section__button__icon{color:var(--dynamic-text-tertiary);height:1.75rem!important;margin-right:.625rem;width:1.75rem!important}.settings-view__body__section__button__icon.email{color:transparent}.settings-view__body__section__button__icon__stroke{stroke:var(--dynamic-text-tertiary);height:1.75rem;margin-right:.625rem;width:1.75rem}.settings-view__body__section__button__icon-secondary{color:var(--dynamic-text-tertiary);height:1rem;justify-content:end;width:1rem}.settings-view__body__section__button__icon-secondary--success{color:var(--dynamic-success-1);height:1rem;justify-content:end;width:1rem}.settings-view__body__section__button__icon-secondary--rotate{color:var(--dynamic-text-tertiary);height:1rem;justify-content:end;transform:rotate(180deg);width:1rem}.manage-mfa-widget-view{display:flex;flex:1;flex-direction:column;overflow:hidden}.manage-mfa-widget-view__description-container{background:var(--dynamic-base-4)}.manage-mfa-widget-view__description-container__text{margin:.625rem}.manage-mfa-widget-view__add-mfa-button-container{bottom:60px;padding:.625rem 1.5rem 1.5rem;width:100%}.manage-mfa-widget-view__add-mfa-button-container__button{width:100%}.manage-mfa-widget-view__no-devices{align-items:center;display:flex;flex-direction:column;gap:1rem;height:100%;justify-content:center;padding:1rem}.manage-mfa-widget-view__scroll-container{flex:1;overflow-y:auto;padding:.625rem 1.5rem 1.5rem}.manage-mfa-widget-view__list-tile{align-items:center;background-color:var(--dynamic-wallet-list-tile-background);border:var(--dynamic-wallet-list-tile-border);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-wallet-list-tile-shadow);color:var(--dynamic-text-primary);display:flex;flex-direction:row;gap:.625rem;margin-bottom:.625rem;padding:.625rem;width:auto}.manage-mfa-widget-view__list-tile__icon{height:1.5rem;position:relative;width:1.5rem}.manage-mfa-widget-view__list-tile__details{display:flex;flex-direction:column;flex-grow:1;justify-content:space-between;padding-right:.625rem}.manage-mfa-widget-view__list-tile__details__title{display:flex;flex-direction:row;gap:.25rem}.manage-mfa-widget-view__list-tile__dots-menu{color:var(--dynamic-text-tertiary);margin-left:.375rem}.connect-dapps-view{max-width:400px;padding:1.5rem;position:relative}.connect-dapps-view .header{align-items:center;display:flex;justify-content:space-between;margin-bottom:1rem;position:relative}.connect-dapps-view .header h1{flex-grow:1;margin:0 auto;text-align:center}.connect-dapps-view .header button{background:none;border:none;cursor:pointer;padding:.5rem;position:absolute;top:50%;transform:translateY(-50%)}.connect-dapps-view .header button:first-child{left:0}.connect-dapps-view .header button:last-child{right:0}.connect-dapps-view .scanner-wrapper{aspect-ratio:1/1;height:200px;margin-left:-24px;margin-right:-24px;overflow:hidden;position:relative;width:calc(100% + 48px)}.connect-dapps-view .scanner-wrapper video{height:100%;-o-object-fit:cover;object-fit:cover;width:100%}.connect-dapps-view .scanner-overlay{align-items:center;bottom:0;display:flex;justify-content:center;left:0;pointer-events:none;position:absolute;right:0;top:0}.connect-dapps-view .scanner-frame{border-radius:12px;height:80%;left:50%;position:absolute;top:50%;transform:translate(-50%,-50%);width:60%}.connect-dapps-view .corner{border:4px solid #fff;height:16px;position:absolute;width:16px}.connect-dapps-view .top-left{border-bottom:none;border-right:none;border-top-left-radius:8px;left:-3px;top:-3px}.connect-dapps-view .top-right{border-bottom:none;border-left:none;border-top-right-radius:8px;right:-3px;top:-3px}.connect-dapps-view .bottom-left{border-bottom-left-radius:8px;border-right:none;border-top:none;bottom:-3px;left:-3px}.connect-dapps-view .bottom-right{border-bottom-right-radius:8px;border-left:none;border-top:none;bottom:-3px;right:-3px}.connect-dapps-view .scanner-overlay-content{align-items:center;border-radius:8px;display:flex;flex-direction:column;padding:16px;z-index:1}.connect-dapps-view .scanner-icon{height:20px;margin-bottom:2px;-o-object-fit:contain;object-fit:contain;width:20px}.connect-dapps-view .info-card,.connect-dapps-view .wallet-connect-card{margin-bottom:1rem;position:relative}.connect-dapps-view .wallet-connect-card{align-items:center;display:flex;flex-direction:column}.connect-dapps-view .wallet-connect-card h2{align-self:flex-start;margin-bottom:.5rem;width:100%}.connect-dapps-view .input-group{width:100%}.connect-dapps-view .input-suffix{transform:translateY(-20%)}.connect-dapps-view .banner{border-radius:8px;margin-top:.5rem;padding:6px;text-align:center;width:100%}.connect-dapps-view .banner.success{background-color:var(--dynamic-success-2)}.connect-dapps-view .banner.error{background-color:var(--dynamic-error-2)}.connect-dapps-view .info-card .wrapper{background:var(--dynamic-base-2);border:1px solid var(--dynamic-border-2);border-radius:16px;display:flex;flex-direction:column;padding:1.5rem;text-align:left}.connect-dapps-view .info-card .learn-more-link{align-items:center;display:flex;justify-content:center;padding:4px;pointer-events:auto;text-decoration:none}.connect-dapps-view .info-card .learn-more-link svg{cursor:pointer;height:.5rem;margin-left:.25rem;width:.5rem}.connect-dapps-view .inline-logo-text{align-items:center;display:flex;flex-wrap:nowrap}.connect-dapps-view .inline-logo-text .inline-logo{flex-shrink:0;margin:0 4px}.default-prompt-modal{align-items:center;display:flex;flex-direction:column;text-align:center}.default-prompt-modal__icon-with-spinner{margin:0 auto .75rem}.default-prompt-modal__content{flex-direction:column;width:100%}.default-prompt-modal__button .typography,.default-prompt-modal__content{align-items:center;display:flex;gap:.375rem;justify-content:center}.detected-new-wallet-modal__content{align-items:center;display:flex;flex-direction:column;gap:.75rem;text-align:center}.detected-new-wallet-modal__top-section{align-items:center;display:flex;flex-direction:column;gap:1.125rem;text-align:center}.no-qr-code-not-installed-modal-view{align-items:center;display:flex;flex-direction:column;gap:1rem}.no-qr-code-not-installed-modal-view__links-section{width:100%}.qr-code-modal-view{display:flex;flex-direction:column;gap:.5rem}.qr-code-modal-view__title{text-align:center}.qr-code-modal-view .qrcode__container{height:10.9375rem;width:10.9375rem}.qr-code-modal-view__container{align-items:center;display:flex;justify-content:center}.qr-code-modal-view__wrapper{background:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)*3/4);padding:.5rem}.qr-code-modal-view .info-item{margin-bottom:.75rem}.qr-code-modal-view .info-item__text{font-size:var(--dynamic-text-size-body-small)}.qr-code-modal-view .info-item svg path{fill:var(--dynamic-text-secondary)}.qr-code-modal-view .button__container{flex-direction:column}.qr-code-modal-view .button__container,.qr-code-modal-view .button__container span{align-items:center;display:flex;gap:.375rem}.unlink-wallet-popup__container{align-items:center;display:flex;flex-direction:column;width:100%}.unlink-wallet-popup__button,.unlink-wallet-popup__label,.unlink-wallet-popup__title{text-align:center}.unlink-wallet-popup__title{padding-bottom:.5rem}.unlink-wallet-popup__label{padding-bottom:.5rem;padding-top:.5rem}.unlink-wallet-popup__button{margin-top:.5rem}.unlink-wallet-popup__button--shadow{box-shadow:var(--dynamic-shadow-down-1)}.dynamic-widget__container{z-index:2147483646}.fund-wallet__backdrop{-webkit-backdrop-filter:blur(4px);backdrop-filter:blur(4px);background-color:rgba(0,0,0,.25);inset:0;position:fixed;z-index:2147483645}.fund-wallet__modal-container{align-items:center;display:flex;inset:0;justify-content:center;overflow-y:auto;padding:1rem;position:fixed;z-index:2147483646}@media (pointer:coarse){.fund-wallet__modal-container{padding:0}}.fund-wallet__modal{border-radius:1.5rem;margin:auto;max-width:470px;overflow:hidden;width:100%}@media (pointer:coarse){.fund-wallet__modal{border-bottom-left-radius:0;border-bottom-right-radius:0;margin:initial;margin-top:auto}}.fund-wallet__modal-content{text-align:center}#onramp-iframe{border:none;height:635px;width:100%;z-index:2147483647}.embedded-widget{max-width:100%;width:var(--dynamic-modal-width)}.embedded-widget--background-default,.embedded-widget--background-none{background:none}.dynamic-bridge-user-profile__switcher{margin:0 0 1rem;padding:1.5rem 1.5rem 0}.dynamic-bridge-wallet-card__network{margin:0 0 .5rem}.dynamic-bridge-wallet-card__network,.dynamic-bridge-wallet-card__network-icon,.dynamic-bridge-wallet-card__network-name{display:inline-block;vertical-align:middle}.dynamic-bridge-wallet-card__network-icon{height:1rem;margin-right:.375rem;width:1rem}.dynamic-bridge-widget-empty-card{background-color:var(--dynamic-base-2);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);padding:.75rem;transition:transform .1s linear}.dynamic-bridge-widget-empty-card:active{transform:scale(.98)}.dynamic-bridge-widget-empty-card__icon{display:inline-flex;height:1.75rem;margin-right:.63rem;vertical-align:middle;width:1.75rem}.dynamic-bridge-widget-empty-card__text{overflow:hidden;text-overflow:ellipsis;vertical-align:middle;white-space:nowrap}.dynamic-bridge-widget-wallets-view{display:flex;flex-direction:column;gap:1rem;padding:1.5rem}.dynamic-bridge-widget-wallets-view__logout-button{margin:0 auto}.dynamic-bridge-widget-wallets-view__unlink-button{color:var(--dynamic-text-secondary);margin:auto 0 0 auto}.footer-buttons-item{align-items:center;background:var(--dynamic-base-2);border:0;border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);cursor:pointer;display:flex;padding:.75rem;transition:all .3s;width:100%}.footer-buttons-item__icon--left{margin-right:.625rem}.footer-buttons-item__icon--left img,.footer-buttons-item__icon--left svg{height:1.25rem;width:1.25rem}.new-to-web3-buttons__container{margin-top:1rem}.new-to-web3-buttons__container button{background:var(--dynamic-brand-primary-color);border-radius:calc(var(--dynamic-border-radius)/2);box-shadow:var(--dynamic-shadow-down-1);color:#fff;padding:.75rem;width:100%}.walletlist-help-content__container{color:var(--dynamic-text-secondary);padding:1.5rem}.walletlist-help-content__icon{align-items:center;display:flex;height:3.5rem;justify-content:center;margin:0 auto;width:3.5rem}.walletlist-help-content__typography-wrapper{color:var(--dynamic-text-primary);margin:1rem 0;text-align:center}.walletlist-help-content__typography-wrapper .walletlist-help-content__typography--label{margin-top:.375rem}.walletlist-help-content__buttons-wrapper{display:flex;flex-direction:column;gap:.375rem;margin-top:1rem}.walletlist-help-content__buttons-wrapper button{text-align:left;width:100%}.walletlist-help-content__custodial-wallet-area--title{margin:.75rem 0;text-align:center}.footer-more-info-content__wrapper{display:flex;flex-direction:column;gap:.75rem;padding:1.5rem}.footer-more-info-content__item--phantom-ledger{font-size:.6875rem;margin-bottom:.5rem}.footer-more-info-content__item--phantom-ledger p{margin-bottom:.5rem}.footer-more-info-content__item--phantom-ledger p:last-child,.footer-more-info-content__item:last-child{margin-bottom:0}.back-button{rotate:-90deg}.help-header{border-bottom:1px solid var(--dynamic-base-4)}.passkey-info-help-content__container{color:var(--dynamic-text-secondary);padding:1.5rem}.passkey-info-help-content__typography-wrapper{color:var(--dynamic-text-primary);display:flex;flex-direction:column;gap:1rem;text-align:left}.passkey-info-help-content__wrapper{flex:1}.passkey-info-help-content__details{display:flex;flex-direction:row;gap:1rem}.header__skeleton{width:7.5rem}.header__typography{margin:0;text-align:center}.header__typography img,.header__typography svg{display:inline-block}.header__tooltip{background-color:var(--dynamic-text-primary);color:var(--dynamic-base-2);font-size:.75rem}.header__icon svg{height:1.5rem;width:1.5rem}.tos-and-pp__footer{background:var(--dynamic-footer-background);border-top:var(--dynamic-footer-border-top);bottom:0;padding:var(--dynamic-footer-padding);position:relative;width:100%}.default-footer__footer{background:var(--dynamic-base-1);border-top:.0625rem solid var(--dynamic-base-4);box-shadow:var(--dynamic-shadow-up-1);height:var(--dynamic-border-radius);opacity:1;text-align:center;transition:opacity .15s,visibility .15s;visibility:visible;width:100%}.default-footer__footer--hidden{opacity:0;transition:opacity .15s,visibility .15s;visibility:hidden}.wallet-progress-stepper{padding:.5rem 1rem}.dynamic-user-profile-layout{display:flex;flex-direction:column;height:33.125rem;overflow:hidden}.dynamic-user-profile-layout--unset-max-height{height:unset}input:-webkit-autofill,input:-webkit-autofill:active,input:-webkit-autofill:focus,input:-webkit-autofill:hover{box-shadow:unset!important}.dynamic-modal{display:flex;flex-direction:column-reverse;left:50%;letter-spacing:0;position:absolute}.dynamic-shadow-dom-content{font-family:var(--dynamic-font-family-primary)}';

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/LegacySafariCssOverrides/LegacySafariCssOverrides.js
var import_jsx_runtime153 = __toESM(require_jsx_runtime(), 1);
var LegacySafariCssOverrides = () => (0, import_jsx_runtime153.jsx)("link", { rel: "stylesheet", href: "https://app.dynamic.xyz/assets/legacySafari/styles.css" });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ShadowDOM/utils.js
var import_jsx_runtime154 = __toESM(require_jsx_runtime(), 1);
var import_react193 = __toESM(require_react(), 1);
var isShadowDOMFlagEnabled = () => {
  if (isSSR())
    return false;
  const flag = "shadowDOM.enabled";
  const searchParams = new URLSearchParams(window.location.search);
  if (!searchParams.has(flag)) {
    return true;
  }
  return searchParams.get(flag) === "true";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ShadowDOM/ShadowDOM.js
var ShadowDOMContext = import_react194.default.createContext({});
var useShadowDOMContext = () => import_react194.default.useContext(ShadowDOMContext);
var ShadowDOMStyle = () => (0, import_jsx_runtime155.jsx)("style", { children: css_248z });
var ShadowDOM = ({ mode = "open", id, className, children, dataTestId, zIndex }) => {
  const { shadowDOMEnabled: shadowDOMSetting, cssOverrides } = useInternalDynamicContext();
  const shadowDOMFlag = isShadowDOMFlagEnabled();
  const shadowDOMEnabled = shadowDOMFlag && shadowDOMSetting;
  const [nodeRef, setNodeRef] = (0, import_react194.useState)(null);
  const [shadowRoot, setShadowRoot] = (0, import_react194.useState)();
  const CssOverridesElement = (0, import_react194.useMemo)(() => {
    if (cssOverrides && typeof cssOverrides !== "string") {
      return () => cssOverrides;
    } else if (cssOverrides && typeof cssOverrides === "string") {
      const StyleElement = () => (0, import_jsx_runtime155.jsx)("style", { children: cssOverrides });
      return StyleElement;
    }
    return null;
  }, [cssOverrides]);
  (0, import_react194.useLayoutEffect)(() => {
    if (nodeRef && shadowDOMEnabled) {
      try {
        const root2 = nodeRef.attachShadow({
          mode
        });
        setShadowRoot(root2);
      } catch (e2) {
      }
    }
  }, [shadowDOMEnabled, nodeRef, mode]);
  const shouldRenderStyles = Boolean(Object.keys(css_248z).length);
  if (!shadowDOMEnabled) {
    return (0, import_jsx_runtime155.jsx)(IsBrowser, { children: (0, import_jsx_runtime155.jsxs)("div", { "data-testid": dataTestId, ref: setNodeRef, id, className: classNames("dynamic-shadow-dom", className), style: { zIndex }, children: [children, shouldRenderStyles && (0, import_jsx_runtime155.jsx)(ShadowDOMStyle, {}), isLegacySafari() && (0, import_jsx_runtime155.jsx)(LegacySafariCssOverrides, {}), CssOverridesElement && (0, import_jsx_runtime155.jsx)(CssOverridesElement, {})] }) });
  }
  return (0, import_jsx_runtime155.jsx)(IsBrowser, { children: (0, import_jsx_runtime155.jsx)(ShadowDOMContext.Provider, { value: { shadowRoot }, children: (0, import_jsx_runtime155.jsx)("div", { "data-testid": dataTestId, ref: setNodeRef, id, className: classNames("dynamic-shadow-dom", className), style: { zIndex }, children: shadowRoot && (0, import_react_dom71.createPortal)((0, import_jsx_runtime155.jsxs)("div", { className: "dynamic-shadow-dom-content", children: [children, shouldRenderStyles && (0, import_jsx_runtime155.jsx)(ShadowDOMStyle, {}), isLegacySafari() && (0, import_jsx_runtime155.jsx)(LegacySafariCssOverrides, {}), CssOverridesElement && (0, import_jsx_runtime155.jsx)(CssOverridesElement, {})] }), shadowRoot) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/UserFieldEditorView/UserFieldEditorView.js
var import_jsx_runtime166 = __toESM(require_jsx_runtime(), 1);
var import_react207 = __toESM(require_react(), 1);
var import_react_dom77 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfileForm/UserProfileForm.js
var import_jsx_runtime163 = __toESM(require_jsx_runtime(), 1);
var import_react204 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserDataForm/useUserDataForm.js
var import_react195 = __toESM(require_react(), 1);
var import_jsx_runtime156 = __toESM(require_jsx_runtime(), 1);
var useUserDataForm = ({ onSubmit, onError, userProfile, shouldEnforcePolicies = true, fields }) => {
  var _a;
  const { mockedSDK } = useMockContext();
  const [fetch2, setFetch] = (0, import_react195.useState)(false);
  const { fieldsConfig } = useFields();
  const enforcePolicies = shouldEnforcePolicies && ((_a = fields.find((setting) => setting.name === "policiesConsent")) === null || _a === void 0 ? void 0 : _a.enabled);
  const requiredTitleCase = (name) => `${name.charAt(0).toUpperCase() + name.slice(1)} is required`;
  const formikValidationSchema = (0, import_react195.useMemo)(() => create6().shape(Object.fromEntries(fields.map(({ name, required, type, validationType, validationRules }) => {
    let schema = type === KycFieldType.Custom ? getValueByKey(customFieldValidationMap, validationType) : getValueByKey(fieldsConfig, name).validation;
    if (type === KycFieldType.Custom && validationRules && (validationType === CustomFieldType.Select || validationType === CustomFieldType.Text)) {
      schema = schema;
      if (validationRules.validOptions) {
        schema = schema.oneOf(validationRules.validOptions.map((option) => option.label), "Select a valid option");
      } else if (validationRules.regex) {
        schema = schema.matches(new RegExp(validationRules.regex), "Invalid field format");
      }
    }
    return [
      name,
      required ? schema.required(requiredTitleCase(name)) : schema
    ];
  }))), [fields]);
  const formikInitialValues = (0, import_react195.useMemo)(() => Object.fromEntries(fields.map(({ name, type, validationRules, validationType }) => {
    var _a2, _b, _c, _d;
    const info = userProfile !== null && userProfile !== void 0 ? userProfile : {};
    if (type === KycFieldType.Custom) {
      let defaultValue2 = "";
      if (validationType === CustomFieldType.Select && (validationRules === null || validationRules === void 0 ? void 0 : validationRules.validOptions))
        defaultValue2 = (_a2 = validationRules.validOptions[0].label) !== null && _a2 !== void 0 ? _a2 : "";
      return [
        name,
        (() => {
          var _a3;
          const value = info.metadata ? getValueByKey(info.metadata, name) : void 0;
          return Array.isArray(value) ? value : (_a3 = value === null || value === void 0 ? void 0 : value.toString()) !== null && _a3 !== void 0 ? _a3 : defaultValue2;
        })()
      ];
    }
    const mapNameToDefaultValue = {
      country: countryCodes[0].code,
      policiesConsent: false,
      tShirtSize: tShirtSizes[0],
      team: teamNames[0]
    };
    const defaultValue = (_b = mapNameToDefaultValue[name]) !== null && _b !== void 0 ? _b : "";
    return [name, (_d = (_c = getValueByKey(info, name)) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : defaultValue];
  })) || {}, [fields, userProfile]);
  const onFormSubmit = (0, import_react195.useCallback)((values, formikHelper) => __awaiter(void 0, void 0, void 0, function* () {
    const metadata = {};
    const uniqueMetadata = {};
    if (mockedSDK)
      return;
    try {
      if (!(userProfile === null || userProfile === void 0 ? void 0 : userProfile.environmentId))
        throw new DynamicError("Invalid environment ID");
      setFetch(true);
      let updatedUserFields = values;
      Object.entries(updatedUserFields).forEach(([fieldName, fieldValue]) => {
        const field = fields.find((f) => f.name === fieldName && f.type === KycFieldType.Custom);
        if (field) {
          metadata[fieldName] = fieldValue;
          delete updatedUserFields[fieldName];
          if (field.unique)
            uniqueMetadata[fieldName] = fieldValue;
        }
      });
      if (Object.keys(metadata).length > 0)
        updatedUserFields.metadata = metadata;
      if (enforcePolicies) {
        updatedUserFields = Object.assign(Object.assign({}, updatedUserFields), { policiesConsent: true });
        delete updatedUserFields.policiesConsentArray;
      }
      yield onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(updatedUserFields);
    } catch (e2) {
      logger2.error(e2);
      onError === null || onError === void 0 ? void 0 : onError(e2);
      if (e2 instanceof EmailAlreadyExistsError) {
        formikHelper.setErrors({ email: "Email already exists" });
      } else if (e2 instanceof CustomFieldNotUniqueError) {
        formikHelper.setFormikState((state) => Object.assign(Object.assign({}, state), { errors: Object.fromEntries(Object.entries(uniqueMetadata).map(([customFieldName]) => [
          customFieldName,
          Object.entries(uniqueMetadata).length > 1 ? "One or more fields are already tied to another user" : `${customFieldName} is already tied to another user`
        ])), touched: Object.fromEntries(Object.entries(uniqueMetadata).map(([fieldName]) => [
          fieldName,
          true
        ])), values: Object.assign(Object.assign({}, formikInitialValues), uniqueMetadata) }));
      } else if (e2 instanceof TooManyEmailVerificationsError) {
        formikHelper.setErrors({
          email: "Too many email verification attempts."
        });
      } else if (e2 instanceof UsernameAlreadyExistsError) {
        formikHelper.setErrors({ username: "Username already exists" });
      } else if (e2 instanceof InvalidPhoneNumberError) {
        formikHelper.setErrors({ phoneNumber: e2.message });
      } else {
        formikHelper.setErrors({
          api: "Something went wrong. Please try again."
        });
      }
    } finally {
      setFetch(false);
    }
  }), [
    mockedSDK,
    userProfile === null || userProfile === void 0 ? void 0 : userProfile.environmentId,
    enforcePolicies,
    onSubmit,
    fields,
    onError,
    formikInitialValues
  ]);
  return {
    enforcePolicies,
    fetch: fetch2,
    formikInitialValues,
    formikValidationSchema,
    onFormSubmit
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfileForm/UserProfileForm.js
var import_react_dom75 = __toESM(require_react_dom(), 1);
var import_qrcode73 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/UserDataFields.js
var import_jsx_runtime162 = __toESM(require_jsx_runtime(), 1);
var import_react203 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/UserField/UserField.js
var import_jsx_runtime161 = __toESM(require_jsx_runtime(), 1);
var import_react202 = __toESM(require_react(), 1);
var import_react_dom74 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/UserPhoneField/UserPhoneField.js
var import_jsx_runtime158 = __toESM(require_jsx_runtime(), 1);
var import_react199 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getSupportedCountriesForVerificationFromProjectSettings/getSupportedCountriesForVerificationFromProjectSettings.js
var getSupportedCountriesForVerificationFromProjectSettings = (projectSettings) => {
  var _a, _b;
  const smsProvider = getProviderByType((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [], ProviderEnum.Sms);
  return ((_b = smsProvider === null || smsProvider === void 0 ? void 0 : smsProvider.enabledCountries) !== null && _b !== void 0 ? _b : []).map((country) => country.isoCountryCode.toLowerCase());
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getDefaultCountriesIfEmpty/getDefaultCountriesIfEmpty.js
var defaultCountries = ["us", "ca"];
var getDefaultCountriesIfEmpty = (countries) => countries.length ? countries : defaultCountries;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/UserPhoneField/UserPhoneField.js
var import_react_dom73 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/PhoneNumberField.js
var import_jsx_runtime157 = __toESM(require_jsx_runtime(), 1);
var import_react198 = __toESM(require_react(), 1);
var import_react_dom72 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js
var import_react197 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useThrottle/useThrottle.js
var import_react196 = __toESM(require_react(), 1);
var useThrottle = (callback, delay) => {
  const isThrottled = (0, import_react196.useRef)(false);
  const savedCallback = (0, import_react196.useRef)(callback);
  savedCallback.current = callback;
  return (0, import_react196.useCallback)((...args) => {
    if (!isThrottled.current) {
      savedCallback.current(...args);
      isThrottled.current = true;
      setTimeout(() => isThrottled.current = false, delay);
    }
  }, [delay]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/modulo/modulo.js
var modulo = (number2, target) => (number2 % target + target) % target;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/utils/parseDefaultCountry/parseDefaultCountry.js
var parseDefaultCountry = ({ defaultIso2, countries, initialPhone }) => {
  if (initialPhone) {
    const { country } = X({
      countries,
      phone: initialPhone
    });
    if (country) {
      return country;
    }
  }
  const parsedCountries = countries.map(M);
  const lastUsedCountryIso2 = StorageService.getItem(PHONE_INPUT_DEFAULT_COUNTRY);
  const lastUsedCountry = parsedCountries.find(({ iso2 }) => iso2 === lastUsedCountryIso2);
  if (lastUsedCountry) {
    return lastUsedCountry;
  }
  const defaultCountry = parsedCountries.find(({ iso2 }) => iso2 === defaultIso2);
  if (defaultCountry) {
    return defaultCountry;
  }
  const countryUS = parsedCountries.find(({ iso2 }) => iso2 === "us");
  if (countryUS) {
    return countryUS;
  }
  if (parsedCountries[0]) {
    return parsedCountries[0];
  }
  throw new Error("No country list was provided");
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/usePhoneInputLogic/usePhoneInputLogic.js
var MENU_DISPLAY_THROTTLE = 50;
var COUNTRY_INPUT_SCROLL_DELAY = 20;
var usePhoneInputLogic = ({ countryInputRef, setCountryDropdownOpen, setInvalidNumberMessage, onUpdate, initialPhone, countries, defaultIso2 }) => {
  const onUpdateRef = (0, import_react197.useRef)(onUpdate);
  onUpdateRef.current = onUpdate;
  const defaultCountry = (0, import_react197.useMemo)(() => parseDefaultCountry({
    countries,
    defaultIso2,
    initialPhone
  }), [countries, defaultIso2, initialPhone]);
  const { inputValue: formattedPhone, phone, country: currentCountry, setCountry: setSelectedCountry, handlePhoneValueChange: handlePhoneInput, inputRef } = ee({
    countries,
    defaultCountry: defaultCountry.iso2,
    disableDialCodeAndPrefix: true,
    value: initialPhone
  });
  const [countryInput, setCountryInput] = (0, import_react197.useState)(defaultCountry.dialCode);
  const phoneOrEmptyString = (0, import_react197.useMemo)(() => phone.length === ("+" + currentCountry.dialCode).length ? "" : phone, [currentCountry.dialCode, phone]);
  (0, import_react197.useEffect)(() => {
    var _a;
    (_a = onUpdateRef.current) === null || _a === void 0 ? void 0 : _a.call(onUpdateRef, {
      country: currentCountry,
      formattedPhone,
      phone: phoneOrEmptyString
    });
  }, [currentCountry.iso2, formattedPhone, phoneOrEmptyString]);
  const [filterQuery, setFilterQuery] = (0, import_react197.useState)("");
  const filteredCountries = (0, import_react197.useMemo)(() => {
    if (!filterQuery)
      return countries;
    if (isNaN(parseInt(filterQuery)))
      return countries.filter((countryData) => {
        const { name, iso2 } = M(countryData);
        return name.toLowerCase().includes(filterQuery.toLowerCase()) || iso2 === filterQuery.toLowerCase() || currentCountry.iso2 === iso2;
      });
    return countries.filter((countryData) => {
      const { dialCode, iso2 } = M(countryData);
      return dialCode.includes(filterQuery) || currentCountry.iso2 === iso2;
    });
  }, [countries, currentCountry.iso2, filterQuery]);
  const openDropdown = () => {
    setFilterQuery("");
    setCountryDropdownOpen(true);
  };
  const closeDropdown = (0, import_react197.useCallback)(() => {
    setCountryDropdownOpen(false);
  }, [setCountryDropdownOpen]);
  const lastValidCountry = (0, import_react197.useRef)(defaultCountry);
  const handleCountryInput = ({ target }) => {
    const value = target.value.slice(0, 4);
    setCountryInput(value);
    setFilterQuery(value);
    const { country: guessedCountry } = X({
      countries,
      currentCountryIso2: currentCountry.iso2,
      phone: value
    });
    if (!guessedCountry)
      return;
    lastValidCountry.current = guessedCountry;
    setSelectedCountry(guessedCountry.iso2);
    StorageService.setItem(PHONE_INPUT_DEFAULT_COUNTRY, guessedCountry.iso2);
    setTimeout(() => scrollCountryIntoView(guessedCountry.iso2), COUNTRY_INPUT_SCROLL_DELAY);
  };
  const resetToLastValidCountry = () => {
    if (!lastValidCountry.current || countryInput === lastValidCountry.current.dialCode)
      return;
    setSelectedCountry(lastValidCountry.current.iso2);
    StorageService.setItem(PHONE_INPUT_DEFAULT_COUNTRY, lastValidCountry.current.iso2);
    setCountryInput(lastValidCountry.current.dialCode);
    setInvalidNumberMessage(void 0);
  };
  const handleArrowInput = (0, import_react197.useCallback)((event) => {
    event.preventDefault();
    const currentIndex = filteredCountries.findIndex((countryData) => M(countryData).iso2 === currentCountry.iso2);
    const direction = event.key === "ArrowUp" ? -1 : 1;
    const newCountry = M(filteredCountries[modulo(currentIndex + direction, filteredCountries.length)]);
    scrollCountryIntoView(newCountry.iso2);
    setCountryInput(newCountry.dialCode);
    setSelectedCountry(newCountry.iso2);
    lastValidCountry.current = newCountry;
    StorageService.setItem(PHONE_INPUT_DEFAULT_COUNTRY, newCountry.iso2);
    setInvalidNumberMessage(void 0);
  }, [
    currentCountry.iso2,
    filteredCountries,
    setInvalidNumberMessage,
    setSelectedCountry
  ]);
  const handleEnterInput = (0, import_react197.useCallback)(() => {
    var _a;
    closeDropdown();
    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.select();
  }, [closeDropdown, inputRef]);
  const handleCountryKeyDown = (0, import_react197.useCallback)((event) => {
    if (event.key === "Tab")
      return closeDropdown();
    if (event.key === "ArrowUp" || event.key === "ArrowDown")
      return handleArrowInput(event);
    if (event.key === "Enter")
      return handleEnterInput(event);
  }, [closeDropdown, handleArrowInput, handleEnterInput]);
  const hasInput = (0, import_react197.useMemo)(() => de({
    charAfterDialCode: "+",
    dialCode: currentCountry.dialCode,
    phone
  }).length > 0, [currentCountry.dialCode, phone]);
  const countriesContainer = (0, import_react197.useRef)(null);
  const scrollCountryIntoView = (iso2) => {
    var _a;
    const selectedItem = (_a = countriesContainer.current) === null || _a === void 0 ? void 0 : _a.querySelector("#" + iso2);
    selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.scrollIntoView({
      behavior: "instant",
      block: "center",
      inline: "center"
    });
  };
  const onMenuDisplayToggle = useThrottle((menu) => {
    var _a;
    const wasOpen = Boolean(countriesContainer.current);
    const isOpen = Boolean(menu);
    countriesContainer.current = menu;
    if (wasOpen || !isOpen)
      return;
    (_a = countryInputRef.current) === null || _a === void 0 ? void 0 : _a.select();
    scrollCountryIntoView(currentCountry.iso2);
  }, MENU_DISPLAY_THROTTLE);
  const setCountry = (newCountry) => {
    setCountryInput(newCountry.dialCode);
    setSelectedCountry(newCountry.iso2);
    StorageService.setItem(PHONE_INPUT_DEFAULT_COUNTRY, newCountry.iso2);
    lastValidCountry.current = newCountry;
    setInvalidNumberMessage(void 0);
  };
  const countryFontSize = (0, import_react197.useMemo)(() => {
    if (countryInput.length > 3)
      return "var(--dynamic-text-size-body-mini)";
    if (countryInput.length > 2)
      return "var(--dynamic-text-size-body-small)";
    return "var(--dynamic-text-size-body-normal)";
  }, [countryInput.length]);
  return {
    closeDropdown,
    countryFontSize,
    countryInput,
    currentCountry,
    filteredCountries,
    formattedPhone,
    handleCountryInput,
    handleCountryKeyDown,
    handlePhoneInput,
    hasInput,
    inputRef,
    onBlurCountry: resetToLastValidCountry,
    onFocusCountry: openDropdown,
    onMenuDisplayToggle,
    openDropdown,
    setCountry
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneNumberField/PhoneNumberField.js
var import_qrcode70 = __toESM(require_browser(), 1);
var PhoneNumberField = ({ isLoading, disabled, error, label, onUpdate, appendRight, setIsFocused, setIsHovered, initialPhone, onBlur: onBlur3, countries }) => {
  const { t: t2 } = useTranslation();
  const countryInputRef = (0, import_react198.useRef)(null);
  const [countryDropdownOpen, setCountryDropdownOpen] = (0, import_react198.useState)(false);
  const anchorRef = (0, import_react198.useRef)(null);
  const { defaultPhoneInputIso2 } = useInternalDynamicContext();
  const [invalidNumberMessage, setInvalidNumberMessage] = (0, import_react198.useState)(void 0);
  const { formattedPhone, currentCountry, handleCountryInput, handlePhoneInput, hasInput, inputRef, countryInput, onBlurCountry, filteredCountries, openDropdown, handleCountryKeyDown, closeDropdown, setCountry, onMenuDisplayToggle, onFocusCountry, countryFontSize } = usePhoneInputLogic({
    countries,
    countryInputRef,
    defaultIso2: defaultPhoneInputIso2,
    initialPhone,
    onUpdate,
    setCountryDropdownOpen,
    setInvalidNumberMessage
  });
  return (0, import_jsx_runtime157.jsxs)("div", { className: "phone-number-field", children: [(0, import_jsx_runtime157.jsxs)("div", { className: "phone-number-field__fields", onPointerEnter: () => setIsHovered === null || setIsHovered === void 0 ? void 0 : setIsHovered(true), onPointerLeave: () => setIsHovered === null || setIsHovered === void 0 ? void 0 : setIsHovered(false), onFocus: () => setIsFocused === null || setIsFocused === void 0 ? void 0 : setIsFocused(true), onBlur: (event) => {
    setIsFocused === null || setIsFocused === void 0 ? void 0 : setIsFocused(false);
    onBlur3 === null || onBlur3 === void 0 ? void 0 : onBlur3(event);
  }, ref: anchorRef, children: [(0, import_jsx_runtime157.jsxs)("div", { className: classNames("phone-number-field__fields__country-code", {
    "phone-number-field__fields__country-code--disabled": isLoading || disabled
  }), onClick: openDropdown, "data-testid": "country-code", children: [(0, import_jsx_runtime157.jsx)(q, { iso2: currentCountry.iso2, size: "24px", className: "phone-number-field__fields__country-code__flag" }), (0, import_jsx_runtime157.jsx)(Typography, { className: "phone-number-field__fields__country-code__plus", variant: "body_normal", weight: "regular", style: { fontSize: countryFontSize }, color: "primary", children: "+" }), (0, import_jsx_runtime157.jsx)(Input, { label: "", id: "country_code_field", value: countryInput, onChange: handleCountryInput, disabled: isLoading || disabled, containerClassName: "phone-number-field__fields__country-code__container", className: "phone-number-field__fields__country-code__container__input", onBlur: onBlurCountry, ref: countryInputRef, onKeyDown: handleCountryKeyDown, onFocus: onFocusCountry, style: { fontSize: countryFontSize }, "data-testid": "country-code-input", inputMode: "numeric", autoComplete: "tel-country-code" }), (0, import_jsx_runtime157.jsx)(Icon, { className: "phone-number-field__fields__country-code__chevron", children: (0, import_jsx_runtime157.jsx)(SvgChevronDown, {}) })] }), (0, import_jsx_runtime157.jsx)(Input, { label: "", id: "phoneNumber", value: formattedPhone, onChange: handlePhoneInput, disabled: isLoading || disabled, containerClassName: "phone-number-field__fields__phone-number", className: "phone-number-field__fields__phone-number__input", ref: inputRef, error: Boolean(invalidNumberMessage || error), inputMode: "numeric", "data-testid": "phone_number_input", autoComplete: "tel-national" }), !hasInput && (0, import_jsx_runtime157.jsx)(Typography, { className: "phone-number-field__fields__placeholder", variant: "body_normal", weight: "regular", copykey: "dyn_collect_user_data.fields.phone_number.label", children: label !== null && label !== void 0 ? label : t2("dyn_collect_user_data.fields.phone_number.label") }), appendRight] }), (0, import_jsx_runtime157.jsx)(MenuList, { isOpen: countryDropdownOpen, onClickClose: closeDropdown, popperProps: {
    anchorOrigin: "bottom-left",
    anchorRef
  }, mobileTitle: "Select country", dropdownClassName: "phone-number-field__dropdown", children: (0, import_jsx_runtime157.jsx)("div", { className: "phone-number-field__dropdown__items", ref: onMenuDisplayToggle, children: filteredCountries.map((countryData) => {
    const country = M(countryData);
    const { iso2, name, dialCode } = country;
    const isSelected = iso2 === currentCountry.iso2;
    return (0, import_jsx_runtime157.jsxs)("div", { className: classNames("phone-number-field__dropdown__items__country", {
      "phone-number-field__dropdown__items__country--selected": isSelected
    }), onClick: () => {
      setCountry(country);
      closeDropdown();
    }, id: iso2, children: [(0, import_jsx_runtime157.jsx)(q, { iso2, size: "24px" }), (0, import_jsx_runtime157.jsx)(Typography, { variant: "body_small", color: "primary", children: name }), (0, import_jsx_runtime157.jsx)(Typography, { variant: "body_small", color: "secondary", children: dialCode })] }, iso2);
  }) }) }), Boolean(invalidNumberMessage || error) && (0, import_jsx_runtime157.jsx)(Typography, { variant: "body_mini", className: "phone-number-field__error-message", children: error !== null && error !== void 0 ? error : invalidNumberMessage })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/UserPhoneField/UserPhoneField.js
var import_qrcode71 = __toESM(require_browser(), 1);
var UserPhoneField = ({ onChange, value: phone, onBlur: onBlur3, disabled, label, required, error, name, verify }) => {
  const { selectedPhoneCountry } = useFieldsState();
  const { projectSettings } = useInternalDynamicContext();
  const handleUpdate = ({ country, phone: newPhone }) => {
    selectedPhoneCountry.current = country;
    if (newPhone !== phone)
      onChange({
        target: { name, value: newPhone }
      });
  };
  const countries = (0, import_react199.useMemo)(() => {
    const enabledCountries = getSupportedCountriesForVerificationFromProjectSettings(projectSettings);
    return getCustomCountries(verify ? getDefaultCountriesIfEmpty(enabledCountries) : void 0);
  }, [verify, projectSettings]);
  return (0, import_jsx_runtime158.jsx)(PhoneNumberField, { countries, initialPhone: phone, disabled, onUpdate: handleUpdate, onBlur: onBlur3, label, appendRight: !disabled && !required ? (0, import_jsx_runtime158.jsx)(Typography, { variant: "body_small", color: "secondary", className: "user-phone-field__optional-label", children: "Optional" }) : void 0, error });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/utils/getDisplayErrorMessage/getDisplayErrorMessage.js
var getDisplayErrorMessage2 = (fieldName, error) => {
  var _a;
  if (!error)
    return;
  const mapErrorToTemplate = {
    required: (fieldName2) => `${fieldName2} is required`
  };
  return ((_a = mapErrorToTemplate[error]) === null || _a === void 0 ? void 0 : _a.call(mapErrorToTemplate, fieldName)) || error;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Checkbox/Checkbox.js
var import_jsx_runtime159 = __toESM(require_jsx_runtime(), 1);
var import_react200 = __toESM(require_react(), 1);
var Checkbox = ({ ariaLabel, checked, className = "", defaultChecked, disabled, id, name, onChange, value }) => (0, import_jsx_runtime159.jsxs)("div", { className: classNames("checkbox__container", className), children: [(0, import_jsx_runtime159.jsx)("input", { type: "checkbox", id, "aria-label": ariaLabel, "aria-checked": checked, className: "checkbox--hidden", value, checked, name, disabled, defaultChecked, onChange: (e2) => Boolean(onChange) && (onChange === null || onChange === void 0 ? void 0 : onChange(e2, e2.currentTarget.value)), "data-testid": "input-checkbox" }), (0, import_jsx_runtime159.jsx)("div", { className: "checkbox--visible", children: (0, import_jsx_runtime159.jsx)(SvgCheck, { className: "checkbox__icon" }) })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/UserField/UserField.js
var import_qrcode72 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Select/Select.js
var import_jsx_runtime160 = __toESM(require_jsx_runtime(), 1);
var import_react201 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/arrow-down.js
var React33 = __toESM(require_react(), 1);
var _path15;
var _excluded19 = ["title", "titleId"];
function _extends26() {
  _extends26 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends26.apply(this, arguments);
}
function _objectWithoutProperties19(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose22(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose22(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgArrowDown = function SvgArrowDown2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties19(_ref2, _excluded19);
  return React33.createElement("svg", _extends26({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React33.createElement("title", {
    id: titleId
  }, title2) : null, _path15 || (_path15 = React33.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M6.862 9.529c.26-.26.682-.26.943 0L12 13.724l4.195-4.195a.667.667 0 1 1 .943.942l-4.667 4.667a.667.667 0 0 1-.942 0l-4.667-4.667a.667.667 0 0 1 0-.942Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Select/utils/getDisplayValue/getDisplayValue.js
var getDisplayValue = (element) => {
  if (!element)
    return;
  const { selectedIndex } = element;
  if (selectedIndex === void 0)
    return;
  const option = element.options[selectedIndex];
  if (!option.hasAttribute("value"))
    return;
  return option.text;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Select/Select.js
var Select = (_a) => {
  var { children, className = "", id, label, value, error = false, selectDataTestId, message } = _a, selectProps = __rest(_a, ["children", "className", "id", "label", "value", "error", "selectDataTestId", "message"]);
  const selectRef = (0, import_react201.useRef)(null);
  const [displayValue, setDisplayValue] = (0, import_react201.useState)();
  (0, import_react201.useLayoutEffect)(() => {
    if (!value)
      return;
    const selectElement = selectRef.current;
    setDisplayValue(getDisplayValue(selectElement));
  }, [value, setDisplayValue]);
  return (0, import_jsx_runtime160.jsxs)("div", { className: "select__field", children: [(0, import_jsx_runtime160.jsxs)("div", { className: classNames(className, "select__container"), children: [(0, import_jsx_runtime160.jsxs)("label", { className: classNames("select__body", {
    select__error: error,
    select__has_value: Boolean(displayValue)
  }), htmlFor: id, children: [(0, import_jsx_runtime160.jsx)("span", { className: "select__value", children: displayValue || (0, import_jsx_runtime160.jsx)("span", { children: " " }) }), (0, import_jsx_runtime160.jsx)("span", { className: "select__label", children: label }), (0, import_jsx_runtime160.jsx)("div", { className: "select__control_icon", children: (0, import_jsx_runtime160.jsx)(Icon, { size: "medium", children: (0, import_jsx_runtime160.jsx)(SvgArrowDown, {}) }) })] }), (0, import_jsx_runtime160.jsx)("select", Object.assign({}, selectProps, { "data-testid": selectDataTestId, ref: selectRef, id, value, placeholder: label, className: "select", children }))] }), message && (0, import_jsx_runtime160.jsx)(Typography, { className: classNames("select__message", {
    select__message__error: error
  }), variant: "body_mini", children: message })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/UserField/UserField.js
var renderSelectField = ({ key, name, label, type, options: options2, disabled, dataTestId }, { errors, touched }) => (0, import_jsx_runtime161.jsx)(Field, { copykey: key, as: Select, type, id: name, name, label, error: Boolean(errors[name] && touched[name]), selectDataTestId: dataTestId, message: touched[name] && getDisplayErrorMessage2(label, errors[name]), disabled, children: options2.map((option) => typeof option === "string" ? (0, import_jsx_runtime161.jsx)("option", { value: option, children: option }, option) : (0, import_jsx_runtime161.jsx)("option", { value: option.value, children: option.label }, option.value)) }, name);
var renderCheckboxGroup = (key, name, label, validationRules, errors, touched, disabled) => (0, import_jsx_runtime161.jsxs)("div", { children: [(0, import_jsx_runtime161.jsx)("div", { role: "group", "aria-labelledby": "checkbox-group", className: `user-field__checkbox-container ${errors[name] && touched[name] ? "user-field__checkbox-container--error" : ""}`, children: (validationRules === null || validationRules === void 0 ? void 0 : validationRules.checkboxText) && (0, import_jsx_runtime161.jsxs)("div", { className: "user-field__consent-checkbox", children: [(0, import_jsx_runtime161.jsx)(Field, { as: Checkbox, id: key, name, type: "checkbox", value: "0", disabled, selectDataTestId: "customFieldCheckbox" }, key), (0, import_jsx_runtime161.jsx)("label", { htmlFor: key, className: "user-field__checkbox-label", children: (0, import_jsx_runtime161.jsx)(Typography, { variant: "body_small", color: "secondary", children: validationRules.checkboxText }) })] }, key) }, "customConsentGroup"), touched[name] && getDisplayErrorMessage2(label, errors[name]) && (0, import_jsx_runtime161.jsx)(Typography, { variant: "body_mini", className: "user-field__error-message", children: `${name.charAt(0).toUpperCase() + name.slice(1)} is required` })] });
var renderPoliciesConsentGroup = (key, policiesConsentInnerComponentArray, disabled) => (0, import_jsx_runtime161.jsx)("div", { role: "group", "aria-labelledby": "checkbox-group", className: "user-field__checkbox-container", children: policiesConsentInnerComponentArray === null || policiesConsentInnerComponentArray === void 0 ? void 0 : policiesConsentInnerComponentArray.map((component, index) => (0, import_jsx_runtime161.jsxs)("div", { className: "user-field__consent-checkbox", children: [(0, import_jsx_runtime161.jsx)(Field, { copykey: key, as: Checkbox, id: `policiesConsent_${index}`, name: "policiesConsentArray", type: "checkbox", value: `${index}`, disabled }, `policiesConsent_${index}`), (0, import_jsx_runtime161.jsx)("label", { htmlFor: `policiesConsent_${index}`, className: "user-field__checkbox-label", children: (0, import_jsx_runtime161.jsx)(Typography, { variant: "body_small", color: "secondary", children: component }) })] }, `policiesConsent_${index}`)) }, "policiesConsentGroup");
var UserField = ({ fieldData: { validationRules, isCustom, key, label: defaultLabel, type, autoComplete }, fieldSettings: { enabled, name, required, verify, label = defaultLabel }, errors, touched, disabled, policiesConsentInnerComponentArray }) => {
  if (isCustom) {
    if (type === CustomFieldType.Select && (validationRules === null || validationRules === void 0 ? void 0 : validationRules.validOptions)) {
      const options2 = validationRules.validOptions.map((opt) => opt.label);
      return renderSelectField({
        dataTestId: "customFieldSelect",
        disabled,
        key,
        label,
        name,
        options: options2,
        type
      }, { errors, touched });
    } else if (type === CustomFieldType.Checkbox) {
      return renderCheckboxGroup(key, name, label, validationRules, errors, touched, disabled);
    }
  }
  switch (name) {
    case "tShirtSize":
      return renderSelectField({
        dataTestId: "tShirtSizeSelect",
        disabled,
        key,
        label,
        name,
        options: tShirtSizes,
        type
      }, { errors, touched });
    case "team":
      return renderSelectField({
        dataTestId: "teamSelect",
        disabled,
        key,
        label,
        name,
        options: teamNames,
        type
      }, { errors, touched });
    case "country":
      return renderSelectField({
        dataTestId: "countrySelect",
        disabled,
        key,
        label,
        name,
        options: countryCodes.map((countryCode) => ({
          label: countryCode.name,
          value: countryCode.code
        })),
        type
      }, { errors, touched });
    case "policiesConsent":
      return renderPoliciesConsentGroup(key, policiesConsentInnerComponentArray, disabled);
    case "phoneNumber":
      return (0, import_jsx_runtime161.jsx)(Field, { name, as: UserPhoneField, disabled, label, required, error: touched[name] && errors[name] ? getDisplayErrorMessage2(label, errors[name]) : void 0, verify, autoComplete }, name);
    default:
      return (0, import_jsx_runtime161.jsx)(Field, { copykey: key, disabled, as: Input, type, id: name, name, label, optional: enabled && !required, error: errors[name] && touched[name], message: touched[name] && getDisplayErrorMessage2(label, errors[name]), autoComplete }, name);
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/UserDataFields/UserDataFields.js
var getTooltipMessageKeyForField = ({ enabled, name, lockForVerification }) => {
  if (name === "email" && !enabled)
    return "dyn_collect_user_data.update_email_tooltip";
  if (name === "phoneNumber" && !enabled)
    return "dyn_collect_user_data.update_phone_number_tooltip";
  if (lockForVerification)
    return "dyn_collect_user_data.lock_editing_multiple_verified_fields";
  return void 0;
};
var UserDataFields = ({ errors, policiesConsentInnerComponentArray, fields, touched, currentValues: currentValues2, disableEditingMultipleFieldsWithVerification, initialValues }) => {
  const { fieldsConfig } = useFields();
  const { t: t2 } = useTranslation();
  const changedFieldsWithVerification = (0, import_react203.useMemo)(() => initialValues && currentValues2 && fields ? fields.filter((field) => field.verify && initialValues[field.name] !== currentValues2[field.name]).map((field) => field.name) : [], [currentValues2, fields, initialValues]);
  return (0, import_jsx_runtime162.jsx)("div", { className: "user-data-fields__fields-column", children: fields === null || fields === void 0 ? void 0 : fields.map((fieldSettings) => {
    const { enabled, name, verify } = fieldSettings;
    const lockForVerification = disableEditingMultipleFieldsWithVerification && verify && changedFieldsWithVerification.length > 0 && !changedFieldsWithVerification.includes(name);
    const disabled = !enabled || lockForVerification;
    const tooltipCopyKey = getTooltipMessageKeyForField({
      enabled,
      lockForVerification,
      name
    });
    let fieldConfig;
    if (fieldSettings.type !== KycFieldType.Custom) {
      fieldConfig = fieldsConfig[name];
    } else {
      fieldConfig = {
        isCustom: true,
        key: fieldSettings.name,
        label: fieldSettings.name,
        type: fieldSettings.validationType,
        validation: customFieldValidationMap[fieldSettings.validationType],
        validationRules: fieldSettings.validationRules
      };
    }
    const userField = (0, import_jsx_runtime162.jsx)(UserField, { disabled: Boolean(disabled), errors, fieldData: fieldConfig, fieldSettings, touched, policiesConsentInnerComponentArray }, fieldConfig.key);
    if (tooltipCopyKey)
      return (0, import_jsx_runtime162.jsx)(Tooltip, { content: t2(tooltipCopyKey), className: "user-data-fields__tooltip", copykey: tooltipCopyKey, children: userField }, fieldConfig.key + "__tooltip");
    return userField;
  }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfileForm/UserProfileForm.js
var UserProfileForm = ({ filterFields: filterFields2, formClassName, fieldsContainerStyle, onEditProfileSubmit, onEditProfileCancel, options: options2 = {
  buttonsAsFooter: true,
  cancelText: "Cancel",
  shouldEnforcePolicies: false,
  submitText: "Save"
} }) => {
  const { projectSettings, user } = useInternalDynamicContext();
  const targetFields = (0, import_react204.useMemo)(() => {
    const allUserFields = getUserProfileFields({
      customFields: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.customFields,
      projectSettingsKyc: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.kyc,
      user
    });
    if (!filterFields2)
      return allUserFields;
    return allUserFields.filter(({ name }) => filterFields2.includes(name));
  }, [filterFields2, projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.customFields, projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.kyc, user]);
  const { fetch: fetch2, formikInitialValues, formikValidationSchema, onFormSubmit } = useUserDataForm({
    fields: targetFields,
    onSubmit: onEditProfileSubmit,
    shouldEnforcePolicies: options2.shouldEnforcePolicies,
    userProfile: user
  });
  const makeButtonsContent = (isSubmitting, isValid, dirty) => (0, import_jsx_runtime163.jsxs)(import_jsx_runtime163.Fragment, { children: [!options2.hideCancelButton && (0, import_jsx_runtime163.jsx)(TypographyButton, Object.assign({ disabled: fetch2, expanded: true, buttonPadding: "medium", buttonVariant: "secondary", type: "button", typographyProps: { variant: "button_secondary" }, onClick: onEditProfileCancel, dataTestId: "cancel-button" }, options2.cancelButtonProps, { children: options2.cancelText })), (0, import_jsx_runtime163.jsx)(TypographyButton, Object.assign({ buttonClassName: "dynamic-widget-footer__button", disabled: fetch2 || !isValid || !dirty, expanded: true, type: "submit", buttonPadding: "medium", typographyProps: { variant: "button_secondary" }, loading: isSubmitting, startSlot: (0, import_jsx_runtime163.jsx)(SvgCheck, {}), dataTestId: "submit-button" }, options2.submitButtonProps, { children: options2.submitText }))] });
  return (0, import_jsx_runtime163.jsx)(Formik, { onSubmit: onFormSubmit, initialValues: formikInitialValues, validationSchema: formikValidationSchema, validateOnChange: true, children: ({ errors, touched, isSubmitting, isValid, dirty, values }) => (0, import_jsx_runtime163.jsxs)(Form, { className: classNames("dynamic-widget-edit-profile-view", formClassName), "data-testid": "editUserProfileForm", children: [(0, import_jsx_runtime163.jsx)("div", { className: "dynamic-widget-edit-profile-view__fields", style: fieldsContainerStyle, children: (0, import_jsx_runtime163.jsx)(UserDataFields, { errors, fields: targetFields, touched, currentValues: values, initialValues: formikInitialValues, disableEditingMultipleFieldsWithVerification: true }) }), options2.buttonsAsFooter ? (0, import_jsx_runtime163.jsx)(DynamicWidgetFooter, { children: makeButtonsContent(isSubmitting, isValid, dirty) }) : makeButtonsContent(isSubmitting, isValid, dirty)] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/UserFieldEditorView/useAssignDefaultValues/useAssignDefaultValues.js
var import_react205 = __toESM(require_react(), 1);
var import_jsx_runtime164 = __toESM(require_jsx_runtime(), 1);
var import_react_dom76 = __toESM(require_react_dom(), 1);
var import_qrcode74 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/splitCamelCase/splitCamelCase.js
var splitCamelCase = (text) => text.replace(/([a-z])([A-Z])/g, "$1 $2");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/UserFieldEditorView/useAssignDefaultValues/useAssignDefaultValues.js
var useAssignDefaultValues = (texts, fields) => {
  const { appName, user } = useInternalDynamicContext();
  const appDisplay = appName ? `${appName} ` : "";
  if (!texts.submitText)
    texts.submitText = "Update";
  if (fields.length !== 1) {
    if (!texts.title)
      texts.title = "Update your info";
    if (!texts.subtitle)
      texts.subtitle = `Fill out your info for your ${appDisplay}account`;
    return texts;
  }
  const [field] = fields;
  const fieldDisplay = splitCamelCase(field).toLowerCase();
  const titleAction = (user === null || user === void 0 ? void 0 : user[field]) ? "Update" : "Enter";
  if (!texts.title)
    texts.title = `${titleAction} your ${fieldDisplay}`;
  if (!texts.subtitle)
    texts.subtitle = `Add your ${fieldDisplay} to your ${appDisplay}account`;
  return texts;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/UserFieldEditorView/UserFieldsToIcon/UserFieldsToIcon.js
var import_jsx_runtime165 = __toESM(require_jsx_runtime(), 1);
var import_react206 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/at.js
var React34 = __toESM(require_react(), 1);
var _path16;
var _excluded20 = ["title", "titleId"];
function _extends27() {
  _extends27 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends27.apply(this, arguments);
}
function _objectWithoutProperties20(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose23(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose23(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgAt = function SvgAt2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties20(_ref2, _excluded20);
  return React34.createElement("svg", _extends27({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React34.createElement("title", {
    id: titleId
  }, title2) : null, _path16 || (_path16 = React34.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 4a8 8 0 1 0 4 14.928 1 1 0 1 1 1 1.732A9.96 9.96 0 0 1 11.942 22C6.446 21.968 2 17.503 2 12 2 6.477 6.477 2 12 2s10 4.477 10 10v1.5a3.5 3.5 0 0 1-6.396 1.966A5 5 0 1 1 17 12v1.5a1.5 1.5 0 0 0 3 0V12a8 8 0 0 0-8-8Zm3 8a3 3 0 1 0-6 0 3 3 0 0 0 6 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/justified-text.js
var React35 = __toESM(require_react(), 1);
var _path17;
var _excluded21 = ["title", "titleId"];
function _extends28() {
  _extends28 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends28.apply(this, arguments);
}
function _objectWithoutProperties21(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose24(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose24(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgJustifiedText = function SvgJustifiedText2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties21(_ref2, _excluded21);
  return React35.createElement("svg", _extends28({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React35.createElement("title", {
    id: titleId
  }, title2) : null, _path17 || (_path17 = React35.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M3 6a1 1 0 0 1 1-1h16a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1Zm0 6a1 1 0 0 1 1-1h16a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1Zm0 6a1 1 0 0 1 1-1h7a1 1 0 1 1 0 2H4a1 1 0 0 1-1-1Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/location.js
var React36 = __toESM(require_react(), 1);
var _path18;
var _excluded22 = ["title", "titleId"];
function _extends29() {
  _extends29 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends29.apply(this, arguments);
}
function _objectWithoutProperties22(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose25(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose25(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgLocation = function SvgLocation2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties22(_ref2, _excluded22);
  return React36.createElement("svg", _extends29({
    width: 32,
    height: 32,
    viewBox: "0 0 32 32",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React36.createElement("title", {
    id: titleId
  }, title2) : null, _path18 || (_path18 = React36.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M22.6 8.067a9.333 9.333 0 0 0-13.2 13.2l5.658 5.657c.52.52 1.363.52 1.884 0l5.658-5.658a9.333 9.333 0 0 0 0-13.199ZM7.515 6.181c4.686-4.686 12.284-4.686 16.97 0 4.687 4.687 4.687 12.285 0 16.97l-4.67 4.67c-.041.042.019-.018-.023.024l-.964.964a3.998 3.998 0 0 1-5.655 0l-5.658-5.657c-4.687-4.686-4.687-12.284 0-16.97ZM16 12a2.667 2.667 0 1 0 0 5.333A2.667 2.667 0 0 0 16 12Zm-5.333 2.667a5.333 5.333 0 1 1 10.666 0 5.333 5.333 0 0 1-10.666 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/mail.js
var React37 = __toESM(require_react(), 1);
var _path19;
var _excluded23 = ["title", "titleId"];
function _extends30() {
  _extends30 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends30.apply(this, arguments);
}
function _objectWithoutProperties23(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose26(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose26(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgMail = function SvgMail2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties23(_ref2, _excluded23);
  return React37.createElement("svg", _extends30({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React37.createElement("title", {
    id: titleId
  }, title2) : null, _path19 || (_path19 = React37.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2 7a3 3 0 0 1 3-3h14a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V7Zm2 2.869V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9.869l-6.336 4.223a3 3 0 0 1-3.328 0L4 9.87Zm16-2.404-7.445 4.963a1 1 0 0 1-1.11 0L4 7.465V7a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v.465Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/phone.js
var React38 = __toESM(require_react(), 1);
var _path20;
var _excluded24 = ["title", "titleId"];
function _extends31() {
  _extends31 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends31.apply(this, arguments);
}
function _objectWithoutProperties24(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose27(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose27(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgPhone = function SvgPhone2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties24(_ref2, _excluded24);
  return React38.createElement("svg", _extends31({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React38.createElement("title", {
    id: titleId
  }, title2) : null, _path20 || (_path20 = React38.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5 5a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3v14a3 3 0 0 1-3 3H8a3 3 0 0 1-3-3V5Zm3-1a1 1 0 0 0-1 1v14a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1H8Zm3 14a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H12a1 1 0 0 1-1-1Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/size-labels.js
var React39 = __toESM(require_react(), 1);
var _path21;
var _excluded25 = ["title", "titleId"];
function _extends32() {
  _extends32 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends32.apply(this, arguments);
}
function _objectWithoutProperties25(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose28(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose28(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSizeLabels = function SvgSizeLabels2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties25(_ref2, _excluded25);
  return React39.createElement("svg", _extends32({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React39.createElement("title", {
    id: titleId
  }, title2) : null, _path21 || (_path21 = React39.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2 5a3 3 0 0 1 3-3h4a3 3 0 0 1 3 2.93 3 3 0 0 1 4.192.05l2.829 2.828A3 3 0 0 1 19.069 12 3 3 0 0 1 22 15v4a3 3 0 0 1-3 3H7a5 5 0 0 1-5-5V5Zm9.071 15H19a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-1.929l-6 6Zm4.878-7.707h.001l1.657-1.657a1 1 0 0 0 0-1.414l-2.829-2.829a1 1 0 0 0-1.414 0L12 7.757v8.486l3.95-3.95ZM9.123 19.12A2.99 2.99 0 0 0 10 17V5a1 1 0 0 0-1-1H5a1 1 0 0 0-1 1v12a3 3 0 0 0 5.123 2.12ZM6 17a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/user-card.js
var React40 = __toESM(require_react(), 1);
var _path23;
var _excluded26 = ["title", "titleId"];
function _extends33() {
  _extends33 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends33.apply(this, arguments);
}
function _objectWithoutProperties26(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose29(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose29(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgUserCard = function SvgUserCard2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties26(_ref2, _excluded26);
  return React40.createElement("svg", _extends33({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React40.createElement("title", {
    id: titleId
  }, title2) : null, _path23 || (_path23 = React40.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9 5a3 3 0 1 1 6 0h4a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V8a3 3 0 0 1 3-3h4Zm.17 2H5a1 1 0 0 0-1 1v9a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V8a1 1 0 0 0-1-1h-4.17a3.001 3.001 0 0 1-5.66 0ZM12 4a1 1 0 0 0-1 1v1a1 1 0 1 0 2 0V5a1 1 0 0 0-1-1Zm-3 7a1 1 0 1 0 0 2 1 1 0 0 0 0-2Zm2.4 2.8a3 3 0 1 0-4.8 0 4.01 4.01 0 0 0-1.372 1.867 1 1 0 1 0 1.885.666 2.001 2.001 0 0 1 3.773 0 1 1 0 1 0 1.886-.666A4.01 4.01 0 0 0 11.4 13.8ZM14 11a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2h-3a1 1 0 0 1-1-1Zm0 4a1 1 0 0 1 1-1h2a1 1 0 1 1 0 2h-2a1 1 0 0 1-1-1Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/user.js
var React41 = __toESM(require_react(), 1);
var _path24;
var _excluded27 = ["title", "titleId"];
function _extends34() {
  _extends34 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends34.apply(this, arguments);
}
function _objectWithoutProperties27(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose30(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose30(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgUser = function SvgUser2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties27(_ref2, _excluded27);
  return React41.createElement("svg", _extends34({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React41.createElement("title", {
    id: titleId
  }, title2) : null, _path24 || (_path24 = React41.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 4a8 8 0 0 0-6.598 12.526A14.943 14.943 0 0 1 12 15c2.366 0 4.606.548 6.598 1.526A8 8 0 0 0 12 4Zm7.654 14.436A9.96 9.96 0 0 0 22 12c0-5.523-4.477-10-10-10S2 6.477 2 12a9.96 9.96 0 0 0 2.37 6.464A9.978 9.978 0 0 0 12 22a9.978 9.978 0 0 0 7.654-3.564ZM17.2 18.08A12.954 12.954 0 0 0 12 17c-1.85 0-3.607.386-5.199 1.08A7.968 7.968 0 0 0 12 20c1.985 0 3.8-.723 5.199-1.92ZM12 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-4 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/work-suitcase.js
var React42 = __toESM(require_react(), 1);
var _path25;
var _excluded28 = ["title", "titleId"];
function _extends35() {
  _extends35 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends35.apply(this, arguments);
}
function _objectWithoutProperties28(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose31(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose31(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgWorkSuitcase = function SvgWorkSuitcase2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties28(_ref2, _excluded28);
  return React42.createElement("svg", _extends35({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React42.createElement("title", {
    id: titleId
  }, title2) : null, _path25 || (_path25 = React42.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M7 4a3 3 0 0 1 3-3h4a3 3 0 0 1 3 3v1h2a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3V8a3 3 0 0 1 3-3h2V4ZM5 7a1 1 0 0 0-1 1v4.57A22.95 22.95 0 0 0 12 14c2.815 0 5.51-.505 8-1.43V8a1 1 0 0 0-1-1H5Zm10-2H9V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1Zm5 9.692A24.971 24.971 0 0 1 12 16c-2.796 0-5.487-.46-8-1.308V18a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-3.308ZM11 12a1 1 0 0 1 1-1h.01a1 1 0 1 1 0 2H12a1 1 0 0 1-1-1Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/UserFieldEditorView/UserFieldsToIcon/UserFieldsToIcon.js
var mapFieldToIcon = {
  alias: SvgUser,
  country: SvgLocation,
  email: SvgMail,
  firstName: SvgUserCard,
  jobTitle: SvgWorkSuitcase,
  lastName: SvgUserCard,
  phoneNumber: SvgPhone,
  tShirtSize: SvgSizeLabels,
  username: SvgAt
};
var UserFieldsToIcon = ({ fields, className }) => {
  const Icon2 = fields.length === 1 ? mapFieldToIcon[fields[0]] : void 0;
  if (!Icon2)
    return (0, import_jsx_runtime165.jsx)(SvgJustifiedText, { className });
  return (0, import_jsx_runtime165.jsx)(Icon2, { className });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/UserFieldEditorView/UserFieldEditorView.js
var import_qrcode75 = __toESM(require_browser(), 1);
var UserFieldEditorView = ({ onClickClose, onSubmit, fields, submitText, subtitle, title: title2 }) => {
  ({ submitText, subtitle, title: title2 } = useAssignDefaultValues({ submitText, subtitle, title: title2 }, fields));
  const closeButton = onClickClose && (0, import_jsx_runtime166.jsx)(IconButton, { type: "button", onClick: onClickClose, "data-testid": "close-button", children: (0, import_jsx_runtime166.jsx)(SvgClose, {}) });
  return (0, import_jsx_runtime166.jsxs)(import_jsx_runtime166.Fragment, { children: [(0, import_jsx_runtime166.jsx)(ModalHeader, { alignContent: "bottom", trailing: closeButton, children: (0, import_jsx_runtime166.jsxs)("div", { className: "user-field-editor__header", children: [(0, import_jsx_runtime166.jsx)("div", { className: "user-field-editor__header__icon", children: (0, import_jsx_runtime166.jsx)(Icon, { color: "brand-primary", size: "large", children: (0, import_jsx_runtime166.jsx)(UserFieldsToIcon, { fields }) }) }), title2 && (0, import_jsx_runtime166.jsx)(Typography, { variant: "title", color: "primary", children: title2 })] }) }), (0, import_jsx_runtime166.jsxs)("div", { className: "user-field-editor__body", children: [subtitle && (0, import_jsx_runtime166.jsx)(Typography, { className: "user-field-editor__body__subtitle", variant: "body_normal", color: "secondary", children: subtitle }), (0, import_jsx_runtime166.jsx)(UserProfileForm, { filterFields: fields, onEditProfileSubmit: onSubmit, formClassName: "user-field-editor__body__form", fieldsContainerStyle: { padding: 0 }, options: {
    buttonsAsFooter: false,
    hideCancelButton: true,
    submitButtonProps: {
      buttonPadding: "large",
      startSlot: void 0,
      typographyProps: { variant: "button_primary" }
    },
    submitText
  } })] }), (0, import_jsx_runtime166.jsx)(PoweredByDynamic, { asFooter: true })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/UserFieldEditorModal/UserFieldEditorModal.js
var import_qrcode76 = __toESM(require_browser(), 1);
var UserFieldEditorModal = (_a) => {
  var { onCancel, onSubmit, fields } = _a, textOptions = __rest(_a, ["onCancel", "onSubmit", "fields"]);
  const [show, setShow] = (0, import_react208.useState)(true);
  const alreadyResolved = (0, import_react208.useRef)(false);
  const handleOnModalUnmount = (0, import_react208.useCallback)(() => {
    if (!alreadyResolved.current)
      onCancel("User cancelled");
    alreadyResolved.current = true;
  }, [onCancel]);
  const onAccept = (newValues) => __awaiter(void 0, void 0, void 0, function* () {
    return onSubmit(newValues).then(() => {
      alreadyResolved.current = true;
      setShow(false);
    });
  });
  const cancelAndClose = () => setShow(false);
  return (0, import_jsx_runtime167.jsx)(Portal, { handleClose: cancelAndClose, isShown: show, zIndex: authModalZIndex, withBackdrop: true, elementId: "dynamic-edit-user-field", transitionEvents: {
    onUnmount: handleOnModalUnmount
  }, children: (0, import_jsx_runtime167.jsx)(Modal, { children: (0, import_jsx_runtime167.jsx)(ModalCard, { children: (0, import_jsx_runtime167.jsx)(UserFieldEditorView, Object.assign({ onSubmit: onAccept, onClickClose: cancelAndClose, fields }, textOptions)) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/UserFieldEditorContext/UserFieldEditorContext.js
var import_react_dom79 = __toESM(require_react_dom(), 1);
var import_qrcode77 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/DynamicBaseWidget/DynamicBaseWidget.js
var import_jsx_runtime168 = __toESM(require_jsx_runtime(), 1);
var DynamicBaseWidget = ({ children, shadowDOMProps }) => (0, import_jsx_runtime168.jsx)(ShadowDOM, Object.assign({}, shadowDOMProps, { children: (0, import_jsx_runtime168.jsx)(PopperProvider, { children }) }));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/UserFieldEditorContext/UserFieldEditorContext.js
var UserFieldEditorContext = (0, import_react209.createContext)(void 0);
var UserFieldEditorContextProvider = ({ children }) => {
  const { modal, open } = useConfirmationModal({
    elementId: "dynamic-edit-user-field"
  });
  const openUserFieldEditor = (0, import_react209.useCallback)((modalProps, applyChanges) => __awaiter(void 0, void 0, void 0, function* () {
    return open((resolve, reject) => {
      const onSubmit = (fields) => applyChanges(fields).then((result) => resolve({ fields, updateUserResult: result }));
      return (0, import_jsx_runtime169.jsx)(DynamicBaseWidget, { children: (0, import_jsx_runtime169.jsx)(UserFieldEditorModal, { fields: modalProps.fields, submitText: modalProps.submitText, title: modalProps.title, subtitle: modalProps.subtitle, onCancel: reject, onSubmit }) });
    });
  }), [open]);
  return (0, import_jsx_runtime169.jsxs)(UserFieldEditorContext.Provider, { value: { open: openUserFieldEditor }, children: [modal, children] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/AccordionItem/AccordionItem.js
var import_qrcode78 = __toESM(require_browser(), 1);
var AccordionItem = (0, import_react210.forwardRef)(({ children, className = "", isOpen, dataTestId, dimOnHide = false, handleScroll = () => {
} }, ref) => {
  const childRef = (0, import_react210.useRef)(null);
  const lastValidChildHeight = (0, import_react210.useRef)();
  const [childEntry] = useResizeObserver(childRef);
  const maxHeight = (0, import_react210.useMemo)(() => {
    if (!isOpen)
      return 0;
    if (!childEntry)
      return lastValidChildHeight.current;
    return childEntry.height;
  }, [isOpen, childEntry]);
  (0, import_react210.useEffect)(() => {
    const childHeight = childEntry === null || childEntry === void 0 ? void 0 : childEntry.height;
    if (childHeight) {
      lastValidChildHeight.current = childHeight;
    }
  }, [childEntry]);
  return (0, import_jsx_runtime170.jsxs)("div", { "data-testid": dataTestId, style: { maxHeight }, className: classNames(className, "accordion-item", {
    "accordion-item--full-height": Boolean(maxHeight)
  }), onScroll: handleScroll, ref, children: [dimOnHide && (0, import_jsx_runtime170.jsx)("div", { "data-testid": "accordion-item-curtain", className: classNames("accordion-item__curtain", {
    "accordion-item__curtain--dimmed": !isOpen
  }) }), (0, import_jsx_runtime170.jsx)("div", { ref: childRef, children })] });
});
AccordionItem.displayName = "AccordionItem";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/MockContext/MockContext.js
var import_react_dom101 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/DynamicAuthModal/DynamicAuthModal.js
var import_jsx_runtime202 = __toESM(require_jsx_runtime(), 1);
var import_react234 = __toESM(require_react(), 1);
var import_react_dom100 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/DynamicAuthLayout.js
var import_jsx_runtime200 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Accordion/components/VerticalAccordion/VerticalAccordion.js
var import_jsx_runtime171 = __toESM(require_jsx_runtime(), 1);
var VerticalAccordion = ({ children, className, style }) => (0, import_jsx_runtime171.jsx)("div", { className: classNames(className, "vertical-accordion__container"), style, children });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/DynamicAuthLayout.js
var import_react232 = __toESM(require_react(), 1);
var import_react_dom98 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/DynamicFooter/DynamicFooter.js
var import_jsx_runtime174 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useAuthLayoutChecks/useAuthLayoutChecks.js
var import_react211 = __toESM(require_react(), 1);
var import_jsx_runtime173 = __toESM(require_jsx_runtime(), 1);
var import_react_dom81 = __toESM(require_react_dom(), 1);
var import_qrcode79 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isUserLinkingWallet/isUserLinkingWallet.js
var isUserLinkingWallet = (user, view, isMockedSDK) => (user === null || user === void 0 ? void 0 : user.verifiedCredentials) !== void 0 && view === "multi-wallet-wallet-list" && // Mocked SDK is used in the dashboard and the user is
// the actual user that the user logged in to the dashboard
!isMockedSDK;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDynamicLayoutData/useDynamicLayoutData.js
var import_jsx_runtime172 = __toESM(require_jsx_runtime(), 1);
var useDynamicLayoutData = ({ view, authMode }) => {
  const { t: t2 } = useTranslation();
  const { isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet();
  if (view === "no-access") {
    const headerData2 = {
      copykey: "dyn_no_access.title",
      heading: t2("dyn_no_access.title")
    };
    return { headerData: headerData2 };
  }
  if (view === "access-blocked") {
    const headerData2 = {
      copykey: "dyn_access_blocked.title",
      heading: t2("dyn_access_blocked.title")
    };
    return { headerData: headerData2 };
  }
  const helpHeaderMap = {
    "login-with-email-or-wallet-full-wallet-list": {
      copykey: "dyn_login.helper.all_wallet_list",
      heading: t2("dyn_login.helper.all_wallet_list")
    },
    "login-with-wallet-only": {
      copykey: "dyn_login.helper.wallet_only",
      heading: t2("dyn_login.helper.wallet_only")
    },
    "passkey-intro": {
      copykey: "dyn_passkey_intro.helper.title",
      heading: t2("dyn_passkey_intro.helper.title")
    },
    "pending-connect": {
      copykey: "dyn_login.helper.pending_connect.title",
      heading: t2("dyn_login.helper.pending_connect.title")
    },
    "pending-signature": {
      copykey: "dyn_login.helper.pending_signature.title",
      heading: t2("dyn_login.helper.pending_signature.title")
    },
    "pending-signature-without-back-button": {
      copykey: "dyn_login.helper.pending_signature_without_back_button.title",
      heading: t2("dyn_login.helper.pending_signature_without_back_button.title")
    },
    "qr-code": {
      copykey: "dyn_login.helper.qr_code.title",
      heading: t2("dyn_login.helper.qr_code.title")
    },
    "wallet-connect-mobile-wallets-list": {
      copykey: "dyn_wallet_conect.mobile.wallet_list.helper",
      heading: t2("dyn_wallet_conect.mobile.wallet_list.helper")
    },
    "wallet-list": {
      copykey: "dyn_wallet_list.helper",
      heading: t2("dyn_wallet_list.helper")
    }
  };
  const headerMap = {
    "account-exists": {
      copykey: "dyn_account_exists.title",
      heading: t2("dyn_account_exists.title")
    },
    "chainalysis-blocked-wallet": {
      copykey: "dyn_chainalysis_blocked_wallet.title",
      heading: t2("dyn_chainalysis_blocked_wallet.title")
    },
    "farcaster-connect-view": {
      copykey: "dyn_login.qr_code.title",
      heading: t2("dyn_login.qr_code.title")
    },
    "login-with-email-or-wallet": {
      copykey: "dyn_login.title.all",
      heading: t2("dyn_login.title.all")
    },
    "login-with-email-or-wallet-full-wallet-list": {
      copykey: "dyn_login.title.all_wallet_list",
      heading: t2("dyn_login.title.all_wallet_list")
    },
    "login-with-email-verification": {
      copykey: "dyn_otp_verification.confirm_code",
      heading: t2("dyn_otp_verification.confirm_code")
    },
    "login-with-sms-verification": {
      copykey: "dyn_otp_verification.confirm_code",
      heading: t2("dyn_otp_verification.confirm_code")
    },
    "login-with-wallet-only": {
      copykey: "dyn_login.title.wallet_only",
      heading: t2("dyn_login.title.wallet_only")
    },
    "merge-user-accounts": {
      copykey: "dyn_merge_user_accounts.wallet.title",
      heading: t2("dyn_merge_user_accounts.wallet.title")
    },
    "merge-user-accounts-conflicts": {
      copykey: "dyn_merge_user_accounts_conflicts.title",
      heading: t2("dyn_merge_user_accounts_conflicts.title")
    },
    "mfa-choose-device": {
      copykey: "dyn_mfa.choose_device_view.title",
      heading: t2("dyn_mfa.choose_device_view.title")
    },
    "mfa-display-backup-codes": {
      copykey: "dyn_mfa.display_backup_codes_view.title",
      heading: t2("dyn_mfa.display_backup_codes_view.title")
    },
    "mfa-recovery": {
      copykey: "dyn_mfa.recovery_view.title",
      heading: t2("dyn_mfa.recovery_view.title")
    },
    "mfa-secure-device": {
      copykey: "dyn_mfa.secure_device_view.title",
      heading: t2("dyn_mfa.secure_device_view.title")
    },
    "mfa-secure-device-help": {
      copykey: "dyn_mfa.secure_device_view.helper.title",
      heading: t2("dyn_mfa.secure_device_view.helper.title")
    },
    "mfa-verification": {
      copykey: "dyn_mfa.otp_verification_view.title",
      heading: t2("dyn_mfa.otp_verification_view.title")
    },
    "multi-wallet-wallet-list": {
      copykey: authMode === "connect-only" ? "dyn_wallet_list.title.connect" : "dyn_wallet_list.title.link",
      heading: authMode === "connect-only" ? t2("dyn_wallet_list.title.connect") : t2("dyn_wallet_list.title.link")
    },
    "network-not-supported": {
      copykey: "dyn_network_not_supported.title",
      heading: t2("dyn_network_not_supported.title")
    },
    "passkey-recovery-complete": {
      copykey: isTurnkeyWalletWithoutAuthenticator ? "dyn_passkey_secure_modal.complete.title" : "dyn_passkey_recovery.complete.title",
      heading: isTurnkeyWalletWithoutAuthenticator ? t2("dyn_passkey_secure_modal.complete.title") : t2("dyn_passkey_recovery.complete.title")
    },
    "passkey-recovery-start": {
      copykey: isTurnkeyWalletWithoutAuthenticator ? "dyn_passkey_secure_modal.start.title" : "dyn_passkey_recovery.start.title",
      heading: isTurnkeyWalletWithoutAuthenticator ? t2("dyn_passkey_secure_modal.start.title") : t2("dyn_passkey_recovery.start.title")
    },
    "pending-connect": {
      copykey: "dyn_login.connect_wallet.title",
      heading: t2("dyn_login.connect_wallet.title")
    },
    "pending-signature": {
      copykey: "dyn_login.sign_wallet.title",
      heading: t2("dyn_login.sign_wallet.title")
    },
    "qr-code": {
      copykey: "dyn_login.qr_code.title",
      heading: t2("dyn_login.qr_code.title")
    },
    "select-hardware-wallet": {
      copykey: "dyn_select_hardware_wallet.title",
      heading: t2("dyn_select_hardware_wallet.title")
    },
    "select-wallet-in-wallet-group": {
      copykey: "dyn_login.select_wallet_in_wallet_group.title",
      heading: t2("dyn_login.select_wallet_in_wallet_group.title")
    },
    "verify-email": {
      copykey: "dyn_otp_verification.confirm_code",
      heading: t2("dyn_otp_verification.confirm_code")
    },
    "verify-sms": {
      copykey: "dyn_otp_verification.confirm_code",
      heading: t2("dyn_otp_verification.confirm_code")
    },
    "wallet-connect-mobile-wallets-list": {
      copykey: "dyn_wallet_conect.mobile.wallet_list.title",
      heading: (0, import_jsx_runtime172.jsxs)(import_jsx_runtime172.Fragment, { children: [(0, import_jsx_runtime172.jsx)(WalletConnectIcon, { style: { height: "1.5rem", width: "1.5rem" } }), " ", t2("dyn_wallet_conect.mobile.wallet_list.title")] })
    },
    "wallet-group": {
      copykey: "dyn_login.wallet_group.title",
      heading: t2("dyn_login.wallet_group.title")
    },
    "wallet-list": {
      copykey: "dyn_wallet_list.title.select",
      heading: t2("dyn_wallet_list.title.select")
    },
    "wallet-sign": {
      copykey: "dyn_wallet_transfer.sign.title",
      heading: t2("dyn_wallet_transfer.sign.title")
    },
    "wallet-used": {
      copykey: "dyn_wallet_link.title",
      heading: t2("dyn_wallet_link.title")
    }
  };
  const helpHeaderData = helpHeaderMap[view];
  const headerData = headerMap[view];
  return {
    headerData,
    helpHeaderData
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useAuthLayoutChecks/useAuthLayoutChecks.js
var useAuthLayoutChecks = () => {
  var _a;
  const { view } = useViewContext();
  const { user, customPrivacyPolicy, customTermsOfServices, privacyPolicyUrl, termsOfServiceUrl, isBridgeFlow, authMode, projectSettings } = useInternalDynamicContext();
  const { isFooterExpanded } = useFooterAnimationContext();
  const { mockedSDK } = useMockContext();
  const { helpHeaderData } = useDynamicLayoutData({
    authMode,
    view: view.type
  });
  const displayBorderBelowHeader = view.type !== "wallet-list" && view.type !== "login-with-email-or-wallet-full-wallet-list" && view.type !== "multi-wallet-wallet-list" && view.type !== "login-with-wallet-only" || isFooterExpanded;
  const isWalletListTypeView = view.type === "wallet-connect-mobile-wallets-list" || view.type === "wallet-list" || view.type === "login-with-email-or-wallet-full-wallet-list" || view.type === "login-with-wallet-only";
  const showHelpContent = Boolean(helpHeaderData && // Notice the negation here
  !(view.type === "qr-code" || view.type === "no-qr-not-installed" || view.type === "wallet-used" || view.type === "chainalysis-blocked-wallet" || view.type === "wallet-sign" || view.type === "collect-user-data" || view.type === "passkey-new-domain-detected" || isUserLinkingWallet(user, view.type, mockedSDK)));
  const showHeader = view.type !== "collect-user-data" && view.type !== "no-access" && view.type !== "chainalysis-blocked-wallet" && view.type !== "wallet-locked-view" && view.type !== "gate-blocked-wallet" && view.type !== "email-wallet-otp-verification-view" && view.type !== "bridge-welcome" && view.type !== "bridge-summary" && view.type !== "bridge-next-wallet-connection" && view.type !== "passkey-intro" && view.type !== "passkey-new-domain-detected" && view.type !== "social-redirect-view" && view.type !== "collect-user-data-login-no-wallet" && view.type !== "passkey-recovery-bundle" && view.type !== "passkey-recovery-start" && view.type !== "embedded-reveal-view" && view.type !== "embedded-reveal-account-view" && view.type !== "rename-passkey" && view.type !== "create-password-view" && view.type !== "embedded-wallet-auth-choice" && view.type !== "wallet-claim-intro" && view.type !== "passkey-recovery-add-email" && view.type !== "global-wallet-confirm" && view.type !== "global-wallet-info" && view.type !== "mfa-choose-device" && view.type !== "mfa-verification";
  const showConnectedWalletProgress = isBridgeFlow && (view.type === "wallet-list" || view.type === "qr-code" || view.type === "wallet-connect-mobile-wallets-list" || view.type === "pending-connect" || view.type === "pending-signature" || view.type === "pending-signature-without-back-button" || view.type === "bridge-next-wallet-connection" || view.type === "bridge-summary");
  const showToSFooter = Boolean(!isUserLinkingWallet(user, view.type, mockedSDK) && (view.type === "wallet-list" || view.type === "wallet-connect-mobile-wallets-list" || // Don't show empty footer during the login
  (view.type === "login-with-email-or-wallet" || view.type === "login-with-email-or-wallet-full-wallet-list" || view.type === "login-with-wallet-only" || view.type === "multi-wallet-wallet-list") && (termsOfServiceUrl || privacyPolicyUrl || customPrivacyPolicy || customTermsOfServices)));
  const showDynamicFooter = Boolean((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.displayDynamicMessaging) && (view.type === "login-with-email-or-wallet" || view.type === "login-with-email-or-wallet-full-wallet-list" || view.type === "login-with-wallet-only" || view.type === "login-with-email-verification" || view.type === "login-with-sms-verification" || view.type === "verify-email" || view.type === "verify-sms" || view.type === "pending-connect" || view.type === "wallet-group" || view.type === "select-wallet-in-wallet-group" || view.type === "select-hardware-wallet" || view.type === "pending-signature" || view.type === "qr-code" || view.type === "wallet-used" || view.type === "email-wallet-otp-verification-view" || view.type === "farcaster-connect-view" || view.type === "merge-user-accounts" || view.type === "merge-user-accounts-conflicts" || view.type === "mfa-verification" || view.type === "mfa-display-backup-codes" || view.type === "mfa-recovery");
  const showCloseButton = view.type !== "login-with-email-or-wallet-full-wallet-list" && view.type !== "login-with-email-verification" && view.type !== "login-with-sms-verification" && view.type !== "network-not-supported" && view.type !== "passkey-recovery-complete" && view.type !== "passkey-recovery-start" && view.type !== "passkey-recovery-bundle" && view.type !== "rename-passkey" && view.type !== "qr-code" && view.type !== "mfa-verification" && view.type !== "mfa-display-backup-codes" && view.type !== "mfa-recovery";
  const showBackButton = view.type === "pending-signature" || view.type === "no-qr-not-installed" || view.type === "wallet-connect-mobile-wallets-list" || view.type === "login-with-email-verification" || view.type === "login-with-sms-verification" || view.type === "login-with-email-or-wallet-full-wallet-list" || view.type === "wallet-group" || view.type === "select-wallet-in-wallet-group" || view.type === "select-hardware-wallet" || view.type === "pending-connect" || view.type === "account-exists" || view.type === "passkey-intro" || view.type === "qr-code" || view.type === "farcaster-connect-view" || view.type === "mfa-verification" || view.type === "mfa-secure-device-help" || view.type === "merge-user-accounts-conflicts" || view.type === "mfa-recovery" || view.type === "merge-user-accounts-with-same-email" && !user;
  const showDefaultFooter = !showConnectedWalletProgress && !showDynamicFooter && !showToSFooter;
  const shouldHideDynamicFooterSeparator = showDynamicFooter && showToSFooter;
  return {
    displayBorderBelowHeader,
    isWalletListTypeView,
    shouldHideDynamicFooterSeparator,
    showBackButton,
    showCloseButton,
    showConnectedWalletProgress,
    showDefaultFooter,
    showDynamicFooter,
    showHeader,
    showHelpContent,
    showToSFooter
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/DynamicFooter/DynamicFooter.js
var DynamicFooter = () => {
  const { shouldHideDynamicFooterSeparator } = useAuthLayoutChecks();
  return (0, import_jsx_runtime174.jsx)("div", { "data-testid": "dynamic-footer", className: classNames("dynamic-footer", {
    "dynamic-footer__top-border": !shouldHideDynamicFooterSeparator
  }), children: (0, import_jsx_runtime174.jsx)(PoweredByDynamic, {}) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/Header/header.js
var import_jsx_runtime175 = __toESM(require_jsx_runtime(), 1);
var import_react212 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/footer-info-icon.js
var React43 = __toESM(require_react(), 1);
var _path26;
var _excluded29 = ["title", "titleId"];
function _extends36() {
  _extends36 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends36.apply(this, arguments);
}
function _objectWithoutProperties29(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose32(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose32(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgFooterInfoIcon = function SvgFooterInfoIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties29(_ref2, _excluded29);
  return React43.createElement("svg", _extends36({
    width: 20,
    height: 20,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React43.createElement("title", {
    id: titleId
  }, title2) : null, _path26 || (_path26 = React43.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10 3.333a6.667 6.667 0 1 0 0 13.334 6.667 6.667 0 0 0 0-13.334ZM1.667 10a8.333 8.333 0 1 1 16.666 0 8.333 8.333 0 0 1-16.666 0Zm7.5-3.333c0-.46.373-.834.833-.834h.008a.833.833 0 1 1 0 1.667H10a.833.833 0 0 1-.833-.833ZM8.333 10c0-.46.374-.833.834-.833H10c.46 0 .833.373.833.833v2.5a.833.833 0 1 1 0 1.667H10a.833.833 0 0 1-.833-.834v-2.5A.833.833 0 0 1 8.333 10Z",
    fill: "currentcolor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/question-mark.js
var React44 = __toESM(require_react(), 1);
var _path27;
var _path28;
var _excluded30 = ["title", "titleId"];
function _extends37() {
  _extends37 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends37.apply(this, arguments);
}
function _objectWithoutProperties30(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose33(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose33(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgQuestionMark = function SvgQuestionMark2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties30(_ref2, _excluded30);
  return React44.createElement("svg", _extends37({
    width: 20,
    height: 20,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React44.createElement("title", {
    id: titleId
  }, title2) : null, _path27 || (_path27 = React44.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10 3.25a6.75 6.75 0 1 0 0 13.5 6.75 6.75 0 0 0 0-13.5ZM1.667 10a8.333 8.333 0 1 1 16.666 0 8.333 8.333 0 0 1-16.666 0Z",
    fill: "currentcolor"
  })), _path28 || (_path28 = React44.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.31 7.044a1.784 1.784 0 0 0-1.133.192 1.513 1.513 0 0 0-.699.783.792.792 0 0 1-1.481-.559c.26-.689.768-1.257 1.42-1.613a3.368 3.368 0 0 1 2.144-.367 3.262 3.262 0 0 1 1.908 1.023c.496.55.775 1.254.774 1.99 0 1.201-.948 1.972-1.587 2.369a6.63 6.63 0 0 1-1.354.635l-.028.01-.008.002h-.003l-.002.001-.235-.756.235.756A.792.792 0 0 1 9.789 10h.001m0 0 .014-.005.06-.021a5.054 5.054 0 0 0 .956-.456c.575-.357.84-.717.84-1.024 0-.332-.125-.66-.367-.928a1.68 1.68 0 0 0-.982-.521M9.265 13.77c0-.438.355-.792.792-.792h.01a.792.792 0 1 1 0 1.584h-.01a.792.792 0 0 1-.792-.792Z",
    fill: "currentcolor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/Header/header.js
var import_react_dom82 = __toESM(require_react_dom(), 1);
var import_qrcode80 = __toESM(require_browser(), 1);
var Header = ({ onClose: handleClose, heading, projectSettings, copykey }) => {
  const { setError } = useErrorContext();
  const { isFooterExpanded, setIsFooterExpanded } = useFooterAnimationContext();
  const { selectedWalletConnector } = useInternalDynamicContext();
  const { goToInitialView, view, setView } = useViewContext();
  const { showBackButton, showCloseButton, showHelpContent, isWalletListTypeView, displayBorderBelowHeader } = useAuthLayoutChecks();
  const { setExistentAccountData } = useAccountExistsContext();
  const { setSocialProvider } = useSocialRedirectContext();
  const handleBackClick = (0, import_react212.useCallback)(() => {
    var _a;
    if ((_a = view.events) === null || _a === void 0 ? void 0 : _a.onBackClick) {
      view.events.onBackClick();
      return;
    }
    if (view.type === "farcaster-connect-view") {
      setSocialProvider(void 0);
      dynamicEvents.emit("farcasterConnectCancelled");
      dynamicEvents.emit("authFailure", {
        option: ProviderEnum.Farcaster,
        provider: ProviderEnum.Farcaster,
        type: "social"
      }, "user-cancelled");
    }
    setExistentAccountData(void 0);
    setError(void 0);
    if (view.type === "no-qr-not-installed" && (selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.canConnectViaQrCode)) {
      setView("qr-code");
      return;
    }
    goToInitialView();
  }, [
    view.type,
    view.events,
    goToInitialView,
    setExistentAccountData,
    setError,
    setSocialProvider,
    setView,
    selectedWalletConnector
  ]);
  const closeButton = showCloseButton && handleClose && (0, import_jsx_runtime175.jsx)(IconButton, { onClick: handleClose, type: "button", id: "close-button", "data-testid": "close-button", className: "header__icon", children: (0, import_jsx_runtime175.jsx)(SvgClose, {}) });
  const infoButton = showHelpContent && (0, import_jsx_runtime175.jsx)(Tooltip, { content: "Need some help?", className: "header__tooltip", children: (0, import_jsx_runtime175.jsx)(IconButton, { type: "button", onClick: () => setIsFooterExpanded(!isFooterExpanded), "data-testid": "info-button", className: "header__icon", children: isWalletListTypeView ? (0, import_jsx_runtime175.jsx)(SvgQuestionMark, {}) : (0, import_jsx_runtime175.jsx)(SvgFooterInfoIcon, {}) }) }, "info-button");
  const leadingButtons = [];
  if (showBackButton) {
    leadingButtons.push((0, import_jsx_runtime175.jsx)(IconButton, { type: "button", onClick: handleBackClick, "data-testid": "back-button", className: "header__icon", children: (0, import_jsx_runtime175.jsx)(SvgArrowLeft, {}) }, "back-button"));
  }
  if (closeButton && infoButton) {
    leadingButtons.push(infoButton);
  }
  return (0, import_jsx_runtime175.jsx)(ModalHeader, { leading: leadingButtons, trailing: closeButton || infoButton, displayBorder: displayBorderBelowHeader, children: (!projectSettings || Boolean(heading)) && (0, import_jsx_runtime175.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", copykey, children: !projectSettings ? (0, import_jsx_runtime175.jsx)(Skeleton, { className: "header__skeleton" }) : heading }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/HelpContent.js
var import_jsx_runtime194 = __toESM(require_jsx_runtime(), 1);
var import_react226 = __toESM(require_react(), 1);
var import_react_dom94 = __toESM(require_react_dom(), 1);
var import_qrcode92 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/EmptyHelpContent/EmptyHelpContent.js
var import_jsx_runtime176 = __toESM(require_jsx_runtime(), 1);
var EmptyHelpContent = () => (0, import_jsx_runtime176.jsx)("div", { "data-testid": "empty-help-content" });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletMoreInfoContent/WalletMoreInfoContent.js
var import_jsx_runtime179 = __toESM(require_jsx_runtime(), 1);
var import_react214 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/footer-eye-icon.js
var React45 = __toESM(require_react(), 1);
var _path29;
var _excluded31 = ["title", "titleId"];
function _extends38() {
  _extends38 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends38.apply(this, arguments);
}
function _objectWithoutProperties31(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose34(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose34(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgFooterEyeIcon = function SvgFooterEyeIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties31(_ref2, _excluded31);
  return React45.createElement("svg", _extends38({
    width: 20,
    height: 20,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React45.createElement("title", {
    id: titleId
  }, title2) : null, _path29 || (_path29 = React45.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9.995 4.167c3.965 0 6.643 2.655 7.937 4.675a2.14 2.14 0 0 1 0 2.316c-1.294 2.02-3.972 4.675-7.937 4.675-3.965 0-6.643-2.655-7.937-4.675a2.14 2.14 0 0 1 0-2.316c1.294-2.02 3.972-4.675 7.937-4.675ZM14.16 10a4.167 4.167 0 1 1-8.333 0 4.167 4.167 0 0 1 8.333 0Zm-4.12 2.5a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/footer-gas-icon.js
var React46 = __toESM(require_react(), 1);
var _path30;
var _excluded32 = ["title", "titleId"];
function _extends39() {
  _extends39 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends39.apply(this, arguments);
}
function _objectWithoutProperties32(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose35(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose35(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgFooterGasIcon = function SvgFooterGasIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties32(_ref2, _excluded32);
  return React46.createElement("svg", _extends39({
    width: 20,
    height: 20,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React46.createElement("title", {
    id: titleId
  }, title2) : null, _path30 || (_path30 = React46.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9.667 18.333a2 2 0 0 0 2-2V3.667a2 2 0 0 0-2-2h-6a2 2 0 0 0-2 2v12.666a2 2 0 0 0 2 2h6ZM9 8.333a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1H4.333a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1H9ZM17.5 5.833c.46 0 .833.373.833.834v7.5H17.5h.833V14.186a1.201 1.201 0 0 1-.005.113 2.881 2.881 0 0 1-.29 1.075c-.155.307-.398.64-.779.893-.386.258-.863.4-1.426.4-.562 0-1.04-.142-1.425-.4a2.295 2.295 0 0 1-.778-.893 2.878 2.878 0 0 1-.296-1.16v-.045l.833-.001h-.834V9.185l-.001-.011a.2.2 0 0 0-.015-.051v-.001s.005.008.016.02V7.5c.354 0 .675.091.944.27.264.176.43.404.53.607A1.856 1.856 0 0 1 15 9.13v.035c0 .001 0 .002-.832.002H15v4.992l.001.02a1.228 1.228 0 0 0 .12.448c.054.11.123.194.211.253.083.055.23.12.501.12s.419-.065.502-.12a.633.633 0 0 0 .211-.253 1.218 1.218 0 0 0 .12-.468V6.667c0-.46.374-.834.834-.834ZM13.378 9.17h.002-.002Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/footer-key-icon.js
var React47 = __toESM(require_react(), 1);
var _path31;
var _excluded33 = ["title", "titleId"];
function _extends40() {
  _extends40 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends40.apply(this, arguments);
}
function _objectWithoutProperties33(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose36(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose36(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgFooterKeyIcon = function SvgFooterKeyIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties33(_ref2, _excluded33);
  return React47.createElement("svg", _extends40({
    width: 20,
    height: 20,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React47.createElement("title", {
    id: titleId
  }, title2) : null, _path31 || (_path31 = React47.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M18.125 6.875a5 5 0 1 0-10 0 5 5 0 0 0 10 0Zm-2.5 0a2.5 2.5 0 1 0-5 0 2.5 2.5 0 0 0 5 0Zm-7.809 3.243a6.258 6.258 0 0 0 1.671 1.865L7.13 14.34l1.752 1.753-1.768 1.767-1.752-1.752-1.718 1.718-1.768-1.767 5.941-5.942Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isHardwareWalletEnabled/isHardwareWalletEnabled.js
var isHardwareWalletEnabled = (walletConnector) => walletConnector !== void 0 && walletConnector !== null && isHardwareWalletConnector(walletConnector) && walletConnector.isHardwareWalletEnabled;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletMoreInfoContent/WalletMoreInfoContent.js
var import_react_dom83 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EnterTileAnimation/EnterTileAnimation.js
var import_jsx_runtime177 = __toESM(require_jsx_runtime(), 1);
var import_react213 = __toESM(require_react(), 1);
var EnterTileAnimation = ({ children, className = "", delay = 0, dataTestId }) => {
  const style = (0, import_react213.useMemo)(() => ({
    animationDelay: delay
  }), [delay]);
  return (0, import_jsx_runtime177.jsx)("div", { "data-testid": dataTestId, className: classNames(className, "enter-list-tile-animation"), style, children });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InfoItem/InfoItem.js
var import_jsx_runtime178 = __toESM(require_jsx_runtime(), 1);
var InfoItem = ({ title: title2, content, Icon: Icon2, className = "", iconClassName = "", textClassName = "" }) => (0, import_jsx_runtime178.jsxs)("div", { className: classNames("info-item__container", className), children: [(0, import_jsx_runtime178.jsx)("div", { className: classNames("info-item__icon-container", iconClassName, {
  "icon-container--has-content": Boolean(content)
}), children: (0, import_jsx_runtime178.jsx)(Icon2, {}) }), (0, import_jsx_runtime178.jsxs)("div", { children: [(0, import_jsx_runtime178.jsx)(Typography, { as: "h2", className: textClassName, variant: "body_normal", color: "primary", weight: "medium", children: title2 }), content && (0, import_jsx_runtime178.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", className: "info-item__secondary-text", children: content })] })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletMoreInfoContent/WalletMoreInfoContent.js
var import_qrcode81 = __toESM(require_browser(), 1);
var WalletMoreInfoContent = ({ variant, wallet }) => {
  const defaultSignContent = {
    info: [
      {
        content: "Signing proves you have access to your wallet. It’s a bit like verifying your email by clicking an email confirmation link in your inbox during signup. This does not approve a transaction.",
        icon: SvgFooterKeyIcon,
        title: "Confirms you own your wallet"
      },
      {
        icon: SvgFooterGasIcon,
        title: "There are no associated gas costs"
      }
    ]
  };
  const signInfoMessage = isHardwareWalletEnabled(wallet) ? {
    info: [
      {
        content: "By connecting a wallet to a website, you are allowing the site to read the contents of your wallet. This does not approve a transaction.",
        icon: SvgFooterEyeIcon,
        title: "Allows read access"
      },
      {
        content: (0, import_jsx_runtime179.jsxs)("div", { className: "footer-more-info-content__item--phantom-ledger", children: [(0, import_jsx_runtime179.jsx)(Typography, { as: "p", variant: "body_small", weight: "regular", children: "Ledger does not support message signing functionality, commonly used to log in to sites. Instead, we sign a transaction as a proxy to prove ownership of the wallet." }), (0, import_jsx_runtime179.jsxs)(Typography, { as: "p", variant: "body_small", weight: "regular", children: [(0, import_jsx_runtime179.jsx)("strong", { children: "Important" }), ": we do not", " ", (0, import_jsx_runtime179.jsx)("strong", { children: "broadcast" }), " this transaction, meaning Ledger based login will still be gasless."] }), (0, import_jsx_runtime179.jsx)(Typography, { as: "p", variant: "body_small", weight: "regular", children: "Phantom in turn shows that a fee may apply as part of the “transaction”." }), (0, import_jsx_runtime179.jsx)(Typography, { as: "p", variant: "body_small", weight: "regular", children: "As always, please be cautious of the extensions and websites you use to prevent unwanted transactions from being broadcasted to the network." })] }),
        icon: SvgFooterGasIcon,
        title: "Why do I see a fee when using ledger"
      }
    ]
  } : defaultSignContent;
  const copys = {
    connect: {
      info: [
        {
          content: "By connecting a wallet to a website, you are allowing the site to read the contents of your wallet. This does not approve a transaction.",
          icon: SvgFooterEyeIcon,
          title: "Allows read access"
        },
        {
          icon: SvgFooterGasIcon,
          title: "There are no associated gas costs"
        }
      ]
    },
    sign: signInfoMessage
  };
  return (0, import_jsx_runtime179.jsx)("div", { className: "footer-more-info-content__wrapper", children: copys[variant].info.map((item, index) => (0, import_jsx_runtime179.jsx)("div", { className: "footer-more-info-content__item", children: (0, import_jsx_runtime179.jsx)(EnterTileAnimation, { delay: `${0.3 + index * 0.2}s`, children: (0, import_jsx_runtime179.jsx)(InfoItem, { Icon: item.icon, title: item.title, content: item.content }) }) }, index)) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletListHelpContent/WalletListHelpContent.js
var import_jsx_runtime191 = __toESM(require_jsx_runtime(), 1);
var import_react223 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/puzzle.js
var React48 = __toESM(require_react(), 1);
var _path32;
var _excluded34 = ["title", "titleId"];
function _extends41() {
  _extends41 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends41.apply(this, arguments);
}
function _objectWithoutProperties34(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose37(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose37(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgPuzzle = function SvgPuzzle2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties34(_ref2, _excluded34);
  return React48.createElement("svg", _extends41({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React48.createElement("title", {
    id: titleId
  }, title2) : null, _path32 || (_path32 = React48.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M16.044 20.998a.693.693 0 0 0 .7-.68V16.59c.239-2.01 1.121-1.413 2.16-.791 2.51 1.502 4.177-2.45 2.148-3.67-1.592-.956-2.281.689-3.448.52-.45-.067-.763-.54-.862-1.261V8.693a.692.692 0 0 0-.7-.68h-3.21c-2.65-.327-.297-1.755-.297-3.083.001-1.066-.99-1.93-2.214-1.93-1.222 0-2.344.864-2.344 1.93 0 1.253 2.435 2.756-.253 3.083H3.7a.692.692 0 0 0-.699.68v2.688c.205 1.146 1.001 1.411 2.021.655.344-.256.924-.554 1.344-.554 1.094 0 1.982.965 1.982 2.154 0 1.19-.887 2.416-1.982 2.416-.39 0-.755-.123-1.063-.338 0 .091-1.913-1.674-2.302.486v4.121c0 .375.315.68.699.68L10.16 21c.085-.393-.191-.844-.45-1.234-2.04-3.075 5.895-3.382 3.855.095-.1.172-.2.338-.277.5-.098.202-.162.45-.149.639l2.905-.002Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletListHelpContent/WalletListHelpContent.js
var import_react_dom91 = __toESM(require_react_dom(), 1);
var import_qrcode89 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/parseWalletLinks/parseWalletLinks.js
var import_jsx_runtime180 = __toESM(require_jsx_runtime(), 1);
var import_react215 = __toESM(require_react(), 1);
var parseWalletLinks = (links) => {
  const isIOS2 = isIPhone() || isIPad();
  const userBrowser = detectBrowserName() || "chrome";
  let currentDesktopUrl;
  switch (userBrowser) {
    case "edge":
      currentDesktopUrl = links.edge;
      break;
    case "firefox":
      currentDesktopUrl = links.firefox;
      break;
    case "chrome":
    default:
      currentDesktopUrl = links.chrome;
      break;
  }
  const canShowAndroidAppButton = !isIOS2 && Boolean(links.android);
  const canShowIosAppButton = (isIOS2 || !isMobile()) && Boolean(links.ios);
  return {
    canShowAndroidAppButton,
    canShowIosAppButton,
    currentDesktopUrl,
    hasMobileAppUrl: canShowAndroidAppButton || canShowIosAppButton,
    userBrowser
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletListHelpContent/NewToWeb3WalletItem/NewToWeb3WalletItem.js
var import_jsx_runtime188 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletListItem/WalletListItem.js
var import_jsx_runtime187 = __toESM(require_jsx_runtime(), 1);
var import_react220 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/utils/isWalletGroup/isWalletGroup.js
var isWalletGroup = (walletOption) => {
  var _a;
  return Boolean((_a = walletOption.groupedWallets) === null || _a === void 0 ? void 0 : _a.length);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/getWalletListItemLabel/getWalletListItemLabel.js
var getLastUsedWalletKey = () => StorageService.getItem(LAST_USED_WALLET);
var getWalletGroupLabel = (walletGroup, recommendedWallets) => {
  const nestedRecommendedWalletSetting = recommendedWallets === null || recommendedWallets === void 0 ? void 0 : recommendedWallets.find((recommendedWallet) => walletGroup.groupedWallets.some((walletOption) => recommendedWallet.walletKey === walletOption.walletConnector.key));
  if (nestedRecommendedWalletSetting) {
    return {
      isRecommended: true,
      label: nestedRecommendedWalletSetting.label || "Recommended"
    };
  }
  const lastUsedWalletKey = getLastUsedWalletKey();
  const hasNestedLastUsedWallet = walletGroup.groupedWallets.some((walletOption) => walletOption.walletConnector.key === lastUsedWalletKey);
  if (hasNestedLastUsedWallet) {
    return { label: "Last used" };
  }
  const hasNestedInstalledWallets = walletGroup.groupedWallets.some((walletOption) => walletOption.isInstalledOnBrowser);
  if (hasNestedInstalledWallets) {
    return { label: "Installed" };
  }
  if (getWalletGroupType(walletGroup) === "multi-chain") {
    return { label: "Multichain" };
  }
  return void 0;
};
var getWalletLabel = (walletOption, recommendedWallets) => {
  const lastUsedWalletKey = getLastUsedWalletKey();
  const { key: walletKey } = walletOption.walletConnector;
  const recommendedWalletSetting = recommendedWallets === null || recommendedWallets === void 0 ? void 0 : recommendedWallets.find((wallet) => wallet.walletKey === walletKey);
  if (recommendedWalletSetting)
    return {
      isRecommended: true,
      label: recommendedWalletSetting.label || "Recommended"
    };
  const isLastUsedWallet = walletKey === lastUsedWalletKey;
  if (isLastUsedWallet)
    return { label: "Last used" };
  if (walletOption.isInstalledOnBrowser)
    return { label: "Installed" };
  return void 0;
};
var getWalletListItemLabel = ({ wallet, recommendedWallets }) => {
  if (isWalletGroup(wallet)) {
    return getWalletGroupLabel(wallet, recommendedWallets);
  }
  return getWalletLabel(wallet, recommendedWallets);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletListItem/WalletListItem.js
var import_react_dom88 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletItemActions/useWalletItemActions.js
var import_react219 = __toESM(require_react(), 1);
var import_jsx_runtime184 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useConnectAndSign/useConnectAndSign.js
var import_react217 = __toESM(require_react(), 1);
var import_jsx_runtime182 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isProgrammableNetworkSwitchSupported/isProgrammableNetworkSwitchSupported.js
var isProgrammableNetworkSwitchSupported = (walletConnector) => {
  const urlParams = new URLSearchParams(window.location.search);
  const devIsProgrammableNetworkSwitchSupported = urlParams.get("dev_isProgrammableNetworkSwitchSupported");
  if (devIsProgrammableNetworkSwitchSupported) {
    return devIsProgrammableNetworkSwitchSupported === "true";
  }
  return walletConnector.switchNetworkOnlyFromWallet !== true;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleWalletsToConnect/useHandleWalletsToConnect.js
var import_react216 = __toESM(require_react(), 1);
var import_jsx_runtime181 = __toESM(require_jsx_runtime(), 1);
var import_react_dom84 = __toESM(require_react_dom(), 1);
var import_qrcode82 = __toESM(require_browser(), 1);
var useHandleWalletsToConnect = () => {
  const { bridgeChainsToConnect, setShowAuthFlow, bridgeOnboardingCompleted, setBridgeOnboardingCompleted } = useInternalDynamicContext();
  const { setView, goToInitialView } = useViewContext();
  const handleWalletsToConnect = ({ walletConnector }) => {
    if (!bridgeChainsToConnect) {
      setBridgeOnboardingCompleted(true);
      setShowAuthFlow(false);
      return;
    }
    if (bridgeChainsToConnect.length === 0) {
      setShowAuthFlow(false);
      return goToInitialView();
    }
    if (!walletConnector || !walletConnector.connectedChain) {
      setShowAuthFlow(false);
      return goToInitialView();
    }
    const restOfWallets = bridgeChainsToConnect.filter((wallet) => wallet.chain !== (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain));
    const allWalletsConnected = restOfWallets.length === 0;
    if (allWalletsConnected) {
      if (!bridgeOnboardingCompleted) {
        setBridgeOnboardingCompleted(true);
        setView("bridge-summary");
      } else {
        setShowAuthFlow(false);
        goToInitialView();
      }
      return;
    }
    setView("bridge-next-wallet-connection");
  };
  return { handleWalletsToConnect };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/helpers/showPendingConnectView.js
var specialCareWallets = ["bloctoevm", "perawallet"];
var showPendingConnectView = (walletConnector, setView) => __awaiter(void 0, void 0, void 0, function* () {
  const walletProvider = getWalletProvider(walletConnector);
  if (walletProvider === "walletConnect" || walletProvider === "qrCode") {
    return;
  }
  specialCareWallets.forEach((wallet) => {
    if (walletConnector.key === wallet) {
      setView("pending-connect");
    }
  });
  const connectedAccounts = yield walletConnector.getConnectedAccounts();
  if (connectedAccounts.length === 0) {
    setView("pending-connect");
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/helpers/isConnectOnly.js
var isConnectOnly = (user, authMode) => {
  const linking = user !== void 0;
  const connectOnly = authMode === "connect-only" && !linking;
  return connectOnly;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useConnectAndSign/useConnectAndSign.js
var import_react_dom85 = __toESM(require_react_dom(), 1);
var import_qrcode83 = __toESM(require_browser(), 1);
var useConnectAndSign = ({ shouldUpdateWallets = true, shouldCallCallback = true } = {}) => {
  const { setView, goToInitialView } = useViewContext();
  const { engageCaptcha, getCaptchaToken } = useCaptchaContext();
  const { setErrorMessage } = useErrorContext();
  const { authMode, connectWallet, consumeNonce, displaySiweStatement, environmentId, projectSettings, networkValidationMode, setIsSingleWalletAccount, user, walletUiUtils } = useInternalDynamicContext();
  const { handleWalletsToConnect } = useHandleWalletsToConnect();
  const verifyWallet2 = useVerifyWallet({
    consumeNonce,
    displaySiweStatement,
    environmentId,
    projectSettings,
    setIsSingleWalletAccount
  });
  const handleWalletVerify = (walletConnector, publicWalletAddress, captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
    if (!isEmailWalletConnector(walletConnector) || isBloctoConnector(walletConnector)) {
      setView("pending-signature");
    } else {
      walletUiUtils.disabledConfirmationOnce();
    }
    yield verifyWallet2({
      captchaToken,
      publicWalletAddress,
      walletConnector
    });
  });
  const handleWalletVerifyError = (err) => {
    var _a;
    const userCancelled = (err === null || err === void 0 ? void 0 : err.code) === "user-cancelled";
    if (!userCancelled)
      logger2.debug(err);
    setErrorMessage((_a = err === null || err === void 0 ? void 0 : err.code) === null || _a === void 0 ? void 0 : _a.toString());
    goToInitialView();
  };
  return (_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, getAddressOpts = void 0 }) {
    var _b;
    try {
      yield showPendingConnectView(walletConnector, setView);
      if (isEmailWalletConnector(walletConnector)) {
        if (isEmailOTPWalletConnector(walletConnector)) {
          setView("email-wallet-otp-verification-view");
        } else if (!isBloctoConnector(walletConnector)) {
          setView("wait-for-email-confirmation-view");
        }
      }
      const connectionResult = yield connectWallet(walletConnector, getAddressOpts, {
        applyHandleConnectedWallet: shouldCallCallback
      });
      if (!(connectionResult === null || connectionResult === void 0 ? void 0 : connectionResult.address)) {
        return;
      }
      const { address } = connectionResult;
      const walletNetwork = yield walletConnector.getNetwork();
      const usesSupportedNetwork = isSupportedNetwork({
        network: walletNetwork,
        walletConnector
      });
      const isNetworkValidationEnabledForSignIn = networkValidationMode === "always" || networkValidationMode === "sign-in";
      if (!usesSupportedNetwork && isNetworkValidationEnabledForSignIn) {
        if (!isProgrammableNetworkSwitchSupported(walletConnector)) {
          return setView("network-not-supported-manual");
        }
        return setView("network-not-supported");
      }
      if (isConnectOnly(user, authMode)) {
        StorageService.setItem(LAST_USED_WALLET, walletConnector.key);
        if (shouldUpdateWallets) {
          handleWalletsToConnect({ walletConnector });
        }
        return;
      }
      if ((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _b === void 0 ? void 0 : _b.enabled) {
        engageCaptcha({
          authMethod: "wallet",
          onCaptchaSuccess: (captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
            try {
              yield handleWalletVerify(walletConnector, address, captchaToken);
            } catch (e2) {
              handleWalletVerifyError(e2);
            }
          })
        });
        return;
      }
      yield handleWalletVerify(walletConnector, address, getCaptchaToken());
    } catch (err) {
      handleWalletVerifyError(err);
    }
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/requiresTwoStepAuthentication/requiresTwoStepAuthentication.js
var walletsRequiringTwoStepAuthentication = ["dapper"];
var requiresTwoStepAuthentication = (connector) => isMobile() && !(connector === null || connector === void 0 ? void 0 : connector.canConnectViaCustodialService) || walletsRequiringTwoStepAuthentication.includes((connector === null || connector === void 0 ? void 0 : connector.key) || "");

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useConnectAndSignSplitSteps/useConnectAndSignSplitSteps.js
var import_react218 = __toESM(require_react(), 1);
var import_jsx_runtime183 = __toESM(require_jsx_runtime(), 1);
var import_react_dom86 = __toESM(require_react_dom(), 1);
var import_qrcode84 = __toESM(require_browser(), 1);
var useConnectAndSignSplitSteps = () => {
  const { setView, goToInitialView } = useViewContext();
  const { setErrorMessage } = useErrorContext();
  const { getCaptchaToken, engageCaptcha } = useCaptchaContext();
  const { connectWallet, consumeNonce, displaySiweStatement, projectSettings, environmentId, networkValidationMode, setIsSingleWalletAccount, setShowAuthFlow, user, authMode } = useInternalDynamicContext();
  const { handleWalletsToConnect } = useHandleWalletsToConnect();
  const verifyWallet2 = useVerifyWallet({
    consumeNonce,
    displaySiweStatement,
    environmentId,
    projectSettings,
    setIsSingleWalletAccount
  });
  const onErrorHandler = (err) => {
    var _a;
    logger2.debug(err);
    goToInitialView();
    const isMissingPublicAddressErrorExpected = err instanceof MissingPublicAddressError && isMobile();
    if (!isMissingPublicAddressErrorExpected) {
      setErrorMessage((_a = err.code) !== null && _a !== void 0 ? _a : err.toString());
    }
  };
  const onlyConnectUser = (_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, getAddressOpts = void 0 }) {
    var _b;
    yield showPendingConnectView(walletConnector, setView);
    try {
      yield connectWallet(walletConnector, getAddressOpts);
      if (isConnectOnly(user, authMode)) {
        StorageService.setItem(LAST_USED_WALLET, walletConnector.key);
        handleWalletsToConnect({ walletConnector });
        return;
      }
      if ((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _b === void 0 ? void 0 : _b.enabled) {
        engageCaptcha({
          authMethod: "wallet",
          onCaptchaSuccess: (_captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
            setShowAuthFlow(true);
            setView("pending-signature");
          })
        });
        return;
      }
      setShowAuthFlow(true);
      setView("pending-signature");
    } catch (err) {
      onErrorHandler(err);
      return;
    }
  });
  const signAlreadyConnectedUser = (_c) => __awaiter(void 0, [_c], void 0, function* ({ walletConnector, getAddressOpts = void 0 }) {
    try {
      const connectionResult = yield connectWallet(walletConnector, getAddressOpts);
      if (!(connectionResult === null || connectionResult === void 0 ? void 0 : connectionResult.address)) {
        return;
      }
      const walletNetwork = yield walletConnector.getNetwork();
      const usesSupportedNetwork = isSupportedNetwork({
        network: walletNetwork,
        walletConnector
      });
      const isNetworkValidationEnabledForSignIn = networkValidationMode === "always" || networkValidationMode === "sign-in";
      if (!usesSupportedNetwork && isNetworkValidationEnabledForSignIn) {
        if (!isProgrammableNetworkSwitchSupported(walletConnector)) {
          return setView("network-not-supported-manual");
        }
        return setView("network-not-supported");
      }
      yield verifyWallet2({
        captchaToken: getCaptchaToken(),
        publicWalletAddress: connectionResult.address,
        walletConnector
      });
    } catch (err) {
      onErrorHandler(err);
      return;
    }
  });
  return {
    onlyConnectUser,
    signAlreadyConnectedUser
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletItemActions/useWalletItemActions.js
var import_react_dom87 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isSelectedWalletAlreadyConnected/isSelectedWalletAlreadyConnected.js
var isSelectedWalletAlreadyConnected = (linkedWallets, selectedWallet, user) => {
  if (!user)
    return false;
  return linkedWallets.map(({ connector }) => connector.key).includes(selectedWallet.key);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletItemActions/useWalletItemActions.js
var import_qrcode85 = __toESM(require_browser(), 1);
var useWalletItemActions = () => {
  const { setMultiWalletWidgetState, setShowAuthFlow, setSelectedWalletConnectorKey, walletConnectorOptions, setQrcodeUri, setDesktopUri, user, linkedWallets, setLegacyIsVerifying, authMode } = useInternalDynamicContext();
  const { mockedSDK } = useMockContext();
  const { setError, setErrorMessage } = useErrorContext();
  const { setView, goToInitialView } = useViewContext();
  const { onlyConnectUser } = useConnectAndSignSplitSteps();
  const connectAndSignWallet = useConnectAndSign();
  const handleCustodialWalletClick = (walletConnector) => __awaiter(void 0, void 0, void 0, function* () {
    logger2.debug("handleCustodialWalletClick", walletConnector);
    const twoStepAuthentication = requiresTwoStepAuthentication(walletConnector);
    logger2.logVerboseTroubleshootingMessage("[handleCustodialWalletClick]", {
      twoStepAuthentication
    });
    if (twoStepAuthentication) {
      setSelectedWalletConnectorKey(walletConnector.key);
      yield onlyConnectUser({
        walletConnector
      });
    } else {
      setSelectedWalletConnectorKey(walletConnector.key);
      setMultiWalletWidgetState("awaiting_signature", void 0, "linking_new_wallet");
    }
    setView("pending-signature");
  });
  const handleMobileWalletClick = (walletConnector) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    logger2.debug("handleMobileWalletClick", walletConnector);
    setSelectedWalletConnectorKey(walletConnector.key);
    if (walletConnector.key === "phantom") {
      const currentState = StorageService.getItem(PHANTOM_SIGNATURE_STATE);
      StorageService.setItem(PHANTOM_SIGNATURE_STATE, {
        loseOriginalAccountOnTransfer: (_a = currentState === null || currentState === void 0 ? void 0 : currentState.loseOriginalAccountOnTransfer) !== null && _a !== void 0 ? _a : false,
        submittedAtTimestamp: (/* @__PURE__ */ new Date()).toString(),
        verificationType: "awaiting_verification"
      });
    }
    onlyConnectUser({ walletConnector });
  });
  const handleInstalledExtensionClick = (walletConnector) => __awaiter(void 0, void 0, void 0, function* () {
    logger2.debug("handleInstalledExtensionClick", walletConnector);
    setSelectedWalletConnectorKey(walletConnector.key);
    setMultiWalletWidgetState("awaiting_signature", void 0, "linking_new_wallet");
  });
  const handleUninstalledClick = (walletConnector) => __awaiter(void 0, void 0, void 0, function* () {
    logger2.debug("handleUninstalledClick", walletConnector);
    setSelectedWalletConnectorKey(walletConnector.key);
    if (!walletConnector.canConnectViaQrCode) {
      setView("no-qr-not-installed");
    } else {
      connectAndSignWallet({
        getAddressOpts: {
          onDesktopUri: (uri) => __awaiter(void 0, void 0, void 0, function* () {
            setDesktopUri(uri);
          }),
          onDisplayUri: (uri) => __awaiter(void 0, void 0, void 0, function* () {
            setQrcodeUri(uri);
          })
        },
        walletConnector
      });
      setView("qr-code");
    }
    setError(void 0);
  });
  const handleAlreadyConnectedWallet = (walletConnector) => __awaiter(void 0, void 0, void 0, function* () {
    logger2.debug("handleAlreadyConnectedWallet", walletConnector);
    setShowAuthFlow(false);
    const connectedAccounts = yield walletConnector.getConnectedAccounts();
    const activeAccountAlreadyLinked = linkedWallets.find((wallet) => {
      var _a;
      return wallet.address.toLowerCase() === ((_a = connectedAccounts[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase());
    });
    logger2.logVerboseTroubleshootingMessage("[handleAlreadyConnectedWallet]", {
      activeAccountAlreadyLinked,
      connectedAccounts,
      linkedWallets
    });
    if (activeAccountAlreadyLinked) {
      setMultiWalletWidgetState("awaiting_account_switch", "linking_new_wallet");
    } else {
      setMultiWalletWidgetState("awaiting_signature", void 0, "linking_new_wallet");
    }
    setSelectedWalletConnectorKey(walletConnector.key);
  });
  const openWallet = (walletKey, handlers) => {
    var _a;
    const { openMobileWallet = handleMobileWalletClick, openCustodialWallet = handleCustodialWalletClick, openExtensionWallet = handleInstalledExtensionClick } = handlers || {};
    const walletConnector = (_a = walletConnectorOptions.find((wallet) => wallet.key === walletKey)) === null || _a === void 0 ? void 0 : _a.walletConnector;
    if (!walletConnector)
      return;
    if (isMobile()) {
      openMobileWallet(walletConnector);
    } else if (walletConnector.canConnectViaCustodialService) {
      openCustodialWallet(walletConnector);
    } else if (walletConnector.isInstalledOnBrowser()) {
      openExtensionWallet(walletConnector);
    }
  };
  const handleWalletItemClick = (wallet) => __awaiter(void 0, void 0, void 0, function* () {
    const { walletConnector, isInstalledOnBrowser } = wallet;
    const shouldEndWalletConnectorSession = walletConnector.connectedChain === "FLOW" || isPhantomRedirectConnector(walletConnector);
    logger2.logVerboseTroubleshootingMessage("[handleWalletItemClick]", {
      mockedSDK,
      shouldEndWalletConnectorSession,
      wallet
    });
    if (mockedSDK)
      return;
    if (shouldEndWalletConnectorSession) {
      yield walletConnector.endSession();
    }
    setLegacyIsVerifying(false);
    if (authMode !== "connect-only") {
      try {
        yield walletConnector.chooseAccountsToConnect();
      } catch (error) {
        if (error instanceof UserRejectedRequestError) {
          setErrorMessage("connection_rejected");
          goToInitialView();
          return;
        }
      }
    }
    if (isSelectedWalletAlreadyConnected(linkedWallets, walletConnector, user) && walletConnector.connectedChain !== "FLOW") {
      handleAlreadyConnectedWallet(walletConnector);
    } else if (walletConnector.canConnectViaCustodialService) {
      handleCustodialWalletClick(walletConnector);
    } else if (isMobile()) {
      if (walletConnector.key === "walletconnect") {
        setView("wallet-connect-mobile-wallets-list");
      } else {
        handleMobileWalletClick(walletConnector);
      }
    } else if (isInstalledOnBrowser) {
      handleInstalledExtensionClick(walletConnector);
    } else {
      handleUninstalledClick(walletConnector);
    }
  });
  return {
    handleAlreadyConnectedWallet,
    handleCustodialWalletClick,
    handleInstalledExtensionClick,
    handleMobileWalletClick,
    handleUninstalledClick,
    handleWalletItemClick,
    openWallet
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ListTileAnimatedTrailing/ListTileAnimatedTrailing.js
var import_jsx_runtime185 = __toESM(require_jsx_runtime(), 1);
var ListTileAnimatedTrailing = ({ hoverElement, children }) => (0, import_jsx_runtime185.jsx)("div", { children: (0, import_jsx_runtime185.jsxs)("div", { className: "list-tile-animated-trailing", children: [(0, import_jsx_runtime185.jsx)("div", { className: "list-tile-animated-trailing__child", children }), (0, import_jsx_runtime185.jsx)("div", { className: "list-tile-animated-trailing__hover-element", children: hoverElement })] }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ListTile/ListTile.js
var import_jsx_runtime186 = __toESM(require_jsx_runtime(), 1);
var ListTile = ({ children, onClick, leading, disabled = false, trailing, style, className = "", dataTestId, copykey }) => (0, import_jsx_runtime186.jsxs)("button", { "data-testid": dataTestId, type: "button", className: classNames(className, "list-tile"), onClick, style, disabled, children: [leading, (0, import_jsx_runtime186.jsx)("div", { className: "list-tile__children", children: (0, import_jsx_runtime186.jsx)(Typography, { weight: "medium", variant: "body_normal", color: "primary", as: "span", copykey, children }) }), trailing] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletListItem/WalletListItem.js
var import_qrcode86 = __toESM(require_browser(), 1);
var WalletListItem = ({ disabled = false, wallet, onResetSearchValue, recommendedWallets, tile = ({ leading, name, onClick, trailing }) => (0, import_jsx_runtime187.jsx)(ListTile, { leading, trailing, onClick, className: "wallet-list-item__tile", dataTestId: "ListTile", children: name }) }) => {
  const { navigateToWalletGroup } = useWalletGroupContext();
  const { setView } = useViewContext();
  const _isWalletGroup = isWalletGroup(wallet);
  const { walletBook } = useWalletBookContext();
  const { handleWalletItemClick } = useWalletItemActions();
  const labelSettings = getWalletListItemLabel({
    recommendedWallets,
    wallet
  });
  const Tile = tile;
  const handleClick = () => __awaiter(void 0, void 0, void 0, function* () {
    if (disabled) {
      return;
    }
    onResetSearchValue === null || onResetSearchValue === void 0 ? void 0 : onResetSearchValue("");
    if (_isWalletGroup) {
      return navigateToWalletGroup(wallet);
    }
    if (isHardwareWalletConnector(wallet.walletConnector) && wallet.walletConnector.canConnectWithHardwareWallet()) {
      setView("select-hardware-wallet", {
        onSelectWallet: handleWalletItemClick,
        wallet
      });
      return;
    }
    yield handleWalletItemClick(wallet);
  });
  const name = _isWalletGroup ? getWalletGroup(walletBook, wallet.key).name : getWalletBookWallet(walletBook, wallet.key).name;
  const leading = (0, import_jsx_runtime187.jsx)(WalletIcon, { className: "wallet-list-item__leading", walletKey: wallet.key, style: { height: pixelToRem(28), width: pixelToRem(28) } });
  const trailing = (0, import_jsx_runtime187.jsx)(ListTileAnimatedTrailing, { hoverElement: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime187.jsx)(Icon, { color: "text-tertiary", size: "mini", children: (0, import_jsx_runtime187.jsx)(SvgStroke, {}) })
  ), children: labelSettings && (0, import_jsx_runtime187.jsx)(Badge, { dot: !labelSettings.isRecommended, variant: labelSettings.isRecommended ? "primary" : "secondary", text: (0, import_jsx_runtime187.jsx)(Typography, { variant: "body_small", children: labelSettings.label }) }) });
  return (0, import_jsx_runtime187.jsx)(Tile, { leading, trailing, name, onClick: handleClick });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletListHelpContent/NewToWeb3WalletItem/NewToWeb3WalletItem.js
var NewToWeb3WalletItem = ({ children, style, wallet }) => (0, import_jsx_runtime188.jsx)(WalletListItem, { wallet, tile: children ? ({ onClick }) => (0, import_jsx_runtime188.jsx)("button", { className: "new-to-web3--button", style, onClick, children }) : void 0 });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletListHelpContent/Item/Item.js
var import_jsx_runtime189 = __toESM(require_jsx_runtime(), 1);
var import_react221 = __toESM(require_react(), 1);
var import_react_dom89 = __toESM(require_react_dom(), 1);
var import_qrcode87 = __toESM(require_browser(), 1);
var Item2 = ({ heading, StartIcon, EndIcon, message, url }) => (0, import_jsx_runtime189.jsxs)("a", { className: "footer-buttons-item", href: url, rel: "noopener noreferrer", target: "_blank", children: [(0, import_jsx_runtime189.jsx)("div", { className: "footer-buttons-item__icon--left", children: (0, import_jsx_runtime189.jsx)(StartIcon, {}) }), (0, import_jsx_runtime189.jsxs)("div", { className: "footer-buttons-item__typography", children: [(0, import_jsx_runtime189.jsx)(Typography, { as: "h2", weight: "regular", color: "primary", variant: "body_normal", children: heading }), message && (0, import_jsx_runtime189.jsx)(Typography, { as: "p", weight: "regular", color: "secondary", children: message })] }), EndIcon && (0, import_jsx_runtime189.jsx)(EndIcon, { style: { height: "1.5rem", width: "1.5rem" } })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletListHelpContent/WalletExtensionOrAppContinueButton/WalletExtensionOrAppContinueButton.js
var import_jsx_runtime190 = __toESM(require_jsx_runtime(), 1);
var import_react222 = __toESM(require_react(), 1);
var import_react_dom90 = __toESM(require_react_dom(), 1);
var import_qrcode88 = __toESM(require_browser(), 1);
var WalletExtensionOrAppContinueButton = ({ wallet, selectedUrl }) => {
  const showRefreshOnceInstalledWalletButton = Boolean(selectedUrl.length) && !(wallet === null || wallet === void 0 ? void 0 : wallet.isInstalledOnBrowser);
  const walletConnectionAfterPageReloadHandler = () => {
    if (!(wallet === null || wallet === void 0 ? void 0 : wallet.key)) {
      return;
    }
    StorageService.setItem(NEWTOWEB3_WALLET_EXTENSION_FLAG_KEY, wallet.key);
    window.location.reload();
  };
  return (0, import_jsx_runtime190.jsxs)("div", { className: "new-to-web3-buttons__container", children: [!isMobile() && (0, import_jsx_runtime190.jsxs)(import_jsx_runtime190.Fragment, { children: [(wallet === null || wallet === void 0 ? void 0 : wallet.isInstalledOnBrowser) && (0, import_jsx_runtime190.jsx)(NewToWeb3WalletItem, { wallet, children: (0, import_jsx_runtime190.jsx)(Typography, { as: "p", "data-testid": "desktop-interactive-wallet-item", variant: "body_normal", weight: "bold", children: "Continue" }) }), showRefreshOnceInstalledWalletButton && (0, import_jsx_runtime190.jsx)("button", { onClick: walletConnectionAfterPageReloadHandler, children: (0, import_jsx_runtime190.jsx)(Typography, { as: "p", "data-testid": "refresh-once-installed-button", variant: "body_normal", weight: "bold", children: "Continue once installed" }) })] }), wallet && isMobile() && (0, import_jsx_runtime190.jsx)(NewToWeb3WalletItem, { wallet, children: (0, import_jsx_runtime190.jsx)("p", { "data-testid": "mobile-interactive-wallet-item", children: "Continue once installed" }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/WalletListHelpContent/WalletListHelpContent.js
var WalletListHelpContent = ({ chains, newToWeb3WalletChainMap }) => {
  var _a, _b;
  const { walletConnectorOptions } = useInternalDynamicContext();
  const { walletBook } = useWalletBookContext();
  const [selectedUrl, setSelectedUrl] = (0, import_react223.useState)("");
  const chainName = ((_a = chains === null || chains === void 0 ? void 0 : chains.filter((chain) => Boolean(chain.enabled)).find((enabledChain) => enabledChain.name === newToWeb3WalletChainMap.primary_chain)) === null || _a === void 0 ? void 0 : _a.name) || "evm";
  const walletKey = getValueByKey(newToWeb3WalletChainMap === null || newToWeb3WalletChainMap === void 0 ? void 0 : newToWeb3WalletChainMap.wallets, chainName);
  const newToWeb3Wallet = walletConnectorOptions.find((wallet) => wallet.key === walletKey);
  const isCustodialServiceWallet = newToWeb3Wallet === null || newToWeb3Wallet === void 0 ? void 0 : newToWeb3Wallet.walletConnector.canConnectViaCustodialService;
  const links = getWalletLinks(walletBook, walletKey);
  const { currentDesktopUrl, canShowAndroidAppButton, canShowIosAppButton } = parseWalletLinks(links);
  const walletLinksElements = [
    {
      content: "Install Desktop extension",
      icon: SvgPuzzle,
      isEnabled: Boolean(currentDesktopUrl === null || currentDesktopUrl === void 0 ? void 0 : currentDesktopUrl.length) && !isMobile(),
      url: currentDesktopUrl
    },
    {
      content: "Install iOS app",
      icon: AppleIcon,
      isEnabled: canShowIosAppButton,
      url: links.ios
    },
    {
      content: "Install Android app",
      icon: AndroidIcon,
      isEnabled: canShowAndroidAppButton,
      url: links.android
    }
  ];
  if (!Object.keys((_b = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _b !== void 0 ? _b : {}).length) {
    return (0, import_jsx_runtime191.jsx)(Skeleton, { className: "walletlist-footer-content__container" });
  }
  return (0, import_jsx_runtime191.jsx)("div", { className: "walletlist-help-content__container", children: (0, import_jsx_runtime191.jsxs)(EnterTileAnimation, { delay: "300ms", children: [(0, import_jsx_runtime191.jsx)("div", { className: "walletlist-help-content__icon", children: (0, import_jsx_runtime191.jsx)(WalletIcon, { walletKey, style: { height: pixelToRem(56), width: pixelToRem(56) } }) }), (0, import_jsx_runtime191.jsxs)("div", { className: "walletlist-help-content__typography-wrapper", children: [(0, import_jsx_runtime191.jsxs)(Typography, { as: "p", variant: "title", weight: "medium", children: ["We recommend installing", " ", getWalletBookWallet(walletBook, walletKey).name] }), (0, import_jsx_runtime191.jsx)(Typography, { as: "label", variant: "body_normal", weight: "regular", color: "secondary", className: "walletlist-help-content__typography--label", children: "Select your preferred option below:" })] }), (0, import_jsx_runtime191.jsx)("div", { className: "walletlist-help-content__buttons-wrapper", children: walletLinksElements.map((element, i) => element.isEnabled ? (0, import_jsx_runtime191.jsx)("button", { onClick: () => setSelectedUrl(element.url), children: (0, import_jsx_runtime191.jsx)(Item2, { StartIcon: element.icon, heading: element.content, url: element.url }) }, i) : void 0) }), isCustodialServiceWallet && (0, import_jsx_runtime191.jsxs)("div", { className: "walletlist-help-content__custodial-wallet-area", children: [(0, import_jsx_runtime191.jsx)(Typography, { className: "walletlist-help-content__custodial-wallet-area--title", as: "p", color: "secondary", variant: "body_normal", weight: "regular", children: "If you don't want to install a wallet, then use:" }), (0, import_jsx_runtime191.jsx)(NewToWeb3WalletItem, { wallet: newToWeb3Wallet })] }), (0, import_jsx_runtime191.jsx)(WalletExtensionOrAppContinueButton, { selectedUrl, wallet: newToWeb3Wallet })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/HelpHeader/HelpHeader.js
var import_jsx_runtime192 = __toESM(require_jsx_runtime(), 1);
var import_react224 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/chevron-left.js
var React49 = __toESM(require_react(), 1);
var _path33;
var _excluded35 = ["title", "titleId"];
function _extends42() {
  _extends42 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends42.apply(this, arguments);
}
function _objectWithoutProperties35(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose38(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose38(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgChevronLeft = function SvgChevronLeft2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties35(_ref2, _excluded35);
  return React49.createElement("svg", _extends42({
    width: 20,
    height: 20,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React49.createElement("title", {
    id: titleId
  }, title2) : null, _path33 || (_path33 = React49.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.09 3.577a.833.833 0 0 1 0 1.179L7.844 10l5.244 5.244a.833.833 0 0 1-1.178 1.179l-5.834-5.834a.833.833 0 0 1 0-1.178l5.834-5.834a.833.833 0 0 1 1.178 0Z",
    fill: "currentcolor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/HelpHeader/HelpHeader.js
var import_react_dom92 = __toESM(require_react_dom(), 1);
var import_qrcode90 = __toESM(require_browser(), 1);
var HelpHeader = () => {
  const { authMode } = useInternalDynamicContext();
  const { setIsFooterExpanded } = useFooterAnimationContext();
  const { view } = useViewContext();
  const { helpHeaderData } = useDynamicLayoutData({
    authMode,
    view: view.type
  });
  const { displayBorderBelowHeader } = useAuthLayoutChecks();
  const backButton = (0, import_jsx_runtime192.jsx)(IconButton, { type: "button", onClick: () => setIsFooterExpanded(false), "data-testid": "back-button", className: "header__icon", children: (0, import_jsx_runtime192.jsx)(SvgChevronLeft, { className: "back-button " }) });
  return (0, import_jsx_runtime192.jsx)("div", { className: "help-header", children: (0, import_jsx_runtime192.jsx)(ModalHeader, { trailing: backButton, displayLeading: false, displayBorder: displayBorderBelowHeader, children: (0, import_jsx_runtime192.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-help-heading", className: "header__typography", copykey: helpHeaderData === null || helpHeaderData === void 0 ? void 0 : helpHeaderData.copykey, children: helpHeaderData === null || helpHeaderData === void 0 ? void 0 : helpHeaderData.heading }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/PasskeyInfoHelper/PasskeyInfoHelper.js
var import_jsx_runtime193 = __toESM(require_jsx_runtime(), 1);
var import_react225 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/user-account-2.js
var React50 = __toESM(require_react(), 1);
var _path34;
var _excluded36 = ["title", "titleId"];
function _extends43() {
  _extends43 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends43.apply(this, arguments);
}
function _objectWithoutProperties36(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose39(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose39(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgUserAccount2 = function SvgUserAccount22(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties36(_ref2, _excluded36);
  return React50.createElement("svg", _extends43({
    width: 60,
    height: 50,
    viewBox: "0 0 60 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React50.createElement("title", {
    id: titleId
  }, title2) : null, _path34 || (_path34 = React50.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M51.931 49.48A29.223 29.223 0 0 0 59.333 30C59.333 13.8 46.2.667 30 .667S.667 13.8.667 30A29.224 29.224 0 0 0 8.07 49.483c5.52-6.63 16.005-9.007 22.387-9.007 6.383 0 15.962 1.903 21.473 9.004ZM19 22.667c0-6.076 4.925-11 11-11s11 4.924 11 11c0 6.075-4.925 11-11 11s-11-4.925-11-11Z",
    fill: "#4779FF"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/PasskeyInfoHelper/PasskeyInfoHelper.js
var import_react_dom93 = __toESM(require_react_dom(), 1);
var import_qrcode91 = __toESM(require_browser(), 1);
var PasskeyInfoHelper = () => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime193.jsx)("div", { className: "passkey-info-help-content__container", children: (0, import_jsx_runtime193.jsx)(EnterTileAnimation, { delay: "300ms", children: (0, import_jsx_runtime193.jsxs)("div", { className: "passkey-info-help-content__typography-wrapper", children: [(0, import_jsx_runtime193.jsxs)("div", { className: "passkey-info-help-content__details", children: [(0, import_jsx_runtime193.jsx)(Icon, { size: "medium", color: "text-tertiary", children: (0, import_jsx_runtime193.jsx)(SvgUserAccount2, {}) }), (0, import_jsx_runtime193.jsxs)("div", { className: "passkey-info-help-content__wrapper", children: [(0, import_jsx_runtime193.jsx)(Typography, { variant: "title", weight: "medium", copykey: "dyn_passkey_intro.helper.section_1.title", children: t2("dyn_passkey_intro.helper.section_1.title") }), (0, import_jsx_runtime193.jsx)(Typography, { as: "p", variant: "body_normal", weight: "regular", color: "secondary", className: "passkey-info-help-content__typography--label", copykey: "dyn_passkey_intro.helper.section_1.description", children: t2("dyn_passkey_intro.helper.section_1.description") })] })] }), (0, import_jsx_runtime193.jsxs)("div", { className: "passkey-info-help-content__details", children: [(0, import_jsx_runtime193.jsx)(Icon, { size: "medium", color: "text-tertiary", children: (0, import_jsx_runtime193.jsx)(SvgFooterKeyIcon, {}) }), (0, import_jsx_runtime193.jsxs)("div", { className: "passkey-info-help-content__wrapper", children: [(0, import_jsx_runtime193.jsx)(Typography, { variant: "title", weight: "medium", copykey: "dyn_passkey_intro.helper.section_2.title", children: t2("dyn_passkey_intro.helper.section_2.title") }), (0, import_jsx_runtime193.jsx)(Typography, { as: "p", variant: "body_normal", weight: "regular", color: "secondary", className: "passkey-info-help-content__typography--label", copykey: "dyn_passkey_intro.helper.section_2.description", children: t2("dyn_passkey_intro.helper.section_2.description") })] })] })] }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/HelpContent/HelpContent.js
var HelpContent = () => (0, import_jsx_runtime194.jsxs)("div", { children: [(0, import_jsx_runtime194.jsx)(HelpHeader, {}), (0, import_jsx_runtime194.jsx)(HelpContentSwitch, {})] });
var HelpContentSwitch = () => {
  const { view } = useViewContext();
  const { projectSettings, newToWeb3WalletChainMap, selectedWalletConnector } = useInternalDynamicContext();
  const isWalletListTypeView = (0, import_react226.useMemo)(() => view.type === "wallet-connect-mobile-wallets-list" || view.type === "wallet-list" || view.type === "login-with-email-or-wallet-full-wallet-list" || view.type === "login-with-wallet-only", [view]);
  const isPendingSignatureTypeView = (0, import_react226.useMemo)(() => view.type === "pending-signature-without-back-button" || view.type === "pending-signature", [view]);
  const isPendingConnectTypeView = (0, import_react226.useMemo)(() => view.type === "pending-connect" || view.type === "qr-code", [view]);
  const isPasskeyIntroView = (0, import_react226.useMemo)(() => view.type === "passkey-intro", [view]);
  if (isWalletListTypeView) {
    return (0, import_jsx_runtime194.jsx)(WalletListHelpContent, { chains: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.chains, newToWeb3WalletChainMap });
  }
  if (isPendingSignatureTypeView) {
    return (0, import_jsx_runtime194.jsx)(WalletMoreInfoContent, { variant: "sign", wallet: selectedWalletConnector || void 0 });
  }
  if (isPendingConnectTypeView) {
    return (0, import_jsx_runtime194.jsx)(WalletMoreInfoContent, { variant: "connect" });
  }
  if (isPasskeyIntroView) {
    return (0, import_jsx_runtime194.jsx)(PasskeyInfoHelper, {});
  }
  return (0, import_jsx_runtime194.jsx)(EmptyHelpContent, {});
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/ToSFooter/ToSFooter.js
var import_jsx_runtime196 = __toESM(require_jsx_runtime(), 1);
var import_react228 = __toESM(require_react(), 1);
var import_react_dom96 = __toESM(require_react_dom(), 1);
var import_qrcode94 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TosAndPp/TosAndPp.js
var import_jsx_runtime195 = __toESM(require_jsx_runtime(), 1);
var import_react227 = __toESM(require_react(), 1);
var import_react_dom95 = __toESM(require_react_dom(), 1);
var import_qrcode93 = __toESM(require_browser(), 1);
var TosAndPp = () => {
  const { user, authMode, customPrivacyPolicy, customTermsOfServices, privacyPolicyUrl, termsOfServiceUrl } = useInternalDynamicContext();
  const connectionType = isConnectOnly(user, authMode) ? "connecting" : "logging in";
  const renderTermsOfServices = () => {
    if (!termsOfServiceUrl) {
      return;
    }
    return (0, import_jsx_runtime195.jsx)("a", { className: "tos-and-pp__link", href: termsOfServiceUrl, target: "_blank", rel: "noreferrer", children: "Terms of Service" });
  };
  const renderPrivacyPolicy = () => {
    if (!privacyPolicyUrl) {
      return;
    }
    return (0, import_jsx_runtime195.jsxs)(import_jsx_runtime195.Fragment, { children: [termsOfServiceUrl && (0, import_jsx_runtime195.jsx)(import_jsx_runtime195.Fragment, { children: " & " }), (0, import_jsx_runtime195.jsx)("a", { className: "tos-and-pp__link", href: privacyPolicyUrl, target: "_blank", rel: "noreferrer", children: "Privacy Policy" })] });
  };
  return (0, import_jsx_runtime195.jsxs)(import_jsx_runtime195.Fragment, { children: [(privacyPolicyUrl || termsOfServiceUrl) && (0, import_jsx_runtime195.jsxs)(Typography, { variant: "body_small", weight: "regular", className: "tos-and-pp__text", children: ["By ", connectionType, ", you agree to", (0, import_jsx_runtime195.jsx)("br", {}), "our ", renderTermsOfServices(), renderPrivacyPolicy(), "."] }), customTermsOfServices, customPrivacyPolicy] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/ToSFooter/ToSFooter.js
var ToSFooter = () => {
  const { showToSFooter } = useAuthLayoutChecks();
  return (0, import_jsx_runtime196.jsx)("div", { className: "tos-and-pp__footer", children: showToSFooter && (0, import_jsx_runtime196.jsx)(TosAndPp, {}) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/WalletProgressStepper/WalletProgressStepper.js
var import_jsx_runtime199 = __toESM(require_jsx_runtime(), 1);
var import_react231 = __toESM(require_react(), 1);
var import_react_dom97 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/utils/getChainStepState/getChainStepState.js
var getChainStepState = (chain, chainsLeftToConnect) => {
  const isCurrentStep = chain === chainsLeftToConnect[0];
  const isStepComplete = !chainsLeftToConnect.includes(chain);
  if (isCurrentStep) {
    return "current";
  }
  if (isStepComplete) {
    return "done";
  }
  return "upcoming";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/WalletProgressStepper/WalletProgressStepper.js
var import_qrcode95 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Step/Step.js
var import_jsx_runtime197 = __toESM(require_jsx_runtime(), 1);
var import_react229 = __toESM(require_react(), 1);
var typographyOpacityMap = {
  current: "1",
  default: "1",
  done: "0.4",
  upcoming: "0.15"
};
var Step = ({ children, className, icon, state = "default" }) => {
  const style = (0, import_react229.useMemo)(() => ({ opacity: state === "upcoming" ? 0.5 : 1 }), [state]);
  const ComputedIcon = (0, import_react229.useMemo)(() => {
    if (state === "done")
      return (0, import_jsx_runtime197.jsx)("div", { className: "step__icon step__icon--done", children: (0, import_jsx_runtime197.jsx)(Icon, { className: "step__icon__check-mark", children: (0, import_jsx_runtime197.jsx)(SvgCheck, { style }) }) });
    else if (icon)
      return (0, import_jsx_runtime197.jsx)(Icon, { className: "step__icon", children: (0, import_jsx_runtime197.jsx)("div", { style, children: icon }) });
    else
      return (0, import_jsx_runtime197.jsx)("div", { className: "step__index", children: (0, import_jsx_runtime197.jsx)(Typography, { color: "primary", variant: "body_small", style, children: (0, import_jsx_runtime197.jsx)("span", { className: "step__index-label" }) }) });
  }, [icon, state, style]);
  return (0, import_jsx_runtime197.jsxs)("div", { className: classNames("step", className), children: [ComputedIcon, (0, import_jsx_runtime197.jsx)(Typography, { color: "primary", variant: "body_small", style: { opacity: typographyOpacityMap[state] }, children })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Stepper/Stepper.js
var import_jsx_runtime198 = __toESM(require_jsx_runtime(), 1);
var import_react230 = __toESM(require_react(), 1);
var Stepper = ({ children }) => (0, import_jsx_runtime198.jsx)("div", { className: "stepper", children: import_react230.Children.map(children, (step, index) => {
  const divider = index === 0 ? void 0 : (0, import_jsx_runtime198.jsx)(Divider, { className: "stepper__divider" });
  return (0, import_jsx_runtime198.jsxs)(import_jsx_runtime198.Fragment, { children: [divider, step] });
}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/WalletProgressStepper/WalletProgressStepper.js
var WalletProgressStepper = () => {
  const { bridgeChainsToConnect = [], bridgeChains = [] } = useInternalDynamicContext();
  const allChains = bridgeChains.map(({ chain }) => chain);
  const chainsLeftToConnect = [...bridgeChainsToConnect].map(({ chain }) => chain);
  return (0, import_jsx_runtime199.jsx)("div", { className: "wallet-progress-stepper", "data-testid": "wallet-progress-stepper", children: (0, import_jsx_runtime199.jsx)(Stepper, { children: allChains.map((chain, index) => {
    var _a;
    const chainInfo = getChainInfoWithOverrides(chain);
    const PrimaryWalletChainIcon = getChainIcon(chain);
    return (0, import_jsx_runtime199.jsx)(Step, { state: getChainStepState(chain, chainsLeftToConnect), icon: (0, import_jsx_runtime199.jsx)(PrimaryWalletChainIcon, {}), children: (_a = chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.blockchainName) !== null && _a !== void 0 ? _a : chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.displayName }, chain);
  }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/DynamicAuthLayout.js
var import_qrcode96 = __toESM(require_browser(), 1);
var DynamicAuthLayout = ({ children, className, style, onClose, projectSettings, hideBridgeProgressSteppers }) => {
  const { view } = useViewContext();
  const { authMode } = useInternalDynamicContext();
  const { isFooterExpanded } = useFooterAnimationContext();
  const { headerData, helpHeaderData } = useDynamicLayoutData({
    authMode,
    view: view.type
  });
  const { showConnectedWalletProgress, showHeader, showHelpContent, showToSFooter, showDynamicFooter } = useAuthLayoutChecks();
  return (0, import_jsx_runtime200.jsx)(OverlayCardTarget, { children: (0, import_jsx_runtime200.jsxs)(VerticalAccordion, { style, className, children: [(0, import_jsx_runtime200.jsxs)(AccordionItem, { isOpen: !isFooterExpanded, dimOnHide: true, children: [showConnectedWalletProgress && !hideBridgeProgressSteppers && (0, import_jsx_runtime200.jsx)(WalletProgressStepper, {}), showHeader && (0, import_jsx_runtime200.jsx)(Header, { onClose, heading: (headerData === null || headerData === void 0 ? void 0 : headerData.heading) || "", projectSettings, copykey: headerData === null || headerData === void 0 ? void 0 : headerData.copykey }), children, showToSFooter && (0, import_jsx_runtime200.jsx)(ToSFooter, {}), showDynamicFooter && (0, import_jsx_runtime200.jsx)(DynamicFooter, {})] }), helpHeaderData && showHelpContent && (0, import_jsx_runtime200.jsx)(AccordionItem, { isOpen: isFooterExpanded, children: (0, import_jsx_runtime200.jsx)("div", { children: (0, import_jsx_runtime200.jsx)(HelpContent, {}) }, isFooterExpanded.toString()) })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/DynamicAuthModal/DynamicAuthModal.js
var import_qrcode98 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SandboxIndicatorWrapper/SandboxIndicatorWrapper.js
var import_jsx_runtime201 = __toESM(require_jsx_runtime(), 1);
var import_react233 = __toESM(require_react(), 1);
var import_react_dom99 = __toESM(require_react_dom(), 1);
var import_qrcode97 = __toESM(require_browser(), 1);
var SandboxIndicatorWrapper = ({ children }) => {
  const { projectSettings } = useInternalDynamicContext();
  const indicatorRef = (0, import_react233.useRef)(null);
  const [indicatorHeight, setIndicatorHeight] = (0, import_react233.useState)(void 0);
  const isSandBox = (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.environmentName) === EnvironmentEnum.Sandbox;
  (0, import_react233.useEffect)(() => {
    var _a;
    const clientHeight = (_a = indicatorRef.current) === null || _a === void 0 ? void 0 : _a.clientHeight;
    setIndicatorHeight(clientHeight);
  }, [indicatorRef, setIndicatorHeight]);
  if (!isSandBox)
    return (0, import_jsx_runtime201.jsx)(import_jsx_runtime201.Fragment, { children });
  return (0, import_jsx_runtime201.jsxs)("div", { style: { position: "relative" }, children: [(0, import_jsx_runtime201.jsx)("div", {
    ref: indicatorRef,
    // Its using inline styles so users cannot override it easily
    style: {
      background: "var(--dynamic-alert-1)",
      borderTopLeftRadius: "4px",
      borderTopRightRadius: "4px",
      color: "white",
      left: "calc( var(--dynamic-border-radius) + 8px)",
      padding: "2px 8px 4px",
      position: "absolute",
      top: -(indicatorHeight || 0)
    },
    "data-testid": "sandbox-indicator",
    children: capitalize3((projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.environmentName) || "")
  }), children] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/DynamicAuthModal/DynamicAuthModal.js
var DynamicAuthModal = ({ children, onClose, transitionProps, projectSettings, className }) => {
  const { showConnectedWalletProgress } = useAuthLayoutChecks();
  return (0, import_jsx_runtime202.jsxs)(Modal, { isShown: Boolean(transitionProps === null || transitionProps === void 0 ? void 0 : transitionProps.isShown), children: [showConnectedWalletProgress && (0, import_jsx_runtime202.jsx)(ModalCard, { borderRadius: "small", children: (0, import_jsx_runtime202.jsx)(WalletProgressStepper, {}) }), (0, import_jsx_runtime202.jsx)(SandboxIndicatorWrapper, { children: (0, import_jsx_runtime202.jsx)(ModalCard, { dataTestId: "dynamic-auth-modal", children: (0, import_jsx_runtime202.jsx)(DynamicAuthLayout, { className, projectSettings, onClose, hideBridgeProgressSteppers: true, children }) }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/MockContext/MockContext.js
var import_qrcode99 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/MockContext/constants/index.js
var walletBookMock = {
  groups: {},
  wallets: {
    glow: {
      brand: {
        alt: "Glow Wallet",
        spriteId: "glow"
      },
      desktop: {
        chromeId: "ojbcfhjmpigfobfclfflafhblgemeidi",
        edgeId: "niihfokdlimbddhfmngnplgfcgpmlido",
        firefoxId: "glow-solana-wallet"
      },
      name: "Glow"
    },
    metamask: {
      brand: {
        alt: "MetaMask Wallet",
        primaryColor: "#E8831D",
        spriteId: "metamask"
      },
      chains: ["eip155:1"],
      desktop: {
        chromeId: "nkbihfbeogaeaoehlefnkodbefgpgknn",
        edgeId: "ejbalbakoplchlghecdalmeeeajnimhm",
        firefoxId: "ether-metamask"
      },
      mobile: {
        androidId: "io.metamask",
        iosId: "id1438144202",
        native: "metamask://wc",
        universal: "https://metamask.app.link/wc"
      },
      name: "MetaMask",
      shortName: "MetaMask",
      walletConnect: {
        sdks: ["sign_v1", "sign_v2"]
      }
    },
    phantom: {
      brand: {
        alt: "Phantom Wallet",
        primaryColor: "#4B49C6",
        spriteId: "phantom"
      },
      desktop: {
        chromeId: "bfnaelmomeimhlpmgjnjophhpkkoljpa",
        firefoxId: "phantom-app"
      },
      group: "phantom",
      mobile: {
        androidId: "app.phantom",
        iosId: "id1598432977"
      },
      name: "Phantom"
    }
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/MockContext/MockContext.js
var MockContext = (0, import_react235.createContext)(void 0);
var MockContextProvider = ({ children, view, customerTheme, dynamicLayoutClassName }) => {
  const viewContextValue = {
    goToInitialView: () => {
    },
    /* istanbul ignore next */
    setView: () => {
    },
    view
  };
  return (0, import_jsx_runtime203.jsx)(MockContext.Provider, { value: { mockedSDK: true }, children: (0, import_jsx_runtime203.jsx)(PopperProvider, { children: (0, import_jsx_runtime203.jsx)(ViewContext.Provider, { value: viewContextValue, children: (0, import_jsx_runtime203.jsx)(ErrorContextProvider, { children: (0, import_jsx_runtime203.jsx)(ThemeContextProvider, { customerTheme, children: (0, import_jsx_runtime203.jsx)(FooterAnimationContextProvider, { children: (0, import_jsx_runtime203.jsx)(WalletBookContextProvider, { walletBook: walletBookMock, children: (0, import_jsx_runtime203.jsx)(MockContextWrapper, { dynamicLayoutClassName, children }) }) }) }) }) }) }) });
};
var MockContextWrapper = ({ dynamicLayoutClassName, children }) => {
  const onClose = () => new Promise(() => {
  });
  const mockProjectSettings = {
    chains: [],
    design: {},
    general: {},
    kyc: [],
    privacy: {},
    sdk: { walletConnect: { projectId: "", v2Enabled: false } },
    security: {}
  };
  return (0, import_jsx_runtime203.jsx)("div", { className: "mock-ctx__container", style: { position: "relative" }, children: (0, import_jsx_runtime203.jsx)(DynamicAuthModal, { className: dynamicLayoutClassName, onClose, projectSettings: mockProjectSettings, transitionProps: {
    isShown: true
  }, children }) });
};
var useMockContext = () => {
  const context = (0, import_react235.useContext)(MockContext);
  if (context === void 0) {
    return { mockedSDK: false };
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/LoadingContext/LoadingContext.js
var import_qrcode100 = __toESM(require_browser(), 1);
var LoadingContext = (0, import_react236.createContext)(void 0);
var LoadingContextProvider = ({ children }) => {
  const [loading, setLoading] = (0, import_react236.useState)(false);
  useInternalDynamicEvents("logout", () => setLoading(false));
  useInternalDynamicEvents("embeddedWalletCreated", () => setLoading(false));
  const value = (0, import_react236.useMemo)(() => ({
    loading,
    setLoading
  }), [loading]);
  return (0, import_jsx_runtime204.jsx)(LoadingContext.Provider, { value, children });
};
var useLoadingContext = () => {
  const context = (0, import_react236.useContext)(LoadingContext);
  if (context === void 0) {
    throw new Error("usage of useLoadingContext not wrapped in `LoadingContextProvider`.");
  }
  return context;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/projectSettings/projectSettings.js
var import_qrcode101 = __toESM(require_browser(), 1);
var { getProjectSettings, setProjectSettings, useProjectSettings, resetProjectSettings } = createStoreState("projectSettings");
var useFetchProjectSettings = ({ environmentId, retries = 2 }) => {
  const storedSettings = useProjectSettings();
  const lsSettingsExists = Boolean(storedSettings === null || storedSettings === void 0 ? void 0 : storedSettings.settings);
  const { retrigger } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    const settings = yield fetchProjectSettings(environmentId);
    if (!settings)
      throw new DynamicError("Settings are not defined");
    return settings;
  }), {
    deps: [environmentId],
    enabled: !lsSettingsExists,
    onResolve: (projectSettings) => {
      const expiry = (/* @__PURE__ */ new Date()).getTime() + 6e4 * 5;
      setProjectSettings({
        expiresAt: expiry,
        settings: projectSettings
      });
    },
    retries
  });
  useDynamicEvents("logout", retrigger);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/Main.js
var import_react_dom211 = __toESM(require_react_dom(), 1);
var import_qrcode207 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RenderView/RenderView.js
var import_jsx_runtime338 = __toESM(require_jsx_runtime(), 1);
var import_react368 = __toESM(require_react(), 1);
var import_react_dom209 = __toESM(require_react_dom(), 1);
var import_qrcode205 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/viewToComponentMap.js
var import_jsx_runtime337 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsConflictsView/MergeUserAccountsConflictsView.js
var import_jsx_runtime208 = __toESM(require_jsx_runtime(), 1);
var import_react239 = __toESM(require_react(), 1);
var import_react_dom105 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMergeUserAccounts/useMergeUserAccounts.js
var import_jsx_runtime206 = __toESM(require_jsx_runtime(), 1);
var import_react238 = __toESM(require_react(), 1);
var import_react_dom104 = __toESM(require_react_dom(), 1);
var import_qrcode102 = __toESM(require_browser(), 1);
var useMergeUserAccounts = () => {
  const { environmentId, setShowAuthFlow, selectedWalletConnector } = useInternalDynamicContext();
  const { addedWalletsIds } = useInternalUserWallets();
  const mergeUserAccounts2 = (mergeConflictResolutions) => __awaiter(void 0, void 0, void 0, function* () {
    const user = yield verifyMergeUsers(environmentId, mergeConflictResolutions);
    const walletId = user.lastVerifiedCredentialId;
    if (walletId) {
      addedWalletsIds.current.push(walletId);
    }
    const accounts = yield selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.getConnectedAccounts();
    if (accounts === null || accounts === void 0 ? void 0 : accounts.length) {
      dynamicEvents.emit("triggerComputePrimaryWalletMultiWalletStateFromAccounts", { accounts });
    }
    setShowAuthFlow(false);
  });
  return {
    mergeUserAccounts: mergeUserAccounts2
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsConflictsView/MergeUserAccountsConflictsView.js
var import_qrcode103 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RadioButton/RadioButton.js
var import_jsx_runtime207 = __toESM(require_jsx_runtime(), 1);
var RadioButton = ({ children, checked, value, name, disabled = false, className = "", onChange }) => {
  const radioId = `${name}_${value}`;
  return (0, import_jsx_runtime207.jsxs)("div", { className: classNames("radio-button", className), children: [(0, import_jsx_runtime207.jsx)("input", { type: "radio", id: radioId, name, value, disabled, defaultChecked: checked, onChange }), (0, import_jsx_runtime207.jsx)("label", { htmlFor: radioId, children })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsConflictsView/MergeUserAccountsConflictsView.js
var MergeUserAccountsConflictsView = ({ mergeConflicts }) => {
  const { mergeUserAccounts: mergeUserAccounts2 } = useMergeUserAccounts();
  const { t: t2 } = useTranslation();
  const [error, setError] = (0, import_react239.useState)("");
  const mergeResolutions = (0, import_react239.useRef)(
    // defaults to current user field values
    Object.fromEntries(mergeConflicts.map(({ field, currentUser }) => [
      `${field.name}_${field.type}`,
      {
        fieldKey: field.name,
        type: field.type || KycFieldType.Standard,
        userId: currentUser.userId
      }
    ]))
  );
  const handleMergeConfirm = () => __awaiter(void 0, void 0, void 0, function* () {
    const parsedMergeResolutions = Object.values(mergeResolutions.current).map(({ fieldKey, type, userId }) => ({
      fieldKey,
      type,
      userId
    }));
    try {
      yield mergeUserAccounts2(parsedMergeResolutions);
    } catch (error2) {
      logger2.error("Error merging user accounts", error2);
      setError(t2("dyn_merge_user_accounts_conflicts.errors.merge_error"));
    }
  });
  if (!(mergeConflicts === null || mergeConflicts === void 0 ? void 0 : mergeConflicts.length)) {
    return null;
  }
  const handleOptionChange = (fieldKey, fieldType, userId, isSelected) => {
    setError("");
    if (!isSelected) {
      return;
    }
    mergeResolutions.current[`${fieldKey}_${fieldType}`] = {
      fieldKey,
      type: fieldType || KycFieldType.Standard,
      userId
    };
  };
  return (0, import_jsx_runtime208.jsxs)("div", { className: "merge-user-accounts-conflicts__container", children: [error && (0, import_jsx_runtime208.jsx)(Alert, { icon: "error", variant: "error", className: "merge-user-accounts-conflicts__error", children: error }), (0, import_jsx_runtime208.jsx)("div", { className: "merge-user-accounts-conflicts__description", children: (0, import_jsx_runtime208.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_merge_user_accounts_conflicts.description", children: t2("dyn_merge_user_accounts_conflicts.description") }) }), (0, import_jsx_runtime208.jsx)("div", { className: "merge-user-accounts-conflicts__fields", children: mergeConflicts.map(({ field, currentUser, fromUser }) => {
    var _a;
    return (0, import_jsx_runtime208.jsxs)("div", { className: "merge-user-accounts-conflicts__fields__item", children: [(0, import_jsx_runtime208.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "merge-user-accounts-conflicts__fields__item__name", children: (_a = field.label) !== null && _a !== void 0 ? _a : capitalize3(field.name) }), (0, import_jsx_runtime208.jsx)(RadioButton, { name: field.name, value: currentUser.value, checked: true, className: "merge-user-accounts-conflicts__fields__item__button", onChange: (e2) => handleOptionChange(field.name, field.type, currentUser.userId, e2.target.checked), children: currentUser.value }), (0, import_jsx_runtime208.jsx)(RadioButton, { name: field.name, value: fromUser.value, className: "merge-user-accounts-conflicts__fields__item__button", onChange: (e2) => handleOptionChange(field.name, field.type, fromUser.userId, e2.target.checked), children: fromUser.value })] }, field.name);
  }) }), (0, import_jsx_runtime208.jsx)("div", { className: "merge-user-accounts-conflicts__buttons", children: (0, import_jsx_runtime208.jsx)(TypographyButton, { className: "merge-user-accounts-conflicts__buttons__button", onClick: handleMergeConfirm, buttonVariant: "primary", buttonPadding: "large", expanded: true, copykey: "dyn_merge_user_accounts_conflicts.confirm_button", children: t2("dyn_merge_user_accounts_conflicts.confirm_button") }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/AccountExistsView/AccountExistsView.js
var import_jsx_runtime218 = __toESM(require_jsx_runtime(), 1);
var import_react248 = __toESM(require_react(), 1);
var import_react_dom109 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithSpinner/IconWithSpinner.js
var import_jsx_runtime210 = __toESM(require_jsx_runtime(), 1);
var import_react241 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithSpinner/Indicator/Indicator.js
var import_jsx_runtime209 = __toESM(require_jsx_runtime(), 1);
var import_react240 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/wallet-connect-logo.js
var React51 = __toESM(require_react(), 1);
var _path35;
var _excluded37 = ["title", "titleId"];
function _extends44() {
  _extends44 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends44.apply(this, arguments);
}
function _objectWithoutProperties37(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose40(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose40(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgWalletConnectLogo = function SvgWalletConnectLogo2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties37(_ref2, _excluded37);
  return React51.createElement("svg", _extends44({
    width: 17,
    height: 12,
    viewBox: "0 0 17 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React51.createElement("title", {
    id: titleId
  }, title2) : null, _path35 || (_path35 = React51.createElement("path", {
    d: "M3.84 2.345c2.573-3.127 6.747-3.127 9.32 0l.31.376a.463.463 0 0 1 0 .566l-1.06 1.287a.145.145 0 0 1-.232 0l-.427-.518c-1.795-2.18-4.707-2.18-6.502 0l-.457.555a.145.145 0 0 1-.233 0L3.5 3.324a.463.463 0 0 1 0-.566l.34-.413Zm11.512 2.661.943 1.146a.463.463 0 0 1 0 .566l-4.252 5.165a.29.29 0 0 1-.466 0L8.558 8.217a.073.073 0 0 0-.116 0l-3.018 3.666a.29.29 0 0 1-.466 0L.705 6.718a.463.463 0 0 1 0-.566l.943-1.146a.29.29 0 0 1 .466 0l3.018 3.666c.032.04.085.04.117 0l3.018-3.666a.29.29 0 0 1 .466 0l3.018 3.666c.033.04.085.04.117 0l3.018-3.666a.29.29 0 0 1 .466 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithSpinner/Indicator/Indicator.js
var Indicator = ({ indicator, iconSize: iconSize2 }) => {
  const walletConnectSizes = {
    container: iconSize2 * 4 / 15,
    icon: iconSize2 * 3 / 15
  };
  const connectedSizes = {
    container: iconSize2 / 6,
    icon: iconSize2 / 9
  };
  if (indicator === "walletConnect") {
    return (0, import_jsx_runtime209.jsx)("div", { className: "indicator__wallet-connect", style: {
      height: pixelToRem(walletConnectSizes.container),
      width: pixelToRem(walletConnectSizes.container)
    }, children: (0, import_jsx_runtime209.jsx)(SvgWalletConnectLogo, { style: {
      height: pixelToRem(walletConnectSizes.icon),
      width: pixelToRem(walletConnectSizes.icon)
    } }) });
  }
  return (0, import_jsx_runtime209.jsx)("div", { className: "indicator__container indicator__container--connected", style: {
    height: pixelToRem(connectedSizes.container),
    width: pixelToRem(connectedSizes.container)
  }, "data-testid": "connected-indicator", children: (0, import_jsx_runtime209.jsx)("div", { className: "indicator__icon", style: {
    height: pixelToRem(connectedSizes.icon),
    width: pixelToRem(connectedSizes.icon)
  } }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconWithSpinner/IconWithSpinner.js
var iconRatio = 7 / 11;
var IconWithSpinner = ({ iconSize: iconSize2 = 24, Icon: Icon2, isSpinning = false, className = "", indicator, customSpinnerColor, treatAsFunctionComponent }) => {
  const realIconSize = iconSize2 * iconRatio;
  const spinnerIconSize = iconSize2 / 2;
  const effectiveContainerClassName = classNames("icon-with-spinner__container", className);
  const IconAsFC = Icon2;
  return (0, import_jsx_runtime210.jsxs)("div", { className: effectiveContainerClassName, style: {
    height: pixelToRem(iconSize2),
    width: pixelToRem(iconSize2)
  }, children: [Icon2 && (0, import_jsx_runtime210.jsxs)("div", { style: {
    height: pixelToRem(realIconSize),
    width: pixelToRem(realIconSize)
  }, className: "icon-with-spinner__icon-container", children: [treatAsFunctionComponent || typeof Icon2 === "function" ? (0, import_jsx_runtime210.jsx)(IconAsFC, { height: realIconSize, width: realIconSize }) : Icon2, indicator && (0, import_jsx_runtime210.jsx)(Indicator, { indicator, iconSize: iconSize2 })] }), isSpinning && !isLegacySafari() && (0, import_jsx_runtime210.jsx)("div", { className: "icon-with-spinner__spinner-container icon-with-spinner__animation", "data-chromatic": "ignore", style: {
    height: pixelToRem(iconSize2),
    width: pixelToRem(iconSize2)
  }, children: (0, import_jsx_runtime210.jsx)(Spinner2, { className: "icon-with-spinner__spinner", customSpinnerColor, size: spinnerIconSize }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/EmailSignInSection/LoginEmailForm.js
var import_jsx_runtime216 = __toESM(require_jsx_runtime(), 1);
var import_react247 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isEmailProviderEnabled/isEmailProviderEnabled.js
var isEmailProviderEnabled = (providers) => providers !== void 0 && (isProviderEnabled(providers, ProviderEnum.Dynamic) || isProviderEnabled(providers, ProviderEnum.Blocto) || isProviderEnabled(providers, ProviderEnum.MagicLink));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/EmailSignInSection/LoginEmailForm.js
var import_react_dom108 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/utils/findEmailOtpWalletConnector/findEmailOtpWalletConnector.js
var findEmailOtpWalletConnector = (wallets2) => {
  const walletConnector = wallets2.map(({ walletConnector: walletConnector2 }) => walletConnector2).find((walletConnector2) => isEmailWalletConnector(walletConnector2) && // additional check to make sure the wallet connector actually implements its own otp workflow
  // if a walletConnector only uses Dynamic's OTP, then requiresNonDynamicEmailOtp should be false
  walletConnector2.requiresNonDynamicEmailOtp);
  return walletConnector;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmailProvider/useEmailProvider.js
var import_react244 = __toESM(require_react(), 1);
var import_jsx_runtime213 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/email/email.js
var import_jsx_runtime211 = __toESM(require_jsx_runtime(), 1);
var import_react242 = __toESM(require_react(), 1);
var getEmailProvider = (_a) => __awaiter(void 0, [_a], void 0, function* ({ email, environmentId }) {
  try {
    const res = yield sdkApi().getEmailProvider({
      email,
      environmentId
    });
    return res;
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    throw new EmailProviderError(data.code);
  }
});
var createEmailVerification = (_b) => __awaiter(void 0, [_b], void 0, function* ({ email, environmentId, captchaToken }) {
  try {
    const res = yield sdkApi().createEmailVerification({
      emailVerificationCreateRequest: {
        captchaToken,
        email
      },
      environmentId
    });
    return res;
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    throw new EmailVerificationError(data.code);
  }
});
var signInWithEmailVerification = (_c) => __awaiter(void 0, [_c], void 0, function* ({ verificationToken, verificationUUID, environmentId, captchaToken, sessionPublicKey }) {
  try {
    const res = yield sdkApi().signInWithEmailVerification({
      emailVerificationVerifyRequest: {
        captchaToken,
        sessionPublicKey,
        verificationToken,
        verificationUUID
      },
      environmentId
    });
    return res;
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    if (data.error.code === "missing_from_list") {
      throw new NoAccessError({ email: data.payload.email });
    }
    if (data.code === "email_associated_with_different_provider") {
      throw new AccountExistsError(data.error, data.payload);
    }
    if (data.error.code === "sandbox_maximum_threshold_reached") {
      throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    throw new EmailVerificationError(data.code);
  }
});
var retryEmailVerification = (_d) => __awaiter(void 0, [_d], void 0, function* ({ email, environmentId, verificationUUID }) {
  try {
    const res = yield sdkApi().retryEmailVerification({
      emailVerificationRetryRequest: {
        email,
        verificationUUID
      },
      environmentId
    });
    return res;
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    throw new EmailVerificationError(data.code);
  }
});
var verifyEmail = (_e2) => __awaiter(void 0, [_e2], void 0, function* ({ verificationToken, verificationUUID, environmentId }) {
  try {
    const res = yield sdkApi().verifyEmailVerification({
      emailVerificationVerifyRequest: {
        verificationToken,
        verificationUUID
      },
      environmentId
    });
    return res;
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    if (data.code === UnprocessableEntityErrorCode.UserHasAlreadyAccountWithEmail) {
      throw new UserHasAccountWithEmailError(data.error);
    }
    if (data.error.code === "sandbox_maximum_threshold_reached") {
      throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    throw new EmailVerificationError(data.code);
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmailProvider/useEmailProvider.js
var import_react_dom106 = __toESM(require_react_dom(), 1);
var import_qrcode104 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConnectWithEmail/useConnectWithEmail.js
var import_react243 = __toESM(require_react(), 1);
var import_jsx_runtime212 = __toESM(require_jsx_runtime(), 1);
var useConnectWithEmail = ({ emailWalletConnector, handleConnect }) => {
  const { error } = useErrorContext();
  const [loading, setLoading] = (0, import_react243.useState)(false);
  const connectWithEmail = (email) => __awaiter(void 0, void 0, void 0, function* () {
    if (!email || !emailWalletConnector || loading)
      return;
    setLoading(true);
    emailWalletConnector.setEmail(email);
    try {
      yield handleConnect(emailWalletConnector);
    } catch (e2) {
      logger2.error(e2);
      setLoading(false);
    }
  });
  (0, import_react243.useEffect)(() => {
    if (error && loading) {
      setLoading(false);
    }
  }, [error, loading]);
  return {
    connectWithEmail,
    loading
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmailProvider/useEmailProvider.js
var useEmailProvider = ({ emailWalletConnector }) => {
  const { projectSettings, environmentId } = useInternalDynamicContext();
  const { setDisplayedDestination: setEmailForVerification, setVerificationUUID } = useVerification();
  const { setView } = useViewContext();
  const { handleInstalledExtensionClick } = useWalletItemActions();
  const { connectWithEmail, loading: isEmailProviderLoading } = useConnectWithEmail({
    emailWalletConnector,
    handleConnect: handleInstalledExtensionClick
  });
  const { providers } = projectSettings || {};
  const isInjectedWalletProviderEnabled = emailWalletConnector !== void 0;
  const isMagicOrBloctoEnabled = isInjectedWalletProviderEnabled && (isProviderEnabled(providers || [], ProviderEnum.MagicLink) || isProviderEnabled(providers || [], ProviderEnum.Blocto));
  const handleEmailOnlyLoginSubmit = (emailInput, captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
    const { email, verificationUUID } = yield createEmailVerification({
      captchaToken,
      email: emailInput,
      environmentId
    });
    setView("login-with-email-verification");
    setEmailForVerification(email);
    setVerificationUUID(verificationUUID);
  });
  const handleMagicLinkOrBloctoSubmit = (emailInput) => __awaiter(void 0, void 0, void 0, function* () {
    yield connectWithEmail(emailInput);
  });
  const submitEmail = (emailInput, captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
    if (isMagicOrBloctoEnabled) {
      yield handleMagicLinkOrBloctoSubmit(emailInput);
      return;
    }
    yield handleEmailOnlyLoginSubmit(emailInput, captchaToken);
  });
  const handleEmailSubmitWithOptionalCaptcha = (emailInput, captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
    dynamicEvents.emit("authInit", {
      email: emailInput,
      option: emailInput,
      type: "email"
    });
    try {
      if ((emailWalletConnector !== void 0 || isTurnkeyEnabled(projectSettings)) && (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.confirmEmailProviderForVerify)) {
        const { emailProvider } = yield getEmailProvider({
          email: emailInput,
          environmentId
        });
        if (emailProvider === ProviderEnum.Dynamic) {
          yield handleEmailOnlyLoginSubmit(emailInput, captchaToken);
          return;
        }
      }
      yield submitEmail(emailInput, captchaToken);
    } catch (error) {
      dynamicEvents.emit("authFailure", {
        email: emailInput,
        option: emailInput,
        type: "email"
      }, { error });
      throw error;
    }
  });
  return {
    handleEmailSubmitWithOptionalCaptcha,
    isEmailProviderLoading
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/EmailSignInSection/LoginEmailForm.js
var import_qrcode106 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EmailForm/EmailForm.js
var import_jsx_runtime215 = __toESM(require_jsx_runtime(), 1);
var import_react246 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isEmailValid/isEmailValid.js
var EMAIL_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i;
var isEmailValid = (email) => EMAIL_REGEX.test(email);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EmailForm/EmailForm.js
var import_react_dom107 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineSubmitButton/InlineSubmitButton.js
var import_jsx_runtime214 = __toESM(require_jsx_runtime(), 1);
var import_react245 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/arrow-right-background.js
var React52 = __toESM(require_react(), 1);
var _rect;
var _path36;
var _excluded38 = ["title", "titleId"];
function _extends45() {
  _extends45 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends45.apply(this, arguments);
}
function _objectWithoutProperties38(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose41(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose41(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgArrowRightBackground = function SvgArrowRightBackground2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties38(_ref2, _excluded38);
  return React52.createElement("svg", _extends45({
    width: 25,
    height: 24,
    viewBox: "0 0 25 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React52.createElement("title", {
    id: titleId
  }, title2) : null, _rect || (_rect = React52.createElement("rect", {
    x: 0.5,
    width: 24,
    height: 24,
    rx: 12,
    fill: "var(--icon-background, var(--dynamic-hover))"
  })), _path36 || (_path36 = React52.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.22 7.47a.75.75 0 0 1 1.06 0l3.75 3.75a.75.75 0 0 1 0 1.06l-3.75 3.75a.75.75 0 1 1-1.06-1.06l2.47-2.47H7.5a.75.75 0 0 1 0-1.5h8.19l-2.47-2.47a.75.75 0 0 1 0-1.06Z",
    fill: "var(--icon-arrow, var(--dynamic-text-secondary))"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineSubmitButton/InlineSubmitButton.js
var InlineSubmitButton = ({ disabled, highlighted, isFocused, isHovered, className, style, emailSubmitButtonInsideInput = false }) => {
  if (!emailSubmitButtonInsideInput)
    return null;
  return (0, import_jsx_runtime214.jsx)(IconButton, { "data-testid": "in_line_submit_button", type: "submit", className: classNames("inline-submit-button", className, {
    "inline-submit-button--active": isFocused || isHovered,
    "inline-submit-button--ready": highlighted
  }), disabled, style, children: (0, import_jsx_runtime214.jsx)(SvgArrowRightBackground, {}) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EmailForm/EmailForm.js
var import_qrcode105 = __toESM(require_browser(), 1);
var EmailForm = ({ isLoading, onSubmit, isEmailInvalid = false, currentEmail, emailSubmitButtonInsideInput = false, buttonCopyKey = "dyn_login.email_form.submit_button.label", isDisabled = false, className, style }) => {
  const { t: t2 } = useTranslation();
  const [emailInput, setEmailInput] = (0, import_react246.useState)(currentEmail !== null && currentEmail !== void 0 ? currentEmail : "");
  const [isHovered, setIsHovered] = (0, import_react246.useState)(false);
  const [isFocused, setIsFocused] = (0, import_react246.useState)(false);
  const handleEmailOnChangeEvent = (event) => {
    const { value } = event.currentTarget;
    setEmailInput(value);
  };
  const handleSubmit = (e2) => __awaiter(void 0, void 0, void 0, function* () {
    e2.preventDefault();
    if (!isEmailValid(emailInput)) {
      return;
    }
    onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(emailInput);
  });
  return (0, import_jsx_runtime215.jsxs)("form", { className: classNames("login-with-email-form", className), style, "data-testid": "email-form", onSubmit: (e2) => handleSubmit(e2), children: [(0, import_jsx_runtime215.jsx)(Input, { id: "email_field", value: emailInput, onChange: handleEmailOnChangeEvent, copykey: "dyn_login.email_form.email_field.label", label: t2("dyn_login.email_form.email_field.label"), error: isEmailInvalid, message: isEmailInvalid && t2("dyn_login.helper.email_form.invalid_email"), suffix: (0, import_jsx_runtime215.jsx)(InlineSubmitButton, { disabled: isLoading || isDisabled, highlighted: emailInput.length > 0, isFocused, isHovered, emailSubmitButtonInsideInput }), disabled: isLoading || isDisabled, type: "email", onPointerEnter: () => setIsHovered(true), onPointerLeave: () => setIsHovered(false), onFocus: () => setIsFocused(true), onBlur: () => setIsFocused(false), autoComplete: "email" }), !emailSubmitButtonInsideInput && (0, import_jsx_runtime215.jsx)(TypographyButton, { dataTestId: "submit_button", buttonClassName: "login-with-email-form__button", type: "submit", loading: isLoading, disabled: isLoading || emailInput.length < 3 || isDisabled, buttonVariant: "brand-primary", buttonPadding: "login-screen-height", expanded: true, copykey: buttonCopyKey, typographyProps: {
    color: "inherit"
  }, children: t2(buttonCopyKey) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/EmailSignInSection/LoginEmailForm.js
var LoginEmailForm = ({ isLoading: isExternalLoading, onSubmit, onSubmitError, currentEmail, className, style }) => {
  var _a, _b;
  const { walletConnectorOptions, projectSettings } = useInternalDynamicContext();
  const { view, setView } = useViewContext();
  const { setErrorMessage } = useErrorContext();
  const { engageCaptcha } = useCaptchaContext();
  const [invalidEmail, setInvalidEmail] = (0, import_react247.useState)(false);
  const emailWalletConnector = findEmailOtpWalletConnector(walletConnectorOptions);
  const { handleEmailSubmitWithOptionalCaptcha, isEmailProviderLoading } = useEmailProvider({
    emailWalletConnector
  });
  const isLoading = (0, import_react247.useMemo)(() => isEmailProviderLoading || isExternalLoading, [isEmailProviderLoading, isExternalLoading]);
  const handleEmailSubmitError = (error) => {
    if (error.code === "invalid_email_address") {
      setInvalidEmail(true);
    } else {
      setErrorMessage(error.code);
    }
    logger2.debug(error);
    onSubmitError === null || onSubmitError === void 0 ? void 0 : onSubmitError();
  };
  const handleSubmit = (emailInput) => __awaiter(void 0, void 0, void 0, function* () {
    var _c;
    try {
      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
      if (((_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _c === void 0 ? void 0 : _c.enabled) && (emailWalletConnector === null || emailWalletConnector === void 0 ? void 0 : emailWalletConnector.key) !== "magicemailotp") {
        engageCaptcha({
          authMethod: "email",
          onCaptchaSuccess: (captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
            try {
              yield handleEmailSubmitWithOptionalCaptcha(emailInput, captchaToken);
            } catch (e2) {
              setView(view.type);
              handleEmailSubmitError(e2);
            }
          })
        });
        return;
      }
      yield handleEmailSubmitWithOptionalCaptcha(emailInput);
    } catch (error) {
      handleEmailSubmitError(error);
    }
  });
  if (!isEmailProviderEnabled((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [])) {
    logger2.error("Failed to render EmailSignInSection - no sign in provider enabled");
    return null;
  }
  return (0, import_jsx_runtime216.jsx)(EmailForm, { onSubmit: handleSubmit, isLoading, currentEmail, emailSubmitButtonInsideInput: (_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design.modal) === null || _b === void 0 ? void 0 : _b.emailSubmitButtonInsideInput, isEmailInvalid: invalidEmail, className, style });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/IconListTile/IconListTile.js
var import_jsx_runtime217 = __toESM(require_jsx_runtime(), 1);
var IconListTile = (_a) => {
  var { children, className } = _a, props = __rest(_a, ["children", "className"]);
  return (0, import_jsx_runtime217.jsx)(ListTile, Object.assign({}, props, { className: classNames(className, "icon-list-tile"), children: (0, import_jsx_runtime217.jsx)("div", { className: "icon-list-tile--children", children }) }));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/AccountExistsView/AccountExistsView.js
var import_qrcode107 = __toESM(require_browser(), 1);
var AccountExistsView = () => {
  const { existentAccountData } = useAccountExistsContext();
  const { t: t2 } = useTranslation();
  const { email, embeddedSocialSigninProvider } = existentAccountData || {};
  const existingSocialSignInProvider = getSocialSignInProviderForProviderEnum(embeddedSocialSigninProvider);
  const { socialProvider, setSocialProvider, socialWalletConnector } = useSocialRedirectContext();
  const findSocialIcon2 = useFindSocialIcon();
  const { mutate: handleNewLoging } = useMutation(() => __awaiter(void 0, void 0, void 0, function* () {
    setSocialProvider(existingSocialSignInProvider);
    yield socialWalletConnector === null || socialWalletConnector === void 0 ? void 0 : socialWalletConnector.endSession();
    return socialWalletConnector === null || socialWalletConnector === void 0 ? void 0 : socialWalletConnector.connect(embeddedSocialSigninProvider);
  }));
  const renderFullMessage = () => {
    const messageTrail = embeddedSocialSigninProvider ? t2("dyn_account_exists.description_social") : (0, import_jsx_runtime218.jsxs)(import_jsx_runtime218.Fragment, { children: [t2("dyn_account_exists.description_email"), " ", (0, import_jsx_runtime218.jsx)("strong", { children: email }), " ", t2("dyn_account_exists.trail_message_email")] });
    return messageTrail;
  };
  return (0, import_jsx_runtime218.jsxs)("div", { className: "account-exists__container", children: [(0, import_jsx_runtime218.jsx)(UserProfileIcon, { className: "account-exists__image" }), (0, import_jsx_runtime218.jsxs)("div", { className: "account-exists__main", children: [(0, import_jsx_runtime218.jsx)("div", { className: "account-exists__content", children: (0, import_jsx_runtime218.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "account-exists__content--secondary", copykey: "dyn_account_exists", children: renderFullMessage() }) }), embeddedSocialSigninProvider ? (0, import_jsx_runtime218.jsxs)(IconListTile, { dataTestId: `inline-${embeddedSocialSigninProvider}`, onClick: () => handleNewLoging(), className: "social-sign-in--tile", children: [(0, import_jsx_runtime218.jsx)(IconWithSpinner, { Icon: findSocialIcon2(embeddedSocialSigninProvider), isSpinning: socialProvider === existingSocialSignInProvider, iconSize: 32 }), (0, import_jsx_runtime218.jsx)(Typography, { variant: "button_primary", copykey: "dyn_account_exists.connect", children: t2("dyn_account_exists.connect", {
    socialOauth: capitalize3(embeddedSocialSigninProvider === null || embeddedSocialSigninProvider === void 0 ? void 0 : embeddedSocialSigninProvider.toString())
  }) })] }, embeddedSocialSigninProvider) : (0, import_jsx_runtime218.jsx)(LoginEmailForm, { isLoading: false, currentEmail: email })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/BridgeNextWalletConnectionView/BridgeNextWalletConnectionView.js
var import_jsx_runtime220 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layouts/BridgeNextWalletToConnectLayout/BridgeNextWalletToConnectLayout.js
var import_jsx_runtime219 = __toESM(require_jsx_runtime(), 1);
var import_react249 = __toESM(require_react(), 1);
var import_react_dom110 = __toESM(require_react_dom(), 1);
var import_qrcode108 = __toESM(require_browser(), 1);
var BridgeNextWalletToConnectLayout = ({ chainName, chainIcon, onClickAction, onClickClose }) => {
  const closeButton = onClickClose && (0, import_jsx_runtime219.jsx)(IconButton, { type: "button", onClick: onClickClose, "data-testid": "close-button", children: (0, import_jsx_runtime219.jsx)(SvgClose, {}) });
  return (0, import_jsx_runtime219.jsxs)("div", { className: "bridge-next-wallet-to-connect-layout", children: [(0, import_jsx_runtime219.jsx)(ModalHeader, { trailing: closeButton, alignContent: "bottom", children: chainIcon && (0, import_jsx_runtime219.jsx)("div", { className: "bridge-next-wallet-to-connect-layout__chain-icon", children: chainIcon }) }), (0, import_jsx_runtime219.jsxs)("div", { className: "bridge-next-wallet-to-connect-layout__body", children: [(0, import_jsx_runtime219.jsxs)(Typography, { color: "primary", variant: "title", children: ["Nice! Now let’s connect your ", chainName, " wallet"] }), (0, import_jsx_runtime219.jsx)(TypographyButton, { expanded: true, buttonPadding: "large", onClick: onClickAction, children: `Connect ${chainName} wallet` })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/BridgeNextWalletConnectionView/BridgeNextWalletConnectionView.js
var import_react250 = __toESM(require_react(), 1);
var import_react_dom111 = __toESM(require_react_dom(), 1);
var import_qrcode109 = __toESM(require_browser(), 1);
var BridgeNextWalletConnectionView = () => {
  const { setShowAuthFlow, bridgeChainsToConnect } = useInternalDynamicContext();
  const { setView } = useViewContext();
  if (!(bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length)) {
    throw new DynamicError("No wallets to connect");
  }
  const [nextWalletToConnect] = bridgeChainsToConnect;
  const { chain } = nextWalletToConnect;
  const chainInfo = getChainInfoWithOverrides(chain);
  const ChainIcon2 = getChainIcon(chain);
  if (!chainInfo) {
    throw new DynamicError("No chain info found for chain", chain);
  }
  return (0, import_jsx_runtime220.jsx)(BridgeNextWalletToConnectLayout, { chainName: chainInfo.blockchainName, chainIcon: (0, import_jsx_runtime220.jsx)(ChainIcon2, {}), onClickAction: () => setView("wallet-list"), onClickClose: () => setShowAuthFlow(false, { emitCancelAuth: true }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/BridgeSummaryView/BridgeSummaryView.js
var import_jsx_runtime222 = __toESM(require_jsx_runtime(), 1);
var import_react252 = __toESM(require_react(), 1);
var import_react_dom113 = __toESM(require_react_dom(), 1);
var import_qrcode111 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layouts/ConnectedWalletsListLayout/ConnectedWalletsListLayout.js
var import_jsx_runtime221 = __toESM(require_jsx_runtime(), 1);
var import_react251 = __toESM(require_react(), 1);
var import_react_dom112 = __toESM(require_react_dom(), 1);
var import_qrcode110 = __toESM(require_browser(), 1);
var ConnectedWalletsListLayout = ({ title: title2, body, onClickBack, onClickClose, onClickAction, actionButtonText = "Continue", children, copykey }) => {
  const closeButton = onClickClose && (0, import_jsx_runtime221.jsx)(IconButton, { type: "button", onClick: onClickClose, "data-testid": "close-button", children: (0, import_jsx_runtime221.jsx)(SvgClose, {}) });
  const backButton = onClickBack && (0, import_jsx_runtime221.jsx)(IconButton, { type: "button", onClick: onClickBack, "data-testid": "back-button", children: (0, import_jsx_runtime221.jsx)(SvgChevronLeft, {}) });
  return (0, import_jsx_runtime221.jsxs)("div", { className: "connected-wallets-list-layout", children: [(0, import_jsx_runtime221.jsx)(ModalHeader, { leading: backButton, trailing: closeButton, children: (0, import_jsx_runtime221.jsx)(Typography, { variant: "title", color: "primary", copykey, children: title2 }) }), (0, import_jsx_runtime221.jsxs)("div", { className: "connected-wallets-list-layout__body", children: [(0, import_jsx_runtime221.jsx)(Typography, { variant: "body_normal", color: "secondary", className: "connected-wallets-list-layout__body__text", children: body }), children, (0, import_jsx_runtime221.jsx)(TypographyButton, { buttonPadding: "large", buttonVariant: "primary", onClick: onClickAction, children: actionButtonText })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/BridgeSummaryView/BridgeSummaryView.js
var BridgeSummaryView = () => {
  const { primaryWallet, setShowAuthFlow, appName, bridgeChains = [] } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const onClickClose = () => setShowAuthFlow(false, { emitCancelAuth: true });
  const body = (0, import_react252.useMemo)(() => {
    const blockchainNames = bridgeChains.map(({ chain }) => {
      var _a;
      return (_a = getChainInfoWithOverrides(chain)) === null || _a === void 0 ? void 0 : _a.blockchainName;
    });
    const [firstBlockchainName, secondBlockchainName] = blockchainNames;
    return t2("dyn_bridge.summary_view.connection_succeed", {
      firstBlockchainName,
      secondBlockchainName
    });
  }, [bridgeChains, t2]);
  const createPrimaryWalletCard = (wallet) => {
    const PrimaryWalletChainIcon = getChainIcon(wallet.chain);
    const primaryWalletChainInfo = getChainInfoWithOverrides(wallet.chain);
    return (0, import_jsx_runtime222.jsx)(DynamicBridgeWalletCard, { networkIcon: (0, import_jsx_runtime222.jsx)(PrimaryWalletChainIcon, {}), networkName: primaryWalletChainInfo === null || primaryWalletChainInfo === void 0 ? void 0 : primaryWalletChainInfo.displayName, children: (0, import_jsx_runtime222.jsx)(DynamicBridgeWalletCardBody, { walletKey: wallet.connector.key, walletAddress: wallet.address, walletBalance: (
      // eslint-disable-next-line react/jsx-wrap-multilines
      (0, import_jsx_runtime222.jsx)(Balance, { wallet, network: wallet.chain })
    ) }) });
  };
  return (0, import_jsx_runtime222.jsxs)(ConnectedWalletsListLayout, { onClickClose, onClickAction: onClickClose, copykey: "dyn_bridge.summary_view.title", title: t2("dyn_bridge.summary_view.title", { appName }), body, children: [primaryWallet && createPrimaryWalletCard(primaryWallet), (0, import_jsx_runtime222.jsx)(MemoSecondaryWallets, { hideUnlinkAction: true })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/BridgeWelcomeView/BridgeWelcomeView.js
var import_jsx_runtime224 = __toESM(require_jsx_runtime(), 1);
var import_react254 = __toESM(require_react(), 1);
var import_react_dom115 = __toESM(require_react_dom(), 1);
var import_qrcode113 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layouts/BridgeWelcomeLayout/BridgeWelcomeLayout.js
var import_jsx_runtime223 = __toESM(require_jsx_runtime(), 1);
var import_react253 = __toESM(require_react(), 1);
var import_react_dom114 = __toESM(require_react_dom(), 1);
var import_qrcode112 = __toESM(require_browser(), 1);
var BridgeWelcomeLayout = ({ body, chains = [], onClickAction, onClickClose, title: title2, actionButtonText, copykey }) => {
  const closeButton = onClickClose && (0, import_jsx_runtime223.jsx)(IconButton, { type: "button", onClick: onClickClose, "data-testid": "close-button", children: (0, import_jsx_runtime223.jsx)(SvgClose, {}) });
  return (0, import_jsx_runtime223.jsxs)("div", { className: "bridge-welcome-layout", children: [(0, import_jsx_runtime223.jsx)(ModalHeader, { trailing: closeButton, alignContent: "bottom", children: (0, import_jsx_runtime223.jsx)("div", { className: "bridge-welcome-layout__chain-icon-group", children: [...chains].reverse().map((chain, index) => (0, import_jsx_runtime223.jsx)("div", { className: "bridge-welcome-layout__chain-icon", style: { zIndex: index }, children: chain.icon }, chain.id)) }) }), (0, import_jsx_runtime223.jsxs)("div", { className: "bridge-welcome-layout__body", children: [(0, import_jsx_runtime223.jsxs)("div", { className: "bridge-welcome-layout__message-container", children: [(0, import_jsx_runtime223.jsx)(Typography, { variant: "title", color: "primary", copykey, children: title2 }), (0, import_jsx_runtime223.jsx)(Typography, { variant: "body_normal", color: "secondary", children: body })] }), (0, import_jsx_runtime223.jsx)("div", { children: (0, import_jsx_runtime223.jsx)(Stepper, { children: chains.map((chain) => (0, import_jsx_runtime223.jsx)(Step, { children: chain.name }, chain.id)) }) }), (0, import_jsx_runtime223.jsx)(TypographyButton, { buttonVariant: "primary", buttonPadding: "large", onClick: onClickAction, children: actionButtonText })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/BridgeWelcomeView/BridgeWelcomeView.js
var isChainInfoDefined = (chainInfo) => chainInfo !== void 0;
var BridgeWelcomeView = () => {
  const { appName, bridgeChains = [], setShowAuthFlow } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { t: t2 } = useTranslation();
  const body = (0, import_react254.useMemo)(() => {
    const blockchainNames = bridgeChains.map(({ chain }) => {
      var _a;
      return (_a = getChainInfoWithOverrides(chain)) === null || _a === void 0 ? void 0 : _a.blockchainName;
    });
    const [firstBlockchainName, secondBlockchainName] = blockchainNames;
    return t2("dyn_bridge.welcome_view.description", {
      firstBlockchainName,
      secondBlockchainName
    });
  }, [bridgeChains, t2]);
  const chains = (0, import_react254.useMemo)(() => bridgeChains.map(({ chain }, index) => {
    const chainInfo = getChainInfoWithOverrides(chain);
    const ChainIcon2 = getChainIcon(chain);
    if (chainInfo && ChainIcon2) {
      return {
        icon: (0, import_jsx_runtime224.jsx)(ChainIcon2, {}),
        id: index,
        name: chainInfo.blockchainName
      };
    }
    return void 0;
  }).filter(isChainInfoDefined), [bridgeChains]);
  return (0, import_jsx_runtime224.jsx)(BridgeWelcomeLayout, { onClickClose: () => setShowAuthFlow(false, { emitCancelAuth: true }), title: t2("dyn_bridge.welcome_view.title", { appName }), copykey: "dyn_bridge.welcome_view.title", body, chains, actionButtonText: t2("dyn_bridge.welcome_view.button"), onClickAction: () => setView("wallet-list") });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CaptchaVerifyUser/CaptchaVerifyUser.js
var import_jsx_runtime226 = __toESM(require_jsx_runtime(), 1);
var import_react256 = __toESM(require_react(), 1);
var import_react_dom117 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Captcha/Captcha.js
var import_jsx_runtime225 = __toESM(require_jsx_runtime(), 1);
var import_react255 = __toESM(require_react(), 1);
var import_react_dom116 = __toESM(require_react_dom(), 1);
var import_qrcode114 = __toESM(require_browser(), 1);
var Captcha = ({ handleSuccess }) => {
  var _a;
  const { projectSettings } = useInternalDynamicContext();
  if (!((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _a === void 0 ? void 0 : _a.siteKey))
    return null;
  return (0, import_jsx_runtime225.jsx)("form", { "data-testid": "captcha-form", children: (0, import_jsx_runtime225.jsx)(esm_default, { sitekey: projectSettings.security.hCaptcha.siteKey, onVerify: (token) => handleSuccess(token), theme: document.body.dataset.dynamicTheme }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CaptchaVerifyUser/CaptchaVerifyUser.js
var import_qrcode115 = __toESM(require_browser(), 1);
var CaptchaVerifyUser = () => {
  const { t: t2 } = useTranslation();
  const { captchaAuthState, setCaptchaToken } = useCaptchaContext();
  const handleSuccess = (captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    setCaptchaToken(captchaToken);
    yield (_a = captchaAuthState === null || captchaAuthState === void 0 ? void 0 : captchaAuthState.onCaptchaSuccess) === null || _a === void 0 ? void 0 : _a.call(captchaAuthState, captchaToken);
  });
  return (0, import_jsx_runtime226.jsxs)("div", { className: "captcha-verify-user__container", children: [(0, import_jsx_runtime226.jsx)(CaptchaWaveIcon, { className: "captcha-verify-user__icon" }), (0, import_jsx_runtime226.jsx)(Typography, { weight: "medium", variant: "title", color: "primary", className: "captcha-verify-user__title", copykey: "dyn_captcha.verify_user_title", children: t2("dyn_captcha.verify_user_title") }), (0, import_jsx_runtime226.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "captcha-verify-user__subtitle", copykey: "dyn_captcha.verify_user_subtitle", children: t2("dyn_captcha.verify_user_subtitle") }), (0, import_jsx_runtime226.jsx)(Captcha, { handleSuccess }), (0, import_jsx_runtime226.jsx)(PoweredByDynamic, { classNameRoot: "captcha-verify-user__dynamic-logo" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CoinbaseMPCClaimIntro/CoinbaseMPCClaimIntro.js
var import_jsx_runtime227 = __toESM(require_jsx_runtime(), 1);
var import_react257 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/alt-key.js
var React53 = __toESM(require_react(), 1);
var _path37;
var _excluded39 = ["title", "titleId"];
function _extends46() {
  _extends46 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends46.apply(this, arguments);
}
function _objectWithoutProperties39(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose42(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose42(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgAltKey = function SvgAltKey2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties39(_ref2, _excluded39);
  return React53.createElement("svg", _extends46({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React53.createElement("title", {
    id: titleId
  }, title2) : null, _path37 || (_path37 = React53.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M15 4a5 5 0 0 0-4.786 6.453 1 1 0 0 1-.25.997L4 17.414V20h2v-1a1 1 0 0 1 1-1h1v-1a1 1 0 0 1 1-1h1.586l1.964-1.964a1 1 0 0 1 .997-.25A5 5 0 1 0 15 4ZM8 20v1a1 1 0 0 1-1 1H4a2 2 0 0 1-2-2v-2.586A2 2 0 0 1 2.586 16l5.562-5.562a7 7 0 1 1 5.414 5.414l-1.855 1.855A1 1 0 0 1 11 18h-1v1a1 1 0 0 1-1 1H8Zm6-13a1 1 0 0 1 1-1 3 3 0 0 1 3 3 1 1 0 1 1-2 0 1 1 0 0 0-1-1 1 1 0 0 1-1-1Z",
    fill: "#383C48",
    fillOpacity: 0.4
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/lock.js
var React54 = __toESM(require_react(), 1);
var _path38;
var _excluded40 = ["title", "titleId"];
function _extends47() {
  _extends47 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends47.apply(this, arguments);
}
function _objectWithoutProperties40(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose43(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose43(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgLock = function SvgLock2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties40(_ref2, _excluded40);
  return React54.createElement("svg", _extends47({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React54.createElement("title", {
    id: titleId
  }, title2) : null, _path38 || (_path38 = React54.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M7 7a5 5 0 0 1 10 0v3h1a3 3 0 0 1 3 3v6a3 3 0 0 1-3 3H6a3 3 0 0 1-3-3v-6a3 3 0 0 1 3-3h1V7Zm2 3h6V7a3 3 0 1 0-6 0v3Zm-3 2a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1H6Zm6 2a1 1 0 0 1 1 1v2a1 1 0 1 1-2 0v-2a1 1 0 0 1 1-1Z",
    fill: "#383C48",
    fillOpacity: 0.4
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/wallet-claim-hero.js
var React55 = __toESM(require_react(), 1);
var _path39;
var _path210;
var _path310;
var _path42;
var _g5;
var _path52;
var _defs2;
var _excluded41 = ["title", "titleId"];
function _extends48() {
  _extends48 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends48.apply(this, arguments);
}
function _objectWithoutProperties41(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose44(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose44(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgWalletClaimHero = function SvgWalletClaimHero2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties41(_ref2, _excluded41);
  return React55.createElement("svg", _extends48({
    width: 327,
    height: 112,
    viewBox: "0 0 327 112",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React55.createElement("title", {
    id: titleId
  }, title2) : null, React55.createElement("g", {
    clipPath: "url(#wallet-claim-hero_svg__a)"
  }, React55.createElement("mask", {
    id: "wallet-claim-hero_svg__b",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 0,
    y: 0,
    width: 327,
    height: 112
  }, _path39 || (_path39 = React55.createElement("path", {
    d: "M315 0H12C5.373 0 0 5.373 0 12v88c0 6.627 5.373 12 12 12h303c6.627 0 12-5.373 12-12V12c0-6.627-5.373-12-12-12Z",
    fill: "#fff"
  }))), React55.createElement("g", {
    mask: "url(#wallet-claim-hero_svg__b)"
  }, _path210 || (_path210 = React55.createElement("path", {
    d: "M164 228c62.96 0 114-51.04 114-114S226.96 0 164 0 50 51.04 50 114s51.04 114 114 114Z",
    fill: "url(#wallet-claim-hero_svg__c)",
    fillOpacity: 0.12
  })), React55.createElement("mask", {
    id: "wallet-claim-hero_svg__d",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 86,
    y: 29,
    width: 40,
    height: 40
  }, _path310 || (_path310 = React55.createElement("path", {
    d: "M116.91 29 86 37.282l8.282 30.91 30.91-8.282L116.91 29Z",
    fill: "#fff"
  }))), React55.createElement("g", {
    mask: "url(#wallet-claim-hero_svg__d)"
  }, React55.createElement("mask", {
    id: "wallet-claim-hero_svg__e",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 90,
    y: 33,
    width: 31,
    height: 31
  }, _path42 || (_path42 = React55.createElement("path", {
    d: "M119.763 44.8c-2.097-7.824-10.139-12.467-17.963-10.371-7.824 2.096-12.468 10.139-10.371 17.963 2.096 7.824 10.139 12.467 17.963 10.37 7.824-2.096 12.467-10.138 10.371-17.962Z",
    fill: "#fff"
  }))), _g5 || (_g5 = React55.createElement("g", {
    mask: "url(#wallet-claim-hero_svg__e)"
  }, React55.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M118.709 55.166a14.617 14.617 0 0 0 1.054-10.366c-2.097-7.824-10.139-12.467-17.963-10.371-7.825 2.096-12.468 10.139-10.371 17.963a14.612 14.612 0 0 0 6.097 8.451c1.808-3.916 6.565-6.42 9.647-7.247 3.083-.826 7.955-1.146 11.536 1.57Zm-19.375-8.688a5.5 5.5 0 1 1 10.625-2.848 5.5 5.5 0 0 1-10.625 2.848Z",
    fill: "#4779FF"
  })))), _path52 || (_path52 = React55.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "m207.67 19.875-.767 2.862a9.86 9.86 0 0 0-5.861 6.61c-1.412 5.269 1.715 10.684 6.984 12.096 5.268 1.412 10.684-1.715 12.096-6.984a9.862 9.862 0 0 0-1.771-8.655l.767-2.861a5.926 5.926 0 0 0-11.448-3.068Zm9.321 2.498-.444 1.655a9.844 9.844 0 0 0-3.409-1.665 9.847 9.847 0 0 0-3.785-.262l.444-1.656a3.723 3.723 0 1 1 7.194 1.928Zm-3.445 8.52a2.57 2.57 0 0 1-2.019 1.862l-.539 2.011a1.1 1.1 0 1 1-2.127-.57l.539-2.01a2.569 2.569 0 1 1 4.146-1.294ZM164.89 32.064a6.223 6.223 0 0 0-1.78 0c-.68.098-1.313.337-1.815.527l-.135.05-16.681 6.256-.406.152c-1.922.718-3.61 1.348-4.91 2.493a9.333 9.333 0 0 0-2.552 3.683c-.616 1.62-.614 3.421-.611 5.473l.001.434V66.01c0 8.793 4.782 16.125 9.952 21.51 5.205 5.422 11.159 9.252 14.308 11.089l.127.075c.575.337 1.321.775 2.307.987a6.624 6.624 0 0 0 2.61 0c.986-.212 1.732-.65 2.307-.987l.127-.075c3.149-1.837 9.103-5.667 14.308-11.088 5.17-5.386 9.952-12.718 9.952-21.511V51.13l.001-.433c.003-2.052.005-3.854-.611-5.473a9.333 9.333 0 0 0-2.552-3.683c-1.3-1.145-2.988-1.775-4.91-2.493-.134-.05-.27-.1-.406-.152l-16.681-6.255-.135-.05c-.502-.19-1.135-.43-1.815-.528Zm-6.946 16.362a9.282 9.282 0 1 1 13.127 13.128 9.282 9.282 0 0 1-13.127-13.128Zm3.282 3.282a4.64 4.64 0 1 1 6.563 6.563 4.64 4.64 0 0 1-6.563-6.563Zm3.515 14.885a11.63 11.63 0 0 1-2.945-.377v15.598h4.641v-4.51h4.601v-4.642h-4.601V66.47a11.69 11.69 0 0 1-1.696.123Z",
    fill: "#4779FF"
  })))), _defs2 || (_defs2 = React55.createElement("defs", null, React55.createElement("linearGradient", {
    id: "wallet-claim-hero_svg__c",
    x1: 164,
    y1: 0,
    x2: 164,
    y2: 93.5,
    gradientUnits: "userSpaceOnUse"
  }, React55.createElement("stop", {
    stopColor: "#4779FF"
  }), React55.createElement("stop", {
    offset: 1,
    stopColor: "#4779FF",
    stopOpacity: 0
  })), React55.createElement("clipPath", {
    id: "wallet-claim-hero_svg__a"
  }, React55.createElement("path", {
    fill: "#fff",
    d: "M0 0h327v112H0z"
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CoinbaseMPCClaimIntro/CoinbaseMPCClaimIntro.js
var import_react_dom118 = __toESM(require_react_dom(), 1);
var import_qrcode116 = __toESM(require_browser(), 1);
var CoinbaseMPCClaimIntro = () => {
  const { setShowAuthFlow } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { t: t2 } = useTranslation();
  const closeButton = (0, import_jsx_runtime227.jsx)(IconButton, { onClick: () => setShowAuthFlow(false), type: "button", children: (0, import_jsx_runtime227.jsx)(SvgClose, {}) });
  return (0, import_jsx_runtime227.jsxs)(import_jsx_runtime227.Fragment, { children: [(0, import_jsx_runtime227.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime227.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", copykey: "dyn_create_password.intro.title", children: t2("dyn_create_password.intro.title") }) }), (0, import_jsx_runtime227.jsx)("div", { className: "mpc-claim-intro", children: (0, import_jsx_runtime227.jsxs)("div", { className: "mpc-claim-intro__body", children: [(0, import_jsx_runtime227.jsx)("div", { className: "mpc-claim-intro__body__description", children: (0, import_jsx_runtime227.jsx)(SvgWalletClaimHero, {}) }), (0, import_jsx_runtime227.jsx)("div", { className: "confirm-password-description", children: (0, import_jsx_runtime227.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_create_password.intro.description", children: t2("dyn_create_password.intro.description.title") }) }), (0, import_jsx_runtime227.jsxs)("div", { className: "mpc-claim-intro__body__card", children: [(0, import_jsx_runtime227.jsxs)("div", { className: "mpc-claim-intro__body__card__statement", children: [(0, import_jsx_runtime227.jsx)("div", { className: "mpc-claim-intro__body__card__icon", children: (0, import_jsx_runtime227.jsx)(SvgLock, {}) }), (0, import_jsx_runtime227.jsxs)("div", { children: [(0, import_jsx_runtime227.jsx)(Typography, { variant: "body_normal", color: "primary", style: { letterSpacing: "-0.15px" }, copykey: "dyn_create_password.intro.description.additional_protection.title", children: t2("dyn_create_password.intro.description.additional_protection.title") }), (0, import_jsx_runtime227.jsx)(Typography, { variant: "body_small", color: "secondary", weight: "regular", copykey: "dyn_create_password.intro.description.additional_protection.description", children: t2("dyn_create_password.intro.description.additional_protection.description") })] })] }), (0, import_jsx_runtime227.jsxs)("div", { className: "mpc-claim-intro__body__card__statement", children: [(0, import_jsx_runtime227.jsx)("div", { className: "mpc-claim-intro__body__card__icon", children: (0, import_jsx_runtime227.jsx)(SvgAltKey, {}) }), (0, import_jsx_runtime227.jsxs)("div", { children: [(0, import_jsx_runtime227.jsx)(Typography, { variant: "body_normal", color: "primary", style: { letterSpacing: "-0.15px" }, copykey: "dyn_create_password.intro.description.restore_access.title", children: t2("dyn_create_password.intro.description.restore_access.title") }), (0, import_jsx_runtime227.jsx)(Typography, { variant: "body_small", color: "secondary", weight: "regular", copykey: "dyn_create_password.intro.description.restore_access.description", children: t2("dyn_create_password.intro.description.restore_access.description") })] })] })] }), (0, import_jsx_runtime227.jsx)(TypographyButton, { buttonPadding: "large", buttonVariant: "brand-primary", typographyProps: {
    color: "inherit"
  }, onClick: () => {
    setView("create-password-view", {
      notCalledFromWalletUtils: true
    });
  }, copykey: "dyn_create_password.intro.continue", children: t2("dyn_create_password.intro.continue") })] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/CollectUserDataView.js
var import_jsx_runtime234 = __toESM(require_jsx_runtime(), 1);
var import_react264 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/check-connection.js
var React56 = __toESM(require_react(), 1);
var _path40;
var _excluded42 = ["title", "titleId"];
function _extends49() {
  _extends49 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends49.apply(this, arguments);
}
function _objectWithoutProperties42(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose45(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose45(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgCheckConnection = function SvgCheckConnection2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties42(_ref2, _excluded42);
  return React56.createElement("svg", _extends49({
    width: 65,
    height: 64,
    viewBox: "0 0 65 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React56.createElement("title", {
    id: titleId
  }, title2) : null, _path40 || (_path40 = React56.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32.5 64c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32C14.827 0 .5 14.327.5 32c0 17.673 14.327 32 32 32Zm12.845-39.155a1.667 1.667 0 1 0-2.357-2.357L27.5 37.976l-5.488-5.488a1.667 1.667 0 1 0-2.357 2.357l6.666 6.667c.651.65 1.707.65 2.357 0l16.667-16.667Z",
    fill: "#4779FF"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/CollectUserDataView.js
var import_react_dom124 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/OnboardingUserDataForm/OnboardingUserDataForm.js
var import_jsx_runtime233 = __toESM(require_jsx_runtime(), 1);
var import_react263 = __toESM(require_react(), 1);
var import_react_dom123 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js
var import_react261 = __toESM(require_react(), 1);
var import_jsx_runtime231 = __toESM(require_jsx_runtime(), 1);
var import_react_dom121 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleVerificationRequired/useHandleVerificationRequired.js
var import_react260 = __toESM(require_react(), 1);
var import_jsx_runtime230 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useOtpVerificationRequest/useOtpVerificationRequest.js
var import_react259 = __toESM(require_react(), 1);
var import_jsx_runtime229 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/sms/sms.js
var import_jsx_runtime228 = __toESM(require_jsx_runtime(), 1);
var import_react258 = __toESM(require_react(), 1);
var createSmsVerification = (_a) => __awaiter(void 0, [_a], void 0, function* ({ isoCountryCode, phoneNumber, phoneCountryCode, environmentId, captchaToken }) {
  try {
    return yield sdkApi().createSmsVerification({
      environmentId,
      smsVerificationCreateRequest: {
        captchaToken,
        isoCountryCode,
        phoneCountryCode,
        phoneNumber
      }
    });
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    throw new SmsVerificationError(data.error, data.code);
  }
});
var signInWithSmsVerification = (_b) => __awaiter(void 0, [_b], void 0, function* ({ verificationToken, verificationUUID, environmentId, captchaToken, sessionPublicKey }) {
  var _c;
  try {
    return yield sdkApi().signInWithSmsVerification({
      environmentId,
      smsVerificationVerifyRequest: {
        captchaToken,
        sessionPublicKey,
        verificationToken,
        verificationUUID
      }
    });
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    if (((_c = data.error) === null || _c === void 0 ? void 0 : _c.code) === "missing_from_list") {
      throw new NoAccessError({ phoneNumber: data.payload.phoneNumber });
    }
    if (data.code === "wrong_sms_verification_token") {
      throw new SmsVerificationError(Locale.getInstance().t("dyn_login.helper.phone_number_form.invalid_sms_verification"), data.code);
    }
    if (data.error.code === "sandbox_maximum_threshold_reached") {
      throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    throw new SmsVerificationError(data.error, data.code);
  }
});
var retrySmsVerification = (_d) => __awaiter(void 0, [_d], void 0, function* ({ isoCountryCode, phoneCountryCode, phoneNumber, environmentId, verificationUUID }) {
  try {
    return yield sdkApi().retrySmsVerification({
      environmentId,
      smsVerificationRetryRequest: {
        isoCountryCode,
        phoneCountryCode,
        phoneNumber,
        verificationUUID
      }
    });
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    throw new SmsVerificationError(data.error, data.code);
  }
});
var verifySms = (_e2) => __awaiter(void 0, [_e2], void 0, function* ({ verificationToken, verificationUUID, environmentId }) {
  try {
    return yield sdkApi().verifySmsVerification({
      environmentId,
      smsVerificationVerifyRequest: {
        verificationToken,
        verificationUUID
      }
    });
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    if (data.error.code === "sandbox_maximum_threshold_reached") {
      throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    throw new SmsVerificationError(data.error, data.code);
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useOtpVerificationRequest/useOtpVerificationRequest.js
var import_react_dom119 = __toESM(require_react_dom(), 1);
var import_qrcode117 = __toESM(require_browser(), 1);
var useOtpVerificationRequestRaw = () => {
  const { environmentId, user, userWithMissingInfo } = useInternalDynamicContext();
  const { verificationUUID: contextVerificationUUID } = useVerification();
  const verifyOtp = (0, import_react259.useCallback)((handleVerificationRequired, verificationToken, destination, localVerificationUUID) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!user && !userWithMissingInfo)
      throw new DynamicError(USER_NOT_LOGGED_IN);
    if (!localVerificationUUID && !contextVerificationUUID)
      throw new DynamicError("No verification UUID is available");
    const verificationUUID = localVerificationUUID !== null && localVerificationUUID !== void 0 ? localVerificationUUID : contextVerificationUUID;
    const verify = destination === "email" ? verifyEmail : verifySms;
    const updateSelfResponse = yield verify({
      environmentId,
      verificationToken,
      verificationUUID
    });
    const updatedUser = updateSelfResponse.user;
    const missingFields = (_a = updatedUser === null || updatedUser === void 0 ? void 0 : updatedUser.missingFields) !== null && _a !== void 0 ? _a : [];
    const requiredVerificationDestination = getVerificationDestination(updateSelfResponse.nextView);
    storeAuthTokenAndUser(updateSelfResponse);
    if (requiredVerificationDestination)
      return handleVerificationRequired({
        destination: requiredVerificationDestination,
        missingFields,
        updateUserProfileResponse: updateSelfResponse
      });
    return {
      isEmailVerificationRequired: false,
      isSmsVerificationRequired: false,
      missingFields,
      updateUserProfileResponse: updateSelfResponse
    };
  }), [contextVerificationUUID, environmentId, user, userWithMissingInfo]);
  return { verifyOtp };
};
var useOtpVerificationRequest = () => {
  const handleVerificationRequired = useHandleVerificationRequired();
  const { verifyOtp } = useOtpVerificationRequestRaw();
  return (0, import_react259.useMemo)(() => ({
    verifyOtp: (token, destination, verificationUUID) => verifyOtp(handleVerificationRequired, token, destination, verificationUUID)
  }), [handleVerificationRequired, verifyOtp]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleVerificationRequired/useHandleVerificationRequired.js
var import_react_dom120 = __toESM(require_react_dom(), 1);
var import_qrcode118 = __toESM(require_browser(), 1);
var getResponseInfo = (response, destination) => {
  var _a, _b, _c, _d, _e2, _f, _g16;
  if (destination === "email")
    return {
      displayDestination: (_a = response.emailVerification) === null || _a === void 0 ? void 0 : _a.email,
      verificationUUID: (_b = response.emailVerification) === null || _b === void 0 ? void 0 : _b.verificationUUID
    };
  return {
    displayDestination: formatPhone("+" + ((_d = (_c = response.smsVerification) === null || _c === void 0 ? void 0 : _c.phoneCountryCode) !== null && _d !== void 0 ? _d : "") + ((_f = (_e2 = response.smsVerification) === null || _e2 === void 0 ? void 0 : _e2.phoneNumber) !== null && _f !== void 0 ? _f : "")),
    verificationUUID: (_g16 = response.smsVerification) === null || _g16 === void 0 ? void 0 : _g16.verificationUUID
  };
};
var getVerificationDestination = (nextView) => {
  if (nextView === NextViewEnum.VerifyEmail)
    return "email";
  if (nextView === NextViewEnum.VerifySms)
    return "sms";
  return void 0;
};
var useHandleVerificationRequired = () => {
  const { setVerificationUUID, setDisplayedDestination } = useVerification();
  const { environmentId } = useInternalDynamicContext();
  const { verifyOtp } = useOtpVerificationRequestRaw();
  const collectNecessaryVerificationData = (0, import_react260.useCallback)((destination, updateUserProfileResponse) => __awaiter(void 0, void 0, void 0, function* () {
    if (destination === "email" && updateUserProfileResponse.emailVerification || destination === "sms" && updateUserProfileResponse.smsVerification)
      return updateUserProfileResponse;
    const userField = destination === "email" ? "email" : "phoneNumber";
    if (!updateUserProfileResponse.user[userField])
      throw new VerificationDataCollectionError(`missing ${userField} field to perform update`);
    const validatedUserFields = yield userFieldsSchema.validate({
      [userField]: updateUserProfileResponse.user[userField]
    });
    const { emailVerification, smsVerification } = yield updateUserProfileFields(environmentId, validatedUserFields);
    if (destination === "email" && !emailVerification || destination === "sms" && !smsVerification)
      throw new VerificationDataCollectionError(`could not get ${destination} verification data from api`);
    return Object.assign(Object.assign({}, updateUserProfileResponse), {
      emailVerification,
      smsVerification
    });
  }), [environmentId]);
  const handleVerificationRequired = (0, import_react260.useCallback)((_a) => __awaiter(void 0, [_a], void 0, function* ({ updateUserProfileResponse: updateUserProfileResponseRaw, missingFields, destination }) {
    const updateUserProfileResponse = yield collectNecessaryVerificationData(destination, updateUserProfileResponseRaw);
    const { displayDestination, verificationUUID } = getResponseInfo(updateUserProfileResponse, destination);
    setDisplayedDestination(displayDestination);
    setVerificationUUID(verificationUUID);
    const scopedVerify = (verificationToken) => __awaiter(void 0, void 0, void 0, function* () {
      return verifyOtp(handleVerificationRequired, verificationToken, destination, verificationUUID);
    });
    if (destination === "email")
      return {
        isEmailVerificationRequired: true,
        isSmsVerificationRequired: false,
        missingFields,
        updateUserProfileResponse,
        verifyOtp: scopedVerify
      };
    return {
      isEmailVerificationRequired: false,
      isSmsVerificationRequired: true,
      missingFields,
      updateUserProfileResponse,
      verifyOtp: scopedVerify
    };
  }), [
    collectNecessaryVerificationData,
    setDisplayedDestination,
    setVerificationUUID,
    verifyOtp
  ]);
  return handleVerificationRequired;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUser/useUpdateUser.js
var import_qrcode119 = __toESM(require_browser(), 1);
var useUpdateUser = (validationSchemaStripUnknown) => {
  const { environmentId, userWithMissingInfo, setCallback } = useInternalDynamicContext();
  const { setRetryData } = useVerification();
  const { selectedPhoneCountry } = useFieldsState();
  const handleVerificationRequired = useHandleVerificationRequired();
  const updateUser = (0, import_react261.useCallback)((userFields, options2) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    let { metadata } = userFields;
    metadata = metadata ? Object.assign(Object.assign({}, userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata), metadata) : userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata;
    const validatedUserFields = yield userFieldsSchema.validate(userFields, {
      stripUnknown: validationSchemaStripUnknown
    });
    if (validatedUserFields.phoneNumber && validatedUserFields.phoneNumber.length > 0 && selectedPhoneCountry.current)
      setRetryData({
        dialCode: selectedPhoneCountry.current.dialCode,
        iso2: selectedPhoneCountry.current.iso2,
        phone: validatedUserFields.phoneNumber
      });
    const updateUserProfileResponse = yield updateUserProfileFields((_a = options2 === null || options2 === void 0 ? void 0 : options2.userEnvironmentId) !== null && _a !== void 0 ? _a : environmentId, Object.assign(Object.assign({}, validatedUserFields), { metadata }));
    const missingFields = (_b = updateUserProfileResponse.user.missingFields) !== null && _b !== void 0 ? _b : [];
    const requiredVerificationDestination = getVerificationDestination(updateUserProfileResponse.nextView);
    if (requiredVerificationDestination)
      return handleVerificationRequired({
        destination: requiredVerificationDestination,
        missingFields,
        updateUserProfileResponse
      });
    setCallback("userProfileUpdate");
    return {
      isEmailVerificationRequired: false,
      isSmsVerificationRequired: false,
      missingFields,
      updateUserProfileResponse
    };
  }), [
    userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata,
    validationSchemaStripUnknown,
    selectedPhoneCountry,
    setRetryData,
    environmentId,
    handleVerificationRequired,
    setCallback
  ]);
  return updateUser;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUserWithModal/useUpdateUserWithModal.js
var import_react262 = __toESM(require_react(), 1);
var import_jsx_runtime232 = __toESM(require_jsx_runtime(), 1);
var import_react_dom122 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUserWithModal/validateUpdateRequest/validateUpdateRequest.js
var validateUpdateRequest = (fields, user, projectSettings) => {
  if (!fields.length)
    return "At least one field must be provided for editing";
  if (!user)
    return "No signed-in user";
  const allUserFields = getUserProfileFields({
    customFields: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.customFields,
    projectSettingsKyc: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.kyc,
    user
  });
  for (const field of fields) {
    if (!allUserFields.find(({ name }) => name === field))
      return `Please ensure field "${field}" is enabled under "Configurations > Onboarding > Information capture" in your app's dashboard before using it with updateUserWithModal`;
  }
  return "";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUpdateUserWithModal/useUpdateUserWithModal.js
var import_qrcode120 = __toESM(require_browser(), 1);
var saveUserValues = (_a, setShowAuthFlow_1, setView_1, resolve_1, reject_1) => __awaiter(void 0, [_a, setShowAuthFlow_1, setView_1, resolve_1, reject_1], void 0, function* ({ fields: newValues, updateUserResult: { isEmailVerificationRequired, isSmsVerificationRequired } }, setShowAuthFlow, setView, resolve, reject) {
  if (!isEmailVerificationRequired && !isSmsVerificationRequired) {
    resolve(newValues);
    return;
  }
  setShowAuthFlow(true, {
    ignoreIfIsEmbeddedWidget: false,
    performMultiWalletChecks: false
  });
  if (isEmailVerificationRequired) {
    setView("verify-email");
    dynamicEvents.once("emailVerificationResult", (wasSuccessful, newEmail) => {
      newValues.email = newEmail;
      wasSuccessful ? resolve(newValues) : reject("Failed to verify email, no fields were updated");
    });
    return;
  }
  setView("verify-sms");
  dynamicEvents.once("smsVerificationResult", (wasSuccessful, { phone: newPhone }) => {
    newValues.phoneNumber = newPhone;
    wasSuccessful ? resolve(newValues) : reject("Failed to verify phone number, no fields were updated");
  });
});
var useUpdateUserWithModal = (updateUser) => {
  const { user, projectSettings, setShowAuthFlow } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const editorContext = (0, import_react262.useContext)(UserFieldEditorContext);
  if (!editorContext)
    throw new DynamicError("useUserUpdateRequest can only be used inside the context of DynamicContextProvider");
  const { open: promptUserForValues } = editorContext;
  const updateUserWithModal = (0, import_react262.useCallback)((fields, options2) => new Promise((resolve, reject) => {
    const errorResponse = validateUpdateRequest(fields, user, projectSettings);
    if (errorResponse) {
      reject(errorResponse);
      return;
    }
    promptUserForValues({
      fields,
      submitText: options2 === null || options2 === void 0 ? void 0 : options2.submitText,
      subtitle: options2 === null || options2 === void 0 ? void 0 : options2.subtitle,
      title: options2 === null || options2 === void 0 ? void 0 : options2.title
    }, updateUser).then((updateValues) => saveUserValues(updateValues, setShowAuthFlow, setView, resolve, reject)).catch((error) => {
      if (/email already exists/gi.test(error))
        throw error;
      reject(error);
    });
  }), [
    user,
    projectSettings,
    promptUserForValues,
    updateUser,
    setShowAuthFlow,
    setView
  ]);
  return updateUserWithModal;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useUserUpdateRequest/useUserUpdateRequest.js
var useUserUpdateRequestInternal = ({ validationSchemaStripUnknown }) => {
  const updateUser = useUpdateUser(validationSchemaStripUnknown);
  const updateUserWithModal = useUpdateUserWithModal(updateUser);
  return { updateUser, updateUserWithModal };
};
var useUserUpdateRequest = () => useUserUpdateRequestInternal({ validationSchemaStripUnknown: true });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/OnboardingUserDataForm/OnboardingUserDataForm.js
var import_qrcode121 = __toESM(require_browser(), 1);
var OnboardingUserDataForm = ({ children, userProfile, disableSubmit }) => {
  const { policiesConsentInnerComponent, userWithMissingInfo } = useInternalDynamicContext();
  const { error } = useErrorContext();
  const { completeAuth } = useUserAuth({});
  const { updateUser } = useUserUpdateRequestInternal({
    validationSchemaStripUnknown: false
  });
  const onSubmit = (0, import_react263.useCallback)((formValues) => __awaiter(void 0, void 0, void 0, function* () {
    yield completeAuth({
      updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () {
        return updateUser(formValues);
      })
    });
  }), [completeAuth, updateUser]);
  const { fetch: loading, formikInitialValues, formikValidationSchema, enforcePolicies, onFormSubmit } = useUserDataForm({
    fields: (userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) || [],
    onSubmit,
    userProfile
  });
  const policiesConsentInnerComponentArray = [
    policiesConsentInnerComponent
  ].flat();
  return (0, import_jsx_runtime233.jsx)(Formik, { onSubmit: onFormSubmit, initialValues: formikInitialValues, validationSchema: formikValidationSchema, children: ({ errors, touched, values }) => {
    var _a;
    const isSubmitBtnDisabled = disableSubmit || enforcePolicies && (policiesConsentInnerComponentArray === null || policiesConsentInnerComponentArray === void 0 ? void 0 : policiesConsentInnerComponentArray.length) !== ((_a = values.policiesConsentArray) === null || _a === void 0 ? void 0 : _a.length);
    return (0, import_jsx_runtime233.jsx)(Form, { className: "user-data-form__form", children: (0, import_jsx_runtime233.jsxs)(import_jsx_runtime233.Fragment, { children: [children, error && (0, import_jsx_runtime233.jsx)(Alert, { icon: "error", variant: "error", className: "user-data-form__error", children: error }), (0, import_jsx_runtime233.jsx)(UserDataFields, { fields: userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields, errors, touched, policiesConsentInnerComponentArray }), (0, import_jsx_runtime233.jsx)(TypographyButton, { type: "submit", loading, disabled: isSubmitBtnDisabled, buttonVariant: "primary", expanded: true, buttonPadding: "login-screen-height", children: "Continue" })] }) });
  } });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataView/CollectUserDataView.js
var import_qrcode122 = __toESM(require_browser(), 1);
var CollectUserDataView = () => {
  var _a;
  const { appName, projectSettings, network, selectedWalletConnector: walletConnector, handleLogOut, onboardingImageUrl, userWithMissingInfo } = useInternalDynamicContext();
  const [isNetworkPickerOpen, setIsNetworkPickerOpen] = (0, import_react264.useState)(false);
  const nameService = useFetchNameService();
  const { t: t2 } = useTranslation();
  if (!userWithMissingInfo) {
    return null;
  }
  const evmNetworks = (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.evmNetworks) || [];
  const _isSupportedNetwork = !network || isSupportedNetwork({ network, walletConnector });
  const shouldDisplayWrongNetworkState = !_isSupportedNetwork && Boolean(walletConnector);
  const walletAddress = (_a = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.verifiedCredentials.find((verifiedCredential) => verifiedCredential.id === userWithMissingInfo.lastVerifiedCredentialId)) === null || _a === void 0 ? void 0 : _a.address;
  return (0, import_jsx_runtime234.jsxs)("div", { className: "collect-user-data", "data-testid": "collect-user-data-view", children: [(0, import_jsx_runtime234.jsxs)("div", { className: "collect-user-data__network-container", children: [(0, import_jsx_runtime234.jsxs)("div", { className: "collect-user-data__img-container", children: [(nameService === null || nameService === void 0 ? void 0 : nameService.avatar) ? (0, import_jsx_runtime234.jsx)("img", { src: nameService.avatar, alt: "", className: "collect-user-data__img collect-user-data__img--rounded" }) : (0, import_jsx_runtime234.jsx)(AuthProviderIcon, { iconSize: 28 }), (0, import_jsx_runtime234.jsx)(Typography, { variant: "body_normal", color: "primary", weight: "medium", className: "collect-user-data__wallet-address", children: (nameService === null || nameService === void 0 ? void 0 : nameService.name) || shortenWalletAddress(walletAddress, 3, 3) })] }), walletConnector && (0, import_jsx_runtime234.jsx)(NetworkPicker, { currentNetwork: network, evmNetworks, connector: walletConnector, showNetworkName: true, isNetworkPickerOpen, setIsNetworkPickerOpen, buttonClassName: "collect-user-data__network-picker-button", mainClassName: "collect-user-data__network-picker" })] }), onboardingImageUrl && (0, import_jsx_runtime234.jsx)("img", { className: "collect-user-data__main-img", src: onboardingImageUrl, alt: "onboarding" }), shouldDisplayWrongNetworkState && (0, import_jsx_runtime234.jsx)(ErrorContainer, { withIcon: false, className: "collect-user-data__error--not-supported", copykey: "dyn_collect_user_data.not_supported_network.error_message", children: t2("dyn_collect_user_data.not_supported_network.error_message") }), (0, import_jsx_runtime234.jsxs)("div", { className: classNames("collect-user-data__form", {
    "collect-user-data__form--error": shouldDisplayWrongNetworkState
  }), children: [(0, import_jsx_runtime234.jsx)("div", { className: "collect-user-data__success-icon", children: (0, import_jsx_runtime234.jsx)(Icon, { color: "text-primary", size: "large", children: (0, import_jsx_runtime234.jsx)(SvgCheckConnection, {}) }) }), (0, import_jsx_runtime234.jsx)(OnboardingUserDataForm, { disableSubmit: shouldDisplayWrongNetworkState, userProfile: userWithMissingInfo, children: shouldDisplayWrongNetworkState ? (0, import_jsx_runtime234.jsxs)("div", { className: "collect-user-data__welcome-container", children: [(0, import_jsx_runtime234.jsx)(Typography, { variant: "title", color: "primary", className: "collect-user-data__welcome-title", copykey: "dyn_collect_user_data.not_supported_network.title", children: t2("dyn_collect_user_data.not_supported_network.title") }), (0, import_jsx_runtime234.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_collect_user_data.not_supported_network.description", children: t2("dyn_collect_user_data.not_supported_network.description") })] }) : (0, import_jsx_runtime234.jsxs)("div", { className: "collect-user-data__welcome-container", children: [(0, import_jsx_runtime234.jsx)(Typography, { variant: "title", color: "primary", className: "collect-user-data__welcome-title", copykey: "dyn_collect_user_data.greeting", children: (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general.collectUserDataWelcomeHeader) || t2("dyn_collect_user_data.greeting", { appName }) }), (0, import_jsx_runtime234.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_collect_user_data.description", children: (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general.collectUserDataWelcomeMessage) || t2("dyn_collect_user_data.description") })] }) }), (0, import_jsx_runtime234.jsx)(TextButton, { className: "collect-user-data__log-out", onClick: handleLogOut, copykey: "dyn_collect_user_data.log_out_button", children: t2("dyn_collect_user_data.log_out_button") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CollectUserDataViewNoWallet/CollectUserDataViewNoWallet.js
var import_jsx_runtime235 = __toESM(require_jsx_runtime(), 1);
var import_react265 = __toESM(require_react(), 1);
var import_react_dom125 = __toESM(require_react_dom(), 1);
var import_qrcode123 = __toESM(require_browser(), 1);
var CollectUserDataViewNoWallet = ({ userIdentification, userIdentificationOverride }) => {
  var _a;
  const { appName, handleLogOut, projectSettings, onboardingImageUrl, userWithMissingInfo } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  if (!userWithMissingInfo) {
    return null;
  }
  return (0, import_jsx_runtime235.jsxs)("div", { className: "collect-user-data-login-no-wallet", "data-testid": "collect-user-data-login-no-wallet", children: [onboardingImageUrl && (0, import_jsx_runtime235.jsx)("img", { className: "collect-user-data-login-no-wallet__main-img", src: onboardingImageUrl, alt: "onboarding" }), (0, import_jsx_runtime235.jsxs)("div", { className: "collect-user-data-login-no-wallet__user-info-container", children: [(0, import_jsx_runtime235.jsx)("div", { className: "collect-user-data-login-no-wallet__icon-container", children: (0, import_jsx_runtime235.jsx)(UserAvatar, { user: userWithMissingInfo }) }), (0, import_jsx_runtime235.jsx)(Typography, { variant: "body_normal", color: "primary", weight: "medium", className: "collect-user-data-login-no-wallet__user-identification", children: (_a = userIdentificationOverride !== null && userIdentificationOverride !== void 0 ? userIdentificationOverride : userWithMissingInfo[userIdentification]) !== null && _a !== void 0 ? _a : getUserIdentifier(userWithMissingInfo) })] }), (0, import_jsx_runtime235.jsxs)("div", { className: "collect-user-data-login-no-wallet__form", children: [(0, import_jsx_runtime235.jsx)("div", { className: "collect-user-data-login-no-wallet__success-icon", children: (0, import_jsx_runtime235.jsx)(Icon, { color: "text-primary", size: "large", children: (0, import_jsx_runtime235.jsx)(SvgCheckConnection, {}) }) }), (0, import_jsx_runtime235.jsx)(OnboardingUserDataForm, { userProfile: userWithMissingInfo, children: (0, import_jsx_runtime235.jsxs)("div", { className: "collect-user-data-login-no-wallet__welcome-container", children: [(0, import_jsx_runtime235.jsx)(Typography, { variant: "title", color: "primary", className: "collect-user-data-login-no-wallet__welcome-title", copykey: "dyn_collect_user_data.greeting", children: (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general.collectUserDataWelcomeHeader) || t2("dyn_collect_user_data.greeting", { appName }) }), (0, import_jsx_runtime235.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_collect_user_data.description", children: (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general.collectUserDataWelcomeMessage) || t2("dyn_collect_user_data.description") })] }) }), (0, import_jsx_runtime235.jsx)(TextButton, { className: "collect-user-data-login-no-wallet__log-out", onClick: handleLogOut, copykey: "dyn_collect_user_data.log_out_button", children: t2("dyn_collect_user_data.log_out_button") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CreatePasswordView/CreatePasswordView.js
var import_jsx_runtime239 = __toESM(require_jsx_runtime(), 1);
var import_react269 = __toESM(require_react(), 1);
var import_react_dom129 = __toESM(require_react_dom(), 1);
var import_qrcode127 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CreatePasswordView/CreatePasswordStep/CreatePasswordStep.js
var import_jsx_runtime237 = __toESM(require_jsx_runtime(), 1);
var import_react267 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/password-hero.js
var React57 = __toESM(require_react(), 1);
var _path41;
var _excluded43 = ["title", "titleId"];
function _extends50() {
  _extends50 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends50.apply(this, arguments);
}
function _objectWithoutProperties43(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose46(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose46(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgPasswordHero = function SvgPasswordHero2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties43(_ref2, _excluded43);
  return React57.createElement("svg", _extends50({
    width: 65,
    height: 64,
    viewBox: "0 0 65 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React57.createElement("title", {
    id: titleId
  }, title2) : null, _path41 || (_path41 = React57.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32.5 64c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32C14.827 0 .5 14.327.5 32c0 17.673 14.327 32 32 32Zm-7.618-38.89v-4.037a8.074 8.074 0 0 1 16.147 0v4.036a13.436 13.436 0 0 1 5.383 10.766c0 7.431-6.025 13.456-13.456 13.456-7.432 0-13.456-6.025-13.456-13.456 0-4.402 2.114-8.31 5.382-10.765Zm13.147-1.702v-2.335a5.074 5.074 0 0 0-10.147 0v2.336a13.416 13.416 0 0 1 5.074-.99c1.795 0 3.507.352 5.073.99ZM34.5 36.663a3.5 3.5 0 1 0-3 0V39.5a1.5 1.5 0 0 0 3 0v-2.837Z",
    fill: "#4779FF"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/validatePassword/validatePassword.js
var validatePassword = (password) => {
  const hasProperLength = password.length >= 6;
  const hasUpperCase = /[A-Z]/.test(password);
  const hasLowerCase = /[a-z]/.test(password);
  const hasNumbers = /\d/.test(password);
  const hasNonalphas = /\W/.test(password);
  let strength = [
    hasLowerCase,
    hasUpperCase,
    hasNumbers,
    hasNonalphas,
    hasProperLength
  ].filter(Boolean).length;
  if (strength >= 3 && password.length >= 12) {
    strength = 5;
  }
  const securityCriteria = [
    {
      description: "Password is atleast 6 characters in length",
      key: "hasProperLength",
      value: hasProperLength
    },
    {
      description: "Contains at least one uppercase letter",
      key: "hasUpperCase",
      value: hasUpperCase
    },
    {
      description: "Contains at least one lowercase letter",
      key: "hasLowerCase",
      value: hasLowerCase
    },
    {
      description: "Contains at least one number",
      key: "hasNumbers",
      value: hasNumbers
    },
    {
      description: "Contains at least one non-alphanumeric character",
      key: "hasNonalphas",
      value: hasNonalphas
    }
  ];
  return {
    hasLowerCase,
    hasNonalphas,
    hasNumbers,
    hasProperLength,
    hasUpperCase,
    securityCriteria,
    strength
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CreatePasswordView/CreatePasswordStep/CreatePasswordStep.js
var import_react_dom127 = __toESM(require_react_dom(), 1);
var import_qrcode125 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ToggleVisibilityButton/ToggleVisibilityButton.js
var import_jsx_runtime236 = __toESM(require_jsx_runtime(), 1);
var import_react266 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/eye-off-icon.js
var React58 = __toESM(require_react(), 1);
var _path43;
var _excluded44 = ["title", "titleId"];
function _extends51() {
  _extends51 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends51.apply(this, arguments);
}
function _objectWithoutProperties44(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose47(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose47(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgEyeOffIcon = function SvgEyeOffIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties44(_ref2, _excluded44);
  return React58.createElement("svg", _extends51({
    xmlns: "http://www.w3.org/2000/svg",
    width: 25,
    height: 24,
    viewBox: "0 0 25 24",
    fill: "none",
    "aria-labelledby": titleId
  }, props), title2 ? React58.createElement("title", {
    id: titleId
  }, title2) : null, _path43 || (_path43 = React58.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.793 2.293a1 1 0 0 1 1.414 0l3.04 3.04A10.955 10.955 0 0 1 12.5 4c4.927 0 9.095 3.238 10.497 7.7a1 1 0 0 1 0 .6 11.014 11.014 0 0 1-3.552 5.231l2.762 2.762a1 1 0 0 1-1.414 1.414l-18-18a1 1 0 0 1 0-1.414Zm5.943 4.53 1.732 1.731a4 4 0 0 1 5.478 5.478l2.076 2.076A9.022 9.022 0 0 0 20.989 12 9.004 9.004 0 0 0 8.736 6.822Zm5.696 5.695a2 2 0 0 0-2.45-2.45l2.45 2.45ZM5.125 8.174a1 1 0 0 1 .194 1.4A8.975 8.975 0 0 0 4.012 12a9.004 9.004 0 0 0 10.177 5.842 1 1 0 0 1 .372 1.965c-.668.127-1.357.193-2.06.193-4.927 0-9.095-3.238-10.497-7.7a1 1 0 0 1 0-.6 10.97 10.97 0 0 1 1.72-3.332 1 1 0 0 1 1.4-.194Z",
    fill: "#ABACB2"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ToggleVisibilityButton/ToggleVisibilityButton.js
var import_react_dom126 = __toESM(require_react_dom(), 1);
var import_qrcode124 = __toESM(require_browser(), 1);
var ToggleVisibilityButton = ({ initialState = false, onClick, className = "" }) => {
  const [hidden, setHidden] = (0, import_react266.useState)(initialState);
  const handleClick = (e2) => {
    e2.preventDefault();
    setHidden((state) => {
      const newState = !state;
      onClick === null || onClick === void 0 ? void 0 : onClick(newState);
      return newState;
    });
  };
  return (0, import_jsx_runtime236.jsx)(TextButton, { className: classNames("toggle-visibility-button__container", className), onClick: (e2) => handleClick(e2), children: (0, import_jsx_runtime236.jsx)(Tooltip, { className: "toggle-visibility-button__tooltip", content: hidden ? "Show" : "Hide", children: (0, import_jsx_runtime236.jsx)(Icon, { size: "medium", color: "text-tertiary", children: hidden ? (0, import_jsx_runtime236.jsx)(SvgFooterEyeIcon, {}) : (0, import_jsx_runtime236.jsx)(SvgEyeOffIcon, {}) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CreatePasswordView/CreatePasswordStep/CreatePasswordStep.js
var CreatePasswordStep = ({ password, setPassword, currentPassword, setCurrentPassword, onContinue, isChangingPassword, onClose, onLogout }) => {
  const { primaryWallet } = useInternalDynamicContext();
  const [currentPasswordInputType, setCurrentPasswordInputType] = (0, import_react267.useState)("password");
  const [passwordInputType, setPasswordInputType] = (0, import_react267.useState)("password");
  const intialPasswordStrength = validatePassword(password).strength;
  const [passwordStrength, setPasswordStrength] = (0, import_react267.useState)(intialPasswordStrength);
  const [confirmPassword, setConfirmPassword] = (0, import_react267.useState)("");
  const [confirmPasswordInputType, setConfirmPasswordInputType] = (0, import_react267.useState)("password");
  const [isLoading, setIsLoading] = (0, import_react267.useState)(false);
  const [error, setError] = (0, import_react267.useState)("");
  const { t: t2 } = useTranslation();
  const canContinue = Boolean((password === null || password === void 0 ? void 0 : password.length) >= 6 && passwordStrength >= 5 && confirmPassword === password && (!isChangingPassword || currentPassword && currentPassword !== password));
  const closeButton = onClose && (0, import_jsx_runtime237.jsx)(IconButton, { onClick: () => onClose(), type: "button", children: (0, import_jsx_runtime237.jsx)(SvgClose, {}) });
  const inputSuffix = (inputType, setInputType, includeCopy = true) => (0, import_jsx_runtime237.jsxs)("div", { className: "create-password__password-input__suffix", children: [includeCopy && (0, import_jsx_runtime237.jsx)("div", { children: (0, import_jsx_runtime237.jsx)(CopyButton, { textToCopy: password, copykey: "dyn_qr_code.copy_button", className: "create-password__password-input__suffix__icon", children: (0, import_jsx_runtime237.jsx)(SvgCopy, { className: "create-password__password-input__suffix__icon", onClick: (e2) => {
    e2.preventDefault();
  } }) }) }), (0, import_jsx_runtime237.jsx)(ToggleVisibilityButton, { initialState: inputType === "password", onClick: (hidden) => setInputType(hidden ? "password" : "text"), className: "create-password__password-input__suffix__icon" })] });
  const handleChangePassword = (e2) => __awaiter(void 0, void 0, void 0, function* () {
    e2.preventDefault();
    const connector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
    if (isChangingPassword && isCoinbaseMpcWalletConnector(connector)) {
      setIsLoading(true);
      try {
        const isValid = yield connector.validatePasscode(currentPassword);
        if (!isValid) {
          setError(t2("dyn_create_password.errors.invalid_current_password"));
          return;
        }
      } catch (error2) {
        setError(t2("dyn_create_password.errors.error_changing_password"));
        return;
      } finally {
        setIsLoading(false);
      }
    }
    if (canContinue) {
      onContinue();
    }
  });
  const onCreatePasswordInputChange = (e2) => {
    const newPassword = e2.target.value;
    const { strength } = validatePassword(newPassword);
    setPasswordStrength(strength);
    setPassword(newPassword);
    if (isChangingPassword) {
      if (currentPassword === newPassword) {
        setError(t2("dyn_create_password.errors.new_password_same_as_old"));
      } else if (newPassword && confirmPassword && newPassword !== confirmPassword) {
        setError(t2("dyn_create_password.errors.password_mismatch"));
      } else {
        setError("");
      }
      return;
    }
    if (!(newPassword === null || newPassword === void 0 ? void 0 : newPassword.length)) {
      setError("");
    }
  };
  const onConfirmPasswordInputChange = (e2) => {
    const newPassword = e2.target.value;
    if (newPassword !== password) {
      setError(t2("dyn_create_password.errors.password_mismatch"));
    } else {
      setError("");
    }
    setConfirmPassword(newPassword);
  };
  return (0, import_jsx_runtime237.jsxs)(import_jsx_runtime237.Fragment, { children: [(0, import_jsx_runtime237.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime237.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", copykey: "dyn_create_password.title", children: isChangingPassword ? t2("dyn_create_password.title.update") : t2("dyn_create_password.title.create") }) }), (0, import_jsx_runtime237.jsx)("div", { className: "create-password", children: (0, import_jsx_runtime237.jsxs)("form", { className: "create-password__body", "data-testid": "create-password-form", onSubmit: handleChangePassword, children: [(0, import_jsx_runtime237.jsxs)("div", { className: "create-password__body__header", children: [(0, import_jsx_runtime237.jsx)(SvgPasswordHero, {}), (0, import_jsx_runtime237.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", children: t2("dyn_create_password.description") })] }), error && (0, import_jsx_runtime237.jsx)(ErrorContainer, { children: error }), isChangingPassword && (0, import_jsx_runtime237.jsx)(Input, { id: "current-password", placeholder: t2("dyn_create_password.current_password_input.placeholder"), type: currentPasswordInputType, suffix: inputSuffix(currentPasswordInputType, setCurrentPasswordInputType, false), label: t2("dyn_create_password.current_password_input.label"), value: currentPassword, onChange: (e2) => setCurrentPassword(e2.target.value), autoFocus: true, copykey: "dyn_create_password.current_password_input" }), (0, import_jsx_runtime237.jsx)("div", { children: (0, import_jsx_runtime237.jsx)(Input, { id: "password", placeholder: isChangingPassword ? t2("dyn_create_password.update_input.placeholder") : t2("dyn_create_password.create_input.placeholder"), type: passwordInputType, suffix: inputSuffix(passwordInputType, setPasswordInputType), label: isChangingPassword ? t2("dyn_create_password.update_input.label") : t2("dyn_create_password.create_input.label"), value: password, onChange: onCreatePasswordInputChange, autoFocus: Boolean(!isChangingPassword), copykey: "dyn_create_password.create_input" }) }), password.length >= 1 && (0, import_jsx_runtime237.jsxs)(import_jsx_runtime237.Fragment, { children: [(0, import_jsx_runtime237.jsx)("div", { className: "create-password__body__card", children: validatePassword(password).securityCriteria.map((criteria) => (0, import_jsx_runtime237.jsxs)("div", { className: `create-password__password-criteria-list ${criteria.value ? "create-password__password-criteria-list__success" : "create-password__password-criteria-list__error"}`, children: [(0, import_jsx_runtime237.jsx)("div", { children: criteria.value ? (0, import_jsx_runtime237.jsx)(SvgCheck, { className: "create-password__password-criteria-icon" }) : (0, import_jsx_runtime237.jsx)(SvgClose, { className: "create-password__password-criteria-icon" }) }), (0, import_jsx_runtime237.jsx)(Typography, { variant: "body_mini", children: criteria.description })] }, criteria.key)) }), (0, import_jsx_runtime237.jsx)(Input, { id: "confirm-password", placeholder: t2("dyn_create_password.confirm_input.placeholder"), type: confirmPasswordInputType, suffix: inputSuffix(confirmPasswordInputType, setConfirmPasswordInputType, false), label: t2("dyn_create_password.confirm_input.label"), value: confirmPassword, onChange: onConfirmPasswordInputChange, copykey: "dyn_create_password.confirm_input" })] }), (0, import_jsx_runtime237.jsx)(TypographyButton, { buttonPadding: "large", buttonVariant: "brand-primary", typographyProps: {
    color: "inherit"
  }, disabled: !canContinue, copykey: "dyn_create_password.continue", type: "submit", loading: isLoading, children: t2("dyn_create_password.continue") }), onLogout && (0, import_jsx_runtime237.jsx)(TextButton, { className: "create-password__log-out", onClick: onLogout, copykey: "dyn_create_password.logout", children: t2("dyn_create_password.logout") })] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CreatePasswordView/SavePasswordStep/SavePasswordStep.js
var import_jsx_runtime238 = __toESM(require_jsx_runtime(), 1);
var import_react268 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/download.js
var React59 = __toESM(require_react(), 1);
var _path44;
var _excluded45 = ["title", "titleId"];
function _extends52() {
  _extends52 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends52.apply(this, arguments);
}
function _objectWithoutProperties45(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose48(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose48(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgDownload = function SvgDownload2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties45(_ref2, _excluded45);
  return React59.createElement("svg", _extends52({
    width: 21,
    height: 20,
    viewBox: "0 0 21 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React59.createElement("title", {
    id: titleId
  }, title2) : null, _path44 || (_path44 = React59.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.417 14.167c0 .92.746 1.666 1.666 1.666h8.334c.92 0 1.666-.746 1.666-1.666v-.834a.833.833 0 0 1 1.667 0v.834a3.333 3.333 0 0 1-3.333 3.333H6.083a3.333 3.333 0 0 1-3.333-3.333v-.834a.833.833 0 0 1 1.667 0v.834Zm1.91-4.756a.833.833 0 0 1 1.179 0l1.91 1.91V3.333a.833.833 0 0 1 1.667 0v7.989l1.911-1.911a.833.833 0 1 1 1.179 1.178l-3.334 3.334a.833.833 0 0 1-1.178 0l-3.334-3.334a.833.833 0 0 1 0-1.178Z",
    fill: "#ABACB2"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/save-password-hero.js
var React60 = __toESM(require_react(), 1);
var _path45;
var _path211;
var _path311;
var _path46;
var _g6;
var _path53;
var _defs3;
var _excluded46 = ["title", "titleId"];
function _extends53() {
  _extends53 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends53.apply(this, arguments);
}
function _objectWithoutProperties46(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose49(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose49(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSavePasswordHero = function SvgSavePasswordHero2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties46(_ref2, _excluded46);
  return React60.createElement("svg", _extends53({
    width: 327,
    height: 112,
    viewBox: "0 0 327 112",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React60.createElement("title", {
    id: titleId
  }, title2) : null, React60.createElement("g", {
    clipPath: "url(#save-password-hero_svg__a)"
  }, React60.createElement("mask", {
    id: "save-password-hero_svg__b",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 0,
    y: 0,
    width: 327,
    height: 112
  }, _path45 || (_path45 = React60.createElement("path", {
    d: "M315 0H12C5.373 0 0 5.373 0 12v88c0 6.627 5.373 12 12 12h303c6.627 0 12-5.373 12-12V12c0-6.627-5.373-12-12-12Z",
    fill: "#fff"
  }))), React60.createElement("g", {
    mask: "url(#save-password-hero_svg__b)"
  }, _path211 || (_path211 = React60.createElement("path", {
    d: "M164 228c62.96 0 114-51.04 114-114S226.96 0 164 0 50 51.04 50 114s51.04 114 114 114Z",
    fill: "url(#save-password-hero_svg__c)",
    fillOpacity: 0.12
  })), React60.createElement("mask", {
    id: "save-password-hero_svg__d",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 86,
    y: 29,
    width: 40,
    height: 40
  }, _path311 || (_path311 = React60.createElement("path", {
    d: "M116.91 29 86 37.282l8.282 30.91 30.91-8.282L116.91 29Z",
    fill: "#fff"
  }))), React60.createElement("g", {
    mask: "url(#save-password-hero_svg__d)"
  }, React60.createElement("mask", {
    id: "save-password-hero_svg__e",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 90,
    y: 33,
    width: 31,
    height: 31
  }, _path46 || (_path46 = React60.createElement("path", {
    d: "M119.763 44.8c-2.097-7.824-10.139-12.467-17.963-10.37-7.824 2.096-12.468 10.138-10.371 17.962 2.096 7.824 10.139 12.467 17.963 10.37 7.824-2.096 12.467-10.138 10.371-17.962Z",
    fill: "#fff"
  }))), _g6 || (_g6 = React60.createElement("g", {
    mask: "url(#save-password-hero_svg__e)"
  }, React60.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M118.709 55.166a14.617 14.617 0 0 0 1.054-10.366c-2.097-7.824-10.139-12.467-17.963-10.37-7.824 2.096-12.467 10.138-10.37 17.962a14.612 14.612 0 0 0 6.096 8.451c1.808-3.916 6.565-6.42 9.647-7.247 3.083-.826 7.955-1.146 11.536 1.57Zm-19.374-8.688a5.5 5.5 0 1 1 10.624-2.848 5.5 5.5 0 0 1-10.624 2.848Z",
    fill: "#DD8500"
  })))), _path53 || (_path53 = React60.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "m207.67 19.875-.767 2.862a9.86 9.86 0 0 0-5.861 6.61c-1.412 5.268 1.715 10.684 6.984 12.096 5.268 1.412 10.684-1.715 12.096-6.984a9.862 9.862 0 0 0-1.771-8.655l.767-2.861a5.926 5.926 0 0 0-11.448-3.068Zm9.321 2.498-.444 1.655a9.844 9.844 0 0 0-3.409-1.665 9.847 9.847 0 0 0-3.785-.262l.444-1.656a3.723 3.723 0 1 1 7.194 1.928Zm-3.445 8.52a2.57 2.57 0 0 1-2.019 1.862l-.539 2.011a1.1 1.1 0 1 1-2.127-.57l.539-2.01a2.569 2.569 0 1 1 4.146-1.294ZM164.944 32.064a6.223 6.223 0 0 0-1.78 0c-.68.098-1.313.337-1.816.527l-.134.05-16.681 6.255-.406.152c-1.922.718-3.61 1.347-4.91 2.493a9.331 9.331 0 0 0-2.552 3.682c-.616 1.619-.614 3.42-.611 5.472l.001.434v14.875c0 8.792 4.782 16.123 9.952 21.508 5.204 5.42 11.159 9.25 14.308 11.086l.127.075c.575.337 1.32.775 2.307.987a6.623 6.623 0 0 0 2.609 0c.987-.212 1.733-.65 2.307-.987l.128-.075c3.149-1.836 9.103-5.665 14.308-11.086 5.169-5.385 9.952-12.716 9.952-21.508V50.695c.003-2.052.006-3.853-.61-5.472a9.331 9.331 0 0 0-2.552-3.682c-1.3-1.145-2.988-1.775-4.91-2.493l-.407-.152-16.68-6.254-.135-.05c-.502-.19-1.135-.43-1.815-.528Zm-.36 18.497c1.726 0 3.126 1.4 3.126 3.126v12.504a3.126 3.126 0 0 1-6.253 0V53.687c0-1.726 1.4-3.126 3.127-3.126Zm-3.127 28.135c0-1.727 1.4-3.126 3.127-3.126h.031a3.127 3.127 0 1 1 0 6.252h-.031a3.127 3.127 0 0 1-3.127-3.126Z",
    fill: "#DD8500"
  })))), _defs3 || (_defs3 = React60.createElement("defs", null, React60.createElement("linearGradient", {
    id: "save-password-hero_svg__c",
    x1: 164,
    y1: 0,
    x2: 164,
    y2: 93.5,
    gradientUnits: "userSpaceOnUse"
  }, React60.createElement("stop", {
    stopColor: "#DD8500"
  }), React60.createElement("stop", {
    offset: 0.985,
    stopColor: "#DD8500",
    stopOpacity: 0
  })), React60.createElement("clipPath", {
    id: "save-password-hero_svg__a"
  }, React60.createElement("path", {
    fill: "#fff",
    d: "M0 0h327v112H0z"
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/downloadFile/downloadFile.js
var downloadFile = (fileName, content) => {
  const element = document.createElement("a");
  const file = new Blob([content], { type: "text/plain" });
  element.href = URL.createObjectURL(file);
  element.download = fileName;
  document.body.appendChild(element);
  element.click();
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CreatePasswordView/SavePasswordStep/SavePasswordStep.js
var import_react_dom128 = __toESM(require_react_dom(), 1);
var import_qrcode126 = __toESM(require_browser(), 1);
var SavePasswordStep = ({ password, error, isLoading, onSave, onBack, onClose, onLogout }) => {
  const { t: t2 } = useTranslation();
  const [inputType, setInputType] = (0, import_react268.useState)("password");
  const [acknowledgement, setAcknowledgement] = (0, import_react268.useState)(false);
  const [isCopied, setIsCopied] = (0, import_react268.useState)(false);
  const backButton = (0, import_jsx_runtime238.jsx)(IconButton, { type: "button", onClick: () => onBack(), "data-testid": "back-button", children: (0, import_jsx_runtime238.jsx)(SvgChevronLeft, {}) });
  const closeButton = onClose && (0, import_jsx_runtime238.jsx)(IconButton, { onClick: () => onClose(), type: "button", children: (0, import_jsx_runtime238.jsx)(SvgClose, {}) });
  const inputSuffix = (0, import_jsx_runtime238.jsx)(ToggleVisibilityButton, { initialState: inputType === "password", onClick: (hidden) => setInputType(hidden ? "password" : "text"), className: "save-password-suffix-icon" });
  const handleSavePassword = (e2) => __awaiter(void 0, void 0, void 0, function* () {
    e2.preventDefault();
    onSave();
  });
  return (0, import_jsx_runtime238.jsxs)(import_jsx_runtime238.Fragment, { children: [(0, import_jsx_runtime238.jsx)(ModalHeader, { leading: backButton, trailing: closeButton, children: (0, import_jsx_runtime238.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", copykey: "dyn_save_password.title", children: t2("dyn_save_password.title") }) }), (0, import_jsx_runtime238.jsx)("div", { className: "save-password-view", children: (0, import_jsx_runtime238.jsxs)("form", { className: "save-password-view__body", "data-testid": "save-password-form", onSubmit: handleSavePassword, children: [(0, import_jsx_runtime238.jsx)("div", { className: "save-password-view__body__icon", children: (0, import_jsx_runtime238.jsx)(SvgSavePasswordHero, {}) }), (0, import_jsx_runtime238.jsx)("div", { className: "save-password-view__body__icon", children: (0, import_jsx_runtime238.jsx)(Badge, { text: t2("dyn_save_password.badge_text"), className: "save-password-view__body__badge", copykey: "dyn_save_password.badge_text" }) }), (0, import_jsx_runtime238.jsxs)("div", { className: "save-password-view__body__description", children: [(0, import_jsx_runtime238.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_save_password.description", children: t2("dyn_save_password.description") }), (0, import_jsx_runtime238.jsx)(Typography, { variant: "body_normal", weight: "bold", color: "secondary", copykey: "dyn_save_password.description", children: t2("dyn_save_password.warning") })] }), error && (0, import_jsx_runtime238.jsx)(ErrorContainer, { children: error }), (0, import_jsx_runtime238.jsx)("div", { children: (0, import_jsx_runtime238.jsx)(Input, { id: "password", placeholder: t2("dyn_save_password.password_input.placeholder"), type: inputType, suffix: inputSuffix, disabled: true, label: t2("dyn_save_password.password_input.label"), value: password, autoFocus: true, copykey: "dyn_save_password.password_input" }) }), (0, import_jsx_runtime238.jsxs)("div", { className: "save-password-view__actions", children: [(0, import_jsx_runtime238.jsx)(TypographyButton, { dataTestId: "save-password-copy", buttonPadding: "small", buttonVariant: "primary", onClick: (e2) => {
    e2.preventDefault();
    copyToClipboard(password);
    setIsCopied(true);
  }, startSlot: (0, import_jsx_runtime238.jsx)(SvgCopy, {}), expanded: true, copykey: "dyn_save_password.copy_button", children: isCopied ? t2("dyn_save_password.copy_button.copied") : t2("dyn_save_password.copy_button.copy") }), (0, import_jsx_runtime238.jsx)(TypographyButton, { dataTestId: "save-password-download", buttonPadding: "small", buttonVariant: "primary", onClick: (e2) => {
    e2.preventDefault();
    downloadFile("wallet-recovery.txt", password);
  }, startSlot: (0, import_jsx_runtime238.jsx)(SvgDownload, {}), expanded: true, copykey: "dyn_save_password.download_button", children: t2("dyn_save_password.download_button") })] }), (0, import_jsx_runtime238.jsx)("div", { className: "save-password-view__body__confirm-card", children: (0, import_jsx_runtime238.jsxs)("button", { className: "save-password-view__body__card__acknowledgement", onClick: (e2) => {
    e2.stopPropagation();
    setAcknowledgement(!acknowledgement);
  }, type: "button", children: [(0, import_jsx_runtime238.jsx)("div", { children: (0, import_jsx_runtime238.jsx)(Checkbox, { checked: acknowledgement, onChange: (e2) => {
    e2.stopPropagation();
    setAcknowledgement(!acknowledgement);
  }, className: "save-password-view__body__card__statement__checkbox" }) }), (0, import_jsx_runtime238.jsx)("div", { children: (0, import_jsx_runtime238.jsx)(Typography, { variant: "body_normal", style: { letterSpacing: "-0.15px" }, color: "primary", copykey: "dyn_save_password.checkbox_label", children: t2("dyn_save_password.checkbox_label") }) })] }) }), (0, import_jsx_runtime238.jsx)(TypographyButton, { dataTestId: "save-password-submit", buttonPadding: "large", buttonVariant: "brand-primary", typographyProps: {
    color: "inherit"
  }, disabled: !acknowledgement, loading: isLoading, type: "submit", copykey: "dyn_save_password.continue", children: t2("dyn_save_password.continue") }), onLogout && (0, import_jsx_runtime238.jsx)(TextButton, { className: "create-password__log-out", onClick: onLogout, copykey: "dyn_save_password.logout", children: t2("dyn_save_password.logout") })] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/CreatePasswordView/CreatePasswordView.js
var CreatePasswordView = ({ onSuccess, onError, closeView, notCalledFromWalletUtils, isSignUp }) => {
  var _a;
  const { setShowAuthFlow, user, projectSettings, primaryWallet, handleLogOut: onLogout, walletConnectorOptions } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const { claimWallet } = useEmbeddedWalletPassword();
  const [curStep, setCurStep] = (0, import_react269.useState)("create-password");
  const cbVcWalletProperties = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((vc) => vc.walletName === "coinbasempc")) === null || _a === void 0 ? void 0 : _a.walletProperties;
  const isChangingPassword = Boolean(cbVcWalletProperties === null || cbVcWalletProperties === void 0 ? void 0 : cbVcWalletProperties.claimed);
  const closeViewOnCreate = closeView !== null && closeView !== void 0 ? closeView : true;
  const [currentPassword, setCurrentPassword] = (0, import_react269.useState)("");
  const [password, setPassword] = (0, import_react269.useState)("");
  const [isLoading, setIsLoading] = (0, import_react269.useState)(false);
  const [error, setError] = (0, import_react269.useState)("");
  const requiresPassword = requiresPasswordForEmbeddedWallet(projectSettings);
  const canClose = isChangingPassword || !requiresPassword;
  const handleCreatePassword = () => __awaiter(void 0, void 0, void 0, function* () {
    setCurStep("save-password");
  });
  const handleSavePassword = () => __awaiter(void 0, void 0, void 0, function* () {
    var _b, _c, _d;
    setIsLoading(true);
    try {
      if (!isSignUp) {
        const connector = (_d = (_b = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector) !== null && _b !== void 0 ? _b : (_c = findCoinbaseMPCWallet(walletConnectorOptions)) === null || _c === void 0 ? void 0 : _c.walletConnector) !== null && _d !== void 0 ? _d : void 0;
        if (notCalledFromWalletUtils && isCoinbaseMpcWalletConnector(connector)) {
          yield connector.changePasscode(password, currentPassword);
        }
        if (!isChangingPassword) {
          yield claimWallet();
        }
      }
      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(password);
      if (closeViewOnCreate) {
        setShowAuthFlow(false, { ignoreIfIsEmbeddedWidget: false });
      }
      dynamicEvents.emit("embeddedWalletCreatePasswordCompleted", password);
    } catch (e2) {
      logger2.debug(`Error ${isChangingPassword ? "updating" : "creating"} password`, e2);
      dynamicEvents.emit("embeddedWalletCreatePasswordFailed", e2);
      if (e2 instanceof Error) {
        setError(e2.message);
      }
      onError === null || onError === void 0 ? void 0 : onError(e2);
    } finally {
      setIsLoading(false);
    }
  });
  const handleClose = () => {
    if (requiresPassword) {
      const error2 = new Error(t2("dyn_create_password.errors.user_closed_view"));
      onError === null || onError === void 0 ? void 0 : onError(error2, true);
      dynamicEvents.emit("embeddedWalletCreatePasswordFailed", error2);
    }
    setShowAuthFlow(false);
  };
  const handleLogout = (e2) => {
    e2 === null || e2 === void 0 ? void 0 : e2.preventDefault();
    const error2 = new Error(t2("dyn_create_password.errors.user_closed_view"));
    onError === null || onError === void 0 ? void 0 : onError(error2, true);
    onLogout();
  };
  return curStep === "save-password" ? (0, import_jsx_runtime239.jsx)(SavePasswordStep, { password, onBack: () => setCurStep("create-password"), error, isLoading, onSave: () => handleSavePassword(), onClose: canClose ? () => handleClose() : void 0, onLogout: !canClose ? handleLogout : void 0 }) : (0, import_jsx_runtime239.jsx)(CreatePasswordStep, { password, setPassword, currentPassword, setCurrentPassword, onContinue: () => handleCreatePassword(), isChangingPassword, onClose: canClose ? () => handleClose() : void 0, onLogout: !canClose ? handleLogout : void 0 });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailConfirmationWaitingView/EmailConfirmationWaitingView.js
var import_jsx_runtime240 = __toESM(require_jsx_runtime(), 1);
var import_react270 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/pencil-alt-icon.js
var React61 = __toESM(require_react(), 1);
var _path47;
var _excluded47 = ["title", "titleId"];
function _extends54() {
  _extends54 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends54.apply(this, arguments);
}
function _objectWithoutProperties47(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose50(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose50(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgPencilAltIcon = function SvgPencilAltIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties47(_ref2, _excluded47);
  return React61.createElement("svg", _extends54({
    width: 17,
    height: 16,
    viewBox: "0 0 17 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React61.createElement("title", {
    id: titleId
  }, title2) : null, _path47 || (_path47 = React61.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.638 2.862a.667.667 0 0 0-.943 0L7.167 8.391v.943h.942l5.53-5.53a.667.667 0 0 0 0-.942Zm-1.886-.943a2 2 0 1 1 2.829 2.829l-5.724 5.724a.667.667 0 0 1-.471.195H6.5A.667.667 0 0 1 5.833 10V8.115c0-.177.07-.347.196-.472l5.723-5.724ZM4.5 4a.667.667 0 0 0-.667.667V12c0 .368.299.667.667.667h7.333A.667.667 0 0 0 12.5 12V8.667a.667.667 0 0 1 1.333 0V12a2 2 0 0 1-2 2H4.5a2 2 0 0 1-2-2V4.667a2 2 0 0 1 2-2h3.333a.667.667 0 0 1 0 1.333H4.5Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailConfirmationWaitingView/EmailConfirmationWaitingView.js
var import_react_dom130 = __toESM(require_react_dom(), 1);
var import_qrcode128 = __toESM(require_browser(), 1);
var EmailConfirmationWaitingView = () => {
  const { setView } = useViewContext();
  const { clearStatesOnBackClick, selectedWalletConnector: walletConnector } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  if (walletConnector && !isEmailWalletConnector(walletConnector)) {
    throw new Error("Wallet connector is not email provider");
  }
  const emailConnector = walletConnector;
  const onClickResetEmail = (0, import_react270.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    yield emailConnector === null || emailConnector === void 0 ? void 0 : emailConnector.endSession();
    setView("login-with-email-or-wallet");
    clearStatesOnBackClick();
  }), [setView, emailConnector, clearStatesOnBackClick]);
  return (0, import_jsx_runtime240.jsxs)("div", { className: "email-confirmation-waiting-view", children: [(0, import_jsx_runtime240.jsx)("div", { className: "email-confirmation-waiting-view__header-icon", children: (0, import_jsx_runtime240.jsx)(IconWithSpinner, { Icon: SignInWithEmailIcon, iconSize: 80, isSpinning: true }) }), (0, import_jsx_runtime240.jsx)(Typography, { weight: "medium", variant: "title", color: "primary", className: "email-confirmation-waiting-view__title", copykey: "dyn_email_confirmation.title", children: t2("dyn_email_confirmation.title") }), (0, import_jsx_runtime240.jsx)(Typography, { weight: "regular", variant: "body_normal", color: "secondary", copykey: "dyn_email_confirmation.description", children: t2("dyn_email_confirmation.description") }), (0, import_jsx_runtime240.jsxs)("div", { className: "email-confirmation-waiting-view__email-container", children: [(0, import_jsx_runtime240.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "medium", as: "span", children: emailConnector === null || emailConnector === void 0 ? void 0 : emailConnector.email }), (0, import_jsx_runtime240.jsx)(IconButton, { onClick: onClickResetEmail, className: "email-confirmation-waiting-view__edit-icon-button", "data-testid": "email-confirmation-waiting-view__edit-button", children: (0, import_jsx_runtime240.jsx)(Icon, { color: "text-tertiary", children: (0, import_jsx_runtime240.jsx)(SvgPencilAltIcon, {}) }) })] }), (0, import_jsx_runtime240.jsx)("div", { className: "email-confirmation-waiting-view__note", children: (0, import_jsx_runtime240.jsx)(Typography, { weight: "regular", variant: "body_small", color: "secondary", copykey: "dyn_email_confirmation.note", children: t2("dyn_email_confirmation.note") }) }), (0, import_jsx_runtime240.jsx)(PoweredByDynamic, { classNameRoot: "email-confirmation-waiting-view__powered_by_dynamic_footer" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailVerification/EmailVerification.js
var import_jsx_runtime244 = __toESM(require_jsx_runtime(), 1);
var import_react276 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/sign-in-with-email.js
var React62 = __toESM(require_react(), 1);
var _circle2;
var _path48;
var _path212;
var _excluded48 = ["title", "titleId"];
function _extends55() {
  _extends55 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends55.apply(this, arguments);
}
function _objectWithoutProperties48(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose51(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose51(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSignInWithEmail = function SvgSignInWithEmail2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties48(_ref2, _excluded48);
  return React62.createElement("svg", _extends55({
    width: 64,
    height: 64,
    viewBox: "0 0 64 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React62.createElement("title", {
    id: titleId
  }, title2) : null, _circle2 || (_circle2 = React62.createElement("circle", {
    cx: 32,
    cy: 32,
    r: 32,
    fill: "currentColor"
  })), _path48 || (_path48 = React62.createElement("path", {
    d: "M51 29.333a1.333 1.333 0 0 0-1.333 0l-17.334 9.8L15 29.333a1.333 1.333 0 0 0-2 1.16V42a4 4 0 0 0 4 4h30.667a4 4 0 0 0 4-4V30.5A1.333 1.333 0 0 0 51 29.333Z",
    fill: "#fff"
  })), _path212 || (_path212 = React62.createElement("path", {
    d: "M47.667 18H17a4 4 0 0 0-4 4v2.5a1.334 1.334 0 0 0 .667 1.16l18 10.167a1.333 1.333 0 0 0 1.333 0L51 25.66a1.334 1.334 0 0 0 .667-1.16V22a4 4 0 0 0-4-4Z",
    fill: "#fff"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailVerification/EmailVerification.js
var import_react_dom132 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useOnUnmount/useOnUnmount.js
var import_react271 = __toESM(require_react(), 1);
var MIN_EVENT_TIME = 10;
var useOnUnmount = (callback) => {
  const callbackRef = (0, import_react271.useRef)(callback);
  callbackRef.current = callback;
  (0, import_react271.useEffect)(() => {
    const mountedAt = /* @__PURE__ */ new Date();
    return () => {
      if ((/* @__PURE__ */ new Date()).getTime() - mountedAt.getTime() < MIN_EVENT_TIME)
        return;
      callbackRef.current();
    };
  }, []);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PinField/PinField.js
var import_jsx_runtime242 = __toESM(require_jsx_runtime(), 1);
var import_react273 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PinInput/PinInput.js
var import_jsx_runtime241 = __toESM(require_jsx_runtime(), 1);
var import_react272 = __toESM(require_react(), 1);
var normalizeNewValue = (currentValue, updatedValue) => {
  if (!currentValue) {
    return updatedValue.split("");
  }
  if (updatedValue.length > 2) {
    return updatedValue.split("");
  }
  if (updatedValue === "") {
    return [];
  }
  if (currentValue[0] === updatedValue[0]) {
    return [updatedValue[1]];
  }
  return [updatedValue[0]];
};
var PinInput = ({ autoFocus, disabled, inputIndex, inputMode, isValidated, name, onChange, pattern, type, value, values, hasError }) => {
  const inputRef = (0, import_react272.useRef)(null);
  const handleChange = (e2) => {
    const currentValue = values[inputIndex];
    const updatedValue = e2.target.value.replace(/\s+/g, "");
    const newValues = [...values];
    const normalizedValues = normalizeNewValue(currentValue, updatedValue).slice(0, newValues.length - inputIndex);
    const setValues = (normalizedValue, index) => newValues[inputIndex + index] = normalizedValue;
    const regex = type === "number" ? /(^$)|(\d+)/ : /.*/;
    const shouldChange = normalizedValues.every((normalizedValue) => regex.test(normalizedValue));
    let inputElement = inputRef.current;
    if (!shouldChange) {
      return;
    }
    if (normalizedValues.length) {
      normalizedValues.forEach(setValues);
    } else {
      newValues[inputIndex] = "";
    }
    onChange(newValues);
    for (let i = 0; i < normalizedValues.length; i++) {
      inputElement = inputElement === null || inputElement === void 0 ? void 0 : inputElement.nextElementSibling;
    }
    if (normalizedValues && inputElement instanceof HTMLInputElement) {
      inputElement.focus();
    }
  };
  const handleKeyDown = ({ key }) => {
    var _a;
    if (key === "Backspace" && values[inputIndex] === "" && inputIndex > 0) {
      const prevInput = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.previousElementSibling;
      if (prevInput instanceof HTMLInputElement) {
        prevInput.focus();
      }
    }
  };
  (0, import_react272.useEffect)(() => {
    var _a;
    if (autoFocus && inputIndex === 0) {
      (_a = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
  }, [autoFocus, inputIndex]);
  return (0, import_jsx_runtime241.jsx)("input", { ref: inputRef, className: classNames("pin-input__input", {
    "pin-input__input--error": Boolean(hasError),
    "pin-input__input--success": Boolean(isValidated)
  }), disabled, name, value, onChange: handleChange, onKeyDown: handleKeyDown, "data-testid": inputIndex, pattern, inputMode });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PinField/PinField.js
var isComplete = (values) => values.every((value) => value);
var PinField = ({ handleComplete, initialValue, inputMode, isLoading, isValidated, pattern, type = "number", hasError, onChange, disabled }) => {
  const [values, setValues] = (0, import_react273.useState)(initialValue);
  const handleOnChange = (values2) => {
    const value = values2.join("");
    setValues(values2);
    onChange === null || onChange === void 0 ? void 0 : onChange(value);
    if (isComplete(values2)) {
      handleComplete(value);
    }
  };
  return (0, import_jsx_runtime242.jsx)("div", { className: "pin-field__container", children: values.map((value, index) => (0, import_jsx_runtime242.jsx)(PinInput, { values, inputIndex: index, value, onChange: handleOnChange, disabled: isLoading || disabled, inputMode, isValidated, pattern, type, autoFocus: true, hasError }, `pin_input_${index}`)) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RetrySendVerificationCodeSection/RetrySendVerificationCodeSection.js
var import_jsx_runtime243 = __toESM(require_jsx_runtime(), 1);
var import_react275 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/check-circle.js
var React63 = __toESM(require_react(), 1);
var _path49;
var _excluded49 = ["title", "titleId"];
function _extends56() {
  _extends56 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends56.apply(this, arguments);
}
function _objectWithoutProperties49(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose52(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose52(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgCheckCircle = function SvgCheckCircle2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties49(_ref2, _excluded49);
  return React63.createElement("svg", _extends56({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React63.createElement("title", {
    id: titleId
  }, title2) : null, _path49 || (_path49 = React63.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M8 2.666a5.333 5.333 0 1 0 0 10.667A5.333 5.333 0 0 0 8 2.666ZM1.333 8a6.667 6.667 0 1 1 13.333 0A6.667 6.667 0 0 1 1.333 8Zm9.138-1.805c.26.26.26.682 0 .943L7.804 9.804a.667.667 0 0 1-.942 0L5.528 8.471a.667.667 0 1 1 .943-.943l.862.862 2.195-2.195c.26-.26.683-.26.943 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RetrySendVerificationCodeSection/RetrySendVerificationCodeSection.js
var import_react_dom131 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useCountdown/useCountdown.js
var import_react274 = __toESM(require_react(), 1);
var useCountdown = ({ callback, seconds }) => {
  const [remainingSeconds, setRemainingSeconds] = (0, import_react274.useState)(seconds);
  const timeoutRef = (0, import_react274.useRef)();
  const startCountdown = () => {
    if (timeoutRef.current) {
      return setRemainingSeconds(seconds);
    }
    runCountdown();
  };
  const stopCountdown = () => {
    clearTimeout(timeoutRef.current);
    timeoutRef.current = void 0;
  };
  const runCountdown = () => {
    timeoutRef.current = setTimeout(() => {
      setRemainingSeconds((prevSeconds) => prevSeconds - 1);
    }, 1e3);
  };
  (0, import_react274.useEffect)(() => {
    if (!timeoutRef.current)
      return;
    if (remainingSeconds <= 0) {
      if (callback)
        callback();
      return;
    }
    runCountdown();
    return () => clearTimeout(timeoutRef.current);
  }, [remainingSeconds, callback]);
  return { remainingSeconds, startCountdown, stopCountdown };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RetrySendVerificationCodeSection/RetrySendVerificationCodeSection.js
var import_qrcode129 = __toESM(require_browser(), 1);
var RetrySendVerificationCodeSection = ({ retryHandler, secondsToRetry = 15, disabled = false, className }) => {
  const { t: t2 } = useTranslation();
  const [retried, setRetried] = (0, import_react275.useState)(false);
  const { remainingSeconds, startCountdown } = useCountdown({
    callback: () => setRetried(false),
    seconds: secondsToRetry
  });
  const { isLoading, mutate: retry } = useMutation(retryHandler, {
    onSuccess: () => {
      setRetried(true);
      startCountdown();
    }
  });
  const containerClassName = classNames("retry-send-verification-code-section", className);
  if (retried) {
    return (0, import_jsx_runtime243.jsxs)("div", { className: containerClassName, children: [(0, import_jsx_runtime243.jsx)(Typography, { variant: "body_small", color: "secondary", copykey: "dyn_otp_verification.resend_code_in", children: t2("dyn_otp_verification.resend_code_in", { remainingSeconds }) }), (0, import_jsx_runtime243.jsxs)("span", { className: "retry-send-verification-code-section__confirmation", children: [(0, import_jsx_runtime243.jsx)(Icon, { color: "success-1", children: (0, import_jsx_runtime243.jsx)(SvgCheckCircle, {}) }), (0, import_jsx_runtime243.jsx)(Typography, { variant: "body_small", weight: "medium", color: "primary", copykey: "dyn_otp_verification.code_sent", children: t2("dyn_otp_verification.code_sent") })] })] });
  }
  return (0, import_jsx_runtime243.jsxs)("div", { className: containerClassName, children: [(0, import_jsx_runtime243.jsx)(Typography, { variant: "body_small", weight: "medium", color: "secondary", copykey: "dyn_otp_verification.code_not_received", children: t2("dyn_otp_verification.code_not_received") }), (0, import_jsx_runtime243.jsx)(TextButton, { className: "email-verification__text-button", disabled: isLoading || disabled, onClick: () => retry(), copykey: "dyn_otp_verification.resend_code", children: t2("dyn_otp_verification.resend_code") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailVerification/EmailVerification.js
var import_qrcode130 = __toESM(require_browser(), 1);
var SECONDS_TO_RETRY = 15;
var EmailVerification = ({ isEmailRecoveryFlow = false, showRetryButton: _showRetryButton = true, showTransferMessage: _showTransferMessage = false }) => {
  var _a, _b, _c, _d;
  const { environmentId, handleLogOut, setPrimaryWalletId, setShowAuthFlow, projectSettings, user, userWithMissingInfo, walletConnectorOptions, primaryWallet } = useInternalDynamicContext();
  const { setView, goToInitialView } = useViewContext();
  const { error, setError, setErrorMessage } = useErrorContext();
  const { loading, setLoading } = useLoadingContext();
  const [showRetryButton, setShowRetryButton] = (0, import_react276.useState)(_showRetryButton);
  const [showTransferMessage, setShowTransferMessage] = (0, import_react276.useState)(_showTransferMessage);
  const { getEOAWallet } = useSmartWallets();
  const [isValidated, _setIsValidated] = (0, import_react276.useState)(false);
  const isValidatedRef = (0, import_react276.useRef)(isValidated);
  const setIsValidated = (value) => {
    _setIsValidated(value);
    isValidatedRef.current = value;
  };
  const { displayedDestination: email, verificationUUID, setVerificationUUID } = useVerification();
  const { t: t2 } = useTranslation();
  const { addRecoveryEmail } = usePasskeyRecovery();
  const { isTurnkeyWallet, hasTurnkeyVerifiedCredentialAuthenticator, hasRecoveryEmail } = useIsTurnkeyWallet();
  const isTurnkeyProviderEnabled = isTurnkeyEnabled(projectSettings);
  const { initAuth: initAuth2, completeAuth, cancelAuth } = useUserAuth({
    authMethod: "email"
  });
  const { generateSessionKey, shouldRegisterSessionKeysOnSignin } = useEmbeddedWalletSessionKeys(environmentId);
  const callCallbackOnUnmount = (0, import_react276.useRef)(true);
  useOnUnmount(() => {
    if (!callCallbackOnUnmount.current)
      return;
    const emailString = email !== null && email !== void 0 ? email : "";
    dynamicEvents.emit("emailVerificationResult", isValidatedRef.current, emailString);
    if (!isValidatedRef.current)
      dynamicEvents.emit("authFailure", { email: emailString, option: emailString, type: "email" }, "user-cancelled");
    if (!email)
      logger2.warn("WARNING: emitted emailVerificationResult with incomplete params because useVerification's displayedDestination was undefined");
  });
  const { verifyOtp } = useOtpVerificationRequest();
  const completeSignInFlow = (0, import_react276.useCallback)((updateUserProfileResponse) => __awaiter(void 0, void 0, void 0, function* () {
    var _e2, _f, _g16, _h, _j, _k;
    if (updateUserProfileResponse.nextView === "verified-and-transferred") {
      setShowTransferMessage === null || setShowTransferMessage === void 0 ? void 0 : setShowTransferMessage(true);
    }
    if (isEmailRecoveryFlow) {
      setView("passkey-recovery-add-email", {
        canSkipAddingEmail: false,
        isFromEmailVerification: true
      });
      return true;
    }
    if (!isTurnkeyWallet) {
      return false;
    }
    if (hasTurnkeyVerifiedCredentialAuthenticator && !hasRecoveryEmail && ((_e2 = updateUserProfileResponse === null || updateUserProfileResponse === void 0 ? void 0 : updateUserProfileResponse.user) === null || _e2 === void 0 ? void 0 : _e2.email)) {
      storeAuthTokenAndUser(updateUserProfileResponse);
      yield addRecoveryEmail(updateUserProfileResponse.user.email);
      setShowAuthFlow(false);
      return true;
    }
    if (isTurnkeyProviderEnabled) {
      const isAutomaticWalletCreation = (_g16 = (_f = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _f === void 0 ? void 0 : _f.embeddedWallets) === null || _g16 === void 0 ? void 0 : _g16.automaticEmbeddedWalletCreation;
      const eoaWallet = primaryWallet && getEOAWallet(primaryWallet);
      const isSessionKeyCompatible = primaryWallet && isSessionKeyCompatibleWallet(primaryWallet) || eoaWallet && isSessionKeyCompatibleWallet(eoaWallet);
      const isUsingPregeneratedWallets = Boolean(isAutomaticWalletCreation && (!((_j = (_h = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _h === void 0 ? void 0 : _h.embeddedWallets) === null || _j === void 0 ? void 0 : _j.forceAuthenticatorAtSignup) || isSessionKeyCompatible));
      if (isUsingPregeneratedWallets) {
        const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(createUserProfileFromSdkUser(updateUserProfileResponse.user));
        if (!embeddedWalletVerifiedCredential) {
          throw new Error("Could not find an embedded wallet");
        }
        const walletOption = walletConnectorOptions === null || walletConnectorOptions === void 0 ? void 0 : walletConnectorOptions.find((option) => option.key === embeddedWalletVerifiedCredential.walletName);
        if (!(walletOption === null || walletOption === void 0 ? void 0 : walletOption.walletConnector)) {
          throw new Error("Could not find connector for embedded wallet");
        }
        const wallet = walletOption.walletConnector.createWallet({
          address: embeddedWalletVerifiedCredential.address || "",
          chain: walletOption.walletConnector.connectedChain,
          connector: walletOption.walletConnector,
          id: embeddedWalletVerifiedCredential.id,
          isAuthenticated: false,
          key: (_k = embeddedWalletVerifiedCredential.walletName) !== null && _k !== void 0 ? _k : ""
        });
        setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
        dynamicEvents.emit("embeddedWalletCreated", wallet, embeddedWalletVerifiedCredential, user);
      }
      if (isUsingPregeneratedWallets || !isAutomaticWalletCreation) {
        setShowAuthFlow(false);
        return true;
      }
    }
    return false;
  }), [
    isEmailRecoveryFlow,
    isTurnkeyWallet,
    hasTurnkeyVerifiedCredentialAuthenticator,
    hasRecoveryEmail,
    isTurnkeyProviderEnabled,
    setView,
    addRecoveryEmail,
    setShowAuthFlow,
    (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.embeddedWallets) === null || _b === void 0 ? void 0 : _b.automaticEmbeddedWalletCreation,
    (_d = (_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _c === void 0 ? void 0 : _c.embeddedWallets) === null || _d === void 0 ? void 0 : _d.forceAuthenticatorAtSignup,
    primaryWallet,
    getEOAWallet,
    walletConnectorOptions,
    setPrimaryWalletId,
    user
  ]);
  const handleEmailVerification = (0, import_react276.useCallback)((verificationToken) => __awaiter(void 0, void 0, void 0, function* () {
    setError(void 0);
    setLoading(true);
    if (!verificationUUID) {
      return cancelAuth();
    }
    if (!user && !userWithMissingInfo) {
      return initAuth2({
        onVerifySuccess: () => setIsValidated(true),
        options: { email },
        showSuccessMessage: true,
        verifyFunction: () => __awaiter(void 0, void 0, void 0, function* () {
          let sessionPublicKey = void 0;
          if (shouldRegisterSessionKeysOnSignin()) {
            const keypair = yield generateSessionKey();
            sessionPublicKey = keypair.publicKey;
          }
          return signInWithEmailVerification({
            environmentId,
            sessionPublicKey,
            verificationToken,
            verificationUUID
          });
        })
      });
    }
    return completeAuth({
      completeSignInFlow: (updateUserResponse) => __awaiter(void 0, void 0, void 0, function* () {
        return completeSignInFlow(updateUserResponse);
      }),
      onValidUpdatedJwt: () => {
        setIsValidated(true);
      },
      options: { email, isEmailRecoveryFlow },
      updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () {
        return verifyOtp(verificationToken, "email", verificationUUID);
      })
    });
  }), [
    setError,
    setLoading,
    verificationUUID,
    user,
    userWithMissingInfo,
    completeAuth,
    email,
    isEmailRecoveryFlow,
    cancelAuth,
    initAuth2,
    environmentId,
    completeSignInFlow,
    verifyOtp
  ]);
  const handleRetry = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
      if (!verificationUUID || !email) {
        return;
      }
      setLoading(true);
      const { verificationUUID: newVerificationUUID } = yield retryEmailVerification({
        email,
        environmentId,
        verificationUUID
      });
      setVerificationUUID(newVerificationUUID);
      setError(void 0);
    } catch (error2) {
      logger2.debug(error2);
      setErrorMessage(error2.code);
      if (error2.code === "too_many_email_verification_attempts") {
        setShowRetryButton(false);
      }
      if (error2.code === "invalid_email_verification") {
        goToInitialView();
      }
    } finally {
      setLoading(false);
    }
  });
  const EmailIcon2 = (0, import_react276.useMemo)(() => {
    const EmailIcon3 = (props) => (0, import_jsx_runtime244.jsx)(Icon, { color: "brand-primary", children: (0, import_jsx_runtime244.jsx)(SvgSignInWithEmail, Object.assign({}, props)) });
    return EmailIcon3;
  }, []);
  return (0, import_jsx_runtime244.jsxs)(import_jsx_runtime244.Fragment, { children: [error && (0, import_jsx_runtime244.jsx)(ErrorContainer, { withIcon: false, className: "email-verification__error-message", children: error }), (0, import_jsx_runtime244.jsxs)("div", { className: classNames("email-verification__container", {
    "email-verification__container--error": Boolean(error)
  }), children: [showTransferMessage && (0, import_jsx_runtime244.jsx)("div", { className: "email-verification__transfer-message", copykey: "dyn_otp_verification.email.complete", children: t2("dyn_otp_verification.email.complete") }), isValidated ? (0, import_jsx_runtime244.jsx)("div", { className: "email-verification__icon-container", children: (0, import_jsx_runtime244.jsx)(IconWithStatus, { containerClassName: "email-verification__icon--verified", Icon: EmailIcon2, iconSize: 64, InnerIcon: SvgCheck }) }) : (0, import_jsx_runtime244.jsx)(IconWithSpinner, { Icon: EmailIcon2, iconSize: 96, isSpinning: true, className: "email-verification__icon-with-spinner" }), (0, import_jsx_runtime244.jsxs)("div", { className: "email-verification__copy-text-container", children: [(0, import_jsx_runtime244.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_otp_verification.description", children: t2("dyn_otp_verification.description") }), (0, import_jsx_runtime244.jsx)(Typography, { variant: "body_normal", weight: "bold", color: "secondary", children: shortenEmail(email) })] }), (0, import_jsx_runtime244.jsx)(PinField, { initialValue: Array(6).join(".").split("."), isLoading: loading, handleComplete: handleEmailVerification, isValidated, inputMode: "numeric", pattern: "[0-9]*", hasError: Boolean(error), onChange: () => setError(void 0) }), showRetryButton && (0, import_jsx_runtime244.jsx)(RetrySendVerificationCodeSection, { className: "email-verification__retry-container", retryHandler: handleRetry, secondsToRetry: SECONDS_TO_RETRY }), (user || userWithMissingInfo) && !isEmailRecoveryFlow && (0, import_jsx_runtime244.jsx)(TextButton, { className: "email-verification__log-out", onClick: handleLogOut, copykey: "dyn_otp_verification.log_out_button", children: t2("dyn_otp_verification.log_out_button") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailWalletOTPVerificationView/EmailWalletOTPVerificationView.js
var import_jsx_runtime248 = __toESM(require_jsx_runtime(), 1);
var import_react279 = __toESM(require_react(), 1);
var import_react_dom133 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OTPVerificationView/OTPVerificationView.js
var import_jsx_runtime246 = __toESM(require_jsx_runtime(), 1);
var import_react277 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/ModalHeaderBanner/ModalHeaderBanner.js
var import_jsx_runtime245 = __toESM(require_jsx_runtime(), 1);
var typographyColor = {
  error: "error-1",
  notice: "brand-primary",
  success: "green-1"
};
var ModalHeaderBanner = ({ messageKey, type = "error", disableTruncate = false }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime245.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime245.jsx)(VerticalDrawerTransition, { style: { width: "100%" } }), children: Boolean(messageKey) && (0, import_jsx_runtime245.jsx)("div", { className: classNames("modal-header-banner", {
    "modal-header-banner__error": type === "error",
    "modal-header-banner__notice": type === "notice",
    "modal-header-banner__success": type === "success"
  }), children: (0, import_jsx_runtime245.jsx)(Typography, { variant: "body_small", color: typographyColor[type], truncate: disableTruncate === false, copykey: messageKey, children: t2(messageKey || "") }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OTPVerificationView/OTPVerificationView.js
var OTPVerificationView = ({ onClickBack, onClickEditDestination, isLoading, disabled, displayedDestination, description, onPinComplete, isValid, error, retryHandler, onPinChange, successBannerTextKey, MainIcon, hideHeader, appendAboveOTPInput, appendToEnd }) => {
  const { t: t2 } = useTranslation();
  const backButton = onClickBack && (0, import_jsx_runtime246.jsx)(IconButton, { type: "button", onClick: onClickBack, "data-testid": "back-button", children: (0, import_jsx_runtime246.jsx)(SvgArrowLeft, {}) });
  const titleCopyKey = (0, import_react277.useMemo)(() => isValid ? "dyn_otp_verification.verification_succeeded" : "dyn_otp_verification.confirm_code", [isValid]);
  return (0, import_jsx_runtime246.jsxs)(import_jsx_runtime246.Fragment, { children: [!hideHeader && (0, import_jsx_runtime246.jsx)(ModalHeader, { alignContent: "bottom", leading: onClickBack && backButton, children: (0, import_jsx_runtime246.jsx)("div", { className: "otp-verification-view__status-header", children: (0, import_jsx_runtime246.jsx)(Typography, { weight: "medium", variant: "title", color: "primary", className: "otp-verification-view__title", copykey: titleCopyKey, children: t2(titleCopyKey) }) }) }), successBannerTextKey && (0, import_jsx_runtime246.jsx)(ModalHeaderBanner, { type: "notice", messageKey: successBannerTextKey, disableTruncate: true }), (0, import_jsx_runtime246.jsx)(ModalHeaderBanner, { type: "error", messageKey: error === null || error === void 0 ? void 0 : error.message }), (0, import_jsx_runtime246.jsxs)("div", { className: classNames("otp-verification-view", {
    "otp-verification-view--message": Boolean(successBannerTextKey || error)
  }), children: [isValid && (0, import_jsx_runtime246.jsx)(IconWithStatus, { Icon: MainIcon, iconSize: 64, InnerIcon: SvgCheck }), !isValid && (0, import_jsx_runtime246.jsx)(IconWithSpinner, { Icon: MainIcon, iconSize: 96, isSpinning: isLoading, className: "otp-verification-view__icon-with-spinner", treatAsFunctionComponent: true }), (0, import_jsx_runtime246.jsxs)("div", { className: "otp-verification-view__body", children: [isValid && (0, import_jsx_runtime246.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_otp_verification.hang_tight", children: t2("dyn_otp_verification.hang_tight") }), !isValid && (description ? (0, import_jsx_runtime246.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_otp_verification.description", children: description }) : (0, import_jsx_runtime246.jsxs)(import_jsx_runtime246.Fragment, { children: [(0, import_jsx_runtime246.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_otp_verification.description", children: t2("dyn_otp_verification.description") }), (0, import_jsx_runtime246.jsxs)("div", { className: "otp-verification-view__destination-container", children: [displayedDestination && (0, import_jsx_runtime246.jsx)(Typography, { variant: "body_normal", weight: "bold", color: "secondary", children: displayedDestination }), onClickEditDestination && (0, import_jsx_runtime246.jsx)(IconButton, { onClick: onClickEditDestination, "data-testid": "otp-verification-view__edit-button", children: (0, import_jsx_runtime246.jsx)(Icon, { color: "text-tertiary", children: (0, import_jsx_runtime246.jsx)(SvgPencilAltIcon, {}) }) })] })] }))] }), appendAboveOTPInput, (0, import_jsx_runtime246.jsx)(PinField, { initialValue: Array(6).join(".").split("."), isLoading, handleComplete: onPinComplete, isValidated: isValid, inputMode: "numeric", pattern: "[0-9]*", hasError: Boolean(error), onChange: onPinChange, disabled }), retryHandler && (0, import_jsx_runtime246.jsx)(RetrySendVerificationCodeSection, { className: "otp-verification-view__retry-container", retryHandler }), appendToEnd] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/EmailIcon/EmailIcon.js
var import_jsx_runtime247 = __toESM(require_jsx_runtime(), 1);
var import_react278 = __toESM(require_react(), 1);
var EmailIcon = (props) => (0, import_jsx_runtime247.jsx)(Icon, { color: "brand-primary", children: (0, import_jsx_runtime247.jsx)(SvgSignInWithEmail, Object.assign({}, props, { "data-testid": "sign-in-with-email-icon" })) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmailWalletOTPVerificationView/EmailWalletOTPVerificationView.js
var import_qrcode131 = __toESM(require_browser(), 1);
var EmailWalletOTPVerificationView = () => {
  const { setView } = useViewContext();
  const [error, setError] = (0, import_react279.useState)();
  const { selectedWalletConnector: emailWalletConnector, clearStatesOnBackClick } = useInternalDynamicContext();
  if (!emailWalletConnector || !isEmailOTPWalletConnector(emailWalletConnector)) {
    throw new Error("Current wallet is not EmailWalletConnector");
  }
  const { email } = emailWalletConnector;
  if (!email) {
    throw new Error("EmailWalletOtpVerificationView requires a email");
  }
  const handleBackClick = () => {
    emailWalletConnector.clearEmail();
    clearStatesOnBackClick();
    setView("login-with-email-or-wallet");
    dynamicEvents.emit("authFailure", {
      email,
      option: email,
      type: "email"
    }, "user-cancelled");
  };
  const { data: isValid, isLoading, mutate: onSubmit } = useMutation((otp) => emailWalletConnector.verifyOneTimePassword(otp), {
    onFailure: (error2) => {
      setError(error2);
      dynamicEvents.emit("emailVerificationResult", false, email);
    },
    onSuccess: () => {
      dynamicEvents.emit("emailVerificationResult", true, email);
    }
  });
  return (0, import_jsx_runtime248.jsx)(OTPVerificationView, { MainIcon: EmailIcon, displayedDestination: shortenEmail(email), error, onClickBack: handleBackClick, isLoading, onPinComplete: onSubmit, isValid: isValid === true, retryHandler: emailWalletConnector.retryOneTimePassword.bind(emailWalletConnector), onPinChange: () => setError(void 0), onClickEditDestination: handleBackClick, successBannerTextKey: "dyn_magic_verification.banner_text" });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmbeddedReveal/EmbeddedRevealView/EmbeddedRevealView.js
var import_jsx_runtime249 = __toESM(require_jsx_runtime(), 1);
var import_react280 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/export-embedded-hero.js
var React64 = __toESM(require_react(), 1);
var _g7;
var _defs4;
var _excluded50 = ["title", "titleId"];
function _extends57() {
  _extends57 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends57.apply(this, arguments);
}
function _objectWithoutProperties50(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose53(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose53(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgExportEmbeddedHero = function SvgExportEmbeddedHero2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties50(_ref2, _excluded50);
  return React64.createElement("svg", _extends57({
    width: 329,
    height: 88,
    viewBox: "0 0 329 88",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React64.createElement("title", {
    id: titleId
  }, title2) : null, _g7 || (_g7 = React64.createElement("g", {
    clipPath: "url(#export-embedded-hero_svg__a)"
  }, React64.createElement("circle", {
    cx: 164.5,
    cy: 114,
    r: 114,
    fill: "url(#export-embedded-hero_svg__b)",
    fillOpacity: 0.12
  }), React64.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M195 23a4 4 0 0 1 4-4h40a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4h-40a4 4 0 0 1-4-4v-8Zm13.585 4c0 1.473-1.217 2.667-2.717 2.667-1.501 0-2.717-1.194-2.717-2.667 0-1.473 1.216-2.667 2.717-2.667 1.5 0 2.717 1.194 2.717 2.667Zm6.34 2.667c1.5 0 2.717-1.194 2.717-2.667 0-1.473-1.217-2.667-2.717-2.667-1.501 0-2.717 1.194-2.717 2.667 0 1.473 1.216 2.667 2.717 2.667ZM226.698 27c0 1.473-1.216 2.667-2.717 2.667-1.5 0-2.717-1.194-2.717-2.667 0-1.473 1.217-2.667 2.717-2.667 1.501 0 2.717 1.194 2.717 2.667Zm8.057 0c0 .903-.751 1.667-1.717 1.667-.966 0-1.717-.764-1.717-1.667s.751-1.667 1.717-1.667c.966 0 1.717.764 1.717 1.667Zm1 0c0 1.473-1.217 2.667-2.717 2.667-1.501 0-2.717-1.194-2.717-2.667 0-1.473 1.216-2.667 2.717-2.667 1.5 0 2.717 1.194 2.717 2.667ZM110.237 57.018c8.535-2.287 13.601-11.06 11.314-19.596-2.287-8.535-11.061-13.6-19.596-11.313-8.536 2.287-13.601 11.06-11.314 19.596 2.287 8.535 11.061 13.6 19.596 11.313Zm-8.712-17.797-.522-1.949a4.037 4.037 0 0 1 7.798-2.09l.522 1.95a6.727 6.727 0 1 1-7.798 2.09Zm4.573-2.535-.195-.727a1.036 1.036 0 1 0-2.002.537l.194.726a6.81 6.81 0 0 1 2.003-.536Zm1.567 6.87a1.749 1.749 0 0 0-1.586-3.023 1.75 1.75 0 0 0 .137 3.412l.368 1.37a.75.75 0 1 0 1.448-.388l-.367-1.37Z",
    fill: "#4779FF"
  }), React64.createElement("path", {
    d: "M171.501 40.667a4.666 4.666 0 0 1 4.667 4.666h-28a9.306 9.306 0 0 0-6.85 2.995c.788-4.357 4.6-7.661 9.183-7.661h21ZM187.834 59.333A9.334 9.334 0 0 0 178.5 50h-28a9.333 9.333 0 0 0-9.333 9.333V78a9.333 9.333 0 0 0 9.333 9.333h28A9.334 9.334 0 0 0 187.834 78V59.333Z",
    fill: "#4779FF"
  }), React64.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M174.25 65.25a6 6 0 1 0-12 0 6 6 0 0 0 12 0Zm-3 0a3 3 0 1 0-6 0 3 3 0 0 0 6 0Zm-9.37 3.892a7.497 7.497 0 0 0 2.005 2.237l-2.831 2.83 2.103 2.103-2.121 2.122-2.103-2.103-2.062 2.062-2.121-2.121 7.13-7.13Z",
    fill: "#fff"
  }))), _defs4 || (_defs4 = React64.createElement("defs", null, React64.createElement("linearGradient", {
    id: "export-embedded-hero_svg__b",
    x1: 164.5,
    y1: 0,
    x2: 164.5,
    y2: 93.5,
    gradientUnits: "userSpaceOnUse"
  }, React64.createElement("stop", {
    stopColor: "#4779FF"
  }), React64.createElement("stop", {
    offset: 1,
    stopColor: "#4779FF",
    stopOpacity: 0
  })), React64.createElement("clipPath", {
    id: "export-embedded-hero_svg__a"
  }, React64.createElement("rect", {
    x: 0.5,
    width: 328,
    height: 88,
    rx: 12,
    fill: "#fff"
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/info.js
var React65 = __toESM(require_react(), 1);
var _path50;
var _excluded51 = ["title", "titleId"];
function _extends58() {
  _extends58 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends58.apply(this, arguments);
}
function _objectWithoutProperties51(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose54(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose54(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgInfo = function SvgInfo2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties51(_ref2, _excluded51);
  return React65.createElement("svg", _extends58({
    width: 18,
    height: 18,
    viewBox: "0 0 18 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React65.createElement("title", {
    id: titleId
  }, title2) : null, _path50 || (_path50 = React65.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9 2.333a6.667 6.667 0 1 0 0 13.334A6.667 6.667 0 0 0 9 2.333ZM.667 9a8.333 8.333 0 1 1 16.666 0A8.333 8.333 0 0 1 .667 9Zm7.5-3.333c0-.46.373-.834.833-.834h.008a.833.833 0 0 1 0 1.667H9a.833.833 0 0 1-.833-.833ZM7.333 9c0-.46.373-.833.834-.833H9c.46 0 .833.373.833.833v2.5a.833.833 0 1 1 0 1.667H9a.833.833 0 0 1-.833-.834v-2.5A.833.833 0 0 1 7.333 9Z",
    fill: "#383C48"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/wallet-v2.js
var React66 = __toESM(require_react(), 1);
var _path51;
var _excluded52 = ["title", "titleId"];
function _extends59() {
  _extends59 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends59.apply(this, arguments);
}
function _objectWithoutProperties52(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose55(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose55(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgWalletV2 = function SvgWalletV22(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties52(_ref2, _excluded52);
  return React66.createElement("svg", _extends59({
    xmlns: "http://www.w3.org/2000/svg",
    width: 25,
    height: 24,
    viewBox: "0 0 25 24",
    fill: "none",
    "aria-labelledby": titleId
  }, props), title2 ? React66.createElement("title", {
    id: titleId
  }, title2) : null, _path51 || (_path51 = React66.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5.5 4a1 1 0 0 0 0 2h14a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3h-14a3 3 0 0 1-3-3V5a3 3 0 0 1 3-3h12a1 1 0 1 1 0 2h-12Zm-1 3.83V19a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1h-14c-.35 0-.687-.06-1-.17Zm11 6.17a1.5 1.5 0 1 1 3 0 1.5 1.5 0 0 1-3 0Z",
    fill: "#ABACB2"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmbeddedReveal/EmbeddedRevealView/EmbeddedRevealView.js
var import_react_dom134 = __toESM(require_react_dom(), 1);
var import_qrcode132 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/SignMessageConfirmationModal/getProperErrorMessage.js
var TurnkeyErrorMap = {
  0: "Operation was canceled.",
  16: "Invalid Passkey signature. Select the passkey for this account and device.",
  3: "You reached the limit of passkeys for this account.",
  5: "Invalid Passkey signature. Select the passkey for this account and device.",
  7: "The code is invalid or expired."
};
var reactNativePasskeyErrors = {
  RequestFailed: "Request failed. Please try again.",
  UserCancelled: TurnkeyErrorMap[0]
};
var DOMExceptionErrorMap = {
  NotAllowedError: "Request Cancelled. Select a device or password manager to set up a passkey."
};
var getProperErrorMessage = (originalError) => {
  var _a;
  if (typeof originalError === "string") {
    return originalError;
  }
  if ("reason" in originalError) {
    return originalError.reason;
  }
  if (originalError instanceof DOMException) {
    return DOMExceptionErrorMap[originalError.name] || "Something went wrong";
  }
  if ("cause" in originalError) {
    if (((_a = originalError === null || originalError === void 0 ? void 0 : originalError.cause) === null || _a === void 0 ? void 0 : _a.code) !== void 0) {
      if (originalError.cause.code === ACCESS_BLOCKED_ERROR_CODE) {
        throw new AccessBlockedError();
      }
      return TurnkeyErrorMap[originalError.cause.code];
    }
    if (originalError.cause && "error" in originalError.cause && typeof originalError.cause.error === "string" && reactNativePasskeyErrors[originalError.cause.error]) {
      return reactNativePasskeyErrors[originalError.cause.error];
    }
  }
  if ("code" in originalError && originalError.code) {
    if (originalError.code === ACCESS_BLOCKED_ERROR_CODE) {
      throw new AccessBlockedError();
    }
    return TurnkeyErrorMap[originalError.code];
  }
  if ("error" in originalError && typeof originalError.error === "string" && reactNativePasskeyErrors[originalError.error]) {
    return reactNativePasskeyErrors[originalError.error];
  }
  return "Something went wrong";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmbeddedReveal/constants.js
var iframeContainerId3 = "dyn-turnkey-export-container-id";
var iframeElementId3 = "dyn-turnkey-export-element-id";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EmbeddedReveal/EmbeddedRevealView/EmbeddedRevealView.js
var EmbeddedRevealView = ({ exportPrivateKey }) => {
  var _a, _b, _c, _d;
  const { primaryWallet, user, setShowAuthFlow, environmentId } = useInternalDynamicContext();
  const { isTurnkeyWallet } = useIsTurnkeyWallet();
  const { shadowRoot } = useShadowDOMContext();
  const { setDynamicWidgetView } = useWidgetContext();
  const { setView } = useViewContext();
  const { getEOAWallet, isSmartWallet } = useSmartWallets();
  const [acknowledgement1, setAcknowledgement1] = (0, import_react280.useState)(false);
  const [hasRevealedCoinbaseMpcKey, setHasRevealedCoinbaseMpcKey] = (0, import_react280.useState)(false);
  const iframeContainerRef = (0, import_react280.useRef)(null);
  const walletProperties = (_b = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _b === void 0 ? void 0 : _b.walletProperties;
  const isTurnkeyHDWallet = walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.turnkeyHDWalletId;
  const wallet = (_c = primaryWallet && getEOAWallet(primaryWallet)) !== null && _c !== void 0 ? _c : primaryWallet;
  const isCoinbaseMpcWallet = wallet && isCoinbaseMpcWalletConnector(wallet.connector);
  (0, import_react280.useEffect)(() => {
    return () => {
      if (isTurnkeyWallet) {
        cleanupExport({
          wallet
        });
      }
    };
  }, []);
  const { isLoading: exportLoading } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    var _e2, _f;
    const iframeContainerElement = iframeContainerRef.current;
    if (!iframeContainerElement || ((_e2 = iframeContainerElement === null || iframeContainerElement === void 0 ? void 0 : iframeContainerElement.children) === null || _e2 === void 0 ? void 0 : _e2.length) > 0) {
      return;
    }
    if (isSessionKeyCompatibleWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector)) {
      yield (_f = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _f === void 0 ? void 0 : _f.createOrRestoreSession();
    }
    return initExport({
      iframeContainer: iframeContainerElement,
      iframeElementId: iframeElementId3,
      wallet
    });
  }));
  const { mutate: handleExportWallet, isLoading, error, data } = useMutation(() => __awaiter(void 0, void 0, void 0, function* () {
    var _g16, _h, _j;
    if (isCoinbaseMpcWallet) {
      return (wallet === null || wallet === void 0 ? void 0 : wallet.connector).exportWalletKeys();
    }
    if (isTurnkeyWallet) {
      try {
        return yield exportCredential({
          address: exportPrivateKey ? wallet === null || wallet === void 0 ? void 0 : wallet.address : void 0,
          environmentId,
          user,
          wallet
        });
      } catch (_k) {
        if (isSessionKeyCompatibleWalletConnector(wallet === null || wallet === void 0 ? void 0 : wallet.connector) && ((_g16 = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _g16 === void 0 ? void 0 : _g16.removeSessionKeys)) {
          yield (_h = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _h === void 0 ? void 0 : _h.removeSessionKeys();
          yield (_j = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _j === void 0 ? void 0 : _j.createOrRestoreSession({
            ignoreRestore: true
          });
        }
        return exportCredential({
          address: exportPrivateKey ? wallet === null || wallet === void 0 ? void 0 : wallet.address : void 0,
          environmentId,
          user,
          wallet
        });
      }
    }
    return void 0;
  }), {
    onFailure: (err) => {
      logger2.error("Failed to export", err);
      dynamicEvents.emit("embeddedWalletRevealFailed", err);
    },
    onSuccess: (data2) => {
      var _a2, _b2;
      if (isCoinbaseMpcWallet && data2 && (data2 === null || data2 === void 0 ? void 0 : data2.length)) {
        const iframe = shadowRoot === null || shadowRoot === void 0 ? void 0 : shadowRoot.getElementById("coinbase-waas-key-export");
        (_a2 = iframe === null || iframe === void 0 ? void 0 : iframe.contentWindow) === null || _a2 === void 0 ? void 0 : _a2.postMessage({
          key: (_b2 = data2[0]) === null || _b2 === void 0 ? void 0 : _b2.ecKeyPrivate,
          type: "export_key"
        }, "*");
        setHasRevealedCoinbaseMpcKey(true);
      }
    }
  });
  const errorText = (0, import_react280.useMemo)(() => {
    if (!error) {
      return void 0;
    }
    if (error instanceof DynamicError) {
      return error.message;
    }
    try {
      return getProperErrorMessage(error);
    } catch (e2) {
      if (e2 instanceof AccessBlockedError) {
        setView("access-blocked");
      }
      return;
    }
  }, [error, setView]);
  const { t: t2 } = useTranslation();
  const contentHeader = (0, import_jsx_runtime249.jsxs)("div", { children: [primaryWallet && isSmartWallet(primaryWallet) && !isLoading && data && !error && (0, import_jsx_runtime249.jsxs)("div", { className: "embedded-reveal-view__zerodev-warning", children: [(0, import_jsx_runtime249.jsxs)("div", { className: "embedded-reveal-view__zerodev-warning__title-row", children: [(0, import_jsx_runtime249.jsx)(SvgInfo, { className: "embedded-reveal-view__zerodev-warning__icon" }), (0, import_jsx_runtime249.jsx)(Typography, { variant: "body_normal", weight: "bold", copykey: "dyn_embedded_reveal.aa_warning.title", children: t2("dyn_embedded_reveal.aa_warning.title") })] }), (0, import_jsx_runtime249.jsxs)(Typography, { variant: "body_normal", weight: "regular", copykey: "dyn_embedded_reveal.aa_warning.subtitle", children: [t2("dyn_embedded_reveal.aa_warning.subtitle"), (0, import_jsx_runtime249.jsx)("button", { onClick: () => {
    setShowAuthFlow(false);
    setDynamicWidgetView("send-balance");
  }, className: "embedded-reveal-view__zerodev-warning__link-button", children: (0, import_jsx_runtime249.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "primary", className: "underline", copykey: "dyn_embedded_reveal.aa_warning.button", children: t2("dyn_embedded_reveal.aa_warning.button") }) })] })] }), (0, import_jsx_runtime249.jsx)("div", { className: "embedded-reveal-view__body__description", children: !isLoading && data && !error ? (0, import_jsx_runtime249.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", children: t2("dyn_embedded_reveal.reveal_description") }) : (0, import_jsx_runtime249.jsx)("div", { className: "embedded-reveal-view__header", children: (0, import_jsx_runtime249.jsx)(SvgExportEmbeddedHero, {}) }) })] });
  (0, import_react280.useEffect)(() => {
    var _a2;
    if (((_a2 = iframeContainerRef === null || iframeContainerRef === void 0 ? void 0 : iframeContainerRef.current) === null || _a2 === void 0 ? void 0 : _a2.children) && data) {
      const iframeElement = iframeContainerRef.current.children[0];
      iframeElement === null || iframeElement === void 0 ? void 0 : iframeElement.setAttribute("style", !isTurnkeyHDWallet || exportPrivateKey ? "height: 60px" : "height: 100px");
    }
  }, [iframeContainerRef, data, isTurnkeyHDWallet, exportPrivateKey]);
  const closeButton = (0, import_jsx_runtime249.jsx)(IconButton, { onClick: () => setShowAuthFlow(false), type: "button", children: (0, import_jsx_runtime249.jsx)(SvgClose, {}) });
  const hasInjectedCredential = !isLoading && data && !error;
  const credentialTitle = !isTurnkeyHDWallet || exportPrivateKey ? t2("dyn_embedded_reveal.private_key_title") : t2("dyn_embedded_reveal.recovery_phrase_title");
  const title2 = hasInjectedCredential ? credentialTitle : t2("dyn_embedded_reveal.agreement_title");
  const coinbaseWaasKeyExportIframe = (0, import_jsx_runtime249.jsx)("iframe", { src: (_d = ApiEndpoint === null || ApiEndpoint === void 0 ? void 0 : ApiEndpoint.getBaseUrl()) === null || _d === void 0 ? void 0 : _d.replace("api/v0", "coinbase-waas-key-export.html"), id: "coinbase-waas-key-export", title: "Coinbase WaaS key export", height: hasRevealedCoinbaseMpcKey ? "100%" : 0, width: hasRevealedCoinbaseMpcKey ? "100%" : 0, style: {
    borderRadius: "0.75rem"
  }, allow: "clipboard-write" });
  return (0, import_jsx_runtime249.jsxs)(import_jsx_runtime249.Fragment, { children: [(0, import_jsx_runtime249.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime249.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", children: title2 }) }), (0, import_jsx_runtime249.jsx)("div", { className: "embedded-reveal-view", children: (0, import_jsx_runtime249.jsxs)("div", { className: "embedded-reveal-view__body", children: [contentHeader, isCoinbaseMpcWallet && coinbaseWaasKeyExportIframe, isTurnkeyWallet ? (0, import_jsx_runtime249.jsx)("div", { id: iframeContainerId3, style: { display: data ? "block" : "none" }, ref: iframeContainerRef }) : null, hasInjectedCredential ? (0, import_jsx_runtime249.jsx)(TypographyButton, { buttonPadding: "large", buttonVariant: "brand-primary", onClick: () => setShowAuthFlow(false), loading: isLoading, copykey: "dyn_embedded_reveal.done_button_label", typographyProps: {
    color: "inherit"
  }, children: t2("dyn_embedded_reveal.done_button_label") }) : (0, import_jsx_runtime249.jsxs)(import_jsx_runtime249.Fragment, { children: [(0, import_jsx_runtime249.jsx)("div", { className: "embedded-reveal-view__body__description", children: (0, import_jsx_runtime249.jsx)(Badge, { text: t2("dyn_embedded_reveal.badge_label"), className: "embedded-reveal-view__body__badge" }) }), errorText && (0, import_jsx_runtime249.jsx)(ErrorContainer, { children: errorText }), (0, import_jsx_runtime249.jsxs)("div", { className: "embedded-reveal-view__body__card", children: [(0, import_jsx_runtime249.jsxs)("div", { className: "embedded-reveal-view__body__card__statement", children: [(0, import_jsx_runtime249.jsx)("div", { className: "embedded-reveal-view__body__card__icon", children: (0, import_jsx_runtime249.jsx)(SvgWalletV2, {}) }), (0, import_jsx_runtime249.jsxs)("div", { children: [(0, import_jsx_runtime249.jsx)(Typography, { variant: "body_normal", color: "primary", style: { letterSpacing: "-0.15px" }, copykey: "dyn_embedded_reveal.statement_1.title", children: t2("dyn_embedded_reveal.statement_1.title") }), (0, import_jsx_runtime249.jsx)(Typography, { variant: "body_small", color: "secondary", weight: "regular", copykey: "dyn_embedded_reveal.statement_1.description", children: t2("dyn_embedded_reveal.statement_1.description") })] })] }), (0, import_jsx_runtime249.jsxs)("div", { className: "embedded-reveal-view__body__card__statement", children: [(0, import_jsx_runtime249.jsx)("div", { className: "embedded-reveal-view__body__card__icon", children: (0, import_jsx_runtime249.jsx)(SvgEyeOffIcon, {}) }), (0, import_jsx_runtime249.jsxs)("div", { children: [(0, import_jsx_runtime249.jsx)(Typography, { variant: "body_normal", color: "primary", style: { letterSpacing: "-0.15px" }, copykey: "dyn_embedded_reveal.statement_2.title", children: t2("dyn_embedded_reveal.statement_2.title") }), (0, import_jsx_runtime249.jsx)(Typography, { variant: "body_small", color: "secondary", weight: "regular", copykey: "dyn_embedded_reveal.statement_2.description", children: t2("dyn_embedded_reveal.statement_2.description", {
    credential_type: credentialTitle === null || credentialTitle === void 0 ? void 0 : credentialTitle.toLowerCase()
  }) })] })] })] }), (0, import_jsx_runtime249.jsxs)("div", { className: "embedded-reveal-view__body__confirm_card", children: [(0, import_jsx_runtime249.jsxs)("button", { className: "embedded-reveal-view__body__card__acknowledgement", onClick: () => setAcknowledgement1(!acknowledgement1), children: [(0, import_jsx_runtime249.jsx)("div", { children: (0, import_jsx_runtime249.jsx)(Checkbox, { checked: acknowledgement1, onChange: () => setAcknowledgement1(!acknowledgement1), className: "embedded-reveal-view__body__card__statement__checkbox", id: "embedded-reveal-checkbox-1" }) }), (0, import_jsx_runtime249.jsx)("div", { children: (0, import_jsx_runtime249.jsx)(Typography, { variant: "body_normal", color: "primary", style: { letterSpacing: "-0.15px" }, copykey: "dyn_embedded_reveal.checkbox_label", children: t2("dyn_embedded_reveal.checkbox_label") }) })] }), (0, import_jsx_runtime249.jsx)(TypographyButton, { buttonPadding: "large", buttonVariant: "brand-primary", typographyProps: {
    color: "inherit"
  }, onClick: () => handleExportWallet(), disabled: !acknowledgement1 || exportLoading, loading: isLoading, dataTestId: "embedded-reveal-button", copykey: "dyn_embedded_reveal.reveal_button_label", children: t2("dyn_embedded_reveal.reveal_button_label") })] })] })] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/FarcasterConnectView/FarcasterConnectView.js
var import_jsx_runtime254 = __toESM(require_jsx_runtime(), 1);
var import_react285 = __toESM(require_react(), 1);
var import_react_dom138 = __toESM(require_react_dom(), 1);
var import_qrcode135 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QrCodeWrapper/QrCodeWrapper.js
var import_jsx_runtime253 = __toESM(require_jsx_runtime(), 1);
var import_react284 = __toESM(require_react(), 1);
var import_react_dom137 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTimeout/useTimeout.js
var import_react281 = __toESM(require_react(), 1);
var useTimeout = (callback, delay) => {
  const savedCallback = (0, import_react281.useRef)(callback);
  useIsomorphicLayoutEffect3(() => {
    savedCallback.current = callback;
  }, [callback]);
  (0, import_react281.useEffect)(() => {
    if (!delay && delay !== 0) {
      return;
    }
    const id = setTimeout(() => savedCallback.current(), delay);
    return () => clearTimeout(id);
  }, [delay]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QrCodeWrapper/QrCodeWrapper.js
var import_qrcode134 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QrCodeWrapper/QrCodeContainer/QrCodeContainer.js
var import_jsx_runtime252 = __toESM(require_jsx_runtime(), 1);
var import_react283 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/externalLink.js
var React67 = __toESM(require_react(), 1);
var _path54;
var _excluded53 = ["title", "titleId"];
function _extends60() {
  _extends60 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends60.apply(this, arguments);
}
function _objectWithoutProperties53(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose56(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose56(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgExternalLink = function SvgExternalLink2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties53(_ref2, _excluded53);
  return React67.createElement("svg", _extends60({
    width: 12,
    height: 12,
    viewBox: "0 0 12 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React67.createElement("title", {
    id: titleId
  }, title2) : null, _path54 || (_path54 = React67.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M7.333 1.333a.667.667 0 1 1 0-1.333h4c.368 0 .667.298.667.667v4a.667.667 0 0 1-1.333 0v-2.39L5.138 7.804a.667.667 0 1 1-.943-.943l5.529-5.529h-2.39ZM2 2.667a.667.667 0 0 0-.667.666V10c0 .368.299.667.667.667h6.667A.667.667 0 0 0 9.333 10V7.333a.667.667 0 0 1 1.334 0V10a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3.333a2 2 0 0 1 2-2h2.667a.667.667 0 0 1 0 1.334H2Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QrCodeWrapper/QrCodeContainer/QrCodeContainer.js
var import_react_dom136 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/getBrowserIcon/getBrowserIcon.js
var browserIconMap = {
  brave: BraveIcon,
  chrome: ChromeIcon,
  edge: EdgeIcon,
  firefox: FirefoxIcon,
  safari: SafariIcon
};
var getBrowserIcon = (name) => browserIconMap[name];

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useWalletDownloadLinks/useWalletDownloadLinks.js
var useWalletDownloadLinks = (walletConnector) => {
  const { walletBook } = useWalletBookContext();
  if (!walletConnector) {
    return [];
  }
  const walletLinks = getWalletLinks(walletBook, walletConnector.key);
  const { currentDesktopUrl, userBrowser } = parseWalletLinks(walletLinks);
  if (userBrowser && currentDesktopUrl) {
    return [
      {
        Icon: getBrowserIcon(userBrowser),
        key: userBrowser,
        link: currentDesktopUrl,
        name: userBrowser
      }
    ];
  }
  return Object.entries(walletLinks).filter(([, link]) => link !== "").filter(([name]) => name !== "ios" && name !== "android").map(([name, link]) => ({
    Icon: getBrowserIcon(name),
    key: name,
    link,
    name
  }));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QRCode/QRCode.js
var import_jsx_runtime250 = __toESM(require_jsx_runtime(), 1);
var import_react282 = __toESM(require_react(), 1);
var import_qrcode133 = __toESM(require_browser(), 1);
var import_react_dom135 = __toESM(require_react_dom(), 1);
var generateMatrix = (value, errorCorrectionLevel) => {
  const arr = Array.prototype.slice.call(import_qrcode133.default.create(value, { errorCorrectionLevel }).modules.data, 0);
  const sqrt = Math.sqrt(arr.length);
  return arr.reduce((rows, key, index) => (index % sqrt === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows, []);
};
var QRCode = ({ ecl = "M", Icon: Icon2, logoMargin = 0, logoSize = 40, size = 250, value, accentColor, walletKey = void 0, showQrCodeImage }) => {
  const { data } = usePromise(() => import_qrcode133.default.toDataURL(value));
  const dots = (0, import_react282.useMemo)(() => {
    const dots2 = [];
    const matrix = generateMatrix(value || "QR Code value", ecl);
    const cellSize = size / matrix.length;
    const qrList = [
      { x: 0, y: 0 },
      { x: 1, y: 0 },
      { x: 0, y: 1 }
    ];
    qrList.forEach(({ x, y }) => {
      const x1 = (matrix.length - 7) * cellSize * x;
      const y1 = (matrix.length - 7) * cellSize * y;
      for (let i = 0; i < 3; i++) {
        dots2.push((0, import_jsx_runtime250.jsx)("rect", { fill: i % 2 !== 0 ? "currentColor" : accentColor, height: cellSize * (7 - i * 2), rx: i === 0 ? 10 : i === 1 ? 7 : 20, ry: i === 0 ? 10 : i === 1 ? 7 : 20, width: cellSize * (7 - i * 2), x: x1 + cellSize * i, y: y1 + cellSize * i }, `corner-square-${x}-${y}-${i}`));
      }
    });
    const clearArenaSize = Math.floor(logoSize * 1.5 / cellSize);
    const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;
    const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;
    for (let row = 0; row < matrix.length; row++) {
      for (let col = 0; col < matrix[row].length; col++) {
        if (matrix[row][col]) {
          if (
            // 7 is the length of each corner square, and we don't want to put
            // dots in the corner squares
            !(row < 7 && col < 7 || row > matrix.length - 8 && col < 7 || row < 7 && col > matrix.length - 8)
          ) {
            if (!(row > matrixMiddleStart && row < matrixMiddleEnd && col > matrixMiddleStart && col < matrixMiddleEnd)) {
              dots2.push((0, import_jsx_runtime250.jsx)("circle", { className: "qrcode__dot-circle", cx: row * cellSize + cellSize / 2, cy: col * cellSize + cellSize / 2, fill: Math.random() > 0.9 ? accentColor : "currentColor", r: cellSize / 2.25 }, `dot-${row}-${col}`));
            }
          }
        }
      }
    }
    return dots2;
  }, [ecl, logoSize, size, value, accentColor]);
  const logoPosition = size / 2 - logoSize / 2 - logoMargin;
  const walletsWithoutIndicator = ["coinbase", "walletconnect"];
  const indicator = !walletKey || walletsWithoutIndicator.includes(walletKey) ? void 0 : "walletConnect";
  return (0, import_jsx_runtime250.jsx)("div", { className: "qrcode__container", children: (0, import_jsx_runtime250.jsx)("div", { className: "qrcode", children: showQrCodeImage ? (0, import_jsx_runtime250.jsx)("img", { "data-testid": "qr-code-image", src: data, alt: "" }) : (0, import_jsx_runtime250.jsxs)(import_jsx_runtime250.Fragment, { children: [(0, import_jsx_runtime250.jsxs)("svg", { height: "100%", width: "100%", viewBox: `0 0 ${size} ${size}`, "data-testid": "qr-code", children: [(0, import_jsx_runtime250.jsx)("defs", { children: (0, import_jsx_runtime250.jsx)("clipPath", { id: "clip-logo", children: (0, import_jsx_runtime250.jsx)("rect", { height: logoSize, width: logoSize, x: logoPosition, y: logoPosition, rx: 7, ry: 7 }) }) }), (0, import_jsx_runtime250.jsx)("rect", { fill: "none", height: size, width: size }), dots] }), (0, import_jsx_runtime250.jsx)(IconWithSpinner, { Icon: Icon2, iconSize: logoSize, isSpinning: true, className: "qrcode__icon", indicator })] }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/LoadingQrCode/LoadingQrCode.js
var import_jsx_runtime251 = __toESM(require_jsx_runtime(), 1);
var LoadingQrCode = ({ Icon: Icon2, logoSize }) => (0, import_jsx_runtime251.jsx)("div", { className: "qrcode__container qrcode", "data-testid": "loading-qrcode", children: (0, import_jsx_runtime251.jsx)(IconWithSpinner, { Icon: Icon2, iconSize: logoSize, isSpinning: true, className: "qrcode__icon" }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QrCodeWrapper/QrCodeContainer/QrCodeContainer.js
var QrCodeContainer = ({ accentColor, walletConnector, qrcodeValue, Icon: MainIcon, showCopyToClipboardButton = false, desktopUri, showQrCodeMessage, showQrCodeImage }) => {
  const { t: t2 } = useTranslation();
  const { setView } = useViewContext();
  const downloadLinks = useWalletDownloadLinks(walletConnector);
  const renderAppOrExtensionButton = () => {
    if (desktopUri) {
      return (0, import_jsx_runtime252.jsx)(TypographyButton, { expanded: true, dataTestId: "get-extension-button", buttonPadding: "small", buttonVariant: "primary", buttonClassName: "qr-code-button", onClick: () => window.open(desktopUri), copykey: "dyn_qr_code.open_button", typographyProps: { variant: "button_secondary" }, startSlot: (
        // eslint-disable-next-line react/jsx-wrap-multilines
        (0, import_jsx_runtime252.jsx)(Icon, { size: "xsmall", color: "text-tertiary", children: (0, import_jsx_runtime252.jsx)(SvgExternalLink, {}) })
      ), children: t2("dyn_qr_code.open_button") });
    }
    if (downloadLinks === null || downloadLinks === void 0 ? void 0 : downloadLinks.length) {
      return (0, import_jsx_runtime252.jsx)(TypographyButton, { expanded: true, dataTestId: "get-extension-button", buttonPadding: "small", buttonVariant: "primary", buttonClassName: "qr-code-button", onClick: () => setView("no-qr-not-installed"), copykey: "dyn_qr_code.get_extension_button", typographyProps: { variant: "button_secondary" }, startSlot: (
        // eslint-disable-next-line react/jsx-wrap-multilines
        (0, import_jsx_runtime252.jsx)(Icon, { size: "xsmall", color: "text-tertiary", children: (0, import_jsx_runtime252.jsx)(SvgExternalLink, {}) })
      ), children: t2("dyn_qr_code.get_extension_button") });
    }
    return null;
  };
  return (0, import_jsx_runtime252.jsxs)("div", { className: classNames("qrcode-container__container", {
    "qrcode-container__container--message": showQrCodeMessage
  }), children: [(0, import_jsx_runtime252.jsxs)("div", { className: "qrcode-container__top", children: [qrcodeValue.length ? (0, import_jsx_runtime252.jsx)(QRCode, { Icon: MainIcon, accentColor, value: qrcodeValue, logoSize: 50, walletKey: walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key, showQrCodeImage }) : (0, import_jsx_runtime252.jsx)(LoadingQrCode, { Icon: MainIcon, logoSize: 50 }), (0, import_jsx_runtime252.jsxs)("div", { className: "button-container", children: [showCopyToClipboardButton && (0, import_jsx_runtime252.jsx)(CopyButton, { variant: "button", textToCopy: qrcodeValue, disabled: !qrcodeValue.length, buttonClassName: "qr-code-button", copykey: "dyn_qr_code.copy_button", startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime252.jsx)(Icon, { size: "mini", color: "text-tertiary", children: (0, import_jsx_runtime252.jsx)(SvgLink, {}) })
  ), children: t2("dyn_qr_code.copy_button") }), renderAppOrExtensionButton()] })] }), (0, import_jsx_runtime252.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", className: "qrcode-container__content", copykey: "dyn_qr_code.scan_title", children: t2("dyn_qr_code.scan_title", {
    app: walletConnector ? "wallet" : "app"
  }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/QrCodeWrapper/QrCodeWrapper.js
var QrCodeWrapper = ({ uri, desktopUri, icon, accentColor, showCopyToClipboardButton, walletConnector }) => {
  const [showQrCodeMessage, setShowQrCodeMessage] = (0, import_react284.useState)(false);
  const [showQrCodeImage, setShowQrCodeImage] = (0, import_react284.useState)(false);
  useTimeout(() => setShowQrCodeMessage(true), uri.length ? 5e3 : null);
  return (0, import_jsx_runtime253.jsxs)("div", { "data-testid": "qr-code-wrapper", className: "qr-code-wrapper", children: [(0, import_jsx_runtime253.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime253.jsx)(VerticalDrawerTransition, { style: { width: "100%" } }), children: showQrCodeMessage && !showQrCodeImage && (0, import_jsx_runtime253.jsxs)("div", { className: "qr-code-wrapper__scan-issue-message", children: [(0, import_jsx_runtime253.jsx)(Typography, { color: "primary", variant: "body_small", children: "If you're having issues scanning, click " }), (0, import_jsx_runtime253.jsx)("button", { "data-testid": "qr-code-wrapper__scan-issue-button", className: "qr-code-wrapper__scan-issue-button", onClick: () => setShowQrCodeImage(true), children: "here" })] }) }), (0, import_jsx_runtime253.jsx)(QrCodeContainer, { showQrCodeMessage, desktopUri, accentColor, walletConnector, qrcodeValue: uri, Icon: icon, showCopyToClipboardButton, showQrCodeImage })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/FarcasterConnectView/FarcasterConnectView.js
var FarcasterConnectView = ({ url }) => {
  const { theme: { theme } } = useThemeContext();
  const iconThemeVariant = useIconThemeVariant();
  const icon = (0, import_jsx_runtime254.jsx)(SocialIcon, { name: "farcaster", variant: iconThemeVariant });
  return (0, import_jsx_runtime254.jsx)(QrCodeWrapper, { uri: url, accentColor: iconThemeVariant === "dark" ? theme.colors.textPrimary : "#7b65c0", icon, showCopyToClipboardButton: true });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/LoginView.js
var import_jsx_runtime275 = __toESM(require_jsx_runtime(), 1);
var import_react305 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicAuthLayout/DefaultFooter/DefaultFooter.js
var import_jsx_runtime255 = __toESM(require_jsx_runtime(), 1);
var DefaultFooter = ({ hideBorder }) => (0, import_jsx_runtime255.jsx)("div", { className: classNames("default-footer__footer", {
  "default-footer__footer--hidden": hideBorder
}), "data-testid": "default-footer" });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletList.js
var import_jsx_runtime259 = __toESM(require_jsx_runtime(), 1);
var import_react289 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Search/Search.js
var import_jsx_runtime256 = __toESM(require_jsx_runtime(), 1);
var import_react286 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/assets/search.js
var React68 = __toESM(require_react(), 1);
var _path55;
var _excluded54 = ["title", "titleId"];
function _extends61() {
  _extends61 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends61.apply(this, arguments);
}
function _objectWithoutProperties54(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose57(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose57(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSearch = function SvgSearch2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties54(_ref2, _excluded54);
  return React68.createElement("svg", _extends61({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React68.createElement("title", {
    id: titleId
  }, title2) : null, _path55 || (_path55 = React68.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M6.667 2.667a4 4 0 1 0 0 8 4 4 0 0 0 0-8Zm-5.333 4a5.333 5.333 0 1 1 9.546 3.27l3.592 3.592a.667.667 0 0 1-.943.942L9.937 10.88a5.333 5.333 0 0 1-8.604-4.213Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Search/Search.js
var Search = ({ className = "", id, label, type, onChange, onBlur: onBlur3, name, value, onClickClear, copykey }) => (0, import_jsx_runtime256.jsxs)("label", { htmlFor: id, className: classNames("search__container", value ? "search__container--active" : void 0), children: [(0, import_jsx_runtime256.jsx)("div", { className: "search-icon__container", children: (0, import_jsx_runtime256.jsx)(SvgSearch, {}) }), (0, import_jsx_runtime256.jsx)("input", { name, value, onChange, onBlur: onBlur3, type, id, placeholder: label, className: classNames("search__input", className), "data-testid": "Search", copykey }), value.length > 0 && (0, import_jsx_runtime256.jsx)("button", { type: "button", onClick: onClickClear, className: "search__button--clear", children: "Clear" })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/utils/findLastWalletIndex/findLastPriorityIndex.js
var findLastPriorityIndex = (walletNames, priorityList) => priorityList.reduce((lastIndex, walletName) => {
  const walletIndex = walletNames.indexOf(walletName.toLowerCase());
  if (walletIndex > lastIndex)
    return walletIndex;
  return lastIndex;
}, -1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/utils/getCalculatedOffset/getCalculatedOffset.js
var getCalculatedOffset = ({ hasWalletFilter, defaultOffset, list, priorityList }) => {
  const lastPriorityIndex = findLastPriorityIndex(list, priorityList);
  if (defaultOffset === DEFAULT_NUMBER_OF_WALLETS_TO_SHOW && !hasWalletFilter && list.length > defaultOffset && lastPriorityIndex !== -1) {
    return lastPriorityIndex + 1;
  } else {
    return defaultOffset;
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/utils/groupWalletOptions/groupWalletOptions.js
var findGroupIndex = (groupKey, workingArray) => workingArray.findIndex((walletOption) => isWalletGroup(walletOption) && walletOption.key === groupKey);
var groupWalletOptions = (walletBook, walletOptionList) => {
  const output = [];
  walletOptionList.forEach((currentWalletOption) => {
    var _a;
    if (!currentWalletOption.group) {
      return output.push(currentWalletOption);
    }
    const existingGroupIndex = findGroupIndex(currentWalletOption.group, output);
    if (existingGroupIndex > -1) {
      return (_a = output[existingGroupIndex].groupedWallets) === null || _a === void 0 ? void 0 : _a.push(currentWalletOption);
    }
    const isThereWalletOptionWithSameGroup = walletOptionList.some((walletOption) => {
      var _a2;
      const isSameGroup = currentWalletOption.group === walletOption.group;
      const isDifferentKey = currentWalletOption.key !== walletOption.key;
      const hasInjectedConfig = ((_a2 = walletOption.injectedConfig) === null || _a2 === void 0 ? void 0 : _a2.length) && walletOption.injectedConfig.length > 1;
      return isSameGroup && (hasInjectedConfig || isDifferentKey);
    });
    if (!isThereWalletOptionWithSameGroup) {
      return output.push(currentWalletOption);
    }
    const walletBookData = getWalletGroup(walletBook, currentWalletOption.group);
    const walletGroup = {
      groupedWallets: [currentWalletOption],
      key: walletBookData.key,
      name: walletBookData.name
    };
    return output.push(walletGroup);
  });
  return output;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/utils/filterConnectedWallets/filterConnectedWallets.js
var filterConnectedWallets = ({ walletOptions, userWallets }) => {
  const connectedWalletKeys = new Set(userWallets.map((connectedWallet) => connectedWallet.connector.key));
  if (connectedWalletKeys.has("phantom") || connectedWalletKeys.has("phantomledger")) {
    connectedWalletKeys.add("phantom");
    connectedWalletKeys.add("phantomledger");
  }
  return walletOptions.filter((wallet) => !connectedWalletKeys.has(wallet.walletConnector.key));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getPlatformForConnector/getPlatformForConnector.js
var getPlatformForConnector = (connector) => isMobile() || connector.isWalletConnect ? "mobile" : "browserExtension";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/utils/staticLinkedWalletFilter/staticLinkedWalletFilter.js
var staticWalletFilter = (linkedWallets, walletOptions, walletBook) => walletOptions.filter((walletOption) => {
  if (isWalletEventSupported(findWalletBookWallet(walletBook, walletOption.key), "accountChanged", getPlatformForConnector(walletOption.walletConnector))) {
    return true;
  }
  if (linkedWallets.some((wallet) => wallet.connector.key === walletOption.key)) {
    return false;
  }
  return true;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/utils/filterWalletConnectWallets/filterWalletConnectWallets.js
var filterWalletConnectWallets = ({ walletOptions, userWallets }) => {
  const hasWCWallet = userWallets.some((wallet) => wallet.connector.isWalletConnect);
  if (!hasWCWallet) {
    return walletOptions;
  }
  return walletOptions.filter((walletOption) => !walletOption.walletConnector.isWalletConnect);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/utils/applyMultiWalletFilters/applyMultiWalletFilters.js
var applyMultiWalletFilters = ({ authMode, userWallets, walletOptions, walletBook }) => {
  const walletList = filterWalletConnectWallets({
    userWallets,
    walletOptions
  });
  if (authMode === "connect-only") {
    return filterConnectedWallets({
      userWallets,
      walletOptions: walletList
    });
  }
  return staticWalletFilter(userWallets, walletList, walletBook);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletListBuilder/walletListBuilder.js
var PRIORITY_WALLET_LIST = [
  "metamask",
  "coinbase",
  "walletconnect",
  "phantom",
  "argentx",
  "blocto",
  "solflare",
  "braavos",
  "trust",
  "rainbow",
  "dapper",
  "glow",
  "lilico"
];
var sortedInputList = (inputList, recommendedWalletKeys) => {
  const unsortedRecommendedWallets = [];
  const unsortedPriorityWallets = [];
  const unsortedOtherWallets = [];
  inputList.forEach((wallet) => {
    const isRecommendedWallet = recommendedWalletKeys.includes(wallet.key);
    if (isRecommendedWallet) {
      unsortedRecommendedWallets.push(wallet);
    } else if (PRIORITY_WALLET_LIST.includes(wallet.key) && !isRecommendedWallet) {
      unsortedPriorityWallets.push(wallet);
    } else {
      unsortedOtherWallets.push(wallet);
    }
  });
  const sortedPriorityWallets = unsortedPriorityWallets.slice().sort((a, b) => PRIORITY_WALLET_LIST.indexOf(a.key) - PRIORITY_WALLET_LIST.indexOf(b.key));
  const sortedRecommendedWallets = unsortedRecommendedWallets.slice().sort((a, b) => recommendedWalletKeys.indexOf(a.key) - recommendedWalletKeys.indexOf(b.key));
  return [
    ...sortedRecommendedWallets,
    ...sortedPriorityWallets,
    ...unsortedOtherWallets
  ];
};
var walletListBuilder = ({ authMode, userWallets, multiWallet, numberOfWalletsToShow, inputList, isWalletConnectList, lastUsedWalletKey, searchFilter, walletsFilter, loginWithEmail, groupWallets, walletBook, showMoreWalletsWithFilter, recommendedWallets }) => {
  let walletList = inputList;
  if (isWalletConnectList) {
    walletList = inputList.filter((wallet) => wallet.walletConnector.isWalletConnect && wallet.key !== "walletconnect");
  }
  if (multiWallet) {
    walletList = applyMultiWalletFilters({
      authMode,
      userWallets,
      walletBook,
      walletOptions: walletList
    });
  }
  let lastUsedWallet;
  const hasWalletFilter = Boolean(walletsFilter);
  const recommendedWalletsList = [];
  const installedWallets = [];
  const otherWallets = [];
  const recommendedWalletKeys = Array.from(new Set((recommendedWallets || []).map((w) => w.walletKey)));
  const orderedInputList = orderAndFilterList(walletList, walletsFilter, isWalletConnectList, recommendedWalletKeys);
  orderedInputList.forEach((wallet) => {
    const isRecommendedWallet = recommendedWalletKeys === null || recommendedWalletKeys === void 0 ? void 0 : recommendedWalletKeys.includes(wallet.key);
    if (isEmbeddedConnector(wallet.walletConnector)) {
      return;
    } else if (wallet.key === "unknown" || !wallet.walletConnector.isAvailable) {
      return;
    } else if (isRecommendedWallet) {
      recommendedWalletsList.push(wallet);
    } else if (lastUsedWalletKey === wallet.key) {
      lastUsedWallet = wallet;
    } else if (wallet.isInstalledOnBrowser) {
      installedWallets.push(wallet);
    } else {
      otherWallets.push(wallet);
    }
  });
  const firstPriorityWallets = [...lastUsedWallet ? [lastUsedWallet] : []];
  const walletsList = [
    ...recommendedWalletsList,
    ...firstPriorityWallets,
    ...installedWallets,
    ...otherWallets
  ];
  const finalizedWalletList = groupWallets ? groupWalletOptions(walletBook, walletsList) : walletsList;
  const updatedNumberOfWalletsToShow = showMoreWalletsWithFilter && hasWalletFilter ? calculateWalletOffsetBasedOnInstalledAndLastUsedWallets(orderedInputList, firstPriorityWallets.concat(installedWallets), numberOfWalletsToShow) : numberOfWalletsToShow;
  return {
    numberOfWallets: walletsList.length,
    walletsList: listToDisplay(finalizedWalletList, searchFilter, isWalletConnectList, updatedNumberOfWalletsToShow, hasWalletFilter, loginWithEmail)
  };
};
var orderAndFilterList = (walletList, walletsFilter, isWalletConnectList, recommendedWalletKeys) => {
  const sortedWalletList = sortedInputList(walletList, recommendedWalletKeys);
  if (!isWalletConnectList && walletsFilter) {
    return walletsFilter(sortedWalletList);
  } else {
    return sortedWalletList;
  }
};
var KEEP_WALLETS_NAME_LIST = ["walletconnect", "bitcoin.com wallet"];
var applySearchFilterToWalletOptionList = (rawSearchFilter, walletOptionList) => {
  const searchFilter = rawSearchFilter.trim().toLowerCase();
  const cleanName = (name) => {
    const trimmedLowerName = name.trim().toLowerCase();
    if (KEEP_WALLETS_NAME_LIST.includes(trimmedLowerName)) {
      return trimmedLowerName;
    } else {
      return trimmedLowerName.replace("wallet", "").replace("evm", "").replace("starknet", "").replace("solana", "").replace("flow", "").replace("bitcoin", "");
    }
  };
  return walletOptionList.filter((walletOption) => {
    var _a;
    return cleanName(walletOption.name).includes(searchFilter) || // Validate nested wallets
    ((_a = walletOption.groupedWallets) === null || _a === void 0 ? void 0 : _a.some((nestedWalletOption) => cleanName(nestedWalletOption.name).includes(searchFilter)));
  });
};
var listToDisplay = (finalizedList, searchFilter, isWalletConnectList, numberOfWalletsToShow, hasWalletFilter, loginWithEmail) => {
  if (searchFilter) {
    return applySearchFilterToWalletOptionList(searchFilter, finalizedList);
  } else if (isWalletConnectList) {
    return finalizedList;
  } else if (loginWithEmail) {
    return finalizedList.slice(0, numberOfWalletsToShow);
  } else {
    const list = finalizedList.map((wallet) => wallet.name.toLowerCase());
    const offset = getCalculatedOffset({
      defaultOffset: numberOfWalletsToShow,
      hasWalletFilter,
      list,
      priorityList: PRIORITY_WALLET_LIST
    });
    return finalizedList.slice(0, offset);
  }
};
var calculateWalletOffsetBasedOnInstalledAndLastUsedWallets = (allWalletsOrdered, installedOrUsedWallets, numberOfWalletsToShow) => {
  const filteredWallets = allWalletsOrdered.slice(0, numberOfWalletsToShow);
  const offset = installedOrUsedWallets.filter((wallet) => !filteredWallets.includes(wallet)).length;
  return numberOfWalletsToShow + offset;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletList.js
var import_react_dom141 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/assets/no-wallet-found.js
var React69 = __toESM(require_react(), 1);
var _path56;
var _rect2;
var _rect22;
var _rect3;
var _excluded55 = ["title", "titleId"];
function _extends62() {
  _extends62 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends62.apply(this, arguments);
}
function _objectWithoutProperties55(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose58(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose58(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgNoWalletFound = function SvgNoWalletFound2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties55(_ref2, _excluded55);
  return React69.createElement("svg", _extends62({
    width: 121,
    height: 81,
    viewBox: "0 0 121 81",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React69.createElement("title", {
    id: titleId
  }, title2) : null, _path56 || (_path56 = React69.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M99.064 34.016c-6.654 0-12.048 5.394-12.048 12.048 0 6.653 5.394 12.047 12.048 12.047 6.653 0 12.047-5.394 12.047-12.047 0-6.654-5.394-12.048-12.047-12.048ZM83 46.064C83 37.192 90.192 30 99.064 30c8.871 0 16.063 7.192 16.063 16.064 0 3.712-1.259 7.13-3.373 9.85l8.658 8.658a2.008 2.008 0 0 1-2.84 2.84l-8.658-8.658a15.994 15.994 0 0 1-9.85 3.373C90.192 62.127 83 54.935 83 46.064Z",
    fill: "currentColor",
    fillOpacity: 0.35
  })), _rect2 || (_rect2 = React69.createElement("rect", {
    y: 8,
    width: 121,
    height: 16,
    rx: 4,
    fill: "currentColor",
    fillOpacity: 0.3
  })), _rect22 || (_rect22 = React69.createElement("rect", {
    y: 30,
    width: 75,
    height: 16,
    rx: 4,
    fill: "currentColor",
    fillOpacity: 0.3
  })), _rect3 || (_rect3 = React69.createElement("rect", {
    y: 52,
    width: 75,
    height: 16,
    rx: 4,
    fill: "currentColor",
    fillOpacity: 0.3
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletList.js
var import_qrcode138 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/walletFilters/index.js
var SortWallets = (sortedWalletKeys) => (wallets2) => [...wallets2].sort((walletA, walletB) => {
  const indexA = sortedWalletKeys.indexOf(walletA.key);
  const indexB = sortedWalletKeys.indexOf(walletB.key);
  if (indexA !== -1 && indexB === -1) {
    return -1;
  } else if (indexA === -1 && indexB !== -1) {
    return 1;
  } else {
    return indexA - indexB;
  }
});
var FilterWallets = (walletKeys) => (wallets2) => wallets2.filter((wallet) => walletKeys.includes(wallet.key));
var RemoveWallets = (walletKeys) => (wallets2) => wallets2.filter((wallet) => !walletKeys.includes(wallet.key));
var FilterBridgeChainsName = (chainName) => (wallets2) => wallets2.filter((wallet) => wallet.walletConnector.supportedChains.includes(chainName));
var FilterAndSortWallets = (sortedWalletKeys) => (wallets2) => {
  const unsortedWallets = FilterWallets(sortedWalletKeys)(wallets2);
  return SortWallets(sortedWalletKeys)(unsortedWallets);
};
var UniswapFilter = () => (wallets2) => FilterAndSortWallets(["uniswap", "metamask", "coinbase", "walletconnect"])(wallets2);
var FilterChain = (chain) => (wallets2) => wallets2.filter((wallet) => wallet.walletConnector.supportedChains.includes(chain));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/SearchNotFoundMessage/SearchNotFoundMessage.js
var import_jsx_runtime257 = __toESM(require_jsx_runtime(), 1);
var import_react287 = __toESM(require_react(), 1);
var import_react_dom139 = __toESM(require_react_dom(), 1);
var import_qrcode136 = __toESM(require_browser(), 1);
var SearchNotFoundMessage = ({ title: title2, subtitle, image }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime257.jsxs)("div", { className: "search-instead__container", children: [image && (0, import_jsx_runtime257.jsx)(Icon, { className: "search-instead__container__image", color: "text-tertiary", children: image }), (0, import_jsx_runtime257.jsx)(Typography, { color: "secondary", variant: "body_small", weight: "regular", copykey: "dyn_wallet_list.wallet_missing.title", children: title2 || t2("dyn_wallet_list.wallet_missing.title") }), (0, import_jsx_runtime257.jsx)(Typography, { color: "primary", variant: "button_primary", weight: "regular", copykey: "dyn_wallet_list.wallet_missing.description", children: subtitle || t2("dyn_wallet_list.wallet_missing.description") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletListGridTabs/WalletListGridTabs.js
var import_jsx_runtime258 = __toESM(require_jsx_runtime(), 1);
var import_react288 = __toESM(require_react(), 1);
var import_react_dom140 = __toESM(require_react_dom(), 1);
var import_qrcode137 = __toESM(require_browser(), 1);
var WalletListGridTabs = ({ items, onSelect, value }) => (0, import_jsx_runtime258.jsx)("div", { className: "wallet-list-grid-tabs", children: items.map((item, index) => {
  const selected = value === index;
  const { icon, text } = item.label;
  const key = `${text}-${icon}-${items.indexOf(item)}`;
  const TabIcon = typeof icon === "string" ? (0, import_jsx_runtime258.jsx)("img", { src: icon, alt: text }) : icon;
  return (0, import_jsx_runtime258.jsxs)("button", { type: "button", className: classNames("wallet-list-grid-tabs__button", {
    "wallet-list-grid-tabs__button--selected": selected,
    "wallet-list-grid-tabs__button--text": Boolean(text)
  }), tabIndex: -1, "aria-label": text, onClick: () => onSelect(index), children: [TabIcon && (0, import_jsx_runtime258.jsx)(Icon, { size: "small", className: classNames({
    "wallet-list-grid-tabs__icon--selected": !selected
  }), children: TabIcon }), text && (0, import_jsx_runtime258.jsx)(Typography, { as: "span", variant: "body_small", weight: selected ? "bold" : "medium", color: selected ? "primary" : "secondary", children: text })] }, key);
}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/utils/getEffectiveWalletFilter.js
var getEffectiveWalletFilter = (selectedTabSettings, walletsFilter) => {
  if (selectedTabSettings && (selectedTabSettings === null || selectedTabSettings === void 0 ? void 0 : selectedTabSettings.walletsFilter)) {
    return selectedTabSettings.walletsFilter;
  }
  return walletsFilter;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/utils/getEffectiveRecommendedWallets.js
var getEffectiveRecommendedWallets = (selectedTabSettings, recommendedWallets) => {
  if (selectedTabSettings && (selectedTabSettings === null || selectedTabSettings === void 0 ? void 0 : selectedTabSettings.recommendedWallets)) {
    return selectedTabSettings.recommendedWallets;
  }
  return recommendedWallets;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/WalletList.js
var WalletList = ({ isWalletConnectList = false }) => {
  var _a;
  useEffectOnce(() => () => StorageService === null || StorageService === void 0 ? void 0 : StorageService.setItem(WALLET_PICKER_SEARCH_KEY, ""));
  const { walletsFilter, walletConnectorOptions, projectSettings, defaultNumberOfWalletsToShow, bridgeChainsToConnect, authMode, multiWallet, recommendedWallets, selectedTabIndex, setSelectedTabIndex, selectedTabSettings, tabsItems } = useInternalDynamicContext();
  const userWallets = useUserWallets();
  const { walletBook } = useWalletBookContext();
  const { error } = useErrorContext();
  const { showDefaultFooter } = useAuthLayoutChecks();
  const [footerBorderIsVisible, setFooterBorderIsVisible] = (0, import_react289.useState)(true);
  const { t: t2 } = useTranslation();
  const [filterValue, setFilterValue] = (0, import_react289.useState)((_a = StorageService.getItem(WALLET_PICKER_SEARCH_KEY)) !== null && _a !== void 0 ? _a : "");
  const getFilteredBridgeChains = (bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length) && FilterBridgeChainsName(bridgeChainsToConnect[0].chain);
  const filteredBridgeChains = getFilteredBridgeChains && getFilteredBridgeChains(walletConnectorOptions);
  const effectiveRecommendedWallets = getEffectiveRecommendedWallets(selectedTabSettings, recommendedWallets);
  const { numberOfWallets, walletsList } = walletListBuilder({
    authMode,
    groupWallets: true,
    inputList: filteredBridgeChains || walletConnectorOptions,
    isWalletConnectList,
    lastUsedWalletKey: StorageService.getItem(LAST_USED_WALLET),
    multiWallet,
    numberOfWalletsToShow: defaultNumberOfWalletsToShow,
    recommendedWallets: effectiveRecommendedWallets,
    searchFilter: filterValue,
    showMoreWalletsWithFilter: true,
    userWallets,
    walletBook,
    walletsFilter: getEffectiveWalletFilter(selectedTabSettings, walletsFilter)
  });
  const isSearchEnabled = Boolean(filterValue) || numberOfWallets > defaultNumberOfWalletsToShow && walletsList.length !== numberOfWallets;
  const isTabsEnabled = Boolean(tabsItems === null || tabsItems === void 0 ? void 0 : tabsItems.length);
  const walletListScrollRef = (0, import_react289.useRef)(null);
  const handleScroll = () => {
    const element = walletListScrollRef.current;
    if (!element) {
      return;
    }
    if ((element === null || element === void 0 ? void 0 : element.scrollTop) > (element === null || element === void 0 ? void 0 : element.clientHeight) * 1.25) {
      setFooterBorderIsVisible(false);
    } else {
      setFooterBorderIsVisible(true);
    }
  };
  const handleFilterValueChange = (value) => {
    StorageService.setItem(WALLET_PICKER_SEARCH_KEY, value);
    setFilterValue(value);
  };
  const searchContainer = !projectSettings ? (0, import_jsx_runtime259.jsx)(Skeleton, { className: "wallet-list__search-skeleton" }) : isSearchEnabled && (0, import_jsx_runtime259.jsx)("div", { className: classNames("wallet-list__search-container", {
    "wallet-list__search-container--scroll": !error
  }), children: (0, import_jsx_runtime259.jsx)(Search, { copykey: "dyn_wallet_list.search.label", label: t2("dyn_wallet_list.search.label", { numberOfWallets }), value: filterValue, onChange: ({ target: { value } }) => handleFilterValueChange(value), onClickClear: () => handleFilterValueChange("") }) });
  return (0, import_jsx_runtime259.jsxs)(import_jsx_runtime259.Fragment, { children: [isTabsEnabled && (0, import_jsx_runtime259.jsx)("div", { className: "wallet-list__tabs-container", children: (0, import_jsx_runtime259.jsx)(
    WalletListGridTabs,
    {
      // The tabsItems nullable assertion is safe here because isTabsEnabled is true
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      items: tabsItems,
      value: selectedTabIndex || 0,
      onSelect: setSelectedTabIndex
    }
  ) }), searchContainer, Boolean(error) && (0, import_jsx_runtime259.jsx)(ErrorContainer, { className: "wallet-list__error-container", withIcon: false, children: error }), (0, import_jsx_runtime259.jsx)("div", { className: "wallet-list__container", children: (0, import_jsx_runtime259.jsxs)("div", { className: classNames("wallet-list__scroll-container", {
    "wallet-list__scroll-container--error": Boolean(error),
    "wallet-list__scroll-container--fixed-height": isTabsEnabled
  }), "data-testid": "wallet-list-scroll-container", ref: walletListScrollRef, onScroll: handleScroll, children: [!projectSettings ? (0, import_jsx_runtime259.jsx)(Skeleton, { count: 10, className: "wallet-list__tile-skeleton" }) : (0, import_jsx_runtime259.jsxs)(import_jsx_runtime259.Fragment, { children: [walletConnectorOptions.length === 0 && (0, import_jsx_runtime259.jsx)(ErrorContainer, { copykey: "dyn_wallet_list.configuration_mismatch", children: t2("dyn_wallet_list.configuration_mismatch") }), walletConnectorOptions.length && walletsList.length === 0 ? (0, import_jsx_runtime259.jsx)(SearchNotFoundMessage, { title: t2("dyn_wallet_list.search.not_found.title"), subtitle: t2("dyn_wallet_list.search.not_found.description"), image: (0, import_jsx_runtime259.jsx)(SvgNoWalletFound, {}) }) : walletsList.map((wallet, index) => (0, import_jsx_runtime259.jsx)(WalletListItem, { wallet, onResetSearchValue: () => handleFilterValueChange(""), recommendedWallets: effectiveRecommendedWallets }, `${wallet.key}_${index}`))] }), isSearchEnabled && !filterValue && projectSettings && (0, import_jsx_runtime259.jsx)(SearchNotFoundMessage, {})] }) }), showDefaultFooter && (0, import_jsx_runtime259.jsx)(DefaultFooter, { hideBorder: !footerBorderIsVisible })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/FarcasterQrCodeView/FarcasterQrCodeView.js
var import_jsx_runtime260 = __toESM(require_jsx_runtime(), 1);
var import_react290 = __toESM(require_react(), 1);
var FarcasterQrCodeView = () => {
  const { setError } = useErrorContext();
  const [url, setUrl] = (0, import_react290.useState)(void 0);
  const { connectSocialAccount } = useSocialAuth({
    onError: () => setError("Something went wrong"),
    onFarcasterUrl: (url2) => setUrl(url2),
    sessionTimeout: 2e4
  });
  useEffectOnce(() => {
    connectSocialAccount({
      authMode: "signin",
      provider: ProviderEnum.Farcaster
    });
  });
  return (0, import_jsx_runtime260.jsx)(FarcasterConnectView, { url: url !== null && url !== void 0 ? url : "" });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/LoginViewSection/LoginViewSection.js
var import_jsx_runtime272 = __toESM(require_jsx_runtime(), 1);
var import_react302 = __toESM(require_react(), 1);
var import_react_dom152 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/PhoneNumberSignInSection/PhoneNumberSignInSection.js
var import_jsx_runtime263 = __toESM(require_jsx_runtime(), 1);
var import_react293 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isPhoneNumberProviderEnabled/isPhoneNumberProviderEnabled.js
var import_jsx_runtime261 = __toESM(require_jsx_runtime(), 1);
var import_react291 = __toESM(require_react(), 1);
var isPhoneNumberProviderEnabled = (providers) => Boolean(providers && isProviderEnabled(providers, ProviderEnum.Sms));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/PhoneNumberSignInSection/PhoneNumberSignInSection.js
var import_react_dom143 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/PhoneNumberSignInSection/useSubmitPhoneNumber/useSubmitPhoneNumber.js
var import_react292 = __toESM(require_react(), 1);
var import_jsx_runtime262 = __toESM(require_jsx_runtime(), 1);
var import_react_dom142 = __toESM(require_react_dom(), 1);
var import_qrcode139 = __toESM(require_browser(), 1);
var useSubmitPhoneNumber = ({ onSubmit, onSubmitError, country, phone, setInvalidNumberMessage }) => {
  const { engageCaptcha } = useCaptchaContext();
  const { view, setView } = useViewContext();
  const { environmentId, projectSettings } = useInternalDynamicContext();
  const { setDisplayedDestination, setVerificationUUID, setRetryData } = useVerification();
  const { fieldsConfig } = useFields();
  const { t: t2 } = useTranslation();
  const submitPhoneNumber = (captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
    if (!country)
      return;
    try {
      const phoneNumber = de({
        dialCode: country.dialCode,
        phone
      });
      const { verificationUUID } = yield createSmsVerification({
        captchaToken,
        environmentId,
        isoCountryCode: country.iso2,
        phoneCountryCode: country.dialCode,
        phoneNumber
      });
      setRetryData({
        dialCode: country.dialCode,
        iso2: country.iso2,
        phone: phoneNumber
      });
      setView("login-with-sms-verification");
      setDisplayedDestination(formatPhone(phone));
      setVerificationUUID(verificationUUID);
      const phoneData = {
        dialCode: country.dialCode,
        iso2: country.iso2,
        phone: phoneNumber
      };
      dynamicEvents.emit("authInit", {
        option: phoneData,
        phone: phoneData,
        type: "sms"
      });
      onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
    } catch (error) {
      setView(view.type);
      if (error instanceof SmsVerificationError) {
        let message = t2("dyn_login.helper.phone_number_form.invalid_phone");
        if (error.code === "too_many_sms_verification_attempts") {
          message = t2("dyn_login.helper.phone_number_form.too_many_sms_verification_attempts");
        }
        if (error.code && error.code in translation.dyn_login.helper.phone_number_form)
          message = t2("dyn_login.helper.phone_number_form." + error.code);
        setInvalidNumberMessage(message);
      } else if (typeof error === "string")
        setInvalidNumberMessage(error);
      onSubmitError === null || onSubmitError === void 0 ? void 0 : onSubmitError();
    }
  });
  return (event) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!country)
      return;
    event.preventDefault();
    try {
      fieldsConfig.phoneNumber.validation.validateSync(phone);
    } catch (error) {
      const { message } = error;
      setInvalidNumberMessage(message);
      onSubmitError === null || onSubmitError === void 0 ? void 0 : onSubmitError();
      return;
    }
    if ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _a === void 0 ? void 0 : _a.enabled) {
      engageCaptcha({
        authMethod: "phone",
        onCaptchaSuccess: submitPhoneNumber
      });
      return;
    }
    submitPhoneNumber();
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/PhoneNumberSignInSection/PhoneNumberSignInSection.js
var import_qrcode140 = __toESM(require_browser(), 1);
var PhoneNumberSignInSection = ({ isLoading, onSubmit, onSubmitError }) => {
  var _a, _b;
  const { projectSettings } = useInternalDynamicContext();
  const countriesWithVerification = (0, import_react293.useMemo)(() => {
    const enabledCountries = getSupportedCountriesForVerificationFromProjectSettings(projectSettings);
    return getCustomCountries(getDefaultCountriesIfEmpty(enabledCountries));
  }, [projectSettings]);
  const [invalidNumberMessage, setInvalidNumberMessage] = (0, import_react293.useState)(void 0);
  const [isInputComplete, setIsInputComplete] = (0, import_react293.useState)(false);
  const [phoneData, setPhoneData] = (0, import_react293.useState)({
    country: void 0,
    phone: ""
  });
  const handleUpdate = (0, import_react293.useCallback)((phoneData2) => {
    setPhoneData(phoneData2);
    setIsInputComplete(validatePhoneLength(phoneData2.phone, phoneData2.country));
  }, []);
  const [isHovered, setIsHovered] = (0, import_react293.useState)(false);
  const [isFocused, setIsFocused] = (0, import_react293.useState)(false);
  const handleSubmit = useSubmitPhoneNumber({
    country: phoneData.country,
    onSubmit,
    onSubmitError,
    phone: phoneData.phone,
    setInvalidNumberMessage
  });
  if (!isPhoneNumberProviderEnabled((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [])) {
    logger2.error("Failed to render PhoneNumberSignInSection - no sign in provider enabled");
    return null;
  }
  const showBigSubmitButton = !((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design.modal) === null || _b === void 0 ? void 0 : _b.emailSubmitButtonInsideInput);
  return (0, import_jsx_runtime263.jsxs)("form", { className: "login-with-phone-number-form", onSubmit: (e2) => handleSubmit(e2), children: [(0, import_jsx_runtime263.jsx)(PhoneNumberField, { countries: countriesWithVerification, onUpdate: handleUpdate, error: invalidNumberMessage, setIsHovered, setIsFocused, appendRight: (0, import_jsx_runtime263.jsx)(InlineSubmitButton, { disabled: isLoading || !isInputComplete, highlighted: isInputComplete, isFocused, isHovered, className: "login-with-phone-number-form__fields__inline-submit", emailSubmitButtonInsideInput: !showBigSubmitButton }) }), showBigSubmitButton && (0, import_jsx_runtime263.jsx)(TypographyButton, { dataTestId: "big-submit-button", buttonClassName: "login-with-phone-number-form__button", type: "submit", loading: isLoading, disabled: isLoading || !isInputComplete, buttonVariant: "brand-primary", buttonPadding: "login-screen-height", expanded: true, typographyProps: {
    color: "inherit"
  }, children: "Continue" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/SocialSignInSection.js
var import_jsx_runtime267 = __toESM(require_jsx_runtime(), 1);
var import_react297 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getSocialSignInProviderFromString/getSocialSignInProviderFromString.js
var getSocialSignInProviderFromString = (provider) => {
  if (!provider)
    return;
  const values = Object.values(SocialSignInProviderEnum);
  for (const value of values) {
    if (value === provider) {
      return value;
    }
  }
  return void 0;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/SocialSignInSection.js
var import_react_dom147 = __toESM(require_react_dom(), 1);
var import_qrcode144 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/MagicSocialSignIn/MagicSocialSignIn.js
var import_jsx_runtime265 = __toESM(require_jsx_runtime(), 1);
var import_react295 = __toESM(require_react(), 1);
var import_react_dom145 = __toESM(require_react_dom(), 1);
var import_qrcode142 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SocialSignIn/SocialSignIn.js
var import_jsx_runtime264 = __toESM(require_jsx_runtime(), 1);
var import_react294 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/dots-horizontal.js
var React70 = __toESM(require_react(), 1);
var _path57;
var _excluded56 = ["title", "titleId"];
function _extends63() {
  _extends63 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends63.apply(this, arguments);
}
function _objectWithoutProperties56(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose59(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose59(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgDotsHorizontal = function SvgDotsHorizontal2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties56(_ref2, _excluded56);
  return React70.createElement("svg", _extends63({
    width: 21,
    height: 20,
    viewBox: "0 0 21 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React70.createElement("title", {
    id: titleId
  }, title2) : null, _path57 || (_path57 = React70.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.7 10a1.667 1.667 0 1 1 3.333 0A1.667 1.667 0 0 1 2.7 10Zm5.833 0a1.667 1.667 0 1 1 3.334 0 1.667 1.667 0 0 1-3.334 0Zm5.834 0a1.667 1.667 0 1 1 3.333 0 1.667 1.667 0 0 1-3.333 0Z",
    fill: "currentColor",
    fillOpacity: 0.4
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/providerLabel/providerLabel.js
var providerLabel = (provider) => {
  if (!provider) {
    return void 0;
  }
  if (provider === SocialSignInProviderEnum.Coinbasesocial) {
    return "Coinbase";
  }
  return capitalize3(provider);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SocialSignIn/SocialSignIn.js
var import_react_dom144 = __toESM(require_react_dom(), 1);
var import_qrcode141 = __toESM(require_browser(), 1);
var INTERNAL_MAX_INLINE_ITEMS = 5;
var SocialSignIn = ({ providers, onSelectProvider, isLoading, selectedProvider, testId, defaultProvider, numOfItemsToDisplay: externalMaxInlineItems = 5, collapsedLayout }) => {
  const { t: t2 } = useTranslation();
  const iconThemeVariant = useIconThemeVariant();
  if (defaultProvider && !providers.includes(defaultProvider)) {
    [defaultProvider] = providers;
  }
  const inlineProviders = providers.filter((provider) => provider !== defaultProvider);
  const maxInlineItems = Math.min(externalMaxInlineItems, INTERNAL_MAX_INLINE_ITEMS);
  const showAllProvidersButton = inlineProviders.length > maxInlineItems;
  const cappedInlineProviders = showAllProvidersButton ? inlineProviders.slice(0, maxInlineItems - 1) : inlineProviders.slice(0, maxInlineItems);
  const [showAllProvidersCard, setShowAllProvidersCard] = (0, import_react294.useState)(false);
  const closeAllProvidersCard = () => !isLoading && setShowAllProvidersCard(false);
  const showAllFullWidth = providers.length === 1 || !collapsedLayout && providers.length < 4;
  const getProviderAsString = (provider) => provider;
  const closeButton = (0, import_jsx_runtime264.jsx)(IconButton, { onClick: closeAllProvidersCard, type: "button", id: "close-button", disabled: isLoading, "data-testid": "close-button", children: (0, import_jsx_runtime264.jsx)(SvgClose, {}) });
  const renderProviderItem = (provider, fullWidth = false, insideCard = false) => (0, import_jsx_runtime264.jsxs)(IconListTile, { dataTestId: insideCard ? `card-${provider}` : `inline-${provider}`, onClick: () => onSelectProvider(provider), disabled: Boolean(selectedProvider), className: classNames({
    "social-sign-in--card--tile": insideCard,
    "social-sign-in--tile": !insideCard,
    "social-sign-in--tile__full-width": fullWidth
  }), children: [(0, import_jsx_runtime264.jsx)(IconWithSpinner, { Icon: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime264.jsx)(SocialIcon, { name: getProviderAsString(provider), variant: iconThemeVariant })
  ), isSpinning: selectedProvider === provider, iconSize: 32 }), !insideCard && fullWidth && (0, import_jsx_runtime264.jsx)(Typography, { variant: "button_primary", copykey: "dyn_login.social.button_label", children: t2("dyn_login.social.button_label", {
    provider: providerLabel(provider)
  }) })] }, getProviderAsString(provider));
  if (!providers.length) {
    logger2.error("Failed to render SocialSignInSection - no social providers enabled");
    return null;
  }
  return (0, import_jsx_runtime264.jsxs)(import_jsx_runtime264.Fragment, { children: [(0, import_jsx_runtime264.jsxs)("div", { className: "social-sign-in", "data-testid": testId, children: [defaultProvider && renderProviderItem(defaultProvider, true), cappedInlineProviders.map((provider) => renderProviderItem(provider, showAllFullWidth)), showAllProvidersButton && (0, import_jsx_runtime264.jsx)(IconListTile, { dataTestId: "show-more-options", onClick: () => setShowAllProvidersCard(true), className: "social-sign-in--tile", children: (0, import_jsx_runtime264.jsx)(Icon, { color: "text-primary", children: (0, import_jsx_runtime264.jsx)(SvgDotsHorizontal, {}) }) }, "show-more-options")] }), (0, import_jsx_runtime264.jsx)(OverlayCard, { isOpen: showAllProvidersCard, onClickOverlay: closeAllProvidersCard, children: (0, import_jsx_runtime264.jsxs)("div", { className: "social-sign-in--card", children: [(0, import_jsx_runtime264.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime264.jsx)(Typography, { weight: "medium", variant: "body_normal", color: "primary", as: "span", children: "Choose a social account" }) }), (0, import_jsx_runtime264.jsx)("div", { className: "social-sign-in--card--body", children: providers.map((provider) => renderProviderItem(provider, false, true)) })] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/MagicSocialSignIn/MagicSocialSignIn.js
var MagicSocialSignIn = ({ defaultProvider, numOfItemsToDisplay, collapsedLayout }) => {
  const { projectSettings } = useInternalDynamicContext();
  const { socialProvider, setSocialProvider, socialWalletConnector, enabledSocialProviders } = useSocialRedirectContext();
  const { engageCaptcha } = useCaptchaContext();
  const { mutate: onClickProvider, isLoading } = useMutation((provider) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _a === void 0 ? void 0 : _a.enabled) {
      engageCaptcha({
        authMethod: "social",
        onCaptchaSuccess: (captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
          setSocialProvider(provider);
          yield socialWalletConnector === null || socialWalletConnector === void 0 ? void 0 : socialWalletConnector.endSession();
          return socialWalletConnector === null || socialWalletConnector === void 0 ? void 0 : socialWalletConnector.connect(provider);
        })
      });
      return;
    }
    setSocialProvider(provider);
    yield socialWalletConnector === null || socialWalletConnector === void 0 ? void 0 : socialWalletConnector.endSession();
    return socialWalletConnector === null || socialWalletConnector === void 0 ? void 0 : socialWalletConnector.connect(provider);
  }));
  return (0, import_jsx_runtime265.jsx)(SocialSignIn, { onSelectProvider: onClickProvider, providers: enabledSocialProviders, selectedProvider: socialProvider, isLoading, testId: "magic-social-sign-in", defaultProvider, numOfItemsToDisplay, collapsedLayout });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/DynamicSocialSignIn/DynamicSocialSignIn.js
var import_jsx_runtime266 = __toESM(require_jsx_runtime(), 1);
var import_react296 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getProviderEnumForSocialSignInProvider/getProviderEnumForSocialSignInProvider.js
var getProviderEnumForSocialSignInProvider = (provider) => {
  if (!provider)
    return null;
  const values = Object.values(ProviderEnum);
  for (const value of values) {
    if (value === provider) {
      return value;
    }
  }
  return null;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/DynamicSocialSignIn/DynamicSocialSignIn.js
var import_react_dom146 = __toESM(require_react_dom(), 1);
var import_qrcode143 = __toESM(require_browser(), 1);
var DynamicSocialSignIn = ({ defaultProvider, numOfItemsToDisplay, collapsedLayout }) => {
  const { setShowAuthFlow, projectSettings } = useInternalDynamicContext();
  const { setSocialProvider, socialProvider, enabledSocialProviders } = useSocialRedirectContext();
  const { setView, goToInitialView } = useViewContext();
  const { engageCaptcha } = useCaptchaContext();
  const { isProcessing, connectSocialAccount } = useSocialAuth({
    onError: () => {
      goToInitialView();
    },
    onFarcasterUrl: (url) => setView("farcaster-connect-view", { url }),
    onSettled: () => {
      setSocialProvider(void 0);
    },
    sessionTimeout: 2e4
  });
  const onSelectProvider = (provider) => {
    var _a;
    const providerEnum = getProviderEnumForSocialSignInProvider(provider);
    setSocialProvider(provider);
    if ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _a === void 0 ? void 0 : _a.enabled) {
      engageCaptcha({
        authMethod: "social",
        onCaptchaSuccess: (captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
          setView("social-redirect-view");
          setShowAuthFlow(true);
          connectSocialAccount({
            authMode: "signin",
            captchaToken,
            provider: providerEnum
          });
        })
      });
      return;
    }
    setView("social-redirect-view");
    setShowAuthFlow(true);
    connectSocialAccount({
      authMode: "signin",
      provider: providerEnum
    });
  };
  return (0, import_jsx_runtime266.jsx)(SocialSignIn, { onSelectProvider, providers: enabledSocialProviders, selectedProvider: socialProvider, isLoading: isProcessing, testId: "dynamic-social-sign-in", defaultProvider, numOfItemsToDisplay, collapsedLayout });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/SocialSignInSection/SocialSignInSection.js
var SocialSignInSection = ({ sectionData, collapsedLayout }) => {
  var _a, _b, _c;
  const { projectSettings } = useInternalDynamicContext();
  const providers = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [];
  const componentProps = {
    collapsedLayout,
    defaultProvider: getSocialSignInProviderFromString(sectionData.defaultItem),
    numOfItemsToDisplay: sectionData.numOfItemsToDisplay
  };
  const isMagicEnabled = isProviderEnabled(providers, ProviderEnum.MagicLink);
  if (isMagicEnabled && ((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.socialSignIn) === null || _b === void 0 ? void 0 : _b.signInProvider) === SignInProviderEnum.MagicLink) {
    return (0, import_jsx_runtime267.jsx)(MagicSocialSignIn, Object.assign({}, componentProps));
  }
  if (((_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.socialSignIn) === null || _c === void 0 ? void 0 : _c.signInProvider) === SignInProviderEnum.Dynamic) {
    return (0, import_jsx_runtime267.jsx)(DynamicSocialSignIn, Object.assign({}, componentProps));
  }
  logger2.error("Failed to render SocialSignInSection - no sign in provider enabled");
  return null;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/ToggleableSection/ToggleableSection.js
var import_jsx_runtime268 = __toESM(require_jsx_runtime(), 1);
var import_react298 = __toESM(require_react(), 1);
var import_react_dom148 = __toESM(require_react_dom(), 1);
var import_qrcode145 = __toESM(require_browser(), 1);
var ToggleableSection = ({ sections }) => {
  const [showFirst, setShowFirst] = (0, import_react298.useState)(true);
  const section = showFirst ? sections[0] : sections[1];
  return (0, import_jsx_runtime268.jsxs)("div", { className: "toggleable-section", children: [section.component, (0, import_jsx_runtime268.jsxs)("div", { className: "toggleable-section__toggle-prompt", children: [(0, import_jsx_runtime268.jsx)(Typography, { color: "secondary", variant: "body_small", copykey: section.labelCopyKey, children: section.label }), (0, import_jsx_runtime268.jsx)("button", { className: "toggleable-section__toggle-prompt__button", onClick: () => setShowFirst(!showFirst), children: (0, import_jsx_runtime268.jsx)(Typography, { weight: "medium", variant: "body_small", color: "brand-primary", className: "toggleable-section__toggle-prompt__button__text", copykey: section.buttonCopyKey, children: section.button }) })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/WalletSignInSection/WalletSignInSection.js
var import_jsx_runtime271 = __toESM(require_jsx_runtime(), 1);
var import_react301 = __toESM(require_react(), 1);
var import_react_dom151 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/WalletSignInSection/WalletSimpleSignIn/WalletSimpleSignIn.js
var import_jsx_runtime270 = __toESM(require_jsx_runtime(), 1);
var import_react300 = __toESM(require_react(), 1);
var import_react_dom150 = __toESM(require_react_dom(), 1);
var import_qrcode147 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/WalletSignInSection/ListItemButton/ListItemButton.js
var import_jsx_runtime269 = __toESM(require_jsx_runtime(), 1);
var import_react299 = __toESM(require_react(), 1);
var import_react_dom149 = __toESM(require_react_dom(), 1);
var import_qrcode146 = __toESM(require_browser(), 1);
var ListItemButton = ({ text, onClick, numberOfWallets, disabled = false, copykey }) => {
  const numberOfWalletsText = (0, import_react299.useMemo)(() => {
    if (numberOfWallets <= 10) {
      return numberOfWallets;
    }
    return `${Math.floor(numberOfWallets / 10) * 10}+`;
  }, [numberOfWallets]);
  const trailing = (0, import_jsx_runtime269.jsxs)("div", { className: "list-item-button__trailing", children: [(0, import_jsx_runtime269.jsx)("div", { className: classNames("list-item-button__trailing-child", "list-item-button__trailing-label"), children: (0, import_jsx_runtime269.jsx)(Badge, { text: `${numberOfWalletsText} available` }) }), (0, import_jsx_runtime269.jsx)("div", { className: classNames("list-item-button__trailing-child", "list-item-button__trailing-icon"), children: (0, import_jsx_runtime269.jsx)(Icon, { color: "text-primary", size: "small", children: (0, import_jsx_runtime269.jsx)(SvgStroke, {}) }) })] });
  return (0, import_jsx_runtime269.jsx)(ListTile, { trailing, onClick, className: "list-item-button", disabled, copykey, children: text });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/WalletSignInSection/WalletSimpleSignIn/WalletSimpleSignIn.js
var WalletSimpleSignIn = ({ previewWalletsNumber, disabled = false, onshowAllWallets }) => {
  const { t: t2 } = useTranslation();
  const { walletConnectorOptions, projectSettings, walletsFilter, authMode, multiWallet, recommendedWallets } = useInternalDynamicContext();
  const userWallets = useUserWallets();
  const { walletBook } = useWalletBookContext();
  const { numberOfWallets, walletsList } = walletListBuilder({
    authMode,
    groupWallets: true,
    inputList: walletConnectorOptions,
    isWalletConnectList: false,
    lastUsedWalletKey: StorageService.getItem(LAST_USED_WALLET),
    loginWithEmail: true,
    multiWallet,
    numberOfWalletsToShow: previewWalletsNumber,
    recommendedWallets,
    searchFilter: void 0,
    userWallets,
    walletBook,
    walletsFilter
  });
  return !projectSettings ? (0, import_jsx_runtime270.jsx)(Skeleton, { count: previewWalletsNumber + 1, className: "login-with-email-wallet-list__skeleton" }) : (0, import_jsx_runtime270.jsxs)("div", { className: "login-with-email-wallet-list__container", "data-testid": "top-wallets-list", children: [walletsList.map((wallet, index) => (0, import_jsx_runtime270.jsx)(WalletListItem, { wallet, disabled, recommendedWallets }, `${wallet.key}_${index}`)), (0, import_jsx_runtime270.jsx)(ListItemButton, { copykey: "dyn_wallet_list.view_all", text: t2("dyn_wallet_list.view_all"), onClick: onshowAllWallets, numberOfWallets, disabled })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/sections/WalletSignInSection/WalletSignInSection.js
var import_qrcode148 = __toESM(require_browser(), 1);
var WalletSignInSection = ({ numberOfItensToShow, isLoading, onSubmit }) => {
  const { t: t2 } = useTranslation();
  return numberOfItensToShow > 0 ? (0, import_jsx_runtime271.jsx)(WalletSimpleSignIn, { previewWalletsNumber: numberOfItensToShow, onshowAllWallets: () => onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(), disabled: isLoading }) : (0, import_jsx_runtime271.jsx)(IconListTile, { onClick: () => onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(), disabled: isLoading, className: "connect-with-wallet-button", children: (0, import_jsx_runtime271.jsx)(Typography, { variant: "button_primary", copykey: "dyn_login.wallet_list.button_only", children: t2("dyn_login.wallet_list.button_only") }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/LoginViewSection/LoginViewSection.js
var import_qrcode149 = __toESM(require_browser(), 1);
var LoginViewSection = ({ viewSection, index, walletCount, gotToWalletList }) => {
  const { loading } = useLoadingContext();
  const { t: t2 } = useTranslation();
  const { setView } = useViewContext();
  const [isLoading, setIsLoading] = (0, import_react302.useState)(loading);
  switch (viewSection.type) {
    case SdkViewSectionType.Separator:
      return (0, import_jsx_runtime272.jsx)(Divider, { text: viewSection.label });
    case SdkViewSectionType.Email:
      return (0, import_jsx_runtime272.jsx)(LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading });
    case SdkViewSectionType.Phone:
      return (0, import_jsx_runtime272.jsx)(PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading });
    case SdkViewSectionType.EmailAndPhone:
      const sections = [
        {
          button: t2("dyn_login.email_or_phone.use_phone"),
          buttonCopyKey: "dyn_login.email_or_phone.use_phone",
          component: (0, import_jsx_runtime272.jsx)(LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading }),
          label: t2("dyn_login.email_or_phone.prefer_phone"),
          labelCopyKey: "dyn_login.email_or_phone.prefer_phone"
        },
        {
          button: t2("dyn_login.email_or_phone.use_email"),
          buttonCopyKey: "dyn_login.email_or_phone.use_email",
          component: (0, import_jsx_runtime272.jsx)(PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading }),
          label: t2("dyn_login.email_or_phone.prefer_email"),
          labelCopyKey: "dyn_login.email_or_phone.prefer_email"
        }
      ];
      if (viewSection.defaultItem === "phone")
        sections.reverse();
      return (0, import_jsx_runtime272.jsx)(ToggleableSection, { sections });
    case SdkViewSectionType.Wallet:
      return (0, import_jsx_runtime272.jsx)(WalletSignInSection, { numberOfItensToShow: viewSection.numOfItemsToDisplay || 0, onSubmit: () => {
        setView("login-with-email-or-wallet-full-wallet-list");
        gotToWalletList();
      }, isLoading });
    case SdkViewSectionType.Social:
      return (0, import_jsx_runtime272.jsx)(SocialSignInSection, { collapsedLayout: walletCount > 1, sectionData: viewSection });
    case SdkViewSectionType.Text:
      return viewSection.label ? (0, import_jsx_runtime272.jsx)(Typography, { variant: "body_normal", color: "secondary", align: viewSection.alignment, className: "login-view__text", "data-testid": "login-view-section__text", children: viewSection.label }) : null;
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/useLoginView/useLoginView.js
var import_react304 = __toESM(require_react(), 1);
var import_jsx_runtime274 = __toESM(require_jsx_runtime(), 1);
var import_react_dom154 = __toESM(require_react_dom(), 1);
var import_qrcode151 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/useLoginView/getLoginViewStructure/getLoginViewStructure.js
var getWalletsSection = (numOfWalletsToDisplay) => ({
  numOfItemsToDisplay: numOfWalletsToDisplay,
  type: SdkViewSectionType.Wallet
});
var getSocialsSection = (numOfSocialsToDisplay, defaultItem) => ({
  defaultItem,
  numOfItemsToDisplay: numOfSocialsToDisplay,
  type: SdkViewSectionType.Social
});
var getSimpleSection = (type) => ({ type });
var getLoginViewStructure = ({ socialAboveEmail, showWallets, web3Layout, numOfWalletsToDisplay, showEmail, showPhone, showSocial, splitEmailAndSocial, defaultSocialItem }) => {
  const joinEmailAndSocial = !splitEmailAndSocial && (showEmail || showPhone);
  const defaultSocial = splitEmailAndSocial ? defaultSocialItem : void 0;
  return [
    // Web 3 layout wallets
    {
      condition: showWallets && web3Layout,
      section: getWalletsSection(numOfWalletsToDisplay)
    },
    // Social before email
    {
      condition: showSocial && socialAboveEmail,
      hideSeparator: joinEmailAndSocial ? "below" : void 0,
      section: getSocialsSection(5, defaultSocial)
    },
    // Email and/or phone
    {
      condition: showEmail && !showPhone,
      section: getSimpleSection(SdkViewSectionType.Email)
    },
    {
      condition: !showEmail && showPhone,
      section: getSimpleSection(SdkViewSectionType.Phone)
    },
    {
      condition: showEmail && showPhone,
      section: getSimpleSection(SdkViewSectionType.EmailAndPhone)
    },
    // Social after email
    {
      condition: showSocial && !socialAboveEmail,
      hideSeparator: joinEmailAndSocial ? "above" : void 0,
      section: getSocialsSection(5, defaultSocial)
    },
    // Web 2 layout wallets
    {
      condition: showWallets && !web3Layout,
      section: getWalletsSection(numOfWalletsToDisplay)
    }
  ];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useViewSettings/useViewSettings.js
var import_react303 = __toESM(require_react(), 1);
var import_jsx_runtime273 = __toESM(require_jsx_runtime(), 1);
var import_react_dom153 = __toESM(require_react_dom(), 1);
var import_qrcode150 = __toESM(require_browser(), 1);
var useViewSettings = (viewType) => {
  var _a, _b, _c;
  const { projectSettings, overrides } = useInternalDynamicContext();
  const apiViewSettings = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.views) === null || _b === void 0 ? void 0 : _b.find((view) => view.type === viewType);
  const overrideViewSettings = (_c = overrides === null || overrides === void 0 ? void 0 : overrides.views) === null || _c === void 0 ? void 0 : _c.find((view) => view.type === viewType);
  return overrideViewSettings || apiViewSettings;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/useLoginView/useLoginView.js
var NUMBER_OF_WALLETS = 3;
var useLoginView = () => {
  const loginView = useViewSettings(SdkViewType.Login);
  const { projectSettings, authorizationViewDisplayOrder, loginWithEmail, walletConnectorOptions, walletsFilter } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const { enabledSocialProviders } = useSocialRedirectContext();
  const hasSocialProvidersEnabled = Boolean(enabledSocialProviders === null || enabledSocialProviders === void 0 ? void 0 : enabledSocialProviders.length);
  const hasEmailProviderEnabled = isEmailProviderEnabled(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers);
  const hasPhoneProviderEnabled = isPhoneNumberProviderEnabled(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers);
  const selectableWallets = (walletsFilter ? walletsFilter(walletConnectorOptions) : walletConnectorOptions).filter(({ key }) => key !== "turnkey");
  const isWalletOnly = (0, import_react304.useMemo)(() => {
    var _a;
    if (!projectSettings) {
      return false;
    }
    if (!loginWithEmail && !hasPhoneProviderEnabled && !hasSocialProvidersEnabled) {
      return true;
    }
    if (!((_a = loginView === null || loginView === void 0 ? void 0 : loginView.sections) === null || _a === void 0 ? void 0 : _a.length)) {
      return !hasEmailProviderEnabled && !hasPhoneProviderEnabled && !hasSocialProvidersEnabled;
    }
    return loginView.sections.length === 1 && loginView.sections[0].type === "wallet";
  }, [
    loginView === null || loginView === void 0 ? void 0 : loginView.sections,
    projectSettings,
    loginWithEmail,
    hasSocialProvidersEnabled,
    hasPhoneProviderEnabled,
    hasEmailProviderEnabled
  ]);
  const filterLoginViewSections = (0, import_react304.useCallback)((sections) => {
    var _a;
    const hasEnabledNetwork = (chain) => {
      var _a2;
      return (_a2 = chain.networks) === null || _a2 === void 0 ? void 0 : _a2.some((network) => network.enabled);
    };
    const hasEnabledChain = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.chains) === null || _a === void 0 ? void 0 : _a.some((chain) => chain.enabled && hasEnabledNetwork(chain));
    if (!hasEnabledChain && sections.find((section) => section.type === "wallet")) {
      logger2.error("Failed to render WalletSignInSection - no chains enabled");
    }
    if (selectableWallets === null || selectableWallets === void 0 ? void 0 : selectableWallets.length) {
      return sections;
    }
    return sections.filter((section) => section.type !== "wallet");
  }, [selectableWallets === null || selectableWallets === void 0 ? void 0 : selectableWallets.length, projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.chains]);
  const loginViewSections = (0, import_react304.useMemo)(() => {
    var _a, _b, _c, _d, _e2, _f;
    if ((_a = loginView === null || loginView === void 0 ? void 0 : loginView.sections) === null || _a === void 0 ? void 0 : _a.length) {
      return filterLoginViewSections(loginView === null || loginView === void 0 ? void 0 : loginView.sections);
    }
    const { splitEmailAndSocial = false, socialAboveEmail = false } = (_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design.modal) !== null && _b !== void 0 ? _b : {};
    const sections = [];
    const sectionRecipes = getLoginViewStructure({
      defaultSocialItem: enabledSocialProviders[0],
      numOfWalletsToDisplay: ((_d = (_c = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design) === null || _c === void 0 ? void 0 : _c.modal) === null || _d === void 0 ? void 0 : _d.showWalletsButton) ? 0 : NUMBER_OF_WALLETS,
      showEmail: hasEmailProviderEnabled,
      showPhone: hasPhoneProviderEnabled,
      showSocial: Boolean(enabledSocialProviders === null || enabledSocialProviders === void 0 ? void 0 : enabledSocialProviders.length),
      // is email only is set in the project settings when the "Email (Web2) only" is toggled on in the dashboard
      showWallets: Boolean(selectableWallets === null || selectableWallets === void 0 ? void 0 : selectableWallets.length) && !((_f = (_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design) === null || _e2 === void 0 ? void 0 : _e2.modal) === null || _f === void 0 ? void 0 : _f.emailOnly),
      socialAboveEmail,
      splitEmailAndSocial,
      web3Layout: authorizationViewDisplayOrder === "web3"
    });
    const separator = {
      label: t2("dyn_login.separators.default"),
      type: SdkViewSectionType.Separator
    };
    let skipSeparator = false;
    for (const recipe of sectionRecipes) {
      if (!recipe.condition)
        continue;
      if (sections.length > 0 && !skipSeparator && recipe.hideSeparator !== "above")
        sections.push(separator);
      sections.push(recipe.section);
      skipSeparator = recipe.hideSeparator === "below";
    }
    return sections;
  }, [
    authorizationViewDisplayOrder,
    enabledSocialProviders,
    filterLoginViewSections,
    hasEmailProviderEnabled,
    hasPhoneProviderEnabled,
    loginView === null || loginView === void 0 ? void 0 : loginView.sections,
    projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design.modal,
    selectableWallets === null || selectableWallets === void 0 ? void 0 : selectableWallets.length,
    t2
  ]);
  return {
    isWalletOnly,
    loginViewSections
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/utils/showFarcasterQrCodeView/showFarcasterQrCodeView.js
var showFarcasterQrCodeView = (loginViewSections, enabledSocialProviders) => loginViewSections.length === 1 && loginViewSections[0].type === SdkViewSectionType.Social && enabledSocialProviders.length === 1 && enabledSocialProviders.includes(SocialSignInProviderEnum.Farcaster) && !isMobile();

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/LoginView/LoginView.js
var LoginView = () => {
  var _a;
  const { error } = useErrorContext();
  const { setView } = useViewContext();
  const { isWalletOnly, loginViewSections } = useLoginView();
  const { enabledSocialProviders } = useSocialRedirectContext();
  const { showDefaultFooter } = useAuthLayoutChecks();
  const numOfWallets = ((_a = loginViewSections.find((section) => section.type === SdkViewSectionType.Wallet)) === null || _a === void 0 ? void 0 : _a.numOfItemsToDisplay) || 0;
  const renderViewSections = (0, import_react305.useMemo)(() => loginViewSections.map((viewSection, index) => (0, import_jsx_runtime275.jsx)("div", { className: classNames("login-view__scroll__section", `login-view__scroll__section--${viewSection.type}`), children: (0, import_jsx_runtime275.jsx)(LoginViewSection, { gotToWalletList: () => setView("login-with-email-or-wallet-full-wallet-list"), index, viewSection, walletCount: numOfWallets }) }, `${viewSection.type}__${index}`)), [loginViewSections, numOfWallets]);
  const errorElement = error && (0, import_jsx_runtime275.jsx)(ErrorContainer, { className: "login-view__error-container", withIcon: false, children: error });
  if (showFarcasterQrCodeView(loginViewSections, enabledSocialProviders)) {
    return (0, import_jsx_runtime275.jsxs)(import_jsx_runtime275.Fragment, { children: [errorElement, (0, import_jsx_runtime275.jsx)(FarcasterQrCodeView, {})] });
  }
  if (isWalletOnly) {
    return (0, import_jsx_runtime275.jsx)(WalletList, {});
  }
  const shouldShowFooter = isMobile() && showDefaultFooter;
  return (0, import_jsx_runtime275.jsxs)(import_jsx_runtime275.Fragment, { children: [errorElement, (0, import_jsx_runtime275.jsx)("div", { className: classNames("login-view__container", {
    "login-view__container--error": Boolean(error)
  }), children: (0, import_jsx_runtime275.jsx)("div", { className: "login-view__scroll", "data-testid": "login-view-scroll", children: renderViewSections }) }), shouldShowFooter && (0, import_jsx_runtime275.jsx)(DefaultFooter, { hideBorder: true })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsWithSameEmailView/MergeUserAccountsWithSameEmailView.js
var import_jsx_runtime276 = __toESM(require_jsx_runtime(), 1);
var import_react306 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/double-arrow-right.js
var React71 = __toESM(require_react(), 1);
var _path58;
var _excluded57 = ["title", "titleId"];
function _extends64() {
  _extends64 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends64.apply(this, arguments);
}
function _objectWithoutProperties57(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose60(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose60(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgDoubleArrowRight = function SvgDoubleArrowRight2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties57(_ref2, _excluded57);
  return React71.createElement("svg", _extends64({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React71.createElement("title", {
    id: titleId
  }, title2) : null, _path58 || (_path58 = React71.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.862 2.862c.26-.26.682-.26.943 0L8.47 7.529a.667.667 0 0 1 0 .942l-4.666 4.667a.667.667 0 0 1-.943-.943L7.057 8 2.862 3.805a.667.667 0 0 1 0-.943Zm5.333 0c.26-.26.683-.26.943 0l4.667 4.667c.26.26.26.682 0 .942l-4.667 4.667a.667.667 0 0 1-.943-.943L12.39 8 8.195 3.805a.667.667 0 0 1 0-.943Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsWithSameEmailView/MergeUserAccountsWithSameEmailView.js
var import_react_dom155 = __toESM(require_react_dom(), 1);
var import_qrcode152 = __toESM(require_browser(), 1);
var MergeUserAccountsWithSameEmailView = ({ returnToView }) => {
  const { environmentId, setShowAuthFlow, setCallback, primaryWallet, user } = useInternalDynamicContext();
  const handleAuthenticatedUser = useHandleAuthenticatedUser();
  const { t: t2 } = useTranslation();
  const { setError } = useErrorContext();
  const { setView, goToInitialView } = useViewContext();
  const { displayedDestination: email } = useVerification();
  const handleMergeUserAccounts = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
      const userProfile = yield mergeUserAccounts(environmentId);
      if (!userProfile) {
        throw new DynamicError("Something went wrong, please try again.");
      }
      yield handleAuthenticatedUser(userProfile);
      setShowAuthFlow(false);
      setCallback("authSuccess");
    } catch (e2) {
      setError(t2("dyn_merge_user_accounts_with_same_email.errors.merge_error"));
      if (user) {
        setShowAuthFlow(false, { emitCancelAuth: true });
        return;
      }
      goToInitialView();
    }
  });
  const handleUseDifferentEmail = () => {
    setError(void 0);
    if (returnToView) {
      setView(returnToView);
      return;
    }
    if (user) {
      setShowAuthFlow(false);
      return;
    }
    setView("collect-user-data");
  };
  return (0, import_jsx_runtime276.jsxs)("div", { className: "merge-user-accounts-with-same-email__container", children: [(0, import_jsx_runtime276.jsxs)("div", { className: "merge-user-accounts-with-same-email__accounts", children: [(0, import_jsx_runtime276.jsxs)("div", { className: "merge-user-accounts-with-same-email__accounts__item", children: [(0, import_jsx_runtime276.jsx)(WalletIcon, { walletKey: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.key, className: "merge-user-accounts-with-same-email__accounts__item__icon" }), (0, import_jsx_runtime276.jsx)(Typography, { variant: "body_normal", weight: "medium", color: "secondary", className: "merge-user-accounts-with-same-email__accounts__item__text", children: shortenWalletAddress(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address, 3, 3) })] }), (0, import_jsx_runtime276.jsx)("div", { className: "merge-user-accounts-with-same-email__accounts__divider", children: (0, import_jsx_runtime276.jsx)(Icon, { color: "text-secondary", size: "small", children: (0, import_jsx_runtime276.jsx)(SvgDoubleArrowRight, {}) }) }), (0, import_jsx_runtime276.jsxs)("div", { className: "merge-user-accounts-with-same-email__accounts__item", children: [(0, import_jsx_runtime276.jsx)(UserProfileIcon, { className: "merge-user-accounts-with-same-email__accounts__item__icon" }), (0, import_jsx_runtime276.jsx)(Typography, { variant: "body_normal", weight: "medium", color: "secondary", className: "merge-user-accounts-with-same-email__accounts__item__text", children: shortenEmail(email, {
    breakpoint: 4,
    cutEnd: 1,
    cutStart: 2
  }) })] })] }), (0, import_jsx_runtime276.jsx)(Typography, { weight: "regular", variant: "title", className: "merge-user-accounts-with-same-email__text merge-user-accounts-with-same-email__text__header", copykey: "dyn_merge_user_accounts_with_same_email.title", children: t2("dyn_merge_user_accounts_with_same_email.title") }), (0, import_jsx_runtime276.jsxs)(Typography, { weight: "medium", variant: "body_normal", className: "merge-user-accounts-with-same-email__text merge-user-accounts-with-same-email__text__body", copykey: "dyn_merge_user_accounts_with_same_email.existing_account", children: [t2("dyn_merge_user_accounts_with_same_email.existing_account"), " ", (0, import_jsx_runtime276.jsx)("span", { className: "merge-user-accounts-with-same-email__text--bold", children: shortenEmail(email, {
    breakpoint: 14
  }) }), " ", t2("dyn_merge_user_accounts_with_same_email.existing_account_trail")] }), (0, import_jsx_runtime276.jsxs)("div", { className: "merge-user-accounts-with-same-email__buttons", children: [(0, import_jsx_runtime276.jsx)(TypographyButton, { className: "merge-user-accounts-with-same-email__buttons__button", onClick: handleMergeUserAccounts, buttonVariant: "primary", buttonPadding: "large", copykey: "dyn_merge_user_accounts_with_same_email.confirm_button", children: t2("dyn_merge_user_accounts_with_same_email.confirm_button") }), (0, import_jsx_runtime276.jsx)(TypographyButton, { className: "merge-user-accounts-with-same-email__buttons__button", onClick: handleUseDifferentEmail, buttonVariant: "secondary", buttonPadding: "large", copykey: "dyn_merge_user_accounts_with_same_email.cancel_button", children: t2("dyn_merge_user_accounts_with_same_email.cancel_button") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MergeUserAccountsView/MergeUserAccountsView.js
var import_jsx_runtime277 = __toESM(require_jsx_runtime(), 1);
var import_react307 = __toESM(require_react(), 1);
var import_react_dom156 = __toESM(require_react_dom(), 1);
var import_qrcode153 = __toESM(require_browser(), 1);
var MergeUserAccountsView = (props) => {
  const { setView } = useViewContext();
  const { mergeUserAccounts: mergeUserAccounts2 } = useMergeUserAccounts();
  const { t: t2 } = useTranslation();
  const [error, setError] = (0, import_react307.useState)("");
  const { mergeConflicts } = props;
  const goToConflictsResolutionView = () => {
    const onConflictsResolutionBackClick = () => {
      setView("merge-user-accounts", props);
    };
    setView("merge-user-accounts-conflicts", { mergeConflicts: (mergeConflicts === null || mergeConflicts === void 0 ? void 0 : mergeConflicts.conflicts) || [] }, {
      onBackClick: onConflictsResolutionBackClick
    });
  };
  const handleMergeConfirm = () => __awaiter(void 0, void 0, void 0, function* () {
    if (mergeConflicts === null || mergeConflicts === void 0 ? void 0 : mergeConflicts.conflicts.length) {
      goToConflictsResolutionView();
      return;
    }
    try {
      yield mergeUserAccounts2([]);
    } catch (error2) {
      logger2.error("Error merging user accounts", error2);
      setError(t2("dyn_merge_user_accounts.errors.merge_error"));
    }
  });
  return (0, import_jsx_runtime277.jsxs)("div", { className: "merge-user-accounts", children: [error && (0, import_jsx_runtime277.jsx)(Alert, { icon: "error", variant: "error", className: "merge-user-accounts__error", children: error }), (0, import_jsx_runtime277.jsxs)("div", { className: "merge-user-accounts__container", children: [(0, import_jsx_runtime277.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "merge-user-accounts__title", copykey: "dyn_merge_user_accounts.wallet.content", children: t2("dyn_merge_user_accounts.wallet.content") }), (0, import_jsx_runtime277.jsx)(TypographyButton, { onClick: handleMergeConfirm, buttonClassName: "merge-user-accounts__button", buttonVariant: "brand-primary", buttonPadding: "large", typographyProps: {
    color: "inherit"
  }, expanded: true, copykey: "dyn_merge_user_accounts.confirm_button", children: t2("dyn_merge_user_accounts.confirm_button") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaChooseDeviceView/MfaChooseDeviceView.js
var import_jsx_runtime280 = __toESM(require_jsx_runtime(), 1);
var import_react311 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/assets/secure-account.js
var React72 = __toESM(require_react(), 1);
var _path59;
var _path213;
var _path312;
var _path410;
var _g8;
var _path510;
var _defs5;
var _excluded58 = ["title", "titleId"];
function _extends65() {
  _extends65 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends65.apply(this, arguments);
}
function _objectWithoutProperties58(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose61(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose61(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSecureAccount = function SvgSecureAccount2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties58(_ref2, _excluded58);
  return React72.createElement("svg", _extends65({
    width: 327,
    height: 112,
    viewBox: "0 0 327 112",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React72.createElement("title", {
    id: titleId
  }, title2) : null, React72.createElement("mask", {
    id: "secure-account_svg__a",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 0,
    y: 0,
    width: 327,
    height: 112
  }, _path59 || (_path59 = React72.createElement("path", {
    d: "M315 0H12C5.373 0 0 5.373 0 12v88c0 6.627 5.373 12 12 12h303c6.627 0 12-5.373 12-12V12c0-6.627-5.373-12-12-12Z",
    fill: "#fff"
  }))), React72.createElement("g", {
    mask: "url(#secure-account_svg__a)"
  }, _path213 || (_path213 = React72.createElement("path", {
    d: "M164 228c62.96 0 114-51.04 114-114S226.96 0 164 0 50 51.04 50 114s51.04 114 114 114Z",
    fill: "url(#secure-account_svg__b)",
    fillOpacity: 0.12
  })), React72.createElement("mask", {
    id: "secure-account_svg__c",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 86,
    y: 29,
    width: 40,
    height: 40
  }, _path312 || (_path312 = React72.createElement("path", {
    d: "M116.91 29 86 37.282l8.282 30.91 30.91-8.282L116.91 29Z",
    fill: "#fff"
  }))), React72.createElement("g", {
    mask: "url(#secure-account_svg__c)"
  }, React72.createElement("mask", {
    id: "secure-account_svg__d",
    style: {
      maskType: "luminance"
    },
    maskUnits: "userSpaceOnUse",
    x: 90,
    y: 33,
    width: 31,
    height: 31
  }, _path410 || (_path410 = React72.createElement("path", {
    d: "M119.763 44.8c-2.097-7.825-10.139-12.468-17.963-10.371-7.824 2.096-12.468 10.138-10.371 17.962 2.096 7.825 10.139 12.468 17.963 10.371 7.824-2.096 12.467-10.138 10.371-17.962Z",
    fill: "#fff"
  }))), _g8 || (_g8 = React72.createElement("g", {
    mask: "url(#secure-account_svg__d)"
  }, React72.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M118.709 55.166a14.617 14.617 0 0 0 1.054-10.366c-2.097-7.824-10.139-12.467-17.963-10.37-7.825 2.096-12.468 10.138-10.371 17.962a14.612 14.612 0 0 0 6.097 8.451c1.808-3.916 6.565-6.42 9.647-7.247 3.083-.826 7.955-1.146 11.536 1.57Zm-19.375-8.688a5.5 5.5 0 1 1 10.625-2.847 5.5 5.5 0 0 1-10.625 2.847Z",
    fill: "#4779FF"
  })))), _path510 || (_path510 = React72.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "m207.67 19.875-.767 2.862a9.86 9.86 0 0 0-5.861 6.61c-1.412 5.268 1.715 10.684 6.984 12.096 5.268 1.412 10.684-1.715 12.096-6.984a9.862 9.862 0 0 0-1.771-8.655l.767-2.861a5.926 5.926 0 0 0-11.448-3.068Zm9.321 2.498-.444 1.655a9.844 9.844 0 0 0-3.409-1.665 9.847 9.847 0 0 0-3.785-.262l.444-1.656a3.723 3.723 0 1 1 7.194 1.928Zm-3.445 8.52a2.57 2.57 0 0 1-2.019 1.862l-.539 2.011a1.1 1.1 0 1 1-2.127-.57l.539-2.01a2.569 2.569 0 1 1 4.146-1.294ZM164.943 32.064a6.216 6.216 0 0 0-1.779 0c-.681.098-1.313.337-1.816.527l-.135.05-16.68 6.256-.407.152c-1.922.718-3.61 1.348-4.909 2.493a9.336 9.336 0 0 0-2.553 3.683c-.616 1.62-.613 3.421-.61 5.473V66.01c0 8.793 4.783 16.125 9.953 21.51 5.204 5.422 11.159 9.252 14.307 11.089l.128.075c.574.337 1.32.775 2.307.987a6.619 6.619 0 0 0 2.609 0c.987-.212 1.733-.65 2.307-.987l.128-.075c3.148-1.837 9.103-5.667 14.307-11.088 5.17-5.386 9.953-12.718 9.953-21.511V50.698c.003-2.052.006-3.854-.611-5.473a9.333 9.333 0 0 0-2.552-3.683c-1.3-1.145-2.987-1.775-4.909-2.493l-.407-.152-16.68-6.255-.135-.05c-.503-.19-1.136-.43-1.816-.528Zm7.008 18.695c0-1.726-1.4-3.126-3.127-3.126h-14.069a6.253 6.253 0 0 0-6.153 5.133 6.234 6.234 0 0 1 4.589-2.007h18.76Zm1.562 3.127c3.454 0 6.253 2.8 6.253 6.253v12.506a6.253 6.253 0 0 1-6.253 6.254h-18.759a6.253 6.253 0 0 1-6.253-6.254V60.14a6.253 6.253 0 0 1 6.253-6.253h18.759Z",
    fill: "#4779FF"
  }))), _defs5 || (_defs5 = React72.createElement("defs", null, React72.createElement("linearGradient", {
    id: "secure-account_svg__b",
    x1: 164,
    y1: 0,
    x2: 164,
    y2: 93.5,
    gradientUnits: "userSpaceOnUse"
  }, React72.createElement("stop", {
    stopColor: "#4779FF"
  }), React72.createElement("stop", {
    offset: 1,
    stopColor: "#4779FF",
    stopOpacity: 0
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useDynamicContext/useDynamicContext.js
var import_react310 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useDynamicContext/useOverrides/useOverrides.js
var import_react309 = __toESM(require_react(), 1);
var import_jsx_runtime279 = __toESM(require_jsx_runtime(), 1);
var import_react_dom158 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useIsLoggedIn/useIsLoggedIn.js
var import_react308 = __toESM(require_react(), 1);
var import_jsx_runtime278 = __toESM(require_jsx_runtime(), 1);
var import_react_dom157 = __toESM(require_react_dom(), 1);
var import_qrcode154 = __toESM(require_browser(), 1);
var useIsLoggedIn = () => {
  var _a, _b, _c;
  const { user, primaryWallet, authMode, projectSettings } = useInternalDynamicContext();
  const { getEOAWallet } = useSmartWallets();
  const eoaWallet = primaryWallet && getEOAWallet(primaryWallet);
  const isSessionKeyCompatible = primaryWallet && isSessionKeyCompatibleWallet(primaryWallet) || eoaWallet && isSessionKeyCompatibleWallet(eoaWallet);
  const isTurnkeyProviderEnabled = isTurnkeyEnabled(projectSettings);
  const isLoggedIn = Boolean(user) || authMode === "connect-only" && Boolean(primaryWallet);
  const userWalletsCredentials = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.filter(({ walletProvider }) => walletProvider);
  const hasEmbeddedWalletVerifiedCredential = Boolean(userWalletsCredentials === null || userWalletsCredentials === void 0 ? void 0 : userWalletsCredentials.find(({ walletProvider }) => walletProvider === "embeddedWallet"));
  const isTurnkeyPregen = isTurnkeyProviderEnabled && ((_c = (_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _b === void 0 ? void 0 : _b.embeddedWallets) === null || _c === void 0 ? void 0 : _c.automaticEmbeddedWalletCreation) && (!(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets.forceAuthenticatorAtSignup) || isSessionKeyCompatible);
  const shouldHaveTurnkeyWallet = isTurnkeyPregen && // if user doesn't have a branded wallet only
  (!(userWalletsCredentials === null || userWalletsCredentials === void 0 ? void 0 : userWalletsCredentials.length) || hasEmbeddedWalletVerifiedCredential);
  logger2.logVerboseTroubleshootingMessage("useIsLoggedIn", {
    authMode,
    eoaWallet,
    isSessionKeyCompatible,
    isTurnkeyProviderEnabled,
    primaryWallet,
    projectSettings,
    user
  });
  if (shouldHaveTurnkeyWallet) {
    return Boolean(primaryWallet && isLoggedIn);
  }
  return isLoggedIn;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useDynamicContext/useOverrides/useOverrides.js
var import_qrcode155 = __toESM(require_browser(), 1);
var useOverrides = (dynamicContext) => {
  const context = (0, import_react309.useRef)(dynamicContext);
  const isLoggedIn = useIsLoggedIn();
  context.current = dynamicContext;
  return (0, import_react309.useMemo)(() => ({
    setAuthMode: (value) => {
      const { setAuthMode } = context.current;
      if (isLoggedIn) {
        logger2.error("Calling DynamicContext's setAuthMode method when the user already has a wallet is a noop");
        return;
      }
      return setAuthMode(value);
    }
  }), [isLoggedIn]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useDynamicContext/useDynamicContext.js
var useDynamicContext = () => {
  const context = (0, import_react310.useContext)(DynamicContext);
  if (context === void 0) {
    throw new Error("useDynamicContext must be used within a DynamicContextProvider");
  }
  const { accountSwitchState, authMode, authToken, awaitingSignatureState, getNameService, handleLogOut, handleUnlinkWallet, loadingNetwork, locale, loginWithEmail, multiWalletWidgetState, network, networkConfigurations, qrcodeUri, sdkHasLoaded, setLogInWithEmail, setMultiWalletWidgetState, setShowAuthFlow, setShowDynamicUserProfile, setShowQrcodeModal, shadowDOMEnabled, showAuthFlow, showQrcodeModal, user, userWithMissingInfo, bridgeChains, bridgeChainsToConnect, primaryWallet, setShowBridgeWidget, sendWagmiSettings, showDynamicUserProfile, minAuthToken, selectedTabIndex, setSelectedTabIndex } = context;
  const { setAuthMode } = useOverrides(context);
  return {
    accountSwitchState,
    authMode,
    authToken,
    awaitingSignatureState,
    bridgeChains,
    bridgeChainsToConnect,
    getNameService,
    handleLogOut,
    handleUnlinkWallet,
    loadingNetwork,
    locale,
    loginWithEmail,
    minAuthToken,
    multiWalletWidgetState,
    network,
    networkConfigurations,
    primaryWallet,
    qrcodeUri,
    sdkHasLoaded,
    selectedTabIndex,
    sendWagmiSettings,
    setAuthMode,
    setLogInWithEmail,
    setMultiWalletWidgetState,
    setSelectedTabIndex,
    setShowAuthFlow: (value) => setShowAuthFlow(value, {
      clearErrors: true,
      emitCancelAuth: true,
      ignoreIfIsEmbeddedWidget: true,
      initializeWalletConnect: true,
      performMultiWalletChecks: true
    }),
    setShowBridgeWidget,
    setShowDynamicUserProfile,
    setShowQrcodeModal,
    shadowDOMEnabled,
    showAuthFlow,
    showDynamicUserProfile,
    showQrcodeModal,
    user,
    userWithMissingInfo
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaChooseDeviceView/MfaChooseDeviceView.js
var import_react_dom159 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaChooseDeviceView/getMfaOptions/getMfaOptions.js
var getMfaOptions = (isInitialSetup) => {
  const mfaOptions = [
    {
      Icon: void 0,
      descriptionKey: "dyn_mfa.choose_device_view.authenticator_app_description",
      labelKey: "dyn_mfa.choose_device_view.authenticator_app",
      type: MFADeviceType.Totp
    }
  ];
  if (!isInitialSetup) {
    const backupCodeOption = {
      Icon: void 0,
      descriptionKey: "dyn_mfa.choose_device_view.backup_code_description",
      labelKey: "dyn_mfa.choose_device_view.backup_code",
      type: "backupCode"
    };
    mfaOptions.push(backupCodeOption);
  }
  return mfaOptions;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaChooseDeviceView/MfaChooseDeviceView.js
var import_qrcode156 = __toESM(require_browser(), 1);
var MfaChooseDeviceView = ({ isInitialSetup = true }) => {
  const { handleLogOut } = useDynamicContext();
  const { t: t2 } = useTranslation();
  const { setView } = useViewContext();
  const mfaOptions = getMfaOptions(isInitialSetup);
  const handleClick = (option) => {
    if (option.type === "backupCode") {
      setView("mfa-recovery", void 0, {
        onBackClick: () => {
          setView("mfa-choose-device", { isInitialSetup: false });
        }
      });
      return;
    }
    if (isInitialSetup) {
      setView("mfa-secure-device", { type: option.type });
      return;
    }
    setView("mfa-verification", {
      isInitialSetup,
      showBackButton: true,
      type: option.type
    });
  };
  return (0, import_jsx_runtime280.jsxs)(import_jsx_runtime280.Fragment, { children: [(0, import_jsx_runtime280.jsx)(ModalHeader, { alignContent: "bottom", children: (0, import_jsx_runtime280.jsx)("div", { className: "otp-verification-view__status-header", children: (0, import_jsx_runtime280.jsx)(Typography, { weight: "medium", variant: "title", color: "primary", className: "otp-verification-view__title", children: isInitialSetup ? t2("dyn_mfa.choose_device_view.title") : t2("dyn_mfa.choose_device_view.choose_another_method") }) }) }), (0, import_jsx_runtime280.jsxs)("div", { className: "mfa-choose-device-view__body", "data-testid": "mfa-choose-device-view", children: [(0, import_jsx_runtime280.jsx)(SvgSecureAccount, {}), (0, import_jsx_runtime280.jsx)(Typography, { className: "mfa-choose-device-view__copy", variant: "body_normal", weight: "regular", color: "secondary", children: isInitialSetup ? t2("dyn_mfa.choose_device_view.select_options") : t2("dyn_mfa.choose_device_view.choose_another_method_description") }), mfaOptions.map((option) => (0, import_jsx_runtime280.jsxs)(Button, { buttonClassName: "mfa-choose-device-view__button", expanded: true, onClick: () => handleClick(option), children: [(0, import_jsx_runtime280.jsxs)("div", { className: "mfa-choose-device-view__button__header", children: [(0, import_jsx_runtime280.jsx)(Typography, { copykey: option.labelKey, children: t2(option.labelKey) }), (0, import_jsx_runtime280.jsx)(SvgChevronLeft, { className: "mfa-choose-device-view__icon--rotate" })] }), (0, import_jsx_runtime280.jsx)(Typography, { className: "mfa-choose-device-view__button__description", color: "secondary", copykey: option.descriptionKey, children: t2(option.descriptionKey) })] }, option.type)), (0, import_jsx_runtime280.jsx)(TextButton, { className: "mfa-choose-device-view__logout", onClick: handleLogOut, copykey: "dyn_mfa.choose_device_view.logout", children: t2("dyn_mfa.choose_device_view.logout") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaSecureDeviceView/MfaSecureDeviceView.js
var import_jsx_runtime283 = __toESM(require_jsx_runtime(), 1);
var import_react314 = __toESM(require_react(), 1);
var import_react_dom161 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMfa/useMfa.js
var import_react313 = __toESM(require_react(), 1);
var import_jsx_runtime282 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/mfa/mfa.js
var import_jsx_runtime281 = __toESM(require_jsx_runtime(), 1);
var import_react312 = __toESM(require_react(), 1);
var getUserMfaDevices = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId }) {
  try {
    const { devices } = yield sdkApi().getUserMfaDevices({
      environmentId
    });
    return devices;
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    return [];
  }
});
var addMfaDevice = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId, type }) {
  try {
    if (type === MFADeviceType.Totp) {
      const response = yield sdkApi().registerTotpMfaDevice({
        environmentId
      });
      return response;
    }
    throw new Error("Unsupported MFA device type");
  } catch (e2) {
    const message = e2 instanceof Error ? e2.message : (yield e2.json()).error;
    logger2.error(message);
    throw new Error(message);
  }
});
var updateUserMfaDevice = (_c) => __awaiter(void 0, [_c], void 0, function* ({ environmentId, mfaDeviceId }) {
  try {
    yield sdkApi().updateUserMfaDevice({
      environmentId,
      mfaDeviceId
    });
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
  }
});
var deleteMfaDevice = (_d) => __awaiter(void 0, [_d], void 0, function* ({ environmentId, mfaDeviceId, mfaAuthToken }) {
  try {
    yield sdkApi().deleteMfaDevice({
      environmentId,
      mfaDeviceId,
      xMfaAuthToken: mfaAuthToken
    });
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
  }
});
var verifyMfaDevice = (_e2) => __awaiter(void 0, [_e2], void 0, function* ({ environmentId, type, code }) {
  try {
    if (type === MFADeviceType.Totp) {
      const request = {
        code,
        type
      };
      const device = yield sdkApi().registerTotpMfaDeviceVerify({
        environmentId,
        mFARegisterTotpDevicePostRequest: request
      });
      return device;
    }
    throw new Error("Unsupported MFA device type");
  } catch (e2) {
    const message = e2 instanceof Error ? e2.message : (yield e2.json()).error;
    logger2.error(message);
    return void 0;
  }
});
var authMfaDevice = (_f) => __awaiter(void 0, [_f], void 0, function* ({ deviceId, environmentId, type, code, createMfaToken }) {
  try {
    if (type === MFADeviceType.Totp) {
      const request = {
        code,
        createMfaToken,
        id: deviceId || void 0
      };
      const response = yield sdkApi().authMfaTotpDevice({
        environmentId,
        mFAAuthTotpDevicePostRequest: request
      });
      return response;
    }
    throw new Error("Unsupported MFA device type");
  } catch (error) {
    logger2.error(error);
    if (error instanceof Response) {
      const responseError = yield error.json();
      if (responseError.code === "mfa_invalid_code") {
        throw new MfaInvalidOtpError();
      }
      if (responseError.code === "mfa_rate_limited") {
        throw new MfaRateLimitedError();
      }
    }
    throw error;
  }
});
var getRecoveryCodes = (_g16) => __awaiter(void 0, [_g16], void 0, function* ({ environmentId }) {
  try {
    const { recoveryCodes } = yield sdkApi().getRecoveryCodes({
      environmentId
    });
    return recoveryCodes;
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    return [];
  }
});
var createNewRecoveryCodes = (_h) => __awaiter(void 0, [_h], void 0, function* ({ environmentId }) {
  try {
    const { recoveryCodes } = yield sdkApi().createNewRecoveryCodes({
      environmentId
    });
    return recoveryCodes;
  } catch (e2) {
    const data = yield e2.json();
    logger2.error(data.error);
    return [];
  }
});
var authMfaRecovery = (_j) => __awaiter(void 0, [_j], void 0, function* ({ environmentId, code }) {
  try {
    const request = {
      code
    };
    const response = yield sdkApi().authMfaRecovery({
      environmentId,
      mFAAuthRecoveryDevicePostRequest: request
    });
    return response;
  } catch (error) {
    logger2.error(error);
    if (error instanceof Response) {
      const responseError = yield error.json();
      if (responseError.code === "mfa_invalid_code") {
        throw new MfaInvalidOtpError();
      }
    }
    throw error;
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMfa/useMfa.js
var import_react_dom160 = __toESM(require_react_dom(), 1);
var import_qrcode157 = __toESM(require_browser(), 1);
var useMfa = () => {
  const { completeAuth } = useUserAuth({});
  const { user, userWithMissingInfo, environmentId } = useInternalDynamicContext();
  const verifiedUser = user || userWithMissingInfo;
  const getUserDevices = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!verifiedUser) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    const devices = yield getUserMfaDevices({ environmentId });
    return devices;
  });
  const updateUserDevice = (deviceId) => __awaiter(void 0, void 0, void 0, function* () {
    if (!verifiedUser) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    yield updateUserMfaDevice({
      environmentId,
      mfaDeviceId: deviceId
    });
  });
  const deleteUserDevice = (deviceId, mfaAuthToken) => __awaiter(void 0, void 0, void 0, function* () {
    if (!verifiedUser) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    yield deleteMfaDevice({
      environmentId,
      mfaAuthToken,
      mfaDeviceId: deviceId
    });
  });
  const addDevice = (...args_1) => __awaiter(void 0, [...args_1], void 0, function* (type = MFADeviceType.Totp) {
    if (!verifiedUser) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    const { id, secret, uri } = yield addMfaDevice({
      environmentId,
      type
    });
    return { id, secret, uri };
  });
  const authDevice = (code_1, ...args_2) => __awaiter(void 0, [code_1, ...args_2], void 0, function* (code, type = MFADeviceType.Totp, deviceId) {
    try {
      if (!verifiedUser) {
        throw new Error(USER_NOT_LOGGED_IN);
      }
      let isValid = false;
      yield completeAuth({
        onValidUpdatedJwt: () => __awaiter(void 0, void 0, void 0, function* () {
          isValid = true;
        }),
        updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () {
          const response = yield authMfaDevice({
            code,
            createMfaToken: {
              singleUse: true
            },
            deviceId,
            environmentId,
            type
          });
          dynamicEvents.emit("mfaCompletionSuccess", {
            mfaToken: response.mfaToken
          });
          return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: false,
            missingFields: [],
            // in the mfa flow, we only care about the user in the response
            updateUserProfileResponse: response
          };
        })
      });
      return isValid;
    } catch (error) {
      dynamicEvents.emit("mfaCompletionFailure", { error });
      throw error;
    }
  });
  const authRecoveryCode = (code) => __awaiter(void 0, void 0, void 0, function* () {
    if (!verifiedUser) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    let isValid = false;
    yield completeAuth({
      onValidUpdatedJwt: () => __awaiter(void 0, void 0, void 0, function* () {
        isValid = true;
      }),
      updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () {
        const response = yield authMfaRecovery({
          code,
          environmentId
        });
        if (!response) {
          throw new Error("Failed to authenticate recovey code");
        }
        return {
          isEmailVerificationRequired: false,
          isSmsVerificationRequired: false,
          missingFields: [],
          // in the mfa flow, we only care about the user in the response
          updateUserProfileResponse: response
        };
      })
    });
    return isValid;
  });
  const verifyDevice = (code_2, ...args_3) => __awaiter(void 0, [code_2, ...args_3], void 0, function* (code, type = MFADeviceType.Totp) {
    if (!verifiedUser) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    const device = yield verifyMfaDevice({
      code,
      environmentId,
      type
    });
    if (!device) {
      throw new Error("Failed to verify device");
    }
    return device;
  });
  const getRecoveryCodes$1 = (...args_4) => __awaiter(void 0, [...args_4], void 0, function* (generateNewCodes = false) {
    if (!verifiedUser) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    const getRecoveryCodesFunc = generateNewCodes ? createNewRecoveryCodes : getRecoveryCodes;
    const recoveryCodes = yield getRecoveryCodesFunc({
      environmentId
    });
    if (!recoveryCodes) {
      throw new Error("Recovery codes not found");
    }
    return recoveryCodes;
  });
  const { updateUser } = useUserUpdateRequestInternal({
    validationSchemaStripUnknown: false
  });
  const completeAcknowledgement = () => __awaiter(void 0, void 0, void 0, function* () {
    yield updateUser({
      mfaBackupCodeAcknowledgement: MfaBackupCodeAcknowledgement.Complete
    });
  });
  return {
    addDevice,
    authDevice,
    authRecoveryCode,
    completeAcknowledgement,
    deleteUserDevice,
    getRecoveryCodes: getRecoveryCodes$1,
    getUserDevices,
    updateUserDevice,
    verifyDevice
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaSecureDeviceView/MfaSecureDeviceView.js
var MfaSecureDeviceView = ({ type, isInitialSetup = false }) => {
  const { t: t2 } = useTranslation();
  const { handleLogOut } = useDynamicContext();
  const { setView } = useViewContext();
  const { addDevice } = useMfa();
  const { data, isLoading } = usePromise(() => addDevice(type));
  const onContinue = () => {
    const onMfaVerificationBackClick = () => {
      setView("mfa-secure-device", { type });
    };
    setView("mfa-verification", { deviceId: data === null || data === void 0 ? void 0 : data.id, isInitialSetup, showBackButton: true, type }, {
      onBackClick: onMfaVerificationBackClick
    });
  };
  const onHelpClick = ({ secret, uri }) => {
    const onMfaSecureDeviceHelpBackClick = () => {
      setView("mfa-secure-device", { isInitialSetup, type });
    };
    setView("mfa-secure-device-help", {
      secret,
      uri
    }, { onBackClick: onMfaSecureDeviceHelpBackClick });
  };
  return (0, import_jsx_runtime283.jsxs)("div", { className: "mfa-secure-device-view__body", "data-testid": "mfa-secure-device-view", children: [(0, import_jsx_runtime283.jsx)(Typography, { className: "mfa-secure-device-view__copy", variant: "body_normal", weight: "regular", color: "secondary", children: t2("dyn_mfa.secure_device_view.body") }), isLoading && (0, import_jsx_runtime283.jsx)(Spinner, { className: "mfa-secure-device-view__loading-spinner" }), data && (0, import_jsx_runtime283.jsxs)("div", { className: "mfa-secure-device-view__qrcode", children: [(0, import_jsx_runtime283.jsx)(QRCode, { Icon: (0, import_jsx_runtime283.jsx)(SvgPasswordHero, {}), value: data.uri, logoSize: 50 }), (0, import_jsx_runtime283.jsx)("div", { className: "button-container", children: (0, import_jsx_runtime283.jsx)("button", { onClick: () => onHelpClick({ secret: data.secret, uri: data.uri }), children: (0, import_jsx_runtime283.jsx)(Typography, { variant: "body_small", weight: "medium", color: "secondary", children: t2("dyn_mfa.secure_device_view.helper.button") }) }) })] }), (0, import_jsx_runtime283.jsx)(TypographyButton, { className: "mfa-secure-device-view__button", expanded: true, onClick: onContinue, children: t2("dyn_mfa.secure_device_view.continue") }), (0, import_jsx_runtime283.jsx)(TextButton, { className: "mfa-secure-device-view__logout-button", onClick: handleLogOut, copykey: "dyn_mfa.choose_device_view.logout", children: t2("dyn_mfa.secure_device_view.logout") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NetworkNotSupported/NetworkNotSupported.js
var import_jsx_runtime287 = __toESM(require_jsx_runtime(), 1);
var import_react319 = __toESM(require_react(), 1);
var import_react_dom164 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserAddress/UserAddress.js
var import_jsx_runtime284 = __toESM(require_jsx_runtime(), 1);
var import_react315 = __toESM(require_react(), 1);
var import_react_dom162 = __toESM(require_react_dom(), 1);
var import_qrcode158 = __toESM(require_browser(), 1);
var UserAddress = ({ userProfile, walletConnector }) => {
  var _a;
  const walletAddress = (_a = userProfile === null || userProfile === void 0 ? void 0 : userProfile.verifiedCredentials.find((verifiedCredential) => verifiedCredential.id === userProfile.lastVerifiedCredentialId)) === null || _a === void 0 ? void 0 : _a.address;
  const nameService = useFetchNameService(walletAddress);
  const { data: walletConnectorAddress } = usePromise(() => walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getAddress(), {
    enabled: !userProfile && Boolean(walletConnector)
  });
  return (0, import_jsx_runtime284.jsxs)("div", { className: "user-address__container", children: [(0, import_jsx_runtime284.jsx)(StatusDot, { variant: "green", containerClassName: "user-address__status-dot" }), (nameService === null || nameService === void 0 ? void 0 : nameService.name) ? (0, import_jsx_runtime284.jsxs)(import_jsx_runtime284.Fragment, { children: [(0, import_jsx_runtime284.jsx)(Typography, { variant: "numbers_big", color: "primary", className: "user-address", children: nameService.name }), (0, import_jsx_runtime284.jsx)("div", { className: "dynamic-widget-wallet-header__seperator" }), (0, import_jsx_runtime284.jsx)(Typography, { variant: "numbers_medium", color: "secondary", className: "user-address", children: shortenWalletAddress(walletAddress, 3, 3) })] }) : (0, import_jsx_runtime284.jsx)(Typography, { variant: "numbers_big", color: "primary", className: "user-address", children: shortenWalletAddress(walletAddress || walletConnectorAddress, 4, 4) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SelectNetworkButton/SelectNetworkButton.js
var import_jsx_runtime285 = __toESM(require_jsx_runtime(), 1);
var SelectNetworkButton = ({ networkId, networkName, networkIconUrl, onClick }) => {
  const networkImage = (0, import_jsx_runtime285.jsx)("img", { alt: networkName, className: "select-network-button__icon", src: networkIconUrl });
  return (0, import_jsx_runtime285.jsxs)(TypographyButton, { dataTestId: "SelectNetworkButton", onClick: () => onClick(networkId), expanded: true, className: "select-network-button", children: ["Select", networkImage, networkName, " network"] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useNetworkNotSupported/useNetworkNotSupported.js
var import_react318 = __toESM(require_react(), 1);
var import_jsx_runtime286 = __toESM(require_jsx_runtime(), 1);
var import_react_dom163 = __toESM(require_react_dom(), 1);
var import_qrcode159 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorNetwork/useWalletConnectorNetwork.js
var import_react317 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/events/useWalletConnectorEvent/useWalletConnectorEvent.js
var import_react316 = __toESM(require_react(), 1);
var useWalletConnectorEvent = (eventEmitters, eventName, handler) => {
  const callbackRef = (0, import_react316.useRef)(handler);
  callbackRef.current = handler;
  (0, import_react316.useEffect)(() => {
    if (!eventEmitters)
      return;
    const eventEmittersArray = Array.isArray(eventEmitters) ? eventEmitters : [eventEmitters];
    eventEmittersArray.forEach((connector) => connector.initEventListener());
    const uniqueEventEmitters = Array.from(new Set(eventEmittersArray));
    const unsubscribeCallbacks = uniqueEventEmitters.map((emitter) => {
      const callback = (...args) => {
        callbackRef.current(...args, emitter);
      };
      emitter.on(eventName, callback);
      return () => emitter.off(eventName, callback);
    });
    return () => unsubscribeCallbacks.forEach((unsubscribe) => unsubscribe());
  }, [eventEmitters, eventName]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorNetwork/useWalletConnectorNetwork.js
var useWalletConnectorNetwork = (walletConnector, { onChange } = { onChange: () => {
} }) => {
  const [network, setNetwork] = (0, import_react317.useState)();
  const { isLoading } = usePromise(() => walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getNetwork(), {
    deps: [walletConnector],
    onResolve: (network2) => {
      setNetwork(network2);
    }
  });
  useWalletConnectorEvent(walletConnector || void 0, "chainChange", ({ chain }) => {
    const parsedChain = (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === "STARK" ? chain : parseInt(chain);
    setNetwork(parsedChain);
    onChange === null || onChange === void 0 ? void 0 : onChange(parsedChain);
  });
  useWalletConnectorEvent(walletConnector || void 0, "disconnect", () => __awaiter(void 0, void 0, void 0, function* () {
    if ((walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key) !== "argentx")
      return;
    const chain = yield walletConnector.getNetwork();
    setNetwork(chain);
    onChange === null || onChange === void 0 ? void 0 : onChange(chain);
  }));
  return { isLoading, network };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useNetworkNotSupported/useNetworkNotSupported.js
var useNetworkNotSupported = () => {
  const { selectedWalletConnector: walletConnector, setShowAuthFlow, bridgeChainsToConnect, bridgeOnboardingCompleted, isBridgeFlow, user, authMode } = useInternalDynamicContext();
  const finishConnectAndSign = useConnectAndSign({
    shouldCallCallback: false,
    shouldUpdateWallets: Boolean(bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length)
  });
  const { network: walletConnectorNetwork } = useWalletConnectorNetwork(walletConnector, {
    onChange: (walletConnectorNetwork2) => {
      if (!walletConnector || !isSupportedNetwork({
        network: walletConnectorNetwork2,
        walletConnector
      })) {
        return;
      }
      finishConnectAndSign({
        walletConnector
      }).then(() => {
        if (!user && authMode === "connect-and-sign") {
          return;
        }
        if (!isBridgeFlow || bridgeOnboardingCompleted || !(bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length)) {
          setShowAuthFlow(false);
        }
      });
    }
  });
  return { currentNetwork: walletConnectorNetwork };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NetworkNotSupported/NetworkNotSupported.js
var import_qrcode160 = __toESM(require_browser(), 1);
var NetworkNotSupported = () => {
  const { onboardingImageUrl, selectedWalletConnector: walletConnector } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const { currentNetwork } = useNetworkNotSupported();
  const [isNetworkPickerOpen, setIsNetworkPickerOpen] = (0, import_react319.useState)(false);
  if (!walletConnector) {
    return null;
  }
  const onSelectNetworkButtonClick = (networkId) => __awaiter(void 0, void 0, void 0, function* () {
    try {
      yield walletConnector.switchNetwork({
        networkChainId: networkId
      });
    } catch (e2) {
      logger2.debug(e2);
    }
  });
  const evmNetworks = walletConnector.evmNetworks || [];
  const _isSupportedNetwork = isSupportedNetwork({
    network: currentNetwork,
    walletConnector
  });
  return (0, import_jsx_runtime287.jsxs)("div", { className: "network-not-supported", "data-testid": "network-not-supported", children: [onboardingImageUrl && (0, import_jsx_runtime287.jsx)("img", { className: "network-not-supported__main-img", src: onboardingImageUrl, alt: "onboarding" }), !_isSupportedNetwork && (0, import_jsx_runtime287.jsx)(ErrorContainer, { variant: "info", withIcon: false, className: "network-not-supported__error--not-supported", copykey: "dyn_network_not_supported.warning_message", children: t2("dyn_network_not_supported.warning_message") }), (0, import_jsx_runtime287.jsxs)("div", { className: classNames("network-not-supported__content-container", {
    "network-not-supported__content-container--error": !_isSupportedNetwork
  }), children: [(0, import_jsx_runtime287.jsx)("div", { className: "network-not-supported__img-container", children: (0, import_jsx_runtime287.jsx)(WalletIcon, { style: { height: 64, width: 64 }, walletKey: walletConnector.key }) }), (0, import_jsx_runtime287.jsx)(UserAddress, { walletConnector }), (0, import_jsx_runtime287.jsx)("div", { className: "network-not-supported__network-container", children: evmNetworks.length > 1 && (0, import_jsx_runtime287.jsx)(NetworkPicker, { currentNetwork, evmNetworks, connector: walletConnector, isNetworkPickerOpen, setIsNetworkPickerOpen, showNetworkName: true, buttonClassName: "network-not-supported__network-picker-button", mainClassName: "network-not-supported__network-picker" }) }), (0, import_jsx_runtime287.jsx)("div", { className: "network-not-supported__welcome-container", children: (0, import_jsx_runtime287.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_network_not_supported.subtitle", children: t2("dyn_network_not_supported.subtitle") }) }), evmNetworks.length === 1 && (0, import_jsx_runtime287.jsx)(SelectNetworkButton, { onClick: onSelectNetworkButtonClick, networkId: evmNetworks[0].networkId, networkName: evmNetworks[0].vanityName || evmNetworks[0].name, networkIconUrl: evmNetworks[0].iconUrls[0] })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NetworkNotSupportedSwitchManual/NetworkNotSupportedSwitchManual.js
var import_jsx_runtime288 = __toESM(require_jsx_runtime(), 1);
var import_react320 = __toESM(require_react(), 1);
var import_react_dom165 = __toESM(require_react_dom(), 1);
var import_qrcode161 = __toESM(require_browser(), 1);
var NetworkNotSupportedSwitchManual = () => {
  const { selectedWalletConnector: walletConnector } = useInternalDynamicContext();
  useNetworkNotSupported();
  const { t: t2 } = useTranslation();
  const iconSize2 = 80;
  const icon = (0, import_jsx_runtime288.jsx)(WalletIcon, { walletKey: walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key, style: {
    height: pixelToRem(iconSize2 * iconRatio),
    width: pixelToRem(iconSize2 * iconRatio)
  } });
  const walletConnectorNetworks = getWalletConnectorNetworks(walletConnector);
  const getSubtitleCopyKey = () => {
    if ((walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key) === "metamaskstarknet") {
      return "dyn_network_not_supported_manual_switch.subtitle_network_defined_metamaskstarknet";
    }
    return walletConnectorNetworks.length ? "dyn_network_not_supported_manual_switch.subtitle_network_defined" : "dyn_network_not_supported_manual_switch.subtitle_no_network_defined";
  };
  const getSubtitle = () => {
    if ((walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key) === "metamaskstarknet") {
      return (0, import_jsx_runtime288.jsxs)(import_jsx_runtime288.Fragment, { children: [t2("dyn_network_not_supported_manual_switch.subtitle_network_defined_metamaskstarknet", {
        network: walletConnectorNetworks[0].name
      }), (0, import_jsx_runtime288.jsxs)("a", { href: "https://snaps.consensys.io/starknet", target: "_blank", rel: "noreferrer", children: [" ", t2("dyn_network_not_supported_manual_switch.subtitle_network_defined_metamaskstarknet_companion_app"), " ", (0, import_jsx_runtime288.jsx)(SvgExternalLink, { style: { display: "inline-block" } })] })] });
    }
    return walletConnectorNetworks.length ? t2("dyn_network_not_supported_manual_switch.subtitle_network_defined", {
      network: walletConnectorNetworks[0].name
    }) : t2("dyn_network_not_supported_manual_switch.subtitle_no_network_defined");
  };
  return (0, import_jsx_runtime288.jsxs)("div", { "data-testid": "network-not-supported", className: "network-not-supported-switch-manual", children: [(0, import_jsx_runtime288.jsx)("div", { className: "network-not-supported-switch-manual__img-container", children: (0, import_jsx_runtime288.jsx)("div", { className: "network-not-supported-switch-manual__network-container", children: (0, import_jsx_runtime288.jsx)(IconWithSpinner, { Icon: icon, iconSize: iconSize2, isSpinning: true }) }) }), (0, import_jsx_runtime288.jsxs)("div", { className: "network-not-supported-switch-manual__content", children: [(0, import_jsx_runtime288.jsx)(Typography, { className: "network-not-supported-switch-manual__title", weight: "medium", variant: "title", color: "primary", copykey: "dyn_network_not_supported_manual_switch.title", children: t2("dyn_network_not_supported_manual_switch.title") }), (0, import_jsx_runtime288.jsx)(Typography, { variant: "body_normal", color: "secondary", copykey: getSubtitleCopyKey(), children: getSubtitle() })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoAccess/NoAccess.js
var import_jsx_runtime290 = __toESM(require_jsx_runtime(), 1);
var import_react322 = __toESM(require_react(), 1);
var import_react_dom167 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getSocialNetworkIcon/getSocialNetworkIcon.js
var socialNetworkIconMap = {
  discord: DiscordIcon,
  helpdesk: HelpdeskIcon,
  slack: SlackIcon,
  twitter: TwitterIcon
};
var getSocialNetworkIcon = (name) => socialNetworkIconMap[name];

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoAccess/useNoAccessText.js
var import_react321 = __toESM(require_react(), 1);
var import_jsx_runtime289 = __toESM(require_jsx_runtime(), 1);
var import_react_dom166 = __toESM(require_react_dom(), 1);
var import_qrcode162 = __toESM(require_browser(), 1);
var useNoAccessText = () => {
  const { socialMediaLinkText, socialMediaUrl, accessDeniedMessagePrimary, accessDeniedMessageSecondary } = useInternalDynamicContext();
  const { view } = useViewContext();
  const { t: t2 } = useTranslation();
  const isChainalysisView = view.type === "chainalysis-blocked-wallet";
  const isGateBlockedView = view.type === "gate-blocked-wallet";
  const isAccessListView = view.type === "no-access";
  const getSocialMediaLinkText = () => {
    if (isChainalysisView) {
      return t2(textData.chainalysis._socialMediaLinkText);
    }
    if (isGateBlockedView) {
      return void 0;
    }
    return socialMediaLinkText;
  };
  const getSocialMediaUrl = () => {
    if (isChainalysisView) {
      return t2(textData.chainalysis._socialMediaUrl);
    }
    if (isGateBlockedView) {
      return void 0;
    }
    return socialMediaUrl;
  };
  const getTitle = () => {
    if (isChainalysisView) {
      return t2(textData.chainalysis.title);
    }
    if (isGateBlockedView) {
      return t2(textData.gate.title);
    }
    return accessDeniedMessagePrimary || t2(textData.default.title);
  };
  const getSubtitle = () => {
    if (isChainalysisView) {
      return t2(textData.chainalysis.subtitle);
    }
    if (isGateBlockedView) {
      return t2(textData.gate.subtitle);
    }
    return accessDeniedMessageSecondary || t2(textData.default.subtitle);
  };
  const getButtonTitle = () => {
    if (isChainalysisView) {
      return t2(textData.chainalysis.buttonTitle);
    }
    if (isGateBlockedView) {
      return t2(textData.gate.buttonTitle);
    }
    return t2(textData.default.buttonTitle);
  };
  return {
    _socialMediaLinkText: getSocialMediaLinkText(),
    _socialMediaUrl: getSocialMediaUrl(),
    buttonTitle: getButtonTitle(),
    isAccessListView,
    isChainalysisView,
    isGateBlockedView,
    subtitle: getSubtitle(),
    title: getTitle()
  };
};
var textData = {
  chainalysis: {
    _socialMediaLinkText: "dyn_no_access.chainalysis.social_media_link_text",
    _socialMediaUrl: "dyn_no_access.chainalysis.social_media_link_url",
    buttonTitle: "dyn_no_access.chainalysis.button_text",
    subtitle: "dyn_no_access.chainalysis.description",
    title: "dyn_no_access.chainalysis.title"
  },
  default: {
    buttonTitle: "dyn_no_access.default.button_text",
    subtitle: "dyn_no_access.default.description",
    title: "dyn_no_access.default.title"
  },
  gate: {
    _socialMediaLinkText: void 0,
    _socialMediaUrl: void 0,
    buttonTitle: "dyn_no_access.gate.button_text",
    subtitle: "dyn_no_access.gate.description",
    title: "dyn_no_access.gate.title"
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoAccess/NoAccess.js
var import_qrcode163 = __toESM(require_browser(), 1);
var NoAccess = () => {
  const { deniedAddress, setDeniedAddress, setDeniedOauthProvider, deniedOauthProvider, deniedOauthUsername } = useAccessDeniedContext();
  const { t: t2 } = useTranslation();
  const accessIcon = findSocialIcon(deniedOauthProvider);
  const { selectedWalletConnector: walletConnector, socialMediaIconUrl, notInTheListImageUrl, accessDeniedButton } = useInternalDynamicContext();
  const { displayedDestination: email } = useVerification();
  const { goToInitialView } = useViewContext();
  const { _socialMediaLinkText, _socialMediaUrl, isAccessListView, isGateBlockedView, subtitle, title: title2, buttonTitle: _buttonTitle } = useNoAccessText();
  const handleChangeWallet = () => {
    goToInitialView();
    setDeniedAddress("");
    setDeniedOauthProvider(void 0);
    walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.endSession();
  };
  const SocialMediaIcon = !socialMediaIconUrl || typeof socialMediaIconUrl === "string" ? null : getSocialNetworkIcon(Object.keys(socialMediaIconUrl)[0]);
  const Icon2 = (0, import_react322.useMemo)(() => {
    if (walletConnector) {
      return (0, import_jsx_runtime290.jsx)(AuthProviderIcon, {});
    }
    return (0, import_jsx_runtime290.jsx)(IconWithStatus, { containerClassName: "wallet-no-access__icon--verified", Icon: accessIcon !== null && accessIcon !== void 0 ? accessIcon : SignInWithEmailIcon, iconSize: 50, InnerIcon: SvgError, variant: "red" });
  }, [accessIcon, walletConnector]);
  const formattedAddress = shortenWalletAddress(deniedAddress, 6, 4);
  const buttonTitle = (accessDeniedButton === null || accessDeniedButton === void 0 ? void 0 : accessDeniedButton.title) || _buttonTitle;
  const buttonAction = (accessDeniedButton === null || accessDeniedButton === void 0 ? void 0 : accessDeniedButton.action) || handleChangeWallet;
  const emailOrAddress = email !== null && email !== void 0 ? email : formattedAddress;
  const correctDisplay = deniedOauthProvider === void 0 ? emailOrAddress : deniedOauthUsername;
  const showNoInTheListImage = Boolean(notInTheListImageUrl) && (isAccessListView || isGateBlockedView);
  const showSocialMediaIcon = SocialMediaIcon && (isAccessListView || isGateBlockedView);
  return (0, import_jsx_runtime290.jsxs)("div", { className: "wallet-no-access__container", children: [showNoInTheListImage && (0, import_jsx_runtime290.jsx)("img", { src: notInTheListImageUrl, alt: t2("dyn_no_access.not_in_the_list_image_alt"), className: "wallet-no-access__image", copykey: "dyn_no_access.not_in_the_list_image_alt" }), (0, import_jsx_runtime290.jsxs)("div", { className: "wallet-no-access__main", children: [(0, import_jsx_runtime290.jsxs)("div", { className: "wallet-no-access__user-info-container", children: [Icon2, (0, import_jsx_runtime290.jsxs)("div", { "data-testid": "walletAddress", className: "wallet-no-access__wallet-address-container", children: [walletConnector && (0, import_jsx_runtime290.jsx)(StatusDot, { variant: "red", containerClassName: "user-info__status-dot" }), (0, import_jsx_runtime290.jsx)(Typography, { variant: "body_normal", color: "primary", weight: "medium", className: "wallet-no-access__wallet-address", children: correctDisplay })] })] }), (0, import_jsx_runtime290.jsxs)("div", { className: "wallet-no-access__content", children: [(0, import_jsx_runtime290.jsx)(Typography, { variant: "title", color: "primary", className: "wallet-no-access__content--primary", children: title2 }), (0, import_jsx_runtime290.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "wallet-no-access__content--secondary", children: subtitle })] }), (0, import_jsx_runtime290.jsx)(TypographyButton, { onClick: buttonAction, className: "wallet-no-access__button--primary", expanded: true, buttonPadding: "large", children: buttonTitle }), _socialMediaUrl && _socialMediaLinkText && (0, import_jsx_runtime290.jsxs)("div", { className: "wallet-no-access__social-info-container", children: [(0, import_jsx_runtime290.jsxs)("a", { href: _socialMediaUrl, className: "wallet-no-access__waitlist-link", children: [(0, import_jsx_runtime290.jsx)(Typography, { variant: "button_primary", color: "primary", children: _socialMediaLinkText }), showSocialMediaIcon && (0, import_jsx_runtime290.jsx)(SocialMediaIcon, { className: "wallet-no-access__social-icon", style: {
    height: pixelToRem(24),
    width: pixelToRem(24)
  } })] }), typeof socialMediaIconUrl === "string" && (0, import_jsx_runtime290.jsx)("img", { alt: "social media", src: socialMediaIconUrl, style: {
    height: "1.5rem",
    width: "1.5rem"
  } })] })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoQrNotInstalledView/NoQrNotInstalledView.js
var import_jsx_runtime292 = __toESM(require_jsx_runtime(), 1);
var import_react324 = __toESM(require_react(), 1);
var import_react_dom169 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoQrNotInstalledView/WalletHelpLink.js
var import_jsx_runtime291 = __toESM(require_jsx_runtime(), 1);
var import_react323 = __toESM(require_react(), 1);
var import_react_dom168 = __toESM(require_react_dom(), 1);
var import_qrcode164 = __toESM(require_browser(), 1);
var capitalize4 = (value) => value[0].toUpperCase() + value.slice(1);
var WalletHelpLink = ({ name, link, Icon: Icon2 }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime291.jsx)("div", { className: "wallet-help-link", children: (0, import_jsx_runtime291.jsxs)("a", { className: "wallet-help-link__anchor", href: link, target: "_blank", rel: "noreferrer", children: [(0, import_jsx_runtime291.jsx)(Icon2, { style: {
    height: "1.5rem",
    width: "1.5rem"
  } }), (0, import_jsx_runtime291.jsx)(Typography, { variant: "button_primary", weight: "medium", copykey: "dyn_qr_code.wallet_not_installed.browser_install", children: t2("dyn_qr_code.wallet_not_installed.browser_install", {
    browser: capitalize4(name)
  }) })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/NoQrNotInstalledView/NoQrNotInstalledView.js
var import_qrcode165 = __toESM(require_browser(), 1);
var NoQrNotInstalledView = () => {
  const { selectedWalletConnector } = useInternalDynamicContext();
  const { walletBook } = useWalletBookContext();
  const { t: t2 } = useTranslation();
  if (!selectedWalletConnector) {
    return null;
  }
  const downloadLinks = Object.entries(getWalletLinks(walletBook, selectedWalletConnector.key)).filter(([, link]) => link !== "").filter(([name]) => name !== "ios" && name !== "android").map(([name, link]) => (0, import_jsx_runtime292.jsx)(WalletHelpLink, {
    name,
    link,
    // justification: we're looping over the keys of walletLinks.desktop
    Icon: getBrowserIcon(name)
  }, name));
  return (0, import_jsx_runtime292.jsxs)("div", { className: "no-qr-code-installed__container", "data-testid": "no-qr-code-installed", children: [(0, import_jsx_runtime292.jsx)("div", { className: "no-qr-code-installed__img", children: (0, import_jsx_runtime292.jsx)(WalletIcon, { walletKey: selectedWalletConnector.key, style: { height: pixelToRem(64), width: pixelToRem(64) } }) }), (0, import_jsx_runtime292.jsx)(Typography, { className: "no-qr-code-installed__typography--title", variant: "title", copykey: "dyn_qr_code.wallet_not_installed.install", children: t2("dyn_qr_code.wallet_not_installed.install", {
    wallet: getWalletBookWallet(walletBook, selectedWalletConnector.key).name
  }) }), (0, import_jsx_runtime292.jsx)(Typography, { variant: "body_normal", className: "no-qr-code-installed__typography", color: "secondary", copykey: "dyn_qr_code.wallet_not_installed.select", children: t2("dyn_qr_code.wallet_not_installed.select") }), (0, import_jsx_runtime292.jsx)("div", { className: "no-qr-code-installed__links-section", children: downloadLinks }), (0, import_jsx_runtime292.jsx)(Typography, { variant: "body_mini", className: "no-qr-code-installed__typography", weight: "medium", color: "secondary", copykey: "dyn_qr_code.wallet_not_installed.refresh", children: t2("dyn_qr_code.wallet_not_installed.refresh") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/AccessBlockedView/AccessBlockedView.js
var import_jsx_runtime293 = __toESM(require_jsx_runtime(), 1);
var import_react325 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/access-blocked.js
var React73 = __toESM(require_react(), 1);
var _g9;
var _defs6;
var _excluded59 = ["title", "titleId"];
function _extends66() {
  _extends66 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends66.apply(this, arguments);
}
function _objectWithoutProperties59(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose62(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose62(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgAccessBlocked = function SvgAccessBlocked2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties59(_ref2, _excluded59);
  return React73.createElement("svg", _extends66({
    width: 327,
    height: 112,
    viewBox: "0 0 327 112",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React73.createElement("title", {
    id: titleId
  }, title2) : null, _g9 || (_g9 = React73.createElement("g", {
    clipPath: "url(#access-blocked_svg__a)"
  }, React73.createElement("circle", {
    cx: 164,
    cy: 114,
    r: 114,
    fill: "url(#access-blocked_svg__b)",
    fillOpacity: 0.12
  }), React73.createElement("circle", {
    cx: 220.352,
    cy: 29.265,
    r: 15.729,
    transform: "rotate(15 220.352 29.265)",
    fill: "#4779FF"
  }), React73.createElement("path", {
    d: "M223.594 23.62a1.573 1.573 0 1 0-3.038-.815l-1.629 6.078a1.573 1.573 0 1 0 3.039.814l1.628-6.077ZM219.225 33.848a1.573 1.573 0 0 0-.814 3.039l.015.004a1.574 1.574 0 0 0 .814-3.039l-.015-.004Z",
    fill: "#F9F9FB"
  }), React73.createElement("g", {
    clipPath: "url(#access-blocked_svg__c)",
    fill: "#4779FF"
  }, React73.createElement("path", {
    d: "M101.972 36.04a8 8 0 0 1 9.798 5.657l-2.897.777a5 5 0 0 0-9.66 2.588l-2.897.776a8 8 0 0 1 5.656-9.797ZM118.498 47.487a5.333 5.333 0 0 0-6.532-3.772l-14.81 3.969a5.333 5.333 0 0 0-3.772 6.532l1.898 7.084a5.333 5.333 0 0 0 6.532 3.77l14.811-3.968a5.334 5.334 0 0 0 3.771-6.532l-1.898-7.083Z"
  })), React73.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M164.943 32.064a6.216 6.216 0 0 0-1.779 0c-.681.098-1.313.337-1.816.527l-.135.05-16.68 6.256-.407.152c-1.922.718-3.61 1.348-4.909 2.493a9.336 9.336 0 0 0-2.553 3.683c-.616 1.62-.613 3.421-.61 5.473V66.01c0 8.793 4.783 16.125 9.953 21.51 5.204 5.422 11.159 9.252 14.307 11.089l.128.075c.574.337 1.32.775 2.307.987a6.619 6.619 0 0 0 2.609 0c.987-.212 1.733-.65 2.307-.987l.128-.075c3.148-1.837 9.103-5.667 14.307-11.088 5.17-5.386 9.953-12.718 9.953-21.511V50.698c.003-2.052.006-3.854-.611-5.473a9.333 9.333 0 0 0-2.552-3.683c-1.3-1.145-2.987-1.775-4.909-2.493l-.407-.152-16.68-6.255-.135-.05c-.503-.19-1.136-.43-1.816-.528Zm-3.344 46.703c-1.172-2.936-2.026-7.051-2.236-11.797h9.298c-.21 4.746-1.064 8.861-2.236 11.797-.683 1.709-1.393 2.816-1.971 3.428-.198.21-.346.328-.442.393a2.703 2.703 0 0 1-.442-.392c-.578-.613-1.288-1.72-1.971-3.429Zm0-28.13c-1.208 3.025-2.078 7.301-2.253 12.228h9.332c-.175-4.927-1.045-9.203-2.253-12.227-.683-1.709-1.393-2.816-1.971-3.429a2.703 2.703 0 0 0-.442-.392 2.703 2.703 0 0 0-.442.392c-.578.613-1.288 1.72-1.971 3.429Zm-15.106 12.228h8.746c.21-6.38 1.506-11.989 3.423-15.668-6.57 2.184-11.466 8.283-12.169 15.668Zm.046 4.105h8.716c.253 6.201 1.533 11.642 3.407 15.238-6.442-2.141-11.274-8.046-12.123-15.238Zm34.946 0h-8.716c-.253 6.201-1.533 11.642-3.407 15.238 6.442-2.141 11.275-8.046 12.123-15.238Zm.133-2.267v.065-.131.066Zm-8.833-1.838h8.746c-.703-7.385-5.599-13.484-12.169-15.668 1.917 3.68 3.213 9.289 3.423 15.668Zm-8.909 19.795c0-.001.007-.004.023-.008a.077.077 0 0 1-.023.008Zm.25-.008a.064.064 0 0 1 .022.008s-.007-.001-.022-.008Zm.022-35.907c0 .001-.007.004-.023.008a.077.077 0 0 1 .023-.008Zm-.249.008c-.016-.004-.023-.007-.023-.008 0 0 .007.001.023.008Z",
    fill: "#4779FF"
  }))), _defs6 || (_defs6 = React73.createElement("defs", null, React73.createElement("clipPath", {
    id: "access-blocked_svg__a"
  }, React73.createElement("rect", {
    width: 327,
    height: 112,
    rx: 12,
    fill: "#fff"
  })), React73.createElement("clipPath", {
    id: "access-blocked_svg__c"
  }, React73.createElement("path", {
    fill: "#fff",
    transform: "rotate(-15 188.268 -307.493)",
    d: "M0 0h32v32H0z"
  })), React73.createElement("linearGradient", {
    id: "access-blocked_svg__b",
    x1: 164,
    y1: 0,
    x2: 164,
    y2: 93.5,
    gradientUnits: "userSpaceOnUse"
  }, React73.createElement("stop", {
    stopColor: "#4779FF"
  }), React73.createElement("stop", {
    offset: 1,
    stopColor: "#4779FF",
    stopOpacity: 0
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/AccessBlockedView/AccessBlockedView.js
var import_react_dom170 = __toESM(require_react_dom(), 1);
var import_qrcode166 = __toESM(require_browser(), 1);
var AccessBlockedView = () => {
  const [country, setCountry] = (0, import_react325.useState)();
  const { t: t2 } = useTranslation();
  const { getIpConfiguration } = useIpConfigurationContext();
  usePromise(getIpConfiguration, {
    deps: [getIpConfiguration, country],
    onResolve: (config2) => setCountry(config2 === null || config2 === void 0 ? void 0 : config2.country),
    retries: 2
  });
  return (0, import_jsx_runtime293.jsxs)("div", { className: "access-blocked__container", children: [(0, import_jsx_runtime293.jsx)("div", { className: "access-blocked__icon", children: (0, import_jsx_runtime293.jsx)(SvgAccessBlocked, {}) }), (0, import_jsx_runtime293.jsx)("div", { className: "access-blocked__content", children: (0, import_jsx_runtime293.jsx)(Typography, { variant: "body_normal", color: "secondary", children: t2("dyn_access_blocked.content", { jurisdiction: country }) }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyIntroView/PasskeyIntroView.js
var import_jsx_runtime296 = __toESM(require_jsx_runtime(), 1);
var import_react328 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/passkey-intro2.js
var React74 = __toESM(require_react(), 1);
var _g10;
var _defs7;
var _excluded60 = ["title", "titleId"];
function _extends67() {
  _extends67 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends67.apply(this, arguments);
}
function _objectWithoutProperties60(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose63(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose63(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgPasskeyIntro2 = function SvgPasskeyIntro22(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties60(_ref2, _excluded60);
  return React74.createElement("svg", _extends67({
    width: 327,
    height: 112,
    viewBox: "0 0 327 112",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React74.createElement("title", {
    id: titleId
  }, title2) : null, _g10 || (_g10 = React74.createElement("g", {
    clipPath: "url(#passkey-intro2_svg__a)"
  }, React74.createElement("circle", {
    cx: 164,
    cy: 114,
    r: 114,
    fill: "url(#passkey-intro2_svg__b)",
    fillOpacity: 0.12
  }), React74.createElement("g", {
    clipPath: "url(#passkey-intro2_svg__c)",
    fill: "#4779FF"
  }, React74.createElement("path", {
    d: "M106.009 34.681a2.666 2.666 0 0 1 3.266 1.886l-15.454 4.141a5.319 5.319 0 0 0-3.339 2.666 5.335 5.335 0 0 1 3.936-5.587l11.591-3.106ZM117.785 42.57a5.333 5.333 0 0 0-6.532-3.772l-15.455 4.141a5.333 5.333 0 0 0-3.771 6.532l2.76 10.303a5.333 5.333 0 0 0 6.533 3.771l15.454-4.14a5.333 5.333 0 0 0 3.772-6.533l-2.761-10.303Z"
  })), React74.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "m207.67 19.875-.767 2.862a9.86 9.86 0 0 0-5.861 6.61c-1.412 5.269 1.715 10.684 6.984 12.096 5.268 1.412 10.684-1.715 12.096-6.984a9.862 9.862 0 0 0-1.771-8.655l.767-2.861a5.926 5.926 0 0 0-11.448-3.068Zm9.321 2.498-.444 1.655a9.844 9.844 0 0 0-3.409-1.665 9.847 9.847 0 0 0-3.785-.262l.444-1.656a3.723 3.723 0 1 1 7.194 1.928Zm-3.445 8.52a2.57 2.57 0 0 1-2.019 1.862l-.539 2.011a1.1 1.1 0 1 1-2.127-.57l.539-2.01a2.569 2.569 0 1 1 4.146-1.294ZM164.943 32.064a6.216 6.216 0 0 0-1.779 0c-.681.098-1.314.337-1.816.527l-.135.05-16.68 6.256-.407.152c-1.922.718-3.61 1.348-4.909 2.493a9.325 9.325 0 0 0-2.553 3.683c-.616 1.62-.613 3.421-.61 5.473V66.01c0 8.793 4.783 16.125 9.953 21.51 5.204 5.422 11.159 9.252 14.307 11.089l.128.075c.574.337 1.32.775 2.307.987a6.619 6.619 0 0 0 2.609 0c.987-.212 1.732-.65 2.307-.987l.128-.075c3.148-1.837 9.103-5.667 14.307-11.088 5.17-5.386 9.953-12.718 9.953-21.511V50.698c.003-2.052.006-3.854-.611-5.473a9.333 9.333 0 0 0-2.552-3.683c-1.3-1.145-2.987-1.775-4.909-2.493l-.407-.152-16.68-6.255-.135-.05c-.503-.19-1.136-.43-1.816-.528Zm-1.34 14.592a15.89 15.89 0 0 0-7.978 2.135 1.772 1.772 0 0 0 1.775 3.069 12.347 12.347 0 0 1 6.203-1.66c6.853 0 12.408 5.556 12.408 12.409a44.34 44.34 0 0 1-1.688 12.156 1.772 1.772 0 1 0 3.41.97 47.883 47.883 0 0 0 1.823-13.126c0-8.81-7.142-15.953-15.953-15.953Zm-10.749 9.75a1.772 1.772 0 1 0-3.069-1.775 15.891 15.891 0 0 0-2.135 7.978c0 2.499-.573 4.86-1.594 6.96a1.772 1.772 0 1 0 3.189 1.55 19.43 19.43 0 0 0 1.95-8.51c0-2.263.604-4.38 1.659-6.203Zm10.749-2.66a8.863 8.863 0 0 0-8.863 8.863c0 4.516-1.29 8.704-3.518 12.246l1.5.944-1.5-.944-.121.196a1.774 1.774 0 0 0 3.049 1.81 26.434 26.434 0 0 0 4.135-14.253 5.318 5.318 0 0 1 10.636 0c0 1.723-.118 3.418-.345 5.078a1.773 1.773 0 0 0 3.513.48 41.12 41.12 0 0 0 .377-5.557 8.863 8.863 0 0 0-8.863-8.863Zm1.772 8.863a1.772 1.772 0 1 0-3.545 0c0 5.89-1.688 11.381-4.607 16.021a1.773 1.773 0 0 0 3.001 1.888 33.528 33.528 0 0 0 5.151-17.91Zm5.554 11.117a1.773 1.773 0 0 0-3.411-.965 37.01 37.01 0 0 1-2.523 6.502 1.771 1.771 0 1 0 3.169 1.588 40.517 40.517 0 0 0 2.765-7.124Z",
    fill: "#4779FF"
  }))), _defs7 || (_defs7 = React74.createElement("defs", null, React74.createElement("clipPath", {
    id: "passkey-intro2_svg__a"
  }, React74.createElement("rect", {
    width: 327,
    height: 112,
    rx: 12,
    fill: "#fff"
  })), React74.createElement("clipPath", {
    id: "passkey-intro2_svg__c"
  }, React74.createElement("path", {
    fill: "#fff",
    transform: "rotate(-15 184.593 -307.976)",
    d: "M0 0h32v32H0z"
  })), React74.createElement("linearGradient", {
    id: "passkey-intro2_svg__b",
    x1: 164,
    y1: 0,
    x2: 164,
    y2: 93.5,
    gradientUnits: "userSpaceOnUse"
  }, React74.createElement("stop", {
    stopColor: "#4779FF"
  }), React74.createElement("stop", {
    offset: 1,
    stopColor: "#4779FF",
    stopOpacity: 0
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyIntroView/PasskeyIntroView.js
var import_react_dom173 = __toESM(require_react_dom(), 1);
var import_qrcode169 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyDeviceIcon/PasskeyDeviceIcon.js
var import_jsx_runtime294 = __toESM(require_jsx_runtime(), 1);
var import_react326 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/android-face-id.js
var React75 = __toESM(require_react(), 1);
var _path60;
var _path214;
var _path313;
var _excluded61 = ["title", "titleId"];
function _extends68() {
  _extends68 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends68.apply(this, arguments);
}
function _objectWithoutProperties61(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose64(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose64(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgAndroidFaceId = function SvgAndroidFaceId2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties61(_ref2, _excluded61);
  return React75.createElement("svg", _extends68({
    width: 64,
    height: 64,
    viewBox: "0 0 64 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React75.createElement("title", {
    id: titleId
  }, title2) : null, _path60 || (_path60 = React75.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32 57.887c14.297 0 25.887-11.59 25.887-25.887S46.297 6.113 32 6.113 6.113 17.703 6.113 32 17.703 57.887 32 57.887ZM32 60c15.464 0 28-12.536 28-28S47.464 4 32 4 4 16.536 4 32s12.536 28 28 28Z",
    fill: "#1A73E8"
  })), _path214 || (_path214 = React75.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M36.752 46.831c.27.582.018 1.274-.565 1.544-2.69 1.25-5.356 1.479-7.54.476-2.215-1.017-3.66-3.173-4.134-6.099l2.295-.372c.383 2.364 1.466 3.742 2.809 4.359 1.374.63 3.299.592 5.591-.472a1.162 1.162 0 0 1 1.544.564ZM33.585 35.17v-4.755h2.113v6.868h-5.811V35.17h3.698Z",
    fill: "#1A73E8"
  })), _path313 || (_path313 = React75.createElement("path", {
    d: "M46.792 25.132a2.113 2.113 0 1 1-4.226 0 2.113 2.113 0 0 1 4.226 0ZM21.434 25.132a2.113 2.113 0 1 1-4.227 0 2.113 2.113 0 0 1 4.227 0Z",
    fill: "#1A73E8"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/android-touch-id.js
var React76 = __toESM(require_react(), 1);
var _path61;
var _excluded62 = ["title", "titleId"];
function _extends69() {
  _extends69 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends69.apply(this, arguments);
}
function _objectWithoutProperties62(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose65(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose65(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgAndroidTouchId = function SvgAndroidTouchId2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties62(_ref2, _excluded62);
  return React76.createElement("svg", _extends69({
    width: 64,
    height: 64,
    viewBox: "0 0 64 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React76.createElement("title", {
    id: titleId
  }, title2) : null, _path61 || (_path61 = React76.createElement("path", {
    d: "M47.493 11.92c-.213 0-.426-.053-.613-.16C41.76 9.12 37.333 8 32.027 8c-5.28 0-10.294 1.253-14.854 3.76-.64.347-1.44.107-1.813-.533a1.35 1.35 0 0 1 .533-1.814c4.96-2.693 10.4-4.08 16.134-4.08 5.68 0 10.64 1.254 16.08 4.054.666.346.906 1.146.56 1.786-.24.48-.694.747-1.174.747Zm-38.16 14a1.33 1.33 0 0 1-1.093-2.107c2.64-3.733 6-6.666 10-8.72 8.373-4.32 19.093-4.346 27.493-.026 4 2.053 7.36 4.96 10 8.666.427.587.294 1.44-.32 1.867a1.33 1.33 0 0 1-1.866-.32c-2.4-3.36-5.44-6-9.04-7.84-7.654-3.92-17.44-3.92-25.067.027-3.627 1.866-6.667 4.533-9.067 7.893-.213.373-.613.56-1.04.56ZM26 58.107c-.347 0-.693-.134-.933-.4-2.32-2.32-3.574-3.814-5.36-7.04-1.84-3.28-2.8-7.28-2.8-11.574 0-7.92 6.773-14.373 15.093-14.373s15.093 6.453 15.093 14.373a1.32 1.32 0 0 1-1.333 1.334 1.32 1.32 0 0 1-1.333-1.334c0-6.453-5.574-11.706-12.427-11.706S19.573 32.64 19.573 39.093c0 3.84.854 7.387 2.48 10.267 1.707 3.067 2.88 4.373 4.934 6.453a1.37 1.37 0 0 1 0 1.894c-.294.266-.64.4-.987.4Zm19.12-4.934c-3.173 0-5.973-.8-8.267-2.373-3.973-2.693-6.346-7.067-6.346-11.707a1.32 1.32 0 0 1 1.333-1.333 1.32 1.32 0 0 1 1.333 1.333c0 3.76 1.92 7.307 5.174 9.494 1.893 1.28 4.106 1.893 6.773 1.893.64 0 1.707-.08 2.773-.267a1.33 1.33 0 0 1 1.547 1.094 1.33 1.33 0 0 1-1.093 1.546c-1.52.294-2.854.32-3.227.32Zm-5.36 5.494a1.56 1.56 0 0 1-.347-.054c-4.24-1.173-7.013-2.746-9.92-5.6-3.733-3.706-5.786-8.64-5.786-13.92 0-4.32 3.68-7.84 8.213-7.84 4.533 0 8.213 3.52 8.213 7.84 0 2.854 2.48 5.174 5.547 5.174 3.067 0 5.547-2.32 5.547-5.174 0-10.053-8.667-18.213-19.334-18.213-7.573 0-14.506 4.213-17.626 10.747-1.04 2.16-1.574 4.693-1.574 7.466 0 2.08.187 5.36 1.787 9.627a1.301 1.301 0 0 1-.773 1.707A1.323 1.323 0 0 1 12 49.653c-1.307-3.493-1.947-6.96-1.947-10.56 0-3.2.614-6.106 1.814-8.64 3.546-7.44 11.413-12.266 20.026-12.266 12.134 0 22 9.36 22 20.88 0 4.32-3.68 7.84-8.213 7.84-4.533 0-8.213-3.52-8.213-7.84 0-2.854-2.48-5.174-5.547-5.174-3.067 0-5.547 2.32-5.547 5.174 0 4.56 1.76 8.826 4.987 12.026 2.533 2.507 4.96 3.894 8.72 4.934.72.186 1.12.933.933 1.626a1.301 1.301 0 0 1-1.253 1.014Z",
    fill: "#1A73E8"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/face-id.js
var React77 = __toESM(require_react(), 1);
var _path62;
var _excluded63 = ["title", "titleId"];
function _extends70() {
  _extends70 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends70.apply(this, arguments);
}
function _objectWithoutProperties63(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose66(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose66(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgFaceId = function SvgFaceId2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties63(_ref2, _excluded63);
  return React77.createElement("svg", _extends70({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React77.createElement("title", {
    id: titleId
  }, title2) : null, _path62 || (_path62 = React77.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M18.055 2.4A3.548 3.548 0 0 1 21.6 5.945v2.013a1.095 1.095 0 0 1-2.19 0V5.945c0-.747-.608-1.355-1.355-1.355h-2.012a1.095 1.095 0 1 1 0-2.19h2.012Zm-10.098 0a1.095 1.095 0 0 1 0 2.19H5.945c-.747 0-1.355.608-1.355 1.355v2.013a1.095 1.095 0 0 1-2.19 0V5.945A3.548 3.548 0 0 1 5.945 2.4h2.012Zm7.692 5.083c.6 0 1.086.486 1.086 1.086v1.347a1.086 1.086 0 1 1-2.172 0V8.57c0-.6.486-1.086 1.086-1.086Zm-4.121 0c.614 0 1.112.498 1.112 1.112v2.982h.008a1.113 1.113 0 0 1 0 2.226h-.386a1.849 1.849 0 0 1-1.847-1.848v-3.36c0-.614.498-1.112 1.113-1.112Zm-3.282 0c.6 0 1.086.486 1.086 1.086v1.347a1.086 1.086 0 0 1-2.172 0V8.57c0-.6.486-1.086 1.086-1.086Zm12.259 7.465c.605 0 1.095.49 1.095 1.095v2.012a3.548 3.548 0 0 1-3.545 3.545h-2.012a1.095 1.095 0 1 1 0-2.19h2.012c.747 0 1.355-.608 1.355-1.355v-2.012c0-.605.49-1.095 1.095-1.095Zm-17.01 0c.605 0 1.095.49 1.095 1.095v2.012c0 .747.608 1.355 1.355 1.355h2.012a1.095 1.095 0 0 1 0 2.19H5.945A3.548 3.548 0 0 1 2.4 18.055v-2.012c0-.605.49-1.095 1.095-1.095Zm5.365 1.337a.473.473 0 0 0 0 0l-.434.47a1.113 1.113 0 0 1 1.51-1.634c.563.52 1.296.806 2.064.806s1.5-.286 2.065-.807a1.113 1.113 0 0 1 1.51 1.634A5.255 5.255 0 0 1 12 18.153a5.255 5.255 0 0 1-3.574-1.397l.434-.47a4.615 4.615 0 0 1 0 0Zm5.947.28a4.694 4.694 0 0 1 0 0Z",
    fill: "#ABACB2"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/iphone-touch-id.js
var React78 = __toESM(require_react(), 1);
var _g11;
var _defs8;
var _excluded64 = ["title", "titleId"];
function _extends71() {
  _extends71 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends71.apply(this, arguments);
}
function _objectWithoutProperties64(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose67(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose67(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgIphoneTouchId = function SvgIphoneTouchId2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties64(_ref2, _excluded64);
  return React78.createElement("svg", _extends71({
    width: 64,
    height: 64,
    viewBox: "0 0 64 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React78.createElement("title", {
    id: titleId
  }, title2) : null, _g11 || (_g11 = React78.createElement("g", {
    clipPath: "url(#iphone-touch-id_svg__a)",
    fill: "#000"
  }, React78.createElement("path", {
    d: "M38.635.943c-4.483-1.118-9.2-1.278-13.79-.287a.657.657 0 0 0 .277 1.285c4.396-.95 8.924-.793 13.232.287 10.3 2.582 18.875 10.327 22.14 20.444 1.264 3.912 1.8 8.078 1.908 12.445a.657.657 0 0 0 1.313-.033c-.108-4.426-.651-8.7-1.945-12.74C58.378 11.75 49.417 3.632 38.635.943ZM21.51 2.932a.657.657 0 1 0-.35-1.267c-4.801 1.324-11.554 5.9-15.728 12.014a.754.754 0 0 0-.004.007C1.763 19.208-.534 26.148.108 32.883l.001.019c.154 1.23.412 2.457.67 3.686.544 2.588 1.09 5.183.665 7.818a.657.657 0 1 0 1.297.21c.445-2.755-.107-5.443-.66-8.13-.254-1.244-.51-2.487-.666-3.737-.604-6.364 1.57-13.002 5.105-18.333 4.015-5.879 10.516-10.25 14.99-11.484Z"
  }), React78.createElement("path", {
    d: "M30.133 4.4c8.25-.504 16.499 2.863 22.039 9.314a.657.657 0 1 1-.997.856c-5.268-6.134-13.118-9.339-20.966-8.858H30.2c-9.925.48-19.22 7.214-22.638 16.648a.657.657 0 1 1-1.236-.447C9.928 11.973 19.688 4.907 30.133 4.4ZM54.174 16.585a.657.657 0 0 0-1.091.733c3.07 4.572 4.34 9.548 4.843 15.454a.657.657 0 0 0 1.31-.112c-.514-6.034-1.823-11.252-5.062-16.075ZM58.796 35.45a.657.657 0 0 1 .697.615c.247 3.963.25 8.446-.189 11.76a.657.657 0 1 1-1.303-.173c.423-3.193.425-7.582.18-11.505a.657.657 0 0 1 .615-.697ZM6.57 25.543a.657.657 0 1 0-1.278-.308 26.58 26.58 0 0 0-.743 6.104c-.01 2.117.385 4.184.78 6.25.323 1.692.646 3.384.747 5.104.134 2.26-.341 4.523-1.163 6.677a.657.657 0 1 0 1.228.469c.868-2.277 1.395-4.73 1.247-7.223-.1-1.709-.424-3.39-.747-5.072-.394-2.051-.788-4.102-.778-6.199.01-1.952.248-3.902.706-5.802Z"
  }), React78.createElement("path", {
    d: "M23.813 10.94a.657.657 0 0 1-.365.855c-6.813 2.736-11.93 8.91-12.973 16.19-.436 3.042.035 6.055.506 9.067.265 1.696.53 3.392.634 5.093.223 3.688-.197 7.739-2.597 11.425a.657.657 0 0 1-1.101-.718c2.186-3.358 2.6-7.088 2.386-10.627-.105-1.726-.368-3.442-.632-5.156-.472-3.077-.944-6.15-.497-9.27 1.115-7.774 6.563-14.324 13.784-17.224a.657.657 0 0 1 .855.365ZM46.882 14.681c-5.374-5.034-13.164-6.79-20.244-5.238a.657.657 0 1 0 .282 1.284c6.704-1.47 14.039.207 19.064 4.914 4.235 3.967 6.695 9.739 7.339 16.037a.657.657 0 0 0 1.307-.134c-.668-6.54-3.232-12.633-7.748-16.863ZM54.493 34.674a.657.657 0 0 1 .72.586c.625 6.077.356 12.64-.587 18.99a.657.657 0 0 1-1.3-.193c.93-6.261 1.191-12.713.58-18.662a.657.657 0 0 1 .587-.721Z"
  }), React78.createElement("path", {
    d: "M31.582 13.355c-10.07 0-18.252 8.034-18.252 17.967 0 1.06.094 2.1.274 3.111a.657.657 0 0 0 1.294-.23 16.469 16.469 0 0 1-.254-2.881c0-9.187 7.574-16.652 16.938-16.652 4.232 0 8.098 1.525 11.066 4.045a.657.657 0 0 0 .85-1.002 18.353 18.353 0 0 0-11.916-4.358ZM44.971 20.163a.657.657 0 0 1 .93.02c2.9 3.024 3.828 7.777 4.442 11.766.692 4.494.798 8.877.798 10.91a.657.657 0 0 1-1.315 0c0-2-.104-6.31-.782-10.71-.57-3.703-1.392-8.24-4.092-11.056a.657.657 0 0 1 .02-.93ZM50.974 46.622a.657.657 0 0 0-1.31-.105c-.323 4.048-.745 8.092-1.6 11.827a.657.657 0 1 0 1.28.293c.879-3.833 1.306-7.956 1.63-12.015ZM14.662 36.852a.657.657 0 0 1 .771.518c1.39 7.056.43 13.466-3.25 19.08a.657.657 0 0 1-1.099-.72c3.462-5.283 4.394-11.331 3.06-18.106a.657.657 0 0 1 .518-.772Z"
  }), React78.createElement("path", {
    d: "M31.582 17.631c-6.537 0-12.95 5.06-13.604 11.42-.287 2.784.116 5.526.519 8.27.351 2.395.703 4.791.596 7.217-.244 5.552-1.873 10.135-4.672 13.91a.657.657 0 1 0 1.056.782c2.968-4.003 4.674-8.844 4.93-14.634.106-2.415-.247-4.804-.6-7.19-.403-2.73-.806-5.459-.521-8.221.574-5.587 6.325-10.24 12.296-10.24 2.785 0 9.991 1.508 12.283 8.976 1.437 4.679 1.828 11.012 1.48 17.164-.347 6.151-1.43 12.035-2.885 15.808a.657.657 0 0 0 1.227.473c1.522-3.947 2.619-9.98 2.97-16.207.353-6.226-.034-12.734-1.535-17.624-2.545-8.289-10.52-9.904-13.54-9.904Z"
  }), React78.createElement("path", {
    d: "M21.47 56.451c.303.198.389.606.19.91-.407.624-.765 1.278-1.124 1.932-.359.654-.717 1.307-1.125 1.932a.657.657 0 1 1-1.1-.718c.407-.624.765-1.278 1.124-1.932.359-.654.717-1.308 1.125-1.932a.657.657 0 0 1 .91-.192ZM27.096 24.453a.657.657 0 1 0-.73-1.093c-2.603 1.74-4.2 4.134-4.2 7.64 0 2.088.37 3.795.75 5.545.567 2.62.953 5.233.883 7.923-.084 3.267-.723 6.252-1.952 9.096a.657.657 0 1 0 1.207.521c1.299-3.007 1.971-6.158 2.06-9.583.071-2.796-.325-5.513-.913-8.235-.38-1.758-.72-3.328-.72-5.267 0-3.004 1.321-5.013 3.615-6.547ZM29.66 22.144c2.728-.556 5.662.13 7.822 1.879 3.858 3.122 4.371 8.817 4.787 13.432l.021.235c.538 5.949-.077 11.726-1.316 17.529a.657.657 0 1 1-1.286-.275c1.22-5.715 1.815-11.355 1.293-17.136l-.052-.582v-.002c-.37-4.17-.832-9.394-4.274-12.18-1.846-1.494-4.379-2.092-6.732-1.613a.657.657 0 1 1-.262-1.287ZM40.045 58.489a.657.657 0 1 0-1.274-.325 15.88 15.88 0 0 1-1.785 4.266.657.657 0 1 0 1.127.675 17.188 17.188 0 0 0 1.932-4.616ZM36.831 48.952c.36.043.618.37.576.73-.62 5.245-2.022 9.922-4.27 13.98a.657.657 0 0 1-1.15-.638c2.152-3.882 3.51-8.39 4.115-13.496a.657.657 0 0 1 .73-.576Z"
  }), React78.createElement("path", {
    d: "M36.696 30.656c-.456-2.435-2.545-4.297-5.081-4.297-3.435 0-5.845 3.462-4.996 6.683 1.437 5.686 1.673 11.166.7 16.444v.003c-.845 4.739-2.465 9.002-4.677 12.614a.657.657 0 0 0 1.121.686c2.302-3.76 3.978-8.178 4.85-13.067 1.01-5.482.759-11.154-.72-17.005l-.002-.007c-.637-2.41 1.138-5.037 3.724-5.037 1.865 0 3.44 1.373 3.788 3.22.957 5.548 1.455 10.693 1.1 15.123a.657.657 0 1 0 1.31.105c.368-4.592-.151-9.863-1.115-15.456l-.002-.01ZM29.654 59.117c.323.166.45.562.284.885l-1.741 3.389a.657.657 0 1 1-1.17-.601L28.77 59.4a.657.657 0 0 1 .885-.284Z"
  }), React78.createElement("path", {
    d: "M32.103 31.29a.657.657 0 1 0-1.28.3c2.217 9.433 1.913 17.717-.787 24.773a.657.657 0 1 0 1.228.47c2.814-7.358 3.1-15.919.84-25.544Z"
  }))), _defs8 || (_defs8 = React78.createElement("defs", null, React78.createElement("clipPath", {
    id: "iphone-touch-id_svg__a"
  }, React78.createElement("path", {
    fill: "#fff",
    d: "M0 0h64v64H0z"
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyDeviceIcon/PasskeyDeviceIcon.js
var import_react_dom171 = __toESM(require_react_dom(), 1);
var import_qrcode167 = __toESM(require_browser(), 1);
var PasskeyDeviceIcon = ({ defaultIcon, className, size = "small" }) => {
  let IdIcon = defaultIcon ? defaultIcon : null;
  if (isIPhone()) {
    if (isIPhone8OrEarlier()) {
      IdIcon = (0, import_jsx_runtime294.jsx)(SvgIphoneTouchId, { "data-testid": "iphone-8-icon" });
    } else {
      IdIcon = (0, import_jsx_runtime294.jsx)(SvgFaceId, { "data-testid": "iphone-icon" });
    }
  }
  if (isAndroid()) {
    const androidVersion = getAndroidVersion();
    if (androidVersion && androidVersion >= 9) {
      IdIcon = (0, import_jsx_runtime294.jsx)(SvgAndroidTouchId, { "data-testid": "android-9-icon" });
    } else {
      IdIcon = (0, import_jsx_runtime294.jsx)(SvgAndroidFaceId, { "data-testid": "android-icon" });
    }
  }
  if (!IdIcon) {
    return (0, import_jsx_runtime294.jsx)(import_jsx_runtime294.Fragment, {});
  }
  return (0, import_jsx_runtime294.jsx)(Icon, { className, size, children: IdIcon });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/EmbeddedAuthChoice/AuthChoiceInfo/AuthChoiceInfo.js
var import_jsx_runtime295 = __toESM(require_jsx_runtime(), 1);
var import_react327 = __toESM(require_react(), 1);
var import_react_dom172 = __toESM(require_react_dom(), 1);
var import_qrcode168 = __toESM(require_browser(), 1);
var AuthChoiceInfo = ({ choice, variant = "default" }) => {
  const { t: t2 } = useTranslation();
  const authChoiceInfoMap = {
    passkey: {
      default: [
        {
          description: "dyn_embedded_authenticator.passkey.auth_info.convinience.description",
          title: "dyn_embedded_authenticator.passkey.auth_info.convinience.title"
        },
        {
          description: "dyn_embedded_authenticator.passkey.auth_info.security.description",
          title: "dyn_embedded_authenticator.passkey.auth_info.security.title"
        }
      ],
      noEmailSignup: [
        {
          description: "dyn_embedded_authenticator.passkey.no_email_auth_info.convinience.description",
          title: "dyn_embedded_authenticator.passkey.no_email_auth_info.convinience.title"
        },
        {
          description: "dyn_embedded_authenticator.passkey.no_email_auth_info.security.description",
          title: "dyn_embedded_authenticator.passkey.no_email_auth_info.security.title"
        }
      ]
    }
  };
  return (0, import_jsx_runtime295.jsx)("div", { className: "auth-choice-info", children: authChoiceInfoMap[choice][variant].map((info, index) => (0, import_jsx_runtime295.jsxs)("div", { className: "auth-choice-info__container-item", children: [(0, import_jsx_runtime295.jsx)("div", { className: "auth-choice-info__container-icon", children: (0, import_jsx_runtime295.jsx)(Icon, { size: "medium", className: "auth-choice-info__icon", children: (0, import_jsx_runtime295.jsx)(SvgAdd, {}) }) }), (0, import_jsx_runtime295.jsxs)("div", { className: "action-card__item-title", children: [(0, import_jsx_runtime295.jsx)(Typography, { variant: "body_normal", weight: "regular", copykey: info.title, children: t2(info.title) }), (0, import_jsx_runtime295.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", copykey: info.description, children: t2(info.description) })] })] }, `authChoiceInfo_${index}`)) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyIntroView/PasskeyIntroView.js
var PasskeyIntroView = ({ chains }) => {
  var _a;
  const { walletConnectorOptions, environmentId, handleLogOut, user, userWithMissingInfo } = useInternalDynamicContext();
  const isEmailRecoveryFlow = ((_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.length) === 1 && !getUserVerifiedCredentialType(user, JwtVerifiedCredentialFormatEnum.Email);
  const { t: t2 } = useTranslation();
  const [createWalletWithAuthenticator, setCreateWalletWithAuthenticator] = (0, import_react328.useState)(false);
  (0, import_react328.useEffect)(() => StorageService.removeItem(LAST_USED_WALLET), []);
  const { createDynamicEmbeddedWalletMutation, isLoading, error } = useCreateDynamicEmbeddedWalletMutation();
  const handleCreateEmbeddedWallet = (withAuthenticator) => __awaiter(void 0, void 0, void 0, function* () {
    if (!user && !userWithMissingInfo) {
      throw new Error("User is not logged in");
    }
    setCreateWalletWithAuthenticator(withAuthenticator);
    yield createDynamicEmbeddedWalletMutation({
      chains,
      environmentId,
      walletConnectorOptions,
      withAuthenticator
    });
  });
  const errorText = (0, import_react328.useMemo)(() => {
    if (!error) {
      return void 0;
    }
    if (error instanceof DynamicError) {
      return error.message;
    }
    return getProperErrorMessage(error);
  }, [error]);
  return (0, import_jsx_runtime296.jsxs)(import_jsx_runtime296.Fragment, { children: [(0, import_jsx_runtime296.jsx)(ModalHeader, { children: (0, import_jsx_runtime296.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", copykey: "dyn_passkey_intro.title", children: t2("dyn_passkey_intro.title") }) }), (0, import_jsx_runtime296.jsxs)("div", { className: "passkey-intro-view", children: [(0, import_jsx_runtime296.jsx)("div", { className: "passkey-intro-view__header", children: (0, import_jsx_runtime296.jsx)(SvgPasskeyIntro2, {}) }), (0, import_jsx_runtime296.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "passkey-intro-view__subtitle", copykey: "dyn_passkey_intro.subtitle", children: t2("dyn_passkey_intro.subtitle") }), errorText && (0, import_jsx_runtime296.jsx)(ErrorContainer, { children: errorText }), (0, import_jsx_runtime296.jsx)(AuthChoiceInfo, { choice: "passkey", variant: isEmailRecoveryFlow ? "noEmailSignup" : "default" }), (0, import_jsx_runtime296.jsxs)("div", { className: "passkey-intro-view__actions", children: [(0, import_jsx_runtime296.jsx)(TypographyButton, { buttonVariant: "brand-primary", buttonPadding: "large", onClick: () => handleCreateEmbeddedWallet(true), dataTestId: "setup-passkey-button", loading: isLoading && createWalletWithAuthenticator, disabled: isLoading, typographyProps: {
    color: "inherit"
  }, children: (0, import_jsx_runtime296.jsxs)("div", { className: "passkey-intro-view__inline-button", children: [(0, import_jsx_runtime296.jsx)(PasskeyDeviceIcon, { size: "small" }), (0, import_jsx_runtime296.jsx)(Typography, { copykey: "dyn_passkey_intro.button", children: t2("dyn_passkey_intro.button") })] }) }), (0, import_jsx_runtime296.jsx)(TextButton, { "data-testid": "setup-passkey-logout-button", className: "passkey-intro-view__log-out", onClick: handleLogOut, copykey: "dyn_passkey_intro.button_logout", children: t2("dyn_passkey_intro.button_logout") })] })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/AddRecoveryEmail/AddRecoveryEmail.js
var import_jsx_runtime297 = __toESM(require_jsx_runtime(), 1);
var import_react329 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/passkey-intro-icon.js
var React79 = __toESM(require_react(), 1);
var _circle3;
var _path63;
var _g12;
var _defs9;
var _excluded65 = ["title", "titleId"];
function _extends72() {
  _extends72 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends72.apply(this, arguments);
}
function _objectWithoutProperties65(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose68(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose68(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgPasskeyIntroIcon = function SvgPasskeyIntroIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties65(_ref2, _excluded65);
  return React79.createElement("svg", _extends72({
    width: 206,
    height: 206,
    viewBox: "0 0 206 206",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React79.createElement("title", {
    id: titleId
  }, title2) : null, _circle3 || (_circle3 = React79.createElement("circle", {
    cx: 103,
    cy: 103,
    r: 103,
    fill: "url(#passkey-intro-icon_svg__a)",
    fillOpacity: 0.12
  })), _path63 || (_path63 = React79.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M101.59 42.066a6.37 6.37 0 0 1 1.822 0c.696.1 1.343.345 1.858.54l.138.051 17.072 6.402.416.156c1.967.734 3.695 1.38 5.025 2.551a9.553 9.553 0 0 1 2.612 3.77c.631 1.657.628 3.501.625 5.6v15.672c0 9-4.895 16.504-10.187 22.016-5.326 5.55-11.421 9.469-14.643 11.349l-.131.077c-.588.345-1.351.793-2.361 1.01a6.78 6.78 0 0 1-2.67 0c-1.01-.217-1.774-.665-2.362-1.01l-.13-.077c-3.223-1.88-9.317-5.799-14.644-11.349-5.291-5.512-10.186-13.015-10.186-22.016V61.137c-.003-2.1-.006-3.944.625-5.601a9.553 9.553 0 0 1 2.612-3.77c1.33-1.172 3.058-1.817 5.025-2.551l.416-.156 17.072-6.402.138-.052c.514-.194 1.162-.439 1.858-.54ZM94.382 69.11v-4.037a8.073 8.073 0 1 1 16.147 0v4.036a13.434 13.434 0 0 1 5.383 10.766c0 7.431-6.024 13.456-13.456 13.456C95.025 93.33 89 87.306 89 79.875c0-4.402 2.114-8.31 5.382-10.765Zm13.147-1.702v-2.335a5.073 5.073 0 1 0-10.147 0v2.336a13.414 13.414 0 0 1 5.074-.99c1.795 0 3.508.352 5.073.99ZM106 77.5a3.5 3.5 0 0 1-2 3.163V83.5a1.5 1.5 0 1 1-3 0v-2.837a3.5 3.5 0 1 1 5-3.163ZM126 22a4 4 0 0 1 4-4h45a4 4 0 0 1 4 4v10a4 4 0 0 1-4 4h-45a4 4 0 0 1-4-4V22Zm15 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm7 3a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm13-3a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm9 0a2 2 0 1 1-4 0 2 2 0 0 1 4 0Zm1 0a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z",
    fill: "#4779FF"
  })), _g12 || (_g12 = React79.createElement("g", {
    clipPath: "url(#passkey-intro-icon_svg__b)"
  }, React79.createElement("g", {
    clipPath: "url(#passkey-intro-icon_svg__c)"
  }, React79.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M59.731 54.983a15.068 15.068 0 0 0 1.087-10.69C58.656 36.226 50.362 31.438 42.294 33.6c-8.069 2.162-12.857 10.455-10.695 18.524a15.068 15.068 0 0 0 6.288 8.715c1.864-4.039 6.77-6.622 9.948-7.473 3.179-.852 8.204-1.183 11.896 1.618Zm-19.98-8.96a5.672 5.672 0 1 1 10.957-2.935 5.672 5.672 0 0 1-10.957 2.936Z",
    fill: "#4779FF"
  })))), _defs9 || (_defs9 = React79.createElement("defs", null, React79.createElement("clipPath", {
    id: "passkey-intro-icon_svg__b"
  }, React79.createElement("path", {
    fill: "#fff",
    transform: "rotate(-15 151.778 -80.474)",
    d: "M0 0h33v33H0z"
  })), React79.createElement("clipPath", {
    id: "passkey-intro-icon_svg__c"
  }, React79.createElement("rect", {
    x: 27.684,
    y: 37.513,
    width: 30.25,
    height: 30.25,
    rx: 15.125,
    transform: "rotate(-15 27.684 37.513)",
    fill: "#fff"
  })), React79.createElement("linearGradient", {
    id: "passkey-intro-icon_svg__a",
    x1: 103,
    y1: 0,
    x2: 103,
    y2: 105.711,
    gradientUnits: "userSpaceOnUse"
  }, React79.createElement("stop", {
    stopColor: "#4779FF"
  }), React79.createElement("stop", {
    offset: 1,
    stopColor: "#4779FF",
    stopOpacity: 0
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/AddRecoveryEmail/AddRecoveryEmail.js
var import_react_dom174 = __toESM(require_react_dom(), 1);
var import_qrcode170 = __toESM(require_browser(), 1);
var AddRecoveryEmail = ({ canSkipAddingEmail = true, shouldInitRecovery = false, authenticatorType, currentAction, isFromEmailVerification = false }) => {
  const { user, setShowAuthFlow } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const { addRecoveryEmail, initPasskeyRecoveryProcess } = usePasskeyRecovery();
  const [showSuccessMessage, setShowSuccessMessage] = (0, import_react329.useState)(false);
  const [error, setError] = (0, import_react329.useState)(void 0);
  useEffectOnce(() => {
    dynamicEvents.once("embeddedWalletRecoveryEmailCompleted", () => __awaiter(void 0, void 0, void 0, function* () {
      setShowSuccessMessage(true);
      setError(void 0);
      if (!shouldInitRecovery) {
        setTimeout(() => {
          setShowAuthFlow(false, {
            ignoreIfIsEmbeddedWidget: false,
            performMultiWalletChecks: false
          });
        }, 5e3);
        return;
      }
      return initPasskeyRecoveryProcess(authenticatorType, currentAction);
    }));
    dynamicEvents.once("embeddedWalletRecoveryEmailFailed", (error2) => __awaiter(void 0, void 0, void 0, function* () {
      setError(error2);
    }));
  });
  const { mutate: handleEmailSubmit, isLoading } = useMutation((emailInput) => __awaiter(void 0, void 0, void 0, function* () {
    yield addRecoveryEmail(emailInput);
  }));
  const handleSkip = () => {
    setShowAuthFlow(false);
  };
  const handleEmailSubmitError = () => {
    if (!error) {
      return void 0;
    }
    if (error instanceof DynamicError) {
      return error.message;
    }
    return getProperErrorMessage(error);
  };
  const closeButton = canSkipAddingEmail && (0, import_jsx_runtime297.jsx)(IconButton, { onClick: handleSkip, type: "button", "data-testid": "add-recovery-email-close-button", children: (0, import_jsx_runtime297.jsx)(SvgClose, {}) });
  return (0, import_jsx_runtime297.jsxs)(import_jsx_runtime297.Fragment, { children: [(0, import_jsx_runtime297.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime297.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "passkey-recovery-heading", className: "header__typography", copykey: "dyn_passkey_recovery.add_email.title", children: t2("dyn_passkey_recovery.add_email.title") }) }), (0, import_jsx_runtime297.jsxs)("div", { className: "passkey-recovery-view", children: [(0, import_jsx_runtime297.jsx)("div", { className: "passkey-recovery-view__header", children: (0, import_jsx_runtime297.jsx)(SvgPasskeyIntroIcon, {}) }), showSuccessMessage && (0, import_jsx_runtime297.jsx)(ErrorContainer, { variant: "success", copykey: "dyn_passkey_recovery.add_email.success_message", children: t2("dyn_passkey_recovery.add_email.success_message") }), (0, import_jsx_runtime297.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "passkey-recovery-view__subtitle", copykey: "dyn_passkey_recovery.add_email.description", children: t2("dyn_passkey_recovery.add_email.description") }), error !== void 0 && (0, import_jsx_runtime297.jsx)(ErrorContainer, { children: handleEmailSubmitError() }), (0, import_jsx_runtime297.jsx)("div", { className: "passkey-recovery-view__form", children: (0, import_jsx_runtime297.jsx)(EmailForm, { onSubmit: handleEmailSubmit, currentEmail: user === null || user === void 0 ? void 0 : user.email, isLoading: (isLoading || isFromEmailVerification) && !error, buttonCopyKey: "dyn_passkey_recovery.add_email.confirm_button", isDisabled: isFromEmailVerification && !error && !showSuccessMessage }) })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/BundleValidation/PasskeyBundleRecovery.js
var import_jsx_runtime298 = __toESM(require_jsx_runtime(), 1);
var import_react330 = __toESM(require_react(), 1);
var import_react_dom175 = __toESM(require_react_dom(), 1);
var import_qrcode171 = __toESM(require_browser(), 1);
var bundleRegex = new RegExp(/^([A-Za-z0-9\s_+@\.-]+)$/);
var PasskeyBundleRecovery = ({ authenticatorType, currentAction }) => {
  const { primaryWallet, environmentId, user, setShowAuthFlow } = useInternalDynamicContext();
  const { isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet();
  const { getEOAWallet } = useSmartWallets();
  const [bundleInput, setBundleInput] = (0, import_react330.useState)("");
  const [resendingCode, setResendingCode] = (0, import_react330.useState)(false);
  const [isValid, setIsValid] = (0, import_react330.useState)(false);
  const { t: t2 } = useTranslation();
  const { setView } = useViewContext();
  const { mutate, isLoading, error } = useMutation((bundleInput2) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const wallet = (_a = primaryWallet && getEOAWallet(primaryWallet)) !== null && _a !== void 0 ? _a : primaryWallet;
    yield passkeyRecoveryBundleValidation({
      bundleInput: bundleInput2,
      user,
      wallet
    });
    setIsValid(true);
    authenticatorType === "email" && dynamicEvents.emit("passkeyRecoveryCompleted", primaryWallet);
    setTimeout(() => {
      if (authenticatorType === "passkey") {
        return setView("passkey-recovery-complete");
      }
      if (currentAction === "reveal") {
        return;
      }
      setShowAuthFlow(false);
    }, 2e3);
  }));
  const isValidBundle = (bundle) => {
    if (!(bundle === null || bundle === void 0 ? void 0 : bundle.length)) {
      return false;
    }
    if (bundle.length < 100 || bundle.length >= 256) {
      return false;
    }
    if (!bundleRegex.test(bundle)) {
      return false;
    }
    return true;
  };
  const handleBundleChanged = (event) => {
    var _a;
    const bundle = (_a = event.target.value) === null || _a === void 0 ? void 0 : _a.trim();
    setBundleInput(bundle);
    if (!isValidBundle(bundle)) {
      return;
    }
    mutate(bundle);
  };
  const handleResentEmail = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
      setResendingCode(true);
      yield resentRecoveryEmail({
        authenticatorType,
        environmentId,
        user,
        wallet: primaryWallet
      });
    } catch (err) {
      logger2.error("Failed to complete passkey recovery", err);
    } finally {
      setResendingCode(false);
    }
  });
  const errorText = (0, import_react330.useMemo)(() => {
    if (!error) {
      return void 0;
    }
    if (error instanceof DynamicError) {
      return error.message;
    }
    return getProperErrorMessage(error);
  }, [error]);
  const emailIcon = (0, import_jsx_runtime298.jsx)(Icon, { color: "brand-primary", children: (0, import_jsx_runtime298.jsx)(SignInWithEmailIcon, {}) });
  const translationKey = isTurnkeyWalletWithoutAuthenticator ? "dyn_passkey_secure_modal" : "dyn_passkey_recovery";
  const closeButton = (0, import_jsx_runtime298.jsx)(IconButton, { type: "button", onClick: () => {
    setShowAuthFlow(false, { emitCancelAuth: true });
    dynamicEvents.emit("passkeyRecoveryFailed", new DynamicError("Validation request cancelled"));
  }, "data-testid": "close-button", children: (0, import_jsx_runtime298.jsx)(SvgClose, {}) });
  return (0, import_jsx_runtime298.jsxs)(import_jsx_runtime298.Fragment, { children: [(0, import_jsx_runtime298.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime298.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", copykey: `${translationKey}.code.title`, children: t2(`${translationKey}.code.title`) }) }), (0, import_jsx_runtime298.jsxs)("div", { className: "passkey-recovery-view", children: [!error && !isValid ? (0, import_jsx_runtime298.jsx)(IconWithSpinner, { Icon: emailIcon, isSpinning: !error && !isValid, iconSize: 96 }) : (0, import_jsx_runtime298.jsx)(IconWithStatus, { Icon: SignInWithEmailIcon, iconSize: 64, variant: error ? "red" : "green", InnerIcon: error ? SvgError : SvgCheck }), (0, import_jsx_runtime298.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "passkey-recovery-view__subtitle", copykey: `${translationKey}.code.description`, children: t2(`${translationKey}.code.description`, { email: user === null || user === void 0 ? void 0 : user.email }) }), (0, import_jsx_runtime298.jsx)("div", { className: "passkey-recovery-view__actions", children: (0, import_jsx_runtime298.jsx)(Input, { id: "passkey-recovery-bundle", "data-testid": "passkey-recovery-bundle-input", value: bundleInput, onChange: handleBundleChanged, label: t2(`${translationKey}.code.input_label`), disabled: isLoading || resendingCode, error: Boolean(error), className: isValid ? "passkey-recovery-view__input-valid" : "", autoFocus: true, message: errorText }) }), (0, import_jsx_runtime298.jsxs)("div", { className: "passkey-recovery-view__resend-code", children: [(0, import_jsx_runtime298.jsx)(Typography, { color: "secondary", variant: "body_small", copykey: `${translationKey}.code.resend.text`, children: t2(`${translationKey}.code.resend.text`) }), (0, import_jsx_runtime298.jsx)(Typography, { variant: "body_small", color: "link", copykey: `${translationKey}.code.resend.button`, children: (0, import_jsx_runtime298.jsx)(TextButton, { "data-testid": "resend-email-button", onClick: handleResentEmail, disabled: resendingCode || isLoading || bundleInput.length > 0 && !error, children: t2(`${translationKey}.code.resend.button`) }) })] })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/CompleteRecovery/PasskeyCompleteRecovery.js
var import_jsx_runtime300 = __toESM(require_jsx_runtime(), 1);
var import_react332 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/NeedHelpSection/NeedHelpSection.js
var import_jsx_runtime299 = __toESM(require_jsx_runtime(), 1);
var import_react331 = __toESM(require_react(), 1);
var import_react_dom176 = __toESM(require_react_dom(), 1);
var import_qrcode172 = __toESM(require_browser(), 1);
var NeedHelpSection = ({ isRecoveryFlow = false }) => {
  var _a, _b, _c, _d, _e2, _f;
  const { projectSettings, primaryWallet } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const { initPasskeyRecoveryProcess } = usePasskeyRecovery();
  const supportEmail = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general) === null || _a === void 0 ? void 0 : _a.supportEmail;
  const supportUrl = ((_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general) === null || _b === void 0 ? void 0 : _b.supportUrls) && ((_c = Object.values(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general.supportUrls)) === null || _c === void 0 ? void 0 : _c[0]);
  const isRecoveryEnabled = !isRecoveryFlow && ((_d = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) === null || _d === void 0 ? void 0 : _d.find((p) => p.provider === ProviderEnum.Turnkey && p.enabledAt)) && Boolean((_f = (_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _e2 === void 0 ? void 0 : _e2.embeddedWallets) === null || _f === void 0 ? void 0 : _f.emailRecoveryEnabled);
  const { getEOAWallet } = useSmartWallets();
  const eoaWallet = primaryWallet && getEOAWallet(primaryWallet);
  const isSessionKeyCompatible = primaryWallet && isSessionKeyCompatibleWallet(primaryWallet) || eoaWallet && isSessionKeyCompatibleWallet(eoaWallet);
  const hasContactInfo = Boolean(supportEmail || supportUrl);
  const getSupportHelpSession = () => {
    if (!hasContactInfo) {
      return null;
    }
    return (0, import_jsx_runtime299.jsxs)("div", { className: "need-help-section__links", children: [supportUrl && (0, import_jsx_runtime299.jsx)(Typography, { variant: "body_small", color: "link", copykey: "dyn_need_help_section.contact_support", children: (0, import_jsx_runtime299.jsx)("a", { href: supportUrl, rel: "noreferrer", target: "_blank", children: t2("dyn_need_help_section.contact_support") }) }), supportEmail && (0, import_jsx_runtime299.jsx)(Typography, { variant: "body_small", color: "link", children: (0, import_jsx_runtime299.jsx)("a", { href: `mailto:${supportEmail}`, children: supportEmail }) })] });
  };
  const getPasskeyRecoverySession = () => {
    if (!isRecoveryEnabled) {
      return null;
    }
    const recoveryText = t2("dyn_need_help_section.help_button");
    const finalRecoveryText = hasContactInfo ? recoveryText : recoveryText.slice(0, 1).toUpperCase() + recoveryText.slice(1);
    return (0, import_jsx_runtime299.jsxs)(import_jsx_runtime299.Fragment, { children: [hasContactInfo && (0, import_jsx_runtime299.jsx)(Typography, { color: "secondary", variant: "body_small", copykey: "dyn_need_help_section.divider", children: t2("dyn_need_help_section.divider") }), (0, import_jsx_runtime299.jsx)(TextButton, { copykey: "dyn_need_help_section.help_button", className: classNames("need-help-section__helper-link"), onClick: () => initPasskeyRecoveryProcess(void 0, "helpSession"), children: finalRecoveryText })] });
  };
  if (!hasContactInfo && (!isRecoveryEnabled || isSessionKeyCompatible)) {
    return null;
  }
  return (0, import_jsx_runtime299.jsxs)("div", { className: "need-help-section", children: [(0, import_jsx_runtime299.jsx)(Typography, { color: "secondary", variant: "body_small", copykey: "dyn_need_help_section.info", children: t2("dyn_need_help_section.info") }), getSupportHelpSession(), getPasskeyRecoverySession()] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/CompleteRecovery/PasskeyCompleteRecovery.js
var import_react_dom177 = __toESM(require_react_dom(), 1);
var import_qrcode173 = __toESM(require_browser(), 1);
var PasskeyCompleteRecovery = () => {
  const { primaryWallet, environmentId, user, setShowAuthFlow, setPasskeySuccessPopup } = useInternalDynamicContext();
  const { isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet();
  const { getEOAWallet } = useSmartWallets();
  const { t: t2 } = useTranslation();
  const { mutate: completeRecovery, isLoading, error } = useMutation(() => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const wallet = (_a = primaryWallet && getEOAWallet(primaryWallet)) !== null && _a !== void 0 ? _a : primaryWallet;
    const updatedUser = yield completePasskeyRecovery2({
      environmentId,
      user,
      wallet
    });
    if (!updatedUser) {
      throw new DynamicError("Error completing passkey recovery");
    }
    dynamicEvents.emit("passkeyRecoveryCompleted", primaryWallet);
    setShowAuthFlow(false);
    setPasskeySuccessPopup(PasskeySuccessEnum.CREATED);
  }), {
    onFailure: (err) => {
      logger2.error("Failed to init passkey recovery", err);
      dynamicEvents.emit("passkeyRecoveryFailed", err);
    }
  });
  const errorText = (0, import_react332.useMemo)(() => {
    if (!error) {
      return void 0;
    }
    if (error instanceof DynamicError) {
      return error.message;
    }
    return getProperErrorMessage(error);
  }, [error]);
  const translationKey = isTurnkeyWalletWithoutAuthenticator ? "dyn_passkey_secure_modal" : "dyn_passkey_recovery";
  return (0, import_jsx_runtime300.jsxs)("div", { className: "passkey-recovery-view", children: [(0, import_jsx_runtime300.jsx)("div", { className: "passkey-recovery-view__header", children: (0, import_jsx_runtime300.jsx)(SvgPasskeyIntroIcon, {}) }), (0, import_jsx_runtime300.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "passkey-recovery-view__subtitle", children: t2(`${translationKey}.complete.description`) }), errorText && (0, import_jsx_runtime300.jsx)(ErrorContainer, { children: errorText }), (0, import_jsx_runtime300.jsx)("div", { className: "passkey-recovery-view__actions", children: (0, import_jsx_runtime300.jsx)(TypographyButton, { buttonVariant: "brand-primary", buttonPadding: "large", dataTestId: "passkey-recovery-complete-button", onClick: () => completeRecovery(), disabled: isLoading, showInternalLoading: false, typographyProps: {
    color: "inherit"
  }, children: (0, import_jsx_runtime300.jsxs)("div", { className: "passkey-recovery-view__inline-button", children: [(0, import_jsx_runtime300.jsx)(PasskeyDeviceIcon, { size: "small" }), (0, import_jsx_runtime300.jsx)(Typography, { children: t2(`${translationKey}.complete.complete_button`) })] }) }) }), (0, import_jsx_runtime300.jsx)(NeedHelpSection, { isRecoveryFlow: true })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyRecovery/InitRecovery/PasskeyInitRecovery.js
var import_jsx_runtime301 = __toESM(require_jsx_runtime(), 1);
var import_react333 = __toESM(require_react(), 1);
var import_react_dom178 = __toESM(require_react_dom(), 1);
var import_qrcode174 = __toESM(require_browser(), 1);
var PasskeyInitRecovery = ({ authenticatorType }) => {
  const { setShowAuthFlow } = useInternalDynamicContext();
  const { isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet();
  const { initAuthMethod, isLoading, error } = useInitEmbeddedWalletAuthMethod();
  const { createRootElement } = useElementById();
  const iframeContainerRef = createRootElement(iframeContainerId2);
  const { t: t2 } = useTranslation();
  const errorText = (0, import_react333.useMemo)(() => {
    if (!error) {
      return void 0;
    }
    if (error instanceof DynamicError) {
      return error.message;
    }
    return "Something went wrong.";
  }, [error]);
  const EmailIcon2 = (0, import_jsx_runtime301.jsx)(Icon, { color: "brand-primary", children: (0, import_jsx_runtime301.jsx)(SvgSignInWithEmail, {}) });
  const translationKey = isTurnkeyWalletWithoutAuthenticator ? "dyn_passkey_secure_modal" : "dyn_passkey_recovery";
  const closeButton = (0, import_jsx_runtime301.jsx)(IconButton, { type: "button", onClick: () => setShowAuthFlow(false, { emitCancelAuth: true }), "data-testid": "close-button", children: (0, import_jsx_runtime301.jsx)(SvgClose, {}) });
  return (0, import_jsx_runtime301.jsxs)(import_jsx_runtime301.Fragment, { children: [(0, import_jsx_runtime301.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime301.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", children: t2(`${translationKey}.start.title`) }) }), (0, import_jsx_runtime301.jsxs)("div", { className: "passkey-recovery-view", children: [(0, import_jsx_runtime301.jsx)(IconWithSpinner, { Icon: EmailIcon2, isSpinning: isLoading, iconSize: 96 }), (0, import_jsx_runtime301.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "passkey-recovery-view__subtitle", children: t2(`${translationKey}.start.description`) }), errorText && (0, import_jsx_runtime301.jsx)(ErrorContainer, { children: errorText }), (0, import_jsx_runtime301.jsx)("div", { className: "passkey-recovery-view__actions", children: (0, import_jsx_runtime301.jsx)(TypographyButton, { buttonPadding: "large", dataTestId: "passkey-recovery-button", onClick: () => initAuthMethod({
    authenticatorType,
    iframeContainer: iframeContainerRef.current
  }), disabled: isLoading, showInternalLoading: false, children: (0, import_jsx_runtime301.jsx)("div", { children: (0, import_jsx_runtime301.jsx)(Typography, { children: t2(`${translationKey}.start.start_button`) }) }) }) }), (0, import_jsx_runtime301.jsx)(NeedHelpSection, { isRecoveryFlow: true })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/RenamePasskeyView/RenamePasskeyView.js
var import_jsx_runtime302 = __toESM(require_jsx_runtime(), 1);
var import_react334 = __toESM(require_react(), 1);
var import_react_dom179 = __toESM(require_react_dom(), 1);
var import_qrcode175 = __toESM(require_browser(), 1);
var RenamePasskeyView = () => {
  var _a;
  const { passkey, setPasskey, passkeyIcon, passkeyEdited, setPasskeyEdited } = usePasskeyContext();
  const { t: t2 } = useTranslation();
  const { environmentId, setShowAuthFlow, setPasskeySuccessPopup } = useInternalDynamicContext();
  const [error, setError] = (0, import_react334.useState)(false);
  const handleUpdatePasskey = (alias) => __awaiter(void 0, void 0, void 0, function* () {
    if (alias && (passkey === null || passkey === void 0 ? void 0 : passkey.id)) {
      const newPasskey = yield updateUserPasskey({
        alias: alias.trim(),
        environmentId,
        id: passkey.id
      });
      if (newPasskey) {
        setPasskey(newPasskey);
        setPasskeyEdited(!passkeyEdited);
        setShowAuthFlow(false);
        setPasskeySuccessPopup(PasskeySuccessEnum.EDITED);
      } else
        setError(true);
    } else
      setError(true);
  });
  const backButton = (0, import_jsx_runtime302.jsx)(IconButton, { type: "button", onClick: () => {
    setShowAuthFlow(false);
  }, "data-testid": "back-button", children: (0, import_jsx_runtime302.jsx)(SvgChevronLeft, {}) });
  const closeButton = (0, import_jsx_runtime302.jsx)(IconButton, { onClick: () => setShowAuthFlow(false), type: "button", id: "close-button", "data-testid": "close-button", children: (0, import_jsx_runtime302.jsx)(SvgClose, {}) });
  if (passkey) {
    return (0, import_jsx_runtime302.jsxs)("div", { className: "edit-passkeys-widget-view", children: [(0, import_jsx_runtime302.jsx)(ModalHeader, { leading: backButton, trailing: closeButton }), (0, import_jsx_runtime302.jsx)("div", { className: "edit-passkeys-widget-view__icon", children: passkeyIcon }), (0, import_jsx_runtime302.jsx)(Typography, { as: "h1", variant: "title", color: "primary", className: "edit-passkeys-widget-view__title", copykey: "dyn_rename_passkeys.title", children: t2("dyn_rename_passkeys.title") }), (0, import_jsx_runtime302.jsx)(Formik, { initialValues: { alias: (_a = passkey.alias) !== null && _a !== void 0 ? _a : "" }, onSubmit: (values) => {
      handleUpdatePasskey(values.alias);
    }, children: ({ values }) => (0, import_jsx_runtime302.jsxs)(Form, { className: "edit-passkeys-widget-view__body", children: [(0, import_jsx_runtime302.jsx)(Field, { "data-testid": "input-field", name: "alias", type: "text", label: t2("dyn_rename_passkeys.input_label"), copykey: "dyn_rename_passkeys.input_label", className: "edit-passkeys-widget-view__input", as: Input, error, maxLength: 32 }), (0, import_jsx_runtime302.jsx)(TypographyButton, { type: "submit", className: "edit-passkeys-widget-view__body", buttonPadding: "large", disabled: !values.alias, copykey: "dyn_rename_passkeys.save", children: t2("dyn_rename_passkeys.save") }), error && (0, import_jsx_runtime302.jsx)(Typography, { as: "h1", variant: "body_small", color: "error-1", copykey: "dyn_rename_passkeys.error", children: t2("dyn_rename_passkeys.error") })] }) })] });
  }
  return (0, import_jsx_runtime302.jsx)(Typography, { as: "h1", variant: "title", color: "primary", className: "edit-passkeys-widget-view__title", children: t2("dyn_rename_passkeys.not_found") });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/EmbeddedAuthChoice/EmbeddedAuthChoice.js
var import_jsx_runtime305 = __toESM(require_jsx_runtime(), 1);
var import_react337 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/multiple-account-security.js
var React80 = __toESM(require_react(), 1);
var _g13;
var _defs10;
var _excluded66 = ["title", "titleId"];
function _extends73() {
  _extends73 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends73.apply(this, arguments);
}
function _objectWithoutProperties66(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose69(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose69(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgMultipleAccountSecurity = function SvgMultipleAccountSecurity2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties66(_ref2, _excluded66);
  return React80.createElement("svg", _extends73({
    width: 327,
    height: 112,
    viewBox: "0 0 327 112",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React80.createElement("title", {
    id: titleId
  }, title2) : null, _g13 || (_g13 = React80.createElement("g", {
    clipPath: "url(#multiple-account-security_svg__a)"
  }, React80.createElement("circle", {
    cx: 164,
    cy: 114,
    r: 114,
    fill: "url(#multiple-account-security_svg__b)",
    fillOpacity: 0.12
  }), React80.createElement("g", {
    clipPath: "url(#multiple-account-security_svg__c)"
  }, React80.createElement("g", {
    clipPath: "url(#multiple-account-security_svg__d)"
  }, React80.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M118.709 55.166a14.617 14.617 0 0 0 1.054-10.366c-2.097-7.824-10.139-12.467-17.963-10.371-7.824 2.096-12.468 10.139-10.371 17.963a14.612 14.612 0 0 0 6.097 8.451c1.808-3.916 6.565-6.42 9.647-7.247 3.083-.826 7.955-1.146 11.536 1.57Zm-19.375-8.688a5.5 5.5 0 1 1 10.625-2.848 5.5 5.5 0 0 1-10.625 2.848Z",
    fill: "#4779FF"
  }))), React80.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "m207.67 19.875-.767 2.862a9.86 9.86 0 0 0-5.861 6.61c-1.412 5.269 1.715 10.684 6.984 12.096 5.268 1.412 10.684-1.715 12.096-6.984a9.862 9.862 0 0 0-1.771-8.655l.767-2.861a5.926 5.926 0 0 0-11.448-3.068Zm9.321 2.498-.444 1.655a9.844 9.844 0 0 0-3.409-1.665 9.847 9.847 0 0 0-3.785-.262l.444-1.656a3.723 3.723 0 1 1 7.194 1.928Zm-3.445 8.52a2.57 2.57 0 0 1-2.019 1.862l-.539 2.011a1.1 1.1 0 1 1-2.127-.57l.539-2.01a2.569 2.569 0 1 1 4.146-1.294ZM164.943 32.064a6.216 6.216 0 0 0-1.779 0c-.681.098-1.313.337-1.816.527l-.135.05-16.68 6.256-.407.152c-1.922.718-3.61 1.348-4.909 2.493a9.336 9.336 0 0 0-2.553 3.683c-.616 1.62-.613 3.421-.61 5.473V66.01c0 8.793 4.783 16.125 9.953 21.51 5.204 5.422 11.159 9.252 14.307 11.089l.128.075c.574.337 1.32.775 2.307.987a6.619 6.619 0 0 0 2.609 0c.987-.212 1.733-.65 2.307-.987l.128-.075c3.148-1.837 9.103-5.667 14.307-11.088 5.17-5.386 9.953-12.718 9.953-21.511V50.698c.003-2.052.006-3.854-.611-5.473a9.333 9.333 0 0 0-2.552-3.683c-1.3-1.145-2.987-1.775-4.909-2.493l-.407-.152-16.68-6.255-.135-.05c-.503-.19-1.136-.43-1.816-.528Zm7.008 18.695c0-1.726-1.4-3.126-3.127-3.126h-14.069a6.253 6.253 0 0 0-6.153 5.133 6.234 6.234 0 0 1 4.589-2.007h18.76Zm1.562 3.127c3.454 0 6.253 2.8 6.253 6.253v12.506a6.253 6.253 0 0 1-6.253 6.254h-18.759a6.253 6.253 0 0 1-6.253-6.254V60.14a6.253 6.253 0 0 1 6.253-6.253h18.759Z",
    fill: "#4779FF"
  }))), _defs10 || (_defs10 = React80.createElement("defs", null, React80.createElement("clipPath", {
    id: "multiple-account-security_svg__a"
  }, React80.createElement("rect", {
    width: 327,
    height: 112,
    rx: 12,
    fill: "#fff"
  })), React80.createElement("clipPath", {
    id: "multiple-account-security_svg__c"
  }, React80.createElement("path", {
    fill: "#fff",
    transform: "rotate(-15 184.593 -307.976)",
    d: "M0 0h32v32H0z"
  })), React80.createElement("clipPath", {
    id: "multiple-account-security_svg__d"
  }, React80.createElement("rect", {
    x: 87.633,
    y: 38.225,
    width: 29.333,
    height: 29.333,
    rx: 14.667,
    transform: "rotate(-15 87.633 38.225)",
    fill: "#fff"
  })), React80.createElement("linearGradient", {
    id: "multiple-account-security_svg__b",
    x1: 164,
    y1: 0,
    x2: 164,
    y2: 93.5,
    gradientUnits: "userSpaceOnUse"
  }, React80.createElement("stop", {
    stopColor: "#4779FF"
  }), React80.createElement("stop", {
    offset: 1,
    stopColor: "#4779FF",
    stopOpacity: 0
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/passkey-account-security.js
var React81 = __toESM(require_react(), 1);
var _g14;
var _defs11;
var _excluded67 = ["title", "titleId"];
function _extends74() {
  _extends74 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends74.apply(this, arguments);
}
function _objectWithoutProperties67(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose70(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose70(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgPasskeyAccountSecurity = function SvgPasskeyAccountSecurity2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties67(_ref2, _excluded67);
  return React81.createElement("svg", _extends74({
    width: 327,
    height: 112,
    viewBox: "0 0 327 112",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React81.createElement("title", {
    id: titleId
  }, title2) : null, _g14 || (_g14 = React81.createElement("g", {
    clipPath: "url(#passkey-account-security_svg__a)"
  }, React81.createElement("circle", {
    cx: 164,
    cy: 114,
    r: 114,
    fill: "url(#passkey-account-security_svg__b)",
    fillOpacity: 0.12
  }), React81.createElement("g", {
    clipPath: "url(#passkey-account-security_svg__c)",
    fill: "#4779FF"
  }, React81.createElement("path", {
    d: "M106.009 34.681a2.666 2.666 0 0 1 3.266 1.886l-15.454 4.141a5.319 5.319 0 0 0-3.339 2.666 5.335 5.335 0 0 1 3.936-5.587l11.591-3.105ZM117.785 42.57a5.333 5.333 0 0 0-6.532-3.772l-15.455 4.141a5.333 5.333 0 0 0-3.771 6.532l2.76 10.303a5.334 5.334 0 0 0 6.533 3.771l15.454-4.14a5.333 5.333 0 0 0 3.772-6.533l-2.761-10.303Z"
  })), React81.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "m207.67 19.875-.767 2.862a9.86 9.86 0 0 0-5.861 6.61c-1.412 5.268 1.715 10.684 6.984 12.096 5.268 1.412 10.684-1.715 12.096-6.984a9.862 9.862 0 0 0-1.771-8.655l.767-2.861a5.926 5.926 0 0 0-11.448-3.068Zm9.321 2.498-.444 1.655a9.846 9.846 0 0 0-3.409-1.665 9.849 9.849 0 0 0-3.785-.262l.444-1.656a3.723 3.723 0 1 1 7.194 1.928Zm-3.445 8.52a2.57 2.57 0 0 1-2.019 1.862l-.539 2.011a1.1 1.1 0 1 1-2.127-.57l.539-2.01a2.569 2.569 0 1 1 4.146-1.294ZM164.943 32.064a6.216 6.216 0 0 0-1.779 0c-.681.098-1.313.337-1.816.527l-.135.05-16.68 6.256-.407.152c-1.922.718-3.61 1.348-4.909 2.493a9.336 9.336 0 0 0-2.553 3.683c-.616 1.62-.613 3.421-.61 5.473V66.01c0 8.793 4.783 16.125 9.953 21.51 5.204 5.422 11.159 9.252 14.307 11.089l.128.075c.574.337 1.32.775 2.307.987a6.619 6.619 0 0 0 2.609 0c.987-.212 1.733-.65 2.307-.987l.128-.075c3.148-1.837 9.103-5.667 14.307-11.088 5.17-5.386 9.953-12.718 9.953-21.511V50.698c.003-2.052.006-3.854-.611-5.473a9.333 9.333 0 0 0-2.552-3.683c-1.3-1.145-2.987-1.775-4.909-2.493l-.407-.152-16.68-6.255-.135-.05c-.503-.19-1.136-.43-1.816-.528Zm-1.34 14.592a15.89 15.89 0 0 0-7.978 2.135 1.772 1.772 0 1 0 1.776 3.069 12.34 12.34 0 0 1 6.202-1.66c6.853 0 12.408 5.556 12.408 12.409a44.34 44.34 0 0 1-1.688 12.156 1.772 1.772 0 1 0 3.41.97 47.883 47.883 0 0 0 1.823-13.126c0-8.81-7.142-15.953-15.953-15.953Zm-10.749 9.75a1.772 1.772 0 1 0-3.068-1.775 15.882 15.882 0 0 0-2.136 7.978c0 2.499-.573 4.86-1.594 6.96a1.772 1.772 0 1 0 3.189 1.55 19.43 19.43 0 0 0 1.95-8.51c0-2.263.605-4.38 1.659-6.203Zm10.749-2.66a8.863 8.863 0 0 0-8.863 8.863c0 4.516-1.29 8.704-3.518 12.246l1.5.944-1.5-.944a8.75 8.75 0 0 0-.12.196 1.773 1.773 0 1 0 3.048 1.81c.023-.04.048-.079.072-.118a26.434 26.434 0 0 0 4.063-14.134 5.318 5.318 0 0 1 10.636 0c0 1.722-.118 3.417-.344 5.077a1.772 1.772 0 1 0 3.512.48 41.12 41.12 0 0 0 .377-5.557 8.863 8.863 0 0 0-8.863-8.863Zm1.772 8.863a1.772 1.772 0 1 0-3.545 0c0 5.89-1.688 11.381-4.607 16.021a1.773 1.773 0 0 0 3.001 1.888 33.528 33.528 0 0 0 5.151-17.91Zm5.554 11.117a1.773 1.773 0 0 0-3.411-.965 37.01 37.01 0 0 1-2.523 6.502 1.771 1.771 0 1 0 3.169 1.588 40.517 40.517 0 0 0 2.765-7.124Z",
    fill: "#4779FF"
  }))), _defs11 || (_defs11 = React81.createElement("defs", null, React81.createElement("clipPath", {
    id: "passkey-account-security_svg__a"
  }, React81.createElement("rect", {
    width: 327,
    height: 112,
    rx: 12,
    fill: "#fff"
  })), React81.createElement("clipPath", {
    id: "passkey-account-security_svg__c"
  }, React81.createElement("path", {
    fill: "#fff",
    transform: "rotate(-15 184.593 -307.976)",
    d: "M0 0h32v32H0z"
  })), React81.createElement("linearGradient", {
    id: "passkey-account-security_svg__b",
    x1: 164,
    y1: 0,
    x2: 164,
    y2: 93.5,
    gradientUnits: "userSpaceOnUse"
  }, React81.createElement("stop", {
    stopColor: "#4779FF"
  }), React81.createElement("stop", {
    offset: 1,
    stopColor: "#4779FF",
    stopOpacity: 0
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/EmbeddedAuthChoice/EmbeddedAuthChoice.js
var import_react_dom182 = __toESM(require_react_dom(), 1);
var import_qrcode178 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/EmbeddedAuthChoiceCards/EmbeddedAuthChoiceCards.js
var import_jsx_runtime304 = __toESM(require_jsx_runtime(), 1);
var import_react336 = __toESM(require_react(), 1);
var import_react_dom181 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/EmbeddedAuthChoiceCards/ActionCard/ActionCard.js
var import_jsx_runtime303 = __toESM(require_jsx_runtime(), 1);
var import_react335 = __toESM(require_react(), 1);
var import_react_dom180 = __toESM(require_react_dom(), 1);
var import_qrcode176 = __toESM(require_browser(), 1);
var ActionCard = ({ titleKey, descriptionKey, description, LeadingIcon, action, badgeVariant, badgeKey, isLoading, dataTestId }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime303.jsxs)("button", { className: "action-card", onClick: action, "data-testid": dataTestId, children: [(0, import_jsx_runtime303.jsx)(Icon, { className: "action-card__icon", children: LeadingIcon }), (0, import_jsx_runtime303.jsxs)("div", { className: "action-card__content", children: [(0, import_jsx_runtime303.jsxs)("div", { className: "action-card__content__row", children: [(0, import_jsx_runtime303.jsx)(Typography, { variant: "body_normal", weight: "medium", copykey: titleKey, children: t2(titleKey) }), (0, import_jsx_runtime303.jsx)(Badge, { text: t2(badgeKey), className: classNames("action-card__content__row__badge", {
    "action-card__content__row__badge--primary": badgeVariant === "primary"
  }, {
    "action-card__content__row__badge--secondary": badgeVariant === "secondary"
  }), copykey: badgeKey })] }), (0, import_jsx_runtime303.jsx)(Typography, { variant: "body_small", color: "secondary", copykey: descriptionKey, children: description })] }), (0, import_jsx_runtime303.jsx)(Icon, { color: "text-tertiary", className: "action-card__action-icon", children: isLoading ? (0, import_jsx_runtime303.jsx)(Spinner, {}) : (0, import_jsx_runtime303.jsx)(SvgChevronLeft, {}) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/EmbeddedAuthChoiceCards/EmbeddedAuthChoiceCards.js
var import_qrcode177 = __toESM(require_browser(), 1);
var EmbeddedAuthChoiceCards = ({ currentAction, supportedAuthenticators }) => {
  var _a, _b;
  const [selectedAuthType, setSelectedAuthType] = (0, import_react336.useState)();
  const { projectSettings } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const { initAuthMethod, isLoading } = useInitEmbeddedWalletAuthMethod();
  const { createRootElement } = useElementById();
  const iframeContainerRef = createRootElement(iframeContainerId2);
  const supportedAuthenticatorsMap = {
    email: {
      badgeKey: "dyn_embedded_authenticator.email.badge",
      description: t2("dyn_embedded_authenticator.email.description", {
        expiration: (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.sessionKeyDuration) === null || _b === void 0 ? void 0 : _b.amount
      }),
      descriptionKey: "dyn_embedded_authenticator.email.description",
      icon: (0, import_jsx_runtime304.jsx)(Icon, { color: "text-tertiary", size: "small", children: (0, import_jsx_runtime304.jsx)(SvgMail, {}) }, "one-time-code-icon"),
      titleKey: "dyn_embedded_authenticator.email.title"
    },
    passkey: {
      badgeKey: "dyn_embedded_authenticator.passkey.badge",
      description: t2("dyn_embedded_authenticator.passkey.description"),
      descriptionKey: "dyn_embedded_authenticator.passkey.description",
      icon: (0, import_jsx_runtime304.jsx)(PasskeyDeviceIcon, { defaultIcon: (0, import_jsx_runtime304.jsx)(SvgAndroidTouchId, { "data-testid": "default-icon" }) }),
      titleKey: currentAction === "reveal" ? "dyn_embedded_authenticator.passkey.reveal_title" : "dyn_embedded_authenticator.passkey.title"
    }
  };
  const handleSelection = (authenticatorType) => () => __awaiter(void 0, void 0, void 0, function* () {
    setSelectedAuthType(authenticatorType);
    yield initAuthMethod({
      authenticatorType,
      currentAction,
      iframeContainer: iframeContainerRef.current
    });
  });
  return (0, import_jsx_runtime304.jsx)("div", { className: "embedded-auth-choice-cards", children: supportedAuthenticators && supportedAuthenticators.map((authenticatorType) => (0, import_jsx_runtime304.jsx)(ActionCard, { LeadingIcon: supportedAuthenticatorsMap[authenticatorType].icon, action: handleSelection(authenticatorType), badgeKey: supportedAuthenticatorsMap[authenticatorType].badgeKey, badgeVariant: authenticatorType === "passkey" ? "primary" : "secondary", descriptionKey: supportedAuthenticatorsMap[authenticatorType].descriptionKey, description: supportedAuthenticatorsMap[authenticatorType].description, titleKey: supportedAuthenticatorsMap[authenticatorType].titleKey, isLoading: isLoading && authenticatorType === selectedAuthType, dataTestId: `embedded-auth-choice__item-${authenticatorType}` }, authenticatorType)) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/EmbeddedAuthChoice/EmbeddedAuthChoice.js
var titleDescriptionMap = {
  helpSession: {
    description: "dyn_embedded_authenticator.need_help_description",
    title: "dyn_embedded_authenticator.need_help_title"
  },
  reveal: {
    description: "dyn_embedded_authenticator.reveal_description",
    title: "dyn_embedded_authenticator.reveal_title"
  },
  sendTransaction: {
    description: "dyn_embedded_authenticator.description",
    title: "dyn_embedded_authenticator.title"
  },
  signMessage: {
    description: "dyn_embedded_authenticator.description",
    title: "dyn_embedded_authenticator.title"
  }
};
var EmbeddedAuthChoice = ({ currentAction }) => {
  var _a;
  const { t: t2 } = useTranslation();
  const { primaryWallet, projectSettings, setShowAuthFlow } = useInternalDynamicContext();
  const { getEOAWallet } = useSmartWallets();
  const wallet = (_a = primaryWallet && getEOAWallet(primaryWallet)) !== null && _a !== void 0 ? _a : primaryWallet;
  const { initPasskeyRecoveryProcess } = usePasskeyRecovery();
  const { isTurnkeyWallet } = useIsTurnkeyWallet();
  const supportedAuthenticators = (0, import_react337.useMemo)(() => {
    var _a2;
    const supportedAuths = getEnabledEmbeddedWalletsAuthenticators((_a2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a2 === void 0 ? void 0 : _a2.supportedSecurityMethods);
    const supportedMethods = Object.keys(supportedAuths);
    if (!currentAction || !["helpSession", "reveal"].includes(currentAction)) {
      return supportedMethods.filter((auth) => auth !== "email");
    }
    return supportedMethods;
  }, [projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets]);
  const isEmailAuthSessionActive = () => {
    if (!wallet || !isTurnkeyWallet) {
      return false;
    }
    const turnkeyAuthenticatorHandler = wallet.connector.getAuthenticatorHandler();
    return turnkeyAuthenticatorHandler.isSessionActive();
  };
  const renderIcon = () => supportedAuthenticators.length > 1 ? (0, import_jsx_runtime305.jsx)(SvgMultipleAccountSecurity, {}) : (0, import_jsx_runtime305.jsx)(SvgPasskeyAccountSecurity, {});
  const buttonCopyKey = isEmailAuthSessionActive() ? "dyn_embedded_authenticator.passkey.auth_info.start_button" : "dyn_embedded_authenticator.passkey.auth_info.add_button";
  const { title: title2, description } = titleDescriptionMap[currentAction || "signMessage"];
  if (!(supportedAuthenticators === null || supportedAuthenticators === void 0 ? void 0 : supportedAuthenticators.length)) {
    return null;
  }
  return (0, import_jsx_runtime305.jsxs)(import_jsx_runtime305.Fragment, { children: [(0, import_jsx_runtime305.jsx)(ModalHeader, { children: (0, import_jsx_runtime305.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", copykey: title2, children: t2(title2) }) }), (0, import_jsx_runtime305.jsxs)("div", { className: "embedded-auth-choice", children: [(0, import_jsx_runtime305.jsx)("div", { className: "embedded-auth-choice__header", children: renderIcon() }), (0, import_jsx_runtime305.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "embedded-auth-choice__subtitle", copykey: description, children: t2(description) }), supportedAuthenticators.length > 1 ? (0, import_jsx_runtime305.jsx)(EmbeddedAuthChoiceCards, { currentAction, supportedAuthenticators }) : (0, import_jsx_runtime305.jsxs)(import_jsx_runtime305.Fragment, { children: [(0, import_jsx_runtime305.jsx)(AuthChoiceInfo, { choice: "passkey" }), (0, import_jsx_runtime305.jsx)(TypographyButton, { dataTestId: "passkey-only-choice-button", buttonVariant: "brand-primary", color: "brand-primary", expanded: true, onClick: () => initPasskeyRecoveryProcess("passkey"), copykey: buttonCopyKey, typographyProps: {
    color: "inherit"
  }, children: t2(buttonCopyKey) })] }), currentAction !== "reveal" && (0, import_jsx_runtime305.jsx)(TypographyButton, { buttonVariant: "primary", buttonClassName: "embedded-auth-choice__skip-button", expanded: true, onClick: () => setShowAuthFlow(false), copykey: "dyn_embedded_authenticator.skip", children: t2("dyn_embedded_authenticator.skip") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/viewToComponentMap.js
var import_react367 = __toESM(require_react(), 1);
var import_react_dom208 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/PendingSignatureView/PendingSignatureView.js
var import_jsx_runtime306 = __toESM(require_jsx_runtime(), 1);
var import_react338 = __toESM(require_react(), 1);
var import_react_dom183 = __toESM(require_react_dom(), 1);
var import_qrcode179 = __toESM(require_browser(), 1);
var PendingSignatureView = () => {
  const [loading, setLoading] = (0, import_react338.useState)(false);
  const { selectedWalletConnector: walletConnector } = useInternalDynamicContext();
  const { signAlreadyConnectedUser } = useConnectAndSignSplitSteps();
  const { t: t2 } = useTranslation();
  const iconSize2 = 96;
  const isHardwareWallet = isHardwareWalletEnabled(walletConnector);
  if (!walletConnector) {
    return null;
  }
  const handleClick = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
      setLoading(true);
      yield signAlreadyConnectedUser({ walletConnector });
    } catch (e2) {
      logger2.error(e2);
    } finally {
      setLoading(false);
    }
  });
  const icon = (0, import_jsx_runtime306.jsx)(WalletIcon, { walletKey: walletConnector.key, style: {
    height: pixelToRem(iconSize2 * iconRatio),
    width: pixelToRem(iconSize2 * iconRatio)
  } });
  const typographyBodyCopy = isHardwareWallet ? t2("dyn_pending_signature.phantom_ledger_sign") : t2("dyn_pending_signature.regular_sign_description");
  return (0, import_jsx_runtime306.jsxs)("div", { className: "pending-signature__container", "data-testid": "pending-signature-view", children: [(0, import_jsx_runtime306.jsx)(IconWithSpinner, { Icon: icon, iconSize: iconSize2, isSpinning: true, indicator: "connected", className: "pending-signature__icon-with-spinner" }), (0, import_jsx_runtime306.jsx)(Typography, { variant: "body_normal", weight: "regular", className: classNames("pending-signature__copy"), copykey: isHardwareWallet ? "dyn_pending_signature.phantom_ledger_sign" : "dyn_pending_signature.regular_sign_description", children: typographyBodyCopy }), isHardwareWallet && (0, import_jsx_runtime306.jsxs)(Typography, { variant: "body_small", weight: "regular", className: classNames("pending-signature__copy", "pending-signature__copy--mini"), copykey: "dyn_pending_signature.phantom_ledger_warning", children: [(0, import_jsx_runtime306.jsx)("strong", { children: t2("dyn_pending_signature.note") }), t2("dyn_pending_signature.phantom_ledger_warning")] }), requiresTwoStepAuthentication(walletConnector) && (0, import_jsx_runtime306.jsx)(TypographyButton, { buttonClassName: "pending-signature__button", onClick: handleClick, loading, buttonVariant: "primary", buttonPadding: "large", expanded: true, typographyProps: {
    variant: "button_primary",
    weight: "medium"
  }, copykey: "dyn_pending_signature.click_to_sign", children: t2("dyn_pending_signature.click_to_sign") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/QrCodeView/QrCodeView.js
var import_jsx_runtime307 = __toESM(require_jsx_runtime(), 1);
var import_react339 = __toESM(require_react(), 1);
var import_react_dom184 = __toESM(require_react_dom(), 1);
var import_qrcode180 = __toESM(require_browser(), 1);
var QrCodeView = () => {
  var _a;
  const { theme: { theme } } = useThemeContext();
  const { name } = theme;
  const { qrcodeUri, desktopUri, selectedWalletConnector: walletConnector } = useInternalDynamicContext();
  const { walletBook } = useWalletBookContext();
  if (!walletConnector) {
    return null;
  }
  const icon = (0, import_jsx_runtime307.jsx)(WalletIcon, { walletKey: walletConnector.key, style: { height: pixelToRem(32), width: pixelToRem(32) } });
  return (0, import_jsx_runtime307.jsx)(QrCodeWrapper, { uri: qrcodeUri, desktopUri, accentColor: (
    /* istanbul ignore next */
    name === "dark" ? theme.colors.textPrimary : (_a = getWalletPrimaryColor(walletBook, walletConnector.key)) !== null && _a !== void 0 ? _a : ""
  ), icon, showCopyToClipboardButton: walletConnector.isWalletConnect, walletConnector });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/PendingConnectView/PendingConnectView.js
var import_jsx_runtime308 = __toESM(require_jsx_runtime(), 1);
var import_react340 = __toESM(require_react(), 1);
var import_react_dom185 = __toESM(require_react_dom(), 1);
var import_qrcode181 = __toESM(require_browser(), 1);
var PendingConnectView = () => {
  const { selectedWalletConnector: walletConnector } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const iconSize2 = 94;
  const icon = (0, import_jsx_runtime308.jsx)(WalletIcon, { walletKey: walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key, style: {
    height: pixelToRem(iconSize2 * iconRatio),
    width: pixelToRem(iconSize2 * iconRatio)
  } });
  return (0, import_jsx_runtime308.jsxs)("div", { className: "pending-connect__container", children: [(0, import_jsx_runtime308.jsx)(IconWithSpinner, { Icon: icon, iconSize: iconSize2, isSpinning: true, className: "pending-connect__icon-with-spinner" }), (0, import_jsx_runtime308.jsx)(Typography, { variant: "body_normal", weight: "regular", className: "pending-connect__copy-text", copykey: isMobile() ? "dyn_pending_connection.mobile" : "dyn_pending_connection.computer", children: isMobile() ? t2("dyn_pending_connection.mobile") : t2("dyn_pending_connection.computer") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SelectHardwareWalletView/SelectHardwareWalletView.js
var import_jsx_runtime311 = __toESM(require_jsx_runtime(), 1);
var import_react342 = __toESM(require_react(), 1);
var import_react_dom186 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/HardwareWalletToggle/HardwareWalletToggle.js
var import_jsx_runtime310 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toggle/Toggle.js
var import_jsx_runtime309 = __toESM(require_jsx_runtime(), 1);
var Toggle = (_a) => {
  var { icon, variant = "primary", className } = _a, props = __rest(_a, ["icon", "variant", "className"]);
  return (0, import_jsx_runtime309.jsxs)("label", { className: classNames("toggle", className), children: [(0, import_jsx_runtime309.jsx)("input", Object.assign({ type: "checkbox", className: "toggle--input" }, props)), (0, import_jsx_runtime309.jsx)("div", { className: classNames("toggle--content", `toggle--content__variant-${variant}`), children: (0, import_jsx_runtime309.jsx)("div", { className: "toggle--knob", children: icon }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/HardwareWalletToggle/HardwareWalletToggle.js
var import_react341 = __toESM(require_react(), 1);
var HardwareWalletToggle = ({ connectors, label, copykey }) => {
  const toggle = (0, import_jsx_runtime310.jsx)(Toggle, { defaultChecked: connectors.some((connector) => connector.isHardwareWalletEnabled), onChange: (event) => {
    connectors.forEach((connector) => {
      connector.isHardwareWalletEnabled = event.target.checked;
    });
  }, "data-testid": "hardware-wallet-toggle", icon: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime310.jsx)(Icon, { size: "small", children: (0, import_jsx_runtime310.jsx)(SvgCheck, {}) })
  ) });
  return (0, import_jsx_runtime310.jsx)(ListTile, { trailing: toggle, children: (0, import_jsx_runtime310.jsx)("span", { copykey, children: label }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SelectHardwareWalletView/SelectHardwareWalletView.js
var import_qrcode182 = __toESM(require_browser(), 1);
var SelectHardwareWalletView = ({ wallet, onSelectWallet }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime311.jsx)("div", { className: "select-hardware-wallet-view", children: (0, import_jsx_runtime311.jsxs)("div", { className: "select-hardware-wallet-view__container", children: [(0, import_jsx_runtime311.jsx)(Icon, { className: "select-hardware-wallet-view__icon", children: (0, import_jsx_runtime311.jsx)(WalletIcon, { walletKey: wallet.key }) }), (0, import_jsx_runtime311.jsx)(Typography, { className: "select-hardware-wallet-view__text", as: "p", color: "secondary", variant: "body_normal", copykey: "dyn_select_hardware_wallet.description", children: t2("dyn_select_hardware_wallet.description") }), isHardwareWalletConnector(wallet.walletConnector) && (0, import_jsx_runtime311.jsxs)(import_jsx_runtime311.Fragment, { children: [(0, import_jsx_runtime311.jsx)(HardwareWalletToggle, { connectors: [wallet.walletConnector], copykey: "dyn_select_chain.using_hardware_wallet_toggle_label", label: t2("dyn_select_chain.using_hardware_wallet_toggle_label") }), (0, import_jsx_runtime311.jsx)(Divider, {})] }), (0, import_jsx_runtime311.jsx)(TypographyButton, { buttonVariant: "primary", onClick: () => onSelectWallet === null || onSelectWallet === void 0 ? void 0 : onSelectWallet(wallet), copykey: "dyn_select_hardware_wallet.button", dataTestId: "select-hardware-wallet-connect-button", children: t2("dyn_select_hardware_wallet.button") })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SelectWalletInWalletGroupView/SelectWalletInWalletGroupView.js
var import_jsx_runtime314 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/WalletGroupViewLayout/WalletGroupViewLayout.js
var import_jsx_runtime312 = __toESM(require_jsx_runtime(), 1);
var WalletGroupViewLayout = ({ icon, title: title2, titleCopyKey, children }) => (0, import_jsx_runtime312.jsxs)("div", { className: "wallet-group-view-layout__container", children: [(0, import_jsx_runtime312.jsx)(IconWithSpinner, { className: "wallet-group-view-layout__icon", Icon: icon, iconSize: 96 }), (0, import_jsx_runtime312.jsxs)("div", { className: "wallet-group-view-layout__body", children: [(0, import_jsx_runtime312.jsx)(Typography, { className: "wallet-group-view-layout__title", as: "p", color: "secondary", variant: "body_normal", copykey: titleCopyKey, children: title2 }), (0, import_jsx_runtime312.jsx)("div", { className: "wallet-group-view-layout__list", children })] })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SelectWalletInWalletGroupView/SelectWalletInWalletGroupView.js
var import_react344 = __toESM(require_react(), 1);
var import_react_dom188 = __toESM(require_react_dom(), 1);
var import_qrcode184 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SelectWalletInWalletGroupView/components/WalletGroupItem/WalletGroupItem.js
var import_jsx_runtime313 = __toESM(require_jsx_runtime(), 1);
var import_react343 = __toESM(require_react(), 1);
var import_react_dom187 = __toESM(require_react_dom(), 1);
var import_qrcode183 = __toESM(require_browser(), 1);
var WalletGroupItem = ({ groupKey, wallet, onClick }) => {
  const { recommendedWallets } = useInternalDynamicContext();
  const { walletBook } = useWalletBookContext();
  const walletOverride = findWalletGroupOverride(walletBook, groupKey, wallet.key);
  const walletData = findWalletBookWallet(walletBook, wallet.key);
  const brand = (walletOverride === null || walletOverride === void 0 ? void 0 : walletOverride.brand) || (walletData === null || walletData === void 0 ? void 0 : walletData.brand);
  const name = (walletOverride === null || walletOverride === void 0 ? void 0 : walletOverride.name) || (walletData === null || walletData === void 0 ? void 0 : walletData.name);
  const icon = brand ? (0, import_jsx_runtime313.jsx)(BrandIcon, { brand, walletKey: wallet.key, style: { height: pixelToRem(28), width: pixelToRem(28) } }) : null;
  const labelSettings = getWalletListItemLabel({
    recommendedWallets,
    wallet
  });
  const trailing = (0, import_jsx_runtime313.jsx)(ListTileAnimatedTrailing, { hoverElement: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime313.jsx)(Icon, { color: "text-tertiary", size: "mini", children: (0, import_jsx_runtime313.jsx)(SvgStroke, {}) })
  ), children: labelSettings && (0, import_jsx_runtime313.jsx)(Badge, { dot: !labelSettings.isRecommended, variant: labelSettings.isRecommended ? "primary" : "secondary", text: (0, import_jsx_runtime313.jsx)(Typography, { variant: "body_small", children: labelSettings.label }) }) });
  return (0, import_jsx_runtime313.jsx)(ListTile, { onClick, leading: icon, trailing, children: name });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SelectWalletInWalletGroupView/SelectWalletInWalletGroupView.js
var SelectWalletInWalletGroupView = () => {
  const { selectedWalletGroup } = useWalletGroupContext();
  const { walletBook } = useWalletBookContext();
  const { handleWalletItemClick } = useWalletItemActions();
  const { t: t2 } = useTranslation();
  if (!selectedWalletGroup)
    throw new Error("Could not access WalletGroup view without selected group");
  const walletBookData = getWalletGroup(walletBook, selectedWalletGroup === null || selectedWalletGroup === void 0 ? void 0 : selectedWalletGroup.key);
  return (0, import_jsx_runtime314.jsx)(WalletGroupViewLayout, { icon: (0, import_jsx_runtime314.jsx)(WalletIcon, { walletKey: walletBookData.key }), title: t2("dyn_select_wallet.description", {
    walletName: walletBookData.name
  }), titleCopyKey: "dyn_select_wallet.description", children: selectedWalletGroup.groupedWallets.map((wallet, index) => (0, import_jsx_runtime314.jsx)(WalletGroupItem, { groupKey: selectedWalletGroup.key, wallet, onClick: () => handleWalletItemClick(wallet) }, `${wallet.key}_${index}`)) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SmsVerification/SmsVerification.js
var import_jsx_runtime317 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneIcon/PhoneIcon.js
var import_jsx_runtime315 = __toESM(require_jsx_runtime(), 1);
var import_react345 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/sign-in-with-phone.js
var React82 = __toESM(require_react(), 1);
var _path64;
var _excluded68 = ["title", "titleId"];
function _extends75() {
  _extends75 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends75.apply(this, arguments);
}
function _objectWithoutProperties68(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose71(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose71(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSignInWithPhone = function SvgSignInWithPhone2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties68(_ref2, _excluded68);
  return React82.createElement("svg", _extends75({
    width: 64,
    height: 64,
    viewBox: "0 0 64 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React82.createElement("title", {
    id: titleId
  }, title2) : null, _path64 || (_path64 = React82.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32 64c17.673 0 32-14.327 32-32C64 14.327 49.673 0 32 0 14.327 0 0 14.327 0 32c0 17.673 14.327 32 32 32Zm-7.91-50h14.892a4.092 4.092 0 0 1 4.09 4.09v27.82a4.092 4.092 0 0 1-4.09 4.09H24.09A4.092 4.092 0 0 1 20 45.91V18.09A4.092 4.092 0 0 1 24.09 14Zm4.992 31.91a2.451 2.451 0 0 0 2.454 2.454 2.451 2.451 0 0 0 2.455-2.455 2.451 2.451 0 0 0-2.455-2.454 2.451 2.451 0 0 0-2.454 2.454Zm-5.81-4.092H39.8V18.91H23.273v22.91Z",
    fill: "#4779FF"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/PhoneIcon/PhoneIcon.js
var PhoneIcon = (props) => (0, import_jsx_runtime315.jsx)(Icon, { color: "brand-primary", children: (0, import_jsx_runtime315.jsx)(SvgSignInWithPhone, Object.assign({}, props, { "data-testid": "sign-in-with-sms-icon" })) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SmsVerification/SmsVerification.js
var import_react347 = __toESM(require_react(), 1);
var import_react_dom190 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SmsVerification/useSmsVerification/useSmsVerification.js
var import_react346 = __toESM(require_react(), 1);
var import_jsx_runtime316 = __toESM(require_jsx_runtime(), 1);
var import_react_dom189 = __toESM(require_react_dom(), 1);
var import_qrcode185 = __toESM(require_browser(), 1);
var useSmsVerification = (type) => {
  const { verificationUUID, displayedDestination: formattedPhone, retryData } = useVerification();
  const { environmentId, user, userWithMissingInfo } = useInternalDynamicContext();
  const [error, setError] = (0, import_react346.useState)();
  const { verifyOtp } = useOtpVerificationRequest();
  const { generateSessionKey, shouldRegisterSessionKeysOnSignin } = useEmbeddedWalletSessionKeys(environmentId);
  const { initAuth: initAuth2, completeAuth, cancelAuth } = useUserAuth({
    authMethod: "sms"
  });
  const isValidatedRef = (0, import_react346.useRef)(false);
  useOnUnmount(() => {
    const phone = retryData !== null && retryData !== void 0 ? retryData : {
      dialCode: "",
      iso2: "",
      phone: ""
    };
    if (!retryData)
      logger2.warn("WARNING: emitted smsVerificationResult with incomplete params because retryData was undefined");
    dynamicEvents.emit("smsVerificationResult", isValidatedRef.current, phone);
    if (!isValidatedRef.current)
      dynamicEvents.emit("authFailure", { option: phone, phone, type: "sms" }, "user-cancelled");
  });
  const retryOneTimePassword = () => __awaiter(void 0, void 0, void 0, function* () {
    setError(void 0);
    if (!verificationUUID || !retryData) {
      yield cancelAuth();
      return;
    }
    retrySmsVerification({
      environmentId,
      isoCountryCode: retryData.iso2,
      phoneCountryCode: retryData.dialCode,
      phoneNumber: de({
        dialCode: retryData.dialCode,
        phone: retryData.phone
      }),
      verificationUUID
    });
  });
  const submitOtpForVerification = (0, import_react346.useCallback)((verificationToken) => __awaiter(void 0, void 0, void 0, function* () {
    if (!verificationUUID || !user && !userWithMissingInfo) {
      yield cancelAuth();
      return;
    }
    yield completeAuth({
      onValidUpdatedJwt: () => isValidatedRef.current = true,
      updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () {
        return verifyOtp(verificationToken, "sms", verificationUUID);
      })
    });
  }), [
    cancelAuth,
    completeAuth,
    user,
    userWithMissingInfo,
    verificationUUID,
    verifyOtp
  ]);
  const submitOtpForLogin = (0, import_react346.useCallback)((verificationToken) => __awaiter(void 0, void 0, void 0, function* () {
    if (!verificationUUID) {
      yield cancelAuth();
      return;
    }
    yield initAuth2({
      onError: (error2) => setError(error2),
      onVerifySuccess: () => {
        isValidatedRef.current = true;
      },
      options: { phone: retryData },
      showSuccessMessage: true,
      verifyFunction: () => __awaiter(void 0, void 0, void 0, function* () {
        let sessionPublicKey = void 0;
        if (shouldRegisterSessionKeysOnSignin()) {
          const keypair = yield generateSessionKey();
          sessionPublicKey = keypair.publicKey;
        }
        return signInWithSmsVerification({
          environmentId,
          sessionPublicKey,
          verificationToken,
          verificationUUID
        });
      })
    });
  }), [verificationUUID, initAuth2, retryData, cancelAuth, environmentId]);
  const { isLoading, mutate: onSubmit } = useMutation(type === "login" ? submitOtpForLogin : submitOtpForVerification, {
    onFailure: (error2) => {
      setError(error2);
    }
  });
  return {
    error,
    formattedPhone: formattedPhone !== null && formattedPhone !== void 0 ? formattedPhone : "",
    isLoading,
    isValid: isValidatedRef.current,
    onSubmit,
    retryOneTimePassword,
    setError
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SmsVerification/SmsVerification.js
var import_qrcode186 = __toESM(require_browser(), 1);
var SmsVerification = () => {
  const { view } = useViewContext();
  const { handleLogOut } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const isLoginView = view.type === "login-with-sms-verification";
  const { error, formattedPhone, isLoading, isValid, onSubmit, retryOneTimePassword, setError } = useSmsVerification(isLoginView ? "login" : "verify-only");
  const LogoutButton2 = !isLoginView ? (0, import_jsx_runtime317.jsx)(TextButton, { className: "sms-verification__log-out", onClick: handleLogOut, copykey: "dyn_otp_verification.log_out_button", children: t2("dyn_otp_verification.log_out_button") }) : void 0;
  return (0, import_jsx_runtime317.jsx)(OTPVerificationView, { MainIcon: PhoneIcon, displayedDestination: formattedPhone, error, hideHeader: true, isLoading, onPinComplete: onSubmit, isValid, retryHandler: retryOneTimePassword, onPinChange: () => setError(void 0), appendToEnd: LogoutButton2 });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SocialRedirectView/SocialRedirectView.js
var import_jsx_runtime318 = __toESM(require_jsx_runtime(), 1);
var import_react348 = __toESM(require_react(), 1);
var import_react_dom191 = __toESM(require_react_dom(), 1);
var import_qrcode187 = __toESM(require_browser(), 1);
var SocialRedirectView = () => {
  const { socialProvider, signInProvider } = useSocialRedirectContext();
  const findSocialIcon2 = useFindSocialIcon();
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime318.jsxs)("div", { className: classNames("social-redirect-view__container"), children: [socialProvider && (0, import_jsx_runtime318.jsx)(IconWithSpinner, { iconSize: 64, Icon: findSocialIcon2(socialProvider), isSpinning: true }), (0, import_jsx_runtime318.jsx)(Typography, { weight: "medium", variant: "title", className: classNames("social-redirect-view__title"), copykey: "dyn_social_redirect.logging_in", children: t2("dyn_social_redirect.logging_in") }), signInProvider !== SignInProviderEnum.MagicLink && (0, import_jsx_runtime318.jsx)(PoweredByDynamic, { classNameRoot: "powered-by-dynamic" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SocialWrongAccountView/SocialWrongAccountView.js
var import_jsx_runtime319 = __toESM(require_jsx_runtime(), 1);
var import_react349 = __toESM(require_react(), 1);
var import_react_dom192 = __toESM(require_react_dom(), 1);
var import_qrcode188 = __toESM(require_browser(), 1);
var SocialWrongAccountView = () => {
  const [tryAgainClicked, setTryAgainClicked] = (0, import_react349.useState)(false);
  const { socialWalletConnector, socialAccount } = useSocialRedirectContext();
  const { t: t2 } = useTranslation();
  const findSocialIcon2 = useFindSocialIcon();
  if (!socialAccount || !socialWalletConnector)
    return null;
  return (0, import_jsx_runtime319.jsxs)("div", { className: classNames("social-wrong-account-view__container"), children: [(0, import_jsx_runtime319.jsx)(IconWithSpinner, { Icon: findSocialIcon2(socialAccount.oauthProvider), isSpinning: tryAgainClicked, iconSize: 64 }), (0, import_jsx_runtime319.jsx)(Typography, { weight: "medium", variant: "title", className: classNames("social-wrong-account-view__title"), copykey: "dyn_login.wrong_social_account.title", children: t2("dyn_login.wrong_social_account.title") }), (0, import_jsx_runtime319.jsx)(Typography, { variant: "body_normal", weight: "regular", className: classNames("social-wrong-account-view__copy"), copykey: "dyn_login.wrong_social_account.subtitle", children: t2("dyn_login.wrong_social_account.subtitle") }), (0, import_jsx_runtime319.jsxs)(Typography, { variant: "body_normal", weight: "regular", className: classNames("social-wrong-account-view__copy"), copykey: "dyn_login.wrong_social_account.retry_title", children: [t2("dyn_login.wrong_social_account.retry_title"), (0, import_jsx_runtime319.jsx)("b", { children: socialAccount.oauthUsername })] }), (0, import_jsx_runtime319.jsx)(TypographyButton, { buttonClassName: "social-wrong-account-view__button", buttonVariant: "primary", buttonPadding: "large", expanded: true, typographyProps: {
    variant: "button_primary",
    weight: "medium"
  }, disabled: tryAgainClicked, onClick: () => {
    setTryAgainClicked(true);
    socialWalletConnector.connect(socialAccount.oauthProvider);
  }, copykey: "dyn_login.wrong_social_account.retry_button", children: t2("dyn_login.wrong_social_account.retry_button") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletCannotBeTransferredView/WalletCannotBeTransferredView.js
var import_jsx_runtime320 = __toESM(require_jsx_runtime(), 1);
var import_react350 = __toESM(require_react(), 1);
var import_react_dom193 = __toESM(require_react_dom(), 1);
var import_qrcode189 = __toESM(require_browser(), 1);
var WalletCannotBeTransferredView = () => {
  const { goToInitialView } = useViewContext();
  const { selectedWalletConnector: walletConnector } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const { data: walletAddress } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    const accounts = yield walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getConnectedAccounts();
    return shortenWalletAddress(accounts === null || accounts === void 0 ? void 0 : accounts[0]);
  }), {
    deps: [walletConnector]
  });
  return (0, import_jsx_runtime320.jsxs)("div", { className: "wallet-cannot-be-transferred-view__container", children: [(0, import_jsx_runtime320.jsx)(Typography, { className: "wallet-cannot-be-transferred-view__title", as: "h6", variant: "title", color: "primary", weight: "medium", copykey: "dyn_wallet_link.cannot_link.title", children: t2("dyn_wallet_link.cannot_link.title") }), (0, import_jsx_runtime320.jsx)("div", { className: "wallet-cannot-be-transferred-view__icon", children: (0, import_jsx_runtime320.jsx)(WalletIcon, { walletKey: walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key, width: 64, height: 64 }) }), (0, import_jsx_runtime320.jsx)(Typography, { className: "wallet-cannot-be-transferred-view__shorten-wallet-address", variant: "body_normal", weight: "regular", color: "primary", children: walletAddress }), (0, import_jsx_runtime320.jsx)(Typography, { className: "wallet-cannot-be-transferred-view__copy", variant: "body_normal", color: "secondary", weight: "regular", copykey: "dyn_wallet_link.cannot_link.description", children: t2("dyn_wallet_link.cannot_link.description") }), (0, import_jsx_runtime320.jsx)(TypographyButton, { buttonClassName: "wallet-cannot-be-transferred-view__transfer-alt-wallet-button", buttonVariant: "primary", expanded: true, buttonPadding: "large", onClick: goToInitialView, dataTestId: "wallet-cannot-be-transferred-view-transfer-alt-wallet", copykey: "dyn_wallet_link.cannot_link.link_other_button", children: t2("dyn_wallet_link.cannot_link.link_other_button") }), (0, import_jsx_runtime320.jsx)(TypographyButton, { dataTestId: "wallet-cannot-be-transferred-view-cancel", buttonPadding: "small", buttonClassName: "wallet-cannot-be-transferred-view__cancel", onClick: goToInitialView, copykey: "dyn_wallet_link.cannot_link.cancel_button", children: t2("dyn_wallet_link.cannot_link.cancel_button") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletGroupView/WalletGroupView.js
var import_jsx_runtime322 = __toESM(require_jsx_runtime(), 1);
var import_react352 = __toESM(require_react(), 1);
var import_react_dom195 = __toESM(require_react_dom(), 1);
var import_qrcode191 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletGroupView/components/WalletGroupItem/WalletGroupItem.js
var import_jsx_runtime321 = __toESM(require_jsx_runtime(), 1);
var import_react351 = __toESM(require_react(), 1);
var import_react_dom194 = __toESM(require_react_dom(), 1);
var import_qrcode190 = __toESM(require_browser(), 1);
var WalletGroupItem2 = ({ wallet, onClick }) => {
  const [supportedChain] = wallet.walletConnector.supportedChains;
  const { walletBook } = useWalletBookContext();
  const chainInfo = getChainInfoWithOverrides(supportedChain);
  const walletOverride = wallet.group ? findWalletGroupOverride(walletBook, wallet.group, wallet.key) : void 0;
  const labelSettings = getWalletListItemLabel({
    wallet
  });
  const trailing = (0, import_jsx_runtime321.jsx)(ListTileAnimatedTrailing, { hoverElement: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime321.jsx)(Icon, { color: "text-tertiary", size: "mini", children: (0, import_jsx_runtime321.jsx)(SvgStroke, {}) })
  ), children: labelSettings && (0, import_jsx_runtime321.jsx)(Badge, { dot: !labelSettings.isRecommended, variant: labelSettings.isRecommended ? "primary" : "secondary", text: (0, import_jsx_runtime321.jsx)(Typography, { variant: "body_small", children: labelSettings.label }) }) });
  const renderChainIcon = (0, import_react351.useMemo)(() => {
    const iconStyle = { height: pixelToRem(28), width: pixelToRem(28) };
    if (walletOverride === null || walletOverride === void 0 ? void 0 : walletOverride.brand) {
      return (0, import_jsx_runtime321.jsx)(BrandIcon, { brand: walletOverride.brand, walletKey: wallet.key, style: iconStyle });
    }
    const ChainIcon2 = getChainIcon(supportedChain);
    return (0, import_jsx_runtime321.jsx)(ChainIcon2, { style: iconStyle });
  }, [supportedChain, wallet.key, walletOverride]);
  const renderChainName = (walletOverride === null || walletOverride === void 0 ? void 0 : walletOverride.name) || (chainInfo === null || chainInfo === void 0 ? void 0 : chainInfo.displayName) || wallet.name;
  return (0, import_jsx_runtime321.jsx)(ListTile, { className: "chain-card", onClick, leading: renderChainIcon, trailing, children: renderChainName }, wallet.key);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletGroupView/WalletGroupView.js
var WalletGroupView = () => {
  const { selectedWalletGroup } = useWalletGroupContext();
  const { walletBook } = useWalletBookContext();
  const { handleWalletItemClick } = useWalletItemActions();
  const { t: t2 } = useTranslation();
  if (!selectedWalletGroup)
    throw new Error("Could not access WalletGroup view without selected group");
  const walletBookData = getWalletGroup(walletBook, selectedWalletGroup === null || selectedWalletGroup === void 0 ? void 0 : selectedWalletGroup.key);
  const hardwareWalletConnectors = selectedWalletGroup.groupedWallets.map(({ walletConnector }) => walletConnector).filter((connector) => isHardwareWalletConnector(connector) && connector.canConnectWithHardwareWallet());
  return (0, import_jsx_runtime322.jsx)(WalletGroupViewLayout, { icon: (0, import_jsx_runtime322.jsx)(WalletIcon, { walletKey: walletBookData.key }), title: t2("dyn_select_chain.description"), titleCopyKey: "dyn_select_chain.description", children: (0, import_jsx_runtime322.jsxs)("div", { className: "wallet-group__list", children: [Boolean(hardwareWalletConnectors.length) && (0, import_jsx_runtime322.jsxs)(import_jsx_runtime322.Fragment, { children: [(0, import_jsx_runtime322.jsx)(HardwareWalletToggle, { connectors: hardwareWalletConnectors, copykey: "dyn_select_chain.using_hardware_wallet_toggle_label", label: t2("dyn_select_chain.using_hardware_wallet_toggle_label") }), (0, import_jsx_runtime322.jsx)(Divider, {})] }), (0, import_jsx_runtime322.jsx)("div", { className: "wallet-group-view-layout__list", children: selectedWalletGroup.groupedWallets.map((wallet, index) => (0, import_jsx_runtime322.jsx)(WalletGroupItem2, { wallet, onClick: () => handleWalletItemClick(wallet) }, `${wallet.key}_${index}`)) })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletLockedView/WalletLockedView.js
var import_jsx_runtime323 = __toESM(require_jsx_runtime(), 1);
var import_react353 = __toESM(require_react(), 1);
var import_react_dom196 = __toESM(require_react_dom(), 1);
var import_qrcode192 = __toESM(require_browser(), 1);
var iconSize = 64;
var WalletLockedView = () => {
  const { handleLogOut, primaryWallet, setShowAuthFlow, appName } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  if (!primaryWallet) {
    return null;
  }
  const handleConnectWallet = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
      yield primaryWallet.connector.connect();
      setShowAuthFlow(false);
    } catch (_a) {
      logger2.info("could not connect wallet");
    }
  });
  const icon = (0, import_jsx_runtime323.jsx)(WalletIcon, { walletKey: primaryWallet.connector.key, style: {
    height: pixelToRem(iconSize * iconRatio),
    width: pixelToRem(iconSize * iconRatio)
  } });
  return (0, import_jsx_runtime323.jsxs)("div", { "data-testid": "wallet-locked-view", children: [(0, import_jsx_runtime323.jsx)(ErrorContainer, { withIcon: false, variant: "success", className: "wallet-locked-view__error-container", copykey: "dyn_wallet_locked.connect_continue", children: t2("dyn_wallet_locked.connect_continue") }), (0, import_jsx_runtime323.jsxs)("div", { className: "wallet-locked-view__content", children: [(0, import_jsx_runtime323.jsx)(IconWithSpinner, { Icon: icon, iconSize, className: "wallet-locked-view__icon", isSpinning: true }), (0, import_jsx_runtime323.jsx)(Typography, { variant: "title", color: "primary", weight: "medium", className: "wallet-locked-view__title", copykey: "dyn_wallet_locked.title", children: t2("dyn_wallet_locked.title") }), (0, import_jsx_runtime323.jsxs)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", copykey: "dyn_wallet_locked.subtitle", children: [t2("dyn_wallet_locked.subtitle"), appName, "."] }), (0, import_jsx_runtime323.jsx)(TypographyButton, { onClick: () => handleConnectWallet(), buttonClassName: "wallet-locked-view__button", copykey: "dyn_wallet_locked.connect", children: t2("dyn_wallet_locked.connect") }), (0, import_jsx_runtime323.jsx)(Divider, { text: "Or" }), (0, import_jsx_runtime323.jsx)(TextButton, { className: "wallet-locked-view__log-out", onClick: handleLogOut, copykey: "dyn_wallet_locked.logout", children: t2("dyn_wallet_locked.logout") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletRedirectView/WalletRedirectView.js
var import_jsx_runtime324 = __toESM(require_jsx_runtime(), 1);
var import_react354 = __toESM(require_react(), 1);
var import_react_dom197 = __toESM(require_react_dom(), 1);
var import_qrcode193 = __toESM(require_browser(), 1);
var WalletRedirectView = () => {
  const { t: t2 } = useTranslation();
  const { selectedWalletConnector } = useInternalDynamicContext();
  return (0, import_jsx_runtime324.jsxs)("div", { className: classNames("wallet-redirect-view__container"), children: [selectedWalletConnector && (0, import_jsx_runtime324.jsx)(IconWithSpinner, { iconSize: 64, Icon: (0, import_jsx_runtime324.jsx)(WalletIcon, { walletKey: selectedWalletConnector.key }), isSpinning: true }), (0, import_jsx_runtime324.jsx)(Typography, { weight: "medium", variant: "title", className: classNames("wallet-redirect-view__title"), copykey: "dyn_wallet_redirect.loading", children: t2("dyn_wallet_redirect.loading") }), (0, import_jsx_runtime324.jsx)(PoweredByDynamic, { classNameRoot: "powered-by-dynamic" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletSignSpinnerView/WalletSignSpinnerView.js
var import_jsx_runtime325 = __toESM(require_jsx_runtime(), 1);
var import_react355 = __toESM(require_react(), 1);
var import_react_dom198 = __toESM(require_react_dom(), 1);
var import_qrcode194 = __toESM(require_browser(), 1);
var WalletSignSpinnerView = () => {
  const { goToInitialView } = useViewContext();
  const { t: t2 } = useTranslation();
  const { setMultiWalletWidgetState, setSelectedWalletConnectorKey, selectedWalletConnector: walletConnector } = useInternalDynamicContext();
  if (!walletConnector) {
    return null;
  }
  const { key } = walletConnector;
  const iconSize2 = 96;
  const handleClose = () => __awaiter(void 0, void 0, void 0, function* () {
    goToInitialView();
    setMultiWalletWidgetState("idle");
    setSelectedWalletConnectorKey(null);
    yield walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.endSession();
  });
  const icon = (0, import_jsx_runtime325.jsx)(WalletIcon, { walletKey: key, style: {
    height: pixelToRem(iconSize2 * iconRatio),
    width: pixelToRem(iconSize2 * iconRatio)
  } });
  return (0, import_jsx_runtime325.jsxs)("div", { className: "wallet-sign-spinner__container", "data-testid": "wallet-sign-spinner-view", children: [(0, import_jsx_runtime325.jsx)(IconWithSpinner, { Icon: icon, iconSize: iconSize2, isSpinning: true }), (0, import_jsx_runtime325.jsx)(Typography, { variant: "body_normal", weight: "regular", className: classNames("wallet-sign-spinner__copy"), copykey: "dyn_wallet_transfer.sign.spinner.confirm_transfer", children: t2("dyn_wallet_transfer.sign.spinner.confirm_transfer") }), (0, import_jsx_runtime325.jsx)(TypographyButton, { expanded: true, buttonPadding: "large", buttonVariant: "primary", buttonClassName: "wallet-sign-spinner__button", onClick: () => handleClose(), typographyProps: {
    variant: "button_primary",
    weight: "medium"
  }, copykey: "dyn_wallet_transfer.sign.spinner.cancel", children: t2("dyn_wallet_transfer.sign.spinner.cancel") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletUsedView/WalletUsedView.js
var import_jsx_runtime327 = __toESM(require_jsx_runtime(), 1);
var import_react357 = __toESM(require_react(), 1);
var import_react_dom200 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTransferWallet/useTransferWallet.js
var import_react356 = __toESM(require_react(), 1);
var import_jsx_runtime326 = __toESM(require_jsx_runtime(), 1);
var import_react_dom199 = __toESM(require_react_dom(), 1);
var import_qrcode195 = __toESM(require_browser(), 1);
var useTransferWallet = () => {
  const { displaySiweStatement, environmentId, user, primaryWallet, setPrimaryWalletId } = useInternalDynamicContext();
  const { addedWalletsIds } = useInternalUserWallets();
  const updatePrimaryWalletId = (0, import_react356.useCallback)((walletConnector, user2) => {
    const newWalletKey = walletConnector.key;
    if (user2.lastVerifiedCredentialId) {
      if (!primaryWallet) {
        setPrimaryWalletId(user2.lastVerifiedCredentialId);
        return;
      }
      const currentPrimaryWalletKey = primaryWallet.connector.key;
      if (newWalletKey === currentPrimaryWalletKey) {
        setPrimaryWalletId(user2.lastVerifiedCredentialId);
      }
      if (primaryWallet.connector.connectedChain === "FLOW" && walletConnector.connectedChain === "FLOW") {
        setPrimaryWalletId(user2.lastVerifiedCredentialId);
      }
    }
  }, [primaryWallet, setPrimaryWalletId]);
  return (0, import_react356.useCallback)((props) => __awaiter(void 0, void 0, void 0, function* () {
    if (!user)
      throw new DynamicError(USER_NOT_LOGGED_IN);
    const { overrideSiweStatement, walletConnector } = props;
    const args = "nonce" in props ? Object.assign(Object.assign({}, props), {
      displaySiweStatement,
      environmentId,
      siweStatement: overrideSiweStatement,
      walletProvider: getWalletProvider(walletConnector)
    }) : Object.assign(Object.assign({}, props), {
      displaySiweStatement,
      environmentId,
      // We don't need the nonce if we are passing messageToSignOverride and signedMessageOverride
      // and if props doesn't have nonce, that means it has messageToSignOverride and signedMessageOverride
      nonce: "",
      siweStatement: props.overrideSiweStatement,
      walletProvider: getWalletProvider(walletConnector)
    });
    const verifyArgs = yield getVerifyArgs(args);
    const userProfile = yield transferWallet(environmentId, verifyArgs);
    if (!userProfile) {
      throw new DynamicError("Error transferring wallet.");
    }
    updatePrimaryWalletId(walletConnector, userProfile);
    const walletId = userProfile.lastVerifiedCredentialId;
    if (walletId) {
      addedWalletsIds.current.push(walletId);
    }
  }), [
    addedWalletsIds,
    displaySiweStatement,
    environmentId,
    updatePrimaryWalletId,
    user
  ]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletUsedView/WalletUsedView.js
var import_qrcode196 = __toESM(require_browser(), 1);
var WalletUsedView = () => {
  const [isChecked, setIsChecked] = (0, import_react357.useState)(false);
  const { t: t2 } = useTranslation();
  const { setErrorMessage } = useErrorContext();
  const { loading, setLoading } = useLoadingContext();
  const { setView, goToInitialView } = useViewContext();
  const { setShowAuthFlow, appName, siweStatement, setMultiWalletWidgetState, connectWallet, selectedWalletConnector: walletConnector, isSingleWalletAccount, consumeNonce, handleLogOut } = useInternalDynamicContext();
  const { data: walletAddress } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    const accounts = yield walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getConnectedAccounts();
    return accounts === null || accounts === void 0 ? void 0 : accounts[0];
  }), {
    deps: [walletConnector]
  });
  const shortenedWalletAddress = shortenWalletAddress(walletAddress);
  const completeWalletTransfer = useTransferWallet();
  const handleWalletTransfer = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!walletConnector)
      return;
    const nonce = consumeNonce();
    if (!nonce) {
      goToInitialView();
      setErrorMessage("missing-nonce");
      return;
    }
    setMultiWalletWidgetState("awaiting_signature", void 0, "transferring_wallet");
    setLoading(true);
    setView("wallet-sign");
    const siweStatementToUse = getSiweStatement({ appName, siweStatement });
    try {
      const connectionResult = yield connectWallet(walletConnector);
      if (!(connectionResult === null || connectionResult === void 0 ? void 0 : connectionResult.address)) {
        return;
      }
      if (walletConnector.key === "phantom" && isMobile()) {
        StorageService.setItem(PHANTOM_SIGNATURE_STATE, {
          loseOriginalAccountOnTransfer: isChecked,
          submittedAtTimestamp: (/* @__PURE__ */ new Date()).toString(),
          verificationType: "awaiting_transfer"
        });
      }
      yield completeWalletTransfer({
        nonce,
        overrideSiweStatement: siweStatementToUse,
        publicWalletAddress: connectionResult.address,
        skipEmptyAccountCheck: isChecked,
        walletConnector
      });
      setShowAuthFlow(false);
    } catch (error) {
      logger2.error(error);
      setShowAuthFlow(false, { emitCancelAuth: true });
    } finally {
      setLoading(false);
      setMultiWalletWidgetState("idle");
    }
  });
  return (0, import_jsx_runtime327.jsxs)("div", { className: "wallet-used-view__container", children: [(0, import_jsx_runtime327.jsx)("div", { className: "wallet-used-view__icon", children: (0, import_jsx_runtime327.jsx)(WalletIcon, { walletKey: walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key, width: 64, height: 64 }) }), (0, import_jsx_runtime327.jsx)(Typography, { className: "wallet-used-view__shorten-wallet-address", variant: "body_normal", weight: "medium", color: "primary", children: shortenedWalletAddress }), (0, import_jsx_runtime327.jsx)(Typography, { className: "wallet-used-view__copy", variant: "body_normal", color: "secondary", weight: "regular", copykey: "dyn_wallet_link.existent_account.warning", children: t2("dyn_wallet_link.existent_account.warning") }), isSingleWalletAccount && (0, import_jsx_runtime327.jsxs)("label", { htmlFor: "skipEmptyAccountCheck", className: "wallet-used-view__checkbox-label", children: [(0, import_jsx_runtime327.jsx)(Checkbox, { id: "skipEmptyAccountCheck", className: "wallet-used-view__checkbox-container", defaultChecked: isChecked, onChange: () => setIsChecked(!isChecked), ariaLabel: "skip empty account check" }), (0, import_jsx_runtime327.jsx)(Typography, { variant: "body_small", color: "secondary", copykey: "dyn_wallet_link.existent_account.acceptance", children: t2("dyn_wallet_link.existent_account.acceptance") })] }), (0, import_jsx_runtime327.jsx)(TypographyButton, { buttonClassName: "wallet-used-view__accept-button", buttonVariant: "primary", expanded: true, buttonPadding: "large", onClick: () => handleWalletTransfer(), disabled: !isChecked && isSingleWalletAccount || loading, dataTestId: "wallet-used-view-transfer-wallet", copykey: "dyn_wallet_link.confirm_button", children: t2("dyn_wallet_link.confirm_button") }), (0, import_jsx_runtime327.jsx)(TypographyButton, { dataTestId: "wallet-used-view-log-out", buttonPadding: "small", buttonClassName: "wallet-used-view__logout", onClick: handleLogOut, copykey: "dyn_wallet_link.log_out_button", children: t2("dyn_wallet_link.log_out_button") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaDisplayBackupCodesView/MfaDisplayBackupCodesView.js
var import_jsx_runtime328 = __toESM(require_jsx_runtime(), 1);
var import_react358 = __toESM(require_react(), 1);
var import_react_dom201 = __toESM(require_react_dom(), 1);
var import_qrcode197 = __toESM(require_browser(), 1);
var MfaDisplayBackupCodesView = ({ regenerateCodes = false }) => {
  const { setShowAuthFlow } = useInternalDynamicContext();
  const [acknowledgement, setAcknowledgement] = (0, import_react358.useState)(false);
  const { t: t2 } = useTranslation();
  const { getRecoveryCodes: getRecoveryCodes2, completeAcknowledgement } = useMfa();
  const { data: codes, isLoading } = usePromise(() => getRecoveryCodes2(regenerateCodes));
  const codesAsString = (codes || []).join("\n");
  const handleCompleteAcknowledgement = () => __awaiter(void 0, void 0, void 0, function* () {
    setShowAuthFlow(false);
    yield completeAcknowledgement();
  });
  return (0, import_jsx_runtime328.jsxs)("div", { className: "mfa-display-backup-codes-view__body", "data-testid": "mfa-display-backup-codes-view", children: [(0, import_jsx_runtime328.jsx)(Typography, { className: "mfa-display-backup-codes-view__copy", variant: "body_normal", weight: "regular", color: "secondary", children: t2("dyn_mfa.display_backup_codes_view.body") }), (0, import_jsx_runtime328.jsx)(Alert, { variant: "warning", copykey: "dyn_mfa.display_backup_codes_view.warning", className: "mfa-display-backup-codes-view__warning", children: t2("dyn_mfa.display_backup_codes_view.warning") }), isLoading ? (0, import_jsx_runtime328.jsx)(Spinner, { className: "mfa-display-backup-codes-view__loading-spinner" }) : (0, import_jsx_runtime328.jsxs)("div", { className: "mfa-display-backup-codes-view__codes", children: [codes === null || codes === void 0 ? void 0 : codes.map((code, index) => (0, import_jsx_runtime328.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "mfa-display-backup-codes-view__code", children: code }, index)), (0, import_jsx_runtime328.jsxs)("div", { className: "mfa-display-backup-codes-view__actions", children: [(0, import_jsx_runtime328.jsx)(CopyButton, { variant: "button", textToCopy: codesAsString, copykey: "dyn_mfa.display_backup_codes_view.copy_all", startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime328.jsx)(Icon, { size: "mini", color: "text-tertiary", children: (0, import_jsx_runtime328.jsx)(SvgCopy, {}) })
  ), children: t2("dyn_mfa.display_backup_codes_view.copy_all") }), (0, import_jsx_runtime328.jsx)(TypographyButton, { dataTestId: "download-button", buttonPadding: "small", buttonVariant: "primary", onClick: (e2) => {
    e2.preventDefault();
    downloadFile("mfa-backup-codes.txt", codesAsString);
  }, startSlot: (0, import_jsx_runtime328.jsx)(SvgDownload, {}), expanded: true, copykey: "dyn_mfa.display_backup_codes_view.download", children: t2("dyn_mfa.display_backup_codes_view.download") })] })] }), (0, import_jsx_runtime328.jsxs)("div", { className: "mfa-display-backup-codes-view__complete", children: [(0, import_jsx_runtime328.jsx)(TypographyButton, { buttonClassName: "mfa-display-backup-codes-view__acknowledgement", dataTestId: "ack-button", buttonPadding: "small", buttonVariant: "primary", onClick: () => setAcknowledgement(!acknowledgement), startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime328.jsx)(Checkbox, { checked: acknowledgement, onChange: () => {
      setAcknowledgement(!acknowledgement);
    }, className: "mfa-display-backup-codes-view__acknowledgement__checkbox" })
  ), expanded: true, typographyProps: {
    color: "secondary"
  }, copykey: "dyn_mfa.display_backup_codes_view.checkbox", children: t2("dyn_mfa.display_backup_codes_view.checkbox") }), (0, import_jsx_runtime328.jsx)(TypographyButton, { dataTestId: "complete-button", buttonPadding: "large", buttonVariant: "brand-primary", typographyProps: {
    color: "inherit"
  }, disabled: !acknowledgement, expanded: true, copykey: "dyn_mfa.display_backup_codes_view.complete", onClick: handleCompleteAcknowledgement, children: t2("dyn_mfa.display_backup_codes_view.complete") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaVerificationView/MfaVerificationView.js
var import_jsx_runtime329 = __toESM(require_jsx_runtime(), 1);
var import_react359 = __toESM(require_react(), 1);
var import_react_dom202 = __toESM(require_react_dom(), 1);
var import_qrcode198 = __toESM(require_browser(), 1);
var MfaVerificationView = ({ type, isInitialSetup = false, showBackButton = false, deviceId }) => {
  const { t: t2 } = useTranslation();
  const { setView } = useViewContext();
  const { authDevice } = useMfa();
  const [code, setCode] = (0, import_react359.useState)("");
  const [error, setError] = (0, import_react359.useState)();
  const [isRateLimited, setIsRateLimited] = (0, import_react359.useState)(false);
  const { data: isValid, isLoading } = usePromise(() => authDevice(code, type, deviceId), {
    deps: [code],
    enabled: (code === null || code === void 0 ? void 0 : code.length) === 6,
    initialData: false,
    onReject: (err) => {
      if (err instanceof MfaRateLimitedError) {
        setIsRateLimited(true);
        setError(new DynamicError(t2("dyn_mfa.otp_verification_view.rate_limit_error")));
      } else {
        setError(new DynamicError(t2("dyn_mfa.otp_verification_view.error")));
      }
    },
    onResolve: () => __awaiter(void 0, void 0, void 0, function* () {
      const user = getUser();
      if ((user === null || user === void 0 ? void 0 : user.mfaBackupCodeAcknowledgement) !== MfaBackupCodeAcknowledgement.Complete) {
        setView("mfa-display-backup-codes");
      }
    })
  });
  const onCodeChange = (code2) => {
    setError(void 0);
    setCode(code2);
  };
  const onSubmit = (code2) => {
    setCode(code2);
  };
  const onClickBack = () => {
    if (!isInitialSetup) {
      setView("mfa-choose-device", { isInitialSetup });
      return;
    }
    setView("mfa-secure-device", { isInitialSetup, type });
  };
  return (0, import_jsx_runtime329.jsxs)(import_jsx_runtime329.Fragment, { children: [(0, import_jsx_runtime329.jsx)(OTPVerificationView, { MainIcon: SvgPasswordHero, error, isLoading, onPinComplete: onSubmit, isValid: Boolean(isValid), onPinChange: onCodeChange, description: t2("dyn_mfa.otp_verification_view.body"), onClickBack: showBackButton ? onClickBack : void 0, disabled: isRateLimited }), !isInitialSetup && (0, import_jsx_runtime329.jsx)("div", { className: "mfa-verification-view__choose-another-method", children: (0, import_jsx_runtime329.jsx)(TextButton, { className: "mfa-verification-view__choose-another-method-button", onClick: () => setView("mfa-choose-device", { isInitialSetup }), copykey: "dyn_mfa.otp_verification_view.choose_another_method", children: t2("dyn_mfa.otp_verification_view.choose_another_method") }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaRecoveryView/MfaRecoveryView.js
var import_jsx_runtime331 = __toESM(require_jsx_runtime(), 1);
var import_react361 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isValidMfaRecoveryCode/isValidMfaRecoveryCode.js
var isValidMfaRecoveryCode = (text) => {
  const regex = /^[a-zA-Z0-9]{10}$/;
  return regex.test(text);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaRecoveryView/MfaRecoveryView.js
var import_react_dom203 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MfaRecoveryIcon/MfaRecoveryIcon.js
var import_jsx_runtime330 = __toESM(require_jsx_runtime(), 1);
var import_react360 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/mfa-recovery-icon.js
var React83 = __toESM(require_react(), 1);
var _path65;
var _excluded69 = ["title", "titleId"];
function _extends76() {
  _extends76 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends76.apply(this, arguments);
}
function _objectWithoutProperties69(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose72(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose72(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgMfaRecoveryIcon = function SvgMfaRecoveryIcon2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties69(_ref2, _excluded69);
  return React83.createElement("svg", _extends76({
    width: 65,
    height: 64,
    viewBox: "0 0 65 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React83.createElement("title", {
    id: titleId
  }, title2) : null, _path65 || (_path65 = React83.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32.5 64c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32C14.827 0 .5 14.327.5 32c0 17.673 14.327 32 32 32Zm-9.322-18.117a1.828 1.828 0 1 0 3.613.568l1.152-7.457h7.144l-1.1 6.89a1.828 1.828 0 1 0 3.612.567l1.153-7.457h3.504a1.691 1.691 0 0 0 0-3.383h-2.948l1.16-7.222h3.597a1.691 1.691 0 0 0 0-3.383h-3.087l1.1-6.89a1.829 1.829 0 1 0-3.612-.567l-1.153 7.457H30.17l1.1-6.89a1.828 1.828 0 1 0-3.613-.567l-1.152 7.457h-3.458a1.691 1.691 0 0 0 0 3.383h2.901l-1.16 7.222h-3.597a1.691 1.691 0 0 0 0 3.383h3.087l-1.1 6.89Zm12.42-10.272H28.5l1.16-7.222h7.097l-1.16 7.222Z",
    fill: "#4779FF"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MfaRecoveryIcon/MfaRecoveryIcon.js
var MfaRecoveryScreenIcon = (props) => (0, import_jsx_runtime330.jsx)(Icon, { color: "brand-primary", children: (0, import_jsx_runtime330.jsx)(SvgMfaRecoveryIcon, Object.assign({}, props, { "data-testid": "mfa-recovery-icon" })) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaRecoveryView/MfaRecoveryView.js
var import_qrcode199 = __toESM(require_browser(), 1);
var MfaRecoveryView = () => {
  var _a;
  const { t: t2 } = useTranslation();
  const { projectSettings } = useInternalDynamicContext();
  const { authRecoveryCode } = useMfa();
  const [code, setCode] = (0, import_react361.useState)("");
  const [isLoading, setIsLoading] = (0, import_react361.useState)(false);
  const [error, setError] = (0, import_react361.useState)("");
  const supportEmail = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general) === null || _a === void 0 ? void 0 : _a.supportEmail;
  const handleRecovery = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!code) {
      return;
    }
    try {
      setIsLoading(true);
      yield authRecoveryCode(code);
    } catch (e2) {
      setError(e2.message || "Something went wrong");
    } finally {
      setIsLoading(false);
    }
  });
  const handleCodeChanged = (event) => {
    const inputCode = event.target.value;
    setCode(inputCode);
    setError("");
  };
  return (0, import_jsx_runtime331.jsxs)(import_jsx_runtime331.Fragment, { children: [error && (0, import_jsx_runtime331.jsx)(ErrorContainer, { children: error }), (0, import_jsx_runtime331.jsxs)("div", { className: "mfa-recovery-view", children: [(0, import_jsx_runtime331.jsx)(IconWithSpinner, { Icon: MfaRecoveryScreenIcon, isSpinning: isLoading, iconSize: 96 }), (0, import_jsx_runtime331.jsx)("div", { className: "mfa-recovery-view__body", children: (0, import_jsx_runtime331.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", children: t2("dyn_mfa.recovery_view.body") }) }), (0, import_jsx_runtime331.jsxs)("div", { className: "mfa-recovery-view__actions", children: [(0, import_jsx_runtime331.jsx)(Input, { id: "mfa-recovery-input", "data-testid": "mfa-recovery-input", label: t2("dyn_mfa.recovery_view.input_label"), onChange: handleCodeChanged, value: code }), (0, import_jsx_runtime331.jsx)(Button, { expanded: true, buttonVariant: "brand-primary", disabled: isLoading || !isValidMfaRecoveryCode(code), onClick: handleRecovery, dataTestId: "mfa-recovery-submit", children: (0, import_jsx_runtime331.jsx)(Typography, { children: t2("dyn_mfa.recovery_view.button_label") }) })] }), supportEmail && (0, import_jsx_runtime331.jsxs)("div", { className: "mfa-recovery-view__get-help", children: [(0, import_jsx_runtime331.jsx)(Typography, { variant: "body_small", color: "secondary", children: t2("dyn_mfa.recovery_view.get_help.description") }), (0, import_jsx_runtime331.jsx)(Typography, { variant: "body_small", color: "link", children: (0, import_jsx_runtime331.jsx)("a", { href: `mailto:${supportEmail}`, children: t2("dyn_mfa.recovery_view.get_help.button_label") }) })] })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/MfaSecureDeviceHelpView/MfaSecureDeviceHelpView.js
var import_jsx_runtime332 = __toESM(require_jsx_runtime(), 1);
var import_react362 = __toESM(require_react(), 1);
var import_react_dom204 = __toESM(require_react_dom(), 1);
var import_qrcode200 = __toESM(require_browser(), 1);
var MfaSecureDeviceHelper = ({ uri, secret }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime332.jsx)("div", { className: "mfa-qrcode-help-content__container", children: (0, import_jsx_runtime332.jsx)(EnterTileAnimation, { delay: "300ms", children: (0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__setup-container", children: [(0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__step", children: [(0, import_jsx_runtime332.jsx)("div", { className: "mfa-qrcode-help-content__step__number", children: "1" }), (0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__step__instructions", children: [(0, import_jsx_runtime332.jsx)(Typography, { variant: "body_normal", color: "primary", className: "mfa-qrcode-help-content__step__title", children: t2("dyn_mfa.secure_device_view.helper.step1.title") }), (0, import_jsx_runtime332.jsx)(Typography, { variant: "body_small", className: "mfa-qrcode-help-content__step__subtext", children: t2("dyn_mfa.secure_device_view.helper.step1.description") })] })] }), (0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__vertical-container", children: [(0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__step", children: [(0, import_jsx_runtime332.jsx)("div", { className: "mfa-qrcode-help-content__step__number", children: "2" }), (0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__step__instructions", children: [(0, import_jsx_runtime332.jsx)(Typography, { variant: "body_normal", color: "primary", className: "mfa-qrcode-help-content__step__title", children: t2("dyn_mfa.secure_device_view.helper.step2.title") }), (0, import_jsx_runtime332.jsx)(Typography, { variant: "body_small", className: "mfa-qrcode-help-content__step__subtext", children: t2("dyn_mfa.secure_device_view.helper.step2.description") })] })] }), (0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__step__nocopy-box", children: [(0, import_jsx_runtime332.jsx)(Typography, { className: "mfa-qrcode-help-content__step__nocopy-text", variant: "body_small", children: secret }), (0, import_jsx_runtime332.jsx)(CopyButton, { textToCopy: secret, children: (0, import_jsx_runtime332.jsx)(SvgCopy, { "data-testid": "copy-secret", onClick: (e2) => {
    e2.preventDefault();
  } }) })] })] }), (0, import_jsx_runtime332.jsx)(Divider, { text: "OR" }), (0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__vertical-container", children: [(0, import_jsx_runtime332.jsx)("div", { className: "mfa-qrcode-help-content__step", children: (0, import_jsx_runtime332.jsxs)("div", { className: "uri-section", children: [(0, import_jsx_runtime332.jsx)(Typography, { variant: "body_normal", color: "primary", className: "mfa-qrcode-help-content__step__title", children: t2("dyn_mfa.secure_device_view.helper.uri.title") }), (0, import_jsx_runtime332.jsx)(Typography, { className: "uri-subtext", variant: "body_small", children: t2("dyn_mfa.secure_device_view.helper.uri.description") })] }) }), (0, import_jsx_runtime332.jsxs)("div", { className: "mfa-qrcode-help-content__step__nocopy-box", children: [(0, import_jsx_runtime332.jsx)(Typography, { className: "mfa-qrcode-help-content__step__nocopy-text", variant: "body_small", children: uri }), (0, import_jsx_runtime332.jsx)(CopyButton, { textToCopy: uri, children: (0, import_jsx_runtime332.jsx)(SvgCopy, { "data-testid": "copy-uri", onClick: (e2) => {
    e2.preventDefault();
  } }) })] })] })] }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SandboxMaximumThresholdReached/SandboxMaximumThresholdReached.js
var import_jsx_runtime333 = __toESM(require_jsx_runtime(), 1);
var import_react363 = __toESM(require_react(), 1);
var import_react_dom205 = __toESM(require_react_dom(), 1);
var import_qrcode201 = __toESM(require_browser(), 1);
var SandboxMaximumThresholdReached = () => {
  const { t: t2 } = useTranslation();
  const { goToInitialView } = useViewContext();
  const handleGoBack = () => {
    goToInitialView();
  };
  return (0, import_jsx_runtime333.jsxs)("div", { className: "sandbox-threshold__main", children: [(0, import_jsx_runtime333.jsx)(Typography, { variant: "title", color: "primary", className: "sandbox-threshold__title", children: t2("dyn_sandbox_maximum_threshold.title") }), (0, import_jsx_runtime333.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", className: "sandbox-threshold__description", children: t2("dyn_sandbox_maximum_threshold.description") }), (0, import_jsx_runtime333.jsx)(TypographyButton, { onClick: handleGoBack, className: "sandbox-threshold__button", expanded: true, buttonPadding: "large", children: t2("dyn_sandbox_maximum_threshold.button") })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/GlobalWalletConfirmView/GlobalWalletConfirmView.js
var import_jsx_runtime334 = __toESM(require_jsx_runtime(), 1);
var import_react364 = __toESM(require_react(), 1);
var import_react_dom206 = __toESM(require_react_dom(), 1);
var import_qrcode202 = __toESM(require_browser(), 1);
var GlobalWalletConfirmView = ({ pairingInfo, onConfirm, onCancel }) => {
  const { t: t2 } = useTranslation();
  const [imageError, setImageError] = (0, import_react364.useState)(false);
  const handleImageError = () => {
    setImageError(true);
  };
  return (0, import_jsx_runtime334.jsx)("div", { className: "global-wallet-confirm", children: (0, import_jsx_runtime334.jsx)("div", { className: "popup-content", children: (0, import_jsx_runtime334.jsxs)("div", { className: "wallet-connection-view", children: [!imageError && (0, import_jsx_runtime334.jsx)("img", { src: pairingInfo.icons[0], alt: `${pairingInfo.name} icon`, className: "dapp-icon", onError: handleImageError }), (0, import_jsx_runtime334.jsx)(Typography, { className: "connection-title", variant: "title", font: "bold", children: t2("global_wallet.confirm.description", { name: pairingInfo.name }) }), (0, import_jsx_runtime334.jsx)(Typography, { variant: "body_normal", className: "dapp-url", children: pairingInfo.url }), (0, import_jsx_runtime334.jsxs)("div", { className: "button-group", children: [(0, import_jsx_runtime334.jsx)(TypographyButton, { buttonClassName: "cancel-button", onClick: onCancel, type: "submit", buttonPadding: "large", children: t2("global_wallet.confirm.cancel_button") }), (0, import_jsx_runtime334.jsx)(TypographyButton, { buttonClassName: "connect-global-button", onClick: onConfirm, type: "submit", buttonPadding: "large", typographyProps: {
    color: "white"
  }, children: t2("global_wallet.confirm.connect_button") })] })] }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/GlobalWalletInfoView/GlobalWalletInfoView.js
var import_jsx_runtime335 = __toESM(require_jsx_runtime(), 1);
var import_react365 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/blue-walletconnect.js
var React84 = __toESM(require_react(), 1);
var _g15;
var _defs12;
var _excluded70 = ["title", "titleId"];
function _extends77() {
  _extends77 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends77.apply(this, arguments);
}
function _objectWithoutProperties70(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose73(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose73(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgBlueWalletconnect = function SvgBlueWalletconnect2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties70(_ref2, _excluded70);
  return React84.createElement("svg", _extends77({
    width: 12,
    height: 12,
    viewBox: "0 0 12 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React84.createElement("title", {
    id: titleId
  }, title2) : null, _g15 || (_g15 = React84.createElement("g", {
    clipPath: "url(#blue-walletconnect_svg__a)"
  }, React84.createElement("path", {
    d: "M6 12A6 6 0 1 0 6 0a6 6 0 0 0 0 12Z",
    fill: "#4084ED"
  }), React84.createElement("path", {
    d: "M3.343 4.286a3.761 3.761 0 0 1 5.314 0l.176.176a.186.186 0 0 1 0 .265l-.603.603a.096.096 0 0 1-.133 0l-.243-.244a2.624 2.624 0 0 0-3.708 0l-.26.26a.096.096 0 0 1-.132 0l-.606-.6a.186.186 0 0 1 0-.266l.195-.194Zm6.563 1.248.538.537a.185.185 0 0 1 0 .265L8.018 8.757a.187.187 0 0 1-.264 0L6.034 7.04a.047.047 0 0 0-.068 0l-1.72 1.718a.187.187 0 0 1-.264 0l-2.426-2.42a.186.186 0 0 1 0-.266l.538-.537a.187.187 0 0 1 .265 0l1.72 1.718a.047.047 0 0 0 .067 0l1.72-1.718a.187.187 0 0 1 .265 0l1.72 1.718a.047.047 0 0 0 .068 0l1.72-1.718a.19.19 0 0 1 .267 0Z",
    fill: "#fff"
  }))), _defs12 || (_defs12 = React84.createElement("defs", null, React84.createElement("clipPath", {
    id: "blue-walletconnect_svg__a"
  }, React84.createElement("path", {
    fill: "#fff",
    d: "M0 0h12v12H0z"
  })))));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/GlobalWalletInfoView/GlobalWalletInfoView.js
var InlineIconTypography = ({ children }) => (0, import_jsx_runtime335.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", children: (0, import_jsx_runtime335.jsx)("span", { className: "inline-icon-text", children }) });
var GlobalWalletInfoView = () => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime335.jsx)("div", { className: "info-card", children: (0, import_jsx_runtime335.jsxs)("div", { className: "wrapper", children: [(0, import_jsx_runtime335.jsx)(Typography, { variant: "body_small", weight: "bold", color: "primary", as: "h2", children: "How do I find the URI or QR code?" }), (0, import_jsx_runtime335.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", children: t2("global_wallet.help.step.1") }), (0, import_jsx_runtime335.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", children: t2("global_wallet.help.step.2") }), (0, import_jsx_runtime335.jsxs)(InlineIconTypography, { children: ["3. Open", " ", (0, import_jsx_runtime335.jsxs)("span", { className: "nowrap", children: ["WalletConnect ", (0, import_jsx_runtime335.jsx)(SvgBlueWalletconnect, {})] }), "from the list, this should show a QR code to scan"] }), (0, import_jsx_runtime335.jsxs)(InlineIconTypography, { children: ["4. If you are not using the QR code, locate and click", (0, import_jsx_runtime335.jsxs)("span", { className: "nowrap", children: [(0, import_jsx_runtime335.jsx)(SvgCopy, {}), " to copy"] }), " ", "the URI code"] })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/viewToComponentMap.js
var import_qrcode204 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyNewDomainDetectedView/PasskeyNewDomainDetectedView.js
var import_jsx_runtime336 = __toESM(require_jsx_runtime(), 1);
var import_react366 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/domain.js
var React85 = __toESM(require_react(), 1);
var _path66;
var _excluded71 = ["title", "titleId"];
function _extends78() {
  _extends78 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends78.apply(this, arguments);
}
function _objectWithoutProperties71(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose74(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose74(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgDomain = function SvgDomain2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties71(_ref2, _excluded71);
  return React85.createElement("svg", _extends78({
    width: 65,
    height: 64,
    viewBox: "0 0 65 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React85.createElement("title", {
    id: titleId
  }, title2) : null, _path66 || (_path66 = React85.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32.5 64c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32C14.827 0 .5 14.327.5 32c0 17.673 14.327 32 32 32Zm-4.928-29.305h9.717c-.207 4.908-1.087 9.168-2.3 12.206-.7 1.756-1.433 2.9-2.036 3.54-.245.26-.42.387-.523.448-.102-.06-.277-.189-.522-.449-.603-.638-1.336-1.783-2.037-3.539-1.213-3.038-2.092-7.298-2.3-12.206Zm2.3-16.655c-1.242 3.108-2.134 7.497-2.314 12.55h9.744c-.18-5.053-1.071-9.442-2.313-12.55-.7-1.756-1.433-2.9-2.036-3.54-.245-.26-.42-.388-.523-.449-.102.061-.277.19-.522.45-.603.638-1.336 1.783-2.037 3.539ZM14.5 30.59h8.951c.216-6.53 1.541-12.27 3.503-16.036C20.23 16.789 15.22 23.03 14.5 30.59Zm.036 4.105h8.928c.25 6.387 1.563 11.993 3.49 15.692-6.622-2.201-11.582-8.288-12.418-15.692Zm35.789 0h-8.928c-.25 6.387-1.563 11.993-3.49 15.692 6.621-2.201 11.581-8.288 12.418-15.692Zm.125-2.224v.066-.133.066Zm-9.04-1.88h8.95c-.719-7.56-5.73-13.802-12.454-16.037 1.962 3.766 3.288 9.507 3.503 16.036Zm-9.09 20.35c0-.001.008-.004.023-.007-.015.006-.023.008-.023.007Zm.198-.007a.072.072 0 0 1 .023.007s-.008-.001-.023-.007ZM32.541 14s-.008.004-.023.007c.015-.006.023-.008.023-.007Zm-.198.007A.068.068 0 0 1 32.32 14s.008.001.023.007Z",
    fill: "#4779FF"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/Passkey/PasskeyNewDomainDetectedView/PasskeyNewDomainDetectedView.js
var import_react_dom207 = __toESM(require_react_dom(), 1);
var import_qrcode203 = __toESM(require_browser(), 1);
var PasskeyNewDomainDetectedView = () => {
  const { t: t2 } = useTranslation();
  const { projectSettings } = useInternalDynamicContext();
  const supportedAuthenticators = (0, import_react366.useMemo)(() => {
    var _a;
    const supportedAuths = getEnabledEmbeddedWalletsAuthenticators((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.supportedSecurityMethods);
    return Object.keys(supportedAuths).filter((auth) => auth !== "email");
  }, [projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets]);
  return (0, import_jsx_runtime336.jsxs)(import_jsx_runtime336.Fragment, { children: [(0, import_jsx_runtime336.jsx)(ModalHeader, { children: (0, import_jsx_runtime336.jsx)(Typography, { as: "h1", variant: "title", color: "primary", "data-testid": "dynamic-auth-modal-heading", className: "header__typography", copykey: "dyn_passkey_new_domain_detected.title", children: t2("dyn_passkey_new_domain_detected.title") }) }), (0, import_jsx_runtime336.jsxs)("div", { className: "passkey-new-domain-detected", children: [(0, import_jsx_runtime336.jsx)(SvgDomain, { className: "passkey-new-domain-detected__header" }), (0, import_jsx_runtime336.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", children: t2("dyn_passkey_new_domain_detected.description") }), (0, import_jsx_runtime336.jsx)(EmbeddedAuthChoiceCards, { supportedAuthenticators }), (0, import_jsx_runtime336.jsx)(NeedHelpSection, { isRecoveryFlow: true })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/viewToComponentMap.js
var viewToComponentMap = {
  "access-blocked": AccessBlockedView,
  "account-exists": AccountExistsView,
  "bridge-next-wallet-connection": BridgeNextWalletConnectionView,
  "bridge-summary": BridgeSummaryView,
  "bridge-welcome": BridgeWelcomeView,
  captcha: CaptchaVerifyUser,
  "chainalysis-blocked-wallet": NoAccess,
  "collect-user-data": CollectUserDataView,
  "collect-user-data-login-no-wallet": CollectUserDataViewNoWallet,
  "create-password-view": CreatePasswordView,
  "email-wallet-otp-verification-view": EmailWalletOTPVerificationView,
  "embedded-reveal-account-view": EmbeddedRevealView,
  "embedded-reveal-view": EmbeddedRevealView,
  "embedded-wallet-auth-choice": EmbeddedAuthChoice,
  "farcaster-connect-view": FarcasterConnectView,
  "gate-blocked-wallet": NoAccess,
  "global-wallet-confirm": GlobalWalletConfirmView,
  "global-wallet-info": GlobalWalletInfoView,
  "login-with-email-or-wallet": LoginView,
  "login-with-email-or-wallet-full-wallet-list": WalletList,
  "login-with-email-verification": EmailVerification,
  "login-with-sms-verification": SmsVerification,
  "login-with-wallet-only": LoginView,
  "merge-user-accounts": MergeUserAccountsView,
  "merge-user-accounts-conflicts": MergeUserAccountsConflictsView,
  "merge-user-accounts-with-same-email": MergeUserAccountsWithSameEmailView,
  "mfa-choose-device": MfaChooseDeviceView,
  "mfa-display-backup-codes": MfaDisplayBackupCodesView,
  "mfa-recovery": MfaRecoveryView,
  "mfa-secure-device": MfaSecureDeviceView,
  "mfa-secure-device-help": MfaSecureDeviceHelper,
  "mfa-verification": MfaVerificationView,
  "multi-wallet-wallet-list": WalletList,
  "network-not-supported": NetworkNotSupported,
  "network-not-supported-manual": NetworkNotSupportedSwitchManual,
  "no-access": NoAccess,
  "no-qr-not-installed": NoQrNotInstalledView,
  "passkey-intro": PasskeyIntroView,
  "passkey-new-domain-detected": PasskeyNewDomainDetectedView,
  "passkey-recovery-add-email": AddRecoveryEmail,
  "passkey-recovery-bundle": PasskeyBundleRecovery,
  "passkey-recovery-complete": PasskeyCompleteRecovery,
  "passkey-recovery-start": PasskeyInitRecovery,
  "pending-connect": PendingConnectView,
  "pending-signature": PendingSignatureView,
  "pending-signature-without-back-button": PendingSignatureView,
  "qr-code": QrCodeView,
  "rename-passkey": RenamePasskeyView,
  "sandbox-maximum-threshold-reached": SandboxMaximumThresholdReached,
  "select-hardware-wallet": SelectHardwareWalletView,
  "select-wallet-in-wallet-group": SelectWalletInWalletGroupView,
  "social-redirect-view": SocialRedirectView,
  "social-wrong-account": SocialWrongAccountView,
  "verify-email": EmailVerification,
  "verify-sms": SmsVerification,
  "wait-for-email-confirmation-view": EmailConfirmationWaitingView,
  "wallet-cannot-be-transferred": WalletCannotBeTransferredView,
  "wallet-claim-intro": CoinbaseMPCClaimIntro,
  "wallet-connect-mobile-wallets-list": () => (0, import_jsx_runtime337.jsx)(WalletList, { isWalletConnectList: true }),
  "wallet-group": WalletGroupView,
  "wallet-list": WalletList,
  "wallet-locked-view": WalletLockedView,
  "wallet-redirect-view": WalletRedirectView,
  "wallet-sign": WalletSignSpinnerView,
  "wallet-used": WalletUsedView
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/RenderView/RenderView.js
var RenderView = () => {
  const { view } = useViewContext();
  const Component4 = viewToComponentMap[view.type];
  return (0, import_jsx_runtime338.jsx)(Component4, Object.assign({}, view.props || {}));
};

// node_modules/@dynamic-labs/sdk-react-core/_virtual/style-inject.js
function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

// node_modules/@dynamic-labs/sdk-react-core/src/lib/main.global.js
var css_248z2 = '@layer dynamic-sdk-styles{#argent-mobile-modal-overlay,iframe[src*="wallet-dev.blocto.app"],iframe[src*="wallet-staging.blocto.app"],iframe[src*="wallet-testnet.blocto.app"],iframe[src*="wallet.blocto.app"]{z-index:2147483647!important}iframe[id*=dyn-passkey-recovery-element-id],iframe[id*=dyn-secure-enclave-element-id]{display:none!important}#pera-wallet-connect-modal-wrapper{position:relative;z-index:2147483647!important}@font-face{font-display:swap;font-family:DM Sans;font-style:normal;font-weight:400;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-400-normal.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-400-normal.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:italic;font-weight:400;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-400-italic.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-400-italic.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:normal;font-weight:500;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-500-normal.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-500-normal.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:italic;font-weight:500;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-500-italic.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-500-italic.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:normal;font-weight:700;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-700-normal.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-700-normal.woff) format("woff")}@font-face{font-display:swap;font-family:DM Sans;font-style:italic;font-weight:700;src:url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-700-italic.woff2) format("woff2"),url(https://cdn.jsdelivr.net/npm/@fontsource/dm-sans/files/dm-sans-latin-700-italic.woff) format("woff")}@layer light-theme-default{:root{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#f7f7f9;--dynamic-base-2:#fff;--dynamic-base-3:#eeeef1;--dynamic-base-4:#e7e8ed;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#30a67b;--dynamic-success-2:#e3f7ef;--dynamic-border-radius:1.5rem;--dynamic-hover:rgba(22,37,77,.03);--dynamic-info-2:rgba(71,121,255,.1);--dynamic-error-1:#ff4646;--dynamic-error-2:rgba(255,70,70,.1);--dynamic-alert-1:#dd8500;--dynamic-alert-2:#faedd9;--dynamic-footer-background-color:#fff;--dynamic-footer-text-color:#383c48;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.2) 20%,hsla(0,0%,100%,.5) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(24,27,34,.15);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#0047ff;--dynamic-text-primary:#383c48;--dynamic-text-secondary:#7b7d86;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#abacb2;--dynamic-badge-background:#eeeef1;--dynamic-badge-color:#7b7d86;--dynamic-badge-primary-background:#e3f7ef;--dynamic-badge-primary-color:#30a67b;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#fff;--dynamic-search-bar-background-hover:#fff;--dynamic-search-bar-background-focus:#fff;--dynamic-search-bar-border:0.0625rem solid #eeeef1;--dynamic-search-bar-border-hover:0.0625rem solid #e7e8ed;--dynamic-search-bar-border-focus:0.0625rem solid #e7e8ed;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#fff;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#fff;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#383c48;--dynamic-tooltip-text-color:#fff;--dynamic-button-border-radius:0.75rem;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#fff;--dynamic-button-primary-background:#fff;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #e7e8ed;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#f7f8fa;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-connect-button-background:#fff;--dynamic-connect-button-background-hover:#fff;--dynamic-connect-button-color:#383c48;--dynamic-connect-button-border:0.0625rem solid #e7e8ed;--dynamic-connect-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-connect-button-color-hover:#383c48;--dynamic-connect-button-border-hover:0.0625rem solid #e7e8ed;--dynamic-connect-button-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #e7e8ed;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme-brand=bold],:root[data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme-brand=subtle],:root[data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#abacb2}@media (prefers-color-scheme:light){:root [data-dynamic-theme=auto]{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#f7f7f9;--dynamic-base-2:#fff;--dynamic-base-3:#eeeef1;--dynamic-base-4:#e7e8ed;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#30a67b;--dynamic-success-2:#e3f7ef;--dynamic-border-radius:1.5rem;--dynamic-hover:rgba(22,37,77,.03);--dynamic-info-2:rgba(71,121,255,.1);--dynamic-error-1:#ff4646;--dynamic-error-2:rgba(255,70,70,.1);--dynamic-alert-1:#dd8500;--dynamic-alert-2:#faedd9;--dynamic-footer-background-color:#fff;--dynamic-footer-text-color:#383c48;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.2) 20%,hsla(0,0%,100%,.5) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(24,27,34,.15);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#0047ff;--dynamic-text-primary:#383c48;--dynamic-text-secondary:#7b7d86;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#abacb2;--dynamic-badge-background:#eeeef1;--dynamic-badge-color:#7b7d86;--dynamic-badge-primary-background:#e3f7ef;--dynamic-badge-primary-color:#30a67b;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#fff;--dynamic-search-bar-background-hover:#fff;--dynamic-search-bar-background-focus:#fff;--dynamic-search-bar-border:0.0625rem solid #eeeef1;--dynamic-search-bar-border-hover:0.0625rem solid #e7e8ed;--dynamic-search-bar-border-focus:0.0625rem solid #e7e8ed;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#fff;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#fff;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#383c48;--dynamic-tooltip-text-color:#fff;--dynamic-button-border-radius:0.75rem;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#fff;--dynamic-button-primary-background:#fff;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #e7e8ed;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#f7f8fa;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-connect-button-background:#fff;--dynamic-connect-button-background-hover:#fff;--dynamic-connect-button-color:#383c48;--dynamic-connect-button-border:0.0625rem solid #e7e8ed;--dynamic-connect-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-connect-button-color-hover:#383c48;--dynamic-connect-button-border-hover:0.0625rem solid #e7e8ed;--dynamic-connect-button-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #e7e8ed;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme=auto] [data-dynamic-theme-brand=bold],:root [data-dynamic-theme=auto][data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme=auto] [data-dynamic-theme-brand=subtle],:root [data-dynamic-theme=auto][data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#abacb2}}:root [data-dynamic-theme=light]{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#f7f7f9;--dynamic-base-2:#fff;--dynamic-base-3:#eeeef1;--dynamic-base-4:#e7e8ed;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#30a67b;--dynamic-success-2:#e3f7ef;--dynamic-border-radius:1.5rem;--dynamic-hover:rgba(22,37,77,.03);--dynamic-info-2:rgba(71,121,255,.1);--dynamic-error-1:#ff4646;--dynamic-error-2:rgba(255,70,70,.1);--dynamic-alert-1:#dd8500;--dynamic-alert-2:#faedd9;--dynamic-footer-background-color:#fff;--dynamic-footer-text-color:#383c48;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.2) 20%,hsla(0,0%,100%,.5) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(24,27,34,.15);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#0047ff;--dynamic-text-primary:#383c48;--dynamic-text-secondary:#7b7d86;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#abacb2;--dynamic-badge-background:#eeeef1;--dynamic-badge-color:#7b7d86;--dynamic-badge-primary-background:#e3f7ef;--dynamic-badge-primary-color:#30a67b;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#fff;--dynamic-search-bar-background-hover:#fff;--dynamic-search-bar-background-focus:#fff;--dynamic-search-bar-border:0.0625rem solid #eeeef1;--dynamic-search-bar-border-hover:0.0625rem solid #e7e8ed;--dynamic-search-bar-border-focus:0.0625rem solid #e7e8ed;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#fff;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#fff;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#383c48;--dynamic-tooltip-text-color:#fff;--dynamic-button-border-radius:0.75rem;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#fff;--dynamic-button-primary-background:#fff;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #e7e8ed;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#f7f8fa;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-connect-button-background:#fff;--dynamic-connect-button-background-hover:#fff;--dynamic-connect-button-color:#383c48;--dynamic-connect-button-border:0.0625rem solid #e7e8ed;--dynamic-connect-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-connect-button-color-hover:#383c48;--dynamic-connect-button-border-hover:0.0625rem solid #e7e8ed;--dynamic-connect-button-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #e7e8ed;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme=light] [data-dynamic-theme-brand=bold],:root [data-dynamic-theme=light][data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme=light] [data-dynamic-theme-brand=subtle],:root [data-dynamic-theme=light][data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#abacb2}}@layer dark-theme-default{@media (prefers-color-scheme:dark){:root [data-dynamic-theme=auto]{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#0c0e13;--dynamic-base-2:#1b1d22;--dynamic-base-3:#24272e;--dynamic-base-4:#282b33;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#79ffcf;--dynamic-success-2:#192d2c;--dynamic-border-radius:1.5rem;--dynamic-hover:hsla(0,0%,100%,.1);--dynamic-error-1:#ff6a6a;--dynamic-error-2:hsla(0,100%,71%,.2);--dynamic-alert-1:#e2a140;--dynamic-alert-2:#2b2621;--dynamic-footer-background-color:#0c0e13;--dynamic-footer-text-color:#fbfcff;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.01) 20%,hsla(0,0%,100%,.05) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(0,0,0,.25);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#69a5ff;--dynamic-text-primary:#fbfcff;--dynamic-text-secondary:#a8aab0;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#6f7177;--dynamic-badge-background:#24272e;--dynamic-badge-color:#a8aab0;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#1b1d22;--dynamic-search-bar-background-hover:#1b1d22;--dynamic-search-bar-background-focus:#1b1d22;--dynamic-search-bar-border:0.0625rem solid #24272e;--dynamic-search-bar-border-hover:0.0625rem solid #282b33;--dynamic-search-bar-border-focus:0.0625rem solid #282b33;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#24272e;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#282b33;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#fbfcff;--dynamic-tooltip-text-color:#0c0e13;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#1b1d22;--dynamic-button-primary-background:#1b1d22;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #282b33;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#1a1c21;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-connect-button-background:#1b1d22;--dynamic-connect-button-background-hover:#1b1d22;--dynamic-connect-button-color:#fbfcff;--dynamic-connect-button-border:0.0625rem solid #282b33;--dynamic-connect-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-connect-button-color-hover:#fbfcff;--dynamic-connect-button-border-hover:0.0625rem solid #282b33;--dynamic-connect-button-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #282b33;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme=auto] [data-dynamic-theme-brand=bold],:root [data-dynamic-theme=auto][data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fbfcff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme=auto] [data-dynamic-theme-brand=subtle],:root [data-dynamic-theme=auto][data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#6f7177;--dynamic-footer-icon-color:#6f7177}}:root [data-dynamic-theme=dark]{--dynamic-font-family-primary:"DM Sans",sans-serif;--dynamic-search-border-radius:1rem;--dynamic-font-family-numbers:"Roboto Mono",monospace,sans-serif;--dynamic-base-1:#0c0e13;--dynamic-base-2:#1b1d22;--dynamic-base-3:#24272e;--dynamic-base-4:#282b33;--dynamic-brand-hover-color:linear-gradient(0deg,rgba(0,0,0,.08),rgba(0,0,0,.08)),#4779ff;--dynamic-brand-primary-color:#4779ff;--dynamic-brand-secondary-color:rgba(71,121,255,.15);--dynamic-success-1:#79ffcf;--dynamic-success-2:#192d2c;--dynamic-border-radius:1.5rem;--dynamic-hover:hsla(0,0%,100%,.1);--dynamic-error-1:#ff6a6a;--dynamic-error-2:hsla(0,100%,71%,.2);--dynamic-alert-1:#e2a140;--dynamic-alert-2:#2b2621;--dynamic-footer-background-color:#0c0e13;--dynamic-footer-text-color:#fbfcff;--dynamic-footer-icon-color:#4779ff;--dynamic-loading-animation-gradient:linear-gradient(90deg,hsla(0,0%,100%,0),hsla(0,0%,100%,.01) 20%,hsla(0,0%,100%,.05) 60%,hsla(0,0%,100%,0));--dynamic-overlay:rgba(0,0,0,.25);--dynamic-shadow-down-1:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-shadow-down-2:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-shadow-down-3:0 1.5rem 2rem -1.5rem rgba(0,0,0,.24);--dynamic-shadow-up-1:0 -0.5rem 3rem -0.5rem rgba(109,121,165,.16);--dynamic-text-link:#69a5ff;--dynamic-text-primary:#fbfcff;--dynamic-text-secondary:#a8aab0;--dynamic-text-size-body-mini:0.6875rem;--dynamic-text-size-body-normal:0.9375rem;--dynamic-text-size-body-small:0.75rem;--dynamic-text-size-button-primary:0.875rem;--dynamic-text-size-button-secondary:0.75rem;--dynamic-text-size-numbers-big:0.875rem;--dynamic-text-size-numbers-medium:0.75rem;--dynamic-text-size-title:1.125rem;--dynamic-text-tertiary:#6f7177;--dynamic-badge-background:#24272e;--dynamic-badge-color:#a8aab0;--dynamic-badge-dot-background:#4779ff;--dynamic-search-bar-background:#1b1d22;--dynamic-search-bar-background-hover:#1b1d22;--dynamic-search-bar-background-focus:#1b1d22;--dynamic-search-bar-border:0.0625rem solid #24272e;--dynamic-search-bar-border-hover:0.0625rem solid #282b33;--dynamic-search-bar-border-focus:0.0625rem solid #282b33;--dynamic-modal-border: ;--dynamic-modal-width:22.5rem;--dynamic-modal-padding:1.5rem;--dynamic-modal-backdrop-background:rgba(0,0,0,.25);--dynamic-modal-backdrop-filter:blur(4px);--dynamic-wallet-list-tile-padding:0.75rem;--dynamic-wallet-list-tile-gap:0.375rem;--dynamic-wallet-list-max-height:16.25rem;--dynamic-wallet-list-tile-background:#24272e;--dynamic-wallet-list-tile-border: ;--dynamic-wallet-list-tile-shadow:0 0.0625rem 0.125rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-background-hover:#282b33;--dynamic-wallet-list-tile-border-hover: ;--dynamic-wallet-list-tile-border-radius:0.75rem;--dynamic-wallet-list-tile-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-wallet-list-tile-animation-duration:150ms;--dynamic-tooltip-color:#fbfcff;--dynamic-tooltip-text-color:#0c0e13;--dynamic-initial-view-content-padding:0rem 1.5rem 1.5rem;--dynamic-button-primary-hover:#1b1d22;--dynamic-button-primary-background:#1b1d22;--dynamic-button-primary-font-size:0.875rem;--dynamic-button-primary-padding:0;--dynamic-button-primary-border:0.0625rem solid #282b33;--dynamic-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-button-secondary-hover:#1a1c21;--dynamic-button-secondary-background:transparent;--dynamic-button-secondary-font-size:0.75rem;--dynamic-button-secondary-padding:0;--dynamic-button-secondary-border:0.0625rem solid transparent;--dynamic-connect-button-background:#1b1d22;--dynamic-connect-button-background-hover:#1b1d22;--dynamic-connect-button-color:#fbfcff;--dynamic-connect-button-border:0.0625rem solid #282b33;--dynamic-connect-button-shadow:0px 2px 3px 0px rgba(24,39,75,.08);--dynamic-connect-button-color-hover:#fbfcff;--dynamic-connect-button-border-hover:0.0625rem solid #282b33;--dynamic-connect-button-shadow-hover:0 0.75rem 1.25rem -0.375rem rgba(24,39,75,.02),0 1rem 1.625rem -0.25rem rgba(24,39,75,.04);--dynamic-search-padding:0 1.5rem 0.5rem;--dynamic-layout-content-padding:0 1.5rem 1.5rem;--dynamic-layout-content-error-padding:1.5rem 1.5rem 1.5rem;--dynamic-footer-border-top:0.0625rem solid #282b33;--dynamic-footer-padding:0.75rem 1.5rem 0.75rem;--dynamic-footer-background:transparent;--dynamic-header-border-bottom:1px solid transparent;--dynamic-header-padding:1.5rem 1.5rem 1.25rem;--dynamic-header-background:transparent}:root [data-dynamic-theme=dark] [data-dynamic-theme-brand=bold],:root [data-dynamic-theme=dark][data-dynamic-theme-brand=bold]{--dynamic-footer-text-color:#fbfcff;--dynamic-footer-icon-color:rgba(247,247,249,.75);--dynamic-footer-arrow-color:rgba(247,247,249,.75)}:root [data-dynamic-theme=dark] [data-dynamic-theme-brand=subtle],:root [data-dynamic-theme=dark][data-dynamic-theme-brand=subtle]{--dynamic-footer-arrow-color:#6f7177;--dynamic-footer-icon-color:#6f7177}}.dynamic-shadow-dom{position:relative}#dynamic-tooltips{left:0;position:absolute;top:0}@supports (overflow:clip){.dynamic-no-scroll{overflow:clip}}@supports not (overflow:clip){.dynamic-no-scroll{overflow:hidden}}}';
styleInject(css_248z2);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useVerifyOnAwaitingSignature/useVerifyOnAwaitingSignature.js
var import_react369 = __toESM(require_react(), 1);
var import_jsx_runtime339 = __toESM(require_jsx_runtime(), 1);
var import_react_dom210 = __toESM(require_react_dom(), 1);
var import_qrcode206 = __toESM(require_browser(), 1);
var useVerifyOnAwaitingSignature = () => {
  const { awaitingSignatureState, multiWalletWidgetState, setMultiWalletWidgetState, legacyIsVerifying, setLegacyIsVerifying, selectedWalletConnector } = useInternalDynamicContext();
  const triggerConnectAndSign = useConnectAndSign();
  const isVerifying = (0, import_react369.useRef)(false);
  const runConnectAndSign = (0, import_react369.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    logger2.debug("runConnectAndSign", {
      selectedWalletConnector
    });
    if (!selectedWalletConnector) {
      return;
    }
    isVerifying.current = true;
    setLegacyIsVerifying(true);
    try {
      yield triggerConnectAndSign({
        walletConnector: selectedWalletConnector
      });
    } catch (e2) {
      logger2.error(e2);
    }
    setMultiWalletWidgetState("idle");
    setLegacyIsVerifying(false);
    isVerifying.current = false;
  }), [
    selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.key,
    setLegacyIsVerifying,
    setMultiWalletWidgetState,
    triggerConnectAndSign
  ]);
  (0, import_react369.useEffect)(() => {
    if (!legacyIsVerifying && !isVerifying.current && multiWalletWidgetState === "awaiting_signature" && selectedWalletConnector && awaitingSignatureState === "linking_new_wallet" && !requiresTwoStepAuthentication(selectedWalletConnector)) {
      runConnectAndSign();
    }
  }, [
    runConnectAndSign,
    awaitingSignatureState,
    legacyIsVerifying,
    multiWalletWidgetState,
    selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.key,
    setLegacyIsVerifying,
    setMultiWalletWidgetState
  ]);
  useInternalDynamicEvents("triggerConnectAndSign", runConnectAndSign);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/Main.js
var viewsToDisableCloseOnOverlayClick = [
  "email-wallet-otp-verification-view",
  "social-redirect-view",
  "passkey-intro"
];
var Main = () => {
  const { selectedWalletConnector, linkedWallets, projectSettings, setShowAuthFlow, showAuthFlow, walletConnectorOptions, clearStatesOnBackClick, user, disconnectWallet, authMode, connectedWallets, handleLogOut } = useInternalDynamicContext();
  const { view, goToInitialView } = useViewContext();
  const { setDeniedAddress, setDeniedOauthProvider } = useAccessDeniedContext();
  const { setExistentAccountData } = useAccountExistsContext();
  const { setSocialProvider } = useSocialRedirectContext();
  usePreventPageScroll(showAuthFlow);
  const userWallets = useUserWallets();
  const handleClose = () => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (viewsToDisableCloseOnOverlayClick.includes(view.type))
      return;
    if ((_a = view.events) === null || _a === void 0 ? void 0 : _a.onClose) {
      view.events.onClose();
      return;
    }
    if ((view.type === "network-not-supported" || view.type === "network-not-supported-manual") && userWallets.length === 1) {
      yield handleLogOut();
    }
    if (view.type === "farcaster-connect-view") {
      setSocialProvider(void 0);
      dynamicEvents.emit("farcasterConnectCancelled");
    }
    setShowAuthFlow(false, { emitCancelAuth: true });
    setDeniedAddress("");
    setDeniedOauthProvider(void 0);
    setExistentAccountData(void 0);
    clearStatesOnBackClick();
  });
  const handleOnPortalExiting = (0, import_react370.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    const viewsToDisconnectWalletOnClose = [
      "network-not-supported",
      "network-not-supported-manual"
    ];
    if (!isConnectOnly(user, authMode) || !viewsToDisconnectWalletOnClose.includes(view.type) || !selectedWalletConnector)
      return;
    const walletByConnectorKey = connectedWallets.find((connectedWallet) => connectedWallet.connector.key === selectedWalletConnector.key);
    if (!walletByConnectorKey) {
      return;
    }
    if (!isSupportedNetwork({
      network: yield walletByConnectorKey.connector.getNetwork(),
      walletConnector: walletByConnectorKey.connector
    })) {
      disconnectWallet(walletByConnectorKey.id);
    }
  }), [
    selectedWalletConnector,
    authMode,
    connectedWallets,
    disconnectWallet,
    user,
    view
  ]);
  const handleOnPortalUnmount = (0, import_react370.useCallback)(() => {
    goToInitialView();
  }, [goToInitialView]);
  useVerifyOnAwaitingSignature();
  const { handleAlreadyConnectedWallet, handleCustodialWalletClick, handleInstalledExtensionClick, handleMobileWalletClick, handleUninstalledClick } = useWalletItemActions();
  const handleNewToWeb3WalletIntent = (walletConnector) => __awaiter(void 0, void 0, void 0, function* () {
    setShowAuthFlow(true);
    if (isSelectedWalletAlreadyConnected(linkedWallets, walletConnector, user)) {
      handleAlreadyConnectedWallet(walletConnector);
    } else if (walletConnector.canConnectViaCustodialService) {
      handleCustodialWalletClick(walletConnector);
    } else if (isMobile()) {
      handleMobileWalletClick(walletConnector);
    } else if (walletConnector.isInstalledOnBrowser()) {
      handleInstalledExtensionClick(walletConnector);
    } else {
      handleUninstalledClick(walletConnector);
    }
  });
  (0, import_react370.useEffect)(() => {
    const newToWeb3WalletKey = StorageService.getItem(NEWTOWEB3_WALLET_EXTENSION_FLAG_KEY);
    if ((walletConnectorOptions === null || walletConnectorOptions === void 0 ? void 0 : walletConnectorOptions.length) && newToWeb3WalletKey) {
      const wallet = walletConnectorOptions.find((wallet2) => wallet2.key === newToWeb3WalletKey);
      if (wallet === null || wallet === void 0 ? void 0 : wallet.walletConnector) {
        handleNewToWeb3WalletIntent(wallet.walletConnector);
      }
      StorageService.removeItem(NEWTOWEB3_WALLET_EXTENSION_FLAG_KEY);
    }
  }, [walletConnectorOptions]);
  const showDynamicAuth = showAuthFlow && Boolean(projectSettings);
  return (0, import_jsx_runtime340.jsx)(FooterAnimationContextProvider, { children: (0, import_jsx_runtime340.jsx)(Portal, { zIndex: authModalZIndex, isShown: showDynamicAuth, handleClose, withBackdrop: true, transitionEvents: {
    onExiting: handleOnPortalExiting,
    onUnmount: handleOnPortalUnmount
  }, children: (0, import_jsx_runtime340.jsx)(PopperProvider, { children: (0, import_jsx_runtime340.jsx)(DynamicAuthModal, { transitionProps: {
    isShown: showDynamicAuth
  }, onClose: handleClose, projectSettings, children: (0, import_jsx_runtime340.jsx)(RenderView, {}) }) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/app.js
var DynamicAuthFlow = () => (0, import_jsx_runtime341.jsx)(IsBrowser, { children: (0, import_jsx_runtime341.jsx)(Main, {}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useGlobalLoading/useGlobalLoading.js
var import_react371 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/lastAuthenticatedAccount/index.js
var lastAuthenticatedAccount = (dynamicJwtOrUser) => dynamicJwtOrUser.verifiedCredentials.find((account) => account.id === dynamicJwtOrUser.lastVerifiedCredentialId);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/useGlobalLoading/useGlobalLoading.js
var useGlobalLoading = ({ authMode, connectedInfo, connectedWallets, projectSettings, primaryWallet, user, walletBook, enableInstrumentation, appName, environmentId }) => {
  var _a, _b;
  const hasLoaded = (0, import_react371.useRef)(false);
  const loadingStart = (0, import_react371.useRef)((/* @__PURE__ */ new Date()).getTime());
  const { sessionValidation } = useLoadingAndLifecycle();
  const finishLoading = () => {
    if (hasLoaded.current)
      return;
    hasLoaded.current = true;
    logger2.logVerboseTroubleshootingMessage("SDK finished loading", {
      appName,
      authMode,
      connectedInfo,
      connectedWallets,
      enableInstrumentation,
      environmentId,
      primaryWallet,
      projectSettings,
      sessionValidation,
      user,
      walletBook
    });
    if (enableInstrumentation) {
      const loadingTime = (/* @__PURE__ */ new Date()).getTime() - loadingStart.current;
      logger2.instrument(`SDK loaded in (ms) ${loadingTime}`, {
        appName,
        environmentId,
        key: "sdkHasLoaded",
        primaryWalletId: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.id,
        time: loadingTime,
        userId: user === null || user === void 0 ? void 0 : user.userId
      });
    }
  };
  if (hasLoaded.current)
    return true;
  const hasWalletBookLoaded = Boolean(Object.keys((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {}).length);
  const isPrimaryWalletLoading = user && ((_b = lastAuthenticatedAccount(user)) === null || _b === void 0 ? void 0 : _b.format) === "blockchain" && !primaryWallet;
  const isConnectOnlyWalletsLoading = authMode === "connect-only" && connectedInfo && connectedWallets.length === 0;
  if (hasWalletBookLoaded && Boolean(projectSettings) && !isPrimaryWalletLoading && !isConnectOnlyWalletsLoading && sessionValidation)
    finishLoading();
  return hasLoaded.current;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/hooks/usePrefetch/usePrefetch.js
var import_jsx_runtime342 = __toESM(require_jsx_runtime(), 1);
var import_react372 = __toESM(require_react(), 1);
var usePrefetch = ({ as, href, id, type }) => {
  if (isSSR())
    return;
  const predefinedElement = document.head.querySelector(`#${id}`);
  if (predefinedElement)
    return;
  const element = document.createElement("link");
  element.setAttribute("id", id);
  element.setAttribute("rel", "prefetch");
  element.setAttribute("href", href);
  element.setAttribute("as", as);
  element.setAttribute("type", type);
  document.head.insertAdjacentElement("beforeend", element);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/DynamicContext.js
var import_react_dom244 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFetchNonce/useFetchNonce.js
var import_react373 = __toESM(require_react(), 1);
var import_jsx_runtime343 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/utils.js
var fetchNonce = (environmentId) => __awaiter(void 0, void 0, void 0, function* () {
  try {
    const res = yield sdkApi().getNonce({
      environmentId
    });
    return res.nonce;
  } catch (e2) {
    return void 0;
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/validators/validators.js
var validateLocalStorageExpiry = (data) => {
  if (!data)
    return false;
  const timeNow = (/* @__PURE__ */ new Date()).getTime();
  if (timeNow > data.expiry) {
    return false;
  }
  return true;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFetchNonce/useFetchNonce.js
var useFetchNonce = (environmentId, maxRetries = 2) => {
  const [lsNonce, setLsNonce, removeLsNonce] = useLocalStorage(NONCE_STORAGE_KEY, void 0, validateLocalStorageExpiry);
  const nonceExists = (lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value) !== "" && (lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value) !== void 0 ? true : false;
  if (lsNonce && lsNonce.environmentId && lsNonce.environmentId !== environmentId) {
    removeLsNonce();
  }
  usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    return fetchNonce(environmentId).then((response) => {
      if (!response)
        throw new DynamicError("Nonce is not defined");
      const expiry = (/* @__PURE__ */ new Date()).getTime() + 6e4 * 60 * 24;
      return { environmentId, expiry, value: response };
    });
  }), {
    deps: [environmentId, nonceExists],
    enabled: !nonceExists,
    initialData: void 0,
    onResolve: setLsNonce,
    retries: maxRetries
  });
  const consumeNonce = (0, import_react373.useCallback)(() => {
    const nonce = lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value;
    removeLsNonce();
    return nonce;
  }, [removeLsNonce, lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value]);
  return {
    consumeNonce: () => consumeNonce()
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSetWalletConnectorVerifiedCredentials/useSetWalletConnectorVerifiedCredentials.js
var useSetWalletConnectorVerifiedCredentials = (user, walletOptions) => {
  if (!user || !(walletOptions === null || walletOptions === void 0 ? void 0 : walletOptions.length))
    return;
  walletOptions.forEach((walletOption) => {
    walletOption.walletConnector.setVerifiedCredentials(user.verifiedCredentials);
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useValidateSession/useValidateSession.js
var import_react375 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useValidateSession/handleStoreAndEnvironmentMismatch/handleStoreAndEnvironmentMismatch.js
var handleStoreAndEnvironmentMismatch = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, logout }) {
  const storeEnvId = getEnvironmentId();
  if (!storeEnvId || environmentId === storeEnvId) {
    return true;
  }
  yield logout("store and environment are out of sync", {
    currentEnvId: environmentId,
    storedEnvId: storeEnvId
  });
  setEnvironmentId(environmentId);
  return false;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useValidateSession/handleUserDataOutOfSync/handleUserDataOutOfSync.js
var import_jsx_runtime344 = __toESM(require_jsx_runtime(), 1);
var import_react374 = __toESM(require_react(), 1);
var handleUserDataOutOfSync = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, logout }) {
  const cookieEnabled = isCookieEnabled();
  const authToken = getAuthToken();
  const user = getUser();
  if (authToken || !user) {
    return true;
  }
  if (user && !authToken && cookieEnabled) {
    try {
      yield getAuthenticatedUser({ environmentId });
    } catch (e2) {
      if (e2 instanceof CookieInvalidError) {
        yield logout("user auth cookie invalid", {
          authToken,
          user
        });
        return false;
      }
    }
    return true;
  }
  yield logout("user data out of sync", {
    authToken,
    user
  });
  return false;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useValidateSession/useValidateSession.js
var useValidateSession = ({ environmentId, handleLogOut }) => {
  const logout = (0, import_react375.useCallback)(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (reason, params) => __awaiter(void 0, void 0, void 0, function* () {
      logger2.debug(`Logging out due to invalid session - Reason: ${reason}`, Object.assign({}, params));
      return handleLogOut();
    }),
    [handleLogOut]
  );
  const validateSession = (0, import_react375.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    const params = { environmentId, logout };
    yield Promise.all([
      handleStoreAndEnvironmentMismatch(params),
      handleUserDataOutOfSync(params)
    ]);
    setLoadingAndLifecycle({ sessionValidation: true });
  }), [environmentId, logout]);
  useEffectOnce(() => {
    validateSession();
  });
  useInternalDynamicEvents("triggerSessionValidation", validateSession);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorOptions/useWalletConnectorOptions.js
var import_react379 = __toESM(require_react(), 1);
var import_jsx_runtime348 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/serializeWalletConnectors/serializeWalletConnectors.js
var import_jsx_runtime345 = __toESM(require_jsx_runtime(), 1);
var import_react376 = __toESM(require_react(), 1);
var serializeWalletConnectors = (walletConnectors) => {
  try {
    if (!walletConnectors)
      return void 0;
    return walletConnectors.map((connector) => connector.name);
  } catch (error) {
    logger2.error("error serializing walletConnectors", error);
    return void 0;
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorOptions/utils/verifyMagicIsSetup/verifyMagicIsSetup.js
var import_jsx_runtime346 = __toESM(require_jsx_runtime(), 1);
var import_react377 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorOptions/utils/errors/ConnectorSetupError.js
var ConnectorSetupError = class extends DynamicError {
  constructor(providerName, connectorName) {
    super(`${providerName} is enabled but ${connectorName} is not in your walletConnectors list. See https://docs.dynamic.xyz/react-sdk/wallet-connectors for more information.`);
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorOptions/utils/verifyMagicIsSetup/verifyMagicIsSetup.js
var magicEmailOtpWalletConnectorKey = "magicemailotp";
var magicSocialWalletConnectorKey = "magicsocial";
var verifyMagicIsSetup = (projectSettings, walletConnectors) => {
  var _a;
  const isMagicEnabled = isProviderEnabled((_a = projectSettings.providers) !== null && _a !== void 0 ? _a : [], ProviderEnum.MagicLink);
  const isMagicWalletConnectorPresent = walletConnectors.some(({ key }) => [magicEmailOtpWalletConnectorKey, magicSocialWalletConnectorKey].includes(key));
  if (isMagicEnabled && !isMagicWalletConnectorPresent) {
    throw new ConnectorSetupError("Magic", "MagicWalletConnectors");
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorOptions/utils/verifyZeroDevIsSetup/verifyZeroDevIsSetup.js
var import_jsx_runtime347 = __toESM(require_jsx_runtime(), 1);
var import_react378 = __toESM(require_react(), 1);
var zeroDevWalletConnectorKey = "zerodev";
var verifyZeroDevIsSetup = (projectSettings, walletConnectors) => {
  var _a;
  const isZeroDevEnabled = isProviderEnabled((_a = projectSettings.providers) !== null && _a !== void 0 ? _a : [], ProviderEnum.Zerodev);
  const isZeroDevWalletConnectorPresent = walletConnectors.some(({ key }) => key === zeroDevWalletConnectorKey);
  if (isZeroDevEnabled && !isZeroDevWalletConnectorPresent) {
    throw new ConnectorSetupError("ZeroDev", "ZeroDevSmartWalletConnectors");
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorOptions/utils/verifyRequiredConnectorsAreSetup/verifyRequiredConnectorsAreSetup.js
var verifyRequiredConnectorsAreSetup = (projectSettings, walletConnectors) => {
  verifyMagicIsSetup(projectSettings, walletConnectors);
  verifyZeroDevIsSetup(projectSettings, walletConnectors);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectorOptions/useWalletConnectorOptions.js
var useWalletConnectorOptions2 = ({ projectSettings, appLogoUrl, appName, coinbaseWalletPreference, deepLinkPreference, flowNetwork, mobileExperience, networkConfigurations, walletBook, walletUiUtils, walletConnectorsProp, walletConnectPreferredChains, walletConnectorExtensions }) => {
  const walletConnectorsKey = (0, import_react379.useMemo)(() => {
    var _a;
    return (_a = serializeWalletConnectors(walletConnectorsProp)) === null || _a === void 0 ? void 0 : _a.join(",");
  }, [walletConnectorsProp]);
  const walletBookLength = (0, import_react379.useMemo)(() => Object.keys(walletBook !== null && walletBook !== void 0 ? walletBook : {}).length, [walletBook]);
  const walletConnectorOptions = (0, import_react379.useMemo)(() => {
    if (!projectSettings || !Object.keys(walletBook !== null && walletBook !== void 0 ? walletBook : {}).length || !networkConfigurations)
      return [];
    return getWallets({
      getSupportedWalletOpts: {
        appLogoUrl,
        appName,
        coinbaseWalletPreference,
        deepLinkPreference,
        flowNetwork,
        mobileExperience,
        networkConfigurations,
        settings: projectSettings,
        skipMemo: true,
        walletBook,
        walletConnectPreferredChains,
        walletConnectorsProp: walletConnectorsProp !== null && walletConnectorsProp !== void 0 ? walletConnectorsProp : [],
        walletUiUtils
      },
      walletConnectorExtensions
    });
  }, [
    appLogoUrl,
    appName,
    projectSettings,
    walletConnectorsKey,
    walletConnectPreferredChains,
    flowNetwork,
    walletBookLength,
    networkConfigurations
  ]);
  (0, import_react379.useEffect)(() => {
    if (!projectSettings || walletConnectorOptions.length === 0)
      return;
    verifyRequiredConnectorsAreSetup(projectSettings, walletConnectorOptions.map(({ walletConnector }) => walletConnector));
    setWalletConnectorOptions(walletConnectorOptions);
  }, [walletConnectorOptions, projectSettings]);
  return { walletConnectorOptions };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/useWalletConnectors.js
var import_react380 = __toESM(require_react(), 1);
var import_jsx_runtime349 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/shouldManuallyReconnectOnRefresh/shouldManuallyReconnectOnRefresh.js
var shouldManuallyReconnectOnRefresh = (connector) => connector.connectedChain === "STARK" || connector.connectedChain === "FLOW";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/utils/convertLegacyPhantomLedgerConnector/convertLegacyPhantomLedgerConnector.js
var convertLegacyPhantomLedgerConnector = (account) => Object.assign(Object.assign({}, account), { walletName: "phantom", walletProperties: {
  hardwareWallet: HardwareWalletEnum.Ledger
} });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/utils/createLinkedWalletsFromWalletOptions/createLinkedWalletsFromWalletOptions.js
var createLinkedWalletsFromWalletOptions = ({ user, walletConnectorOptions, primaryWalletId }) => {
  if (!walletConnectorOptions || !user) {
    return [];
  }
  return user.verifiedCredentials.map(convertLegacyPhantomLedger).map((account) => {
    var _a;
    const wallet = findWalletOptionFor(account, walletConnectorOptions);
    if (!wallet)
      return null;
    if (account.id === primaryWalletId && shouldManuallyReconnectOnRefresh(wallet.walletConnector)) {
      wallet.walletConnector.connect();
    }
    if (isOwnerOfASmartWallet(account, user.verifiedCredentials)) {
      return null;
    }
    if (account.address && account.chain) {
      if (account.walletProvider === WalletProviderEnum.SmartContractWallet) {
        initializeSmartWallet({
          account,
          verifiedCredentials: user.verifiedCredentials,
          walletConnectorOptions
        });
      }
      return wallet.walletConnector.createWallet({
        additionalAddresses: account.walletAdditionalAddresses,
        address: account.address,
        chain: wallet.walletConnector.connectedChain,
        connector: wallet.walletConnector,
        id: account.id,
        isAuthenticated: true,
        key: (_a = account.walletName) !== null && _a !== void 0 ? _a : wallet.walletConnector.key
      });
    }
    return null;
  }).filter((wc) => wc !== null);
};
var convertLegacyPhantomLedger = (account) => {
  if (account.walletName === "phantomledger") {
    return convertLegacyPhantomLedgerConnector(account);
  }
  return account;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/utils/updateUserWalletsFromLinkedWallets/updateUserWalletsFromLinkedWallets.js
var updateUserWalletsFromLinkedWallets = (userWallets, authenticatedWallets) => {
  const userWalletsCopy = [...userWallets];
  const newWalletsAddresses = /* @__PURE__ */ new Set();
  for (const authenticatedWallet of authenticatedWallets) {
    newWalletsAddresses.add(authenticatedWallet.address);
    const respectiveIndex = userWalletsCopy.findIndex((wallet) => wallet.address === authenticatedWallet.address);
    if (respectiveIndex === -1) {
      userWalletsCopy.push(authenticatedWallet);
      continue;
    }
    userWalletsCopy[respectiveIndex] = authenticatedWallet;
  }
  return userWalletsCopy.filter((userWallet) => newWalletsAddresses.has(userWallet.address));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/useWalletConnectors.js
var useWalletConnectors = ({ authMode, connectedWallets, walletConnectorOptions, setMultiWalletWidgetState, primaryWalletId, setPrimaryWalletId, user, canHaveMultipleWalletsConnected }) => {
  const [showQrcodeModal, setShowQrcodeModal] = (0, import_react380.useState)(false);
  const linkedWallets = (0, import_react380.useMemo)(() => {
    if (!user) {
      return [];
    }
    return createLinkedWalletsFromWalletOptions({
      primaryWalletId,
      user,
      walletConnectorOptions
    });
  }, [user, primaryWalletId, walletConnectorOptions]);
  logger2.logVerboseTroubleshootingMessage("linkedWallets", linkedWallets);
  const wallets2 = (0, import_react380.useMemo)(() => {
    if (authMode === "connect-and-sign" && user) {
      return linkedWallets;
    }
    if (authMode === "connect-only" && linkedWallets.find((wallet) => isEmbeddedConnector(wallet.connector))) {
      return linkedWallets;
    }
    return connectedWallets !== null && connectedWallets !== void 0 ? connectedWallets : [];
  }, [authMode, connectedWallets, linkedWallets, user]);
  logger2.logVerboseTroubleshootingMessage("wallets", wallets2);
  (0, import_react380.useEffect)(() => wallets2.forEach((wallet) => {
    wallet.connector.initEventListener();
  }), [wallets2]);
  const { setUserWallets } = useInternalUserWallets();
  (0, import_react380.useEffect)(() => {
    logger2.logVerboseTroubleshootingMessage("[useWalletConnectors] will call setUserWallets", wallets2);
    setUserWallets((userWallets) => updateUserWalletsFromLinkedWallets(userWallets, wallets2));
  }, [setUserWallets, wallets2]);
  const primaryWallet = (0, import_react380.useMemo)(() => {
    var _a;
    return (_a = wallets2.find((wallet) => wallet.id === primaryWalletId)) !== null && _a !== void 0 ? _a : null;
  }, [primaryWalletId, wallets2]);
  const secondaryWallets = (0, import_react380.useMemo)(() => canHaveMultipleWalletsConnected ? wallets2.filter((wallet) => wallet.id !== primaryWalletId) : [], [primaryWalletId, wallets2, canHaveMultipleWalletsConnected]);
  const getSelectedWallet = (0, import_react380.useCallback)((walletId) => __awaiter(void 0, void 0, void 0, function* () {
    const newWallet = wallets2.find(({ id }) => id === walletId);
    if (!newWallet) {
      throw new DynamicError(`Wallet with id: ${walletId} not found`);
    }
    return newWallet;
  }), [wallets2]);
  const setPrimaryWallet = (0, import_react380.useCallback)((walletId) => __awaiter(void 0, void 0, void 0, function* () {
    const newPrimaryWallet = yield getSelectedWallet(walletId);
    if (!primaryWalletId) {
      yield newPrimaryWallet.connector.connect();
      setPrimaryWalletId(walletId);
      return;
    }
    if (primaryWalletId === walletId)
      return;
    if (isEmailWalletConnector(newPrimaryWallet.connector)) {
      const emailConnector = newPrimaryWallet.connector;
      const email = localStorage.getItem("magic-link-email");
      if (email) {
        emailConnector.setEmail(email);
      }
    }
    setPrimaryWalletId(walletId);
    setMultiWalletWidgetState("idle");
  }), [
    getSelectedWallet,
    primaryWalletId,
    setMultiWalletWidgetState,
    setPrimaryWalletId
  ]);
  return {
    primaryWallet,
    secondaryWallets,
    setPrimaryWallet,
    setShowQrcodeModal,
    showQrcodeModal,
    wallets: wallets2
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletUiUtils/useWalletUiUtils.js
var import_jsx_runtime367 = __toESM(require_jsx_runtime(), 1);
var import_react398 = __toESM(require_react(), 1);
var import_react_dom225 = __toESM(require_react_dom(), 1);
var import_qrcode221 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/CreatePasswordModal/CreatePasswordModal.js
var import_jsx_runtime352 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/ConfirmationModal/ConfirmationModal.js
var import_jsx_runtime350 = __toESM(require_jsx_runtime(), 1);
var import_react381 = __toESM(require_react(), 1);
var import_react_dom212 = __toESM(require_react_dom(), 1);
var import_qrcode208 = __toESM(require_browser(), 1);
var ConfirmationModal = ({ modalId, closeModal, show, zIndex, handleOnModalUnmount, children }) => (0, import_jsx_runtime350.jsx)(Portal, { elementId: modalId, handleClose: closeModal, isShown: show, zIndex: zIndex !== null && zIndex !== void 0 ? zIndex : authModalZIndex + 1, withBackdrop: true, transitionEvents: {
  onUnmount: handleOnModalUnmount
}, children: (0, import_jsx_runtime350.jsx)(Modal, { children: (0, import_jsx_runtime350.jsx)(ModalCard, { children }) }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConfirmationPortal/useConfirmationPortal.js
var import_react382 = __toESM(require_react(), 1);
var import_jsx_runtime351 = __toESM(require_jsx_runtime(), 1);
var useConfirmationPortal = ({ onResolve, onReject, defaultErrorMessage }) => {
  usePreventPageScroll(true);
  const [show, setShow] = (0, import_react382.useState)(true);
  const errorRef = (0, import_react382.useRef)(null);
  const successResponseRef = (0, import_react382.useRef)(null);
  const closeModal = (0, import_react382.useCallback)(() => {
    setShow(false);
  }, [setShow]);
  const handleOnModalUnmount = (0, import_react382.useCallback)(() => {
    if (successResponseRef.current) {
      return onResolve(successResponseRef.current);
    }
    const error = errorRef.current || new DynamicError(defaultErrorMessage || "Something went wrong");
    return onReject(error);
  }, [onResolve, onReject, defaultErrorMessage]);
  const onSuccess = (response, closePortal = true) => {
    errorRef.current = null;
    successResponseRef.current = response;
    if (closePortal) {
      closeModal();
    }
  };
  const onError = (error, closePortal = false) => {
    successResponseRef.current = null;
    errorRef.current = error;
    if (closePortal) {
      closeModal();
    }
  };
  return {
    closeModal,
    handleOnModalUnmount,
    onError,
    onSuccess,
    show
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/CreatePasswordModal/CreatePasswordModal.js
var import_react383 = __toESM(require_react(), 1);
var import_react_dom213 = __toESM(require_react_dom(), 1);
var import_qrcode209 = __toESM(require_browser(), 1);
var CreatePasswordModal = ({ onResolve, onReject, closeView }) => {
  const { onSuccess, onError, show, handleOnModalUnmount, closeModal } = useConfirmationPortal({
    defaultErrorMessage: "User canceled",
    onReject,
    onResolve
  });
  return (0, import_jsx_runtime352.jsx)(ConfirmationModal, { modalId: "create-password-modal", show, closeModal, handleOnModalUnmount, children: (0, import_jsx_runtime352.jsx)(CreatePasswordView, { closeView, onSuccess, onError }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/EnterPasswordModal/EnterPasswordModal.js
var import_jsx_runtime354 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/EnterPasswordView/EnterPasswordView.js
var import_jsx_runtime353 = __toESM(require_jsx_runtime(), 1);
var import_react384 = __toESM(require_react(), 1);
var import_react_dom214 = __toESM(require_react_dom(), 1);
var import_qrcode210 = __toESM(require_browser(), 1);
var EnterPasswordView = ({ mutation, onSuccess, onError, closeView = true }) => {
  const { setShowAuthFlow } = useInternalDynamicContext();
  const [password, setPassword] = (0, import_react384.useState)("");
  const [inputType, setInputType] = (0, import_react384.useState)("password");
  const { t: t2 } = useTranslation();
  const { mutate: handlePasswordSubmit, isLoading, hasError } = useMutation(() => mutation(password), {
    onFailure: onError,
    onSuccess: () => {
      if (closeView) {
        setShowAuthFlow(false);
      }
      onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(password);
    }
  });
  const onClose = () => {
    if (onError) {
      onError === null || onError === void 0 ? void 0 : onError(t2("dyn_enter_password.error.invalid_password"));
      return;
    }
    setShowAuthFlow(false);
  };
  const errorMessage = hasError ? t2("dyn_enter_password.error.invalid_password") : void 0;
  const closeButton = (0, import_jsx_runtime353.jsx)(IconButton, { onClick: onClose, type: "button", children: (0, import_jsx_runtime353.jsx)(SvgClose, {}) });
  const inputSuffix = (0, import_jsx_runtime353.jsx)(ToggleVisibilityButton, { initialState: inputType === "password", onClick: (hidden) => setInputType(hidden ? "password" : "text"), className: "enter-password-view__password-input__suffix-icon" });
  const onPasswordInputChange = (e2) => {
    const newPassword = e2.target.value;
    setPassword(newPassword);
  };
  return (0, import_jsx_runtime353.jsxs)(import_jsx_runtime353.Fragment, { children: [(0, import_jsx_runtime353.jsx)(ModalHeader, { trailing: closeButton, children: (0, import_jsx_runtime353.jsx)(Typography, { as: "h1", variant: "title", color: "primary", className: "header__typography", copykey: "dyn_enter_password.title", children: t2("dyn_enter_password.title") }) }), (0, import_jsx_runtime353.jsx)("div", { className: "enter-password-view", children: (0, import_jsx_runtime353.jsxs)("form", { className: "enter-password-view__body", onSubmit: (e2) => {
    e2.preventDefault();
    handlePasswordSubmit();
  }, children: [(0, import_jsx_runtime353.jsx)("div", { className: "enter-password-view__body__icon", children: (0, import_jsx_runtime353.jsx)(SvgPasswordHero, {}) }), (0, import_jsx_runtime353.jsx)("div", { className: "enter-password-view__body__description", children: (0, import_jsx_runtime353.jsx)(Typography, { variant: "body_normal", weight: "regular", color: "secondary", copykey: "dyn_enter_password.description", children: t2("dyn_enter_password.description") }) }), Boolean(errorMessage) && (0, import_jsx_runtime353.jsx)(ErrorContainer, { copykey: "dyn_enter_password.error", children: errorMessage }), (0, import_jsx_runtime353.jsx)("div", { children: (0, import_jsx_runtime353.jsx)(Input, { id: "password", placeholder: t2("dyn_enter_password.input.placeholder"), type: inputType, suffix: inputSuffix, label: t2("dyn_enter_password.input.label"), value: password, onChange: onPasswordInputChange, copykey: "dyn_enter_password.input" }) }), (0, import_jsx_runtime353.jsx)(TypographyButton, { buttonPadding: "large", buttonVariant: "brand-primary", typographyProps: {
    color: "inherit"
  }, disabled: !password && !errorMessage, loading: isLoading, copykey: "dyn_enter_password.continue_button_label", type: "submit", children: t2("dyn_enter_password.continue_button_label") })] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/EnterPasswordModal/EnterPasswordModal.js
var import_react385 = __toESM(require_react(), 1);
var import_react_dom215 = __toESM(require_react_dom(), 1);
var import_qrcode211 = __toESM(require_browser(), 1);
var EnterPasswordModal = ({ handler, onResolve, onReject, closeView }) => {
  const { onSuccess, onError, show, handleOnModalUnmount, closeModal } = useConfirmationPortal({
    defaultErrorMessage: "User canceled",
    onReject,
    onResolve
  });
  return (0, import_jsx_runtime354.jsx)(ConfirmationModal, { modalId: "enter-password-modal", show, closeModal, handleOnModalUnmount, children: (0, import_jsx_runtime354.jsx)(EnterPasswordView, { mutation: handler, closeView, onSuccess, onError }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/SignMessageConfirmationModal/SignMessageConfirmationModal.js
var import_jsx_runtime358 = __toESM(require_jsx_runtime(), 1);
var import_react389 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/AppOriginTile/AppOriginTile.js
var import_jsx_runtime355 = __toESM(require_jsx_runtime(), 1);
var import_react386 = __toESM(require_react(), 1);
var AppOriginTile = ({ appLogoUrl, appName, appOrigin }) => {
  const ref = (0, import_react386.useRef)(null);
  const [showAppName, setShowAppName] = (0, import_react386.useState)(false);
  (0, import_react386.useLayoutEffect)(() => {
    if (ref.current) {
      const { width, height } = ref.current.getBoundingClientRect();
      if (width < height * 2) {
        setShowAppName(true);
      } else {
        setShowAppName(false);
      }
    }
  }, [ref, setShowAppName]);
  return (0, import_jsx_runtime355.jsxs)("div", { className: "app-origin-tile", children: [Boolean(appName) && (0, import_jsx_runtime355.jsx)("div", { className: "app-origin-tile__title", children: appLogoUrl ? (0, import_jsx_runtime355.jsxs)(import_jsx_runtime355.Fragment, { children: [(0, import_jsx_runtime355.jsx)("img", { alt: "app_logo", src: appLogoUrl, className: "app-origin-tile__logo", ref }), showAppName && (0, import_jsx_runtime355.jsx)(Typography, { color: "primary", variant: "body_normal", children: appName })] }) : (0, import_jsx_runtime355.jsx)(Typography, { "data-testid": "app-name", color: "primary", variant: "body_normal", children: appName }) }), appOrigin && (0, import_jsx_runtime355.jsx)(Typography, { color: "secondary", variant: "body_normal", weight: "regular", children: appOrigin })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/sign-circle.js
var React86 = __toESM(require_react(), 1);
var _circle4;
var _path67;
var _excluded72 = ["title", "titleId"];
function _extends79() {
  _extends79 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends79.apply(this, arguments);
}
function _objectWithoutProperties72(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose75(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose75(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSignCircle = function SvgSignCircle2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties72(_ref2, _excluded72);
  return React86.createElement("svg", _extends79({
    width: 64,
    height: 64,
    viewBox: "0 0 64 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React86.createElement("title", {
    id: titleId
  }, title2) : null, _circle4 || (_circle4 = React86.createElement("circle", {
    cx: 32,
    cy: 32,
    r: 32,
    fill: "currentColor"
  })), _path67 || (_path67 = React86.createElement("path", {
    d: "M34.048 17.611a5.5 5.5 0 1 1 7.779 7.779l-.611.61.193.193a4.5 4.5 0 0 1 0 6.364l-3.238 3.239a1.125 1.125 0 0 1-1.592-1.591l3.239-3.239a2.25 2.25 0 0 0 0-3.182l-.193-.193-12.704 12.705a1.123 1.123 0 0 1-.523.296l-9 2.25a1.125 1.125 0 0 1-1.34-1.447l2.812-8.438c.055-.166.148-.316.272-.44l14.906-14.906Zm6.188 1.591a3.25 3.25 0 0 0-4.597 0L20.921 33.92l-2.08 6.242 6.709-1.678 14.686-14.686a3.25 3.25 0 0 0 0-4.596ZM24.925 47.375c-2.779 0-4.967-1.275-6.424-2.49l2.89-.723c1.003.562 2.19.963 3.534.963.912 0 1.853-.369 2.856-1.028 1.005-.66 1.976-1.546 2.956-2.465l.255-.24c.865-.812 1.764-1.658 2.624-2.242.918-.624 2.135-1.191 3.413-.7.844.325 1.393.925 1.78 1.658.362.687.612 1.548.855 2.485.111.427.3.841.515 1.12.105.137.196.214.26.253.055.034.08.034.086.034.274 0 .745-.185 1.417-.643.417-.284.774-.568 1.13-.852.221-.177.443-.354.679-.53.628-.47 1.171-.785 1.57-.986a6.86 6.86 0 0 1 .625-.28l.045-.016.016-.006.006-.002h.003s.002-.002.359 1.065l-.357-1.067a1.125 1.125 0 0 1 .721 2.132l-.008.003a4.59 4.59 0 0 0-.394.178 8.472 8.472 0 0 0-1.238.78c-.132.098-.304.235-.5.391-.409.324-.921.73-1.39 1.05-.7.476-1.67 1.033-2.684 1.033-.98 0-1.69-.595-2.127-1.162-.447-.578-.746-1.29-.912-1.93-.247-.95-.442-1.573-.667-2-.201-.38-.383-.525-.598-.608-.184-.07-.552-.075-1.34.46-.704.48-1.472 1.2-2.38 2.053l-.225.211c-.97.91-2.071 1.922-3.26 2.703-1.19.783-2.566 1.398-4.091 1.398Z",
    fill: "#fff"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/SignMessageConfirmationModal/SignMessageConfirmationModal.js
var import_react_dom216 = __toESM(require_react_dom(), 1);
var import_qrcode212 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SignMessagePreview/SignMessagePreview.js
var import_jsx_runtime357 = __toESM(require_jsx_runtime(), 1);
var import_react388 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SignMessagePreview/utils/isSignTypedData/isSignTypedData.js
var isSignTypedData = (data) => {
  if (typeof data !== "object" || data === null) {
    return false;
  }
  const { types, message, primaryType } = data;
  return typeof types === "object" && types !== null && typeof message === "object" && message !== null && typeof primaryType === "string";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SignMessagePreview/utils/isRawMessage/isRawMessage.js
var isRawMessage = (data) => {
  if (typeof data !== "object" || data === null) {
    return false;
  }
  return typeof data.raw === "string";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SignMessagePreview/components/SignTypedDataPreview/SignTypedDataPreview.js
var import_jsx_runtime356 = __toESM(require_jsx_runtime(), 1);
var import_react387 = __toESM(require_react(), 1);
var SignTypedDataPreview = ({ currentType, types, showTypeName = false, data }) => {
  const fields = types[currentType].map((field) => {
    var _a;
    const type = field.type.replace("[]", "");
    const isCollection = field.type.endsWith("[]");
    const isKnownType = type in types;
    if (isCollection && isKnownType) {
      return (0, import_jsx_runtime356.jsx)(TypeSection, { title: capitalize3(field.name), children: (_a = data === null || data === void 0 ? void 0 : data[field.name]) === null || _a === void 0 ? void 0 : _a.map((item, index) => (0, import_jsx_runtime356.jsx)(TypeSection, { title: index.toString(), children: (0, import_jsx_runtime356.jsx)(SignTypedDataPreview, { currentType: type, types, data: item }) }, index)) }, field.name);
    }
    if (isKnownType) {
      return (0, import_jsx_runtime356.jsx)(TypeSection, { title: capitalize3(field.name), children: (0, import_jsx_runtime356.jsx)(SignTypedDataPreview, { currentType: type, types, data: data === null || data === void 0 ? void 0 : data[field.name] }) }, field.name);
    }
    const fieldData = data === null || data === void 0 ? void 0 : data[field.name];
    const fieldType = field.type;
    return (0, import_jsx_runtime356.jsx)(FieldRow, { name: capitalize3(field.name), data: fieldData, displayValue: fieldType === "address" ? shortenWalletAddress(fieldData, 4, 4) : fieldData }, field.name);
  });
  if (showTypeName) {
    return (0, import_jsx_runtime356.jsx)(TypeSection, { title: currentType, children: fields });
  }
  return (0, import_jsx_runtime356.jsx)("div", { className: "sign-typed-data-preview--fields-list", children: fields });
};
var TypeTitle = ({ children }) => (0, import_jsx_runtime356.jsx)(Typography, { color: "secondary", weight: "medium", children });
var AttributeName = TypeTitle;
var AttributeValue = ({ children, title: title2 }) => (0, import_jsx_runtime356.jsx)(Typography, { as: "span", weight: "regular", color: "primary", title: title2, children });
var PaddedContent = ({ children }) => (0, import_jsx_runtime356.jsx)("div", { className: "sign-typed-data-preview--type-container", children });
var TypeSection = ({ title: title2, children }) => (0, import_jsx_runtime356.jsxs)("div", { children: [(0, import_jsx_runtime356.jsx)(TypeTitle, { children: title2 }), (0, import_jsx_runtime356.jsx)(PaddedContent, { children })] });
var FieldRow = ({ name, displayValue, data }) => (0, import_jsx_runtime356.jsxs)("div", { className: "sign-typed-data-preview--attribute-row", children: [(0, import_jsx_runtime356.jsxs)(AttributeName, { children: [capitalize3(name), ": "] }), (0, import_jsx_runtime356.jsx)(AttributeValue, { title: data, children: displayValue })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SignMessagePreview/utils/containsSpecialCharacters/containsSpecialCharacters.js
var containsSpecialCharacters = (value) => {
  const regex = /[^ -~\s]/;
  return regex.test(value);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SignMessagePreview/SignMessagePreview.js
var SignMessagePreview = ({ message }) => {
  const jsonMessage = (0, import_react388.useMemo)(() => {
    try {
      const json = JSON.parse(message);
      return json;
    } catch (e2) {
      return void 0;
    }
  }, [message]);
  const messageText = (0, import_react388.useMemo)(() => {
    const text = isRawMessage(jsonMessage) ? jsonMessage.raw : message;
    const readableText = isHex(text) ? hexToString(text) : text;
    return !containsSpecialCharacters(readableText) ? readableText : text;
  }, [jsonMessage, message]);
  if (isSignTypedData(jsonMessage)) {
    return (0, import_jsx_runtime357.jsx)(SignTypedDataPreview, { currentType: jsonMessage.primaryType, types: jsonMessage.types, showTypeName: true, data: jsonMessage.message });
  }
  return (0, import_jsx_runtime357.jsx)(Typography, { color: "primary", variant: "body_normal", children: (0, import_jsx_runtime357.jsx)("span", { style: { whiteSpace: "pre-line" }, children: messageText }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/SignMessageConfirmationModal/SignMessageConfirmationModal.js
var SignMessageConfirmationModal = ({ appLogoUrl, appName, message, handler, onReject, onSignMessage, hideModal }) => {
  usePreventPageScroll(true);
  const didConfirmRef = (0, import_react389.useRef)(false);
  const [show, setShow] = (0, import_react389.useState)(true);
  const { initPasskeyRecoveryProcess, shouldInitRecovery } = usePasskeyRecovery();
  const { isTurnkeyWallet } = useIsTurnkeyWallet();
  const { setShowAuthFlow, primaryWallet } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { userNeedsCrossDomainPasskey } = usePasskeyContext();
  const { t: t2 } = useTranslation();
  const { getEOAWallet } = useSmartWallets();
  const eoaWallet = primaryWallet && getEOAWallet(primaryWallet);
  const handleOnReject = (0, import_react389.useCallback)(() => {
    didConfirmRef.current = false;
    setShow(false);
  }, [setShow]);
  const { isLoading, mutate: confirm, data: signedMessage, error: signMessageError } = useMutation(() => handler(message), {
    onSuccess: () => {
      didConfirmRef.current = true;
      setShow(false);
    }
  });
  const errorText = (0, import_react389.useMemo)(() => {
    if (!signMessageError) {
      return void 0;
    }
    if (signMessageError instanceof DynamicError) {
      return signMessageError.message;
    }
    try {
      return getProperErrorMessage(signMessageError);
    } catch (e2) {
      if (e2 instanceof AccessBlockedError) {
        setView("access-blocked");
      }
      return;
    }
  }, [signMessageError, setView]);
  const handleOnModalUnmount = (0, import_react389.useCallback)(() => {
    if (signedMessage) {
      return onSignMessage(signedMessage);
    }
    onReject(signMessageError || new UserRejectedRequestError());
  }, [signedMessage, onSignMessage, onReject, signMessageError]);
  const handleMessageSign = (signWithoutModal) => __awaiter(void 0, void 0, void 0, function* () {
    const isSessionKeyCompatible = primaryWallet && isSessionKeyCompatibleWallet(primaryWallet) || eoaWallet && isSessionKeyCompatibleWallet(eoaWallet);
    if ((yield shouldInitRecovery()) && !isSessionKeyCompatible) {
      yield initPasskeyRecoveryProcess("email", "signMessage");
    }
    if (signWithoutModal === true) {
      onSignMessage("callHandlerOutsideModal");
      return;
    }
    if (isSessionKeyCompatible) {
      confirm();
      return;
    }
    if (isTurnkeyWallet && userNeedsCrossDomainPasskey) {
      setView("passkey-new-domain-detected");
      setShowAuthFlow(true, {
        ignoreIfIsEmbeddedWidget: false,
        performMultiWalletChecks: false
      });
      dynamicEvents.once("passkeyRecoveryCompleted", () => {
        confirm();
      });
      return;
    }
    confirm();
  });
  useEffectOnce(() => {
    if (hideModal) {
      handleMessageSign(true);
    }
  });
  const closeButton = (0, import_jsx_runtime358.jsx)(IconButton, { type: "button", onClick: handleOnReject, "data-testid": "close", disabled: isLoading, children: (0, import_jsx_runtime358.jsx)(SvgClose, {}) });
  return hideModal ? null : (0, import_jsx_runtime358.jsx)(Portal, { handleClose: handleOnReject, isShown: show, zIndex: authModalZIndex, withBackdrop: true, elementId: "dynamic-sign-message", transitionEvents: {
    onUnmount: handleOnModalUnmount
  }, children: (0, import_jsx_runtime358.jsx)(Modal, { children: (0, import_jsx_runtime358.jsxs)(ModalCard, { children: [(0, import_jsx_runtime358.jsx)(ModalHeader, { trailing: closeButton, alignContent: "bottom", children: (0, import_jsx_runtime358.jsx)(IconWithSpinner, { Icon: (props) => (0, import_jsx_runtime358.jsx)(Icon, { color: "brand-primary", children: (0, import_jsx_runtime358.jsx)(SvgSignCircle, Object.assign({}, props)) }), iconSize: 64, isSpinning: true }) }), (0, import_jsx_runtime358.jsx)(PasskeyCreatedSuccessBanner, {}), (0, import_jsx_runtime358.jsxs)("div", { className: "sign-message-confirmation__body", children: [(0, import_jsx_runtime358.jsx)(Typography, { variant: "title", color: "primary", className: "sign-message-confirmation__title", copykey: "dyn_sign_message.title", children: t2("dyn_sign_message.title") }), (0, import_jsx_runtime358.jsx)(AnimatePresence, { animationComponent: (0, import_jsx_runtime358.jsx)(VerticalDrawerTransition, {}), children: signMessageError && (0, import_jsx_runtime358.jsx)("div", { className: "sign-message-confirmation__error", children: (0, import_jsx_runtime358.jsx)(ErrorContainer, { children: errorText }) }) }), (0, import_jsx_runtime358.jsxs)("div", { className: "sign-message-confirmation__message-container", children: [(0, import_jsx_runtime358.jsx)(AppOriginTile, { appLogoUrl, appName, appOrigin: PlatformService.getDisplayOrigin() }), (0, import_jsx_runtime358.jsx)("div", { className: "sign-message-confirmation__message", children: (0, import_jsx_runtime358.jsx)(
    SignMessagePreview,
    {
      // strip if entire message is a quote and replace escaped newlines
      message: message.toString().replace(/^"(.*)"$/, "$1").replace(/\\n/g, "\n")
    }
  ) })] }), (0, import_jsx_runtime358.jsxs)("div", { className: "sign-message-confirmation__actions", children: [(0, import_jsx_runtime358.jsx)(TypographyButton, { buttonVariant: "secondary", onClick: handleOnReject, expanded: true, buttonPadding: "large", disabled: isLoading, copykey: "dyn_sign_message.cancel_button", children: t2("dyn_sign_message.cancel_button") }), (0, import_jsx_runtime358.jsx)(TypographyButton, { buttonVariant: "primary", buttonPadding: "large", onClick: handleMessageSign, expanded: true, loading: isLoading, copykey: "dyn_sign_message.sign_button", dataTestId: "sign-button", children: t2("dyn_sign_message.sign_button") })] }), (0, import_jsx_runtime358.jsx)(NeedHelpSection, {}), (0, import_jsx_runtime358.jsx)(PoweredByDynamic, {})] })] }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/SyncWalletPromptModal/SyncWalletPromptModal.js
var import_jsx_runtime365 = __toESM(require_jsx_runtime(), 1);
var import_react396 = __toESM(require_react(), 1);
var import_react_dom223 = __toESM(require_react_dom(), 1);
var import_qrcode219 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SyncWalletView/SyncWalletView.js
var import_jsx_runtime364 = __toESM(require_jsx_runtime(), 1);
var import_react395 = __toESM(require_react(), 1);
var import_react_dom222 = __toESM(require_react_dom(), 1);
var import_qrcode218 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SyncWalletView/SwitchWalletView/SwitchWalletView.js
var import_jsx_runtime361 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/DefaultPromptModal/DefaultPromptModal.js
var import_jsx_runtime360 = __toESM(require_jsx_runtime(), 1);
var import_react391 = __toESM(require_react(), 1);
var import_react_dom218 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/WidgetPortal/WidgetPortal.js
var import_jsx_runtime359 = __toESM(require_jsx_runtime(), 1);
var import_react390 = __toESM(require_react(), 1);
var import_react_dom217 = __toESM(require_react_dom(), 1);
var import_qrcode213 = __toESM(require_browser(), 1);
var WidgetPortal = ({ children, onClose, disablePadding, portalClassName, portalContainerClassName }) => (0, import_jsx_runtime359.jsx)("div", { className: classNames(portalClassName, "widget-portal"), onClick: onClose, "data-testid": "backdrop", children: (0, import_jsx_runtime359.jsxs)("div", { className: classNames(portalContainerClassName, "widget-portal__container", {
  "widget-portal__container--no-padding": disablePadding
}), onClick: (e2) => e2.stopPropagation(), children: [onClose && (0, import_jsx_runtime359.jsx)("div", { className: "widget-portal__container__header", children: (0, import_jsx_runtime359.jsx)(IconButton, { className: "widget-portal__container__close-button", onClick: (e2) => onClose(e2), type: "button", "data-testid": "close-button", children: (0, import_jsx_runtime359.jsx)(SvgClose, {}) }) }), children] }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/DefaultPromptModal/DefaultPromptModal.js
var import_qrcode214 = __toESM(require_browser(), 1);
var DefaultPromptLayout = ({ children, className = "", dataTestId = "", icon, showSpinnerInIcon = true, title: title2 }) => (0, import_jsx_runtime360.jsxs)("div", { className: classNames("default-prompt-modal", className), "data-testid": dataTestId, children: [icon && (0, import_jsx_runtime360.jsx)(IconWithSpinner, { Icon: icon, iconSize: 96, isSpinning: showSpinnerInIcon, className: "default-prompt-modal__icon-with-spinner" }), (0, import_jsx_runtime360.jsxs)("div", { className: "default-prompt-modal__content", children: [title2 && (0, import_jsx_runtime360.jsx)(Typography, { variant: "title", color: "primary", "data-testid": "title", children: title2 }), children] })] });
var DefaultPromptModal = (props) => (0, import_jsx_runtime360.jsx)(WidgetPortal, { onClose: props.onClose, portalClassName: "prompt-modal-portal", portalContainerClassName: "prompt-modal-portal__container", children: (0, import_jsx_runtime360.jsx)(DefaultPromptLayout, Object.assign({}, props)) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SyncWalletView/SwitchWalletView/SwitchWalletView.js
var import_react392 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/arrow-circle-right.js
var React87 = __toESM(require_react(), 1);
var _path68;
var _excluded73 = ["title", "titleId"];
function _extends80() {
  _extends80 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends80.apply(this, arguments);
}
function _objectWithoutProperties73(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose76(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose76(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgArrowCircleRight = function SvgArrowCircleRight2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties73(_ref2, _excluded73);
  return React87.createElement("svg", _extends80({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React87.createElement("title", {
    id: titleId
  }, title2) : null, _path68 || (_path68 = React87.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 4a8 8 0 1 0 0 16 8 8 0 0 0 0-16ZM2 12C2 6.477 6.477 2 12 2s10 4.477 10 10-4.477 10-10 10S2 17.523 2 12Zm10.293-3.707a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1 0 1.414l-3 3a1 1 0 0 1-1.414-1.414L13.586 13H8a1 1 0 1 1 0-2h5.586l-1.293-1.293a1 1 0 0 1 0-1.414Z",
    fill: "#ABACB2"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SyncWalletView/SwitchWalletView/SwitchWalletView.js
var import_react_dom219 = __toESM(require_react_dom(), 1);
var import_qrcode215 = __toESM(require_browser(), 1);
var SwitchWalletView = ({ onCancel, connector, expectedAddress, activeAddress }) => {
  const { t: t2 } = useTranslation();
  return (0, import_jsx_runtime361.jsx)(DefaultPromptModal, { dataTestId: "switch-wallet", className: "switch-wallet", icon: (0, import_jsx_runtime361.jsx)(WalletIcon, { walletKey: connector.key }), title: t2("dyn_sync_wallet.switch_wallet.title"), onClose: onCancel, children: (0, import_jsx_runtime361.jsxs)("div", { className: "switch-wallet__body", children: [activeAddress && (0, import_jsx_runtime361.jsxs)(import_jsx_runtime361.Fragment, { children: [(0, import_jsx_runtime361.jsx)(Typography, { variant: "body_mini", color: "secondary", weight: "regular", copykey: "dyn_sync_wallet.switch_wallet.active_address.heading", children: t2("dyn_sync_wallet.switch_wallet.active_address.heading") }), (0, import_jsx_runtime361.jsx)(Typography, { variant: "body_normal", color: "primary", weight: "regular", children: shortenWalletAddress(activeAddress, 3, 3) }), (0, import_jsx_runtime361.jsx)(Divider, { className: "switch-wallet__body__divider", children: (0, import_jsx_runtime361.jsx)(SvgArrowCircleRight, {}) })] }), (0, import_jsx_runtime361.jsx)(Typography, { variant: "body_mini", color: "secondary", weight: "regular", copykey: "dyn_sync_wallet.switch_wallet.expected_address.heading", children: t2("dyn_sync_wallet.switch_wallet.expected_address.heading") }), (0, import_jsx_runtime361.jsx)(Typography, { variant: "body_normal", color: "primary", weight: "regular", copykey: "dyn_sync_wallet.switch_wallet.expected_address.prompt", className: "switch-wallet__body__expected-address__prompt", children: t2("dyn_sync_wallet.switch_wallet.expected_address.prompt") }), (0, import_jsx_runtime361.jsx)(Typography, { color: "green-1", weight: "bold", className: "switch-wallet__body__expected-address__address", children: shortenWalletAddress(expectedAddress, 3, 3) })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SyncWalletView/ReconnectWithQrCodeView/ReconnectWithQrCodeView.js
var import_jsx_runtime362 = __toESM(require_jsx_runtime(), 1);
var import_react393 = __toESM(require_react(), 1);
var import_react_dom220 = __toESM(require_react_dom(), 1);
var import_qrcode216 = __toESM(require_browser(), 1);
var ReconnectWithQrCodeView = ({ onCancel, onSuccess, connector, expectedAddress }) => {
  var _a;
  const { t: t2 } = useTranslation();
  const { walletBook } = useWalletBookContext();
  const { theme: { theme } } = useThemeContext();
  const { name: themeName } = theme;
  const [qrcodeUri, setQrcodeUri] = (0, import_react393.useState)();
  const [desktopUri, setDesktopUri] = (0, import_react393.useState)();
  usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    const publicAddress = yield connector.getAddress({
      onDesktopUri: (uri) => __awaiter(void 0, void 0, void 0, function* () {
        setDesktopUri(uri);
      }),
      onDisplayUri: (uri) => __awaiter(void 0, void 0, void 0, function* () {
        setQrcodeUri(uri);
      })
    });
    if (publicAddress && isSameAddress(publicAddress, expectedAddress, connector.connectedChain)) {
      onSuccess();
      return;
    }
    connector.endSession();
    onCancel();
  }), { deps: [connector], retries: 3 });
  return (0, import_jsx_runtime362.jsx)(DefaultPromptModal, { dataTestId: "reconnect-qr-code", title: t2("dyn_sync_wallet.reconnect_with_qr_code.title"), onClose: onCancel, children: qrcodeUri && (0, import_jsx_runtime362.jsx)(QrCodeWrapper, { uri: qrcodeUri, desktopUri, accentColor: (
    /* istanbul ignore next */
    themeName === "dark" ? theme.colors.textPrimary : (_a = getWalletPrimaryColor(walletBook, connector.key)) !== null && _a !== void 0 ? _a : ""
  ), icon: (0, import_jsx_runtime362.jsx)(WalletIcon, { walletKey: connector === null || connector === void 0 ? void 0 : connector.key }), showCopyToClipboardButton: true, walletConnector: connector }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SyncWalletView/AutoReconnectingView/AutoReconnectingView.js
var import_jsx_runtime363 = __toESM(require_jsx_runtime(), 1);
var import_react394 = __toESM(require_react(), 1);
var import_react_dom221 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/reconnectSocialWallet.js
var reconnectSocialWallet = (user, connector, walletAddress, walletChain) => __awaiter(void 0, void 0, void 0, function* () {
  if (!isSocialWalletConnector(connector)) {
    return;
  }
  const socialAccountDataForWallet = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((account) => account.format === JwtVerifiedCredentialFormatEnum.Oauth && account.address && isSameAddress(account.address, walletAddress, walletChain));
  if (!socialAccountDataForWallet || !socialAccountDataForWallet.oauthProvider) {
    return;
  }
  yield connector.connect(socialAccountDataForWallet.oauthProvider);
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SyncWalletView/AutoReconnectingView/AutoReconnectingView.js
var import_qrcode217 = __toESM(require_browser(), 1);
var AutoReconnectingView = ({ onCancel, onSuccess, connector, expectedAddress }) => {
  const { t: t2 } = useTranslation();
  const { user } = useInternalDynamicContext();
  usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    if (isSocialWalletConnector(connector)) {
      yield reconnectSocialWallet(user, connector, expectedAddress, connector.connectedChain);
      onSuccess();
    }
  }), { deps: [connector] });
  return (0, import_jsx_runtime363.jsx)(DefaultPromptModal, { dataTestId: "auto-reconnecting", icon: (0, import_jsx_runtime363.jsx)(WalletIcon, { walletKey: connector === null || connector === void 0 ? void 0 : connector.key }), title: t2("dyn_sync_wallet.reconnecting.title"), onClose: onCancel, children: (0, import_jsx_runtime363.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", children: t2("dyn_sync_wallet.reconnecting.description", {
    walletAddress: shortenWalletAddress(expectedAddress, 3, 3)
  }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/SyncWalletView/SyncWalletView.js
var SyncWalletView = ({ onSuccess, onError, expectedAddress, activeAddress, connector }) => {
  const showQrCodeModal = connector.canConnectViaQrCode && !connector.isInstalledOnBrowser() && !connector.canConnectViaCustodialService;
  logger2.logVerboseTroubleshootingMessage("[SyncWallet]", {
    canConnectViaCustodialService: connector.canConnectViaCustodialService,
    canConnectViaQrCode: connector.canConnectViaQrCode,
    isEmbeddedWallet: connector.isEmbeddedWallet,
    isInstalledOnBrowser: connector.isInstalledOnBrowser()
  });
  useWalletConnectorEvent(connector, "accountChange", ({ accounts }) => {
    logger2.logVerboseTroubleshootingMessage("[SyncWallet] accountChange", {
      accounts,
      expectedAddress
    });
    const [selectedAccountAddress] = accounts;
    if (isSameAddress(selectedAccountAddress, expectedAddress, connector.connectedChain)) {
      onSuccess(true);
    }
  });
  useInternalDynamicEvents("logout", () => onError(new Error("user logged out"), true));
  const handleTryToReconnect = () => __awaiter(void 0, void 0, void 0, function* () {
    const reconnectAddress = yield connector.getAddress();
    if (reconnectAddress && isSameAddress(reconnectAddress, expectedAddress, connector.connectedChain)) {
      onSuccess(true);
    }
  });
  const handleCancel = () => {
    logger2.logVerboseTroubleshootingMessage("[SyncWallet] handleCancel called");
    onError(new DynamicError("User cancelled", "0"), true);
  };
  if (connector.isEmbeddedWallet) {
    return (0, import_jsx_runtime364.jsx)("div", { className: "sync-wallet-view", "data-testid": "sync-wallet", children: (0, import_jsx_runtime364.jsx)(AutoReconnectingView, { connector, expectedAddress, onCancel: handleCancel, onSuccess: () => onSuccess(true) }) });
  }
  if (showQrCodeModal) {
    return (0, import_jsx_runtime364.jsx)("div", { className: "sync-wallet-view", "data-testid": "sync-wallet", children: (0, import_jsx_runtime364.jsx)(ReconnectWithQrCodeView, { connector, expectedAddress, onCancel: handleCancel, onSuccess: () => onSuccess(true) }) });
  }
  return (0, import_jsx_runtime364.jsx)("div", { className: "sync-wallet-view", "data-testid": "sync-wallet", children: (0, import_jsx_runtime364.jsx)(SwitchWalletView, { connector, expectedAddress, activeAddress, onCancel: handleCancel, onTryToReconnect: handleTryToReconnect }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/SyncWalletPromptModal/SyncWalletPromptModal.js
var SyncWalletPromptModal = ({ expectedAddress, connector, onResolve, onReject, activeAddress }) => {
  const { onSuccess, onError, show, handleOnModalUnmount } = useConfirmationPortal({
    defaultErrorMessage: "User canceled",
    onReject,
    onResolve
  });
  return (0, import_jsx_runtime365.jsx)(ConfirmationModal, { modalId: "sync-wallet-modal", show, closeModal: () => {
  }, handleOnModalUnmount, children: (0, import_jsx_runtime365.jsx)(SyncWalletView, { onSuccess, onError, expectedAddress, connector, activeAddress }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/modals/TransactionConfirmationModal/TransactionConfirmationModal.js
var import_jsx_runtime366 = __toESM(require_jsx_runtime(), 1);
var import_react397 = __toESM(require_react(), 1);
var import_react_dom224 = __toESM(require_react_dom(), 1);
var import_qrcode220 = __toESM(require_browser(), 1);
var TransactionConfirmationModal = ({ title: title2, onReject, onTransactionResponseSuccess, transaction, copykey, walletConnector, hideModal, isNativeToken, currentToken }) => {
  usePreventPageScroll(true);
  const [show, setShow] = (0, import_react397.useState)(true);
  const errorRef = (0, import_react397.useRef)(null);
  const transactionResponseRef = (0, import_react397.useRef)(null);
  const closeModal = (0, import_react397.useCallback)(() => {
    setShow(false);
  }, [setShow]);
  const handleOnModalUnmount = (0, import_react397.useCallback)(() => {
    if (transactionResponseRef.current) {
      return onTransactionResponseSuccess(transactionResponseRef.current);
    }
    return onReject(errorRef.current || new UserRejectedTransactionError());
  }, [onTransactionResponseSuccess, onReject]);
  return (0, import_jsx_runtime366.jsx)(Portal, { handleClose: closeModal, isShown: show, zIndex: authModalZIndex, withBackdrop: true, elementId: "dynamic-send-transaction", transitionEvents: {
    onUnmount: handleOnModalUnmount
  }, children: (0, import_jsx_runtime366.jsx)(Modal, { children: (0, import_jsx_runtime366.jsx)(ModalCard, { children: (0, import_jsx_runtime366.jsx)(TransactionConfirmationView, { transaction, title: title2, copykey, hideModal, mutation: () => transaction.submit(), onClickClose: closeModal, onError: (error) => errorRef.current = error, displayPoweredByDynamicFooter: true, walletConnector, onSuccess: (transactionResponse) => {
    errorRef.current = null;
    transactionResponseRef.current = transactionResponse;
    closeModal();
  }, isNativeToken, currentToken, isModal: true }) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletUiUtils/useWalletUiUtils.js
var useWalletUiUtils = ({ appLogoUrl, appName, hideEmbeddedWalletTransactionUIs = false }) => {
  const confirmationStateRef = (0, import_react398.useRef)("enabled");
  const { t: t2 } = useTranslation();
  const { modal: sendTransactionModal, open: openSendTransaction } = useConfirmationModal({
    elementId: "dynamic-send-transaction"
  });
  const { modal: signMessageModal, open: openSignMessage } = useConfirmationModal({
    elementId: "dynamic-sign-message"
  });
  const { modal: enterPasswordModal, open: openEnterPassword } = useConfirmationModal({
    elementId: "dynamic-enter-password"
  });
  const { modal: createPasswordModal, open: openCreatePassword } = useConfirmationModal({
    elementId: "dynamic-create-password"
  });
  const { modal: syncWalletPromptModal, open: openSyncWalletPrompt } = useConfirmationModal({
    elementId: "dynamic-sync-wallet"
  });
  const shouldConfirmAction = (0, import_react398.useCallback)(() => {
    if (confirmationStateRef.current === "disabled") {
      confirmationStateRef.current = "enabled";
      return false;
    }
    return true;
  }, [confirmationStateRef]);
  const signMessage = (0, import_react398.useCallback)((_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, message, handler }) {
    if (!shouldConfirmAction())
      return handler();
    return openSignMessage((resolve, reject) => (0, import_jsx_runtime367.jsx)(SignMessageConfirmationModal, { appLogoUrl, appName, message, handler, onSignMessage: resolve, onReject: reject, hideModal: hideEmbeddedWalletTransactionUIs && !(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.isGlobalTransaction) })).then((signedMessage) => __awaiter(void 0, void 0, void 0, function* () {
      if (signedMessage === "callHandlerOutsideModal")
        return handler();
      else
        return signedMessage;
    }));
  }), [
    appLogoUrl,
    appName,
    hideEmbeddedWalletTransactionUIs,
    openSignMessage,
    shouldConfirmAction
  ]);
  const sendTransaction = (0, import_react398.useCallback)((walletConnector, transaction) => __awaiter(void 0, void 0, void 0, function* () {
    if (!shouldConfirmAction())
      return transaction.submit();
    return openSendTransaction((resolve, reject) => (0, import_jsx_runtime367.jsx)(TransactionConfirmationModal, { copykey: "dyn_send_transaction.confirmation.title", title: t2("dyn_send_transaction.confirmation.title"), transaction, onTransactionResponseSuccess: resolve, onReject: reject, walletConnector, hideModal: hideEmbeddedWalletTransactionUIs && !(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.isGlobalTransaction) })).then((signedTransaction) => __awaiter(void 0, void 0, void 0, function* () {
      if (signedTransaction === "callHandlerOutsideModal")
        return transaction.submit();
      else
        return signedTransaction;
    }));
  }), [
    hideEmbeddedWalletTransactionUIs,
    openSendTransaction,
    shouldConfirmAction,
    t2
  ]);
  const enterPassword = (0, import_react398.useCallback)((_b) => __awaiter(void 0, [_b], void 0, function* ({ handler, closeView = true }) {
    return openEnterPassword((resolve, reject) => (0, import_jsx_runtime367.jsx)(EnterPasswordModal, { handler, onResolve: resolve, onReject: reject, closeView }));
  }), [openEnterPassword]);
  const createPassword = (0, import_react398.useCallback)((_c) => __awaiter(void 0, [_c], void 0, function* ({ closeView = true }) {
    return openCreatePassword((resolve, reject) => (0, import_jsx_runtime367.jsx)(CreatePasswordModal, { onResolve: resolve, onReject: reject, closeView }));
  }), [openCreatePassword]);
  const syncWallet = (0, import_react398.useCallback)((_d) => __awaiter(void 0, [_d], void 0, function* ({ walletConnector, activeAddress, expectedAddress }) {
    yield openSyncWalletPrompt((resolve, reject) => (0, import_jsx_runtime367.jsx)(SyncWalletPromptModal, { onResolve: resolve, onReject: reject, connector: walletConnector, expectedAddress, activeAddress }));
  }), [openSyncWalletPrompt]);
  const disabledConfirmationOnce = (0, import_react398.useCallback)(() => {
    confirmationStateRef.current = "disabled";
  }, []);
  const walletUiUtils = (0, import_react398.useMemo)(() => ({
    createPassword,
    disabledConfirmationOnce,
    enterPassword,
    sendTransaction,
    signMessage,
    syncWallet
  }), [
    signMessage,
    disabledConfirmationOnce,
    sendTransaction,
    enterPassword,
    createPassword,
    syncWallet
  ]);
  return (0, import_react398.useMemo)(() => [
    signMessageModal || sendTransactionModal || enterPasswordModal || createPasswordModal || syncWalletPromptModal,
    walletUiUtils
  ], [
    signMessageModal,
    sendTransactionModal,
    enterPasswordModal,
    createPasswordModal,
    syncWalletPromptModal,
    walletUiUtils
  ]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSetWalletConnectorFetchers/useSetWalletConnectorFetchers.js
var import_jsx_runtime368 = __toESM(require_jsx_runtime(), 1);
var import_react399 = __toESM(require_react(), 1);
var import_react_dom226 = __toESM(require_react_dom(), 1);
var import_qrcode222 = __toESM(require_browser(), 1);
var useSetWalletConnectorFetchers = (walletOptions, environmentId) => {
  const { registerEmbeddedWalletSessionKey, removeSessionKey } = useEmbeddedWalletSessionKeys(environmentId);
  if (!(walletOptions === null || walletOptions === void 0 ? void 0 : walletOptions.length))
    return;
  const { fetchAuthToken, fetchBackupCode, fetchPasscode } = getCoinbaseMPCConnectorFetchers({ environmentId });
  walletOptions.forEach((walletOption) => {
    var _a, _b;
    if (isCoinbaseMpcWalletConnector(walletOption.walletConnector)) {
      walletOption.walletConnector.setAuthTokenFetcher(fetchAuthToken);
      walletOption.walletConnector.setBackupCodeFetcher(fetchBackupCode);
      walletOption.walletConnector.setPasscodeFetcher(fetchPasscode);
    }
    if (isSessionKeyCompatibleWalletConnector(walletOption.walletConnector)) {
      (_a = walletOption.walletConnector) === null || _a === void 0 ? void 0 : _a.setSessionKeyFetcher(registerEmbeddedWalletSessionKey);
      (_b = walletOption.walletConnector) === null || _b === void 0 ? void 0 : _b.setSessionKeyRemoveFunction(() => removeSessionKey());
    }
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSendDynamicProps/useSendDynamicProps.js
var import_react400 = __toESM(require_react(), 1);
var import_jsx_runtime369 = __toESM(require_jsx_runtime(), 1);
var useSendDynamicProps = ({ settings, environmentId }) => {
  useEffectOnce(() => {
    const updatedDynamicProps = {
      settings: Object.assign(Object.assign({}, settings), { customPrivacyPolicy: Boolean(settings.customPrivacyPolicy), customTermsOfServices: Boolean(settings.customTermsOfServices), policiesConsentInnerComponent: Boolean(settings.policiesConsentInnerComponent) })
    };
    const serializedEventsCallbacks = serializeEventsCallbacks(settings.events);
    const serializedWalletConnectors = serializeWalletConnectors(settings.walletConnectors);
    const serializedDynamicContextProps = Object.assign(Object.assign({}, updatedDynamicProps), { settings: Object.assign(Object.assign({}, updatedDynamicProps.settings), { events: serializedEventsCallbacks, walletConnectors: serializedWalletConnectors }) });
    sendDynamicProps(environmentId, {
      dynamicContextProps: serializedDynamicContextProps,
      frameworkSettings: getFrameworkSettings()
    });
  });
};
var serializeEventsCallbacks = (events) => {
  try {
    if (!events)
      return void 0;
    const eventsCallbackValues = Object.values(events);
    const eventsKeys = Object.keys(events);
    return eventsKeys.filter((key, index) => {
      if (eventsCallbackValues[index] === void 0) {
        return false;
      }
      return key;
    });
  } catch (error) {
    logger2.error("error serializing events", error);
    return void 0;
  }
};
var getFrameworkSettings = () => {
  var _a;
  return {
    nextJs: {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      version: (_a = window.next) === null || _a === void 0 ? void 0 : _a.version
    },
    react: {
      version: import_react400.version
    }
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useResetCookieLocalStorage/useResetCookieLocalStorage.js
var import_react401 = __toESM(require_react(), 1);
var import_jsx_runtime370 = __toESM(require_jsx_runtime(), 1);
var useResetCookieLocalStorage = ({ environmentId, projectSettings, setPrimaryWalletId }) => {
  const didRefreshUserRef = (0, import_react401.useRef)(false);
  const user = getUser();
  (0, import_react401.useEffect)(() => {
    const maybeInitUserRefresh = () => __awaiter(void 0, void 0, void 0, function* () {
      if (!user && isCookieEnabled()) {
        didRefreshUserRef.current = true;
        try {
          const user2 = yield refreshUserJwt({ environmentId });
          const lastVerifiedWallet = user2 === null || user2 === void 0 ? void 0 : user2.verifiedCredentials.find((vc) => vc.format === JwtVerifiedCredentialFormatEnum.Blockchain && vc.id === user2.lastVerifiedCredentialId);
          if (lastVerifiedWallet)
            setPrimaryWalletId(lastVerifiedWallet.id);
        } catch (e2) {
          logger2.debug("Ignore failed refreshUserJwt in useResetCookieLocalStorage");
        }
      }
    });
    if (didRefreshUserRef.current)
      return;
    maybeInitUserRefresh();
  }, [user, projectSettings]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/DynamicContext.js
var import_qrcode240 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SyncAuthFlow/SyncAuthFlow.js
var import_react405 = __toESM(require_react(), 1);
var import_jsx_runtime374 = __toESM(require_jsx_runtime(), 1);
var import_react_dom230 = __toESM(require_react_dom(), 1);
var import_qrcode226 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncMfaFlow/useSyncMfaFlow.js
var import_react402 = __toESM(require_react(), 1);
var import_jsx_runtime371 = __toESM(require_jsx_runtime(), 1);
var import_react_dom227 = __toESM(require_react_dom(), 1);
var import_qrcode223 = __toESM(require_browser(), 1);
var useSyncMfaFlow = ({ handler: headlessHandler } = {}) => {
  const { setShowAuthFlow, userWithMissingInfo, sdkHasLoaded } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { getUserDevices } = useMfa();
  const triggered = (0, import_react402.useRef)(false);
  useInternalDynamicEvents("logout", () => {
    triggered.current = false;
  });
  (0, import_react402.useEffect)(() => {
    var _a;
    if (!sdkHasLoaded || triggered.current) {
      return;
    }
    if (!userWithMissingInfo || !hasPendingMfaAction(userWithMissingInfo)) {
      return;
    }
    triggered.current = true;
    if (headlessHandler) {
      setShowAuthFlow(false);
      headlessHandler();
      return;
    }
    setShowAuthFlow(true);
    if ((_a = userWithMissingInfo.scope) === null || _a === void 0 ? void 0 : _a.includes("requiresAdditionalAuth")) {
      getUserDevices().then((devices) => {
        if (devices.length === 0) {
          setView("mfa-choose-device");
        } else {
          setView("mfa-verification");
        }
      });
    } else {
      setView("mfa-display-backup-codes");
    }
  }, [
    getUserDevices,
    sdkHasLoaded,
    setShowAuthFlow,
    setView,
    userWithMissingInfo,
    headlessHandler
  ]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncEmbeddedWalletFlow/useSyncEmbeddedWalletFlow.js
var import_react403 = __toESM(require_react(), 1);
var import_jsx_runtime372 = __toESM(require_jsx_runtime(), 1);
var import_react_dom228 = __toESM(require_react_dom(), 1);
var import_qrcode224 = __toESM(require_browser(), 1);
var useSyncEmbeddedWalletFlow = () => {
  const { projectSettings, user, primaryWalletId, walletConnectorOptions, setShowAuthFlow } = useInternalDynamicContext();
  const { isLoadingEmbeddedWallet } = useWalletContext();
  const { loading: globalLoading } = useLoadingContext();
  const { createEmbeddedWallet, shouldAutoCreateEmbeddedWallet } = useEmbeddedWallet();
  const triggeredCreate = (0, import_react403.useRef)(false);
  useInternalDynamicEvents("logout", () => {
    triggeredCreate.current = false;
  });
  (0, import_react403.useEffect)(() => {
    const createWallet2 = () => __awaiter(void 0, void 0, void 0, function* () {
      triggeredCreate.current = true;
      try {
        yield createEmbeddedWallet();
      } catch (error) {
        if (error instanceof EmbeddedWalletException) {
          logger2.debug("Error creating embedded wallet", error);
        } else {
          logger2.error("Error creating embedded wallet", error);
        }
        setShowAuthFlow(false);
      }
    });
    const shouldCreateWallet = shouldAutoCreateEmbeddedWallet();
    if (!shouldCreateWallet || !user || !projectSettings || !walletConnectorOptions.length || // no connectors to use for the embedded wallet
    isLoadingEmbeddedWallet || // already has a wallet
    globalLoading || // this will be true if auth is in progress
    triggeredCreate.current) {
      return;
    }
    createWallet2();
  }, [
    user,
    projectSettings,
    primaryWalletId,
    createEmbeddedWallet,
    isLoadingEmbeddedWallet,
    walletConnectorOptions,
    globalLoading,
    shouldAutoCreateEmbeddedWallet,
    setShowAuthFlow
  ]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSyncOnboardingFlow/useSyncOnboardingFlow.js
var import_react404 = __toESM(require_react(), 1);
var import_jsx_runtime373 = __toESM(require_jsx_runtime(), 1);
var import_react_dom229 = __toESM(require_react_dom(), 1);
var import_qrcode225 = __toESM(require_browser(), 1);
var useSyncOnboardingFlow = ({ handler: headlessHandler } = {}) => {
  const { setShowAuthFlow, userWithMissingInfo, sdkHasLoaded, setSelectedWalletConnectorKey } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { updateUser } = useUserUpdateRequestInternal({
    validationSchemaStripUnknown: false
  });
  const { completeAuth, handleAuthError } = useUserAuth({});
  const { displayedDestination: formattedPhone } = useVerification();
  const triggeredOnboarding = (0, import_react404.useRef)(false);
  useInternalDynamicEvents("logout", () => {
    triggeredOnboarding.current = false;
  });
  (0, import_react404.useEffect)(() => {
    var _a;
    const handleHeadlessOnboarding = () => __awaiter(void 0, void 0, void 0, function* () {
      var _b;
      if (!headlessHandler || !((_b = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) === null || _b === void 0 ? void 0 : _b.length)) {
        return;
      }
      triggeredOnboarding.current = true;
      try {
        const missingFieldsRequestInput = userWithMissingInfo.missingFields.map((field) => ({
          isCustom: field.type === "custom",
          key: field.name,
          label: field.label,
          required: field.required
        }));
        const onboardingResponse = yield headlessHandler(missingFieldsRequestInput);
        const userFields = {};
        const customFields = Object.assign({}, userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata);
        onboardingResponse.forEach((field) => {
          if (field.isCustom) {
            customFields[field.key] = field.value;
          } else {
            userFields[field.key] = field.value;
          }
        });
        yield completeAuth({
          updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () {
            return updateUser(Object.assign(Object.assign({}, userFields), { metadata: customFields }));
          })
        });
      } catch (error) {
        logger2.error("Error handling user onboarding", error);
        handleAuthError(error, {});
      }
    });
    const handleOnboarding = () => __awaiter(void 0, void 0, void 0, function* () {
      triggeredOnboarding.current = true;
      setShowAuthFlow(true);
      const lastVerifiedCredential = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.verifiedCredentials.find((vc) => vc.id === (userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.lastVerifiedCredentialId));
      if (lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.walletName) {
        setSelectedWalletConnectorKey(lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.walletName);
      }
      switch (lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.format) {
        case JwtVerifiedCredentialFormatEnum.Email:
        case JwtVerifiedCredentialFormatEnum.Oauth:
          setView("collect-user-data-login-no-wallet", {
            userIdentification: "email"
          });
          break;
        case JwtVerifiedCredentialFormatEnum.PhoneNumber:
          setView("collect-user-data-login-no-wallet", {
            userIdentification: "phoneNumber",
            userIdentificationOverride: formattedPhone
          });
          break;
        default:
          setView("collect-user-data");
      }
    });
    if (!sdkHasLoaded || triggeredOnboarding.current || !((_a = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) === null || _a === void 0 ? void 0 : _a.length) || hasPendingMfaAction(userWithMissingInfo)) {
      return;
    }
    if (headlessHandler) {
      handleHeadlessOnboarding();
      return;
    }
    handleOnboarding();
    return;
  }, [
    sdkHasLoaded,
    userWithMissingInfo,
    headlessHandler,
    completeAuth,
    updateUser,
    setShowAuthFlow,
    setView,
    formattedPhone,
    handleAuthError,
    setSelectedWalletConnectorKey
  ]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/SyncAuthFlow/SyncAuthFlow.js
var SyncAuthFlow = () => {
  useSyncOnboardingFlow();
  useSyncEmbeddedWalletFlow();
  useSyncMfaFlow();
  return null;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/Toolkit.js
var import_jsx_runtime382 = __toESM(require_jsx_runtime(), 1);
var import_react409 = __toESM(require_react(), 1);
var import_react_dom233 = __toESM(require_react_dom(), 1);
var import_qrcode229 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/components/ThemeSwitch.js
var import_jsx_runtime376 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Switch/Switch.js
var import_jsx_runtime375 = __toESM(require_jsx_runtime(), 1);
var Switch = ({ disabled = false, firstButton, secondButton, thirdButton }) => (0, import_jsx_runtime375.jsxs)("div", { className: classNames("switch__container", { disabled }), children: [(0, import_jsx_runtime375.jsx)("button", { disabled, className: classNames("button", { active: firstButton.active }), onClick: firstButton.handleButtonClick, children: firstButton.name }), (0, import_jsx_runtime375.jsx)("button", { disabled, className: classNames("button", { active: secondButton.active }), onClick: secondButton.handleButtonClick, children: secondButton.name }), thirdButton && (0, import_jsx_runtime375.jsx)("button", { disabled, className: classNames("button", { active: thirdButton.active }), onClick: thirdButton.handleButtonClick, children: thirdButton.name })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/components/ThemeSwitch.js
var ThemeSwitch = () => {
  const { changeTheme, theme } = useThemeContext();
  return (0, import_jsx_runtime376.jsx)(Switch, { firstButton: {
    active: theme.theme.name === "light",
    handleButtonClick: () => changeTheme("light"),
    name: "Light"
  }, secondButton: {
    active: theme.theme.name === "dark",
    handleButtonClick: () => changeTheme("dark"),
    name: "Dark"
  }, thirdButton: {
    active: theme.theme.name === "auto",
    handleButtonClick: () => changeTheme("auto"),
    name: "Auto"
  } });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/components/PrimaryColorInput.js
var import_jsx_runtime377 = __toESM(require_jsx_runtime(), 1);
var import_react406 = __toESM(require_react(), 1);
var PrimaryColorInput = () => {
  const { changePrimaryColor, theme } = useThemeContext();
  const [color, setColor] = (0, import_react406.useState)(theme.customColor);
  return (0, import_jsx_runtime377.jsx)(Input, { id: "primary-color", label: "Primary color", value: color, onChange: (e2) => setColor(e2.target.value), onBlur: (e2) => {
    const newColor = color || theme.customColor;
    setColor(newColor);
    changePrimaryColor(newColor);
  } });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/components/AuthModeSwitch.js
var import_jsx_runtime378 = __toESM(require_jsx_runtime(), 1);
var AuthModeSwitch = ({ authMode, setAuthMode }) => (0, import_jsx_runtime378.jsxs)(import_jsx_runtime378.Fragment, { children: [(0, import_jsx_runtime378.jsxs)("div", { className: "auth-mode-switch__container", children: [(0, import_jsx_runtime378.jsx)(Checkbox, { checked: authMode === "connect-and-sign", onChange: () => setAuthMode("connect-and-sign"), id: "connect-and-sign" }), (0, import_jsx_runtime378.jsx)("label", { htmlFor: "connect-and-sign", children: (0, import_jsx_runtime378.jsx)(Typography, { color: "primary", weight: "regular", children: "Connect and sign" }) })] }), (0, import_jsx_runtime378.jsxs)("div", { className: "auth-mode-switch__container", children: [(0, import_jsx_runtime378.jsx)(Checkbox, { checked: authMode === "connect-only", onChange: () => setAuthMode("connect-only"), id: "connect-only" }), (0, import_jsx_runtime378.jsx)("label", { htmlFor: "connect-only", children: (0, import_jsx_runtime378.jsx)(Typography, { color: "primary", weight: "regular", children: "Connect only" }) })] })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/components/LoginWithEmailSwitch.js
var import_jsx_runtime379 = __toESM(require_jsx_runtime(), 1);
var import_react407 = __toESM(require_react(), 1);
var import_react_dom231 = __toESM(require_react_dom(), 1);
var import_qrcode227 = __toESM(require_browser(), 1);
var LoginWithEmailSwitch = () => {
  const { loginWithEmail, setLogInWithEmail } = useInternalDynamicContext();
  return (0, import_jsx_runtime379.jsx)(Switch, { firstButton: {
    active: loginWithEmail,
    handleButtonClick: () => setLogInWithEmail(true),
    name: "True"
  }, secondButton: {
    active: !loginWithEmail,
    handleButtonClick: () => setLogInWithEmail(false),
    name: "False"
  } });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/components/LoginWithEmailViewDisplayPriorityOrderSwitch.js
var import_jsx_runtime380 = __toESM(require_jsx_runtime(), 1);
var import_react408 = __toESM(require_react(), 1);
var import_react_dom232 = __toESM(require_react_dom(), 1);
var import_qrcode228 = __toESM(require_browser(), 1);
var LoginWithEmailViewDisplayPriorityOrderSwitch = () => {
  const { authorizationViewDisplayOrder, setAuthorizationViewDisplayOrder, loginWithEmail } = useInternalDynamicContext();
  return (0, import_jsx_runtime380.jsx)(Switch, { disabled: !loginWithEmail, firstButton: {
    active: authorizationViewDisplayOrder === "web2",
    handleButtonClick: () => setAuthorizationViewDisplayOrder("web2"),
    name: "Email"
  }, secondButton: {
    active: authorizationViewDisplayOrder === "web3",
    handleButtonClick: () => setAuthorizationViewDisplayOrder("web3"),
    name: "Wallet"
  } });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/components/TemplateSelect.js
var import_jsx_runtime381 = __toESM(require_jsx_runtime(), 1);
var TemplateSelect = () => {
  const { theme, changeTemplate } = useThemeContext();
  const handleChange = (e2) => {
    changeTemplate(e2.target.value);
  };
  return (0, import_jsx_runtime381.jsxs)(Select, { label: "template", value: theme.template, onChange: handleChange, selectDataTestId: "template-select", children: [(0, import_jsx_runtime381.jsx)("option", { value: "default", children: "Default" }), (0, import_jsx_runtime381.jsx)("option", { value: "matrix", children: "Matrix" }), (0, import_jsx_runtime381.jsx)("option", { value: "minimal", children: "Minimal" }), (0, import_jsx_runtime381.jsx)("option", { value: "rounded", children: "Rounded" }), (0, import_jsx_runtime381.jsx)("option", { value: "trinity", children: "Trinity" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/Toolkit/Toolkit.js
var Toolkit = () => {
  const { projectSettings, user, showAuthFlow, showDynamicUserProfile, toolkitEnabled, authMode, setAuthMode } = useInternalDynamicContext();
  const isToolkitVisible = (0, import_react409.useMemo)(() => {
    if (!toolkitEnabled)
      return false;
    return showDynamicUserProfile || showAuthFlow;
  }, [showAuthFlow, showDynamicUserProfile, toolkitEnabled]);
  if (!isToolkitVisible)
    return null;
  return (0, import_jsx_runtime382.jsx)(ShadowDOM, { dataTestId: "toolkit-shadowdom", className: "toolkit-shadowdom", zIndex: toolkitZIndex, children: (0, import_jsx_runtime382.jsxs)("div", { className: "toolkit__container", children: [(0, import_jsx_runtime382.jsxs)("div", { className: "toolkit__switcher", children: [(0, import_jsx_runtime382.jsx)(Typography, { className: "switcher__copy", as: "h2", variant: "body_normal", children: "Theme" }), (0, import_jsx_runtime382.jsx)(ThemeSwitch, {})] }), (0, import_jsx_runtime382.jsxs)("div", { className: "toolkit__switcher", children: [(0, import_jsx_runtime382.jsx)(Typography, { className: "switcher__copy", as: "h2", variant: "body_normal", children: "Template" }), (0, import_jsx_runtime382.jsx)(TemplateSelect, {})] }), (0, import_jsx_runtime382.jsxs)("div", { className: "toolkit__switcher", children: [(0, import_jsx_runtime382.jsx)(Typography, { className: "switcher__copy", as: "h2", variant: "body_normal", children: "Primary Color" }), (0, import_jsx_runtime382.jsx)(PrimaryColorInput, {})] }), !user && (0, import_jsx_runtime382.jsxs)("div", { className: "toolkit__switcher", children: [(0, import_jsx_runtime382.jsx)(Typography, { className: "switcher__copy", as: "h2", variant: "body_normal", children: "Auth mode" }), (0, import_jsx_runtime382.jsx)(AuthModeSwitch, { authMode, setAuthMode })] }), isEmailProviderEnabled((projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) || []) && !user && (0, import_jsx_runtime382.jsxs)(import_jsx_runtime382.Fragment, { children: [(0, import_jsx_runtime382.jsxs)("div", { className: "toolkit__switcher", children: [(0, import_jsx_runtime382.jsx)(Typography, { className: "switcher__copy", as: "h2", variant: "body_normal", children: "Log in with Email" }), (0, import_jsx_runtime382.jsx)(LoginWithEmailSwitch, {})] }), (0, import_jsx_runtime382.jsxs)("div", { className: "toolkit__switcher", children: [(0, import_jsx_runtime382.jsx)(Typography, { className: "switcher__copy", as: "h2", variant: "body_normal", children: "Email vs Wallet priority" }), (0, import_jsx_runtime382.jsx)(LoginWithEmailViewDisplayPriorityOrderSwitch, {})] })] })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TelegramAutoLogin/TelegramAutoLogin.js
var import_react411 = __toESM(require_react(), 1);
var import_jsx_runtime384 = __toESM(require_jsx_runtime(), 1);
var import_react_dom235 = __toESM(require_react_dom(), 1);
var import_qrcode231 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useTelegramLogin/useTelegramLogin.js
var import_react410 = __toESM(require_react(), 1);
var import_jsx_runtime383 = __toESM(require_jsx_runtime(), 1);
var import_react_dom234 = __toESM(require_react_dom(), 1);
var import_qrcode230 = __toESM(require_browser(), 1);
var useTelegramLogin = () => {
  const { sdkHasLoaded, user, projectSettings } = useInternalDynamicContext();
  const providers = (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) || [];
  const { completeConnection } = useSocialAuth({
    sessionTimeout: 2e4
  });
  (0, import_react410.useEffect)(() => {
    const telegramSignIn2 = () => __awaiter(void 0, void 0, void 0, function* () {
      if (typeof window === "undefined") {
        return;
      }
      const search = new URLSearchParams(window.location.search);
      const telegramAuthToken = search.get("telegramAuthToken");
      if (!isProviderEnabled(providers, ProviderEnum.Telegram) || user || !telegramAuthToken || !sdkHasLoaded) {
        return;
      }
      yield completeConnection({
        authMode: "signin",
        provider: ProviderEnum.Telegram,
        state: "",
        telegramAuthToken
      });
    });
    telegramSignIn2();
  }, [sdkHasLoaded]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/TelegramAutoLogin/TelegramAutoLogin.js
var TelegramAutoLogin = () => {
  useTelegramLogin();
  return null;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getMissingChains/getMissingChains.js
var getMissingChains = (arr1, arr2) => {
  if (!arr1 || !arr2) {
    return;
  }
  const chainSet = new Set(arr2.map((obj) => obj.walletChain));
  const uniqueChains = arr1.filter((obj) => !chainSet.has(obj.chain));
  return uniqueChains;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/typeGuard/isThemeSetting.js
var themeModes = ["light", "dark", "auto"];
var isThemeSetting = (theme) => themeModes.includes(theme);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/parseTheme/parseTheme.js
var parseTheme = (theme, projectSettingsDesignModal) => isThemeSetting(theme) ? getThemeConfig(projectSettingsDesignModal, theme) : theme;

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useMultiWalletWidgetState/useMultiWalletWidgetState.js
var import_react414 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useMultiWalletWidgetState/substates/useAwaitingAccountSwitch.js
var import_react412 = __toESM(require_react(), 1);
var validTransitions = {
  idle: ["linking_new_wallet", "primary_not_connected", "switching_primary"],
  linking_new_wallet: ["idle"],
  primary_not_connected: ["idle"],
  switching_primary: ["idle"]
};
var validateStateTransition = ({ from, to }) => {
  if (from !== to && !validTransitions[from].includes(to)) {
    throw new Error(`Invalid AccountSwitch state transition from ${from} to ${to}`);
  }
  return true;
};
var validateMultiWalletWidgetState = (multiWalletWidgetState) => {
  if (multiWalletWidgetState !== "awaiting_account_switch") {
    throw new Error(`Invalid MultiWalletWidget state while trying to set AccountSwitch state: ${multiWalletWidgetState}
Expected: awaiting_account_switch`);
  }
};
var useAwaitingAccountSwitch = () => {
  const [accountSwitchState, setInternalAccountSwitchState] = (0, import_react412.useState)("idle");
  const resetState = (0, import_react412.useCallback)(() => {
    setInternalAccountSwitchState("idle");
  }, [setInternalAccountSwitchState]);
  const setAccountSwitchState = (0, import_react412.useCallback)((newAccountSwitchState, widgetState) => {
    validateMultiWalletWidgetState(widgetState);
    validateStateTransition({
      from: accountSwitchState,
      to: newAccountSwitchState
    });
    setInternalAccountSwitchState(newAccountSwitchState);
  }, [accountSwitchState]);
  return [accountSwitchState, setAccountSwitchState, resetState];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useMultiWalletWidgetState/substates/useAwaitingSignature.js
var import_react413 = __toESM(require_react(), 1);
var validTransitions2 = {
  idle: ["linking_new_wallet", "transferring_wallet"],
  linking_new_wallet: ["idle"],
  transferring_wallet: ["idle"]
};
var validateStateTransition2 = ({ from, to }) => {
  if (from !== to && !validTransitions2[from].includes(to)) {
    throw new Error(`Invalid AwaitingSignature state transition from ${from} to ${to}`);
  }
  return true;
};
var validateMultiWalletWidgetState2 = (multiWalletWidgetState) => {
  if (multiWalletWidgetState !== "awaiting_signature") {
    throw new Error(`Invalid MultiWalletWidget state while trying to set AwaitingSignature state: ${multiWalletWidgetState}
Expected: awaiting_signature`);
  }
};
var useAwaitingSignature = () => {
  const [awaitingSignatureState, setInternalAwaitingSignatureState] = (0, import_react413.useState)("idle");
  const resetState = (0, import_react413.useCallback)(() => {
    setInternalAwaitingSignatureState("idle");
  }, [setInternalAwaitingSignatureState]);
  const setAwaitingSignatureState = (0, import_react413.useCallback)((newAwaitingSignatureState, widgetState) => {
    validateMultiWalletWidgetState2(widgetState);
    validateStateTransition2({
      from: awaitingSignatureState,
      to: newAwaitingSignatureState
    });
    setInternalAwaitingSignatureState(newAwaitingSignatureState);
  }, [awaitingSignatureState]);
  return [
    awaitingSignatureState,
    setAwaitingSignatureState,
    resetState
  ];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/multiWallet/useMultiWalletWidgetState/useMultiWalletWidgetState.js
var validTransitions3 = {
  awaiting_account_switch: ["awaiting_signature", "idle"],
  awaiting_connection: ["idle"],
  awaiting_signature: ["idle"],
  detected_new_wallet: ["awaiting_signature", "idle"],
  idle: [
    "awaiting_account_switch",
    "awaiting_connection",
    "awaiting_signature",
    "detected_new_wallet"
  ]
};
var validateStateTransition3 = ({ from, to }) => {
  if (from !== to && !validTransitions3[from].includes(to)) {
    throw new Error(`Invalid MultiWalletWidget state transition from ${from} to ${to}`);
  }
  return true;
};
var useMultiWalletWidgetState = () => {
  const [multiWalletWidgetState, setCoreMultiWalletWidgetState] = (0, import_react414.useState)("idle");
  const [accountSwitchState, setAccountSwitchState, resetAccountSwitchState] = useAwaitingAccountSwitch();
  const [awaitingSignatureState, setAwaitingSignatureState, resetAwaitingSignatureState] = useAwaitingSignature();
  const resetSubStates = (0, import_react414.useCallback)(() => {
    resetAccountSwitchState();
    resetAwaitingSignatureState();
  }, [resetAccountSwitchState, resetAwaitingSignatureState]);
  const setMultiWalletWidgetState = (0, import_react414.useCallback)((newWidgetState, newAccountSwitchState, newAwaitingSignatureState) => {
    validateStateTransition3({
      from: multiWalletWidgetState,
      to: newWidgetState
    });
    setCoreMultiWalletWidgetState(newWidgetState);
    resetSubStates();
    if (newAccountSwitchState) {
      setAccountSwitchState(newAccountSwitchState, newWidgetState);
    }
    if (newAwaitingSignatureState) {
      setAwaitingSignatureState(newAwaitingSignatureState, newWidgetState);
    }
  }, [
    multiWalletWidgetState,
    resetSubStates,
    setAccountSwitchState,
    setAwaitingSignatureState
  ]);
  return [
    multiWalletWidgetState,
    setMultiWalletWidgetState,
    {
      awaiting_account_switch: [accountSwitchState, setAccountSwitchState],
      awaiting_signature: [awaitingSignatureState, setAwaitingSignatureState]
    }
  ];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useClearWalletConnectSessions/useClearWalletConnectSessions.js
var import_react415 = __toESM(require_react(), 1);
var useClearWalletConnectSessions = ({ connectors }) => {
  const clearAllWalletConnectSessions = () => {
    if (typeof window === "undefined")
      return;
    for (const key of StorageService.getKeys()) {
      if (key.startsWith("walletconnect") || key.startsWith("walletlink") || key.startsWith("wc@2")) {
        localStorage.removeItem(key);
      }
    }
    connectors === null || connectors === void 0 ? void 0 : connectors.forEach((connector) => {
      var _a, _b, _c;
      if ((_b = (_a = connector === null || connector === void 0 ? void 0 : connector.name) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.startsWith("turnkey")) {
        (_c = connector.getAuthenticatorHandler()) === null || _c === void 0 ? void 0 : _c.clear();
        StorageService.removeItem(EMBEDDED_WALLET_SESSION_SETTINGS);
        StorageService.removeItem(EMBEDDED_WALLET_SECURE_BANNER);
      }
    });
  };
  (0, import_react415.useEffect)(() => {
    if (typeof window === "undefined")
      return;
    if (connectors.length === 0)
      return;
    const keys2 = new Set(connectors.map((connector) => connector.key));
    for (const key of StorageService.getKeys()) {
      if (key.startsWith("walletconnect") && !keys2.has(key.replace("walletconnect-", ""))) {
        localStorage.removeItem(key);
      }
    }
  }, [connectors]);
  return { clearAllWalletConnectSessions };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConnectWallet/useConnectWallet.js
var import_react417 = __toESM(require_react(), 1);
var import_jsx_runtime386 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/session/session.js
var import_jsx_runtime385 = __toESM(require_jsx_runtime(), 1);
var import_react416 = __toESM(require_react(), 1);
var revokeSession = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, sessionId }) {
  try {
    yield sdkApi().revokeSession({
      environmentId
    });
  } catch (error) {
    const body = yield error.json();
    logger2.error(Error(body.error.message));
  }
});
var mapChainToChainEnum = (chain) => {
  const foundChain = Object.values(ChainEnum).find((value) => value === chain);
  if (!foundChain) {
    throw new DynamicError(`Invalid chain ${chain}`);
  }
  return foundChain;
};
var mapProviderToProviderEnum = (provider) => {
  const foundProvider = Object.values(WalletProviderEnum).find((value) => value === provider);
  if (!foundProvider) {
    throw new DynamicError(`Invalid provider ${provider}`);
  }
  return foundProvider;
};
var mapAuthModeTypeToEnum = (authMode) => {
  const found = Object.values(AuthModeEnum).find((value) => value === authMode);
  if (!found) {
    throw new DynamicError(`Invalid authMode ${authMode}`);
  }
  return found;
};
var createVisit = (_b) => __awaiter(void 0, [_b], void 0, function* ({ authMode, chain, environmentId, walletProvider, publicWalletAddress, walletName }) {
  try {
    const connectRequest = {
      address: publicWalletAddress,
      authMode: mapAuthModeTypeToEnum(authMode),
      chain: mapChainToChainEnum(chain),
      provider: mapProviderToProviderEnum(walletProvider),
      walletName
    };
    yield sdkApi().createVisit({
      connectRequest,
      environmentId
    });
  } catch (error) {
    logger2.error(error);
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConnectWallet/updateUserWalletsFromConnectedWallets/updateUserWalletsFromConnectedWallets.js
var updateUserWalletsFromConnectedWallets = (userWallets, connectedWallets) => {
  const userWalletsCopy = [...userWallets];
  const newWalletsAddresses = /* @__PURE__ */ new Set();
  for (const connectedWallet of connectedWallets) {
    newWalletsAddresses.add(connectedWallet.address);
    const userWallet = userWalletsCopy.find((wallet) => wallet.address === connectedWallet.address);
    if (!userWallet) {
      userWalletsCopy.push(connectedWallet);
    }
  }
  return userWalletsCopy.filter((userWallet) => (
    // Keep wallets that are still in the new list
    newWalletsAddresses.has(userWallet.address) || // Or are linked to the current user
    userWallet.isAuthenticated
  ));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConnectWallet/useConnectWallet.js
var useConnectWallet = ({ authMode, clearPrimaryWalletId, enableVisitTrackingOnConnectOnly, environmentId, primaryWalletId, setPrimaryWalletId, walletConnectorOptions, handleConnectedWallet, setShowAuthFlow, isBridgeFlow, user }) => {
  const [connectedWalletsInfo, setConnectedWalletsInfo, removeConnectedWalletsInfo] = useLocalStorage(CONNECTED_WALLETS_INFO, []);
  const [connectedWallets, _setConnectedWallets] = (0, import_react417.useState)([]);
  const { setUserWallets, addedWalletsIds, removedWalletsIds } = useInternalUserWallets();
  const setConnectedWallets = (0, import_react417.useCallback)((newWallets) => {
    _setConnectedWallets(newWallets);
    setUserWallets((userWallets) => updateUserWalletsFromConnectedWallets(userWallets, newWallets));
  }, [setUserWallets]);
  const disconnectWallet = (0, import_react417.useCallback)((walletId) => __awaiter(void 0, void 0, void 0, function* () {
    const walletToDisconnect = connectedWallets.find((wallet) => wallet.id === walletId);
    yield walletToDisconnect === null || walletToDisconnect === void 0 ? void 0 : walletToDisconnect.connector.endSession();
    const updatedConnectedWalletsInfo = connectedWalletsInfo.filter((wallet) => wallet.id !== walletId);
    setConnectedWalletsInfo(updatedConnectedWalletsInfo);
    removedWalletsIds.current.push(walletId);
    if (walletId !== primaryWalletId) {
      return;
    }
    const hasConnectedWallet = updatedConnectedWalletsInfo.length > 0;
    if (isBridgeFlow || !hasConnectedWallet) {
      clearPrimaryWalletId();
    } else {
      setPrimaryWalletId(updatedConnectedWalletsInfo[0].id);
    }
  }), [
    clearPrimaryWalletId,
    connectedWallets,
    connectedWalletsInfo,
    isBridgeFlow,
    primaryWalletId,
    removedWalletsIds,
    setConnectedWalletsInfo,
    setPrimaryWalletId
  ]);
  const updateConnectedWalletsList = (0, import_react417.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    const walletConnectors = walletConnectorOptions.map((wallet) => wallet.walletConnector);
    if (!walletConnectors.length) {
      return;
    }
    const updatedConnectedWallets = (yield Promise.all(connectedWalletsInfo.map((storedConnectedWalletInfo) => __awaiter(void 0, void 0, void 0, function* () {
      const walletConnector = getWalletConnectorByKey(walletConnectors, storedConnectedWalletInfo.walletConnectorKey);
      if (!walletConnector) {
        logger.error("Could not find walletConnector: " + storedConnectedWalletInfo.walletConnectorKey);
        yield disconnectWallet(storedConnectedWalletInfo.id);
        return null;
      }
      if (isHardwareWalletConnector(walletConnector) && storedConnectedWalletInfo.hardwareWallet === HardwareWalletEnum.Ledger) {
        walletConnector.isHardwareWalletEnabled = true;
      }
      const [walletAddress] = yield walletConnector.getConnectedAccounts();
      if (!walletAddress) {
        yield disconnectWallet(storedConnectedWalletInfo.id);
        return null;
      }
      const additionalAddresses = yield walletConnector.getAdditionalAddresses(walletAddress);
      const walletChain = walletConnector.connectedChain;
      const walletObject = walletConnector.createWallet({
        additionalAddresses,
        address: walletAddress,
        chain: walletChain,
        connector: walletConnector,
        id: storedConnectedWalletInfo.id,
        isAuthenticated: false,
        key: walletConnector.key
      });
      return walletObject;
    })))).filter((wallet) => Boolean(wallet));
    setConnectedWallets(updatedConnectedWallets);
  }), [
    connectedWalletsInfo,
    disconnectWallet,
    setConnectedWallets,
    walletConnectorOptions
  ]);
  (0, import_react417.useEffect)(() => {
    updateConnectedWalletsList();
  }, [connectedWalletsInfo, walletConnectorOptions]);
  const getNextIdAvailable = (0, import_react417.useCallback)((currentWallets) => {
    const existingIds = currentWallets.map(({ id }) => id);
    const sortedIds = existingIds.map((id) => Number(id.replace("connect-wallet-", ""))).sort((a, b) => a - b);
    for (let i = 0; i < sortedIds.length; i++) {
      if (sortedIds[i] !== i) {
        return i;
      }
    }
    return sortedIds.length;
  }, []);
  const updateConnectedWalletById = (0, import_react417.useCallback)((walletId, walletObject) => {
    var _a;
    const clonedConnectedWalletsList = [...connectedWallets];
    const connectedWalletIndex = clonedConnectedWalletsList.findIndex((connectedWallet) => connectedWallet.id === walletId);
    if (connectedWalletIndex > -1) {
      clonedConnectedWalletsList[connectedWalletIndex].address = (_a = walletObject.address) !== null && _a !== void 0 ? _a : clonedConnectedWalletsList[connectedWalletIndex].address;
    }
    setConnectedWallets(clonedConnectedWalletsList);
  }, [connectedWallets, setConnectedWallets]);
  const applyConnectedWalletToStore = ({ walletId, walletConnectorKey, walletChain, provider }) => {
    const updatedConnectedWalletsInfo = [...connectedWalletsInfo];
    const walletConnectors = walletConnectorOptions.map((wallet) => wallet.walletConnector);
    const walletConnector = getWalletConnectorByKey(walletConnectors, walletConnectorKey);
    const hardwareWallet = walletConnector && isHardwareWalletConnector(walletConnector) && walletConnector.isHardwareWalletEnabled ? HardwareWalletEnum.Ledger : void 0;
    updatedConnectedWalletsInfo.push({
      hardwareWallet,
      id: walletId,
      provider,
      walletChain,
      walletConnectorKey
    });
    setConnectedWalletsInfo(updatedConnectedWalletsInfo);
  };
  const refreshConnectedWallet = (walletId, walletConnector) => __awaiter(void 0, void 0, void 0, function* () {
    if (shouldManuallyReconnectOnRefresh(walletConnector)) {
      yield walletConnector.connect();
    }
    const currentWalletConnectorAddress = yield walletConnector.getAddress();
    if (currentWalletConnectorAddress && handleConnectedWallet) {
      const shouldProceedWithConnection = yield handleConnectedWallet({
        address: currentWalletConnectorAddress,
        chain: walletConnector.connectedChain,
        connector: walletConnector
      });
      if (!shouldProceedWithConnection) {
        logger.info("Connection was not established because handleConnectedWallet returned false");
        disconnectWallet(walletId);
        setShowAuthFlow(false, { emitCancelAuth: true });
        return;
      }
    }
    updateConnectedWalletById(walletId, {
      address: currentWalletConnectorAddress
    });
  });
  const connectWallet = (walletConnector, getAddressOpts, options2) => __awaiter(void 0, void 0, void 0, function* () {
    const { applyHandleConnectedWallet = true } = options2 !== null && options2 !== void 0 ? options2 : {};
    const walletAddress = yield walletConnector.getAddress(getAddressOpts);
    if (!walletAddress) {
      throw new MissingPublicAddressError();
    }
    if (handleConnectedWallet && applyHandleConnectedWallet) {
      const shouldProceedWithConnection = yield handleConnectedWallet({
        address: walletAddress,
        chain: walletConnector.connectedChain,
        connector: walletConnector
      });
      if (!shouldProceedWithConnection) {
        logger.info("Connection was not established because handleConnectedWallet returned false");
        setShowAuthFlow(false);
        return;
      }
    }
    const isWalletStored = connectedWalletsInfo.some(({ walletConnectorKey: storedWalletConnectorKey }) => storedWalletConnectorKey === walletConnector.key);
    const walletChain = walletConnector.connectedChain;
    const shouldCreateVisit = !isWalletStored && (authMode !== "connect-only" || enableVisitTrackingOnConnectOnly);
    if (shouldCreateVisit) {
      createVisit({
        authMode,
        chain: walletChain || "",
        environmentId,
        publicWalletAddress: walletAddress,
        walletName: walletConnector.key,
        walletProvider: getWalletProvider(walletConnector)
      });
    }
    if (!isConnectOnly(user, authMode))
      return { address: walletAddress, id: "" };
    const walletId = `connect-wallet-${getNextIdAvailable(connectedWalletsInfo)}`;
    if (!primaryWalletId) {
      setPrimaryWalletId(walletId);
    }
    addedWalletsIds.current.push(walletId);
    if (isWalletStored) {
      yield updateConnectedWalletsList();
    } else {
      applyConnectedWalletToStore({
        provider: getWalletProvider(walletConnector),
        walletAddress,
        walletChain,
        walletConnectorKey: walletConnector.key,
        walletId
      });
    }
    return { address: walletAddress, id: walletId };
  });
  const getConnectedWalletById = (0, import_react417.useCallback)((walletId) => connectedWallets.find((wallet) => wallet.id === walletId), [connectedWallets]);
  return {
    connectWallet,
    connectedWallets,
    connectedWalletsInfo,
    disconnectWallet,
    getConnectedWalletById,
    refreshConnectedWallet,
    removeConnectedWalletsInfo
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useFetchWalletsForChainsMap/useFetchWalletsForChainsMap.js
var import_react418 = __toESM(require_react(), 1);
var import_jsx_runtime387 = __toESM(require_jsx_runtime(), 1);
var useFetchWalletsForChainsMap = (propsWalletsChainsMap) => {
  const walletsForChainsMap = (0, import_react418.useMemo)(() => {
    if (!propsWalletsChainsMap) {
      return defaultWalletsForChains;
    }
    return Object.assign(Object.assign({}, defaultWalletsForChains), { primary_chain: propsWalletsChainsMap.primary_chain, wallets: Object.assign(Object.assign({}, defaultWalletsForChains.wallets), Boolean(propsWalletsChainsMap.wallets) && propsWalletsChainsMap.wallets) });
  }, [propsWalletsChainsMap]);
  return { walletsForChainsMap };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useHandleUnlinkWallet/useHandleUnlinkWallet.js
var import_react419 = __toESM(require_react(), 1);
var import_jsx_runtime388 = __toESM(require_jsx_runtime(), 1);
var useHandleUnlinkWallet = ({ verifiedCredentials, environmentId, primaryWalletId, secondaryWallets }) => {
  const { removedWalletsIds } = useInternalUserWallets();
  const callback = (0, import_react419.useCallback)((walletId) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const currentPrimaryWalletId = (_a = StorageService.getItem(PRIMARY_WALLET_ID)) !== null && _a !== void 0 ? _a : primaryWalletId;
    if (walletId === currentPrimaryWalletId)
      return;
    yield unlinkWallet({
      environmentId,
      onSuccess: () => {
        removedWalletsIds.current.push(walletId);
      },
      primaryWalletId: currentPrimaryWalletId,
      walletId
    });
    const wallet = secondaryWallets.find((w) => w.id === walletId);
    const numberOfLinkedWallets = verifiedCredentials.filter((account) => account.walletName === ((wallet === null || wallet === void 0 ? void 0 : wallet.connector.key) || "")).length;
    if (numberOfLinkedWallets === 1) {
      yield wallet === null || wallet === void 0 ? void 0 : wallet.connector.endSession();
    }
  }), [
    primaryWalletId,
    environmentId,
    secondaryWallets,
    verifiedCredentials,
    removedWalletsIds
  ]);
  return callback;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePrimaryWalletId/usePrimaryWalletId.js
var import_react420 = __toESM(require_react(), 1);
var import_jsx_runtime389 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletConnectors/utils/primaryWalletIdValidator/primaryWalletIdValidator.js
var primaryWalletIdValidator = (value) => typeof value === "string" || typeof value === "undefined";

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/usePrimaryWalletId/usePrimaryWalletId.js
var usePrimaryWalletId = ({ environmentId, user }) => {
  const [primaryWalletId, setPrimaryWalletIdState, clearPrimaryWalletId] = useLocalStorage(PRIMARY_WALLET_ID, void 0, primaryWalletIdValidator);
  const setPrimaryWalletId = (0, import_react420.useCallback)((walletId) => __awaiter(void 0, void 0, void 0, function* () {
    setPrimaryWalletIdState(walletId);
    if (user) {
      yield storeSelectedWallet({ environmentId, walletId });
    }
  }), [environmentId, setPrimaryWalletIdState, user]);
  return {
    clearPrimaryWalletId,
    primaryWalletId,
    setPrimaryWalletId
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletEventListeners/useWalletEventListeners.js
var import_react421 = __toESM(require_react(), 1);
var import_jsx_runtime390 = __toESM(require_jsx_runtime(), 1);
var useWalletEventListeners = ({ disconnectWallet, handleLogOut, multiWallet, multiWalletWidgetState, primaryWallet, secondaryWallets, selectedWalletConnector, selectedWalletWithAction, setSelectedWalletConnectorKey, setSelectedWalletWithAction, setMultiWalletWidgetState, user, setPrimaryWalletId, authMode, refreshConnectedWallet, detectNewWalletsForLinking }) => {
  useWalletConnectorEvent(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector, "chainChange", ({ chain }) => {
    logger2.debug("primary wallet chain change", { chain });
    if (!primaryWallet) {
      return;
    }
    refreshConnectedWallet(primaryWallet.id, primaryWallet.connector);
  });
  const handleAccountChangeWhenAwaitingAccountSwitch = (0, import_react421.useCallback)((isPrimaryWallet, newAddress) => {
    logger2.debug("handleAccountChangeWhenAwaitingAccountSwitch", {
      isPrimaryWallet,
      newAddress
    });
    const linkedSecondaryWallet = secondaryWallets.find((wallet) => isSameAddress(wallet.address, newAddress, wallet.chain));
    logger2.logVerboseTroubleshootingMessage("[handleAccountChangeWhenAwaitingAccountSwitch]", { linkedSecondaryWallet });
    if (!linkedSecondaryWallet) {
      setMultiWalletWidgetState("awaiting_signature", void 0, "linking_new_wallet");
      if (isPrimaryWallet && primaryWallet) {
        setSelectedWalletConnectorKey(primaryWallet.connector.key);
      }
      return;
    }
    const isTryingToUpdateUnkownWallet = linkedSecondaryWallet.connector.key === "unknown";
    if (isTryingToUpdateUnkownWallet) {
      dynamicEvents.emit("triggerConnectAndSign");
      return;
    }
    setSelectedWalletWithAction(null);
    setPrimaryWalletId(linkedSecondaryWallet.id);
    setMultiWalletWidgetState("idle");
  }, [
    setMultiWalletWidgetState,
    primaryWallet,
    secondaryWallets,
    setSelectedWalletConnectorKey,
    setSelectedWalletWithAction,
    setPrimaryWalletId
  ]);
  const calculatePrimaryWalletMultiWalletStateFromAccounts = (0, import_react421.useCallback)(({ accounts }) => {
    logger2.debug("calculatePrimaryWalletMultiWalletStateFromAccounts", {
      accounts,
      authMode,
      multiWallet,
      multiWalletWidgetState,
      primaryWallet
    });
    if (!primaryWallet)
      return;
    const [newAddress] = accounts;
    const changedAddress = !isSameAddress(newAddress, primaryWallet.address, primaryWallet.chain);
    if (!changedAddress) {
      setMultiWalletWidgetState("idle");
      return;
    }
    if (authMode === "connect-only") {
      refreshConnectedWallet(primaryWallet.id, primaryWallet.connector);
      return;
    }
    if (!multiWallet) {
      return;
    }
    if (multiWalletWidgetState === "awaiting_account_switch") {
      handleAccountChangeWhenAwaitingAccountSwitch(true, newAddress);
      return;
    }
    if (multiWalletWidgetState !== "idle") {
      logger2.error(`Unexpected multiWalletWidgetState (${multiWalletWidgetState}) and onAccountChange combination. Resetting state to idle.`);
      setMultiWalletWidgetState("idle");
    }
    const newWallet = secondaryWallets.find((wallet) => isSameAddress(wallet.address, newAddress, wallet.chain));
    if (newWallet) {
      setPrimaryWalletId(newWallet.id);
      return;
    }
    if (user && detectNewWalletsForLinking) {
      setMultiWalletWidgetState("detected_new_wallet");
      setSelectedWalletConnectorKey(primaryWallet.connector.key);
    }
  }, [
    authMode,
    detectNewWalletsForLinking,
    handleAccountChangeWhenAwaitingAccountSwitch,
    multiWallet,
    multiWalletWidgetState,
    primaryWallet,
    refreshConnectedWallet,
    secondaryWallets,
    setMultiWalletWidgetState,
    setPrimaryWalletId,
    setSelectedWalletConnectorKey,
    user
  ]);
  useInternalDynamicEvents("triggerComputePrimaryWalletMultiWalletStateFromAccounts", calculatePrimaryWalletMultiWalletStateFromAccounts);
  useWalletConnectorEvent(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector, "accountChange", ({ accounts }) => {
    logger2.debug("primary wallet account change", {
      accounts
    });
    calculatePrimaryWalletMultiWalletStateFromAccounts({ accounts });
  });
  const uniqueNonPrimaryWallets = (0, import_react421.useMemo)(() => {
    const primaryConnector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
    const secondaryConnectors = secondaryWallets.map(({ connector }) => connector);
    const allWalletConnectors = new Set([
      ...secondaryConnectors,
      primaryConnector,
      selectedWalletConnector
    ].filter((connector) => Boolean(connector)));
    if (primaryConnector) {
      allWalletConnectors.delete(primaryConnector);
    }
    return Array.from(allWalletConnectors);
  }, [secondaryWallets, selectedWalletConnector, primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector]);
  useWalletConnectorEvent(uniqueNonPrimaryWallets, "accountChange", (_, changedConnector) => __awaiter(void 0, void 0, void 0, function* () {
    logger2.debug("secondary wallet account change");
    if (authMode === "connect-only" && secondaryWallets.length) {
      const affectedWallets = secondaryWallets.filter(({ connector }) => connector.key === changedConnector.key);
      for (const wallet of affectedWallets)
        refreshConnectedWallet(wallet.id, wallet.connector);
      return;
    }
    if (multiWalletWidgetState === "awaiting_account_switch") {
      handleAccountChangeWhenAwaitingAccountSwitch(false, (selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet.address) || "");
    }
  }));
  useWalletConnectorEvent(uniqueNonPrimaryWallets, "chainChange", (_, changedConnector) => __awaiter(void 0, void 0, void 0, function* () {
    logger2.debug("secondary wallet chain change");
    const affectedWallets = secondaryWallets.filter(({ connector }) => connector.key === changedConnector.key);
    for (const wallet of affectedWallets)
      refreshConnectedWallet(wallet.id, wallet.connector);
  }));
  useWalletConnectorEvent(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector, "disconnect", () => {
    logger2.debug("primary wallet disconnect");
    if (authMode === "connect-only") {
      handleLogOut();
    }
  });
  useWalletConnectorEvent(uniqueNonPrimaryWallets, "disconnect", (affectedConnector) => {
    logger2.debug("secondary wallet disconnect");
    if (authMode === "connect-only") {
      const affectedWallets = secondaryWallets.filter(({ connector }) => connector.key === affectedConnector.key);
      for (const wallet of affectedWallets) {
        disconnectWallet(wallet.id);
      }
    }
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/views/WalletList/hooks/useTabState.js
var import_react422 = __toESM(require_react(), 1);
var useTabState = ({ settingsOverrides }) => {
  var _a, _b, _c;
  const walletListViewSettings = (_a = settingsOverrides === null || settingsOverrides === void 0 ? void 0 : settingsOverrides.views) === null || _a === void 0 ? void 0 : _a.find((view) => view.type === "wallet-list");
  const [selectedTabIndex, setSelectedTabIndex] = (0, import_react422.useState)(0);
  const selectedTabSettings = selectedTabIndex === null ? void 0 : (_b = walletListViewSettings === null || walletListViewSettings === void 0 ? void 0 : walletListViewSettings.tabs) === null || _b === void 0 ? void 0 : _b.items[selectedTabIndex];
  return {
    selectedTabIndex,
    selectedTabSettings,
    setSelectedTabIndex,
    tabsItems: (_c = walletListViewSettings === null || walletListViewSettings === void 0 ? void 0 : walletListViewSettings.tabs) === null || _c === void 0 ? void 0 : _c.items
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/FundingWidget/FundingWidget.js
var import_jsx_runtime392 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/FundingWidget/views/FundWalletView/FundWalletView.js
var import_jsx_runtime391 = __toESM(require_jsx_runtime(), 1);
var import_react423 = __toESM(require_react(), 1);
var import_react_dom236 = __toESM(require_react_dom(), 1);
var import_qrcode232 = __toESM(require_browser(), 1);
var Modal2 = ({ onrampUrl }) => {
  const { fundingRef, setShowFunding } = useFundingContext();
  const close = () => {
    setShowFunding(false);
  };
  useOnClickOutside(fundingRef, close);
  return (0, import_jsx_runtime391.jsx)("div", { className: "fund-wallet__modal", "data-testid": "fund-wallet-modal", children: (0, import_jsx_runtime391.jsx)("div", { className: "fund-wallet__modal-content", ref: fundingRef, children: (0, import_jsx_runtime391.jsx)("iframe", { id: "onramp-iframe", src: onrampUrl, allow: "camera *;geolocation *", title: "Crypto Onramp" }) }) });
};
var FundWalletView = () => {
  const { primaryWallet } = useInternalDynamicContext();
  const { showFunding, fundingUrl, fundingEnabled } = useFundingContext();
  if (!fundingEnabled || !showFunding || !fundingUrl || !(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address)) {
    return null;
  }
  return (0, import_jsx_runtime391.jsx)(ShadowDOM, { children: (0, import_jsx_runtime391.jsxs)(OpacityTransition, { isShown: showFunding, children: [(0, import_jsx_runtime391.jsx)("div", { className: "fund-wallet__backdrop", "aria-hidden": "true" }), (0, import_jsx_runtime391.jsx)("div", { className: "fund-wallet__modal-container", children: (0, import_jsx_runtime391.jsx)(Modal2, { onrampUrl: fundingUrl }) })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/FundingWidget/FundingWidget.js
var FundingWidget = () => (0, import_jsx_runtime392.jsx)(FundWalletView, {});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/ConnectWithOtpProvider.js
var import_jsx_runtime396 = __toESM(require_jsx_runtime(), 1);
var import_react427 = __toESM(require_react(), 1);
var import_react_dom238 = __toESM(require_react_dom(), 1);
var import_qrcode234 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/utils/createEmailHandler.js
var import_jsx_runtime393 = __toESM(require_jsx_runtime(), 1);
var import_react424 = __toESM(require_react(), 1);
var createEmailHandler = (environmentId, { shouldRegisterSessionKeysOnSignin, generateSessionKey }) => (email) => __awaiter(void 0, void 0, void 0, function* () {
  const { verificationUUID } = yield createEmailVerification({
    email,
    environmentId
  });
  return {
    type: "email",
    verify: (oneTimePassword) => __awaiter(void 0, void 0, void 0, function* () {
      let sessionPublicKey = void 0;
      if (shouldRegisterSessionKeysOnSignin()) {
        const keypair = yield generateSessionKey();
        sessionPublicKey = keypair.publicKey;
      }
      const response = yield signInWithEmailVerification({
        environmentId,
        sessionPublicKey,
        verificationToken: oneTimePassword,
        verificationUUID
      });
      storeAuthTokenAndUser(response);
      return {
        destination: email,
        verified: Boolean(response.jwt)
      };
    })
  };
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/utils/createMagicHandler.js
var createMagicHandler = (connector, handleInstalledExtensionClick) => (email) => __awaiter(void 0, void 0, void 0, function* () {
  if (!connector) {
    throw new Error("OTP wallet connector was not found");
  }
  connector.setEmail(email);
  handleInstalledExtensionClick(connector);
  return {
    retry: () => connector.retryOneTimePassword(),
    type: "email",
    verify: (oneTimePassword) => __awaiter(void 0, void 0, void 0, function* () {
      return {
        destination: email,
        verified: yield connector.verifyOneTimePassword(oneTimePassword)
      };
    })
  };
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/utils/createSmsHandler.js
var import_jsx_runtime394 = __toESM(require_jsx_runtime(), 1);
var import_react425 = __toESM(require_react(), 1);
var import_react_dom237 = __toESM(require_react_dom(), 1);
var import_qrcode233 = __toESM(require_browser(), 1);
var createSmsHandler = (environmentId) => (phone) => __awaiter(void 0, void 0, void 0, function* () {
  const { generateSessionKey, shouldRegisterSessionKeysOnSignin } = useEmbeddedWalletSessionKeys(environmentId);
  const { verificationUUID } = yield createSmsVerification({
    environmentId,
    isoCountryCode: phone.iso2,
    phoneCountryCode: phone.dialCode,
    phoneNumber: phone.phone
  });
  return {
    type: "sms",
    verify: (oneTimePassword) => __awaiter(void 0, void 0, void 0, function* () {
      let sessionPublicKey = void 0;
      if (shouldRegisterSessionKeysOnSignin()) {
        const keypair = yield generateSessionKey();
        sessionPublicKey = keypair.publicKey;
      }
      const response = yield signInWithSmsVerification({
        environmentId,
        sessionPublicKey,
        verificationToken: oneTimePassword,
        verificationUUID
      });
      storeAuthTokenAndUser(response);
      return {
        destination: phone,
        verified: Boolean(response.jwt)
      };
    })
  };
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/utils/findEmailProvider.js
var import_jsx_runtime395 = __toESM(require_jsx_runtime(), 1);
var import_react426 = __toESM(require_react(), 1);
var findEmailProvider = (environmentId, email) => __awaiter(void 0, void 0, void 0, function* () {
  const { emailProvider } = yield getEmailProvider({
    email,
    environmentId
  });
  if (!allSupportedProviders.includes(emailProvider)) {
    throw new Error("Email provider is not supported");
  }
  return emailProvider;
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/ConnectWithOtpProvider.js
var { Provider } = ConnectWithOtpContext;
var ConnectWithOtpProvider = ({ children }) => {
  const { walletConnectorOptions, environmentId, projectSettings, setCallback } = useInternalDynamicContext();
  const embeddedWalletSessionKeys = useEmbeddedWalletSessionKeys(environmentId);
  const { handleInstalledExtensionClick } = useWalletItemActions();
  const lastVerificationHandlerRef = (0, import_react427.useRef)(null);
  const providers = (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) || [];
  const emailOtpWalletConnector = walletConnectorOptions.map(({ walletConnector }) => walletConnector).find(isEmailOTPWalletConnector);
  const mapProvider = {
    [ProviderEnum.Dynamic]: {
      enabled: isProviderEnabled(providers, ProviderEnum.Dynamic),
      handler: createEmailHandler(environmentId, embeddedWalletSessionKeys)
    },
    [ProviderEnum.MagicLink]: {
      enabled: isProviderEnabled(providers, ProviderEnum.MagicLink),
      handler: createMagicHandler(emailOtpWalletConnector, handleInstalledExtensionClick)
    }
  };
  const connectWithEmail = (email_1, ...args_1) => __awaiter(void 0, [email_1, ...args_1], void 0, function* (email, { provider } = {}) {
    if (!isEmailValid(email)) {
      throw new Error("Email is not valid");
    }
    const effectiveEmailProvider = provider || (yield findEmailProvider(environmentId, email));
    if (!mapProvider[effectiveEmailProvider].enabled) {
      throw new Error("Email provider is not enabled");
    }
    const verificationHandler = yield mapProvider[effectiveEmailProvider].handler(email);
    lastVerificationHandlerRef.current = verificationHandler;
  });
  const connectWithSms = (phone) => __awaiter(void 0, void 0, void 0, function* () {
    if (!isProviderEnabled(providers, ProviderEnum.Sms)) {
      throw new Error("SMS provider is not enabled");
    }
    const handler = createSmsHandler(environmentId);
    const verificationHandler = yield handler(phone);
    lastVerificationHandlerRef.current = verificationHandler;
  });
  const verifyOneTimePassword = (oneTimePassword) => __awaiter(void 0, void 0, void 0, function* () {
    if (!lastVerificationHandlerRef.current) {
      throw new Error("Verification has not started, use connectWithEmail or connectWithSms before verifying");
    }
    const { type, verify } = lastVerificationHandlerRef.current;
    const { destination, verified } = yield verify(oneTimePassword);
    if (type === "sms") {
      dynamicEvents.emit("smsVerificationResult", verified, destination);
    } else {
      dynamicEvents.emit("emailVerificationResult", verified, destination);
    }
    if (verified) {
      setCallback("authSuccess");
    } else {
      throw new Error(`${type === "sms" ? "SMS" : "Email"} verification failed`);
    }
  });
  const retryOneTimePassword = () => __awaiter(void 0, void 0, void 0, function* () {
    if (!lastVerificationHandlerRef.current) {
      throw new Error("Verification has not started, use connectWithEmail or connectWithSms before verifying");
    }
    if (!lastVerificationHandlerRef.current.retry) {
      throw new Error("Re-send is not supported");
    }
    return lastVerificationHandlerRef.current.retry();
  });
  return (0, import_jsx_runtime396.jsx)(Provider, { value: {
    connectWithEmail,
    connectWithSms,
    retryOneTimePassword,
    verifyOneTimePassword
  }, children });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundary.js
var import_jsx_runtime397 = __toESM(require_jsx_runtime(), 1);
var import_react428 = __toESM(require_react(), 1);
var ErrorBoundaryReporter = class extends ErrorBoundaryBase {
  constructor(props) {
    super(props);
    this.state = { error: null, hasError: false };
  }
  componentDidCatch(error, info) {
    var _a;
    const { onError } = this.props;
    if ((_a = this.context) === null || _a === void 0 ? void 0 : _a.isDynamicSdkError) {
      onError === null || onError === void 0 ? void 0 : onError(error, info);
      logger2.error(error, {
        error: {
          bundleStack: error.stack,
          message: error,
          stack: info.componentStack
        }
      });
    }
    throw error;
  }
  render() {
    const { children } = this.props;
    const { hasError, error } = this.state;
    if (hasError) {
      assertErrorBoundaryContext(this.context);
      this.context.error = error;
      this.context.hasError = hasError;
      return null;
    }
    return children;
  }
};
var ErrorBoundary = (_a) => {
  var { children } = _a, props = __rest(_a, ["children"]);
  return (0, import_jsx_runtime397.jsx)(ErrorBoundaryContext.Provider, { value: {
    error: null,
    hasError: false,
    isDynamicSdkError: true
  }, children: (0, import_jsx_runtime397.jsx)(ErrorBoundaryReporter, Object.assign({}, props, { children })) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryExclude.js
var ErrorBoundaryExclude = class extends ErrorBoundaryBase {
  render() {
    const { children } = this.props;
    return this.renderOrError(children, {
      isDynamicSdkError: false
    });
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/PhantomRedirectContext/PhantomRedirectContext.js
var import_jsx_runtime399 = __toESM(require_jsx_runtime(), 1);
var import_react430 = __toESM(require_react(), 1);
var import_react_dom240 = __toESM(require_react_dom(), 1);
var import_qrcode236 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/PhantomRedirectContext/useResponseHandlers.js
var import_react429 = __toESM(require_react(), 1);
var import_jsx_runtime398 = __toESM(require_jsx_runtime(), 1);
var import_react_dom239 = __toESM(require_react_dom(), 1);
var import_qrcode235 = __toESM(require_browser(), 1);
var useResponseHandlers = () => {
  const { walletConnectorOptions, consumeNonce, displaySiweStatement, environmentId, projectSettings, setIsSingleWalletAccount, connectWallet, setShowAuthFlow, setSelectedWalletConnectorKey, siweStatement, appName, user } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { setErrorMessage } = useErrorContext();
  const { getCaptchaToken } = useCaptchaContext();
  const verifyWallet2 = useVerifyWallet({
    consumeNonce,
    displaySiweStatement,
    environmentId,
    projectSettings,
    setIsSingleWalletAccount
  });
  const phantomRedirectConnector = walletConnectorOptions.map(({ walletConnector }) => walletConnector).find(isPhantomRedirectConnector);
  const handleConnectResponse = (0, import_react429.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    if (!phantomRedirectConnector) {
      return;
    }
    yield phantomRedirectConnector.getSession();
    yield connectWallet(phantomRedirectConnector);
    setShowAuthFlow(true, { ignoreIfIsEmbeddedWidget: true });
    setView("pending-signature");
    setSelectedWalletConnectorKey("phantom");
  }), [
    connectWallet,
    phantomRedirectConnector,
    setSelectedWalletConnectorKey,
    setShowAuthFlow,
    setView
  ]);
  const completeWalletTransfer = useTransferWallet();
  const handleUserResponse = (0, import_react429.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    if (!phantomRedirectConnector) {
      return;
    }
    setSelectedWalletConnectorKey("phantom");
    const [address] = yield phantomRedirectConnector.getConnectedAccounts();
    const method = phantomRedirectConnector.consumeMethod();
    switch (method) {
      case "signAndSendTransaction": {
        const { signature } = phantomRedirectConnector.extractSignature();
        phantomRedirectConnector.emit("signAndSendTransaction", {
          signature
        });
        break;
      }
      case "signAllTransactions":
        phantomRedirectConnector.emit("signAllTransactions", {
          transactions: phantomRedirectConnector.extractTransactions()
        });
        break;
      case "signTransaction":
        phantomRedirectConnector.emit("signTransaction", {
          transaction: phantomRedirectConnector.extractTransaction()
        });
        break;
      case "signMessage": {
        const { signature, message } = phantomRedirectConnector.extractSignature();
        const signatureState = StorageService.getItem(PHANTOM_SIGNATURE_STATE);
        StorageService.removeItem(PHANTOM_SIGNATURE_STATE);
        if ((signatureState === null || signatureState === void 0 ? void 0 : signatureState.verificationType) === "awaiting_transfer") {
          const siweStatementToUse = getSiweStatement({
            appName,
            siweStatement
          });
          yield completeWalletTransfer({
            messageToSignOverride: message,
            overrideSiweStatement: siweStatementToUse,
            publicWalletAddress: address,
            signedMessageOverride: signature,
            skipEmptyAccountCheck: signatureState.loseOriginalAccountOnTransfer,
            walletConnector: phantomRedirectConnector
          });
        } else if ((signatureState === null || signatureState === void 0 ? void 0 : signatureState.verificationType) === "awaiting_verification" || !user) {
          setView("wallet-redirect-view");
          yield verifyWallet2({
            captchaToken: getCaptchaToken(),
            messageToSignOverride: message,
            publicWalletAddress: address,
            signedMessageOverride: signature,
            walletConnector: phantomRedirectConnector
          });
        } else {
          phantomRedirectConnector.emit("signMessage", {
            signature
          });
        }
        break;
      }
    }
  }), [
    phantomRedirectConnector,
    setSelectedWalletConnectorKey,
    user,
    appName,
    siweStatement,
    completeWalletTransfer,
    setView,
    verifyWallet2,
    getCaptchaToken
  ]);
  const handleErrorResponse = (0, import_react429.useCallback)((params) => {
    var _a;
    if (!phantomRedirectConnector)
      return;
    const errorCode = params.get("errorCode");
    const errorMessage = (_a = params.get("errorMessage")) !== null && _a !== void 0 ? _a : void 0;
    if (!errorCode)
      return;
    setErrorMessage(errorCode);
    params.delete("errorCode");
    params.delete("errorMessage");
    history.replaceState(null, "", `${window.location.origin}${window.location.pathname}?${params.toString()}`);
    const method = phantomRedirectConnector.consumeMethod();
    switch (method) {
      case "signAndSendTransaction":
        phantomRedirectConnector.emit("signAndSendTransaction", {
          errorCode,
          errorMessage
        });
        break;
      case "signAllTransactions":
        phantomRedirectConnector.emit("signAllTransactions", {
          errorCode,
          errorMessage
        });
        break;
      case "signTransaction":
        phantomRedirectConnector.emit("signTransaction", {
          errorCode,
          errorMessage
        });
        break;
      case "signMessage":
        phantomRedirectConnector.emit("signMessage", {
          errorCode,
          errorMessage
        });
        break;
    }
  }, [phantomRedirectConnector, setErrorMessage]);
  return {
    handleConnectResponse,
    handleErrorResponse,
    handleUserResponse,
    phantomRedirectConnector
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/PhantomRedirectContext/PhantomRedirectContext.js
var PhantomRedirectContext = (0, import_react430.createContext)(void 0);
var PhantomRedirectContextProvider = ({ children }) => {
  const { sdkHasLoaded } = useInternalDynamicContext();
  const { phantomRedirectConnector, handleConnectResponse, handleUserResponse, handleErrorResponse } = useResponseHandlers();
  (0, import_react430.useEffect)(() => {
    if (!phantomRedirectConnector || !isMobile() || !sdkHasLoaded) {
      return;
    }
    const params = new URLSearchParams(window.location.search);
    if (params.has("errorCode")) {
      handleErrorResponse(params);
      return;
    }
    if (params.has("phantom_encryption_public_key")) {
      handleConnectResponse();
      return;
    }
    if (params.has("data")) {
      handleUserResponse();
      return;
    }
  }, [
    handleConnectResponse,
    handleUserResponse,
    handleErrorResponse,
    phantomRedirectConnector,
    sdkHasLoaded
  ]);
  return (0, import_jsx_runtime399.jsx)(PhantomRedirectContext.Provider, { value: {
    phantomRedirectConnector
  }, children });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConnectedWalletsNetworkValidation/useConnectedWalletsNetworkValidation.js
var import_react431 = __toESM(require_react(), 1);
var import_jsx_runtime400 = __toESM(require_jsx_runtime(), 1);
var import_react_dom241 = __toESM(require_react_dom(), 1);
var import_qrcode237 = __toESM(require_browser(), 1);
var useConnectedWalletsNetworkValidation = () => {
  const { connectedWallets, selectedWalletConnector, setSelectedWalletConnectorKey, setShowAuthFlow, bridgeChainsToConnect, sdkHasLoaded } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const isLoggedIn = useIsLoggedIn();
  const getConnectedWalletsWithInvalidNetwork = (0, import_react431.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    const connectedWalletsWithInvalidNetwork = [];
    for (const connectedWallet of connectedWallets) {
      const isChainInWalletsToConnect = bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.some((walletToConnectByChain) => walletToConnectByChain.chain === connectedWallet.chain);
      const network = yield connectedWallet.connector.getNetwork();
      const isSupported = isSupportedNetwork({
        network,
        walletConnector: connectedWallet.connector
      });
      if (!isChainInWalletsToConnect && !isSupported) {
        connectedWalletsWithInvalidNetwork.push(connectedWallet);
      }
    }
    return connectedWalletsWithInvalidNetwork;
  }), [bridgeChainsToConnect, connectedWallets]);
  const validateNetwork = (0, import_react431.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    const connectedWalletsWithInvalidNetwork = yield getConnectedWalletsWithInvalidNetwork();
    if (!connectedWalletsWithInvalidNetwork.length) {
      return;
    }
    const [connectedWalletWithInvalidNetwork] = connectedWalletsWithInvalidNetwork;
    if (connectedWalletWithInvalidNetwork.connector.key !== (selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.key)) {
      setSelectedWalletConnectorKey(connectedWalletWithInvalidNetwork.connector.key);
    }
    const networkNotSupportedView = isProgrammableNetworkSwitchSupported(connectedWalletWithInvalidNetwork.connector) ? "network-not-supported" : "network-not-supported-manual";
    setShowAuthFlow(true);
    setView(networkNotSupportedView);
  }), [
    getConnectedWalletsWithInvalidNetwork,
    selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.key,
    setSelectedWalletConnectorKey,
    setShowAuthFlow,
    setView
  ]);
  (0, import_react431.useEffect)(() => {
    if (!sdkHasLoaded || !isLoggedIn) {
      return;
    }
    validateNetwork();
  }, [sdkHasLoaded, isLoggedIn, validateNetwork]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/UseNetworkValidation/UseNetworkValidation.js
var UseNetworkValidation = () => {
  useConnectedWalletsNetworkValidation();
  return null;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/store/state/networkConfigurations/networkConfigurations.js
var import_react432 = __toESM(require_react(), 1);
var import_jsx_runtime401 = __toESM(require_jsx_runtime(), 1);
var import_react_dom242 = __toESM(require_react_dom(), 1);
var import_qrcode238 = __toESM(require_browser(), 1);
var { getNetworkConfigurations, setNetworkConfigurations, useNetworkConfigurations, resetNetworkConfigurations } = createStoreState("networkConfigurations");
var createNetwork = (network, parser = (input) => input) => ({
  blockExplorerUrls: network.blockExplorerUrls,
  chainId: parser(network.chainId),
  iconUrls: network.iconUrls,
  lcdUrl: network.lcdUrl,
  name: network.name,
  nativeCurrency: network.nativeCurrency,
  networkId: parser(network.networkId),
  privateCustomerRpcUrls: network.privateCustomerRpcUrls,
  rpcUrls: network.rpcUrls,
  vanityName: network.vanityName
});
var overrideNetworks = (networkOverrides, networks) => {
  if (!networkOverrides) {
    return networks;
  }
  if (Array.isArray(networkOverrides)) {
    return networkOverrides;
  } else {
    return networkOverrides(networks !== null && networks !== void 0 ? networks : []);
  }
};
var useFetchNetworkConfigurations = ({ environmentId, projectSettings, evmNetworksOverrides, cosmosNetworkOverrides }) => {
  const { retrigger } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    if (!(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.networks))
      return Promise.resolve({});
    const { networks } = projectSettings;
    const evm = networks.find((configurations) => configurations.chainName === "evm");
    const solana = networks.find((configurations) => configurations.chainName === "solana");
    const cosmos = networks.find((configurations) => configurations.chainName === "cosmos");
    const starknet = networks.find((configurations) => configurations.chainName === "starknet");
    let cosmosNetworks = (_a = cosmos === null || cosmos === void 0 ? void 0 : cosmos.networks) === null || _a === void 0 ? void 0 : _a.map((net) => createNetwork(net, parseInt));
    cosmosNetworks = overrideNetworks(cosmosNetworkOverrides, cosmosNetworks);
    let evmNetworks = (_b = evm === null || evm === void 0 ? void 0 : evm.networks) === null || _b === void 0 ? void 0 : _b.map((net) => createNetwork(net, parseInt));
    evmNetworks = overrideNetworks(evmNetworksOverrides, evmNetworks);
    const starknetNetworks = (_c = starknet === null || starknet === void 0 ? void 0 : starknet.networks) === null || _c === void 0 ? void 0 : _c.map((net) => createNetwork(net));
    const solanaNetworks = (_d = solana === null || solana === void 0 ? void 0 : solana.networks) === null || _d === void 0 ? void 0 : _d.map((net) => createNetwork(net));
    if (evmNetworksOverrides) {
      if (Array.isArray(evmNetworksOverrides)) {
        evmNetworks = evmNetworksOverrides;
      } else {
        evmNetworks = evmNetworksOverrides(evmNetworks !== null && evmNetworks !== void 0 ? evmNetworks : []);
      }
    }
    return Promise.resolve({
      cosmos: cosmosNetworks,
      evm: evmNetworks,
      solana: solanaNetworks,
      starknet: starknetNetworks
    });
  }), {
    deps: [environmentId, projectSettings, evmNetworksOverrides],
    enabled: Boolean(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.networks),
    initialData: void 0,
    onResolve: (networkConfigurations) => {
      const expiry = (/* @__PURE__ */ new Date()).getTime() + 6e4 * 5;
      setNetworkConfigurations({
        expiresAt: expiry,
        networkConfigurations
      });
    }
  });
  useDynamicEvents("logout", retrigger);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useDisplayOrderState/useDisplayOrderState.js
var import_react433 = __toESM(require_react(), 1);
var import_jsx_runtime402 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/isDisplayOrderPriorityForWeb3/isDisplayOrderPriorityForWeb3.js
var isDisplayOrderPriorityForWeb3 = (displayOrder) => {
  if (displayOrder.length !== 2)
    return false;
  const [firstPriority, secondPriority] = displayOrder;
  return firstPriority === "wallet" && secondPriority === "email";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useDisplayOrderState/useDisplayOrderState.js
var useDisplayOrderState = (projectSettings) => {
  const [selectedDisplayOrder, setSelectedDisplayOrder] = (0, import_react433.useState)(null);
  const defaultDisplayOrder = (0, import_react433.useMemo)(() => {
    var _a;
    const displayOrderFromApi = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design.modal) === null || _a === void 0 ? void 0 : _a.displayOrder;
    if (!displayOrderFromApi)
      return "web3";
    return isDisplayOrderPriorityForWeb3(displayOrderFromApi) ? "web3" : "web2";
  }, [projectSettings]);
  return [selectedDisplayOrder || defaultDisplayOrder, setSelectedDisplayOrder];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useEmailLoginState/useEmailLoginState.js
var import_react434 = __toESM(require_react(), 1);
var import_jsx_runtime403 = __toESM(require_jsx_runtime(), 1);
var useEmailLoginState = (providers, user) => {
  const [loginWithEmail, _setLoginWithEmail] = (0, import_react434.useState)(null);
  const reset = () => {
    _setLoginWithEmail(null);
  };
  const setLoginWithEmail = (value) => {
    _setLoginWithEmail(value);
  };
  const defaultLoginWithEmail = (0, import_react434.useMemo)(() => user ? false : isEmailProviderEnabled(providers), [providers, user]);
  return [loginWithEmail !== null && loginWithEmail !== void 0 ? loginWithEmail : defaultLoginWithEmail, setLoginWithEmail, reset];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useHandleLogout/useHandleLogout.js
var import_react435 = __toESM(require_react(), 1);
var import_jsx_runtime404 = __toESM(require_jsx_runtime(), 1);
var useHandleLogout = (params) => {
  const paramsRef = (0, import_react435.useRef)(params);
  paramsRef.current = params;
  const logout = (0, import_react435.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    const p = paramsRef.current;
    p.setSelectedWalletConnectorKey(null);
    p.clearAllWalletConnectSessions();
    p.setShowDynamicUserProfile(false);
    p.setShowBridgeWidget(false);
    p.resetLoginWithEmail();
    if (p.user) {
      document.cookie = `${DYNAMIC_AUTH_COOKIE_NAME}=; Max-Age=-99999999; path=/; SameSite=Lax`;
      revokeSession({
        environmentId: p.environmentId,
        sessionId: p.user.sessionId
      });
    }
    p.setLegacyIsVerifying(false);
    StorageService.removeItem(AUTH_TOKEN, {
      priority: ["secureStorage", "localStorage"]
    });
    StorageService.removeItem(AUTH_MIN_TOKEN, {
      priority: ["secureStorage", "localStorage"]
    });
    StorageService.removeItem(WALLET_PICKER_SEARCH_KEY);
    StorageService.removeItem(PHANTOM_SIGNATURE_STATE);
    StorageService.removeItem(AUTH_EXPIRES_AT);
    p.setAuthMode(p.initialAuthenticationMode);
    p.setShowAuthFlow(false, {
      emitCancelAuth: false,
      ignoreIfIsEmbeddedWidget: false,
      initializeWalletConnect: false,
      performMultiWalletChecks: false
    });
    p.setMultiWalletWidgetState("idle");
    p.removeConnectedWalletsInfo();
    p.removeBridgeOnboardingCompleted();
    p.clearPrimaryWalletId();
    p.removeConnectedNameService();
    p.removeSessionStorageSessionKeys();
    dynamicEvents.removeListener("embeddedWalletCreatePasswordCompleted");
    dynamicEvents.removeListener("embeddedWalletCreatePasswordFailed");
    dynamicEvents.removeListener("embeddedWalletUpdatePasswordCompleted");
    dynamicEvents.removeListener("embeddedWalletUpdatePasswordFailed");
    dynamicEvents.emit("logout");
    setUser(void 0);
    yield Promise.all(p.walletConnectors.map((connector) => connector.endSession()));
    yield Promise.all(p.connectedWallets.map((connectedWallet) => connectedWallet.connector.endSession()));
  }), []);
  (0, import_react435.useEffect)(() => {
    StorageService.events.on("parseFailure", logout);
    return () => {
      StorageService.events.off("parseFailure", logout);
    };
  }, [logout]);
  return logout;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useNameService/useNameService.js
var import_react436 = __toESM(require_react(), 1);
var import_jsx_runtime405 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getWalletVerifiedCredential/getWalletVerifiedCredential.js
var getWalletVerifiedCredential = (walletAddress, verifiedCredentials, walletChain) => verifiedCredentials === null || verifiedCredentials === void 0 ? void 0 : verifiedCredentials.find(({ address }) => isSameAddress(address || "", walletAddress || "", walletChain));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useNameService/useNameService.js
var useNameService = ({ currentWallet, user }) => {
  const [connectedNameService, setConnectedNameService, removeConnectedNameService] = useLocalStorage(CONNECTED_WALLET_NAME_SERVICE, null);
  const lastFetchedNameServiceAddress = (0, import_react436.useRef)();
  const lastFetchedNameServiceNetwork = (0, import_react436.useRef)();
  const fetchNameServiceFromBlockchain = (0, import_react436.useCallback)((wallet) => __awaiter(void 0, void 0, void 0, function* () {
    const { address, connector } = wallet;
    const network = yield connector.getNetwork();
    if (address === lastFetchedNameServiceAddress.current && network === lastFetchedNameServiceNetwork.current) {
      return;
    }
    setConnectedNameService(null);
    lastFetchedNameServiceAddress.current = address;
    lastFetchedNameServiceNetwork.current = network;
    let ns;
    try {
      ns = yield wallet.getNameService();
    } catch (e2) {
    }
    if (lastFetchedNameServiceAddress.current === address && lastFetchedNameServiceNetwork.current === network) {
      setConnectedNameService({
        address,
        avatar: ns === null || ns === void 0 ? void 0 : ns.avatar,
        name: ns === null || ns === void 0 ? void 0 : ns.name,
        network
      });
      return ns;
    }
    return void 0;
  }), [setConnectedNameService]);
  const getNameService = (address) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!currentWallet) {
      return;
    }
    const network = yield currentWallet.connector.getNetwork();
    const verifiedCredentials = user === null || user === void 0 ? void 0 : user.verifiedCredentials;
    if (verifiedCredentials) {
      const verifiedCredential = getWalletVerifiedCredential(currentWallet === null || currentWallet === void 0 ? void 0 : currentWallet.address, verifiedCredentials, currentWallet.chain);
      if (verifiedCredential && ((_a = verifiedCredential.nameService) === null || _a === void 0 ? void 0 : _a.name)) {
        return verifiedCredential.nameService;
      }
    }
    if (address && (currentWallet === null || currentWallet === void 0 ? void 0 : currentWallet.address) !== address) {
      return;
    }
    if (connectedNameService && connectedNameService.address === (currentWallet === null || currentWallet === void 0 ? void 0 : currentWallet.address) && connectedNameService.network === network) {
      return {
        avatar: connectedNameService.avatar,
        name: connectedNameService.name
      };
    }
    return fetchNameServiceFromBlockchain(currentWallet);
  });
  return { getNameService, removeConnectedNameService };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useSelectedWalletConnector/useSelectedWalletConnector.js
var import_react437 = __toESM(require_react(), 1);
var useSelectedWalletConnector = ({ walletConnectorOptions }) => {
  const [selectedWalletConnectorKey, setSelectedWalletConnectorKey] = (0, import_react437.useState)(null);
  const selectedWalletConnector = (0, import_react437.useMemo)(() => {
    var _a, _b;
    if (!selectedWalletConnectorKey)
      return null;
    return (_b = (_a = walletConnectorOptions.find(({ walletConnector }) => walletConnector.key === selectedWalletConnectorKey)) === null || _a === void 0 ? void 0 : _a.walletConnector) !== null && _b !== void 0 ? _b : null;
  }, [selectedWalletConnectorKey, walletConnectorOptions]);
  return { selectedWalletConnector, setSelectedWalletConnectorKey };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useShowAuthFlow/useShowAuthFlow.js
var import_react438 = __toESM(require_react(), 1);
var import_jsx_runtime406 = __toESM(require_jsx_runtime(), 1);
var useShowAuthFlow = ({ isAuthenticated, isRenderingEmbeddedAuthFlow, isMultiWalletEnabled, walletConnectorOptions, setShowDynamicUserProfile }) => {
  const [showAuthFlow, _setShowAuthFlow] = (0, import_react438.useState)(false);
  const { setError } = useErrorContext();
  const setShowAuthFlow = (0, import_react438.useCallback)((value, options2 = {}) => {
    var _a;
    const { emitCancelAuth, ignoreIfIsEmbeddedWidget, initializeWalletConnect, performMultiWalletChecks, clearErrors } = Object.assign({ clearErrors: true, emitCancelAuth: false, ignoreIfIsEmbeddedWidget: true, initializeWalletConnect: true, performMultiWalletChecks: false }, options2);
    logger2.logVerboseTroubleshootingMessage("setShowAuthFlow", {
      clearErrors,
      emitCancelAuth,
      ignoreIfIsEmbeddedWidget,
      initializeWalletConnect,
      performMultiWalletChecks
    });
    if (!showAuthFlow && value) {
      dynamicEvents.emit("authFlowOpen");
    } else if (showAuthFlow && !value) {
      dynamicEvents.emit("authFlowClose");
    }
    if (value) {
      if (ignoreIfIsEmbeddedWidget && isRenderingEmbeddedAuthFlow.current)
        return;
      if (performMultiWalletChecks && isAuthenticated) {
        if (!isMultiWalletEnabled) {
          return setShowDynamicUserProfile(true);
        }
        logger2.warn("Use setShowLinkNewWalletModal to render the wallet list instead. For more information, see: https://docs.dynamic.xyz/react-sdk/hooks/usedynamiccontext");
        return;
      }
      if (initializeWalletConnect) {
        (_a = walletConnectorOptions.find((wallet) => wallet.walletConnector.key === "walletconnect")) === null || _a === void 0 ? void 0 : _a.walletConnector.init();
      }
    } else if (emitCancelAuth && showAuthFlow)
      dynamicEvents.emit("authFlowCancelled");
    if (clearErrors)
      setError(void 0);
    _setShowAuthFlow(value);
  }, [
    isAuthenticated,
    isMultiWalletEnabled,
    isRenderingEmbeddedAuthFlow,
    setError,
    setShowDynamicUserProfile,
    showAuthFlow,
    walletConnectorOptions
  ]);
  return [showAuthFlow, setShowAuthFlow];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/usePasskeySuccessPopup/usePasskeySuccessPopup.js
var import_react439 = __toESM(require_react(), 1);
var usePasskeySuccessPopup = () => {
  const [passkeySuccessPopup, _setPasskeySuccessPopup] = (0, import_react439.useState)(void 0);
  const setPasskeySuccessPopup = (key) => {
    _setPasskeySuccessPopup(key);
    setTimeout(() => {
      _setPasskeySuccessPopup(void 0);
    }, 2e3);
  };
  return {
    passkeySuccessPopup,
    setPasskeySuccessPopup
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useTieCallbacksToEvents/useTieCallbacksToEvents.js
var import_jsx_runtime407 = __toESM(require_jsx_runtime(), 1);
var import_react440 = __toESM(require_react(), 1);
var import_react_dom243 = __toESM(require_react_dom(), 1);
var import_qrcode239 = __toESM(require_browser(), 1);
var useTieCallbacksToEvents = ({ clientCallbacks, user }) => {
  useInternalDynamicEvents("emailVerificationResult", (result, email) => {
    var _a;
    return (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onOtpVerificationResult) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, result, {
      type: "email",
      value: email
    });
  });
  useInternalDynamicEvents("smsVerificationResult", (result, phoneData) => {
    var _a;
    return (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onOtpVerificationResult) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, result, {
      type: "sms",
      value: phoneData
    });
  });
  useInternalDynamicEvents("authFlowCancelled", () => {
    var _a;
    return (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onAuthFlowCancel) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks);
  });
  useInternalDynamicEvents("authFlowOpen", () => {
    var _a;
    (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onAuthFlowOpen) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks);
  });
  useInternalDynamicEvents("authFlowClose", () => {
    var _a;
    (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onAuthFlowClose) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks);
  });
  useInternalDynamicEvents("walletAdded", (wallet, userWallets) => {
    var _a;
    dynamicEvents.emit("triggerSessionValidation");
    logger2.debug("[walletAdded]", { userWallets, wallet });
    (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onWalletAdded) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, { userWallets, wallet });
  });
  useInternalDynamicEvents("walletRemoved", (wallet, userWallets) => {
    var _a;
    logger2.debug("[walletRemoved]", { userWallets, wallet });
    (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onWalletRemoved) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, { userWallets, wallet });
  });
  useInternalDynamicEvents("embeddedWalletCreated", (_wallet, jwtVerifiedCredential, user2) => {
    var _a;
    logger2.debug("[embeddedWalletCreated]", {
      _wallet,
      jwtVerifiedCredential,
      user: user2
    });
    (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onEmbeddedWalletCreated) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, jwtVerifiedCredential, user2);
  });
  useInternalDynamicEvents("logout", () => {
    var _a;
    (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onLogout) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, user);
  });
  useInternalDynamicEvents("authFailure", (data, reason) => {
    var _a;
    logger2.debug("[authFailure]", { data, reason });
    (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onAuthFailure) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, data, reason);
  });
  useInternalDynamicEvents("authInit", (data) => {
    var _a;
    logger2.debug("[authInit]", { data });
    (_a = clientCallbacks === null || clientCallbacks === void 0 ? void 0 : clientCallbacks.onAuthInit) === null || _a === void 0 ? void 0 : _a.call(clientCallbacks, data);
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useMultiWallet/useMultiWallet.js
var useMultiWallet = ({ isBridgeFlow, multiWalletOverride, multiWalletSettings }) => {
  var _a;
  if (multiWalletOverride !== void 0) {
    return multiWalletOverride;
  }
  return (_a = multiWalletSettings || isBridgeFlow) !== null && _a !== void 0 ? _a : false;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useMultiAsset/useMultiAsset.js
var useMultiAsset = ({ multiAssetOverride, multiAssetSettings }) => {
  if (multiAssetOverride !== void 0) {
    return multiAssetOverride;
  }
  return multiAssetSettings !== null && multiAssetSettings !== void 0 ? multiAssetSettings : true;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useParentDynamicContextGuard/useParentDynamicContextGuard.js
var import_react441 = __toESM(require_react(), 1);
var useParentDynamicContextGuard = () => {
  const context = (0, import_react441.useContext)(DynamicContext);
  if (context) {
    throw new Error("DynamicContextProvider should not be nested. Please wrap your application in a single DynamicContextProvider.");
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useShowFiat/useShowFiat.js
var useShowFiat = ({ showFiatOverride, showFiatSettings }) => {
  if (showFiatOverride !== void 0) {
    return showFiatOverride;
  }
  return showFiatSettings !== null && showFiatSettings !== void 0 ? showFiatSettings : true;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useCustomerCallbacks/useCustomerCallbacks.js
var import_react442 = __toESM(require_react(), 1);
var import_jsx_runtime408 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isAuthenticatedWithAWallet/isAuthenticatedWithAWallet.js
var isAuthenticatedWithAWallet = (user) => {
  const lastVerifiedCredential = user.verifiedCredentials.find((vc) => vc.id === user.lastVerifiedCredentialId);
  return (lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.format) === JwtVerifiedCredentialFormatEnum.Blockchain;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/useCustomerCallbacks/useCustomerCallbacks.js
var useCustomerCallbacks = ({ callbacks: { onAuthSuccess, onUserProfileUpdate }, handleLogOut, primaryWallet, user, isAuthenticated }) => {
  const [callbackQueue, setCallbackQueue] = (0, import_react442.useState)([]);
  const handleNextCallback = (0, import_react442.useCallback)((next, user2) => {
    switch (next === null || next === void 0 ? void 0 : next.callback) {
      case "authSuccess": {
        try {
          onAuthSuccess === null || onAuthSuccess === void 0 ? void 0 : onAuthSuccess({
            handleLogOut,
            isAuthenticated,
            primaryWallet,
            user: user2
          });
          dynamicEvents.emit("triggerSessionValidation");
        } catch (e2) {
          logger2.error("Error calling onAuthSuccess: ", e2);
        }
        break;
      }
      case "userProfileUpdate": {
        try {
          onUserProfileUpdate === null || onUserProfileUpdate === void 0 ? void 0 : onUserProfileUpdate(user2);
        } catch (e2) {
          logger2.error("Error calling userProfileUpdate: ", e2);
        }
        break;
      }
    }
  }, [
    handleLogOut,
    isAuthenticated,
    onAuthSuccess,
    onUserProfileUpdate,
    primaryWallet
  ]);
  (0, import_react442.useEffect)(() => {
    if (!callbackQueue.length || !user)
      return;
    if (isAuthenticatedWithAWallet(user) && !primaryWallet) {
      return;
    }
    handleNextCallback(callbackQueue[0], user);
    setCallbackQueue((prev) => {
      const [resolvedCallback, ...updatedQueue] = prev;
      if (resolvedCallback) {
        logger2.debug("Resolved callback: ", resolvedCallback.callback);
        logger2.debug("Callbacks in queue: ", updatedQueue.map((c) => c.callback));
      }
      return updatedQueue;
    });
  }, [callbackQueue, handleNextCallback, primaryWallet, user]);
  const setCallback = (0, import_react442.useCallback)((callback, params) => {
    setCallbackQueue((prev) => [...prev, { callback, params }]);
  }, []);
  return { setCallback };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/hooks/useRegisterStorageService/useRegisterStorageService.js
var useRegisterStorageService = ({ storagePostfix }) => {
  const storageForSSR = {
    clear: () => void 0,
    getItem: () => null,
    key: () => null,
    length: 0,
    removeItem: () => void 0,
    setItem: () => null
  };
  const localStorage2 = isSSR() ? storageForSSR : window.localStorage;
  const sessionStorage = isSSR() ? storageForSSR : window.sessionStorage;
  if (!StorageService.getSourceStorage("localStorage")) {
    StorageService.registerSourceStorage("localStorage", createStorageService({
      postfix: storagePostfix,
      storage: localStorage2
    }));
  }
  if (!StorageService.getSourceStorage("sessionStorage")) {
    StorageService.registerSourceStorage("sessionStorage", createStorageService({
      postfix: storagePostfix,
      storage: sessionStorage
    }));
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/DynamicContext/DynamicContext.js
var PUBLIC_PROJECT_LIVE_ENVIRONMENT_ID = "2762a57b-faa4-41ce-9f16-abff9300e2c9";
var DynamicContext = (0, import_react443.createContext)(void 0);
var InnerDynamicContextProvider = ({ children, theme, settings, locale, enableInstrumentation = false }) => {
  var _a, _b, _c, _d, _e2, _f, _g16, _h, _j, _k, _l, _m, _o, _p;
  const { accessDeniedMessagePrimary, accessDeniedMessageSecondary, accessDeniedButton, defaultPhoneInputIso2, apiBaseUrl, coinbaseWalletPreference, detectNewWalletsForLinking = false, enableConnectOnlyFallback = false, deepLinkPreference: deepLinkPreferenceProp = "native", bridgeChains, cssOverrides, defaultNumberOfWalletsToShow = DEFAULT_NUMBER_OF_WALLETS_TO_SHOW, flowNetwork, initialAuthenticationMode = "connect-and-sign", debugError = false, displaySiweStatement = true, newToWeb3WalletChainMap, enableVisitTrackingOnConnectOnly = true, environmentId, walletsFilter, logLevel = "WARN", mobileExperience, notInTheListImageUrl, onboardingImageUrl, policiesConsentInnerComponent, customPrivacyPolicy, privacyPolicyUrl, socialMediaLinkText, socialMediaIconUrl, socialMediaUrl, customTermsOfServices, termsOfServiceUrl, toolkitEnabled, siweStatement, shadowDOMEnabled = true, walletConnectors: walletConnectorsProp, socialProvidersFilter, showLockedWalletView = false, walletConnectPreferredChains, walletConnectorExtensions, recommendedWallets, handlers } = settings;
  useRegisterStorageService({
    storagePostfix: settings.localStorageSuffix
  });
  initializeStore({
    environmentId,
    storageSuffix: settings.localStorageSuffix
  });
  setChainInfoOverrides((_a = settings.overrides) === null || _a === void 0 ? void 0 : _a.chainDisplayValues);
  const events = (_b = settings.events) !== null && _b !== void 0 ? _b : settings.eventsCallbacks;
  const networkValidationMode = resolveNetworkValidationMode({
    bridgeChains: settings.bridgeChains,
    networkValidationMode: settings.networkValidationMode
  });
  let { appLogoUrl = "https://demo.dynamic.xyz/assets/dynamic-logo.svg", appName = "Dynamic Example" } = settings;
  if (!environmentId) {
    throw new MissingEnvironmentIdError();
  }
  logger2.setLogLevel(logLevel);
  logger.setLogLevel(logLevel);
  if (environmentId === PUBLIC_PROJECT_LIVE_ENVIRONMENT_ID) {
    logger2.warn(`WARNING: DYNAMIC is using a test environment ID ${environmentId}. Please sign up on https://app.dynamic.xyz/ to get your production environment ID.`);
  }
  ApiEndpoint.setBaseUrl((_c = process.env.DYNAMIC_API_BASE_URL) !== null && _c !== void 0 ? _c : apiBaseUrl);
  const i18nSDKInstance = Locale.setup(locale);
  const isBridgeFlow = Boolean(bridgeChains);
  const deepLinkPreference = getDeepLinkPreference(deepLinkPreferenceProp, isBridgeFlow);
  const { selectedTabIndex, setSelectedTabIndex, selectedTabSettings, tabsItems } = useTabState({ settingsOverrides: settings.overrides });
  const [bridgeOnboardingCompleted, setBridgeOnboardingCompleted, removeBridgeOnboardingCompleted] = useLocalStorage(BRIDGE_ONBOARDING_COMPLETED, false);
  const [showDynamicUserProfile, setShowDynamicUserProfile] = (0, import_react443.useState)(false);
  const [showBridgeWidget, setShowBridgeWidget] = (0, import_react443.useState)(false);
  const [isSingleWalletAccount, setIsSingleWalletAccount] = (0, import_react443.useState)(false);
  const { user, userWithMissingInfo } = useUser();
  const isAuthenticated = Boolean(user);
  if (user) {
    logger2.setMetaData("user", user);
  } else {
    logger2.setMetaData("user", void 0);
  }
  const { consumeNonce } = useFetchNonce(environmentId);
  const [qrcodeUri, setQrcodeUri] = (0, import_react443.useState)("");
  const [desktopUri, setDesktopUri] = (0, import_react443.useState)("");
  const [multiWalletWidgetState, setMultiWalletWidgetState, { awaiting_account_switch: [accountSwitchState], awaiting_signature: [awaitingSignatureState] }] = useMultiWalletWidgetState();
  const { settings: projectSettings } = useProjectSettings();
  useSendDynamicProps({ environmentId, settings });
  const multiWallet = useMultiWallet({
    isBridgeFlow,
    multiWalletOverride: (_d = settings.overrides) === null || _d === void 0 ? void 0 : _d.multiWallet,
    multiWalletSettings: (_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _e2 === void 0 ? void 0 : _e2.multiWallet
  });
  const multiAsset = useMultiAsset({
    multiAssetOverride: (_f = settings.overrides) === null || _f === void 0 ? void 0 : _f.multiAsset,
    multiAssetSettings: (_g16 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _g16 === void 0 ? void 0 : _g16.enableMultiAsset
  });
  const showFiat = useShowFiat({
    showFiatOverride: (_h = settings.overrides) === null || _h === void 0 ? void 0 : _h.showFiat,
    showFiatSettings: (_j = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _j === void 0 ? void 0 : _j.showFiat
  });
  const [legacyIsVerifying, setLegacyIsVerifying] = (0, import_react443.useState)(false);
  const walletBook = useWalletBookCdn();
  useFetchNetworkConfigurations({
    cosmosNetworkOverrides: (_k = settings.overrides) === null || _k === void 0 ? void 0 : _k.cosmosNetworks,
    environmentId,
    evmNetworksOverrides: (_l = settings.overrides) === null || _l === void 0 ? void 0 : _l.evmNetworks,
    projectSettings
  });
  const { networkConfigurations: serverNetworkConfigurations } = useNetworkConfigurations();
  const { imageUserInAccessList, imageUserNotInAccessList, displayName, appLogo } = (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general) || {};
  appLogoUrl = appLogo || appLogoUrl;
  appName = displayName || appName;
  const [loginWithEmail, setLogInWithEmail, resetLoginWithEmail] = useEmailLoginState((projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) || [], user);
  const [authorizationViewDisplayOrder, setAuthorizationViewDisplayOrder] = useDisplayOrderState(projectSettings);
  const [confirmationModal, walletUiUtils] = useWalletUiUtils({
    appLogoUrl,
    appName,
    hideEmbeddedWalletTransactionUIs: !((_o = (_m = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _m === void 0 ? void 0 : _m.embeddedWallets) === null || _o === void 0 ? void 0 : _o.showEmbeddedWalletActionsUI)
  });
  const { walletConnectorOptions } = useWalletConnectorOptions2({
    appLogoUrl,
    appName,
    coinbaseWalletPreference,
    deepLinkPreference,
    flowNetwork,
    mobileExperience,
    networkConfigurations: serverNetworkConfigurations,
    projectSettings,
    walletBook,
    walletConnectPreferredChains,
    walletConnectorExtensions,
    walletConnectorsProp,
    walletUiUtils
  });
  const [authMode, setAuthMode] = useLocalStorage(AUTH_MODE, initialAuthenticationMode);
  const { clearPrimaryWalletId, primaryWalletId, setPrimaryWalletId } = usePrimaryWalletId({
    environmentId,
    user
  });
  const [requiredWalletsConnected, setRequiredWalletsConnected] = (0, import_react443.useState)(false);
  const isUserAuthenticated = Boolean(authMode === "connect-and-sign" ? user : requiredWalletsConnected);
  const isRenderingEmbeddedAuthFlow = (0, import_react443.useRef)(false);
  const [showAuthFlow, setShowAuthFlow] = useShowAuthFlow({
    isAuthenticated: isUserAuthenticated,
    isMultiWalletEnabled: multiWallet,
    isRenderingEmbeddedAuthFlow,
    setShowDynamicUserProfile,
    walletConnectorOptions
  });
  const { connectWallet, removeConnectedWalletsInfo, connectedWalletsInfo, getConnectedWalletById, connectedWallets, disconnectWallet, refreshConnectedWallet } = useConnectWallet({
    authMode,
    clearPrimaryWalletId,
    enableVisitTrackingOnConnectOnly,
    environmentId,
    handleConnectedWallet: handlers === null || handlers === void 0 ? void 0 : handlers.handleConnectedWallet,
    isBridgeFlow,
    primaryWalletId,
    setPrimaryWalletId,
    setShowAuthFlow,
    user,
    walletConnectorOptions
  });
  const bridgeChainsToConnect = (0, import_react443.useMemo)(() => getMissingChains(bridgeChains, connectedWalletsInfo), [bridgeChains, connectedWalletsInfo]);
  const { selectedWalletConnector, setSelectedWalletConnectorKey } = useSelectedWalletConnector({ walletConnectorOptions });
  const [selectedWalletWithAction, setSelectedWalletWithAction] = (0, import_react443.useState)(null);
  useSetWalletConnectorVerifiedCredentials(user !== null && user !== void 0 ? user : userWithMissingInfo, walletConnectorOptions);
  useSetWalletConnectorFetchers(walletConnectorOptions, environmentId);
  const { primaryWallet, showQrcodeModal, secondaryWallets, setPrimaryWallet, setShowQrcodeModal, wallets: linkedOrConnectedWallets } = useWalletConnectors({
    authMode,
    canHaveMultipleWalletsConnected: multiWallet,
    connectedWallets,
    primaryWalletId,
    setMultiWalletWidgetState,
    setPrimaryWalletId,
    user: user || userWithMissingInfo,
    walletConnectorOptions
  });
  (0, import_react443.useEffect)(() => {
    setRequiredWalletsConnected(!(bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length) && Boolean(primaryWallet));
  }, [bridgeChainsToConnect, primaryWallet]);
  const walletConnectors = linkedOrConnectedWallets.map((wallet) => wallet.connector);
  const sdkHasLoaded = useGlobalLoading({
    appName,
    authMode,
    connectedInfo: connectedWalletsInfo[0],
    connectedWallets,
    enableInstrumentation,
    environmentId,
    primaryWallet,
    projectSettings,
    user: user !== null && user !== void 0 ? user : userWithMissingInfo,
    walletBook
  });
  useFetchProjectSettings({ environmentId });
  const { getNameService, removeConnectedNameService } = useNameService({
    currentWallet: primaryWallet !== null && primaryWallet !== void 0 ? primaryWallet : connectedWallets[0],
    user
  });
  const { clearAllWalletConnectSessions } = useClearWalletConnectSessions({
    connectors: walletConnectors
  });
  const removeSessionStorageSessionKeys = () => {
    StorageService.removeItem(SECURE_ENCLAVE_WALLET_SESSION_KEYS, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS);
    walletConnectors.forEach((connector) => {
      if (isSessionKeyCompatibleWalletConnector(connector) && typeof (connector === null || connector === void 0 ? void 0 : connector.removeSessionKeys) === "function") {
        connector === null || connector === void 0 ? void 0 : connector.removeSessionKeys();
      }
    });
  };
  const handleLogOut = useHandleLogout({
    bridgeChains,
    clearAllWalletConnectSessions,
    clearPrimaryWalletId,
    connectedWallets,
    environmentId,
    events,
    initialAuthenticationMode,
    removeBridgeOnboardingCompleted,
    removeConnectedNameService,
    removeConnectedWalletsInfo,
    removeSessionStorageSessionKeys,
    resetLoginWithEmail,
    setAuthMode,
    setLegacyIsVerifying,
    setMultiWalletWidgetState,
    setSelectedWalletConnectorKey,
    setShowAuthFlow,
    setShowBridgeWidget,
    setShowDynamicUserProfile,
    user,
    walletConnectors
  });
  useValidateSession({
    environmentId,
    handleLogOut
  });
  useResetCookieLocalStorage({
    environmentId,
    projectSettings,
    setPrimaryWalletId
  });
  useTieCallbacksToEvents({
    clientCallbacks: events,
    user
  });
  const handleUnlinkWallet = useHandleUnlinkWallet({
    environmentId,
    primaryWalletId,
    secondaryWallets,
    verifiedCredentials: (user === null || user === void 0 ? void 0 : user.verifiedCredentials) || []
  });
  const { isLoading: loadingNetwork, network } = useWalletConnectorNetwork(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector);
  useWalletEventListeners({
    authMode,
    detectNewWalletsForLinking,
    disconnectWallet,
    handleLogOut,
    multiWallet,
    multiWalletWidgetState,
    primaryWallet,
    refreshConnectedWallet,
    secondaryWallets,
    selectedWalletConnector,
    selectedWalletWithAction,
    setMultiWalletWidgetState,
    setPrimaryWalletId,
    setSelectedWalletConnectorKey,
    setSelectedWalletWithAction,
    user
  });
  const { walletsForChainsMap } = useFetchWalletsForChainsMap(newToWeb3WalletChainMap);
  (0, import_react443.useEffect)(() => {
    initExpirationTime(handleLogOut);
  }, [handleLogOut, isAuthenticated]);
  const { setCallback } = useCustomerCallbacks({
    callbacks: {
      onAuthSuccess: events === null || events === void 0 ? void 0 : events.onAuthSuccess,
      onUserProfileUpdate: events === null || events === void 0 ? void 0 : events.onUserProfileUpdate
    },
    handleLogOut,
    isAuthenticated,
    primaryWallet,
    user
  });
  const sendWagmiSettings = (0, import_react443.useCallback)(() => (settings2) => {
    const { dynamicWagmiSettings } = settings2;
    if (dynamicWagmiSettings) {
      sendDynamicProps(environmentId, {
        dynamicWagmiSettings: { dynamicWagmiSettings }
      });
    }
  }, [environmentId]);
  const clearStatesOnBackClick = (0, import_react443.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    setDesktopUri("");
    setLegacyIsVerifying(false);
    if (!user) {
      clearAllWalletConnectSessions();
    }
    setMultiWalletWidgetState("idle");
    if (authMode !== "connect-only") {
      removeConnectedWalletsInfo();
    }
    if (StorageService.getItem(WALLET_PICKER_SEARCH_KEY)) {
      StorageService.removeItem(WALLET_PICKER_SEARCH_KEY);
    }
    StorageService.removeItem(PHANTOM_SIGNATURE_STATE);
    if (selectedWalletConnector && (!primaryWallet || primaryWallet.connector.key !== selectedWalletConnector.key)) {
      yield selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.endSession();
    }
  }), [
    user,
    setMultiWalletWidgetState,
    authMode,
    selectedWalletConnector,
    primaryWallet,
    clearAllWalletConnectSessions,
    removeConnectedWalletsInfo
  ]);
  const { passkeySuccessPopup, setPasskeySuccessPopup } = usePasskeySuccessPopup();
  const value = (0, import_react443.useMemo)(() => {
    var _a2;
    return {
      accessDeniedButton,
      accessDeniedMessagePrimary,
      accessDeniedMessageSecondary,
      accountSwitchState,
      appLogoUrl,
      appName,
      authMode,
      authToken: getAuthToken(),
      authorizationViewDisplayOrder,
      awaitingSignatureState,
      bridgeChains,
      bridgeChainsToConnect,
      bridgeOnboardingCompleted,
      clearStatesOnBackClick,
      connectWallet,
      connectedWallets,
      consumeNonce,
      cssOverrides,
      customPrivacyPolicy,
      customTermsOfServices,
      debugError,
      defaultNumberOfWalletsToShow,
      defaultPhoneInputIso2,
      desktopUri,
      detectNewWalletsForLinking,
      disconnectWallet,
      displaySiweStatement,
      enableConnectOnlyFallback,
      environmentId,
      events,
      getConnectedWalletById,
      getNameService,
      handleLogOut,
      handleUnlinkWallet: authMode === "connect-only" ? disconnectWallet : handleUnlinkWallet,
      handlers,
      i18nSDKInstance,
      isBridgeFlow,
      isRenderingEmbeddedAuthFlow,
      isSingleWalletAccount,
      legacyIsVerifying,
      linkedWallets: authMode === "connect-only" || !user ? [] : linkedOrConnectedWallets,
      loadingNetwork,
      locale: {
        changeLanguage: Locale.getInstance().changeLanguage
      },
      loginWithEmail,
      minAuthToken: getMinAuthToken(),
      multiAsset,
      multiWallet,
      multiWalletWidgetState,
      network,
      networkConfigurations: serverNetworkConfigurations,
      networkValidationMode,
      newToWeb3WalletChainMap: walletsForChainsMap,
      notInTheListImageUrl: imageUserNotInAccessList || notInTheListImageUrl,
      onboardingImageUrl: imageUserInAccessList || onboardingImageUrl,
      overrides: settings.overrides,
      passkeySuccessPopup,
      policiesConsentInnerComponent,
      primaryWallet,
      primaryWalletId,
      privacyPolicyUrl,
      projectSettings,
      qrcodeUri,
      recommendedWallets,
      redirectUrl: settings.redirectUrl,
      removeBridgeOnboardingCompleted,
      removeConnectedWalletsInfo,
      sdkHasLoaded,
      secondaryWallets,
      selectedTabIndex,
      selectedTabSettings,
      selectedWalletConnector,
      selectedWalletWithAction,
      sendWagmiSettings,
      setAuthMode,
      setAuthorizationViewDisplayOrder,
      setBridgeOnboardingCompleted,
      setCallback,
      setDesktopUri,
      setIsSingleWalletAccount,
      setLegacyIsVerifying,
      setLogInWithEmail,
      setMultiWalletWidgetState,
      setPasskeySuccessPopup,
      setPrimaryWallet,
      setPrimaryWalletId,
      setQrcodeUri,
      setSelectedTabIndex,
      setSelectedWalletConnectorKey,
      setSelectedWalletWithAction,
      setShowAuthFlow,
      setShowBridgeWidget,
      setShowDynamicUserProfile,
      setShowQrcodeModal,
      shadowDOMEnabled,
      showAuthFlow,
      showBridgeWidget,
      showDynamicUserProfile,
      showFiat,
      showLockedWalletView,
      showQrcodeModal,
      siweStatement,
      socialMediaIconUrl: ((_a2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general) === null || _a2 === void 0 ? void 0 : _a2.supportUrls) || socialMediaIconUrl,
      socialMediaLinkText,
      socialMediaUrl,
      socialProvidersFilter,
      socialSettings: settings.social,
      tabsItems,
      termsOfServiceUrl,
      theme,
      toolkitEnabled,
      user,
      userWithMissingInfo,
      walletConnectorOptions,
      walletUiUtils,
      walletsFilter
    };
  }, [
    accessDeniedButton,
    accessDeniedMessagePrimary,
    accessDeniedMessageSecondary,
    accountSwitchState,
    appLogoUrl,
    appName,
    authMode,
    authorizationViewDisplayOrder,
    awaitingSignatureState,
    bridgeChains,
    bridgeChainsToConnect,
    bridgeOnboardingCompleted,
    clearStatesOnBackClick,
    connectWallet,
    connectedWallets,
    consumeNonce,
    cssOverrides,
    customPrivacyPolicy,
    customTermsOfServices,
    debugError,
    defaultNumberOfWalletsToShow,
    defaultPhoneInputIso2,
    desktopUri,
    detectNewWalletsForLinking,
    disconnectWallet,
    displaySiweStatement,
    enableConnectOnlyFallback,
    environmentId,
    events,
    getConnectedWalletById,
    getNameService,
    handleLogOut,
    handleUnlinkWallet,
    handlers,
    i18nSDKInstance,
    isBridgeFlow,
    isSingleWalletAccount,
    legacyIsVerifying,
    user,
    linkedOrConnectedWallets,
    loadingNetwork,
    loginWithEmail,
    multiAsset,
    multiWallet,
    multiWalletWidgetState,
    network,
    serverNetworkConfigurations,
    networkValidationMode,
    walletsForChainsMap,
    imageUserNotInAccessList,
    notInTheListImageUrl,
    imageUserInAccessList,
    onboardingImageUrl,
    settings.overrides,
    settings.redirectUrl,
    settings.social,
    passkeySuccessPopup,
    policiesConsentInnerComponent,
    primaryWallet,
    primaryWalletId,
    privacyPolicyUrl,
    projectSettings,
    qrcodeUri,
    recommendedWallets,
    removeBridgeOnboardingCompleted,
    removeConnectedWalletsInfo,
    sdkHasLoaded,
    secondaryWallets,
    selectedTabIndex,
    selectedTabSettings,
    selectedWalletConnector,
    selectedWalletWithAction,
    sendWagmiSettings,
    setAuthMode,
    setAuthorizationViewDisplayOrder,
    setBridgeOnboardingCompleted,
    setCallback,
    setLogInWithEmail,
    setMultiWalletWidgetState,
    setPasskeySuccessPopup,
    setPrimaryWallet,
    setPrimaryWalletId,
    setSelectedTabIndex,
    setSelectedWalletConnectorKey,
    setShowAuthFlow,
    setShowQrcodeModal,
    shadowDOMEnabled,
    showAuthFlow,
    showBridgeWidget,
    showDynamicUserProfile,
    showFiat,
    showLockedWalletView,
    showQrcodeModal,
    siweStatement,
    socialMediaIconUrl,
    socialMediaLinkText,
    socialMediaUrl,
    socialProvidersFilter,
    tabsItems,
    termsOfServiceUrl,
    theme,
    toolkitEnabled,
    userWithMissingInfo,
    walletConnectorOptions,
    walletUiUtils,
    walletsFilter
  ]);
  usePrefetch({
    as: "image",
    href: getIconicSpriteUrl(),
    id: "sprite",
    type: "image/svg+xml"
  });
  usePrefetch({
    as: "fetch",
    href: getWalletBookCdnUrl(),
    id: "wallet-book",
    type: "application/json"
  });
  usePrefetch({
    as: "fetch",
    href: `${ApiEndpoint.getBaseUrl()}/sdk/${environmentId}/settings?sdkVersion=${encodeURIComponent(`WalletKit/${VERSION}`)}`,
    id: `project-settings-${environmentId}`,
    type: "application/json"
  });
  (0, import_react443.useEffect)(() => {
    if (!multiWallet && multiWalletWidgetState !== "awaiting_account_switch") {
      return;
    }
    if (user && multiWalletWidgetState !== "idle" && !showDynamicUserProfile) {
      setShowDynamicUserProfile(true);
    }
  }, [multiWallet, multiWalletWidgetState, showDynamicUserProfile]);
  return (0, import_jsx_runtime409.jsx)(I18nextProvider, { i18n: i18nSDKInstance, children: (0, import_jsx_runtime409.jsx)(DynamicContext.Provider, { value, children: (0, import_jsx_runtime409.jsx)(WalletBookContextProvider, { walletBook, children: (0, import_jsx_runtime409.jsx)(ThemeContextProvider, { customerTheme: parseTheme(theme, ((_p = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design) === null || _p === void 0 ? void 0 : _p.modal) || void 0), designSettings: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design, children: (0, import_jsx_runtime409.jsx)(LoadingContextProvider, { children: (0, import_jsx_runtime409.jsxs)(ViewContextProvider, { initialView: getInitialView({
    bridgeOnboardingCompleted,
    connectedWallets,
    isAuthenticated: isAuthenticated || Boolean(primaryWallet),
    isBridgeFlow,
    isMultiWalletEnabled: multiWallet
  }), children: [networkValidationMode === "always" && (0, import_jsx_runtime409.jsx)(UseNetworkValidation, {}), (0, import_jsx_runtime409.jsx)(CaptchaContextProvider, { children: (0, import_jsx_runtime409.jsx)(AccountExistsContextProvider, { children: (0, import_jsx_runtime409.jsx)(WalletContextProvider, { children: (0, import_jsx_runtime409.jsx)(VerificationProvider, { children: (0, import_jsx_runtime409.jsx)(PasskeyContextProvider, { children: (0, import_jsx_runtime409.jsx)(DynamicWidgetContextProvider, { children: (0, import_jsx_runtime409.jsx)(DynamicBridgeWidgetContextProvider, { children: (0, import_jsx_runtime409.jsx)(FundingContextProvider, { children: (0, import_jsx_runtime409.jsx)(AccessDeniedContextProvider, { children: (0, import_jsx_runtime409.jsx)(SendBalanceContextProvider, { children: (0, import_jsx_runtime409.jsx)(WalletGroupContextProvider, { children: (0, import_jsx_runtime409.jsx)(UserFieldEditorContextProvider, { children: (0, import_jsx_runtime409.jsx)(ConnectWithOtpProvider, { children: (0, import_jsx_runtime409.jsx)(PhantomRedirectContextProvider, { children: (0, import_jsx_runtime409.jsxs)(SocialRedirectContextProvider, { children: [(0, import_jsx_runtime409.jsx)(DynamicAuthFlow, {}), (0, import_jsx_runtime409.jsx)(Toolkit, {}), (0, import_jsx_runtime409.jsx)(FundingWidget, {}), (0, import_jsx_runtime409.jsx)(SyncAuthFlow, {}), (0, import_jsx_runtime409.jsx)(TelegramAutoLogin, {}), confirmationModal, (0, import_jsx_runtime409.jsx)(ErrorBoundaryExclude, { children })] }) }) }) }) }) }) }) }) }) }) }) }) }) }) })] }) }) }) }) }) });
};
var DynamicContextProvider = (props) => {
  Logger.setEnvironmentId(props.settings.environmentId);
  Logger.setEmitErrors(props.emitErrors);
  useParentDynamicContextGuard();
  return (0, import_jsx_runtime409.jsx)(ReinitializeContextProvider, { onReinitialize: removeStoreInstance, children: (0, import_jsx_runtime409.jsx)(ErrorBoundary, { children: (0, import_jsx_runtime409.jsx)(ErrorContextProvider, { children: (0, import_jsx_runtime409.jsx)(UserWalletsProvider, { children: (0, import_jsx_runtime409.jsx)(FieldsStateProvider, { children: (0, import_jsx_runtime409.jsx)(IpConfigurationContextProvider, { children: (0, import_jsx_runtime409.jsx)(WidgetRegistryContextProvider, { children: (0, import_jsx_runtime409.jsx)(InnerDynamicContextProvider, Object.assign({}, props)) }) }) }) }) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ErrorBoundary/ErrorBoundaryInclude.js
var ErrorBoundaryInclude = class extends ErrorBoundaryBase {
  render() {
    const { children } = this.props;
    return this.renderOrError(children, {
      isDynamicSdkError: true
    });
  }
};

// node_modules/@dynamic-labs/sdk-react-core/src/index.js
var import_react518 = __toESM(require_react());

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDynamicScopes/useDynamicScopes.js
var import_react444 = __toESM(require_react(), 1);
var import_jsx_runtime410 = __toESM(require_jsx_runtime(), 1);
var import_react_dom245 = __toESM(require_react_dom(), 1);
var import_qrcode241 = __toESM(require_browser(), 1);
var useDynamicScopes = () => {
  const { user } = useInternalDynamicContext();
  const userScopes = (0, import_react444.useMemo)(() => {
    const { scope } = user || {};
    if (!scope)
      return [];
    return scope.split(" ");
  }, [user]);
  const userHasScopes = (scopes, logicOperator = "OR") => {
    if (!scopes.length)
      return false;
    if (typeof scopes === "string")
      scopes = scopes.split(" ");
    if (logicOperator === "AND") {
      return scopes.every((scope) => Boolean(userScopes.includes(scope)));
    }
    return scopes.some((scope) => Boolean(userScopes.includes(scope)));
  };
  return {
    userHasScopes,
    userScopes
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/index.js
var import_jsx_runtime492 = __toESM(require_jsx_runtime());

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useAuthenticateConnectedUser/useAuthenticateConnectedUser.js
var import_react446 = __toESM(require_react(), 1);
var import_jsx_runtime412 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/authenticationHooks/useSignConnectOnlyUser/useSignConnectOnlyUser.js
var import_react445 = __toESM(require_react(), 1);
var import_jsx_runtime411 = __toESM(require_jsx_runtime(), 1);
var import_react_dom246 = __toESM(require_react_dom(), 1);
var import_qrcode242 = __toESM(require_browser(), 1);
var useSignConnectOnlyUser = () => {
  const { setView } = useViewContext();
  const { setErrorMessage } = useErrorContext();
  const { getCaptchaToken } = useCaptchaContext();
  const { connectWallet, consumeNonce, displaySiweStatement, projectSettings, environmentId, setIsSingleWalletAccount, setShowAuthFlow, setSelectedWalletConnectorKey, walletUiUtils } = useInternalDynamicContext();
  const verifyWallet2 = useVerifyWallet({
    consumeNonce,
    displaySiweStatement,
    environmentId,
    projectSettings,
    setIsSingleWalletAccount
  });
  return (_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, getAddressOpts = void 0 }) {
    try {
      if (isEmbeddedConnector(walletConnector) && !isBloctoConnector(walletConnector)) {
        walletUiUtils.disabledConfirmationOnce();
      }
      setSelectedWalletConnectorKey(walletConnector.key);
      setView("pending-signature-without-back-button");
      setShowAuthFlow(true);
      const connectionResult = yield connectWallet(walletConnector, getAddressOpts);
      if (!(connectionResult === null || connectionResult === void 0 ? void 0 : connectionResult.address)) {
        return;
      }
      yield verifyWallet2({
        captchaToken: getCaptchaToken(),
        publicWalletAddress: connectionResult.address,
        walletConnector
      });
    } catch (err) {
      logger2.debug(err);
      setErrorMessage(err.toString());
      setShowAuthFlow(false, { emitCancelAuth: true });
      return;
    }
  });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useAuthenticateConnectedUser/useAuthenticateConnectedUser.js
var import_react_dom247 = __toESM(require_react_dom(), 1);
var import_qrcode243 = __toESM(require_browser(), 1);
var useAuthenticateConnectedUser = () => {
  const signConnectOnlyUser = useSignConnectOnlyUser();
  const { connectedWallets, user } = useInternalDynamicContext();
  const [isAuthenticating, setIsAuthenticating] = (0, import_react446.useState)(false);
  const authenticateUser = (0, import_react446.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    if (user) {
      throw new DynamicError("User is already authenticated");
    }
    if (connectedWallets.length === 0) {
      throw new DynamicError("No connected wallet");
    }
    const connectedWallet = connectedWallets[0];
    setIsAuthenticating(true);
    yield signConnectOnlyUser({
      walletConnector: connectedWallet.connector
    });
    setIsAuthenticating(false);
  }), [connectedWallets, signConnectOnlyUser, user]);
  return { authenticateUser, isAuthenticating };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/utils/functions/chain/getChainDisplayName.js
var getChainDisplayName = (chain) => {
  var _a;
  const displayName = (_a = getChainInfoWithOverrides(chain)) === null || _a === void 0 ? void 0 : _a.displayName;
  if (!displayName) {
    logger2.error(`Chain name for "${chain}" not supported`);
    return chain;
  }
  return displayName;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/arrow-right.js
var React88 = __toESM(require_react(), 1);
var _path69;
var _excluded74 = ["title", "titleId"];
function _extends81() {
  _extends81 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends81.apply(this, arguments);
}
function _objectWithoutProperties74(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose77(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose77(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgArrowRight = function SvgArrowRight2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties74(_ref2, _excluded74);
  return React88.createElement("svg", _extends81({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React88.createElement("title", {
    id: titleId
  }, title2) : null, _path69 || (_path69 = React88.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M8.862 2.862c.26-.26.682-.26.943 0l4.666 4.667a.667.667 0 0 1 0 .942l-4.666 4.667a.667.667 0 0 1-.943-.943l3.528-3.528H2a.667.667 0 0 1 0-1.334h10.39L8.862 3.805a.667.667 0 0 1 0-.943Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/iphone-face-id.js
var React89 = __toESM(require_react(), 1);
var _path70;
var _excluded75 = ["title", "titleId"];
function _extends82() {
  _extends82 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends82.apply(this, arguments);
}
function _objectWithoutProperties75(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose78(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose78(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgIphoneFaceId = function SvgIphoneFaceId2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties75(_ref2, _excluded75);
  return React89.createElement("svg", _extends82({
    width: 64,
    height: 64,
    viewBox: "0 0 64 64",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React89.createElement("title", {
    id: titleId
  }, title2) : null, _path70 || (_path70 = React89.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M3.25 17.563v-7.188a7.133 7.133 0 0 1 7.125-7.125h7.188a1.625 1.625 0 0 0 0-3.25h-7.188C4.655 0 0 4.654 0 10.375v7.188a1.625 1.625 0 0 0 3.25 0ZM17.563 60.75a1.625 1.625 0 0 1 0 3.25h-7.188C4.655 64 0 59.346 0 53.625v-7.188a1.625 1.625 0 0 1 3.25 0v7.188a7.133 7.133 0 0 0 7.125 7.125h7.188ZM64 46.437v7.188C64 59.345 59.346 64 53.625 64h-7.188a1.625 1.625 0 0 1 0-3.25h7.188a7.133 7.133 0 0 0 7.125-7.125v-7.188a1.625 1.625 0 0 1 3.25 0Zm0-36.062v7.188a1.625 1.625 0 0 1-3.25 0v-7.188a7.133 7.133 0 0 0-7.125-7.125h-7.188a1.625 1.625 0 0 1 0-3.25h7.188C59.345 0 64 4.654 64 10.375ZM43.214 47.302a1.687 1.687 0 0 0-2.29-2.48A13.115 13.115 0 0 1 32 48.313c-3.319 0-6.488-1.239-8.924-3.49a1.688 1.688 0 0 0-2.29 2.48A16.481 16.481 0 0 0 32 51.687c4.17 0 8.153-1.557 11.214-4.385Zm-7.839-23.177v12a4.317 4.317 0 0 1-4.313 4.313h-1.375a1.687 1.687 0 1 1 0-3.376h1.375c.517 0 .938-.42.938-.937v-12a1.687 1.687 0 1 1 3.375 0ZM47 28.844V24.03a1.594 1.594 0 0 0-3.188 0v4.813a1.594 1.594 0 0 0 3.188 0Zm-29.625 0a1.594 1.594 0 0 0 3.188 0V24.03a1.594 1.594 0 0 0-3.188 0v4.813Z",
    fill: "#000"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/logout.js
var React90 = __toESM(require_react(), 1);
var _path71;
var _excluded76 = ["title", "titleId"];
function _extends83() {
  _extends83 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends83.apply(this, arguments);
}
function _objectWithoutProperties76(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose79(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose79(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgLogout = function SvgLogout2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties76(_ref2, _excluded76);
  return React90.createElement("svg", _extends83({
    width: 14,
    height: 12,
    viewBox: "0 0 14 12",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React90.createElement("title", {
    id: titleId
  }, title2) : null, _path71 || (_path71 = React90.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M3 1.333c-.736 0-1.333.597-1.333 1.334v6.666c0 .737.597 1.334 1.333 1.334h2.667C6.403 10.667 7 10.07 7 9.333v-.666a.667.667 0 0 1 1.333 0v.666A2.667 2.667 0 0 1 5.667 12H3A2.667 2.667 0 0 1 .333 9.333V2.667A2.667 2.667 0 0 1 3 0h2.667a2.667 2.667 0 0 1 2.666 2.667v.666a.667.667 0 1 1-1.333 0v-.666c0-.737-.597-1.334-1.333-1.334H3Zm6.862 1.529c.26-.26.682-.26.943 0l2.666 2.667c.26.26.26.682 0 .942l-2.666 2.667a.667.667 0 0 1-.943-.943l1.529-1.528H3.667a.667.667 0 0 1 0-1.334h7.724L9.862 3.805a.667.667 0 0 1 0-.943Z"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/pencil.js
var React91 = __toESM(require_react(), 1);
var _path72;
var _excluded77 = ["title", "titleId"];
function _extends84() {
  _extends84 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends84.apply(this, arguments);
}
function _objectWithoutProperties77(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose80(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose80(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgPencil = function SvgPencil2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties77(_ref2, _excluded77);
  return React91.createElement("svg", _extends84({
    width: 14,
    height: 14,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React91.createElement("title", {
    id: titleId
  }, title2) : null, _path72 || (_path72 = React91.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12.04 1.96a1 1 0 0 0-1.414 0l-.528.528 1.414 1.414.529-.528a1 1 0 0 0 0-1.414Zm-1.47 2.885L9.154 3.431l-7.488 7.488v1.438h1.39l7.512-7.512Zm-.886-3.828a2.333 2.333 0 0 1 3.3 3.3l-9.18 9.178a.666.666 0 0 1-.47.195H1a.667.667 0 0 1-.667-.666v-2.381c0-.177.07-.347.196-.472l9.155-9.154Z",
    fill: "currentColor",
    fillOpacity: 0.65
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/index.js
var import_react_dom309 = __toESM(require_react_dom());

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/mergeNetworks/mergeNetworks.js
var mergeNetworks = (priorityNetworks, secondaryNetworks) => {
  const networks = [...priorityNetworks];
  secondaryNetworks.forEach((network) => {
    const hasNetwork = networks.some((item) => item.chainId === network.chainId);
    if (!hasNetwork)
      networks.push(network);
  });
  return networks;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSocialAccounts/useSocialAccounts.js
var import_react447 = __toESM(require_react(), 1);
var import_jsx_runtime413 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getEnabledOAuthProviders/index.js
var getEnabledOAuthProviders = (providers) => {
  var _a;
  return (_a = providers === null || providers === void 0 ? void 0 : providers.filter(({ enabledAt, authorizationUrl, redirectUrl }) => Boolean(enabledAt) && Boolean(authorizationUrl) && Boolean(redirectUrl))) !== null && _a !== void 0 ? _a : [];
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getEnabledSocialSignInProvidersAsProviderEnum/getEnabledSocialSignInProvidersAsProviderEnum.js
var getEnabledSocialSignInProvidersAsProviderEnum = (providers) => {
  if (!providers)
    return [];
  const enabledProviders = [];
  for (const provider of providers) {
    const matchingProviderEnum = getProviderEnumForSocialSignInProvider(provider.provider);
    if (matchingProviderEnum && provider.enabled) {
      enabledProviders.push(matchingProviderEnum);
    }
  }
  return enabledProviders;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSocialAccounts/useSocialAccounts.js
var import_react_dom248 = __toESM(require_react_dom(), 1);
var import_qrcode244 = __toESM(require_browser(), 1);
var useSocialAccounts = ({ sessionTimeout } = {
  sessionTimeout: 2e4
}) => {
  var _a;
  const { environmentId, user, projectSettings } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const { handleError, setError, setIsProcessing, checkValidProvider, error, isProcessing, connectSocialAccount } = useSocialAuth({
    onFarcasterUrl: (url) => setView("farcaster-connect-view", { url }),
    sessionTimeout
  });
  const verifiedOAuthCredentialsMap = (0, import_react447.useMemo)(() => {
    var _a2, _b;
    const verifiedOAuthCredential = (_b = (_a2 = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a2 === void 0 ? void 0 : _a2.filter((credential) => credential.format === "oauth")) !== null && _b !== void 0 ? _b : [];
    return Object.fromEntries(new Map(verifiedOAuthCredential.map((credential) => {
      var _a3;
      return [
        (_a3 = credential.oauthProvider) !== null && _a3 !== void 0 ? _a3 : credential.id,
        credential
      ];
    })));
  }, [user === null || user === void 0 ? void 0 : user.verifiedCredentials]);
  const checkValidOAuthLinking = (0, import_react447.useCallback)((provider) => {
    if (!isSocialKycEnabled(projectSettings)) {
      handleError(provider, SocialOAuthErrorCode.SOCIAL_LINKING_NOT_ENABLED, "Social linking is not enabled in Information Capture on the dashboard", { raiseAuthFailure: false });
      return false;
    }
    const verifiedCredential = verifiedOAuthCredentialsMap[provider];
    if (verifiedCredential) {
      handleError(provider, SocialOAuthErrorCode.ACCOUNT_ALREADY_LINKED, `Account already linked for provider: ${provider}`, { raiseAuthFailure: false });
      return false;
    }
    const oauthProviders = getEnabledOAuthProviders(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers);
    const oauthProvider = oauthProviders.find((p) => p.provider === provider);
    if (!oauthProvider) {
      handleError(provider, SocialOAuthErrorCode.PROVIDER_NOT_ENABLED, `Social linking provider is not enabled in Information Capture on the dashboard: ${provider}`, { raiseAuthFailure: false });
      return false;
    }
    return true;
  }, [handleError, projectSettings, verifiedOAuthCredentialsMap]);
  const linkSocialAccount = (0, import_react447.useCallback)((provider_1, ...args_1) => __awaiter(void 0, [provider_1, ...args_1], void 0, function* (provider, { redirectUrl } = { redirectUrl: void 0 }) {
    connectSocialAccount({
      authMode: "link",
      provider,
      redirectUrl,
      validator: checkValidOAuthLinking
    });
  }), [checkValidOAuthLinking, connectSocialAccount]);
  const unlinkSocialAccount = (0, import_react447.useCallback)((provider) => __awaiter(void 0, void 0, void 0, function* () {
    var _b;
    setError(void 0);
    setIsProcessing(true);
    if (!checkValidProvider(provider, "unlink")) {
      return;
    }
    const verifiedCredential = verifiedOAuthCredentialsMap[provider];
    if (!verifiedCredential) {
      handleError(provider, SocialOAuthErrorCode.NO_ACCOUNT_LINKED, `No account linked for provider: ${provider}`, { raiseAuthFailure: false });
      return;
    }
    try {
      const primaryWalletId = StorageService.getItem(PRIMARY_WALLET_ID);
      const response = yield unlinkOAuth({
        environmentId,
        primaryWalletId,
        verifiedCrentialId: (_b = verifiedCredential.id) !== null && _b !== void 0 ? _b : ""
      });
      if (!response) {
        handleError(provider, SocialOAuthErrorCode.UNLINK_ERROR, `Failed to unlink social account: ${provider} | ${verifiedCredential.id}`, { raiseAuthFailure: false });
        return;
      }
      setIsProcessing(false);
    } catch (err) {
      handleError(provider, SocialOAuthErrorCode.GENERAL_ERROR, `Failed to unlink social account: ${provider} | ${verifiedCredential.id}`, { raiseAuthFailure: false });
    }
  }), [
    checkValidProvider,
    environmentId,
    handleError,
    setError,
    setIsProcessing,
    verifiedOAuthCredentialsMap
  ]);
  const isLinked = (0, import_react447.useCallback)((provider) => Boolean(verifiedOAuthCredentialsMap[provider]), [verifiedOAuthCredentialsMap]);
  const getLinkedAccountInformation = (0, import_react447.useCallback)((provider) => {
    const verifiedCredential = verifiedOAuthCredentialsMap[provider];
    if (!verifiedCredential) {
      return;
    }
    const { id, oauthAccountId, oauthAccountPhotos, oauthDisplayName, oauthEmails, oauthProvider, oauthUsername, publicIdentifier } = verifiedCredential;
    return {
      accountId: oauthAccountId !== null && oauthAccountId !== void 0 ? oauthAccountId : void 0,
      avatar: oauthAccountPhotos === null || oauthAccountPhotos === void 0 ? void 0 : oauthAccountPhotos[0],
      displayName: oauthDisplayName !== null && oauthDisplayName !== void 0 ? oauthDisplayName : void 0,
      email: oauthEmails === null || oauthEmails === void 0 ? void 0 : oauthEmails[0],
      id,
      provider: oauthProvider,
      publicIdentifier,
      username: oauthUsername
    };
  }, [verifiedOAuthCredentialsMap]);
  const checkValidOAuthSignIn = (0, import_react447.useCallback)((provider) => {
    var _a2;
    const oauthProvider = getEnabledSocialSignInProvidersAsProviderEnum((_a2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.socialSignIn) === null || _a2 === void 0 ? void 0 : _a2.providers).find((socialProvider) => socialProvider === provider);
    if (!oauthProvider) {
      handleError(provider, SocialOAuthErrorCode.PROVIDER_NOT_ENABLED, `Provider is not enabled for sign-in on the dashboard: ${provider}`, { raiseAuthFailure: true });
      return false;
    }
    return true;
  }, [handleError, (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.socialSignIn) === null || _a === void 0 ? void 0 : _a.providers]);
  const signInWithSocialAccount = (0, import_react447.useCallback)((provider_2, ...args_2) => __awaiter(void 0, [provider_2, ...args_2], void 0, function* (provider, { redirectUrl } = { redirectUrl: void 0 }) {
    return connectSocialAccount({
      authMode: "signin",
      provider,
      redirectUrl,
      validator: checkValidOAuthSignIn
    });
  }), [checkValidOAuthSignIn, connectSocialAccount]);
  return (0, import_react447.useMemo)(() => ({
    error,
    getLinkedAccountInformation,
    isLinked,
    isProcessing,
    linkSocialAccount,
    signInWithSocialAccount,
    unlinkSocialAccount
  }), [
    error,
    getLinkedAccountInformation,
    isLinked,
    isProcessing,
    linkSocialAccount,
    signInWithSocialAccount,
    unlinkSocialAccount
  ]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useRpcProviders/useRpcProviders.js
var import_react448 = __toESM(require_react(), 1);
var import_jsx_runtime414 = __toESM(require_jsx_runtime(), 1);
var import_react_dom249 = __toESM(require_react_dom(), 1);
var import_qrcode245 = __toESM(require_browser(), 1);
var useRpcProviders = (selector) => {
  const { networkConfigurations } = useInternalDynamicContext();
  return (0, import_react448.useMemo)(() => {
    if (!networkConfigurations)
      return selector(void 0);
    const providers = ChainRpcProviders.getProviders(networkConfigurations);
    return selector(providers);
  }, [networkConfigurations, selector]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useMultiWalletPromptState/useMultiWalletPromptState.js
var import_react449 = __toESM(require_react(), 1);
var import_jsx_runtime415 = __toESM(require_jsx_runtime(), 1);
var import_react_dom250 = __toESM(require_react_dom(), 1);
var import_qrcode246 = __toESM(require_browser(), 1);
var useMultiWalletPromptState = () => {
  const { accountSwitchState, multiWalletWidgetState, multiWallet, selectedWalletWithAction } = useInternalDynamicContext();
  if ((selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.action) === "unlink") {
    return "unlink_wallet";
  }
  if (multiWalletWidgetState === "awaiting_signature") {
    return "pending_sign";
  }
  if (multiWalletWidgetState === "awaiting_account_switch") {
    if (accountSwitchState === "linking_new_wallet") {
      return "linking_new_wallet";
    }
    if (accountSwitchState === "primary_not_connected") {
      if (multiWallet) {
        return "primary_not_connected";
      } else {
        return "pending_account_switch";
      }
    }
    if (accountSwitchState === "switching_primary") {
      return "pending_account_switch";
    }
  }
  if (multiWalletWidgetState === "awaiting_connection") {
    return "awaiting_connection";
  }
  if (multiWalletWidgetState === "detected_new_wallet") {
    return "detected_new_wallet";
  }
  return "idle";
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSwitchWallet/useSwitchWallet.js
var import_react450 = __toESM(require_react(), 1);
var import_jsx_runtime416 = __toESM(require_jsx_runtime(), 1);
var import_react_dom251 = __toESM(require_react_dom(), 1);
var import_qrcode247 = __toESM(require_browser(), 1);
var useSwitchWallet = () => {
  const { setPrimaryWallet, user, primaryWallet } = useInternalDynamicContext();
  const { getEOAWallet } = useSmartWallets();
  const userWallets = useUserWallets();
  return (0, import_react450.useCallback)((walletId) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const wallet = userWallets.find((wallet2) => wallet2.id === walletId);
    if (!wallet) {
      throw new Error(`Wallet with id ${walletId} not found`);
    }
    if (((_a = wallet.connector) === null || _a === void 0 ? void 0 : _a.key) === "unknown") {
      throw new Error("Cannot make this wallet active, since this wallet doesn't have a compatible connector on this device.");
    }
    const eoaWallet = getEOAWallet(wallet);
    if (eoaWallet && isTurnkeyWalletConnector(eoaWallet.connector)) {
      const sortedVcs = (_c = (_b = eoaWallet.connector) === null || _b === void 0 ? void 0 : _b.verifiedCredentials) === null || _c === void 0 ? void 0 : _c.reduce((acc, vc) => {
        if (vc.address === eoaWallet.address) {
          return [vc, ...acc];
        }
        return [...acc, vc];
      }, []);
      if (sortedVcs) {
        eoaWallet.connector.setVerifiedCredentials(sortedVcs);
      }
    }
    const { connector } = wallet;
    const email = (_d = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((verifiedCredential) => verifiedCredential.format === "email")) === null || _d === void 0 ? void 0 : _d.email;
    if (isEmailWalletConnector(connector) && email) {
      connector.setEmail(email);
    }
    if ((primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain) === "flow" && connector.connectedChain === "FLOW") {
      yield connector.endSession();
    }
    setPrimaryWallet(walletId);
  }), [
    getEOAWallet,
    primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain,
    setPrimaryWallet,
    user === null || user === void 0 ? void 0 : user.verifiedCredentials,
    userWallets
  ]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedReveal/useEmbeddedReveal.js
var import_react451 = __toESM(require_react(), 1);
var import_jsx_runtime417 = __toESM(require_jsx_runtime(), 1);
var import_react_dom252 = __toESM(require_react_dom(), 1);
var import_qrcode248 = __toESM(require_browser(), 1);
var useEmbeddedReveal = () => {
  const { primaryWallet, projectSettings, user, setShowAuthFlow } = useInternalDynamicContext();
  const { userHasEmbeddedWallet } = useEmbeddedWallet();
  const { setView } = useViewContext();
  const { isTurnkeyWallet } = useIsTurnkeyWallet();
  const turnkeyChecks = ({ user: user2, recoveryPhrase }) => {
    var _a, _b;
    if (!isTurnkeyEnabled(projectSettings)) {
      throw new Error("Dynamic embedded wallet is not enabled. Go to the dashboard and make sure to have both Dynamic Embedded wallet and at least one EVM network enabled. Also, check if EthereumWalletConnectors is in the  DynamicContextProvider > settings > walletConnectors.");
    }
    if (!userHasEmbeddedWallet()) {
      throw new Error("Dynamic embedded wallet not found");
    }
    const walletProperties = (_b = (_a = user2.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _b === void 0 ? void 0 : _b.walletProperties;
    const turnkeyHDWalletId = walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.turnkeyHDWalletId;
    if (recoveryPhrase && !turnkeyHDWalletId) {
      throw new Error("Wallet is non-HD and does not have a recovery phrase");
    }
  };
  const coinbaseMpcChecks = () => {
    if (!isCoinbaseWaasEnabled(projectSettings)) {
      throw new Error("Coinbase MPC is not enabled. Go to the dashboard and make sure to have Coinbase WaaS and at least one EVM network enabled. Also, make sure you are passing `EthereumWalletConnectors` to the `walletConnectors` prop in `DynamicContextProvider` `settings`.");
    }
    if (!userHasEmbeddedWallet()) {
      throw new Error("Coinbase MPC wallet not found");
    }
  };
  const initExportProcess = (0, import_react451.useCallback)((...args_1) => __awaiter(void 0, [...args_1], void 0, function* (recoveryPhrase = false) {
    if (!primaryWallet) {
      throw new Error("No primary wallet");
    }
    if (!user) {
      throw new Error(USER_NOT_LOGGED_IN);
    }
    if (isTurnkeyWallet) {
      turnkeyChecks({ recoveryPhrase, user });
    }
    if (isCoinbaseMpcWalletConnector(primaryWallet.connector)) {
      coinbaseMpcChecks();
    }
    if (!userHasEmbeddedWallet()) {
      throw new Error("Dynamic embedded wallet not found");
    }
    setShowAuthFlow(true, {
      ignoreIfIsEmbeddedWidget: false,
      performMultiWalletChecks: false
    });
    setView("embedded-reveal-view", { exportPrivateKey: !recoveryPhrase });
    return new Promise((resolve, reject) => {
      dynamicEvents.once("embeddedWalletRevealCompleted", (wallet) => resolve(wallet));
      dynamicEvents.once("embeddedWalletRevealFailed", (error) => reject(error));
    });
  }), [primaryWallet, isTurnkeyWallet, setShowAuthFlow, setView, user]);
  return {
    initExportProcess
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useEmbeddedWalletAuthenticator/useEmbeddedWalletAuthenticator.js
var import_react452 = __toESM(require_react(), 1);
var import_jsx_runtime418 = __toESM(require_jsx_runtime(), 1);
var import_react_dom253 = __toESM(require_react_dom(), 1);
var import_qrcode249 = __toESM(require_browser(), 1);
var useEmbeddedWalletAuthenticator = () => {
  const { initPasskeyRecoveryProcess, shouldInitRecovery } = usePasskeyRecovery();
  const { setShowAuthFlow } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const createOrRefreshAuthenticatorSession = (authenticatorType) => __awaiter(void 0, void 0, void 0, function* () {
    if (authenticatorType !== "passkey" && !(yield shouldInitRecovery())) {
      return;
    }
    return initPasskeyRecoveryProcess(authenticatorType);
  });
  const addEmbeddedWalletRecoveryEmail = () => __awaiter(void 0, void 0, void 0, function* () {
    setView("passkey-recovery-add-email");
    setShowAuthFlow(true);
  });
  return {
    addEmbeddedWalletRecoveryEmail,
    createOrRefreshAuthenticatorSession
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/DynamicBridgeWidget.js
var import_jsx_runtime442 = __toESM(require_jsx_runtime(), 1);
var import_react472 = __toESM(require_react(), 1);
var import_react_dom269 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeUserProfile/DynamicBridgeUserProfile.js
var import_jsx_runtime440 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetVariants/DynamicWidgetVariants.js
var import_jsx_runtime421 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetVariants/variants/DynamicWidgetDropdown/DynamicWidgetDropdown.js
var import_jsx_runtime419 = __toESM(require_jsx_runtime(), 1);
var import_react453 = __toESM(require_react(), 1);
var import_react_dom254 = __toESM(require_react_dom(), 1);
var import_qrcode250 = __toESM(require_browser(), 1);
var DynamicWidgetDropdown = ({ zIndex, isShown, onClose, children, className, contentClassName }) => (0, import_jsx_runtime419.jsx)(ZoomTransition, { outDuration: 200, className: classNames("dynamic-widget-dropdown", className), isShown, children: (0, import_jsx_runtime419.jsx)("div", { "data-testid": "DynamicWidgetDropdown", style: { zIndex }, className: classNames("dynamic-widget-dropdown__root", contentClassName), children: (0, import_jsx_runtime419.jsx)(PopperProvider, { children }) }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetVariants/variants/DynamicWidgetModal/DynamicWidgetModal.js
var import_jsx_runtime420 = __toESM(require_jsx_runtime(), 1);
var import_react454 = __toESM(require_react(), 1);
var import_react_dom255 = __toESM(require_react_dom(), 1);
var import_qrcode251 = __toESM(require_browser(), 1);
var DynamicWidgetModal = ({ children, isShown, onClose, zIndex, className, transitionEvents = {} }) => {
  usePreventPageScroll(Boolean(isShown));
  return (0, import_jsx_runtime420.jsx)(Portal, Object.assign({ zIndex, handleClose: () => onClose === null || onClose === void 0 ? void 0 : onClose(), isShown, withBackdrop: true }, transitionEvents, { children: (0, import_jsx_runtime420.jsx)("div", { className: classNames("dynamic-widget-modal", className), children: (0, import_jsx_runtime420.jsx)(PopperProvider, { children }) }) }));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetVariants/DynamicWidgetVariants.js
var mapDynamicWidgetVariantToComponent = {
  dropdown: DynamicWidgetDropdown,
  modal: DynamicWidgetModal
};
var DynamicWidgetVariants = ({ zIndex, variant, children, isOpen, setIsOpen, transitionEvents }) => {
  const DynamicVariantComponent = mapDynamicWidgetVariantToComponent[variant || "modal"];
  const { goToInitialDynamicWidgetView } = useWidgetContext();
  const handleClose = () => {
    setIsOpen(false);
    setTimeout(() => {
      goToInitialDynamicWidgetView();
    }, 300);
  };
  return (0, import_jsx_runtime421.jsx)(DynamicVariantComponent, { transitionEvents, zIndex, isShown: isOpen, onClose: handleClose, children });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeWidgetViews/DynamicBridgeWidgetViews.js
var import_jsx_runtime438 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/views/EditProfileView/EditProfileView.js
var import_jsx_runtime422 = __toESM(require_jsx_runtime(), 1);
var import_react455 = __toESM(require_react(), 1);
var import_react_dom256 = __toESM(require_react_dom(), 1);
var import_qrcode252 = __toESM(require_browser(), 1);
var EditProfileView = () => {
  const { setView } = useViewContext();
  const { goToProfileView } = useDynamicBridgeWidgetContext();
  const { setShowAuthFlow } = useInternalDynamicContext();
  const { updateUser } = useUserUpdateRequestInternal({
    validationSchemaStripUnknown: true
  });
  const onEditProfileFormSubmit = (0, import_react455.useCallback)((formValues) => __awaiter(void 0, void 0, void 0, function* () {
    const { isEmailVerificationRequired, isSmsVerificationRequired } = yield updateUser(formValues);
    goToProfileView();
    if (isEmailVerificationRequired || isSmsVerificationRequired) {
      setShowAuthFlow(true, {
        ignoreIfIsEmbeddedWidget: false,
        performMultiWalletChecks: false
      });
      setView(isEmailVerificationRequired ? "verify-email" : "verify-sms");
    }
  }), [goToProfileView, setShowAuthFlow, setView, updateUser]);
  return (0, import_jsx_runtime422.jsx)(UserProfileForm, { onEditProfileSubmit: onEditProfileFormSubmit, onEditProfileCancel: goToProfileView });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/views/ProfileView/ProfileView.js
var import_jsx_runtime436 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/UserProfile.js
var import_jsx_runtime434 = __toESM(require_jsx_runtime(), 1);
var import_react466 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isAllowedToLinkWallet/isAllowedToLinkWallet.js
var import_jsx_runtime424 = __toESM(require_jsx_runtime(), 1);
var import_react457 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getEnabledEmbeddedWalletProviders/getEnabledEmbeddedWalletProviders.js
var import_jsx_runtime423 = __toESM(require_jsx_runtime(), 1);
var import_react456 = __toESM(require_react(), 1);
var getEnabledEmbeddedWalletProviders = (projectSettings) => {
  var _a;
  const providers = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [];
  const embeddedWalletProviders = [
    ProviderEnum.Turnkey,
    ProviderEnum.CoinbaseWaas,
    ProviderEnum.MagicLink,
    ProviderEnum.Blocto
  ];
  return embeddedWalletProviders.filter((provider) => isProviderEnabled(providers, provider));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/isAllowedToLinkWallet/isAllowedToLinkWallet.js
var isAllowedToLinkWallet = (projectSettings, verifiedCredentials, multiWallet) => {
  if (multiWallet)
    return true;
  if (!projectSettings || !(verifiedCredentials === null || verifiedCredentials === void 0 ? void 0 : verifiedCredentials.length))
    return false;
  const canLinkOnSingleWallet = !getEnabledEmbeddedWalletProviders(projectSettings).length && !verifiedCredentials.some((vc) => vc.walletProvider);
  return canLinkOnSingleWallet;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/UserProfile.js
var import_react_dom264 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/Wallet/Wallet.js
var import_jsx_runtime425 = __toESM(require_jsx_runtime(), 1);
var import_react458 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/key.js
var React92 = __toESM(require_react(), 1);
var _path73;
var _excluded78 = ["title", "titleId"];
function _extends85() {
  _extends85 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends85.apply(this, arguments);
}
function _objectWithoutProperties78(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose81(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose81(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgKey = function SvgKey2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties78(_ref2, _excluded78);
  return React92.createElement("svg", _extends85({
    width: 18,
    height: 18,
    viewBox: "0 0 18 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React92.createElement("title", {
    id: titleId
  }, title2) : null, _path73 || (_path73 = React92.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M11.25 3a3.751 3.751 0 0 0-3.59 4.84.743.743 0 0 1-.187.746L3 13.062V15h1.5v-.75a.75.75 0 0 1 .75-.75H6v-.75a.75.75 0 0 1 .75-.75h1.188l1.476-1.473a.743.743 0 0 1 .746-.187A3.751 3.751 0 1 0 11.25 3ZM6 15v.75a.75.75 0 0 1-.75.75H3A1.5 1.5 0 0 1 1.5 15v-1.938c0-.398.156-.78.438-1.062l4.171-4.172A5.251 5.251 0 0 1 11.25 1.5a5.251 5.251 0 0 1 5.251 5.25 5.251 5.251 0 0 1-6.328 5.14l-1.39 1.391a.75.75 0 0 1-.532.219H7.5v.75a.75.75 0 0 1-.75.75Zm4.5-9.75a.75.75 0 0 1 .75-.75 2.25 2.25 0 0 1 2.25 2.25.75.75 0 0 1-1.5 0 .75.75 0 0 0-.75-.75.75.75 0 0 1-.75-.75Zm0 0",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/switch-horizontal.js
var React93 = __toESM(require_react(), 1);
var _path74;
var _excluded79 = ["title", "titleId"];
function _extends86() {
  _extends86 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends86.apply(this, arguments);
}
function _objectWithoutProperties79(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose82(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose82(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSwitchHorizontal = function SvgSwitchHorizontal2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties79(_ref2, _excluded79);
  return React93.createElement("svg", _extends86({
    width: 18,
    height: 18,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React93.createElement("title", {
    id: titleId
  }, title2) : null, _path74 || (_path74 = React93.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M17.256 5.244a.833.833 0 0 1 0 1.179l-3.333 3.333a.833.833 0 0 1-1.179-1.179l1.91-1.91H6.668a.833.833 0 0 1 0-1.667h7.988l-1.91-1.91a.833.833 0 1 1 1.178-1.18l3.333 3.334Zm-11.91 8.09h7.987a.833.833 0 1 1 0 1.666H5.345l1.91 1.91a.833.833 0 1 1-1.178 1.18l-3.333-3.334a.833.833 0 0 1 0-1.179l3.333-3.333a.833.833 0 1 1 1.179 1.179l-1.91 1.91Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/unlink.js
var React94 = __toESM(require_react(), 1);
var _path75;
var _excluded80 = ["title", "titleId"];
function _extends87() {
  _extends87 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends87.apply(this, arguments);
}
function _objectWithoutProperties80(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose83(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose83(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgUnlink = function SvgUnlink2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties80(_ref2, _excluded80);
  return React94.createElement("svg", _extends87({
    width: 18,
    height: 18,
    viewBox: "0 0 20 20",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React94.createElement("title", {
    id: titleId
  }, title2) : null, _path75 || (_path75 = React94.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M15.935 4.066a2.5 2.5 0 0 0-3.536 0l-.916.916a.833.833 0 0 1-1.179-1.179l.917-.916a4.167 4.167 0 0 1 5.892 5.893l-1.81 1.81-1.178-1.18 1.81-1.809a2.5 2.5 0 0 0 0-3.535Zm-10.06 6.523L4.698 9.411l-1.81 1.81a4.167 4.167 0 1 0 5.893 5.892l.918-.918a.833.833 0 0 0-1.179-1.178l-.918.917A2.5 2.5 0 0 1 4.066 12.4l1.81-1.81Zm-.488-6.38A.833.833 0 1 0 4.21 5.387l10.017 10.017a.833.833 0 1 0 1.179-1.178L5.387 4.209Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/Wallet/Wallet.js
var import_react_dom257 = __toESM(require_react_dom(), 1);
var import_qrcode253 = __toESM(require_browser(), 1);
var Wallet = ({ wallet, ens }) => {
  var _a, _b;
  const { connector, address } = wallet;
  const switchWallet = useSwitchWallet();
  const { setSelectedWalletWithAction, projectSettings, authMode } = useInternalDynamicContext();
  const iconSize2 = 20;
  const options2 = [
    {
      Icon: (0, import_jsx_runtime425.jsx)(SvgSwitchHorizontal, {}),
      callback: () => switchWallet(wallet.id),
      hide: ((_a = wallet.connector) === null || _a === void 0 ? void 0 : _a.key) === "unknown" || !((_b = wallet.connector) === null || _b === void 0 ? void 0 : _b.isAvailable),
      text: "Select wallet"
    }
  ];
  if (ens === null || ens === void 0 ? void 0 : ens.name) {
    options2.push({
      Icon: (0, import_jsx_runtime425.jsx)(SvgCopy, {}),
      callback: () => copyToClipboard(ens.name),
      text: "Copy ENS"
    });
  }
  options2.push({
    Icon: (0, import_jsx_runtime425.jsx)(SvgCopy, {}),
    callback: () => copyToClipboard(address || ""),
    text: "Copy address"
  });
  if (!isEmbeddedConnector(connector) && !(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.multiWalletUnlinkDisabled)) {
    options2.push({
      Icon: (0, import_jsx_runtime425.jsx)(SvgUnlink, {}),
      callback: () => setSelectedWalletWithAction({ action: "unlink", wallet }),
      text: `${authMode === "connect-only" ? "Disconnect" : "Unlink"} from my account`
    });
  }
  const exportKeysOption = getExportKeysOption(connector, projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers);
  if (exportKeysOption) {
    options2.push({
      Icon: (0, import_jsx_runtime425.jsx)(SvgKey, {}),
      callback: exportKeysOption,
      text: "Export private keys"
    });
  }
  return (0, import_jsx_runtime425.jsxs)("div", { className: "wallet__container", "data-testid": "wallet", children: [(0, import_jsx_runtime425.jsxs)("div", { className: "wallet__row", children: [(0, import_jsx_runtime425.jsx)("div", { className: "wallet__icon-container", children: (0, import_jsx_runtime425.jsx)(AuthProviderIcon, { iconSize: iconSize2, wallet, showNetworkIcon: true }) }), (ens === null || ens === void 0 ? void 0 : ens.name) ? (0, import_jsx_runtime425.jsxs)(import_jsx_runtime425.Fragment, { children: [(0, import_jsx_runtime425.jsx)(Typography, { className: "wallet__ens-name", variant: "body_small", color: "primary", truncate: true, children: ens === null || ens === void 0 ? void 0 : ens.name }), (0, import_jsx_runtime425.jsx)("div", { className: "wallet__row__seperator" }), (0, import_jsx_runtime425.jsx)(Typography, { variant: "body_mini", color: "secondary", children: shortenWalletAddress(address, 3, 3) })] }) : (0, import_jsx_runtime425.jsx)(Typography, { variant: "body_small", color: "primary", children: shortenWalletAddress(address, 4, 4) })] }), (0, import_jsx_runtime425.jsx)(DotsMenu, { "data-testid": "dots-menu", options: options2, buttonClassName: "wallet__menu", direction: "left" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/parts/UserProfileField/UserProfileField.js
var import_jsx_runtime427 = __toESM(require_jsx_runtime(), 1);
var import_react460 = __toESM(require_react(), 1);
var import_react_dom258 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/parts/UserProfileField/components/VerifiedUserFieldIcon/VerifiedUserFieldIcon.js
var import_jsx_runtime426 = __toESM(require_jsx_runtime(), 1);
var import_react459 = __toESM(require_react(), 1);
var VerifiedFieldTooltip = (content) => (0, import_jsx_runtime426.jsx)(Typography, { variant: "numbers_medium", color: "tooltip", children: content });
var VerifiedUserFieldIcon = ({ className, overwriteTooltipProps, tooltipContent, copykey }) => (0, import_jsx_runtime426.jsx)(Tooltip, Object.assign({ content: VerifiedFieldTooltip(tooltipContent) }, overwriteTooltipProps, { copykey, children: (0, import_jsx_runtime426.jsx)(SvgCheckCircle, { className: classNames("dynamic-verified-icon", className) }) }));

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/parts/UserProfileField/UserProfileField.js
var import_qrcode254 = __toESM(require_browser(), 1);
var UserProfileField = ({ name, label, value, copykey, autoComplete }) => {
  var _a, _b;
  const { user } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const isEmpty = value === "";
  const isPhoneNumber = name === "phoneNumber" && typeof value === "string";
  const isVerifiedEmail = name === "email" && (user === null || user === void 0 ? void 0 : user.email) && ((_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.some((cred) => cred.email === value));
  const isVerifiedPhoneNumber = isPhoneNumber && (user === null || user === void 0 ? void 0 : user.phoneNumber) && ((_b = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _b === void 0 ? void 0 : _b.some((cred) => `+${cred.phoneCountryCode}${cred.phoneNumber}` === value));
  const toolTipContent = isVerifiedEmail ? t2("dyn_user_profile.tooltips.verified_email") : t2("dyn_user_profile.tooltips.verified_phone");
  return (0, import_jsx_runtime427.jsxs)("div", { className: "user-profile-field", children: [label && (0, import_jsx_runtime427.jsx)(Typography, { as: "h6", color: "secondary", weight: "regular", variant: "body_small", copykey, children: label }), (0, import_jsx_runtime427.jsxs)("div", { className: "user-profile-field__value", children: [(0, import_jsx_runtime427.jsx)(Typography, { color: isEmpty ? "tertiary" : "primary", as: "p", weight: "regular", variant: "body_normal", children: isPhoneNumber ? formatPhone(value) : value }), (isVerifiedEmail || isVerifiedPhoneNumber) && (0, import_jsx_runtime427.jsx)(VerifiedUserFieldIcon, { className: "user-profile-field__verify-icon", overwriteTooltipProps: { as: "div" }, tooltipContent: toolTipContent, copykey: "dyn_user_profile.tooltips" })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/parts/UserProfileSection/UserProfileSection.js
var import_jsx_runtime428 = __toESM(require_jsx_runtime(), 1);
var import_react461 = __toESM(require_react(), 1);
var import_react_dom259 = __toESM(require_react_dom(), 1);
var import_qrcode255 = __toESM(require_browser(), 1);
var UserProfileSection = ({ title: title2, children, action }) => (0, import_jsx_runtime428.jsxs)("div", { className: "user-profile-section", children: [(0, import_jsx_runtime428.jsx)("div", { className: "user-profile-section__header", children: title2 && (0, import_jsx_runtime428.jsxs)(import_jsx_runtime428.Fragment, { children: [(0, import_jsx_runtime428.jsx)(Typography, { color: "secondary", weight: "regular", variant: "body_normal", className: "user-profile-section__title", children: title2 }), action && (0, import_jsx_runtime428.jsx)("div", { className: "user-profile-section__action", children: action })] }) }), children] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/parts/UserProfileSocialAccount/UserProfileSocialAccount.js
var import_jsx_runtime430 = __toESM(require_jsx_runtime(), 1);
var import_react462 = __toESM(require_react(), 1);
var import_react_dom260 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/parts/UserProfileSocialAccount/components/ConnectedAccountAvatar/ConnectedAccountAvatar.js
var import_jsx_runtime429 = __toESM(require_jsx_runtime(), 1);
var ConnectedAccountAvatar = ({ provider, avatarUrl, iconThemeVariant }) => (0, import_jsx_runtime429.jsxs)(import_jsx_runtime429.Fragment, { children: [(0, import_jsx_runtime429.jsx)("div", { className: "user-profile-social-account__connected-avatar", children: (0, import_jsx_runtime429.jsx)(Image, { className: "user-profile-social-account__image", src: avatarUrl, alt: "User avatar", dataTestId: "user-avatar", fallback: (0, import_jsx_runtime429.jsx)(UserProfileIcon, {}) }) }), (0, import_jsx_runtime429.jsx)("div", { className: "user-profile-social-account__connected-provider-icon", children: (0, import_jsx_runtime429.jsx)(SocialIcon, { name: provider, variant: iconThemeVariant }) })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/parts/UserProfileSocialAccount/UserProfileSocialAccount.js
var import_qrcode256 = __toESM(require_browser(), 1);
var UserProfileSocialAccount = ({ provider }) => {
  var _a;
  const { user, primaryWallet } = useInternalDynamicContext();
  const { linkSocialAccount, unlinkSocialAccount, isProcessing, isLinked, getLinkedAccountInformation } = useSocialAccounts();
  const isProviderLinked = isLinked(provider);
  const connectedAccountInfo = getLinkedAccountInformation(provider);
  const iconThemeVariant = useIconThemeVariant();
  const isActiveCredential = !primaryWallet && connectedAccountInfo && (connectedAccountInfo === null || connectedAccountInfo === void 0 ? void 0 : connectedAccountInfo.id) === (user === null || user === void 0 ? void 0 : user.lastVerifiedCredentialId);
  const renderButton = () => (0, import_jsx_runtime430.jsx)(TypographyButton, { buttonClassName: "user-profile-social-account__button", buttonVariant: "secondary", buttonPadding: "none", onClick: () => isProviderLinked ? unlinkSocialAccount(provider) : linkSocialAccount(provider), loading: isProcessing, dataTestId: `social-account-${isProviderLinked ? "disconnect" : "connect"}-button`, typographyProps: {
    color: "secondary",
    variant: "button_tertiary"
  }, startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime430.jsx)(Icon, { color: "text-tertiary", size: "small", children: isProviderLinked ? (0, import_jsx_runtime430.jsx)(SvgUnlink, {}) : (0, import_jsx_runtime430.jsx)(SvgAdd, {}) })
  ), children: isProviderLinked ? null : "Connect" });
  return (0, import_jsx_runtime430.jsxs)("div", { className: "user-profile-social-account", "data-testid": `social-account-${provider}`, children: [(0, import_jsx_runtime430.jsx)("div", { className: "user-profile-social-account__icon", children: isProviderLinked ? (0, import_jsx_runtime430.jsx)(ConnectedAccountAvatar, { provider, avatarUrl: connectedAccountInfo === null || connectedAccountInfo === void 0 ? void 0 : connectedAccountInfo.avatar }) : (0, import_jsx_runtime430.jsx)(SocialIcon, { name: provider, variant: iconThemeVariant }) }), (0, import_jsx_runtime430.jsx)(Typography, { weight: "medium", variant: "body_normal", color: "primary", truncate: true, className: "user-profile-social-account__label", children: (_a = connectedAccountInfo === null || connectedAccountInfo === void 0 ? void 0 : connectedAccountInfo.publicIdentifier) !== null && _a !== void 0 ? _a : providerLabel(getSocialSignInProviderForProviderEnum(provider)) }), !isActiveCredential ? renderButton() : null] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/parts/EditProfileButton/EditProfileButton.js
var import_jsx_runtime431 = __toESM(require_jsx_runtime(), 1);
var import_react463 = __toESM(require_react(), 1);
var import_react_dom261 = __toESM(require_react_dom(), 1);
var import_qrcode257 = __toESM(require_browser(), 1);
var EditProfileButton = () => {
  var _a, _b;
  const { t: t2 } = useTranslation();
  const { projectSettings } = useInternalDynamicContext();
  const { setDynamicWidgetView } = useWidgetContext();
  const editableUserFields = getEditableUserProfileFields([
    ...(_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.kyc) !== null && _a !== void 0 ? _a : [],
    ...(_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.customFields) !== null && _b !== void 0 ? _b : []
  ]);
  if (!(editableUserFields === null || editableUserFields === void 0 ? void 0 : editableUserFields.length))
    return null;
  return (0, import_jsx_runtime431.jsx)(TypographyButton, { buttonClassName: "dynamic-widget-footer__button", buttonVariant: "tertiary", buttonPadding: "none", typographyProps: {
    color: "secondary",
    variant: "button_tertiary"
  }, copykey: "dyn_user_profile.edit_profile_button", onClick: () => setDynamicWidgetView("edit-profile"), startSlot: (0, import_jsx_runtime431.jsx)(SvgPencil, {}), children: t2("dyn_user_profile.edit_profile_button") });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDynamicModals/useDynamicModals.js
var import_react465 = __toESM(require_react(), 1);
var import_jsx_runtime433 = __toESM(require_jsx_runtime(), 1);
var import_react_dom263 = __toESM(require_react_dom(), 1);
var import_qrcode259 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useMfaModals/useMfaModals.js
var import_react464 = __toESM(require_react(), 1);
var import_jsx_runtime432 = __toESM(require_jsx_runtime(), 1);
var import_react_dom262 = __toESM(require_react_dom(), 1);
var import_qrcode258 = __toESM(require_browser(), 1);
var useMfaModals = () => {
  var _a;
  const { setShowAuthFlow, projectSettings } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const isMfaEnabled = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.mfa) === null || _a === void 0 ? void 0 : _a.enabled;
  const setShowMfaChooseType = (0, import_react464.useCallback)((value) => {
    if (value) {
      if (!isMfaEnabled)
        return;
      setView("mfa-choose-device");
    }
    setShowAuthFlow(value, { emitCancelAuth: true });
  }, [isMfaEnabled, setShowAuthFlow, setView]);
  const setShowMfaQRCode = (0, import_react464.useCallback)((value) => {
    if (value) {
      if (!isMfaEnabled)
        return;
      setView("mfa-secure-device", { isInitialSetup: true });
    }
    setShowAuthFlow(value, { emitCancelAuth: true });
  }, [isMfaEnabled, setShowAuthFlow, setView]);
  const setShowOTPVerification = (0, import_react464.useCallback)((value) => {
    if (value) {
      if (!isMfaEnabled)
        return;
      setView("mfa-verification");
    }
    setShowAuthFlow(value, { emitCancelAuth: true });
  }, [isMfaEnabled, setShowAuthFlow, setView]);
  const setShowMfaViewBackupCodes = (0, import_react464.useCallback)((value) => {
    if (value) {
      if (!isMfaEnabled)
        return;
      setView("mfa-display-backup-codes");
    }
    setShowAuthFlow(value, { emitCancelAuth: true });
  }, [isMfaEnabled, setShowAuthFlow, setView]);
  const setShowMfaEnterBackupCodes = (0, import_react464.useCallback)((value) => {
    if (value) {
      if (!isMfaEnabled)
        return;
      setView("mfa-recovery");
    }
    setShowAuthFlow(value, { emitCancelAuth: true });
  }, [isMfaEnabled, setShowAuthFlow, setView]);
  return {
    setShowMfaChooseType,
    setShowMfaEnterBackupCodes,
    setShowMfaQRCode,
    setShowMfaViewBackupCodes,
    setShowOTPVerification
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useDynamicModals/useDynamicModals.js
var useDynamicModals = () => {
  const { projectSettings, user, multiWallet, setShowAuthFlow } = useInternalDynamicContext();
  const isLoggedIn = useIsLoggedIn();
  const { setView } = useViewContext();
  const canLink = isAllowedToLinkWallet(projectSettings, user === null || user === void 0 ? void 0 : user.verifiedCredentials, multiWallet);
  const { setShowMfaChooseType, setShowMfaEnterBackupCodes, setShowMfaQRCode, setShowMfaViewBackupCodes, setShowOTPVerification } = useMfaModals();
  const setSetShowLinkNewWalletModalWithInit = (0, import_react465.useCallback)((value) => {
    if (value) {
      if (!isLoggedIn) {
        logger2.warn("setShowLinkNewWalletModal was called while the user was not logged in. This results in a no-op. To log the user in, use setShowAuthFlow. For more information, see: https://docs.dynamic.xyz/react-sdk/hooks/usedynamiccontext");
        return;
      }
      if (!canLink) {
        logger2.warn("setShowLinkNewWalletModal was called but the user is not allowed to link a wallet. This results in a no-op. Please double check that multi-wallet is enabled in the dashboard. For more information, see: https://docs.dynamic.xyz/branded-wallets/multi-wallet");
        return;
      }
      setView("multi-wallet-wallet-list");
    }
    setShowAuthFlow(value, {
      emitCancelAuth: true,
      ignoreIfIsEmbeddedWidget: true,
      initializeWalletConnect: true,
      performMultiWalletChecks: false
    });
  }, [canLink, isLoggedIn, setShowAuthFlow, setView]);
  return {
    setShowLinkNewWalletModal: setSetShowLinkNewWalletModalWithInit,
    setShowMfaChooseType,
    setShowMfaEnterBackupCodes,
    setShowMfaQRCode,
    setShowMfaViewBackupCodes,
    setShowOTPVerification
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/UserProfile/UserProfile.js
var import_qrcode260 = __toESM(require_browser(), 1);
var UserProfile = ({ rootClassName }) => {
  var _a;
  const { projectSettings, user, setSelectedWalletConnectorKey, multiWallet, primaryWallet } = useInternalDynamicContext();
  const { error } = useErrorContext();
  const { setShowLinkNewWalletModal } = useDynamicModals();
  const { userWallets } = useInternalUserWallets();
  const { t: t2 } = useTranslation();
  const { fieldsConfig } = useFields();
  const containerRef = (0, import_react466.useRef)(null);
  (0, import_react466.useEffect)(() => {
    if (error && containerRef.current) {
      containerRef.current.scrollTop = 0;
    }
  }, [error]);
  const allUserFields = getUserProfileFields({
    customFields: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.customFields,
    projectSettingsKyc: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.kyc,
    user
  });
  const providers = isSocialKycEnabled(projectSettings) ? getEnabledOAuthProviders(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) : [];
  const canLink = isAllowedToLinkWallet(projectSettings, user === null || user === void 0 ? void 0 : user.verifiedCredentials, multiWallet);
  const addNewWallet = () => {
    setShowLinkNewWalletModal(true);
    setSelectedWalletConnectorKey(null);
  };
  const mapFieldKeyToValue = (fieldKey) => user === null || user === void 0 ? void 0 : user[fieldKey];
  if (!user)
    return null;
  const wallet = !multiWallet && !primaryWallet && userWallets[0];
  return (0, import_jsx_runtime434.jsxs)("div", { "data-testid": "userProfile", className: classNames("user-profile", rootClassName), ref: containerRef, children: [error && (0, import_jsx_runtime434.jsx)(ErrorContainer, { children: error }), wallet && (0, import_jsx_runtime434.jsx)(UserProfileSection, { title: t2("dyn_user_profile.my_wallet.title"), children: (0, import_jsx_runtime434.jsx)(Wallet, { ens: (_a = getWalletVerifiedCredential(wallet.address, user === null || user === void 0 ? void 0 : user.verifiedCredentials, wallet.chain)) === null || _a === void 0 ? void 0 : _a.nameService, wallet }, wallet.id) }), (allUserFields === null || allUserFields === void 0 ? void 0 : allUserFields.length) > 0 && (0, import_jsx_runtime434.jsx)(UserProfileSection, { title: t2("dyn_user_profile.my_information.title"), action: (0, import_jsx_runtime434.jsx)(EditProfileButton, {}), children: (0, import_jsx_runtime434.jsx)("div", { className: "user-profile__fields", children: allUserFields.map(({ name, validationType, type, label }) => {
    var _a2, _b;
    if (type === KycFieldType.Custom) {
      const value2 = (_b = (_a2 = user.metadata) === null || _a2 === void 0 ? void 0 : _a2[name]) !== null && _b !== void 0 ? _b : "";
      let fieldValue = value2;
      if (validationType === CustomFieldType.Checkbox)
        fieldValue = value2.length > 0 ? "Checked" : "Unchecked";
      return (0, import_jsx_runtime434.jsx)(UserProfileField, { name, label: name, value: fieldValue }, name);
    }
    const { label: defaultLabel, key } = getValueByKey(fieldsConfig, name);
    label !== null && label !== void 0 ? label : label = defaultLabel;
    const value = mapFieldKeyToValue(name);
    return (0, import_jsx_runtime434.jsx)(UserProfileField, { copykey: key, name, label, value }, name);
  }) }) }), canLink && !multiWallet && (0, import_jsx_runtime434.jsx)(UserProfileSection, { title: t2("dyn_user_profile.wallets.title"), children: (0, import_jsx_runtime434.jsx)(TypographyButton, { dataTestId: "link-wallet-button", onClick: addNewWallet, startSlot: (0, import_jsx_runtime434.jsx)(SvgAdd, {}), showInternalLoading: false, children: (0, import_jsx_runtime434.jsx)(Typography, { color: "primary", weight: "medium", copykey: "dyn_user_profile.wallets.link_wallet_button", children: t2("dyn_user_profile.wallets.link_wallet_button") }) }) }), (providers === null || providers === void 0 ? void 0 : providers.length) > 0 && (0, import_jsx_runtime434.jsx)(UserProfileSection, { title: t2("dyn_user_profile.social_accounts.title"), children: (0, import_jsx_runtime434.jsx)("div", { className: "user-profile__social-accounts", children: providers.map(({ provider }) => (0, import_jsx_runtime434.jsx)(UserProfileSocialAccount, { provider }, provider)) }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/views/ProfileView/ProfileView.js
var import_react468 = __toESM(require_react(), 1);
var import_react_dom266 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/LogoutButton/LogoutButton.js
var import_jsx_runtime435 = __toESM(require_jsx_runtime(), 1);
var import_react467 = __toESM(require_react(), 1);
var import_react_dom265 = __toESM(require_react_dom(), 1);
var import_qrcode261 = __toESM(require_browser(), 1);
var LogoutButton = ({ buttonClassName = "", isTextButton = false }) => {
  const [loading, setLoading] = (0, import_react467.useState)(false);
  const { handleLogOut } = useInternalDynamicContext();
  const onLogOutClick = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
      setLoading(true);
      yield handleLogOut();
    } catch (e2) {
      logger2.error(e2);
    } finally {
      setLoading(false);
    }
  });
  return (0, import_jsx_runtime435.jsx)(TypographyButton, { buttonClassName, buttonVariant: "tertiary", buttonPadding: isTextButton ? "none" : "medium", loading, disabled: loading, onClick: onLogOutClick, typographyProps: isTextButton ? { color: "secondary", variant: "button_tertiary" } : { color: "primary", variant: "button_secondary" }, dataTestId: "logout-button", startSlot: isTextButton ? (0, import_jsx_runtime435.jsx)(SvgLogout, {}) : void 0, expanded: !isTextButton, type: "button", children: "Log out" });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/views/ProfileView/ProfileView.js
var import_qrcode262 = __toESM(require_browser(), 1);
var ProfileView = () => {
  var _a, _b;
  const { t: t2 } = useTranslation();
  const { setBridgeWidgetView } = useDynamicBridgeWidgetContext();
  const { projectSettings } = useInternalDynamicContext();
  const editableUserFields = getEditableUserProfileFields([
    ...(_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.kyc) !== null && _a !== void 0 ? _a : [],
    ...(_b = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.customFields) !== null && _b !== void 0 ? _b : []
  ]);
  return (0, import_jsx_runtime436.jsxs)(import_jsx_runtime436.Fragment, { children: [(0, import_jsx_runtime436.jsx)(UserProfile, { rootClassName: "profile-view" }), (0, import_jsx_runtime436.jsx)(DynamicWidgetFooter, { children: (0, import_jsx_runtime436.jsxs)("div", { className: "profile-view__footer", children: [editableUserFields.length > 0 && (0, import_jsx_runtime436.jsx)(TypographyButton, { buttonClassName: "dynamic-widget-footer__button", buttonVariant: "tertiary", buttonPadding: "none", typographyProps: {
    color: "secondary",
    variant: "button_tertiary"
  }, onClick: () => setBridgeWidgetView("edit-profile"), startSlot: (0, import_jsx_runtime436.jsx)(SvgPencil, {}), copykey: "dyn_bridge.widget.edit_profile", children: t2("dyn_bridge.widget.edit_profile") }), (0, import_jsx_runtime436.jsx)(LogoutButton, { isTextButton: true, buttonClassName: classNames("dynamic-widget-footer__button", {
    "dynamic-widget-footer__button-align-right": !(editableUserFields === null || editableUserFields === void 0 ? void 0 : editableUserFields.length)
  }) })] }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/views/WalletsView/WalletsView.js
var import_jsx_runtime437 = __toESM(require_jsx_runtime(), 1);
var import_react469 = __toESM(require_react(), 1);
var import_react_dom267 = __toESM(require_react_dom(), 1);
var import_qrcode263 = __toESM(require_browser(), 1);
var WalletsView = () => {
  const { disconnectWallet, bridgeChains, connectedWallets } = useInternalDynamicContext();
  return (0, import_jsx_runtime437.jsxs)(import_jsx_runtime437.Fragment, { children: [(0, import_jsx_runtime437.jsx)("div", { className: "dynamic-bridge-widget-wallets-view", "data-testid": "dynamic-bridge-wget-wallets-view", children: bridgeChains === null || bridgeChains === void 0 ? void 0 : bridgeChains.map(({ chain }) => {
    const chainWallets = connectedWallets.filter(({ chain: walletChain }) => chain === walletChain);
    if (!chainWallets.length)
      return (0, import_jsx_runtime437.jsx)(DynamicBridgeWidgetEmptyCard, { chain }, chain);
    const WalletIcon2 = getChainIcon(chain);
    const walletInfo = getChainInfoWithOverrides(chain);
    return chainWallets.map((wallet) => {
      const { connector, address, id } = wallet;
      return (0, import_jsx_runtime437.jsx)(DynamicBridgeWalletCard, { networkIcon: (0, import_jsx_runtime437.jsx)(WalletIcon2, {}), networkName: walletInfo === null || walletInfo === void 0 ? void 0 : walletInfo.displayName, children: (0, import_jsx_runtime437.jsx)(DynamicBridgeWalletCardBody, { walletKey: connector.key, walletAddress: address, walletBalance: (0, import_jsx_runtime437.jsx)(Balance, { wallet, network: chain }), onDisconnectClick: () => disconnectWallet(id) }) }, `${id}-${connector.name}`);
    });
  }) }), (0, import_jsx_runtime437.jsx)(DynamicWidgetFooter, { children: (0, import_jsx_runtime437.jsx)(LogoutButton, { buttonClassName: "dynamic-bridge-widget-wallets-view__logout-button", isTextButton: true }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeWidgetViews/DynamicBridgeWidgetViews.js
var mapViewToComponent = {
  "edit-profile": EditProfileView,
  profile: ProfileView,
  wallets: WalletsView
};
var DynamicBridgeWidgetViews = () => {
  const { bridgeWidgetView } = useDynamicBridgeWidgetContext();
  const View = mapViewToComponent[bridgeWidgetView] || mapViewToComponent.wallets;
  return (0, import_jsx_runtime438.jsx)(View, {});
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeUserProfile/DynamicBridgeUserProfile.js
var import_react471 = __toESM(require_react(), 1);
var import_react_dom268 = __toESM(require_react_dom(), 1);
var import_qrcode264 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/OptionsSwitcher/OptionsSwitcher.js
var import_jsx_runtime439 = __toESM(require_jsx_runtime(), 1);
var import_react470 = __toESM(require_react(), 1);
var OptionsSwitcher = ({ onChange, value, options: options2, rootClassName, activeButtonClassName, buttonClassName }) => {
  const isActive = (_value) => _value !== void 0 && _value === value;
  const rootRef = (0, import_react470.useRef)(null);
  const [railCSSLeft, setRailCSSLeft] = (0, import_react470.useState)(0);
  const getOptionDisplayValue = (option) => option.label || option.key;
  (0, import_react470.useLayoutEffect)(() => {
    if (!rootRef.current)
      return;
    const activeOption = options2 === null || options2 === void 0 ? void 0 : options2.find(({ key }) => key === value);
    if (!activeOption)
      return;
    const activeOptionLabel = getOptionDisplayValue(activeOption);
    const $activeOption = rootRef.current.querySelector(`[data-options-switcher-label=${activeOptionLabel}]`);
    if (!$activeOption)
      return;
    const parentBouding = rootRef.current.getBoundingClientRect();
    const activeOptionBouding = $activeOption.getBoundingClientRect();
    setRailCSSLeft(activeOptionBouding.x - parentBouding.x);
  }, [options2, value]);
  return (0, import_jsx_runtime439.jsxs)("div", { ref: rootRef, "data-testid": "OptionsSwitcher", className: classNames("options-switcher", rootClassName), children: [(0, import_jsx_runtime439.jsx)("div", { className: "options-switcher__active-rail", style: { left: railCSSLeft, width: `${100 / ((options2 === null || options2 === void 0 ? void 0 : options2.length) || 1)}%` } }), options2 === null || options2 === void 0 ? void 0 : options2.map((option) => (0, import_jsx_runtime439.jsx)("button", { type: "button", className: classNames("options-switcher__button", buttonClassName, {
    "options-switcher__button--active": isActive(option.key)
  }, isActive(option.key) && activeButtonClassName), onClick: () => onChange === null || onChange === void 0 ? void 0 : onChange(option.key), "data-options-switcher-label": getOptionDisplayValue(option), children: getOptionDisplayValue(option) }, option.key))] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/components/DynamicBridgeUserProfile/DynamicBridgeUserProfile.js
var options = [
  {
    key: "profile",
    label: "Profile"
  },
  {
    key: "wallets",
    label: "Wallets"
  }
];
var DynamicBridgeUserProfile = ({ variant: rawVariant }) => {
  const { widgetRef, events, bridgeWidgetView, setBridgeWidgetView } = useDynamicBridgeWidgetContext();
  const { setShowBridgeWidget, showBridgeWidget } = useInternalDynamicContext();
  const { onDynamicBridgeWidgetClose } = events;
  const variant = isMobile() ? "modal" : rawVariant;
  const DynamicBridgeViewSwitcher = OptionsSwitcher;
  const isKYCEnabled = useKYCFlag();
  return (0, import_jsx_runtime440.jsx)(DynamicWidgetVariants, { transitionEvents: {
    onUnmount: onDynamicBridgeWidgetClose
  }, isOpen: showBridgeWidget, setIsOpen: setShowBridgeWidget, variant, zIndex: widgetModalZIndex, children: (0, import_jsx_runtime440.jsxs)(DynamicWidgetCard, { ref: widgetRef, children: [isKYCEnabled && (0, import_jsx_runtime440.jsx)("div", { className: "dynamic-bridge-user-profile__switcher", children: (0, import_jsx_runtime440.jsx)(DynamicBridgeViewSwitcher, { options, value: bridgeWidgetView, onChange: (view) => setBridgeWidgetView(view) }) }), (0, import_jsx_runtime440.jsx)(DynamicBridgeWidgetViews, {})] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/InlineWidget/components/InlineWidgetButton/InlineWidgetButton.js
var import_jsx_runtime441 = __toESM(require_jsx_runtime(), 1);
var InlineWidgetButton = ({ onClick, children, icon, className }) => (0, import_jsx_runtime441.jsxs)("button", { className: classNames("inline-widget-button", className), onClick, children: [icon && (0, import_jsx_runtime441.jsxs)(import_jsx_runtime441.Fragment, { children: [(0, import_jsx_runtime441.jsx)(Icon, { className: "inline-widget-button__icon", children: icon }), (0, import_jsx_runtime441.jsx)("div", { className: "inline-widget-button__vertical-divider" })] }), (0, import_jsx_runtime441.jsx)(Typography, { variant: "body_small", color: "primary", weight: "medium", children })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicBridgeWidget/DynamicBridgeWidget.js
var import_qrcode265 = __toESM(require_browser(), 1);
var DynamicBridgeWidget = ({ className, variant = "modal" }) => {
  const { showAuthFlow, setShowBridgeWidget, bridgeChains, setShowAuthFlow, connectedWallets } = useInternalDynamicContext();
  const { widgetRef, inlineControlsRef } = useDynamicBridgeWidgetContext();
  const { t: t2 } = useTranslation();
  const closeOnOutsideClick = (0, import_react472.useCallback)((e2) => {
    var _a;
    const target = e2.composedPath().shift();
    if ((_a = inlineControlsRef.current) === null || _a === void 0 ? void 0 : _a.contains(target))
      return;
    if (variant === "dropdown" && !showAuthFlow) {
      setShowBridgeWidget(false);
    }
  }, [inlineControlsRef, variant, showAuthFlow, setShowBridgeWidget]);
  useOnClickOutside(widgetRef, closeOnOutsideClick);
  return (0, import_jsx_runtime442.jsxs)(ShadowDOM, { id: "dynamic-bridge-widget", className: "dynamic-widget__container", children: [(0, import_jsx_runtime442.jsx)(InlineWidget, { ref: inlineControlsRef, className, dataTestId: "BridgeWidgetNav", children: bridgeChains === null || bridgeChains === void 0 ? void 0 : bridgeChains.map(({ chain }) => {
    const ChainIcon2 = getChainIcon(chain);
    const connectedChainWallets = connectedWallets.filter(({ chain: connectedChain }) => connectedChain === chain);
    if (connectedChainWallets.length > 0) {
      return connectedChainWallets.map((wallet) => (0, import_jsx_runtime442.jsx)(InlineWidgetButton, { icon: (0, import_jsx_runtime442.jsx)(ChainIcon2, {}), onClick: () => setShowBridgeWidget(true), children: shortenWalletAddress(wallet.address, 3, 3) }, wallet.id));
    }
    return (0, import_jsx_runtime442.jsx)(InlineWidgetButton, { icon: (0, import_jsx_runtime442.jsx)(ChainIcon2, {}), onClick: () => setShowAuthFlow(true), copykey: "dyn_bridge.widget.connect", children: t2("dyn_bridge.widget.connect") }, chain);
  }) }), (0, import_jsx_runtime442.jsx)(DynamicBridgeUserProfile, { variant })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedAuthFlow/DynamicEmbeddedAuthFlow.js
var import_jsx_runtime443 = __toESM(require_jsx_runtime(), 1);
var import_react473 = __toESM(require_react(), 1);
var import_react_dom270 = __toESM(require_react_dom(), 1);
var import_qrcode266 = __toESM(require_browser(), 1);
var DynamicEmbeddedAuthFlow = ({ background = "none", className, style }) => {
  const hide = useIsLoggedIn();
  const { projectSettings, isRenderingEmbeddedAuthFlow, walletConnectorOptions } = useInternalDynamicContext();
  (0, import_react473.useEffect)(() => {
    var _a;
    (_a = walletConnectorOptions.find((wallet) => wallet.walletConnector.key === "walletconnect")) === null || _a === void 0 ? void 0 : _a.walletConnector.init();
  }, [walletConnectorOptions]);
  const { goToInitialView: resetAuthView } = useViewContext();
  (0, import_react473.useEffect)(() => {
    dynamicEvents.addListener("logout", resetAuthView);
    return () => {
      dynamicEvents.removeListener("logout", resetAuthView);
    };
  }, [resetAuthView]);
  isRenderingEmbeddedAuthFlow.current = !hide;
  (0, import_react473.useEffect)(() => () => {
    isRenderingEmbeddedAuthFlow.current = false;
  }, [isRenderingEmbeddedAuthFlow]);
  if (hide)
    return null;
  const content = (0, import_jsx_runtime443.jsx)(DynamicAuthLayout, { className, style, projectSettings, children: (0, import_jsx_runtime443.jsx)(RenderView, {}) });
  return (0, import_jsx_runtime443.jsx)(ShadowDOM, { className: "embedded-widget", children: (0, import_jsx_runtime443.jsx)(PopperProvider, { children: (0, import_jsx_runtime443.jsx)(FooterAnimationContextProvider, { children: (0, import_jsx_runtime443.jsx)(SandboxIndicatorWrapper, { children: background === "none" ? content : (0, import_jsx_runtime443.jsx)(ModalCard, { border: background === "with-border", sharpBottomRadiusOnMobile: false, children: content }) }) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedUserProfile/DynamicEmbeddedUserProfile.js
var import_jsx_runtime479 = __toESM(require_jsx_runtime(), 1);
var import_react504 = __toESM(require_react(), 1);
var import_react_dom299 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicUserProfileLayout/DynamicUserProfileLayout.js
var import_jsx_runtime478 = __toESM(require_jsx_runtime(), 1);
var import_react503 = __toESM(require_react(), 1);
var import_react_dom298 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/profile-outline.js
var React95 = __toESM(require_react(), 1);
var _path76;
var _excluded81 = ["title", "titleId"];
function _extends88() {
  _extends88 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends88.apply(this, arguments);
}
function _objectWithoutProperties81(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose84(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose84(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgProfileOutline = function SvgProfileOutline2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties81(_ref2, _excluded81);
  return React95.createElement("svg", _extends88({
    width: 25,
    height: 24,
    viewBox: "0 0 25 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React95.createElement("title", {
    id: titleId
  }, title2) : null, _path76 || (_path76 = React95.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12.5 4a8 8 0 0 0-6.598 12.526A14.943 14.943 0 0 1 12.5 15c2.366 0 4.606.548 6.598 1.526A8 8 0 0 0 12.5 4Zm7.654 14.436A9.96 9.96 0 0 0 22.5 12c0-5.523-4.477-10-10-10s-10 4.477-10 10a9.96 9.96 0 0 0 2.37 6.464A9.978 9.978 0 0 0 12.5 22a9.978 9.978 0 0 0 7.654-3.564ZM17.7 18.08A12.954 12.954 0 0 0 12.5 17c-1.85 0-3.607.386-5.199 1.08A7.968 7.968 0 0 0 12.5 20c1.985 0 3.8-.723 5.199-1.92ZM12.5 8a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-4 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/wallet-outline-v2.js
var React96 = __toESM(require_react(), 1);
var _path77;
var _excluded82 = ["title", "titleId"];
function _extends89() {
  _extends89 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends89.apply(this, arguments);
}
function _objectWithoutProperties82(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose85(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose85(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgWalletOutlineV2 = function SvgWalletOutlineV22(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties82(_ref2, _excluded82);
  return React96.createElement("svg", _extends89({
    width: 25,
    height: 24,
    viewBox: "0 0 25 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React96.createElement("title", {
    id: titleId
  }, title2) : null, _path77 || (_path77 = React96.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M15.5 2a2 2 0 0 1 2 2h-12a3.99 3.99 0 0 0-2.935 1.283A4.005 4.005 0 0 1 6.5 2h9ZM6.5 6A4 4 0 0 0 2.5 10v8a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4v-8a4 4 0 0 0-4-4H6.5ZM20.5 10a2 2 0 0 0-2-2h-12a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/settings-outline.js
var React97 = __toESM(require_react(), 1);
var _path78;
var _excluded83 = ["title", "titleId"];
function _extends90() {
  _extends90 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends90.apply(this, arguments);
}
function _objectWithoutProperties83(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose86(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose86(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgSettingsOutline = function SvgSettingsOutline2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties83(_ref2, _excluded83);
  return React97.createElement("svg", _extends90({
    width: 25,
    height: 24,
    viewBox: "0 0 25 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React97.createElement("title", {
    id: titleId
  }, title2) : null, _path78 || (_path78 = React97.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9.853 4.081c.674-2.775 4.62-2.775 5.294 0a.724.724 0 0 0 1.08.448c2.44-1.486 5.23 1.305 3.744 3.744a.724.724 0 0 0 .448 1.08c2.775.674 2.775 4.62 0 5.294a.724.724 0 0 0-.448 1.08c1.486 2.44-1.305 5.23-3.744 3.744a.724.724 0 0 0-1.08.448c-.674 2.775-4.62 2.775-5.294 0a.724.724 0 0 0-1.08-.448c-2.44 1.486-5.23-1.305-3.744-3.744a.724.724 0 0 0-.448-1.08c-2.775-.674-2.775-4.62 0-5.294a.724.724 0 0 0 .448-1.08c-1.486-2.44 1.305-5.23 3.744-3.744a.724.724 0 0 0 1.08-.448Zm3.35.472c-.178-.737-1.227-.737-1.407 0a2.724 2.724 0 0 1-4.064 1.684c-.648-.395-1.39.347-.995.995.96 1.575.109 3.63-1.684 4.064-.737.18-.737 1.229 0 1.408a2.724 2.724 0 0 1 1.684 4.064c-.395.648.347 1.39.995.995a2.724 2.724 0 0 1 4.064 1.684c.18.737 1.229.737 1.408 0a2.724 2.724 0 0 1 4.064-1.684c.648.395 1.39-.347.995-.995a2.724 2.724 0 0 1 1.684-4.064c.737-.18.737-1.229 0-1.408a2.724 2.724 0 0 1-1.684-4.064c.395-.648-.347-1.39-.995-.995-1.575.96-3.63.109-4.064-1.684ZM12.5 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-4 2a4 4 0 1 1 8 0 4 4 0 0 1-8 0Z",
    fill: "currentColor"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicUserProfileLayout/DynamicUserProfileLayout.js
var import_qrcode293 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetPrompts/DynamicWidgetPrompts.js
var import_jsx_runtime461 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/DetectedNewWalletModal/DetectedNewWalletModal.js
var import_jsx_runtime446 = __toESM(require_jsx_runtime(), 1);
var import_react476 = __toESM(require_react(), 1);
var import_react_dom273 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/PromptModal/PromptModal.js
var import_jsx_runtime444 = __toESM(require_jsx_runtime(), 1);
var import_react474 = __toESM(require_react(), 1);
var import_react_dom271 = __toESM(require_react_dom(), 1);
var import_qrcode267 = __toESM(require_browser(), 1);
var PromptModal = ({ children, isShown = true, onClose }) => {
  const elementId = "dynamic-multi-wallet-prompt-modal";
  const { createRootElement } = useElementById();
  createRootElement(elementId);
  return (0, import_jsx_runtime444.jsx)(Portal, { handleClose: (e2) => onClose === null || onClose === void 0 ? void 0 : onClose(e2), isShown, zIndex: authModalZIndex, withBackdrop: true, elementId, children: (0, import_jsx_runtime444.jsx)(Modal, { children: (0, import_jsx_runtime444.jsxs)(ModalCard, { children: [onClose && (0, import_jsx_runtime444.jsx)("div", { className: "prompt-modal__header", children: (0, import_jsx_runtime444.jsx)(IconButton, { className: "prompt-modal__close-button", onClick: (e2) => onClose(e2), type: "button", "data-testid": "close-button", children: (0, import_jsx_runtime444.jsx)(SvgClose, {}) }) }), (0, import_jsx_runtime444.jsx)("div", { className: "prompt-modal", children })] }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/hooks/useCloseMultiWalletPrompt/useCloseMultiWalletPrompt.js
var import_react475 = __toESM(require_react(), 1);
var import_jsx_runtime445 = __toESM(require_jsx_runtime(), 1);
var import_react_dom272 = __toESM(require_react_dom(), 1);
var import_qrcode268 = __toESM(require_browser(), 1);
var useCloseMultiWalletPrompt = () => {
  const { setMultiWalletWidgetState, setSelectedWalletWithAction, setShowQrcodeModal, setDesktopUri, setSelectedWalletConnectorKey } = useInternalDynamicContext();
  return (e2) => {
    e2.stopPropagation();
    setSelectedWalletWithAction(null);
    setMultiWalletWidgetState("idle");
    setShowQrcodeModal(false);
    setDesktopUri("");
    setSelectedWalletConnectorKey(null);
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/DetectedNewWalletModal/DetectedNewWalletModal.js
var import_qrcode269 = __toESM(require_browser(), 1);
var DetectedNewWalletContent = () => {
  const { t: t2 } = useTranslation();
  const { setMultiWalletWidgetState, primaryWallet } = useInternalDynamicContext();
  const handleClick = () => {
    setMultiWalletWidgetState("awaiting_signature", void 0, "linking_new_wallet");
  };
  const walletConnector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
  return (0, import_jsx_runtime446.jsx)(DefaultPromptLayout, { dataTestId: "detected-new-wallet-modal", icon: (0, import_jsx_runtime446.jsx)(WalletIcon, { walletKey: walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key }), title: t2("dyn_detected_new_wallet.title"), children: (0, import_jsx_runtime446.jsxs)("div", { className: "detected-new-wallet-modal__top-section", children: [(0, import_jsx_runtime446.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", "data-testid": "content", children: t2("dyn_detected_new_wallet.description", {
    walletName: walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.name
  }) }), walletConnector && isHardwareWalletConnector(walletConnector) && walletConnector.canConnectWithHardwareWallet() && (0, import_jsx_runtime446.jsx)(HardwareWalletToggle, { connectors: [walletConnector], copykey: "dyn_select_chain.using_hardware_wallet_toggle_label", label: t2("dyn_select_chain.using_hardware_wallet_toggle_label") }), (0, import_jsx_runtime446.jsx)(TypographyButton, { expanded: true, onClick: handleClick, typographyProps: {
    variant: "button_secondary"
  }, children: t2("dyn_detected_new_wallet.confirm_button") })] }) });
};
var DetectedNewWalletWidgetPortal = () => (0, import_jsx_runtime446.jsx)(WidgetPortal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime446.jsx)(DetectedNewWalletContent, {}) });
var DetectedNewWalletModal = () => (0, import_jsx_runtime446.jsx)(PromptModal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime446.jsx)(DetectedNewWalletContent, {}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingAccountSwitchModal/PendingAccountSwitchModal.js
var import_jsx_runtime449 = __toESM(require_jsx_runtime(), 1);
var import_react479 = __toESM(require_react(), 1);
var import_react_dom276 = __toESM(require_react_dom(), 1);
var import_qrcode272 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useConnectedAccountWallet/useConnectedAccountWallet.js
var useConnectedAccountWallet = (connector, secondaryWallets) => usePromise(() => {
  if (!connector) {
    return;
  }
  return connector.getConnectedAccounts().then((connectedAccounts) => secondaryWallets.find((secondaryWallet) => {
    var _a;
    return secondaryWallet.address.toLowerCase() === ((_a = connectedAccounts[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase());
  }));
}, { deps: [connector, secondaryWallets] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingAccountSwitchModal/SwitchAccountView/SwitchAccountView.js
var import_jsx_runtime447 = __toESM(require_jsx_runtime(), 1);
var import_react477 = __toESM(require_react(), 1);
var import_react_dom274 = __toESM(require_react_dom(), 1);
var import_qrcode270 = __toESM(require_browser(), 1);
var SwitchAccountView = ({ selectedWalletToSwitchTo }) => (0, import_jsx_runtime447.jsxs)(import_jsx_runtime447.Fragment, { children: [(0, import_jsx_runtime447.jsxs)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", "data-testid": "content", children: ["Switch to wallet", " ", (0, import_jsx_runtime447.jsx)(Typography, { as: "span", weight: "medium", color: "primary", children: shortenWalletAddress(selectedWalletToSwitchTo === null || selectedWalletToSwitchTo === void 0 ? void 0 : selectedWalletToSwitchTo.address, 3, 3) }), " ", "in ", selectedWalletToSwitchTo === null || selectedWalletToSwitchTo === void 0 ? void 0 : selectedWalletToSwitchTo.connector.name, " to make it active."] }), (0, import_jsx_runtime447.jsx)(Divider, { fullWidth: true, text: "Or" }), (0, import_jsx_runtime447.jsx)(LogoutButton, { isTextButton: false, buttonClassName: "primary-not-connected__log-out-button" })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingAccountSwitchModal/SwitchOrUseActiveAccountView/SwitchOrUseActiveAccountView.js
var import_jsx_runtime448 = __toESM(require_jsx_runtime(), 1);
var import_react478 = __toESM(require_react(), 1);
var import_react_dom275 = __toESM(require_react_dom(), 1);
var import_qrcode271 = __toESM(require_browser(), 1);
var SwitchOrUseActiveAccountView = ({ connectedWallet, selectedWalletToSwitchTo }) => {
  const { setSelectedWalletWithAction, setSelectedWalletConnectorKey, setPrimaryWallet } = useInternalDynamicContext();
  const onUseActiveWalletClick = (0, import_react478.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (!connectedWallet) {
      return;
    }
    if (connectedWallet.connector.connectedChain === "FLOW") {
      (_b = (_a = connectedWallet.connector).endSession) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    setSelectedWalletWithAction({ action: "select", wallet: connectedWallet });
    setPrimaryWallet(connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.id);
    setSelectedWalletConnectorKey(connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.connector.key);
  }), [
    connectedWallet,
    setSelectedWalletWithAction,
    setPrimaryWallet,
    setSelectedWalletConnectorKey
  ]);
  return (0, import_jsx_runtime448.jsxs)(import_jsx_runtime448.Fragment, { children: [(0, import_jsx_runtime448.jsxs)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", "data-testid": "content", children: ["Wallet", " ", (0, import_jsx_runtime448.jsx)(Typography, { as: "span", weight: "medium", color: "primary", children: shortenWalletAddress(selectedWalletToSwitchTo === null || selectedWalletToSwitchTo === void 0 ? void 0 : selectedWalletToSwitchTo.address, 3, 3) }), " ", "is not active in ", selectedWalletToSwitchTo === null || selectedWalletToSwitchTo === void 0 ? void 0 : selectedWalletToSwitchTo.connector.name, ". To make active, open your ", selectedWalletToSwitchTo === null || selectedWalletToSwitchTo === void 0 ? void 0 : selectedWalletToSwitchTo.connector.name, " wallet and switch to this account."] }), (0, import_jsx_runtime448.jsx)(Divider, { fullWidth: true, text: "Or" }), (0, import_jsx_runtime448.jsx)(Typography, { variant: "body_normal", color: "primary", children: "Use your active wallet" }), (0, import_jsx_runtime448.jsxs)(TypographyButton, { buttonClassName: "default-prompt-modal__button", expanded: true, type: "button", buttonPadding: "medium", typographyProps: { variant: "button_secondary" }, onClick: onUseActiveWalletClick, dataTestId: "use-active-wallet-button", children: ["Select", " ", (0, import_jsx_runtime448.jsx)(Icon, { size: "xsmall", children: (0, import_jsx_runtime448.jsx)(WalletIcon, { walletKey: selectedWalletToSwitchTo === null || selectedWalletToSwitchTo === void 0 ? void 0 : selectedWalletToSwitchTo.connector.key }) }), " ", shortenWalletAddress(connectedWallet === null || connectedWallet === void 0 ? void 0 : connectedWallet.address, 3, 3)] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingAccountSwitchModal/PendingAccountSwitchModal.js
var PendingAccountSwitchContent = () => {
  var _a, _b, _c, _d;
  const { selectedWalletWithAction, primaryWallet, secondaryWallets } = useInternalDynamicContext();
  const selectedConnector = (_a = selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet) === null || _a === void 0 ? void 0 : _a.connector;
  const isSameWallet = (selectedConnector === null || selectedConnector === void 0 ? void 0 : selectedConnector.key) === (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.key);
  const { data: connectedWallet } = useConnectedAccountWallet((_b = selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet) === null || _b === void 0 ? void 0 : _b.connector, secondaryWallets);
  const selectedWalletToSwitchTo = (_d = (_c = selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet) !== null && _c !== void 0 ? _c : primaryWallet) !== null && _d !== void 0 ? _d : void 0;
  return (0, import_jsx_runtime449.jsx)(DefaultPromptLayout, { dataTestId: "pending-account-switch", icon: (0, import_jsx_runtime449.jsx)(WalletIcon, { walletKey: selectedConnector === null || selectedConnector === void 0 ? void 0 : selectedConnector.key }), title: `Switch wallet in ${selectedWalletToSwitchTo === null || selectedWalletToSwitchTo === void 0 ? void 0 : selectedWalletToSwitchTo.connector.name}`, children: isSameWallet || !connectedWallet ? (0, import_jsx_runtime449.jsx)(SwitchAccountView, { selectedWalletToSwitchTo }) : (0, import_jsx_runtime449.jsx)(SwitchOrUseActiveAccountView, { connectedWallet, selectedWalletToSwitchTo }) });
};
var PendingAccountSwitchWidgetPortal = () => (0, import_jsx_runtime449.jsx)(WidgetPortal, { children: (0, import_jsx_runtime449.jsx)(PendingAccountSwitchContent, {}) });
var PendingAccountSwitchModal = () => (0, import_jsx_runtime449.jsx)(PromptModal, { children: (0, import_jsx_runtime449.jsx)(PendingAccountSwitchContent, {}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingAccountSwitchToLinkModal/PendingAccountSwitchToLinkModal.js
var import_jsx_runtime450 = __toESM(require_jsx_runtime(), 1);
var import_react480 = __toESM(require_react(), 1);
var import_react_dom277 = __toESM(require_react_dom(), 1);
var import_qrcode273 = __toESM(require_browser(), 1);
var PendingAccountSwitchToLinkContent = () => {
  const { selectedWalletConnector } = useInternalDynamicContext();
  return (0, import_jsx_runtime450.jsx)(DefaultPromptLayout, { dataTestId: "pending-account-switch", icon: (0, import_jsx_runtime450.jsx)(WalletIcon, { walletKey: selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.key }), title: `Switch wallet in ${selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.name}`, children: (0, import_jsx_runtime450.jsxs)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", "data-testid": "content", children: ["To link a new wallet, open", " ", (0, import_jsx_runtime450.jsx)(Typography, { as: "span", weight: "medium", color: "primary", children: selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.name }), " ", "and switch to the account you want to link."] }) });
};
var PendingAccountSwitchToLinkWidgetPortal = () => (0, import_jsx_runtime450.jsx)(WidgetPortal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime450.jsx)(PendingAccountSwitchToLinkContent, {}) });
var PendingAccountSwitchToLinkModal = () => (0, import_jsx_runtime450.jsx)(PromptModal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime450.jsx)(PendingAccountSwitchToLinkContent, {}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/UnlinkWalletPopUp/UnlinkWalletPopUp.js
var import_jsx_runtime451 = __toESM(require_jsx_runtime(), 1);
var import_react481 = __toESM(require_react(), 1);
var import_react_dom278 = __toESM(require_react_dom(), 1);
var import_qrcode274 = __toESM(require_browser(), 1);
var UnlinkWalletPopUpContent = ({ onClickCancel }) => {
  var _a;
  const { handleUnlinkWallet, setSelectedWalletWithAction, authMode, selectedWalletWithAction } = useInternalDynamicContext();
  const { t: t2 } = useTranslation();
  const { loading, setLoading } = useLoadingContext();
  const walletId = (_a = selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet) === null || _a === void 0 ? void 0 : _a.id;
  if (!walletId) {
    throw new Error("Wallet id is not defined");
  }
  const onConfirmClick = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
      setLoading(true);
      yield handleUnlinkWallet(walletId);
      setSelectedWalletWithAction(null);
    } catch (error) {
      logger2.error(error);
    } finally {
      setLoading(false);
    }
  });
  return (0, import_jsx_runtime451.jsxs)("div", { className: "unlink-wallet-popup__container", children: [(0, import_jsx_runtime451.jsx)(Typography, { color: "primary", className: "unlink-wallet-popup__title", variant: "body_normal", as: "h6", children: authMode === "connect-only" ? t2("dyn_unlink_wallet_pop_up.disconnect_title") : t2("dyn_unlink_wallet_pop_up.unlink_title") }), (0, import_jsx_runtime451.jsx)(Typography, { className: "unlink-wallet-popup__label", variant: "body_small", color: "secondary", children: authMode === "connect-only" ? t2("dyn_unlink_wallet_pop_up.disconnect_description") : t2("dyn_unlink_wallet_pop_up.unlink_description") }), (0, import_jsx_runtime451.jsx)(TypographyButton, { buttonPadding: "small", onClick: onConfirmClick, disabled: loading, buttonClassName: "unlink-wallet-popup__button unlink-wallet-popup__button--shadow", color: "primary", expanded: true, typographyProps: {
    variant: "button_secondary",
    weight: "medium"
  }, dataTestId: "unlink-wallet-popup-yes-button", children: authMode === "connect-only" ? t2("dyn_unlink_wallet_pop_up.disconnect_button") : t2("dyn_unlink_wallet_pop_up.unlink_button") }), (0, import_jsx_runtime451.jsx)(TypographyButton, { expanded: true, buttonPadding: "small", onClick: onClickCancel, buttonVariant: "secondary", buttonClassName: "unlink-wallet-popup__button", typographyProps: {
    variant: "button_secondary",
    weight: "medium"
  }, children: t2("dyn_unlink_wallet_pop_up.cancel_button") })] });
};
var UnlinkWalletPopUpModal = () => (0, import_jsx_runtime451.jsx)(PromptModal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime451.jsx)(UnlinkWalletPopUpContent, { onClickCancel: useCloseMultiWalletPrompt() }) });
var UnlinkWalletPopUpWidgetPortal = () => (0, import_jsx_runtime451.jsx)(WidgetPortal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime451.jsx)(UnlinkWalletPopUpContent, { onClickCancel: useCloseMultiWalletPrompt() }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/AwaitingConnectionModal/AwaitingConnectionModal.js
var import_jsx_runtime459 = __toESM(require_jsx_runtime(), 1);
var import_react489 = __toESM(require_react(), 1);
var import_react_dom286 = __toESM(require_react_dom(), 1);
var import_qrcode281 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/NoQrNotInstalledModalView/NoQrNotInstalledModalView.js
var import_jsx_runtime452 = __toESM(require_jsx_runtime(), 1);
var import_react482 = __toESM(require_react(), 1);
var import_react_dom279 = __toESM(require_react_dom(), 1);
var import_qrcode275 = __toESM(require_browser(), 1);
var NoQrNotInstalledModalView = () => {
  const { selectedWalletConnector } = useInternalDynamicContext();
  const { walletBook } = useWalletBookContext();
  const downloadLinks = useWalletDownloadLinks(selectedWalletConnector);
  if (!selectedWalletConnector) {
    return null;
  }
  const walletName = getWalletBookWallet(walletBook, selectedWalletConnector.key, selectedWalletConnector.walletFallback).name;
  return (0, import_jsx_runtime452.jsxs)("div", { className: "no-qr-code-not-installed-modal-view", "data-testid": "no-qr-code-not-installed", children: [(0, import_jsx_runtime452.jsx)(WalletIcon, { walletKey: selectedWalletConnector.key, style: { height: pixelToRem(64), width: pixelToRem(64) } }), (0, import_jsx_runtime452.jsxs)(Typography, { variant: "body_normal", color: "primary", children: ["We can’t detect ", walletName, " extension"] }), Array.isArray(downloadLinks) && (0, import_jsx_runtime452.jsx)(Typography, { variant: "body_normal", color: "secondary", children: "Select from your preferred options below:" }), (0, import_jsx_runtime452.jsx)("div", { className: "no-qr-code-not-installed-modal-view__links-section", children: downloadLinks.map(({ key, name, link, Icon: Icon2 }) => (0, import_jsx_runtime452.jsx)(WalletHelpLink, { name, link, Icon: Icon2 }, key)) }), (0, import_jsx_runtime452.jsx)(Typography, { variant: "body_mini", color: "secondary", children: "Refresh the page once installed" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingConnectionModal/PendingConnectionModal.js
var import_jsx_runtime453 = __toESM(require_jsx_runtime(), 1);
var import_react483 = __toESM(require_react(), 1);
var import_react_dom280 = __toESM(require_react_dom(), 1);
var import_qrcode276 = __toESM(require_browser(), 1);
var PendingConnectionContent = () => {
  var _a;
  const { selectedWalletConnector, user, selectedWalletWithAction } = useInternalDynamicContext();
  let title2;
  let description;
  if (selectedWalletWithAction && isSocialWalletConnector(selectedWalletWithAction.wallet.connector)) {
    const account = getReferencedAccount(user, selectedWalletWithAction.wallet.id);
    title2 = `Reconnecting ${capitalize2((_a = account === null || account === void 0 ? void 0 : account.oauthProvider) !== null && _a !== void 0 ? _a : "")}`;
  } else {
    title2 = `Connect ${selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.name} wallet`;
    description = (0, import_jsx_runtime453.jsxs)(import_jsx_runtime453.Fragment, { children: ["Connect your", " ", (0, import_jsx_runtime453.jsx)(Typography, { as: "span", weight: "medium", color: "primary", children: selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.name }), " ", "wallet to make active."] });
  }
  return (0, import_jsx_runtime453.jsx)(DefaultPromptLayout, { dataTestId: "pending-connection-modal", icon: (0, import_jsx_runtime453.jsx)(
    AuthProviderIcon,
    { wallet: selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet }
  ), title: title2, children: (0, import_jsx_runtime453.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", "data-testid": "content", children: description }) });
};
var PendingConnectionModal = () => (0, import_jsx_runtime453.jsx)(PromptModal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime453.jsx)(PendingConnectionContent, {}) });
var PendingConnectionWidgetPortal = () => (0, import_jsx_runtime453.jsx)(WidgetPortal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime453.jsx)(PendingConnectionContent, {}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingSignModal/PendingSignModal.js
var import_jsx_runtime457 = __toESM(require_jsx_runtime(), 1);
var import_react487 = __toESM(require_react(), 1);
var import_react_dom284 = __toESM(require_react_dom(), 1);
var import_qrcode280 = __toESM(require_browser(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/EmailConnectorPendingSignModalContent/EmailConnectorPendingSignModalContent.js
var import_jsx_runtime454 = __toESM(require_jsx_runtime(), 1);
var import_react484 = __toESM(require_react(), 1);
var import_react_dom281 = __toESM(require_react_dom(), 1);
var import_qrcode277 = __toESM(require_browser(), 1);
var EmailConnectorPendingSignModalContent = ({ emailWalletConnector }) => (0, import_jsx_runtime454.jsxs)("div", { className: "email-connector-pending-sign-modal-content", children: [(0, import_jsx_runtime454.jsx)(IconWithSpinner, { Icon: SignInWithEmailIcon, iconSize: 80, isSpinning: true }), (0, import_jsx_runtime454.jsxs)("div", { className: "email-connector-pending-sign-modal-content__body", children: [(0, import_jsx_runtime454.jsx)(Typography, { weight: "medium", variant: "title", color: "primary", className: "email-connector-pending-sign-modal-content__title", children: "Confirm your email" }), (0, import_jsx_runtime454.jsxs)(Typography, { weight: "regular", variant: "body_normal", color: "secondary", children: ["We’ve sent a verification email to", " ", (0, import_jsx_runtime454.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "medium", as: "span", children: emailWalletConnector.email })] }), (0, import_jsx_runtime454.jsx)(Typography, { weight: "regular", variant: "body_small", color: "secondary", children: "Note: it might take a few seconds to proceed after clicking the link in your email" })] })] });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/EmailOTPConnectorPendingSignModalContent/EmailOTPConnectorPendingSignModalContent.js
var import_jsx_runtime455 = __toESM(require_jsx_runtime(), 1);
var import_react485 = __toESM(require_react(), 1);
var import_react_dom282 = __toESM(require_react_dom(), 1);
var import_qrcode278 = __toESM(require_browser(), 1);
var EmailOTPConnectorPendingSignModalContent = ({ walletConnector }) => {
  const { setSelectedWalletWithAction, selectedWalletWithAction, setPrimaryWalletId, setMultiWalletWidgetState } = useInternalDynamicContext();
  const [error, setError] = (0, import_react485.useState)();
  const { email } = walletConnector;
  if (!email) {
    throw new Error("EmailOTPConnectorPendingSignModalContent requires a email");
  }
  const { data: isValid, isLoading, mutate: onSubmit } = useMutation((otp) => walletConnector.verifyOneTimePassword(otp), {
    onFailure: (error2) => {
      setError(error2);
      dynamicEvents.emit("emailVerificationResult", false, email);
    },
    onSuccess: () => __awaiter(void 0, void 0, void 0, function* () {
      if (!selectedWalletWithAction) {
        return;
      }
      setMultiWalletWidgetState("idle");
      setSelectedWalletWithAction(null);
      setPrimaryWalletId(selectedWalletWithAction.wallet.id);
      dynamicEvents.emit("emailVerificationResult", true, email);
    })
  });
  return (0, import_jsx_runtime455.jsx)(OTPVerificationView, { MainIcon: EmailIcon, displayedDestination: shortenEmail(email), error, isLoading, onPinComplete: onSubmit, retryHandler: walletConnector.retryOneTimePassword.bind(walletConnector), isValid: isValid === true, onPinChange: () => setError(void 0) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingSignModal/DefaultPendingSignModalContent/DefaultPendingSignModalContent.js
var import_jsx_runtime456 = __toESM(require_jsx_runtime(), 1);
var import_react486 = __toESM(require_react(), 1);
var import_react_dom283 = __toESM(require_react_dom(), 1);
var import_qrcode279 = __toESM(require_browser(), 1);
var DefaultPendingSignModalContent = () => {
  const { selectedWalletConnector, setMultiWalletWidgetState } = useInternalDynamicContext();
  const { signAlreadyConnectedUser } = useConnectAndSignSplitSteps();
  const onClickToSign = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
      if (selectedWalletConnector) {
        yield signAlreadyConnectedUser({
          walletConnector: selectedWalletConnector
        });
      }
    } catch (e2) {
      logger.error(e2);
    } finally {
      setMultiWalletWidgetState("idle");
    }
  });
  return (0, import_jsx_runtime456.jsxs)(DefaultPromptModal, { onClose: useCloseMultiWalletPrompt(), dataTestId: "pending-account-switch", icon: (0, import_jsx_runtime456.jsx)(WalletIcon, { walletKey: selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.key }), children: [(0, import_jsx_runtime456.jsx)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", "data-testid": "content", children: "Sign the message in your wallet to approve linking this wallet to your account" }), isMobile() && !(selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.canConnectViaCustodialService) && (0, import_jsx_runtime456.jsx)(TypographyButton, { buttonClassName: "default-prompt-modal__button", expanded: true, type: "button", buttonPadding: "medium", typographyProps: { variant: "button_secondary" }, onClick: onClickToSign, dataTestId: "click-to-sign-button", children: "Click to Sign" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PendingSignModal/PendingSignModal.js
var PendingSignContent = () => {
  const { selectedWalletConnector } = useInternalDynamicContext();
  if (selectedWalletConnector !== null) {
    if (isEmailOTPWalletConnector(selectedWalletConnector)) {
      return (0, import_jsx_runtime457.jsx)(EmailOTPConnectorPendingSignModalContent, { walletConnector: selectedWalletConnector });
    }
    if (isEmailWalletConnector(selectedWalletConnector)) {
      return (0, import_jsx_runtime457.jsx)(EmailConnectorPendingSignModalContent, { emailWalletConnector: selectedWalletConnector });
    }
  }
  return (0, import_jsx_runtime457.jsx)(DefaultPendingSignModalContent, {});
};
var PendingSignWidgetPortal = () => (0, import_jsx_runtime457.jsx)(WidgetPortal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime457.jsx)(PendingSignContent, {}) });
var PendingSignModal = () => (0, import_jsx_runtime457.jsx)(PromptModal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime457.jsx)(PendingSignContent, {}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/QrCodeModalView/QrCodeModalView.js
var import_jsx_runtime458 = __toESM(require_jsx_runtime(), 1);
var import_react488 = __toESM(require_react(), 1);
var import_react_dom285 = __toESM(require_react_dom(), 1);
var QrCodeModalView = ({ walletId }) => {
  var _a, _b;
  const { secondaryWallets, qrcodeUri, desktopUri } = useInternalDynamicContext();
  const { walletBook } = useWalletBookContext();
  const newPrimaryWallet = secondaryWallets.find(({ id }) => id === walletId);
  const walletKey = ((_a = newPrimaryWallet === null || newPrimaryWallet === void 0 ? void 0 : newPrimaryWallet.connector) === null || _a === void 0 ? void 0 : _a.key) || "";
  const walletName = ((_b = newPrimaryWallet === null || newPrimaryWallet === void 0 ? void 0 : newPrimaryWallet.connector) === null || _b === void 0 ? void 0 : _b.name) || "";
  const { theme } = useThemeContext();
  const qrCodeColorsByTheme = {
    dark: {
      accentColor: "var(--dynamic-text-primary)"
    },
    light: {
      accentColor: getWalletPrimaryColor(walletBook, walletKey) || "var(--dynamic-text-primary)"
    }
  };
  const typedTheme = theme.theme.name === "light" ? "light" : "dark";
  const icon = (0, import_jsx_runtime458.jsx)(WalletIcon, { walletKey, style: { height: pixelToRem(24), width: pixelToRem(24) } });
  return (0, import_jsx_runtime458.jsxs)("div", { className: "qr-code-modal-view", children: [(0, import_jsx_runtime458.jsxs)(Typography, { variant: "button_primary", color: "primary", className: "qr-code-modal-view__title", children: ["Connect with ", newPrimaryWallet === null || newPrimaryWallet === void 0 ? void 0 : newPrimaryWallet.connector.name] }), (0, import_jsx_runtime458.jsxs)(Typography, { variant: "body_small", color: "secondary", className: "qr-code-modal-view__title", children: ["Connect wallet", " ", (0, import_jsx_runtime458.jsx)(Typography, { as: "span", weight: "medium", color: "primary", children: shortenWalletAddress(newPrimaryWallet === null || newPrimaryWallet === void 0 ? void 0 : newPrimaryWallet.address, 4, 4) }), " ", "to switch active account."] }), (0, import_jsx_runtime458.jsx)("div", { className: "qr-code-modal-view__container", children: (0, import_jsx_runtime458.jsx)("div", { className: "qr-code-modal-view__wrapper", children: qrcodeUri ? (0, import_jsx_runtime458.jsx)(QRCode, { Icon: icon, accentColor: qrCodeColorsByTheme[typedTheme].accentColor, value: qrcodeUri, size: 175, logoSize: 40, walletKey }) : (
    // this div exists to give the parent a child, so that the parent
    // takes on its given width and height. the result is stable
    // rendering of this component, without this there is a brief flash
    (0, import_jsx_runtime458.jsx)("div", { "data-testid": "no-qrcode" })
  ) }) }), (0, import_jsx_runtime458.jsxs)("div", { className: "button__container", children: [(newPrimaryWallet === null || newPrimaryWallet === void 0 ? void 0 : newPrimaryWallet.connector.isWalletConnect) && qrcodeUri && (0, import_jsx_runtime458.jsxs)(CopyButton, { textToCopy: qrcodeUri, children: [(0, import_jsx_runtime458.jsx)(Icon, { size: "small", color: "text-tertiary", children: (0, import_jsx_runtime458.jsx)(SvgLink, {}) }), "Copy QR URI"] }), desktopUri && (0, import_jsx_runtime458.jsxs)(TextButton, { className: "button--open-app", onClick: () => window.open(desktopUri), children: [(0, import_jsx_runtime458.jsx)(Icon, { size: "xsmall", color: "text-tertiary", children: (0, import_jsx_runtime458.jsx)(SvgExternalLink, {}) }), "Open ", walletName, " App"] })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/AwaitingConnectionModal/AwaitingConnectionModal.js
var AwaitingConnectionContent = ({ PendingSign, PendingConnection }) => {
  var _a, _b;
  const { selectedWalletConnector, showQrcodeModal, selectedWalletWithAction } = useInternalDynamicContext();
  const Pending = (0, import_react489.useMemo)(() => {
    if (selectedWalletConnector && (isEmailOTPWalletConnector(selectedWalletConnector) || isEmailWalletConnector(selectedWalletConnector))) {
      return PendingSign;
    }
    return PendingConnection;
  }, [selectedWalletConnector]);
  if (showQrcodeModal) {
    if (selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.canConnectViaQrCode) {
      return (0, import_jsx_runtime459.jsx)(QrCodeModalView, { walletId: (_b = (_a = selectedWalletWithAction === null || selectedWalletWithAction === void 0 ? void 0 : selectedWalletWithAction.wallet) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : "" });
    }
    return (0, import_jsx_runtime459.jsx)(NoQrNotInstalledModalView, {});
  }
  return (0, import_jsx_runtime459.jsx)(Pending, {});
};
var AwaitingConnectionWidgetPortal = () => (0, import_jsx_runtime459.jsx)(WidgetPortal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime459.jsx)(AwaitingConnectionContent, { PendingSign: PendingSignWidgetPortal, PendingConnection: PendingConnectionWidgetPortal }) });
var AwaitingConnectionModal = () => (0, import_jsx_runtime459.jsx)(PromptModal, { onClose: useCloseMultiWalletPrompt(), children: (0, import_jsx_runtime459.jsx)(AwaitingConnectionContent, { PendingSign: PendingSignModal, PendingConnection: PendingConnectionModal }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/prompts/PrimaryNotConnectedModal/PrimaryNotConnectedModal.js
var import_jsx_runtime460 = __toESM(require_jsx_runtime(), 1);
var import_react490 = __toESM(require_react(), 1);
var import_react_dom287 = __toESM(require_react_dom(), 1);
var import_qrcode282 = __toESM(require_browser(), 1);
var PrimaryNotConnectedContent = () => {
  var _a;
  const { primaryWallet } = useInternalDynamicContext();
  return (0, import_jsx_runtime460.jsxs)(DefaultPromptLayout, { dataTestId: "wallet-not-connected", icon: (0, import_jsx_runtime460.jsx)(WalletIcon, { walletKey: (_a = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector) === null || _a === void 0 ? void 0 : _a.key }), title: `Switch wallet in ${primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.name}`, children: [(0, import_jsx_runtime460.jsxs)(Typography, { variant: "body_normal", color: "secondary", weight: "regular", "data-testid": "content", children: ["Your active wallet in", " ", (0, import_jsx_runtime460.jsx)(Typography, { as: "span", weight: "medium", color: "primary", children: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.name }), " ", "is not linked. Please switch to wallet", " ", (0, import_jsx_runtime460.jsx)(Typography, { as: "span", weight: "medium", color: "primary", children: shortenWalletAddress(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address, 3, 3) }), "."] }), (0, import_jsx_runtime460.jsx)(Divider, { fullWidth: true, text: "Or" }), (0, import_jsx_runtime460.jsx)(LogoutButton, { isTextButton: false, buttonClassName: "primary-not-connected__log-out-button" })] });
};
var PrimaryNotConnectedWidgetPortal = () => (0, import_jsx_runtime460.jsx)(WidgetPortal, { children: (0, import_jsx_runtime460.jsx)(PrimaryNotConnectedContent, {}) });
var PrimaryNotConnectedModal = () => {
  const { view } = useViewContext();
  if (view.type === "wallet-used")
    return null;
  return (0, import_jsx_runtime460.jsx)(PromptModal, { children: (0, import_jsx_runtime460.jsx)(PrimaryNotConnectedContent, {}) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetPrompts/DynamicWidgetPrompts.js
var DynamicWidgetPrompts = () => {
  const multiWalletPromptState = useMultiWalletPromptState();
  const mapMultiWalletPromptStateToPromptComponent = {
    awaiting_connection: AwaitingConnectionWidgetPortal,
    detected_new_wallet: DetectedNewWalletWidgetPortal,
    linking_new_wallet: PendingAccountSwitchToLinkWidgetPortal,
    pending_account_switch: PendingAccountSwitchWidgetPortal,
    pending_sign: PendingSignWidgetPortal,
    primary_not_connected: PrimaryNotConnectedWidgetPortal,
    unlink_wallet: UnlinkWalletPopUpWidgetPortal
  };
  if (multiWalletPromptState === "idle")
    return null;
  const PromptComponent = mapMultiWalletPromptStateToPromptComponent[multiWalletPromptState];
  return (0, import_jsx_runtime461.jsx)(PromptComponent, {});
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetViews/DynamicWidgetViews.js
var import_jsx_runtime476 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/WalletsView/WalletsView.js
var import_jsx_runtime465 = __toESM(require_jsx_runtime(), 1);
var import_react494 = __toESM(require_react(), 1);
var import_react_dom291 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetWallets/DynamicWidgetWallets.js
var import_jsx_runtime463 = __toESM(require_jsx_runtime(), 1);
var import_react492 = __toESM(require_react(), 1);
var import_react_dom289 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/EmptyWallets/EmptyWallets.js
var import_jsx_runtime462 = __toESM(require_jsx_runtime(), 1);
var import_react491 = __toESM(require_react(), 1);
var import_react_dom288 = __toESM(require_react_dom(), 1);
var import_qrcode283 = __toESM(require_browser(), 1);
var EmptyWallets = ({ text, copykey }) => {
  const { isTurnkeyWalletWithoutAuthenticator } = useIsTurnkeyWallet();
  return (0, import_jsx_runtime462.jsxs)("div", { className: classNames("empty-wallet__container", {
    "empty-wallet__container--big": !isTurnkeyWalletWithoutAuthenticator
  }), children: [(0, import_jsx_runtime462.jsx)(Icon, { className: "empty-wallet__icon", size: "medium", children: (0, import_jsx_runtime462.jsx)(SvgEmbeddedWalletIcon, {}) }), (0, import_jsx_runtime462.jsx)("div", { className: classNames({
    "empty-wallet__text-container": !isTurnkeyWalletWithoutAuthenticator
  }), children: (0, import_jsx_runtime462.jsx)(Typography, { variant: "body_small", color: "secondary", copykey, children: text }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetWallets/DynamicWidgetWallets.js
var import_qrcode284 = __toESM(require_browser(), 1);
var DynamicWidgetWallets = () => {
  const { t: t2 } = useTranslation();
  const { secondaryWallets, user, authMode, setSelectedWalletConnectorKey } = useInternalDynamicContext();
  const { setShowLinkNewWalletModal } = useDynamicModals();
  const { availableWalletsContainerRef } = useWidgetContext();
  const isEmpty = secondaryWallets.length === 0;
  const addNewWallet = () => {
    setShowLinkNewWalletModal(true);
    setSelectedWalletConnectorKey(null);
  };
  return (0, import_jsx_runtime463.jsxs)(import_jsx_runtime463.Fragment, { children: [(0, import_jsx_runtime463.jsxs)("div", { className: "dynamic-widget-wallets-header", children: [(0, import_jsx_runtime463.jsx)(Typography, { weight: "regular", variant: "body_normal", color: "secondary", className: "dynamic-widget-wallets-header__title", copykey: "dyn_widget.other_wallets", children: t2("dyn_widget.other_wallets") }), (0, import_jsx_runtime463.jsxs)(TypographyButton, { buttonClassName: "dynamic-widget-wallets-header__add_wallet", buttonVariant: "tertiary", buttonPadding: "none", onClick: addNewWallet, typographyProps: {
    color: "secondary",
    variant: "button_tertiary"
  }, startSlot: (0, import_jsx_runtime463.jsx)(SvgAdd, {}), children: [authMode === "connect-only" ? "Connect" : "Link", " a new wallet"] })] }), (0, import_jsx_runtime463.jsx)("div", { ref: availableWalletsContainerRef, className: "dynamic-widget-wallets", "data-testid": "dynamicWidgetWallets", children: (0, import_jsx_runtime463.jsx)("div", { className: classNames("dynamic-widget-wallets__body", {
    "dynamic-widget-wallets__body--apply-height": !isEmpty
  }), children: isEmpty ? (0, import_jsx_runtime463.jsx)(EmptyWallets, { copykey: "dyn_widget.empty_wallets", text: t2("dyn_widget.empty_wallets", {
    action: authMode === "connect-and-sign" ? t2("dyn_widget.empty_wallets_action_link") : t2("dyn_widget.empty_wallets_action_connect")
  }) }) : (0, import_jsx_runtime463.jsx)("div", { className: "dynamic-widget-wallets__body__wallet-list", children: secondaryWallets.map((wallet, index) => {
    var _a;
    return (0, import_jsx_runtime463.jsx)(Wallet, { ens: (_a = getWalletVerifiedCredential(wallet.address, user === null || user === void 0 ? void 0 : user.verifiedCredentials, wallet.chain)) === null || _a === void 0 ? void 0 : _a.nameService, wallet }, wallet.id);
  }) }) }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/SingleWalletButtons/SingleWalletButtons.js
var import_jsx_runtime464 = __toESM(require_jsx_runtime(), 1);
var import_react493 = __toESM(require_react(), 1);
var import_react_dom290 = __toESM(require_react_dom(), 1);
var import_qrcode285 = __toESM(require_browser(), 1);
var SingleWalletButtons = () => {
  var _a;
  const { primaryWallet, handleLogOut, user } = useInternalDynamicContext();
  const unknownWallet = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((credential) => credential.walletName === "unknown");
  const address = (_a = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address) !== null && _a !== void 0 ? _a : unknownWallet === null || unknownWallet === void 0 ? void 0 : unknownWallet.address;
  return (0, import_jsx_runtime464.jsxs)("div", { className: "single-wallet-buttons", children: [address && (0, import_jsx_runtime464.jsx)(TypographyButton, { dataTestId: "Copy address", expanded: true, buttonPadding: "medium", typographyProps: {
    className: "single-wallet-buttons--center",
    variant: "button_primary"
  }, onClick: () => copyToClipboard(address), feedback: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime464.jsxs)("div", { className: "single-wallet-buttons__copied", children: [(0, import_jsx_runtime464.jsx)(SvgCheckCircle, {}), " Copied!"] })
  ), children: "Copy address" }), (0, import_jsx_runtime464.jsx)(TypographyButton, { dataTestId: "Disconnect", expanded: true, buttonPadding: "medium", typographyProps: {
    className: "single-wallet-buttons--center",
    variant: "button_primary"
  }, onClick: handleLogOut, children: "Disconnect" })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/WalletsView/WalletsView.js
var import_qrcode286 = __toESM(require_browser(), 1);
var WalletsView2 = () => {
  const { user, multiWallet } = useInternalDynamicContext();
  const isKYCEnabled = useKYCFlag();
  return (0, import_jsx_runtime465.jsxs)(import_jsx_runtime465.Fragment, { children: [!multiWallet && !isKYCEnabled && (0, import_jsx_runtime465.jsxs)("div", { className: "dynamic-widget-index-view__email-container", children: [(0, import_jsx_runtime465.jsx)(Typography, { children: user === null || user === void 0 ? void 0 : user.email }), (0, import_jsx_runtime465.jsx)(SingleWalletButtons, {})] }), multiWallet && (0, import_jsx_runtime465.jsx)(DynamicWidgetWallets, {})] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ProfileView/ProfileView.js
var import_jsx_runtime466 = __toESM(require_jsx_runtime(), 1);
var ProfileView2 = () => (0, import_jsx_runtime466.jsx)(UserProfile, { rootClassName: "profile-view" });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/EditProfileView/EditProfileView.js
var import_jsx_runtime467 = __toESM(require_jsx_runtime(), 1);
var import_react495 = __toESM(require_react(), 1);
var import_react_dom292 = __toESM(require_react_dom(), 1);
var import_qrcode287 = __toESM(require_browser(), 1);
var EditProfileView2 = ({ rootClassName }) => {
  const { setView } = useViewContext();
  const { setShowAuthFlow, multiWallet, user } = useInternalDynamicContext();
  const { goToProfileView } = useWidgetContext();
  const { updateUser } = useUserUpdateRequestInternal({
    validationSchemaStripUnknown: true
  });
  const onEditProfileFormSubmit = (0, import_react495.useCallback)((formValues) => __awaiter(void 0, void 0, void 0, function* () {
    const { isEmailVerificationRequired, isSmsVerificationRequired } = yield updateUser(Object.assign(Object.assign({}, formValues), { metadata: Object.assign(Object.assign({}, user === null || user === void 0 ? void 0 : user.metadata), formValues.metadata) }));
    goToProfileView();
    if (isEmailVerificationRequired || isSmsVerificationRequired) {
      setShowAuthFlow(true, {
        ignoreIfIsEmbeddedWidget: false,
        initializeWalletConnect: false,
        performMultiWalletChecks: false
      });
      setView(isEmailVerificationRequired ? "verify-email" : "verify-sms");
    }
  }), [goToProfileView, setShowAuthFlow, setView, updateUser]);
  const isKYCEnabled = useKYCFlag();
  return (0, import_jsx_runtime467.jsxs)(import_jsx_runtime467.Fragment, { children: [!multiWallet && isKYCEnabled && (0, import_jsx_runtime467.jsx)(Typography, { weight: "regular", color: "secondary", variant: "body_normal", className: "dynamic-widget-edit-profile-view__profile-title", children: "My information" }), (0, import_jsx_runtime467.jsx)(UserProfileForm, { formClassName: rootClassName, onEditProfileSubmit: onEditProfileFormSubmit, onEditProfileCancel: goToProfileView })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/SendBalanceWidgetView/SendBalanceWidgetView.js
var import_jsx_runtime468 = __toESM(require_jsx_runtime(), 1);
var SendBalanceWidgetView = () => {
  const { goToInitialDynamicWidgetView } = useWidgetContext();
  return (0, import_jsx_runtime468.jsx)("div", { className: "send-balance-widget-view", children: (0, import_jsx_runtime468.jsx)(SendBalanceView, { onClickBack: goToInitialDynamicWidgetView, onDone: goToInitialDynamicWidgetView }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManagePasskeysWidgetView/ManagePasskeysWidgetView.js
var import_jsx_runtime469 = __toESM(require_jsx_runtime(), 1);
var import_react496 = __toESM(require_react(), 1);
var import_react_dom293 = __toESM(require_react_dom(), 1);
var import_qrcode288 = __toESM(require_browser(), 1);
var ManagePasskeysWidgetView = () => {
  var _a;
  const { setDynamicWidgetView } = useWidgetContext();
  const { userPasskeys, userPasskeysLoading: isLoading } = usePasskeyContext();
  const { projectSettings } = useInternalDynamicContext();
  const { initPasskeyRecoveryProcess } = usePasskeyRecovery();
  const { t: t2 } = useTranslation();
  const isRecoveryEnabled = Boolean((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.emailRecoveryEnabled);
  const backButton = (0, import_jsx_runtime469.jsx)(IconButton, { type: "button", onClick: () => setDynamicWidgetView("settings"), "data-testid": "back-button", children: (0, import_jsx_runtime469.jsx)(SvgChevronLeft, {}) });
  return (0, import_jsx_runtime469.jsxs)("div", { className: "manage-passkeys-widget-view", children: [(0, import_jsx_runtime469.jsx)(ModalHeader, { leading: backButton, children: (0, import_jsx_runtime469.jsx)("div", { className: "send-balance-page-layout__header-content", children: (0, import_jsx_runtime469.jsx)(Typography, { variant: "title", color: "primary", copykey: "dyn_manage_passkeys.title", children: t2("dyn_manage_passkeys.title") }) }) }), (0, import_jsx_runtime469.jsx)(PasskeyCreatedSuccessBanner, {}), (0, import_jsx_runtime469.jsxs)("div", { className: "manage-passkeys-widget-view__body", children: [(0, import_jsx_runtime469.jsx)("div", { className: "manage-passkeys-widget-view__body__cards", children: isLoading ? (0, import_jsx_runtime469.jsx)(Skeleton, { count: 1, className: "manage-passkeys-widget-view__body__cards__skeleton" }) : userPasskeys.map((passkey) => (0, import_jsx_runtime469.jsx)(PasskeyCard, { passkey }, passkey.id)) }), isRecoveryEnabled && (0, import_jsx_runtime469.jsx)(TypographyButton, { buttonPadding: "large", buttonClassName: "manage-passkeys-widget-view__body__recovery-button", onClick: () => initPasskeyRecoveryProcess("passkey"), showInternalLoading: false, startSlot: (0, import_jsx_runtime469.jsx)(SvgAdd, {}), copykey: "dyn_manage_passkeys.recovery_button", children: t2("dyn_manage_passkeys.recovery_button") })] })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/SettingsView/SettingsView.js
var import_jsx_runtime470 = __toESM(require_jsx_runtime(), 1);
var import_react497 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/export-private-key.js
var React98 = __toESM(require_react(), 1);
var _path79;
var _excluded84 = ["title", "titleId"];
function _extends91() {
  _extends91 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends91.apply(this, arguments);
}
function _objectWithoutProperties84(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose87(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose87(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgExportPrivateKey = function SvgExportPrivateKey2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties84(_ref2, _excluded84);
  return React98.createElement("svg", _extends91({
    width: 28,
    height: 28,
    viewBox: "0 0 28 28",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React98.createElement("title", {
    id: titleId
  }, title2) : null, _path79 || (_path79 = React98.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19.834 4.667a2.333 2.333 0 0 0-2.333-2.334H7a4.668 4.668 0 0 0-4.592 3.83 4.654 4.654 0 0 1 3.425-1.496h14ZM21 7a4.667 4.667 0 0 1 4.667 4.667V21A4.667 4.667 0 0 1 21 25.667H7A4.667 4.667 0 0 1 2.333 21v-9.333A4.667 4.667 0 0 1 7 7h14Zm-4.915 3.792a3.649 3.649 0 1 1 0 7.297 3.649 3.649 0 0 1 0-7.297Zm0 1.824a1.824 1.824 0 1 1 0 3.649 1.824 1.824 0 0 1 0-3.649Zm-3.16 5.115a4.565 4.565 0 0 1-.714-.924l-4.336 4.336 1.29 1.29 1.254-1.253 1.279 1.278 1.29-1.29-1.279-1.278 1.721-1.722a4.598 4.598 0 0 1-.505-.437Z",
    fill: "#383C48",
    fillOpacity: 0.4
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/export-recovery-phrase.js
var React99 = __toESM(require_react(), 1);
var _path80;
var _excluded85 = ["title", "titleId"];
function _extends92() {
  _extends92 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends92.apply(this, arguments);
}
function _objectWithoutProperties85(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose88(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose88(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgExportRecoveryPhrase = function SvgExportRecoveryPhrase2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties85(_ref2, _excluded85);
  return React99.createElement("svg", _extends92({
    width: 28,
    height: 28,
    viewBox: "0 0 28 28",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React99.createElement("title", {
    id: titleId
  }, title2) : null, _path80 || (_path80 = React99.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M17.5 2.333a2.333 2.333 0 0 1 2.334 2.334h-14A4.654 4.654 0 0 0 2.41 6.164 4.668 4.668 0 0 1 7 2.334h10.5Zm8.167 9.334A4.667 4.667 0 0 0 21 7H7a4.667 4.667 0 0 0-4.667 4.667V21A4.667 4.667 0 0 0 7 25.667h14A4.667 4.667 0 0 0 25.667 21v-9.333Zm-16.8.933A.933.933 0 1 1 7 12.6a.933.933 0 0 1 1.867 0Zm2.426-.933a.933.933 0 1 0 0 1.866h8.214a.933.933 0 1 0 0-1.866h-8.214Zm-2.426 4.666a.933.933 0 1 1-1.867 0 .933.933 0 0 1 1.867 0Zm2.426-.933a.933.933 0 1 0 0 1.867h8.214a.933.933 0 0 0 0-1.867h-8.214Zm-2.426 4.667a.933.933 0 1 1-1.867 0 .933.933 0 0 1 1.867 0Zm2.24-.934a.933.933 0 0 0 0 1.867h8.213a.933.933 0 1 0 0-1.867h-8.213Z",
    fill: "#383C48",
    fillOpacity: 0.4
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/currency.js
var React100 = __toESM(require_react(), 1);
var _rect4;
var _path81;
var _path215;
var _ellipse;
var _excluded86 = ["title", "titleId"];
function _extends93() {
  _extends93 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends93.apply(this, arguments);
}
function _objectWithoutProperties86(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose89(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose89(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgCurrency = function SvgCurrency2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties86(_ref2, _excluded86);
  return React100.createElement("svg", _extends93({
    width: 28,
    height: 28,
    viewBox: "0 0 28 28",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React100.createElement("title", {
    id: titleId
  }, title2) : null, _rect4 || (_rect4 = React100.createElement("rect", {
    width: 28,
    height: 28,
    rx: 14,
    fill: "#4779FF"
  })), _path81 || (_path81 = React100.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20.252 17.036C18.976 18.398 16.654 19.31 14 19.31c-2.65 0-4.97-.909-6.246-2.268-.004.646-.004 1.406-.004 2.293 0 1.726 2.798 3.125 6.25 3.125s6.25-1.399 6.25-3.125c0-.192.002-.406.004-.637.005-.496.01-1.069-.002-1.662Z",
    fill: "#fff"
  })), _path215 || (_path215 = React100.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20.23 11.85c-1.28 1.35-3.591 2.252-6.23 2.252-2.65 0-4.969-.909-6.245-2.267-.005.64-.005 1.398-.005 2.292 0 1.726 2.798 3.125 6.25 3.125s6.25-1.399 6.25-3.125c0-.959 0-1.703-.02-2.276Z",
    fill: "#fff"
  })), _ellipse || (_ellipse = React100.createElement("ellipse", {
    cx: 14,
    cy: 8.893,
    rx: 6.25,
    ry: 3.125,
    fill: "#fff"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/shield.js
var React101 = __toESM(require_react(), 1);
var _rect5;
var _path82;
var _excluded87 = ["title", "titleId"];
function _extends94() {
  _extends94 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends94.apply(this, arguments);
}
function _objectWithoutProperties87(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose90(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose90(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgShield = function SvgShield2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties87(_ref2, _excluded87);
  return React101.createElement("svg", _extends94({
    width: 28,
    height: 28,
    viewBox: "0 0 28 28",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React101.createElement("title", {
    id: titleId
  }, title2) : null, _rect5 || (_rect5 = React101.createElement("rect", {
    width: 28,
    height: 28,
    rx: 14,
    fill: "#4779FF"
  })), _path82 || (_path82 = React101.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M13.444 5.88a.833.833 0 0 1 1.112 0A9.13 9.13 0 0 0 21.14 8.2c.395-.02.75.24.848.624.226.87.345 1.782.345 2.721 0 5.05-3.453 9.29-8.125 10.492a.833.833 0 0 1-.416 0c-4.672-1.202-8.125-5.443-8.125-10.492 0-.939.12-1.85.345-2.722a.833.833 0 0 1 .849-.623 9.13 9.13 0 0 0 6.584-2.322Zm-5.96 3.999c-.099.54-.15 1.097-.15 1.667A9.171 9.171 0 0 0 14 20.368a9.171 9.171 0 0 0 6.516-10.49A10.788 10.788 0 0 1 14 7.587a10.788 10.788 0 0 1-6.515 2.293Zm9.605 1.912a.833.833 0 0 1 0 1.178l-3.333 3.333a.833.833 0 0 1-1.178 0l-1.667-1.666a.834.834 0 0 1 1.178-1.179l1.078 1.078 2.744-2.745a.833.833 0 0 1 1.178 0Z",
    fill: "#fff"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/SettingsView/SettingsView.js
var import_react_dom294 = __toESM(require_react_dom(), 1);
var import_qrcode289 = __toESM(require_browser(), 1);
var SettingsView = () => {
  var _a, _b, _c, _d, _e2, _f, _g16, _h, _j, _k, _l, _m, _o, _p;
  const { projectSettings, primaryWallet, user, handleLogOut } = useInternalDynamicContext();
  const { setDynamicWidgetView } = useWidgetContext();
  const { addEmbeddedWalletRecoveryEmail } = useEmbeddedWalletAuthenticator();
  const { createPassword } = useEmbeddedWallet();
  const { initExportProcess } = useEmbeddedReveal();
  const { isTurnkeyWallet, isTurnkeyWalletWithoutAuthenticator, hasRecoveryEmail } = useIsTurnkeyWallet();
  const { theme } = useThemeContext();
  const { t: t2 } = useTranslation();
  const { initPasskeyRecoveryProcess, shouldInitRecovery } = usePasskeyRecovery();
  const [isLoading, setIsLoading] = (0, import_react497.useState)(false);
  const { getEOAWallet } = useSmartWallets();
  const cbWalletProperties = (_b = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _a === void 0 ? void 0 : _a.find(({ walletName }) => walletName === "coinbasempc")) === null || _b === void 0 ? void 0 : _b.walletProperties;
  const isCoinbaseWallet = isCoinbaseMpcWalletConnector(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector);
  const hasClaimedCoinbaseMPC = Boolean(cbWalletProperties === null || cbWalletProperties === void 0 ? void 0 : cbWalletProperties.claimed);
  const turnkeyWalletProperties = (_d = (_c = user === null || user === void 0 ? void 0 : user.verifiedCredentials) === null || _c === void 0 ? void 0 : _c.find(({ walletName }) => walletName === null || walletName === void 0 ? void 0 : walletName.startsWith("turnkey"))) === null || _d === void 0 ? void 0 : _d.walletProperties;
  const isTurnkeyHDWallet = turnkeyWalletProperties === null || turnkeyWalletProperties === void 0 ? void 0 : turnkeyWalletProperties.turnkeyHDWalletId;
  const isPasskeyEnabled = Boolean((_h = (_g16 = (_f = (_e2 = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _e2 === void 0 ? void 0 : _e2.embeddedWallets) === null || _f === void 0 ? void 0 : _f.supportedSecurityMethods) === null || _g16 === void 0 ? void 0 : _g16.passkey) === null || _h === void 0 ? void 0 : _h.isEnabled);
  const isTurnkeyWalletWithAuthenticator = isTurnkeyWallet && !isTurnkeyWalletWithoutAuthenticator;
  const eoaWallet = primaryWallet && getEOAWallet(primaryWallet);
  const wallet = eoaWallet !== null && eoaWallet !== void 0 ? eoaWallet : primaryWallet;
  const isSessionKeyCompatible = primaryWallet && isSessionKeyCompatibleWallet(primaryWallet) || eoaWallet && isSessionKeyCompatibleWallet(eoaWallet);
  const handlePasskeyClick = () => __awaiter(void 0, void 0, void 0, function* () {
    if (isTurnkeyWalletWithAuthenticator) {
      return setDynamicWidgetView("manage-passkeys");
    }
    setIsLoading(true);
    try {
      yield initPasskeyRecoveryProcess("passkey");
    } finally {
      setIsLoading(false);
    }
  });
  const handleExportClick = (recoveryPhrase) => __awaiter(void 0, void 0, void 0, function* () {
    if (!isSessionKeyCompatible) {
      if (yield shouldInitRecovery()) {
        yield initPasskeyRecoveryProcess(void 0, "reveal");
      }
    }
    return initExportProcess(recoveryPhrase);
  });
  const renderPasskeysButtonEndSlot = () => {
    if (isTurnkeyWalletWithAuthenticator)
      return (0, import_jsx_runtime470.jsx)(SvgCheckCircle, { className: "settings-view__body__section__button__icon-secondary--success" });
    if (isLoading)
      return (0, import_jsx_runtime470.jsx)(Spinner, {});
    return (0, import_jsx_runtime470.jsx)(SvgAdd, {});
  };
  const renderEmailButtonEndSlot = () => {
    if (hasRecoveryEmail)
      return (0, import_jsx_runtime470.jsx)(SvgCheckCircle, { className: "settings-view__body__section__button__icon-secondary--success" });
    if (isLoading)
      return (0, import_jsx_runtime470.jsx)(Spinner, {});
    return (0, import_jsx_runtime470.jsx)(SvgAdd, { "data-testid": "email-add-icon" });
  };
  const isEmbeddedWallet = Boolean(wallet && (((_k = (_j = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _j === void 0 ? void 0 : _j.key) === null || _k === void 0 ? void 0 : _k.startsWith("turnkey")) || ((_m = (_l = wallet === null || wallet === void 0 ? void 0 : wallet.connector) === null || _l === void 0 ? void 0 : _l.key) === null || _m === void 0 ? void 0 : _m.startsWith("coinbasempc"))));
  const isMfaEnabled = Boolean((_p = (_o = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security) === null || _o === void 0 ? void 0 : _o.mfa) === null || _p === void 0 ? void 0 : _p.enabled);
  const shouldShowPasskeyMFA = isPasskeyEnabled && isTurnkeyWallet && !isSessionKeyCompatible;
  const shouldShowSecuritySection = isMfaEnabled || isCoinbaseWallet || shouldShowPasskeyMFA;
  return (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view", children: [(0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body", children: [(0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section", children: [(0, import_jsx_runtime470.jsx)("div", { className: "settings-view__body__section__title", children: t2("dyn_settings.global_section.title") }), (0, import_jsx_runtime470.jsx)(TypographyButton, { dataTestId: "currency-button", buttonClassName: classNames("settings-view__body__section__button", "settings-view__body__section__button__badge"), startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section__button__start-slot", children: [(0, import_jsx_runtime470.jsx)(SvgCurrency, { className: "settings-view__body__section__button__icon" }), (0, import_jsx_runtime470.jsx)(Typography, { color: "primary", weight: "medium", copykey: "dyn_settings.global_section.currency.badge", children: t2("dyn_settings.global_section.currency.title") }), (0, import_jsx_runtime470.jsx)(Badge, { text: t2("dyn_settings.global_section.currency.badge"), copykey: "dyn_settings.global_section.currency.badge", variant: "secondary" })] })
  ), endSlot: (0, import_jsx_runtime470.jsx)(SvgChevronLeft, { className: "settings-view__body__section__button__icon-secondary--rotate" }), disabled: true, showInternalLoading: false })] }), shouldShowSecuritySection && (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section", children: [(0, import_jsx_runtime470.jsx)("div", { className: classNames("settings-view__body__section__title", {
    "settings-view__body__section__title__info-icon": !isTurnkeyWalletWithAuthenticator
  }), children: t2("dyn_settings.security_section.title") }), shouldShowPasskeyMFA && (0, import_jsx_runtime470.jsx)(TypographyButton, { dataTestId: "manage-passkeys-button", onClick: () => handlePasskeyClick(), buttonClassName: classNames("settings-view__body__section__button", {
    "settings-view__body__section__button__badge": !isTurnkeyWalletWithAuthenticator
  }), startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section__button__start-slot", children: [(0, import_jsx_runtime470.jsx)(PasskeyDeviceIcon, { className: "settings-view__body__section__button__icon", defaultIcon: (0, import_jsx_runtime470.jsx)(SvgAndroidTouchId, { "data-testid": "default-icon" }) }), (0, import_jsx_runtime470.jsx)(Typography, { color: "primary", weight: "medium", copykey: "dyn_settings.security_section.passkey_button", children: t2("dyn_settings.security_section.passkey_button") }), !isTurnkeyWalletWithAuthenticator && (0, import_jsx_runtime470.jsx)(Badge, { text: t2("dyn_settings.tags.recommended"), copykey: "dyn_settings.tags.recommended", variant: "secondary" })] })
  ), endSlot: renderPasskeysButtonEndSlot(), disabled: isLoading, showInternalLoading: false }), isMfaEnabled && (0, import_jsx_runtime470.jsx)(TypographyButton, { dataTestId: "manage-mfa-button", onClick: () => setDynamicWidgetView("manage-mfa"), buttonClassName: "settings-view__body__section__button", startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section__button__start-slot", children: [(0, import_jsx_runtime470.jsx)(SvgShield, { className: "settings-view__body__section__button__icon" }), (0, import_jsx_runtime470.jsx)(Typography, { color: "primary", weight: "medium", copykey: "dyn_settings.security_section.mfa_button", children: t2("dyn_settings.security_section.mfa_button") })] })
  ), endSlot: (0, import_jsx_runtime470.jsx)(SvgChevronLeft, { className: "settings-view__body__section__button__icon-secondary--rotate" }), disabled: isLoading, showInternalLoading: false }), isCoinbaseWallet && (0, import_jsx_runtime470.jsx)(TypographyButton, { dataTestId: "manage-password-button", onClick: () => createPassword(!hasClaimedCoinbaseMPC), buttonClassName: "settings-view__body__section__button", startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section__button__start-slot", children: [(0, import_jsx_runtime470.jsx)(SvgAltKey, { className: "settings-view__body__section__button__icon" }), (0, import_jsx_runtime470.jsx)(Typography, { color: "primary", weight: "medium", copykey: "dyn_settings.security_section.passkey_button", children: t2("dyn_settings.security_section.password_button") })] })
  ), endSlot: hasClaimedCoinbaseMPC ? (0, import_jsx_runtime470.jsx)(SvgCheckCircle, { className: "settings-view__body__section__button__icon-secondary--success" }) : void 0, showInternalLoading: false })] }), isEmbeddedWallet && (0, import_jsx_runtime470.jsxs)(import_jsx_runtime470.Fragment, { children: [isTurnkeyWallet && !hasRecoveryEmail && !isSessionKeyCompatible && (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section", children: [(0, import_jsx_runtime470.jsxs)("div", { className: classNames("settings-view__body__section__title", "settings-view__body__section__title__info-icon"), children: [t2("dyn_settings.identity_section.title"), (0, import_jsx_runtime470.jsx)(Icon, { size: "small", children: (0, import_jsx_runtime470.jsx)(SvgFooterInfoIcon, { className: "settings-view__body__section__title__info-icon", "data-testid": "email-info-icon-title" }) })] }), (0, import_jsx_runtime470.jsx)(TypographyButton, { dataTestId: "manage-email-recovery-button", onClick: addEmbeddedWalletRecoveryEmail, buttonClassName: classNames("settings-view__body__section__button", "settings-view__body__section__button__badge"), startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section__button__start-slot", children: [(0, import_jsx_runtime470.jsx)(SvgSignInWithEmail, { className: "settings-view__body__section__button__icon email" }), (0, import_jsx_runtime470.jsx)(Typography, { color: "primary", weight: "medium", copykey: "dyn_settings.identity_section.add_email_button", children: t2("dyn_settings.identity_section.add_email_button") }), (0, import_jsx_runtime470.jsx)(Badge, { text: t2("dyn_settings.tags.recommended"), copykey: "dyn_settings.tags.recommended", variant: "secondary" })] })
  ), endSlot: renderEmailButtonEndSlot(), disabled: isLoading || hasRecoveryEmail, showInternalLoading: false })] }), (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section", children: [(0, import_jsx_runtime470.jsx)("div", { className: "settings-view__body__section__title", children: t2("dyn_settings.export_section.title") }), (0, import_jsx_runtime470.jsx)(TypographyButton, { dataTestId: "embedded-reveal-account-button", onClick: () => handleExportClick(), buttonClassName: "settings-view__body__section__button", startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section__button__start-slot", children: [(0, import_jsx_runtime470.jsx)(SvgExportPrivateKey, { className: `settings-view__body__section__button__icon${theme.theme.name === "dark" ? "__stroke" : ""}` }), (0, import_jsx_runtime470.jsx)(Typography, { color: "primary", weight: "medium", copykey: "dyn_settings.export_section.private_key_button", children: t2("dyn_settings.export_section.private_key_button") })] })
  ), endSlot: (0, import_jsx_runtime470.jsx)(SvgChevronLeft, { className: "settings-view__body__section__button__icon-secondary--rotate" }), showInternalLoading: false }), isTurnkeyHDWallet && (0, import_jsx_runtime470.jsx)(TypographyButton, { dataTestId: "embedded-reveal-button", onClick: () => handleExportClick(true), buttonClassName: "settings-view__body__section__button", startSlot: (
    // eslint-disable-next-line react/jsx-wrap-multilines
    (0, import_jsx_runtime470.jsxs)("div", { className: "settings-view__body__section__button__start-slot", children: [(0, import_jsx_runtime470.jsx)(SvgExportRecoveryPhrase, { className: `settings-view__body__section__button__icon${theme.theme.name === "dark" ? "__stroke" : ""}` }), (0, import_jsx_runtime470.jsx)(Typography, { color: "primary", weight: "medium", copykey: "dyn_settings.export_section.srp_button", children: t2("dyn_settings.export_section.srp_button") })] })
  ), endSlot: (0, import_jsx_runtime470.jsx)(SvgChevronLeft, { className: "settings-view__body__section__button__icon-secondary--rotate" }), showInternalLoading: false })] })] })] }), (0, import_jsx_runtime470.jsx)("div", { className: "settings-view__logout-button-container", children: (0, import_jsx_runtime470.jsx)(TypographyButton, { buttonClassName: "settings-view__logout-button-container__button", onClick: handleLogOut, dataTestId: "logout-button", copykey: "dyn_settings.buttonLogout", startSlot: (0, import_jsx_runtime470.jsx)(SvgLogout, {}), children: t2("dyn_settings.button_logout") }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManageMfaWidgetView/ManageMfaWidgetView.js
var import_jsx_runtime473 = __toESM(require_jsx_runtime(), 1);
var import_react499 = __toESM(require_react(), 1);
var import_react_dom295 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/MfaDeviceTileSkeleton/MfaDeviceTileSkeleton.js
var import_jsx_runtime471 = __toESM(require_jsx_runtime(), 1);
var MfaDeviceTileSkeleton = () => (0, import_jsx_runtime471.jsx)("div", { className: "mfa-device-skeleton", "data-testid": "mfa-device-loading", children: (0, import_jsx_runtime471.jsxs)("div", { className: "mfa-device-skeleton__details", children: [(0, import_jsx_runtime471.jsx)(Skeleton, {}), (0, import_jsx_runtime471.jsx)(Skeleton, {})] }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManageMfaWidgetView/components/UserDeviceTile.js
var import_jsx_runtime472 = __toESM(require_jsx_runtime(), 1);
var import_react498 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/shared/assets/authenticator.js
var React102 = __toESM(require_react(), 1);
var _path83;
var _excluded88 = ["title", "titleId"];
function _extends95() {
  _extends95 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends95.apply(this, arguments);
}
function _objectWithoutProperties88(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose91(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose91(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var SvgAuthenticator = function SvgAuthenticator2(_ref2) {
  var title2 = _ref2.title, titleId = _ref2.titleId, props = _objectWithoutProperties88(_ref2, _excluded88);
  return React102.createElement("svg", _extends95({
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    "aria-labelledby": titleId
  }, props), title2 ? React102.createElement("title", {
    id: titleId
  }, title2) : null, _path83 || (_path83 = React102.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M21.75 8.25a6 6 0 1 0-12 0 6 6 0 0 0 12 0Zm-3 0a3 3 0 1 0-6 0 3 3 0 0 0 6 0Zm-9.37 3.892a7.512 7.512 0 0 0 2.005 2.237l-2.83 2.83 2.102 2.104-2.121 2.12-2.103-2.102-2.062 2.062L2.25 19.27l7.13-7.13Z",
    fill: "#ABACB2"
  })));
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManageMfaWidgetView/components/UserDeviceTile.js
var UserDeviceTile = ({ userDevice, deleteDevice, isMfaRequired }) => {
  const optionsMenu = [
    {
      Icon: null,
      callback: () => deleteDevice(userDevice.id),
      text: "Delete"
    }
  ];
  const timeSinceCreated = userDevice.verifiedAt && getTimeSince(new Date(userDevice.verifiedAt));
  return (0, import_jsx_runtime472.jsxs)("div", { className: "manage-mfa-widget-view__list-tile", children: [(0, import_jsx_runtime472.jsx)(SvgAuthenticator, { className: "manage-mfa-widget-view__list-tile__icon" }), (0, import_jsx_runtime472.jsxs)("div", { className: "manage-mfa-widget-view__list-tile__details", children: [(0, import_jsx_runtime472.jsx)("div", { className: "manage-mfa-widget-view__list-tile__details__title", children: (0, import_jsx_runtime472.jsx)(Typography, { variant: "body_normal", color: "primary", children: userDevice.alias || "Authenticator App" }) }), timeSinceCreated && (0, import_jsx_runtime472.jsxs)(Typography, { variant: "body_small", color: "secondary", children: ["Created ", timeSinceCreated.value, " ", timeSinceCreated.unit, " ago"] })] }), isMfaRequired || (0, import_jsx_runtime472.jsx)("div", { style: {
    cursor: "pointer",
    display: "flex"
  }, children: (0, import_jsx_runtime472.jsx)(DotsMenu, { direction: "left", "data-testid": "dots-menu", options: optionsMenu, buttonClassName: "manage-mfa-widget-view__list-tile__dots-menu", buttonClassNameWithOpenMenu: "manage-mfa-widget-view__list-tile__dots-menu" }) })] }, userDevice.id);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManageMfaWidgetView/components/utils/sort.js
var sortDevicesByDefault = (a, b) => a._default === b._default ? 0 : a._default ? -1 : 1;
var sortDevicesByVerifiedDateDesc = (a, b) => {
  const dateA = a.verifiedAt ? new Date(a.verifiedAt).getTime() : 0;
  const dateB = b.verifiedAt ? new Date(b.verifiedAt).getTime() : 0;
  return dateA - dateB;
};
var sortDevices = (devices) => devices.sort(sortDevicesByVerifiedDateDesc).sort(sortDevicesByDefault);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/ManageMfaWidgetView/ManageMfaWidgetView.js
var import_qrcode290 = __toESM(require_browser(), 1);
var ManageMfaWidgetView = () => {
  var _a;
  const [userDevices, setUserDevices] = (0, import_react499.useState)([]);
  const [mfaMethod, setMfaMethod] = (0, import_react499.useState)();
  const [loading, setLoading] = (0, import_react499.useState)(false);
  const { setDynamicWidgetView } = useWidgetContext();
  const { setShowMfaQRCode, setShowOTPVerification } = useDynamicModals();
  const { setView } = useViewContext();
  const { getUserDevices, deleteUserDevice } = useMfa();
  const { t: t2 } = useTranslation();
  const { projectSettings, setShowAuthFlow } = useInternalDynamicContext();
  const isMfaRequired = Boolean((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.mfa) === null || _a === void 0 ? void 0 : _a.required);
  const getDevices = (0, import_react499.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    setLoading(true);
    const devices = yield getUserDevices();
    setUserDevices(sortDevices(devices));
    setLoading(false);
  }), [getUserDevices]);
  useDynamicEvents("mfaCompletionSuccess", (_b) => __awaiter(void 0, [_b], void 0, function* ({ mfaToken }) {
    if (mfaToken) {
      if ((mfaMethod === null || mfaMethod === void 0 ? void 0 : mfaMethod.action) === "remove") {
        yield deleteUserDevice(mfaMethod.params.deviceId, mfaToken);
        setMfaMethod(void 0);
      }
    }
    getDevices();
  }));
  const deleteDevice = (id) => __awaiter(void 0, void 0, void 0, function* () {
    setMfaMethod({ action: "remove", params: { deviceId: id } });
    setShowOTPVerification(true);
  });
  useEffectOnce(() => {
    getDevices();
  });
  const backButton = (0, import_jsx_runtime473.jsx)(IconButton, { type: "button", onClick: () => setDynamicWidgetView("settings"), "data-testid": "back-button", children: (0, import_jsx_runtime473.jsx)(SvgChevronLeft, {}) });
  const handleGenerateBackupCodes = () => __awaiter(void 0, void 0, void 0, function* () {
    setShowAuthFlow(true);
    setView("mfa-display-backup-codes", { regenerateCodes: true });
  });
  return (0, import_jsx_runtime473.jsxs)("div", { className: "manage-mfa-widget-view", children: [(0, import_jsx_runtime473.jsx)(ModalHeader, { leading: backButton, children: (0, import_jsx_runtime473.jsx)("div", { className: "send-balance-page-layout__header-content", children: (0, import_jsx_runtime473.jsx)(Typography, { variant: "title", color: "primary", copykey: "dyn_manage_mfa.title", children: t2("dyn_manage_mfa.title") }) }) }), (0, import_jsx_runtime473.jsxs)("div", { className: "manage-mfa-widget-view__scroll-container", children: [loading && (0, import_jsx_runtime473.jsx)(MfaDeviceTileSkeleton, {}), !loading && userDevices.length === 0 && (0, import_jsx_runtime473.jsx)(Typography, { className: "manage-mfa-widget-view__no-devices", variant: "body_normal", color: "secondary", copykey: "dyn_manage_mfa.no_devices", children: t2("dyn_manage_mfa.no_devices") }), userDevices.map((device, index) => (0, import_jsx_runtime473.jsx)(UserDeviceTile, { isMfaRequired, userDevice: device, index, deleteDevice }, device.id))] }), (0, import_jsx_runtime473.jsx)("div", { className: "manage-mfa-widget-view__add-mfa-button-container", children: userDevices.length > 0 ? (0, import_jsx_runtime473.jsx)(TypographyButton, { buttonClassName: "manage-mfa-widget-view__add-mfa-button-container__button", onClick: handleGenerateBackupCodes, copykey: "dyn_manage_mfa.generate_backup_codes_button", children: t2("dyn_manage_mfa.generate_backup_codes_button") }) : (0, import_jsx_runtime473.jsx)(TypographyButton, { buttonClassName: "manage-mfa-widget-view__add-mfa-button-container__button", onClick: () => setShowMfaQRCode(true), copykey: "dyn_manage_mfa.add_mfa_button", startSlot: (0, import_jsx_runtime473.jsx)(SvgAdd, {}), children: t2("dyn_manage_mfa.add_mfa_button") }) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/GlobalWalletView/GlobalWalletView.js
var import_jsx_runtime475 = __toESM(require_jsx_runtime(), 1);
var import_react501 = __toESM(require_react(), 1);
var import_react_dom296 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/GlobalWalletView/scanner/GlobalWalletScanner.js
var import_jsx_runtime474 = __toESM(require_jsx_runtime(), 1);
var import_react500 = __toESM(require_react(), 1);
var GlobalWalletScanner = ({ onScan, jsQR }) => {
  const videoRef = (0, import_react500.useRef)(null);
  const canvasRef = (0, import_react500.useRef)(null);
  (0, import_react500.useEffect)(() => {
    const video = videoRef.current;
    const canvas = canvasRef.current;
    if (!video || !canvas)
      return;
    const ctx = canvas.getContext("2d");
    if (!ctx)
      return;
    const constraints = {
      video: { facingMode: "environment" }
    };
    navigator.mediaDevices.getUserMedia(constraints).then((stream) => {
      video.srcObject = stream;
      video.setAttribute("playsinline", "true");
      video.play();
      requestAnimationFrame(tick);
    });
    const tick = () => {
      if (video.readyState === video.HAVE_ENOUGH_DATA) {
        canvas.height = video.videoHeight;
        canvas.width = video.videoWidth;
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const code = jsQR(imageData.data, imageData.width, imageData.height, {
          inversionAttempts: "dontInvert"
        });
        if (code) {
          onScan(code.data);
        }
      }
      requestAnimationFrame(tick);
    };
    return () => {
      const stream = video.srcObject;
      const tracks = stream === null || stream === void 0 ? void 0 : stream.getTracks();
      tracks === null || tracks === void 0 ? void 0 : tracks.forEach((track) => track.stop());
    };
  }, [onScan]);
  return (0, import_jsx_runtime474.jsx)("div", { children: (0, import_jsx_runtime474.jsxs)("div", { className: "videoWrapper", children: [(0, import_jsx_runtime474.jsx)("video", { ref: videoRef, className: "qrVideo" }), (0, import_jsx_runtime474.jsx)("canvas", { ref: canvasRef, style: { display: "none" } })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/views/GlobalWalletView/GlobalWalletView.js
var import_qrcode291 = __toESM(require_browser(), 1);
var GlobalWalletView = () => {
  var _a;
  const { t: t2 } = useTranslation();
  const { setDynamicWidgetView, goToInitialDynamicWidgetView } = useWidgetContext();
  const { setView } = useViewContext();
  const { setShowAuthFlow } = useInternalDynamicContext();
  const { primaryWallet } = useDynamicContext();
  const [walletConnectUri, setWalletConnectUri] = (0, import_react501.useState)("");
  const [bannerMessage, setBannerMessage] = (0, import_react501.useState)(null);
  const [isScanned, setIsScanned] = (0, import_react501.useState)(false);
  const { globalWallet } = (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (_a = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector) !== null && _a !== void 0 ? _a : {}
  );
  if (!globalWallet)
    throw new Error("Global Wallet not found");
  const showBanner = (0, import_react501.useCallback)((message, type) => {
    setBannerMessage({ message, type });
    const timeout = type === "success" ? 2e3 : 3e3;
    setTimeout(() => {
      setBannerMessage(null);
      if (type === "success")
        goToInitialDynamicWidgetView();
    }, timeout);
  }, [goToInitialDynamicWidgetView]);
  const popupConfirmView = () => {
    const pendingPairing = globalWallet.getPendingPairing();
    if (!pendingPairing)
      throw new Error("No pending pairing");
    const { name, url, icons } = pendingPairing.params.proposer.metadata;
    setView("global-wallet-confirm", {
      onCancel: () => {
        setDynamicWidgetView("global-wallet");
        setShowAuthFlow(false, {
          ignoreIfIsEmbeddedWidget: false,
          performMultiWalletChecks: false
        });
        setWalletConnectUri("");
      },
      onConfirm: () => __awaiter(void 0, void 0, void 0, function* () {
        try {
          yield globalWallet.confirmPairing(true);
          setDynamicWidgetView("global-wallet");
          setShowAuthFlow(false, {
            ignoreIfIsEmbeddedWidget: false,
            performMultiWalletChecks: false
          });
          showBanner(t2("global_wallet.banner.success", {
            name: name !== null && name !== void 0 ? name : t2("global_wallet.the_dapp")
          }), "success");
        } catch (error) {
          showBanner(t2("global_wallet.banner.warning", {
            name: name !== null && name !== void 0 ? name : t2("global_wallet.the_dapp")
          }), "error");
        }
      }),
      pairingInfo: { icons, name, url }
    });
    setShowAuthFlow(true, {
      ignoreIfIsEmbeddedWidget: false,
      performMultiWalletChecks: false
    });
  };
  const handlePairing = (0, import_react501.useCallback)(
    () => __awaiter(void 0, void 0, void 0, function* () {
      if (!walletConnectUri.startsWith("wc:")) {
        showBanner(t2("global_wallet.banner.bad_input"), "error");
        return;
      }
      try {
        yield globalWallet.pairWithWC(walletConnectUri);
        globalWallet.getWeb3Wallet().on("session_proposal", popupConfirmView);
      } catch (error) {
        const errorMessage = String(error);
        if (errorMessage.includes("expired")) {
          showBanner(t2("global_wallet.banner.expired"), "error");
        } else if (errorMessage.includes("exists")) {
          showBanner(t2("global_wallet.banner.already_connected", {
            name: t2("global_wallet.this_app")
          }), "success");
        } else {
          showBanner(t2("global_wallet.banner.warning", {
            name: t2("global_wallet.the_dapp")
          }), "error");
        }
      }
    }),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [walletConnectUri]
  );
  const handleScan = (0, import_react501.useCallback)((result) => {
    if (result) {
      setIsScanned(true);
      setWalletConnectUri(result);
    }
  }, []);
  (0, import_react501.useEffect)(() => {
    if (walletConnectUri.startsWith("wc:")) {
      handlePairing();
    }
  }, [walletConnectUri]);
  const renderHeader = () => (0, import_jsx_runtime475.jsxs)("div", { className: "header", children: [(0, import_jsx_runtime475.jsx)(IconButton, { type: "button", onClick: goToInitialDynamicWidgetView, "data-testid": "back-button", children: (0, import_jsx_runtime475.jsx)(SvgArrowLeft, {}) }), (0, import_jsx_runtime475.jsx)(Typography, { variant: "title", weight: "medium", color: "primary", as: "h1", copykey: "global_wallet.connect_to_apps", children: t2("global_wallet.connect_to_apps") }), isMobile() && (0, import_jsx_runtime475.jsx)(IconButton, { type: "button", onClick: () => {
    setView("global-wallet-info");
    setShowAuthFlow(true, {
      ignoreIfIsEmbeddedWidget: false,
      performMultiWalletChecks: false
    });
  }, "data-testid": "info-button", children: (0, import_jsx_runtime475.jsx)(SvgQuestionMark, {}) })] });
  const renderScanner = () => isMobile() && (0, import_jsx_runtime475.jsxs)(import_jsx_runtime475.Fragment, { children: [(0, import_jsx_runtime475.jsxs)("div", { className: "scanner-wrapper", children: [(0, import_jsx_runtime475.jsx)(GlobalWalletScanner, { onScan: handleScan, jsQR: globalWallet.qrScanner }), (0, import_jsx_runtime475.jsxs)("div", { className: "scanner-overlay", children: [(0, import_jsx_runtime475.jsxs)("div", { className: "scanner-frame", children: [(0, import_jsx_runtime475.jsx)("div", { className: "corner top-left" }), (0, import_jsx_runtime475.jsx)("div", { className: "corner top-right" }), (0, import_jsx_runtime475.jsx)("div", { className: "corner bottom-left" }), (0, import_jsx_runtime475.jsx)("div", { className: "corner bottom-right" })] }), (0, import_jsx_runtime475.jsxs)("div", { className: "scanner-overlay-content", children: [(0, import_jsx_runtime475.jsx)(SvgBlueWalletconnect, { className: "scanner-icon" }), (0, import_jsx_runtime475.jsx)(Typography, { variant: "body_small", weight: "regular", color: "white", copykey: "global_wallet.scan_qr_code", children: t2("global_wallet.scan_qr_code") })] })] })] }), (0, import_jsx_runtime475.jsx)(Divider, { text: t2("global_wallet.or") })] });
  const renderInput = () => (0, import_jsx_runtime475.jsxs)("div", { className: "wallet-connect-card", children: [(0, import_jsx_runtime475.jsx)("div", { className: "input-group", children: (0, import_jsx_runtime475.jsx)(Input, { copykey: "global_wallet.walletconnect_uri", id: "walletconnect-uri", label: t2("global_wallet.walletconnect_uri"), placeholder: "wc:...", value: isScanned ? "" : walletConnectUri, onChange: (e2) => {
    setWalletConnectUri(e2.target.value);
    setIsScanned(false);
  }, variant: "dense" }) }), bannerMessage && (0, import_jsx_runtime475.jsx)("div", { className: `banner ${bannerMessage.type}`, children: (0, import_jsx_runtime475.jsx)(Typography, { variant: "body_small", weight: "regular", color: "primary", children: bannerMessage.message }) })] });
  const renderInfoCard = () => !isMobile() && (0, import_jsx_runtime475.jsx)("div", { className: "info-card", children: (0, import_jsx_runtime475.jsxs)("div", { className: "wrapper", children: [(0, import_jsx_runtime475.jsx)(Typography, { variant: "body_small", weight: "bold", color: "primary", as: "h2", children: t2("global_wallet.help.title") }), (0, import_jsx_runtime475.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", children: t2("global_wallet.help.step.1") }), (0, import_jsx_runtime475.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", children: t2("global_wallet.help.step.2") }), (0, import_jsx_runtime475.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", children: (0, import_jsx_runtime475.jsxs)("span", { className: "inline-logo-text", children: ["3. Open WalletConnect", (0, import_jsx_runtime475.jsx)(SvgBlueWalletconnect, { className: "inline-logo" }), " from the list"] }) }), (0, import_jsx_runtime475.jsx)(Typography, { variant: "body_small", weight: "regular", color: "secondary", children: (0, import_jsx_runtime475.jsxs)("span", { className: "inline-logo-text", children: ["4. Locate and click ", (0, import_jsx_runtime475.jsx)(SvgCopy, { className: "inline-logo" }), " to copy the URI code"] }) })] }) });
  return (0, import_jsx_runtime475.jsxs)("div", { className: "connect-dapps-view", children: [renderHeader(), renderScanner(), renderInput(), renderInfoCard()] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicWidgetViews/DynamicWidgetViews.js
var mapViewToComponent2 = {
  "edit-profile": EditProfileView2,
  "global-wallet": GlobalWalletView,
  "manage-mfa": ManageMfaWidgetView,
  "manage-passkeys": ManagePasskeysWidgetView,
  profile: ProfileView2,
  "send-balance": SendBalanceWidgetView,
  settings: SettingsView,
  wallets: WalletsView2
};
var DynamicWidgetViews = () => {
  const { dynamicWidgetView } = useWidgetContext();
  const ViewComponent = mapViewToComponent2[dynamicWidgetView] || mapViewToComponent2.wallets;
  return (0, import_jsx_runtime476.jsx)(ViewComponent, {});
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/context/DynamicWidgetContext.types.js
var DynamicSettingsViews = ["settings"];
var DynamicGlobalWalletViews = ["global-wallet"];
var DynamicPasskeyWidgetViews = ["manage-passkeys"];
var DynamicMfaWidgetViews = ["manage-mfa"];
var DynamicTransactionsWidgetViews = ["send-balance"];

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/BottomNavBar/BottomNavBar.js
var import_jsx_runtime477 = __toESM(require_jsx_runtime(), 1);
var import_react502 = __toESM(require_react(), 1);
var import_react_dom297 = __toESM(require_react_dom(), 1);
var import_qrcode292 = __toESM(require_browser(), 1);
var BottomNavBar = ({ value, onChange, options: options2 }) => {
  const isActive = (_value) => _value === value;
  return (0, import_jsx_runtime477.jsx)("div", { className: "footer-options-switcher__container", "data-testid": "OptionsSwitcher", children: options2.map((option) => (0, import_jsx_runtime477.jsxs)("div", { className: classNames("footer-options-switcher__tab", {
    "footer-options-switcher__tab--active": isActive(option.value)
  }), onClick: () => onChange(option.value), children: [option.icon, (0, import_jsx_runtime477.jsx)(Typography, { variant: "body_small", className: "footer-options-switcher__label", children: option.label })] }, option.value)) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/layout/DynamicUserProfileLayout/DynamicUserProfileLayout.js
var shouldNotRenderHeaderViews = [
  ...DynamicPasskeyWidgetViews,
  ...DynamicTransactionsWidgetViews,
  ...DynamicMfaWidgetViews,
  ...DynamicSettingsViews,
  ...DynamicGlobalWalletViews
];
var DynamicUserProfileLayout = ({ variant, className, style }) => {
  const { multiWallet } = useInternalDynamicContext();
  const isKYCEnabled = useKYCFlag();
  const { dynamicWidgetView, setDynamicWidgetView, overridenWidgetView } = useWidgetContext();
  const getNavBarOptions = () => {
    const options2 = [];
    if (multiWallet) {
      options2.push({
        icon: (0, import_jsx_runtime478.jsx)(SvgWalletOutlineV2, {}),
        label: "Wallets",
        value: "wallets"
      });
    }
    if (isKYCEnabled) {
      options2.push({
        icon: (0, import_jsx_runtime478.jsx)(SvgProfileOutline, {}),
        label: "Profile",
        value: "profile"
      });
    }
    options2.push({
      icon: (0, import_jsx_runtime478.jsx)(SvgSettingsOutline, {}),
      label: "Settings",
      value: "settings"
    });
    return options2;
  };
  const shouldRenderHeader = !shouldNotRenderHeaderViews.includes(dynamicWidgetView);
  const shouldRenderOptionsSwitcher = multiWallet || isKYCEnabled;
  return (0, import_jsx_runtime478.jsx)(OverlayCardTarget, { children: (0, import_jsx_runtime478.jsxs)("div", { className: classNames(className, "dynamic-user-profile-layout"), style, children: [shouldRenderHeader && (0, import_jsx_runtime478.jsx)(MemoizedDynamicWidgetHeader, { variant }), (0, import_jsx_runtime478.jsx)(DynamicWidgetViews, {}), (0, import_jsx_runtime478.jsx)(DynamicWidgetPrompts, {}), shouldRenderOptionsSwitcher && (0, import_jsx_runtime478.jsx)(BottomNavBar, { value: overridenWidgetView, onChange: (view) => setDynamicWidgetView(view), options: getNavBarOptions() })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedUserProfile/DynamicEmbeddedUserProfile.js
var import_qrcode294 = __toESM(require_browser(), 1);
var DynamicEmbeddedUserProfile = ({ background = "none", className, style }) => {
  const show = useIsLoggedIn();
  if (!show)
    return null;
  const content = (0, import_jsx_runtime479.jsx)(DynamicUserProfileLayout, { className, style, variant: "modal" });
  return (0, import_jsx_runtime479.jsx)(ShadowDOM, { className: "embedded-widget", children: (0, import_jsx_runtime479.jsx)(PopperProvider, { children: (0, import_jsx_runtime479.jsx)(SandboxIndicatorWrapper, { children: background === "none" ? content : (0, import_jsx_runtime479.jsx)(ModalCard, { border: background === "with-border", sharpBottomRadiusOnMobile: false, children: content }) }) }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicEmbeddedWidget/DynamicEmbeddedWidget.js
var import_jsx_runtime480 = __toESM(require_jsx_runtime(), 1);
var DynamicEmbeddedWidget = ({ background = "none", className, style }) => (
  // Only one of these 2 show at any given time, due these components' own definitions
  (0, import_jsx_runtime480.jsxs)(import_jsx_runtime480.Fragment, { children: [(0, import_jsx_runtime480.jsx)(DynamicEmbeddedAuthFlow, { background, className, style }), (0, import_jsx_runtime480.jsx)(DynamicEmbeddedUserProfile, { background, className, style })] })
);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/DynamicWidget.js
var import_jsx_runtime486 = __toESM(require_jsx_runtime(), 1);
var import_react509 = __toESM(require_react(), 1);
var import_react_dom304 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicNav/DynamicNav.js
var import_jsx_runtime482 = __toESM(require_jsx_runtime(), 1);
var import_react506 = __toESM(require_react(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/AccountControl/AccountControl.js
var import_jsx_runtime481 = __toESM(require_jsx_runtime(), 1);
var import_react505 = __toESM(require_react(), 1);
var import_react_dom300 = __toESM(require_react_dom(), 1);
var import_qrcode295 = __toESM(require_browser(), 1);
var AccountControl = ({ className }) => {
  const { primaryWallet, user } = useInternalDynamicContext();
  const { isOpen, setIsOpen } = useWidgetContext();
  const address = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address;
  const nameService = useFetchNameService(address);
  const renderUserIdentifier = () => {
    if (nameService === null || nameService === void 0 ? void 0 : nameService.name) {
      return nameService === null || nameService === void 0 ? void 0 : nameService.name;
    }
    if (address) {
      return shortenWalletAddress(address, 3, 3);
    }
    return getUserIdentifier(user);
  };
  return (0, import_jsx_runtime481.jsxs)("button", { "data-testid": "AccountControl", onClick: () => setIsOpen(!isOpen), className: classNames("account-control__container", {
    "account-control__container--active": isOpen,
    "account-control__container--multiwallet-disabled": true
  }, className), children: [(0, import_jsx_runtime481.jsx)(UserAvatar, { user, renderWithFallback: false, containerClassName: "account-control__social_icon" }), (0, import_jsx_runtime481.jsx)(AuthProviderIcon, { iconSize: 16 }), (0, import_jsx_runtime481.jsx)(Typography, { className: "account-control__name", as: "p", children: renderUserIdentifier() }), (0, import_jsx_runtime481.jsx)(Icon, { className: "account-control__icon", color: "text-primary", children: (0, import_jsx_runtime481.jsx)(SvgThreeDots, {}) })] });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicNav/DynamicNav.js
var import_react_dom301 = __toESM(require_react_dom(), 1);
var import_qrcode296 = __toESM(require_browser(), 1);
var DynamicNav = () => {
  const [isNetworkPickerOpen, setIsNetworkPickerOpen] = (0, import_react506.useState)(false);
  const { primaryWallet, projectSettings, network } = useInternalDynamicContext();
  const { inlineControlsRef } = useWidgetContext();
  const evmNetworks = (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector) && primaryWallet.connector.evmNetworks || [];
  if (!projectSettings)
    return null;
  const shouldHideNetwork = projectSettings.sdk.hideNetworkInDynamicWidget;
  return (0, import_jsx_runtime482.jsx)(IsBrowser, { children: (0, import_jsx_runtime482.jsxs)("div", { ref: inlineControlsRef, "data-testid": "DynamicNav", className: "dynamic-widget-inline-controls", children: [!shouldHideNetwork && primaryWallet && (0, import_jsx_runtime482.jsx)(PopperProvider, { children: (0, import_jsx_runtime482.jsx)(NetworkPicker, { currentNetwork: network, connector: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector, showNetworkName: true, isNetworkPickerOpen, setIsNetworkPickerOpen, mainClassName: "dynamic-widget-inline-controls__network-picker-main", buttonClassName: "dynamic-widget-inline-controls__network-picker", listClassName: "dynamic-widget-inline-controls__network-picker-list", checkboxClassName: "dynamic-widget-inline-controls__network-picker-checkbox", evmNetworks }) }), (0, import_jsx_runtime482.jsx)("div", { className: "dynamic-widget-inline-controls__account-control-container", children: (0, import_jsx_runtime482.jsx)(AccountControl, { className: "dynamic-widget-inline-controls__account-control" }) })] }) });
};
var ShadowedDynamicNav = () => (0, import_jsx_runtime482.jsx)(ShadowDOM, { children: (0, import_jsx_runtime482.jsx)(DynamicNav, {}) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/components/DynamicUserProfile/DynamicUserProfile.js
var import_jsx_runtime483 = __toESM(require_jsx_runtime(), 1);
var import_react507 = __toESM(require_react(), 1);
var import_react_dom302 = __toESM(require_react_dom(), 1);
var import_qrcode297 = __toESM(require_browser(), 1);
var DynamicUserProfile = ({ variant }) => {
  const { projectSettings, setShowDynamicUserProfile, showAuthFlow } = useInternalDynamicContext();
  const { setIsOpen, isOpen, widgetRef, inlineControlsRef } = useWidgetContext();
  const _variant = (0, import_react507.useMemo)(() => {
    if (isMobile()) {
      return "modal";
    }
    return variant;
  }, [variant]);
  const closeOnOutsideClick = (0, import_react507.useCallback)((e2) => {
    var _a;
    const target = e2.composedPath().shift();
    if ((_a = inlineControlsRef.current) === null || _a === void 0 ? void 0 : _a.contains(target))
      return;
    if (variant === "dropdown" && !showAuthFlow) {
      setShowDynamicUserProfile(false);
    }
  }, [inlineControlsRef, variant, showAuthFlow, setShowDynamicUserProfile]);
  useOnClickOutside(widgetRef, closeOnOutsideClick);
  const shouldRenderUserProfile = Boolean(projectSettings);
  useRegisterWidget("user-profile", shouldRenderUserProfile);
  if (!shouldRenderUserProfile)
    return null;
  return (0, import_jsx_runtime483.jsx)(IsBrowser, { children: (0, import_jsx_runtime483.jsx)(PopperProvider, { children: (0, import_jsx_runtime483.jsx)(DynamicWidgetVariants, { isOpen, setIsOpen, variant: _variant, zIndex: widgetModalZIndex, children: (0, import_jsx_runtime483.jsx)(SandboxIndicatorWrapper, { children: (0, import_jsx_runtime483.jsx)(DynamicWidgetCard, { ref: widgetRef, children: (0, import_jsx_runtime483.jsx)(DynamicUserProfileLayout, { variant }) }) }) }) }) });
};
var ShadowedDynamicUserProfile = ({ variant }) => (0, import_jsx_runtime483.jsx)(ShadowDOM, { zIndex: widgetModalZIndex, children: (0, import_jsx_runtime483.jsx)(DynamicUserProfile, { variant }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/DynamicConnectButton/DynamicConnectButton.js
var import_jsx_runtime485 = __toESM(require_jsx_runtime(), 1);
var import_react508 = __toESM(require_react(), 1);
var import_react_dom303 = __toESM(require_react_dom(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/DynamicConnectButton/components/ConnectButton.js
var import_jsx_runtime484 = __toESM(require_jsx_runtime(), 1);
var ConnectButton = ({ buttonClassName, buttonContainerClassName, onClick, isActive, isLoading, children, copykey }) => (0, import_jsx_runtime484.jsx)("div", { className: buttonContainerClassName, children: (0, import_jsx_runtime484.jsx)(TypographyButton, { dataTestId: "ConnectButton", onClick, buttonClassName: classNames("connect-button", buttonClassName), loading: isLoading && isActive, disabled: isLoading && isActive, buttonVariant: "primary", buttonPadding: "large", copykey, children }) });

// node_modules/@dynamic-labs/sdk-react-core/src/lib/components/DynamicConnectButton/DynamicConnectButton.js
var import_qrcode298 = __toESM(require_browser(), 1);
var DynamicConnectButton = ({ buttonContainerClassName = "", buttonClassName = "", children, copykey }) => {
  const { projectSettings, setShowAuthFlow, setSelectedWalletConnectorKey } = useInternalDynamicContext();
  const { setView } = useViewContext();
  const [didUserClick, setUserClicked] = (0, import_react508.useState)(false);
  const handleOnClick = (0, import_react508.useCallback)(() => __awaiter(void 0, void 0, void 0, function* () {
    if (!didUserClick) {
      setUserClicked(true);
    }
    setSelectedWalletConnectorKey(null);
    setShowAuthFlow(true);
  }), [didUserClick, setSelectedWalletConnectorKey, setShowAuthFlow, setView]);
  return (0, import_jsx_runtime485.jsx)(ConnectButton, { isLoading: !projectSettings, isActive: didUserClick, onClick: handleOnClick, buttonContainerClassName, buttonClassName, copykey, children });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicWidget/DynamicWidget.js
var import_qrcode299 = __toESM(require_browser(), 1);
var DynamicWidget = ({ buttonContainerClassName = "", buttonClassName = "", innerButtonComponent, variant = "modal" }) => {
  const { showAuthFlow, setShowDynamicUserProfile } = useInternalDynamicContext();
  const { widgetRef, inlineControlsRef } = useWidgetContext();
  const { t: t2 } = useTranslation();
  if (!innerButtonComponent) {
    innerButtonComponent = t2("dyn_widget.connect");
  }
  const closeOnOutsideClick = (0, import_react509.useCallback)((e2) => {
    var _a;
    const target = e2.composedPath().shift();
    if ((_a = inlineControlsRef.current) === null || _a === void 0 ? void 0 : _a.contains(target))
      return;
    if (variant === "dropdown" && !showAuthFlow) {
      setShowDynamicUserProfile(false);
    }
  }, [inlineControlsRef, variant, showAuthFlow, setShowDynamicUserProfile]);
  useOnClickOutside(widgetRef, closeOnOutsideClick);
  const showDynamicConnectButton = !useIsLoggedIn();
  return (0, import_jsx_runtime486.jsx)(ShadowDOM, { className: "dynamic-widget__container", id: "dynamic-widget", children: showDynamicConnectButton ? (0, import_jsx_runtime486.jsx)(DynamicConnectButton, { buttonContainerClassName, buttonClassName, copykey: "dyn_widget.connect", children: innerButtonComponent }) : (0, import_jsx_runtime486.jsxs)(import_jsx_runtime486.Fragment, { children: [(0, import_jsx_runtime486.jsx)(DynamicNav, {}), (0, import_jsx_runtime486.jsx)(DynamicUserProfile, { variant })] }) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/widgets/DynamicMultiWalletPromptsWidget/DynamicMultiWalletPromptsWidget.js
var import_jsx_runtime487 = __toESM(require_jsx_runtime(), 1);
var import_react510 = __toESM(require_react(), 1);
var import_react_dom305 = __toESM(require_react_dom(), 1);
var import_qrcode300 = __toESM(require_browser(), 1);
var DynamicMultiWalletPromptsWidget = () => {
  const isLoggedIn = useIsLoggedIn();
  const isUserProfilePresent = useWidgetRegistryCheck("user-profile");
  const { showAuthFlow, showDynamicUserProfile } = useInternalDynamicContext();
  const isRenderingSignMessageInLinkWalletModal = showAuthFlow || showDynamicUserProfile && isUserProfilePresent;
  const multiWalletPromptState = useMultiWalletPromptState();
  const mapMultiWalletPromptStateToModalComponent = {
    awaiting_connection: AwaitingConnectionModal,
    detected_new_wallet: DetectedNewWalletModal,
    linking_new_wallet: PendingAccountSwitchToLinkModal,
    pending_account_switch: PendingAccountSwitchModal,
    pending_sign: PendingSignModal,
    primary_not_connected: PrimaryNotConnectedModal,
    unlink_wallet: UnlinkWalletPopUpModal
  };
  if (multiWalletPromptState === "idle" || isRenderingSignMessageInLinkWalletModal || !isLoggedIn)
    return null;
  const ModalComponent2 = mapMultiWalletPromptStateToModalComponent[multiWalletPromptState];
  return (0, import_jsx_runtime487.jsx)(DynamicBaseWidget, { children: (0, import_jsx_runtime487.jsx)(ModalComponent2, {}) });
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/functions/getNetwork/getNetwork.js
var getNetwork = (walletConnector) => __awaiter(void 0, void 0, void 0, function* () {
  var _a;
  return (_a = walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getNetwork) === null || _a === void 0 ? void 0 : _a.call(walletConnector);
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/FundingContext/useFunding/useFunding.js
var import_react511 = __toESM(require_react(), 1);
var useFunding = () => {
  const promiseRef = (0, import_react511.useRef)(null);
  const { fundingEnabled, setShowFunding, showFunding, updateSupportsFunding } = useFundingContext();
  const openFunding = (...args_1) => __awaiter(void 0, [...args_1], void 0, function* ({ address, token } = {}) {
    if (!fundingEnabled) {
      throw new Error("Funding is not enabled");
    }
    if (promiseRef.current) {
      return promiseRef.current.promise;
    }
    if (address || token) {
      yield updateSupportsFunding({ address, token });
    }
    promiseRef.current = new DeferredPromise();
    setShowFunding(true);
    return promiseRef.current.promise;
  });
  (0, import_react511.useEffect)(() => {
    if (!showFunding && promiseRef.current) {
      promiseRef.current.resolve();
      promiseRef.current = null;
    }
  }, [showFunding]);
  return {
    enabled: fundingEnabled,
    openFunding
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/context/ConnectWithOtpContext/useConnectWithOtp.js
var import_react512 = __toESM(require_react(), 1);
var useConnectWithOtp = ({ emailProvider: defaultProvider } = {}) => {
  const context = (0, import_react512.useContext)(ConnectWithOtpContext);
  if (!context) {
    throw new Error("useConnectWithOtp must be used within a DynamicContextProvider");
  }
  return {
    connectWithEmail: (email, options2 = {}) => context.connectWithEmail(email, Object.assign({ provider: defaultProvider }, options2)),
    connectWithSms: context.connectWithSms,
    retryOneTimePassword: context.retryOneTimePassword,
    verifyOneTimePassword: context.verifyOneTimePassword
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useSwitchNetwork/useSwitchNetwork.js
var import_react513 = __toESM(require_react(), 1);
var useSwitchNetwork = () => {
  const { setShowAuthFlow } = useDynamicContext();
  const { setView } = useViewContext();
  const switchNetwork = (0, import_react513.useCallback)((_a) => __awaiter(void 0, [_a], void 0, function* ({ wallet, network }) {
    if (wallet.connector.switchNetworkOnlyFromWallet) {
      setShowAuthFlow(true);
      setView("network-not-supported-manual");
      return;
    }
    yield wallet.connector.switchNetwork({ networkChainId: network });
  }), [setShowAuthFlow, setView]);
  return switchNetwork;
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useExternalAuth/useExternalAuth.js
var import_react515 = __toESM(require_react(), 1);
var import_jsx_runtime489 = __toESM(require_jsx_runtime(), 1);

// node_modules/@dynamic-labs/sdk-react-core/src/lib/data/api/externalAuth/externalAuth.js
var import_jsx_runtime488 = __toESM(require_jsx_runtime(), 1);
var import_react514 = __toESM(require_react(), 1);
var externalAuthSignin = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, externalJwt, sessionPublicKey }) {
  try {
    const response = yield sdkApi().externalAuthSignin({
      environmentId,
      externalAuthSigninRequest: {
        jwt: externalJwt,
        sessionPublicKey
      }
    });
    return storeAuthTokenAndUser(response);
  } catch (e2) {
    const data = yield e2.json();
    logger2.error("Error signing in with external JWT", data);
    if (data.code === "invalid_external_auth") {
      throw new ExternalAuthError(data.code);
    }
    if (data.error.code === "sandbox_maximum_threshold_reached") {
      throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    throw new DynamicError(data.error);
  }
});
var externalAuthVerify = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId, externalJwt }) {
  try {
    const response = yield sdkApi().externalAuthVerify({
      environmentId,
      externalAuthSigninRequest: {
        jwt: externalJwt
      }
    });
    return storeAuthTokenAndUser(response);
  } catch (e2) {
    const data = yield e2.json();
    logger2.error("Error verifying external JWT", data);
    if (data.code === "invalid_external_auth") {
      throw new ExternalAuthError(data.code);
    }
    if (data.error.code === "sandbox_maximum_threshold_reached") {
      throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    throw new DynamicError(data.error);
  }
});

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useExternalAuth/useExternalAuth.js
var import_react_dom306 = __toESM(require_react_dom(), 1);
var import_qrcode301 = __toESM(require_browser(), 1);
var useExternalAuth = () => {
  const { environmentId, setShowAuthFlow, setCallback } = useInternalDynamicContext();
  const { generateSessionKey, shouldRegisterSessionKeysOnSignin } = useEmbeddedWalletSessionKeys(environmentId);
  const signInWithExternalJwt = (0, import_react515.useCallback)((_a) => __awaiter(void 0, [_a], void 0, function* ({ externalUserId, externalJwt }) {
    try {
      const sessionPublicKey = shouldRegisterSessionKeysOnSignin() ? (yield generateSessionKey()).publicKey : void 0;
      const userProfile = yield externalAuthSignin({
        environmentId,
        externalJwt,
        sessionPublicKey
      });
      setCallback("authSuccess");
      if (userProfile && !hasPendingRequirements(userProfile)) {
        setShowAuthFlow(false);
      }
      return userProfile;
    } catch (e2) {
      dynamicEvents.emit("authFailure", {
        externalUserId,
        option: externalUserId,
        type: "externalAuth"
      }, { error: e2 });
      throw e2;
    }
  }), [environmentId, setCallback, setShowAuthFlow]);
  const verifyWithExternalJwt = (0, import_react515.useCallback)((_b) => __awaiter(void 0, [_b], void 0, function* ({ externalUserId, externalJwt }) {
    try {
      const userProfile = yield externalAuthVerify({
        environmentId,
        externalJwt
      });
      setCallback("authSuccess");
      setShowAuthFlow(false);
      return userProfile;
    } catch (e2) {
      dynamicEvents.emit("authFailure", {
        externalUserId,
        option: externalUserId,
        type: "externalAuth"
      }, { error: e2 });
      throw e2;
    }
  }), [environmentId, setCallback, setShowAuthFlow]);
  return (0, import_react515.useMemo)(() => ({ signInWithExternalJwt, verifyWithExternalJwt }), [signInWithExternalJwt, verifyWithExternalJwt]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useRefreshUser/useRefreshUser.js
var import_react516 = __toESM(require_react(), 1);
var import_jsx_runtime490 = __toESM(require_jsx_runtime(), 1);
var import_react_dom307 = __toESM(require_react_dom(), 1);
var import_qrcode302 = __toESM(require_browser(), 1);
var useRefreshUser = () => {
  const { environmentId } = useInternalDynamicContext();
  return (0, import_react516.useCallback)(() => refreshUserJwt({ environmentId }), [environmentId]);
};

// node_modules/@dynamic-labs/sdk-react-core/src/lib/utils/hooks/useWalletOptions/useWalletOptions.js
var import_react517 = __toESM(require_react(), 1);
var import_jsx_runtime491 = __toESM(require_jsx_runtime(), 1);
var import_react_dom308 = __toESM(require_react_dom(), 1);
var import_qrcode303 = __toESM(require_browser(), 1);
var embeddedWalletsKeys = [
  "magicemailotp",
  "magiclink",
  "magicsocial",
  "turnkey",
  "turnkeyhd",
  "coinbasempc",
  "zerodev"
];
var useWalletOptions = () => {
  const { walletConnectorOptions, setShowAuthFlow } = useInternalDynamicContext();
  const { walletBook } = useWalletBookContext();
  const { setView } = useViewContext();
  const { navigateToWalletGroup } = useWalletGroupContext();
  const { handleWalletItemClick } = useWalletItemActions();
  const walletOptions = (0, import_react517.useMemo)(() => {
    var _a;
    return (_a = walletConnectorOptions === null || walletConnectorOptions === void 0 ? void 0 : walletConnectorOptions.filter((option) => !embeddedWalletsKeys.includes(option.walletConnector.key)).map((option) => {
      const groupName = option.group ? getWalletGroup(walletBook, option.group).name : void 0;
      return {
        group: option.group,
        groupName,
        key: option.walletConnector.key,
        name: option.name
      };
    })) !== null && _a !== void 0 ? _a : [];
  }, [walletBook, walletConnectorOptions]);
  const selectWalletOption = (walletKey) => __awaiter(void 0, void 0, void 0, function* () {
    const group = groupWalletOptions(walletBook, walletConnectorOptions);
    const walletOption = group.find((wallet) => wallet.key === walletKey);
    logger2.logVerboseTroubleshootingMessage("[useWalletOptions] selectWalletOption", {
      walletKey,
      walletOption: walletOption === null || walletOption === void 0 ? void 0 : walletOption.key
    });
    if (!walletOption) {
      throw new DynamicError("Invalid wallet option key provided.");
    }
    if (isWalletGroup(walletOption)) {
      navigateToWalletGroup(walletOption);
    } else if (isHardwareWalletConnector(walletOption.walletConnector) && walletOption.walletConnector.canConnectWithHardwareWallet()) {
      setView("select-hardware-wallet", {
        onSelectWallet: handleWalletItemClick,
        wallet: walletOption
      });
    } else {
      handleWalletItemClick(walletOption);
    }
    setShowAuthFlow(true);
  });
  return {
    selectWalletOption,
    walletOptions
  };
};

// node_modules/@dynamic-labs/sdk-react-core/src/index.js
var import_qrcode304 = __toESM(require_browser());
export {
  SvgStroke as ArrowIcon,
  SvgArrowLeft as ArrowLeftIcon,
  SvgArrowRight as ArrowRightIcon,
  SvgCheckCircle as CheckCircleIcon,
  SvgCheck as CheckIcon,
  SvgChevronLeft as ChevronLeftIcon,
  SvgClose as CloseIcon,
  CollectUserDataView,
  SvgCopy as CopyIcon,
  DynamicBridgeWidget,
  DynamicConnectButton,
  DynamicContext,
  DynamicContextProvider,
  DynamicEmbeddedAuthFlow,
  DynamicEmbeddedUserProfile,
  DynamicEmbeddedWidget,
  DynamicJwtFromJSON,
  DynamicMultiWalletPromptsWidget,
  ShadowedDynamicNav as DynamicNav,
  ShadowedDynamicUserProfile as DynamicUserProfile,
  DynamicWidget,
  DynamicWidgetContextProvider,
  EmailConfirmationWaitingView,
  SvgEmbeddedWalletIcon as EmbeddedWalletIcon,
  EmbeddedWalletVersion,
  ErrorBoundary,
  ErrorBoundaryExclude,
  ErrorBoundaryInclude,
  SvgError as ErrorIcon,
  SvgExternalLink as ExternalLinkIcon,
  SvgFooterEyeIcon as EyeIcon,
  FarcasterConnectView,
  FilterAndSortWallets,
  FilterBridgeChainsName,
  FilterChain,
  FilterWallets,
  FundingWidget,
  SvgIphoneFaceId as IPhoneFaceId,
  SvgIphoneTouchId as IPhoneTouchId,
  SvgFooterInfoIcon as InfoIcon,
  IsBrowser,
  SvgLogout as LogoutIcon,
  MockContextProvider,
  NetworkNotSupportedSwitchManual,
  NoAccess,
  NoQrNotInstalledView,
  SvgPencil as PencilIcon,
  PendingSignatureView,
  QrCodeView,
  RemoveWallets,
  ShadowDOM,
  SortWallets,
  SvgSpinner as SpinnerIcon,
  UniswapFilter,
  VERSION,
  WalletList,
  sdkApi as apiClient,
  classNames,
  createWallet,
  getAuthToken,
  getChainDisplayName,
  getChainIcon,
  getDefaultColor,
  getNetwork,
  getThemeConfig,
  getValueByKey,
  getWallets,
  isAuthenticatedWithAWallet,
  mergeNetworks,
  themesData,
  useAuthenticateConnectedUser,
  useConnectWithOtp,
  useDynamicContext,
  useDynamicEvents,
  useDynamicModals,
  useDynamicScopes,
  useEmbeddedReveal,
  useEmbeddedWallet,
  useEmbeddedWalletAuthenticator,
  useExternalAuth,
  useFunding,
  useIsLoggedIn,
  useLocalStorage,
  useMfa,
  useMultiWalletPromptState,
  useOnClickOutside,
  useOtpVerificationRequest,
  usePasskeyRecovery,
  useRefreshUser,
  useReinitialize,
  useRpcProviders,
  useSendBalance,
  useSmartWallets,
  useSocialAccounts,
  useSwitchNetwork,
  useSwitchWallet,
  useSyncMfaFlow,
  useTelegramLogin,
  useTokenBalances,
  useUserUpdateRequest,
  useUserWallets,
  useWalletConnectorEvent,
  useWalletItemActions,
  useWalletOptions,
  viewToComponentMap
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=@dynamic-labs_sdk-react-core.js.map
