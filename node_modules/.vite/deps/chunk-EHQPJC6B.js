// node_modules/@turnkey/encoding/dist/index.mjs
var DEFAULT_JWK_MEMBER_BYTE_LENGTH = 32;
function stringToBase64urlString(input) {
  const base64String = btoa(input);
  return base64StringToBase64UrlEncodedString(base64String);
}
function hexStringToBase64url(input, length) {
  const hexString = input.padStart(Math.ceil(input.length / 2) * 2, "0");
  const buffer = uint8ArrayFromHexString(hexString, length);
  return stringToBase64urlString(buffer.reduce((result, x) => result + String.fromCharCode(x), ""));
}
function base64StringToBase64UrlEncodedString(input) {
  return input.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function uint8ArrayToHexString(input) {
  return input.reduce((result, x) => result + x.toString(16).padStart(2, "0"), "");
}
var uint8ArrayFromHexString = (hexString, length) => {
  const hexRegex = /^[0-9A-Fa-f]+$/;
  if (!hexString || hexString.length % 2 != 0 || !hexRegex.test(hexString)) {
    throw new Error(`cannot create uint8array from invalid hex string: "${hexString}"`);
  }
  const buffer = new Uint8Array(hexString.match(/../g).map((h) => parseInt(h, 16)));
  if (!length) {
    return buffer;
  }
  if (hexString.length / 2 > length) {
    throw new Error("hex value cannot fit in a buffer of " + length + " byte(s)");
  }
  let paddedBuffer = new Uint8Array(length);
  paddedBuffer.set(buffer, length - buffer.length);
  return paddedBuffer;
};
function btoa(s) {
  if (arguments.length === 0) {
    throw new TypeError("1 argument required, but only 0 present.");
  }
  let i;
  s = `${s}`;
  for (i = 0; i < s.length; i++) {
    if (s.charCodeAt(i) > 255) {
      throw new Error(`InvalidCharacterError: found code point greater than 255:${s.charCodeAt(i)} at position ${i}`);
    }
  }
  let out = "";
  for (i = 0; i < s.length; i += 3) {
    const groupsOfSix = [
      void 0,
      void 0,
      void 0,
      void 0
    ];
    groupsOfSix[0] = s.charCodeAt(i) >> 2;
    groupsOfSix[1] = (s.charCodeAt(i) & 3) << 4;
    if (s.length > i + 1) {
      groupsOfSix[1] |= s.charCodeAt(i + 1) >> 4;
      groupsOfSix[2] = (s.charCodeAt(i + 1) & 15) << 2;
    }
    if (s.length > i + 2) {
      groupsOfSix[2] |= s.charCodeAt(i + 2) >> 6;
      groupsOfSix[3] = s.charCodeAt(i + 2) & 63;
    }
    for (let j = 0; j < groupsOfSix.length; j++) {
      if (typeof groupsOfSix[j] === "undefined") {
        out += "=";
      } else {
        out += btoaLookup(groupsOfSix[j]);
      }
    }
  }
  return out;
}
function btoaLookup(index) {
  const keystr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  if (index >= 0 && index < 64) {
    return keystr[index];
  }
  return void 0;
}

export {
  DEFAULT_JWK_MEMBER_BYTE_LENGTH,
  stringToBase64urlString,
  hexStringToBase64url,
  uint8ArrayToHexString,
  uint8ArrayFromHexString
};
//# sourceMappingURL=chunk-EHQPJC6B.js.map
