import {
  Contract,
  ContractFactory,
  Interface,
  ZeroAddress,
  ethers_exports,
  formatEther,
  parseEther
} from "./chunk-HUHAEXZ5.js";
import {
  concat_exports,
  from_string_exports,
  init_concat,
  init_from_string,
  init_to_string,
  to_string_exports
} from "./chunk-BPUDM5BN.js";
import {
  __commonJS,
  __toCommonJS,
  __toESM
} from "./chunk-256EKJAK.js";

// node_modules/@multiformats/base-x/src/index.js
var require_src = __commonJS({
  "node_modules/@multiformats/base-x/src/index.js"(exports, module) {
    "use strict";
    function base(ALPHABET) {
      if (ALPHABET.length >= 255) {
        throw new TypeError("Alphabet too long");
      }
      var BASE_MAP = new Uint8Array(256);
      for (var j = 0; j < BASE_MAP.length; j++) {
        BASE_MAP[j] = 255;
      }
      for (var i = 0; i < ALPHABET.length; i++) {
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) {
          throw new TypeError(x + " is ambiguous");
        }
        BASE_MAP[xc] = i;
      }
      var BASE2 = ALPHABET.length;
      var LEADER = ALPHABET.charAt(0);
      var FACTOR = Math.log(BASE2) / Math.log(256);
      var iFACTOR = Math.log(256) / Math.log(BASE2);
      function encode(source) {
        if (source instanceof Uint8Array) {
        } else if (ArrayBuffer.isView(source)) {
          source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        } else if (Array.isArray(source)) {
          source = Uint8Array.from(source);
        }
        if (!(source instanceof Uint8Array)) {
          throw new TypeError("Expected Uint8Array");
        }
        if (source.length === 0) {
          return "";
        }
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while (pbegin !== pend && source[pbegin] === 0) {
          pbegin++;
          zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while (pbegin !== pend) {
          var carry = source[pbegin];
          var i2 = 0;
          for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
            carry += 256 * b58[it1] >>> 0;
            b58[it1] = carry % BASE2 >>> 0;
            carry = carry / BASE2 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          pbegin++;
        }
        var it2 = size - length;
        while (it2 !== size && b58[it2] === 0) {
          it2++;
        }
        var str = LEADER.repeat(zeroes);
        for (; it2 < size; ++it2) {
          str += ALPHABET.charAt(b58[it2]);
        }
        return str;
      }
      function decodeUnsafe(source) {
        if (typeof source !== "string") {
          throw new TypeError("Expected String");
        }
        if (source.length === 0) {
          return new Uint8Array();
        }
        var psz = 0;
        if (source[psz] === " ") {
          return;
        }
        var zeroes = 0;
        var length = 0;
        while (source[psz] === LEADER) {
          zeroes++;
          psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while (source[psz]) {
          var carry = BASE_MAP[source.charCodeAt(psz)];
          if (carry === 255) {
            return;
          }
          var i2 = 0;
          for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
            carry += BASE2 * b256[it3] >>> 0;
            b256[it3] = carry % 256 >>> 0;
            carry = carry / 256 >>> 0;
          }
          if (carry !== 0) {
            throw new Error("Non-zero carry");
          }
          length = i2;
          psz++;
        }
        if (source[psz] === " ") {
          return;
        }
        var it4 = size - length;
        while (it4 !== size && b256[it4] === 0) {
          it4++;
        }
        var vch = new Uint8Array(zeroes + (size - it4));
        var j2 = zeroes;
        while (it4 !== size) {
          vch[j2++] = b256[it4++];
        }
        return vch;
      }
      function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) {
          return buffer;
        }
        throw new Error("Non-base" + BASE2 + " character");
      }
      return {
        encode,
        decodeUnsafe,
        decode
      };
    }
    module.exports = base;
  }
});

// node_modules/multibase/src/util.js
var require_util = __commonJS({
  "node_modules/multibase/src/util.js"(exports, module) {
    "use strict";
    var textDecoder = new TextDecoder();
    var decodeText = (bytes) => textDecoder.decode(bytes);
    var textEncoder = new TextEncoder();
    var encodeText = (text) => textEncoder.encode(text);
    function concat(arrs, length) {
      const output = new Uint8Array(length);
      let offset = 0;
      for (const arr of arrs) {
        output.set(arr, offset);
        offset += arr.length;
      }
      return output;
    }
    module.exports = { decodeText, encodeText, concat };
  }
});

// node_modules/multibase/src/base.js
var require_base = __commonJS({
  "node_modules/multibase/src/base.js"(exports, module) {
    "use strict";
    var { encodeText } = require_util();
    var Base = class {
      /**
       * @param {BaseName} name
       * @param {BaseCode} code
       * @param {CodecFactory} factory
       * @param {string} alphabet
       */
      constructor(name, code, factory, alphabet) {
        this.name = name;
        this.code = code;
        this.codeBuf = encodeText(this.code);
        this.alphabet = alphabet;
        this.codec = factory(alphabet);
      }
      /**
       * @param {Uint8Array} buf
       * @returns {string}
       */
      encode(buf) {
        return this.codec.encode(buf);
      }
      /**
       * @param {string} string
       * @returns {Uint8Array}
       */
      decode(string) {
        for (const char of string) {
          if (this.alphabet && this.alphabet.indexOf(char) < 0) {
            throw new Error(`invalid character '${char}' in '${string}'`);
          }
        }
        return this.codec.decode(string);
      }
    };
    module.exports = Base;
  }
});

// node_modules/multibase/src/rfc4648.js
var require_rfc4648 = __commonJS({
  "node_modules/multibase/src/rfc4648.js"(exports, module) {
    "use strict";
    var decode = (string, alphabet, bitsPerChar) => {
      const codes = {};
      for (let i = 0; i < alphabet.length; ++i) {
        codes[alphabet[i]] = i;
      }
      let end = string.length;
      while (string[end - 1] === "=") {
        --end;
      }
      const out = new Uint8Array(end * bitsPerChar / 8 | 0);
      let bits = 0;
      let buffer = 0;
      let written = 0;
      for (let i = 0; i < end; ++i) {
        const value = codes[string[i]];
        if (value === void 0) {
          throw new SyntaxError("Invalid character " + string[i]);
        }
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
          bits -= 8;
          out[written++] = 255 & buffer >> bits;
        }
      }
      if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
        throw new SyntaxError("Unexpected end of data");
      }
      return out;
    };
    var encode = (data, alphabet, bitsPerChar) => {
      const pad = alphabet[alphabet.length - 1] === "=";
      const mask = (1 << bitsPerChar) - 1;
      let out = "";
      let bits = 0;
      let buffer = 0;
      for (let i = 0; i < data.length; ++i) {
        buffer = buffer << 8 | data[i];
        bits += 8;
        while (bits > bitsPerChar) {
          bits -= bitsPerChar;
          out += alphabet[mask & buffer >> bits];
        }
      }
      if (bits) {
        out += alphabet[mask & buffer << bitsPerChar - bits];
      }
      if (pad) {
        while (out.length * bitsPerChar & 7) {
          out += "=";
        }
      }
      return out;
    };
    var rfc4648 = (bitsPerChar) => (alphabet) => {
      return {
        /**
         * @param {Uint8Array} input
         * @returns {string}
         */
        encode(input) {
          return encode(input, alphabet, bitsPerChar);
        },
        /**
         * @param {string} input
         * @returns {Uint8Array}
         */
        decode(input) {
          return decode(input, alphabet, bitsPerChar);
        }
      };
    };
    module.exports = { rfc4648 };
  }
});

// node_modules/multibase/src/constants.js
var require_constants = __commonJS({
  "node_modules/multibase/src/constants.js"(exports, module) {
    "use strict";
    var baseX = require_src();
    var Base = require_base();
    var { rfc4648 } = require_rfc4648();
    var { decodeText, encodeText } = require_util();
    var identity = () => {
      return {
        encode: decodeText,
        decode: encodeText
      };
    };
    var constants = [
      ["identity", "\0", identity, ""],
      ["base2", "0", rfc4648(1), "01"],
      ["base8", "7", rfc4648(3), "01234567"],
      ["base10", "9", baseX, "0123456789"],
      ["base16", "f", rfc4648(4), "0123456789abcdef"],
      ["base16upper", "F", rfc4648(4), "0123456789ABCDEF"],
      ["base32hex", "v", rfc4648(5), "0123456789abcdefghijklmnopqrstuv"],
      ["base32hexupper", "V", rfc4648(5), "0123456789ABCDEFGHIJKLMNOPQRSTUV"],
      ["base32hexpad", "t", rfc4648(5), "0123456789abcdefghijklmnopqrstuv="],
      ["base32hexpadupper", "T", rfc4648(5), "0123456789ABCDEFGHIJKLMNOPQRSTUV="],
      ["base32", "b", rfc4648(5), "abcdefghijklmnopqrstuvwxyz234567"],
      ["base32upper", "B", rfc4648(5), "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"],
      ["base32pad", "c", rfc4648(5), "abcdefghijklmnopqrstuvwxyz234567="],
      ["base32padupper", "C", rfc4648(5), "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567="],
      ["base32z", "h", rfc4648(5), "ybndrfg8ejkmcpqxot1uwisza345h769"],
      ["base36", "k", baseX, "0123456789abcdefghijklmnopqrstuvwxyz"],
      ["base36upper", "K", baseX, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"],
      ["base58btc", "z", baseX, "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"],
      ["base58flickr", "Z", baseX, "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"],
      ["base64", "m", rfc4648(6), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"],
      ["base64pad", "M", rfc4648(6), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="],
      ["base64url", "u", rfc4648(6), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"],
      ["base64urlpad", "U", rfc4648(6), "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]
    ];
    var names = constants.reduce(
      (prev, tupple) => {
        prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3]);
        return prev;
      },
      /** @type {Record<BaseName,Base>} */
      {}
    );
    var codes = constants.reduce(
      (prev, tupple) => {
        prev[tupple[1]] = names[tupple[0]];
        return prev;
      },
      /** @type {Record<BaseCode,Base>} */
      {}
    );
    module.exports = {
      names,
      codes
    };
  }
});

// node_modules/multibase/src/index.js
var require_src2 = __commonJS({
  "node_modules/multibase/src/index.js"(exports, module) {
    "use strict";
    var constants = require_constants();
    var { encodeText, decodeText, concat } = require_util();
    function multibase(nameOrCode, buf) {
      if (!buf) {
        throw new Error("requires an encoded Uint8Array");
      }
      const { name, codeBuf } = encoding(nameOrCode);
      validEncode(name, buf);
      return concat([codeBuf, buf], codeBuf.length + buf.length);
    }
    function encode(nameOrCode, buf) {
      const enc = encoding(nameOrCode);
      const data = encodeText(enc.encode(buf));
      return concat([enc.codeBuf, data], enc.codeBuf.length + data.length);
    }
    function decode(data) {
      if (data instanceof Uint8Array) {
        data = decodeText(data);
      }
      const prefix = data[0];
      if (["f", "F", "v", "V", "t", "T", "b", "B", "c", "C", "h", "k", "K"].includes(prefix)) {
        data = data.toLowerCase();
      }
      const enc = encoding(
        /** @type {BaseCode} */
        data[0]
      );
      return enc.decode(data.substring(1));
    }
    function isEncoded(data) {
      if (data instanceof Uint8Array) {
        data = decodeText(data);
      }
      if (Object.prototype.toString.call(data) !== "[object String]") {
        return false;
      }
      try {
        const enc = encoding(
          /** @type {BaseCode} */
          data[0]
        );
        return enc.name;
      } catch (err) {
        return false;
      }
    }
    function validEncode(name, buf) {
      const enc = encoding(name);
      enc.decode(decodeText(buf));
    }
    function encoding(nameOrCode) {
      if (Object.prototype.hasOwnProperty.call(
        constants.names,
        /** @type {BaseName} */
        nameOrCode
      )) {
        return constants.names[
          /** @type {BaseName} */
          nameOrCode
        ];
      } else if (Object.prototype.hasOwnProperty.call(
        constants.codes,
        /** @type {BaseCode} */
        nameOrCode
      )) {
        return constants.codes[
          /** @type {BaseCode} */
          nameOrCode
        ];
      } else {
        throw new Error(`Unsupported encoding: ${nameOrCode}`);
      }
    }
    function encodingFromData(data) {
      if (data instanceof Uint8Array) {
        data = decodeText(data);
      }
      return encoding(
        /** @type {BaseCode} */
        data[0]
      );
    }
    exports = module.exports = multibase;
    exports.encode = encode;
    exports.decode = decode;
    exports.isEncoded = isEncoded;
    exports.encoding = encoding;
    exports.encodingFromData = encodingFromData;
    var names = Object.freeze(constants.names);
    var codes = Object.freeze(constants.codes);
    exports.names = names;
    exports.codes = codes;
  }
});

// node_modules/varint/encode.js
var require_encode = __commonJS({
  "node_modules/varint/encode.js"(exports, module) {
    module.exports = encode;
    var MSB = 128;
    var REST = 127;
    var MSBALL = ~REST;
    var INT = Math.pow(2, 31);
    function encode(num, out, offset) {
      out = out || [];
      offset = offset || 0;
      var oldOffset = offset;
      while (num >= INT) {
        out[offset++] = num & 255 | MSB;
        num /= 128;
      }
      while (num & MSBALL) {
        out[offset++] = num & 255 | MSB;
        num >>>= 7;
      }
      out[offset] = num | 0;
      encode.bytes = offset - oldOffset + 1;
      return out;
    }
  }
});

// node_modules/varint/decode.js
var require_decode = __commonJS({
  "node_modules/varint/decode.js"(exports, module) {
    module.exports = read;
    var MSB = 128;
    var REST = 127;
    function read(buf, offset) {
      var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
      do {
        if (counter >= l) {
          read.bytes = 0;
          throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & REST) << shift : (b & REST) * Math.pow(2, shift);
        shift += 7;
      } while (b >= MSB);
      read.bytes = counter - offset;
      return res;
    }
  }
});

// node_modules/varint/length.js
var require_length = __commonJS({
  "node_modules/varint/length.js"(exports, module) {
    var N1 = Math.pow(2, 7);
    var N2 = Math.pow(2, 14);
    var N3 = Math.pow(2, 21);
    var N4 = Math.pow(2, 28);
    var N5 = Math.pow(2, 35);
    var N6 = Math.pow(2, 42);
    var N7 = Math.pow(2, 49);
    var N8 = Math.pow(2, 56);
    var N9 = Math.pow(2, 63);
    module.exports = function(value) {
      return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;
    };
  }
});

// node_modules/varint/index.js
var require_varint = __commonJS({
  "node_modules/varint/index.js"(exports, module) {
    module.exports = {
      encode: require_encode(),
      decode: require_decode(),
      encodingLength: require_length()
    };
  }
});

// node_modules/multihashes/src/constants.js
var require_constants2 = __commonJS({
  "node_modules/multihashes/src/constants.js"(exports, module) {
    "use strict";
    var names = Object.freeze({
      "identity": 0,
      "sha1": 17,
      "sha2-256": 18,
      "sha2-512": 19,
      "sha3-512": 20,
      "sha3-384": 21,
      "sha3-256": 22,
      "sha3-224": 23,
      "shake-128": 24,
      "shake-256": 25,
      "keccak-224": 26,
      "keccak-256": 27,
      "keccak-384": 28,
      "keccak-512": 29,
      "blake3": 30,
      "murmur3-128": 34,
      "murmur3-32": 35,
      "dbl-sha2-256": 86,
      "md4": 212,
      "md5": 213,
      "bmt": 214,
      "sha2-256-trunc254-padded": 4114,
      "ripemd-128": 4178,
      "ripemd-160": 4179,
      "ripemd-256": 4180,
      "ripemd-320": 4181,
      "x11": 4352,
      "kangarootwelve": 7425,
      "sm3-256": 21325,
      "blake2b-8": 45569,
      "blake2b-16": 45570,
      "blake2b-24": 45571,
      "blake2b-32": 45572,
      "blake2b-40": 45573,
      "blake2b-48": 45574,
      "blake2b-56": 45575,
      "blake2b-64": 45576,
      "blake2b-72": 45577,
      "blake2b-80": 45578,
      "blake2b-88": 45579,
      "blake2b-96": 45580,
      "blake2b-104": 45581,
      "blake2b-112": 45582,
      "blake2b-120": 45583,
      "blake2b-128": 45584,
      "blake2b-136": 45585,
      "blake2b-144": 45586,
      "blake2b-152": 45587,
      "blake2b-160": 45588,
      "blake2b-168": 45589,
      "blake2b-176": 45590,
      "blake2b-184": 45591,
      "blake2b-192": 45592,
      "blake2b-200": 45593,
      "blake2b-208": 45594,
      "blake2b-216": 45595,
      "blake2b-224": 45596,
      "blake2b-232": 45597,
      "blake2b-240": 45598,
      "blake2b-248": 45599,
      "blake2b-256": 45600,
      "blake2b-264": 45601,
      "blake2b-272": 45602,
      "blake2b-280": 45603,
      "blake2b-288": 45604,
      "blake2b-296": 45605,
      "blake2b-304": 45606,
      "blake2b-312": 45607,
      "blake2b-320": 45608,
      "blake2b-328": 45609,
      "blake2b-336": 45610,
      "blake2b-344": 45611,
      "blake2b-352": 45612,
      "blake2b-360": 45613,
      "blake2b-368": 45614,
      "blake2b-376": 45615,
      "blake2b-384": 45616,
      "blake2b-392": 45617,
      "blake2b-400": 45618,
      "blake2b-408": 45619,
      "blake2b-416": 45620,
      "blake2b-424": 45621,
      "blake2b-432": 45622,
      "blake2b-440": 45623,
      "blake2b-448": 45624,
      "blake2b-456": 45625,
      "blake2b-464": 45626,
      "blake2b-472": 45627,
      "blake2b-480": 45628,
      "blake2b-488": 45629,
      "blake2b-496": 45630,
      "blake2b-504": 45631,
      "blake2b-512": 45632,
      "blake2s-8": 45633,
      "blake2s-16": 45634,
      "blake2s-24": 45635,
      "blake2s-32": 45636,
      "blake2s-40": 45637,
      "blake2s-48": 45638,
      "blake2s-56": 45639,
      "blake2s-64": 45640,
      "blake2s-72": 45641,
      "blake2s-80": 45642,
      "blake2s-88": 45643,
      "blake2s-96": 45644,
      "blake2s-104": 45645,
      "blake2s-112": 45646,
      "blake2s-120": 45647,
      "blake2s-128": 45648,
      "blake2s-136": 45649,
      "blake2s-144": 45650,
      "blake2s-152": 45651,
      "blake2s-160": 45652,
      "blake2s-168": 45653,
      "blake2s-176": 45654,
      "blake2s-184": 45655,
      "blake2s-192": 45656,
      "blake2s-200": 45657,
      "blake2s-208": 45658,
      "blake2s-216": 45659,
      "blake2s-224": 45660,
      "blake2s-232": 45661,
      "blake2s-240": 45662,
      "blake2s-248": 45663,
      "blake2s-256": 45664,
      "skein256-8": 45825,
      "skein256-16": 45826,
      "skein256-24": 45827,
      "skein256-32": 45828,
      "skein256-40": 45829,
      "skein256-48": 45830,
      "skein256-56": 45831,
      "skein256-64": 45832,
      "skein256-72": 45833,
      "skein256-80": 45834,
      "skein256-88": 45835,
      "skein256-96": 45836,
      "skein256-104": 45837,
      "skein256-112": 45838,
      "skein256-120": 45839,
      "skein256-128": 45840,
      "skein256-136": 45841,
      "skein256-144": 45842,
      "skein256-152": 45843,
      "skein256-160": 45844,
      "skein256-168": 45845,
      "skein256-176": 45846,
      "skein256-184": 45847,
      "skein256-192": 45848,
      "skein256-200": 45849,
      "skein256-208": 45850,
      "skein256-216": 45851,
      "skein256-224": 45852,
      "skein256-232": 45853,
      "skein256-240": 45854,
      "skein256-248": 45855,
      "skein256-256": 45856,
      "skein512-8": 45857,
      "skein512-16": 45858,
      "skein512-24": 45859,
      "skein512-32": 45860,
      "skein512-40": 45861,
      "skein512-48": 45862,
      "skein512-56": 45863,
      "skein512-64": 45864,
      "skein512-72": 45865,
      "skein512-80": 45866,
      "skein512-88": 45867,
      "skein512-96": 45868,
      "skein512-104": 45869,
      "skein512-112": 45870,
      "skein512-120": 45871,
      "skein512-128": 45872,
      "skein512-136": 45873,
      "skein512-144": 45874,
      "skein512-152": 45875,
      "skein512-160": 45876,
      "skein512-168": 45877,
      "skein512-176": 45878,
      "skein512-184": 45879,
      "skein512-192": 45880,
      "skein512-200": 45881,
      "skein512-208": 45882,
      "skein512-216": 45883,
      "skein512-224": 45884,
      "skein512-232": 45885,
      "skein512-240": 45886,
      "skein512-248": 45887,
      "skein512-256": 45888,
      "skein512-264": 45889,
      "skein512-272": 45890,
      "skein512-280": 45891,
      "skein512-288": 45892,
      "skein512-296": 45893,
      "skein512-304": 45894,
      "skein512-312": 45895,
      "skein512-320": 45896,
      "skein512-328": 45897,
      "skein512-336": 45898,
      "skein512-344": 45899,
      "skein512-352": 45900,
      "skein512-360": 45901,
      "skein512-368": 45902,
      "skein512-376": 45903,
      "skein512-384": 45904,
      "skein512-392": 45905,
      "skein512-400": 45906,
      "skein512-408": 45907,
      "skein512-416": 45908,
      "skein512-424": 45909,
      "skein512-432": 45910,
      "skein512-440": 45911,
      "skein512-448": 45912,
      "skein512-456": 45913,
      "skein512-464": 45914,
      "skein512-472": 45915,
      "skein512-480": 45916,
      "skein512-488": 45917,
      "skein512-496": 45918,
      "skein512-504": 45919,
      "skein512-512": 45920,
      "skein1024-8": 45921,
      "skein1024-16": 45922,
      "skein1024-24": 45923,
      "skein1024-32": 45924,
      "skein1024-40": 45925,
      "skein1024-48": 45926,
      "skein1024-56": 45927,
      "skein1024-64": 45928,
      "skein1024-72": 45929,
      "skein1024-80": 45930,
      "skein1024-88": 45931,
      "skein1024-96": 45932,
      "skein1024-104": 45933,
      "skein1024-112": 45934,
      "skein1024-120": 45935,
      "skein1024-128": 45936,
      "skein1024-136": 45937,
      "skein1024-144": 45938,
      "skein1024-152": 45939,
      "skein1024-160": 45940,
      "skein1024-168": 45941,
      "skein1024-176": 45942,
      "skein1024-184": 45943,
      "skein1024-192": 45944,
      "skein1024-200": 45945,
      "skein1024-208": 45946,
      "skein1024-216": 45947,
      "skein1024-224": 45948,
      "skein1024-232": 45949,
      "skein1024-240": 45950,
      "skein1024-248": 45951,
      "skein1024-256": 45952,
      "skein1024-264": 45953,
      "skein1024-272": 45954,
      "skein1024-280": 45955,
      "skein1024-288": 45956,
      "skein1024-296": 45957,
      "skein1024-304": 45958,
      "skein1024-312": 45959,
      "skein1024-320": 45960,
      "skein1024-328": 45961,
      "skein1024-336": 45962,
      "skein1024-344": 45963,
      "skein1024-352": 45964,
      "skein1024-360": 45965,
      "skein1024-368": 45966,
      "skein1024-376": 45967,
      "skein1024-384": 45968,
      "skein1024-392": 45969,
      "skein1024-400": 45970,
      "skein1024-408": 45971,
      "skein1024-416": 45972,
      "skein1024-424": 45973,
      "skein1024-432": 45974,
      "skein1024-440": 45975,
      "skein1024-448": 45976,
      "skein1024-456": 45977,
      "skein1024-464": 45978,
      "skein1024-472": 45979,
      "skein1024-480": 45980,
      "skein1024-488": 45981,
      "skein1024-496": 45982,
      "skein1024-504": 45983,
      "skein1024-512": 45984,
      "skein1024-520": 45985,
      "skein1024-528": 45986,
      "skein1024-536": 45987,
      "skein1024-544": 45988,
      "skein1024-552": 45989,
      "skein1024-560": 45990,
      "skein1024-568": 45991,
      "skein1024-576": 45992,
      "skein1024-584": 45993,
      "skein1024-592": 45994,
      "skein1024-600": 45995,
      "skein1024-608": 45996,
      "skein1024-616": 45997,
      "skein1024-624": 45998,
      "skein1024-632": 45999,
      "skein1024-640": 46e3,
      "skein1024-648": 46001,
      "skein1024-656": 46002,
      "skein1024-664": 46003,
      "skein1024-672": 46004,
      "skein1024-680": 46005,
      "skein1024-688": 46006,
      "skein1024-696": 46007,
      "skein1024-704": 46008,
      "skein1024-712": 46009,
      "skein1024-720": 46010,
      "skein1024-728": 46011,
      "skein1024-736": 46012,
      "skein1024-744": 46013,
      "skein1024-752": 46014,
      "skein1024-760": 46015,
      "skein1024-768": 46016,
      "skein1024-776": 46017,
      "skein1024-784": 46018,
      "skein1024-792": 46019,
      "skein1024-800": 46020,
      "skein1024-808": 46021,
      "skein1024-816": 46022,
      "skein1024-824": 46023,
      "skein1024-832": 46024,
      "skein1024-840": 46025,
      "skein1024-848": 46026,
      "skein1024-856": 46027,
      "skein1024-864": 46028,
      "skein1024-872": 46029,
      "skein1024-880": 46030,
      "skein1024-888": 46031,
      "skein1024-896": 46032,
      "skein1024-904": 46033,
      "skein1024-912": 46034,
      "skein1024-920": 46035,
      "skein1024-928": 46036,
      "skein1024-936": 46037,
      "skein1024-944": 46038,
      "skein1024-952": 46039,
      "skein1024-960": 46040,
      "skein1024-968": 46041,
      "skein1024-976": 46042,
      "skein1024-984": 46043,
      "skein1024-992": 46044,
      "skein1024-1000": 46045,
      "skein1024-1008": 46046,
      "skein1024-1016": 46047,
      "skein1024-1024": 46048,
      "poseidon-bls12_381-a2-fc1": 46081,
      "poseidon-bls12_381-a2-fc1-sc": 46082
    });
    module.exports = { names };
  }
});

// node_modules/multihashes/src/index.js
var require_src3 = __commonJS({
  "node_modules/multihashes/src/index.js"(exports, module) {
    "use strict";
    var multibase = require_src2();
    var varint = require_varint();
    var { names } = require_constants2();
    var { toString: uint8ArrayToString } = (init_to_string(), __toCommonJS(to_string_exports));
    var { fromString: uint8ArrayFromString } = (init_from_string(), __toCommonJS(from_string_exports));
    var { concat: uint8ArrayConcat } = (init_concat(), __toCommonJS(concat_exports));
    var codes = (
      /** @type {import('./types').CodeNameMap} */
      {}
    );
    for (const key in names) {
      const name = (
        /** @type {HashName} */
        key
      );
      codes[names[name]] = name;
    }
    Object.freeze(codes);
    function toHexString(hash) {
      if (!(hash instanceof Uint8Array)) {
        throw new Error("must be passed a Uint8Array");
      }
      return uint8ArrayToString(hash, "base16");
    }
    function fromHexString(hash) {
      return uint8ArrayFromString(hash, "base16");
    }
    function toB58String(hash) {
      if (!(hash instanceof Uint8Array)) {
        throw new Error("must be passed a Uint8Array");
      }
      return uint8ArrayToString(multibase.encode("base58btc", hash)).slice(1);
    }
    function fromB58String(hash) {
      const encoded = hash instanceof Uint8Array ? uint8ArrayToString(hash) : hash;
      return multibase.decode("z" + encoded);
    }
    function decode(bytes) {
      if (!(bytes instanceof Uint8Array)) {
        throw new Error("multihash must be a Uint8Array");
      }
      if (bytes.length < 2) {
        throw new Error("multihash too short. must be > 2 bytes.");
      }
      const code = (
        /** @type {HashCode} */
        varint.decode(bytes)
      );
      if (!isValidCode(code)) {
        throw new Error(`multihash unknown function code: 0x${code.toString(16)}`);
      }
      bytes = bytes.slice(varint.decode.bytes);
      const len = varint.decode(bytes);
      if (len < 0) {
        throw new Error(`multihash invalid length: ${len}`);
      }
      bytes = bytes.slice(varint.decode.bytes);
      if (bytes.length !== len) {
        throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString(bytes, "base16")}`);
      }
      return {
        code,
        name: codes[code],
        length: len,
        digest: bytes
      };
    }
    function encode(digest, code, length) {
      if (!digest || code === void 0) {
        throw new Error("multihash encode requires at least two args: digest, code");
      }
      const hashfn = coerceCode(code);
      if (!(digest instanceof Uint8Array)) {
        throw new Error("digest should be a Uint8Array");
      }
      if (length == null) {
        length = digest.length;
      }
      if (length && digest.length !== length) {
        throw new Error("digest length should be equal to specified length.");
      }
      const hash = varint.encode(hashfn);
      const len = varint.encode(length);
      return uint8ArrayConcat([hash, len, digest], hash.length + len.length + digest.length);
    }
    function coerceCode(name) {
      let code = name;
      if (typeof name === "string") {
        if (names[name] === void 0) {
          throw new Error(`Unrecognized hash function named: ${name}`);
        }
        code = names[name];
      }
      if (typeof code !== "number") {
        throw new Error(`Hash function code should be a number. Got: ${code}`);
      }
      if (codes[code] === void 0 && !isAppCode(code)) {
        throw new Error(`Unrecognized function code: ${code}`);
      }
      return code;
    }
    function isAppCode(code) {
      return code > 0 && code < 16;
    }
    function isValidCode(code) {
      if (isAppCode(code)) {
        return true;
      }
      if (codes[code]) {
        return true;
      }
      return false;
    }
    function validate(multihash2) {
      decode(multihash2);
    }
    function prefix(multihash2) {
      validate(multihash2);
      return multihash2.subarray(0, 2);
    }
    module.exports = {
      names,
      codes,
      toHexString,
      fromHexString,
      toB58String,
      fromB58String,
      decode,
      encode,
      coerceCode,
      isAppCode,
      validate,
      prefix,
      isValidCode
    };
  }
});

// node_modules/@circles-sdk/abi-v1/dist/index.js
var _abi$1 = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_inflation",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_period",
        type: "uint256"
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string"
      },
      {
        internalType: "string",
        name: "_name",
        type: "string"
      },
      {
        internalType: "uint256",
        name: "_signupBonus",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_initialIssuance",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_timeout",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "HubTransfer",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "organization",
        type: "address"
      }
    ],
    name: "OrganizationSignup",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address"
      }
    ],
    name: "Signup",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "canSendTo",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "limit",
        type: "uint256"
      }
    ],
    name: "Trust",
    type: "event"
  },
  {
    inputs: [],
    name: "deployedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "divisor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "inflation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "initialIssuance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "limits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "organizations",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "period",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "seen",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "signupBonus",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "timeout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "tokenToUser",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "userToToken",
    outputs: [
      {
        internalType: "contract Token",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "validation",
    outputs: [
      {
        internalType: "bool",
        name: "seen",
        type: "bool"
      },
      {
        internalType: "uint256",
        name: "sent",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "received",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "periods",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "issuance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_periods",
        type: "uint256"
      }
    ],
    name: "issuanceByStep",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_initial",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_periods",
        type: "uint256"
      }
    ],
    name: "inflate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "signup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "organizationSignup",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256"
      }
    ],
    name: "trust",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "exponent",
        type: "uint256"
      }
    ],
    name: "pow",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "pure",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenOwner",
        type: "address"
      },
      {
        internalType: "address",
        name: "src",
        type: "address"
      },
      {
        internalType: "address",
        name: "dest",
        type: "address"
      }
    ],
    name: "checkSendLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "tokenOwners",
        type: "address[]"
      },
      {
        internalType: "address[]",
        name: "srcs",
        type: "address[]"
      },
      {
        internalType: "address[]",
        name: "dests",
        type: "address[]"
      },
      {
        internalType: "uint256[]",
        name: "wads",
        type: "uint256[]"
      }
    ],
    name: "transferThrough",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode$1 = "0x6101606040523480156200001257600080fd5b506040516200400a3803806200400a833981810160405260e08110156200003857600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006457600080fd5b9083019060208201858111156200007a57600080fd5b82516401000000008111828201881017156200009557600080fd5b82525081516020918201929091019080838360005b83811015620000c4578181015183820152602001620000aa565b50505050905090810190601f168015620000f25780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011657600080fd5b9083019060208201858111156200012c57600080fd5b82516401000000008111828201881017156200014757600080fd5b82525081516020918201929091019080838360005b83811015620001765781810151838201526020016200015c565b50505050905090810190601f168015620001a45780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060909201516080899052909350909150620001cf8762000221565b60a05260c08690528451620001ec90600090602088019062000537565b5083516200020290600190602087019062000537565b5060e0929092526101005242610120526101405250620005d392505050565b6000805b60096200024d62000238600a8462000271565b85620003a960201b620015691790919060201c565b11156200025d5760010162000225565b6200026a600a8262000271565b9392505050565b6000826200028257506000620003a3565b816200029157506001620003a3565b8160011415620002a3575081620003a3565b60015b60018311156200038557620002cb6002846200041260201b620015cf1790919060201c565b6200030f57620002ea84856200047b60201b620016331790919060201c565b935062000307600284620003a960201b620015691790919060201c565b92506200037f565b6200032981856200047b60201b620016331790919060201c565b90506200034584856200047b60201b620016331790919060201c565b93506200037c600262000368600186620004d960201b620016911790919060201c565b620003a960201b620015691790919060201c565b92505b620002a6565b6200039f81856200047b60201b620016331790919060201c565b9150505b92915050565b600080821162000400576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816200040a57fe5b049392505050565b600080821162000469576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b8183816200047357fe5b069392505050565b6000826200048c57506000620003a3565b828202828482816200049a57fe5b04146200026a5760405162461bcd60e51b815260040180806020018281038252602181526020018062003fe96021913960400191505060405180910390fd5b60008282111562000531576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200057a57805160ff1916838001178555620005aa565b82800160010185558215620005aa579182015b82811115620005aa5782518255916020019190600101906200058d565b50620005b8929150620005bc565b5090565b5b80821115620005b85760008155600101620005bd565b60805160a05160c05160e0516101005161012051610140516139a46200064560003980610a2b5250806110ca52806114ff5250806109df5280610aa25280611547525080610a075250806110a4528061152352508061075752806107cd52508061079d528061127d52506139a46000f3fe60806040523480156200001157600080fd5b5060043610620001605760003560e01c8063863623bb11620000cf578063863623bb146200037a5780638a0ef184146200038457806395d89b4114620003bf5780639951d62f14620003c9578063a18b506b14620003f8578063a3eb2b4a1462000421578063a4caeb421462000452578063b7bc0f73146200045c578063be0522e01462000466578063d62fd9a21462000470578063eae4c19f14620006a6578063ef78d4fd14620006b0578063fc22a9f814620006ba5762000160565b806306fdde0314620001655780631f2dc5ef14620001e757806328d249fe14620002035780632a93834214620002485780632e4c697f146200026e5780633fbd653c14620002945780635a1f740614620002a057806361c4b42114620002dd57806367cb52d814620002fd57806370dea79a146200030757806377ed63c214620003115780637f501d04146200035a575b600080fd5b6200016f620006c4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015620001ab57818101518382015260200162000191565b50505050905090810190601f168015620001d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b620001f162000755565b60408051918252519081900360200190f35b6200022c600480360360208110156200021b57600080fd5b50356001600160a01b031662000779565b604080516001600160a01b039092168252519081900360200190f35b620001f1600480360360408110156200026057600080fd5b508035906020013562000794565b620001f1600480360360408110156200028657600080fd5b508035906020013562000818565b6200029e620008d8565b005b620002c960048036036020811015620002b857600080fd5b50356001600160a01b0316620009c2565b604080519115158252519081900360200190f35b620001f160048036036020811015620002f557600080fd5b5035620009d7565b620001f162000a05565b620001f162000a29565b6200033a600480360360208110156200032957600080fd5b50356001600160a01b031662000a4d565b604080519315158452602084019290925282820152519081900360600190f35b6200022c600480360360208110156200037257600080fd5b503562000a72565b620001f162000a9a565b620001f1600480360360608110156200039c57600080fd5b506001600160a01b03813581169160208101358216916040909101351662000ad6565b6200016f62000e12565b6200029e60048036036040811015620003e157600080fd5b506001600160a01b03813516906020013562000e70565b6200022c600480360360208110156200041057600080fd5b50356001600160a01b031662001064565b620001f1600480360360408110156200043957600080fd5b506001600160a01b03813581169160200135166200107f565b620001f16200109c565b6200029e620010ef565b620001f16200127b565b6200029e600480360360808110156200048857600080fd5b810190602081018135600160201b811115620004a357600080fd5b820183602082011115620004b657600080fd5b803590602001918460208302840111600160201b83111715620004d857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200052857600080fd5b8201836020820111156200053b57600080fd5b803590602001918460208302840111600160201b831117156200055d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620005ad57600080fd5b820183602082011115620005c057600080fd5b803590602001918460208302840111600160201b83111715620005e257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200063257600080fd5b8201836020820111156200064557600080fd5b803590602001918460208302840111600160201b831117156200066757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506200129f945050505050565b620001f1620014fd565b620001f162001521565b620001f162001545565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200074d5780601f1062000721576101008083540402835291602001916200074d565b820191906000526020600020905b8154815290600101906020018083116200072f57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002602052600090815260409020546001600160a01b031681565b600080620007c37f00000000000000000000000000000000000000000000000000000000000000008462000818565b90506000620007f37f00000000000000000000000000000000000000000000000000000000000000008562000818565b90506200080d8162000806878562001633565b9062001569565b925050505b92915050565b600082620008295750600062000812565b81620008385750600162000812565b81600114156200084a57508162000812565b60015b6001831115620008c45762000864836002620015cf565b6200088c5762000875848062001633565b93506200088483600262001569565b9250620008be565b62000898848262001633565b9050620008a6848062001633565b9350620008bb60026200080685600162001691565b92505b6200084d565b620008d0848262001633565b949350505050565b336000908152600260205260409020546001600160a01b0316156200092f5760405162461bcd60e51b815260040180806020018281038252602b815260200180620038f8602b913960400191505060405180910390fd5b3360009081526004602052604090205460ff1615620009805760405162461bcd60e51b815260040180806020018281038252602a81526020018062003796602a913960400191505060405180910390fd5b33600081815260046020526040808220805460ff19166001179055517fb0b94cff8b84fc67513b977d68a5cdd67550bd9b8d99a34b570e3367b78437869190a2565b60046020526000908152604090205460ff1681565b6000620008127f00000000000000000000000000000000000000000000000000000000000000008362000794565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60066020526000908152604090208054600182015460029092015460ff909116919083565b6007818154811062000a8057fe5b6000918252602090912001546001600160a01b0316905081565b600062000ad17f000000000000000000000000000000000000000000000000000000000000000062000acb6200109c565b62000794565b905090565b6001600160a01b03808216600090815260056020908152604080832093871683529290529081205462000b0c5750600062000e0b565b6001600160a01b038281166000908152600260205260409020541615801562000b4e57506001600160a01b03821660009081526004602052604090205460ff16155b1562000b5d5750600062000e0b565b6001600160a01b038481166000908152600260205260409020541662000b865750600062000e0b565b6001600160a01b0380851660009081526002602090815260408083205481516370a0823160e01b815288861660048201529151939416926370a0823192602480840193919291829003018186803b15801562000be157600080fd5b505afa15801562000bf6573d6000803e3d6000fd5b505050506040513d602081101562000c0d57600080fd5b505190506001600160a01b03858116908416148062000c4457506001600160a01b03831660009081526004602052604090205460ff165b1562000c5257905062000e0b565b6001600160a01b0380861660009081526002602090815260408083205481516370a0823160e01b815288861660048201529151939416926370a0823192602480840193919291829003018186803b15801562000cad57600080fd5b505afa15801562000cc2573d6000803e3d6000fd5b505050506040513d602081101562000cd957600080fd5b50516001600160a01b0380861660008181526005602090815260408083208c86168452825280832054848452600283528184205482516370a0823160e01b815260048101969096529151969750606496939562000d9395889562000806959394909216926370a0823192602480840193829003018186803b15801562000d5e57600080fd5b505afa15801562000d73573d6000803e3d6000fd5b505050506040513d602081101562000d8a57600080fd5b50519062001633565b90508281101562000dac57600094505050505062000e0b565b6001600160a01b038087166000908152600560209081526040808320938c1683529290529081205462000df5908490620008069062000ded90839062001691565b879062001633565b905062000e03828262001691565b955050505050505b9392505050565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200074d5780601f1062000721576101008083540402835291602001916200074d565b336000908152600260205260409020546001600160a01b031615158062000ea657503360009081526004602052604090205460ff165b62000ee35760405162461bcd60e51b8152600401808060200182810382526031815260200180620037c06031913960400191505060405180910390fd5b336001600160a01b038316141562000f3f576040805162461bcd60e51b815260206004820152601a6024820152792cb7ba9031b0b713ba103ab73a393ab9ba103cb7bab939b2b63360311b604482015290519081900360640190fd5b6001600160a01b03821660009081526004602052604090205460ff161562000fae576040805162461bcd60e51b815260206004820152601f60248201527f596f752063616e277420747275737420616e206f7267616e697a6174696f6e00604482015290519081900360640190fd5b606481111562000ff05760405162461bcd60e51b8152600401808060200182810382526025815260200180620038aa6025913960400191505060405180910390fd5b3360009081526004602052604090205460ff16156200105457801580620010175750806064145b620010545760405162461bcd60e51b8152600401808060200182810382526021815260200180620038686021913960400191505060405180910390fd5b620010608282620016ef565b5050565b6003602052600090815260409020546001600160a01b031681565b600560209081526000928352604080842090915290825290205481565b600062000ad17f000000000000000000000000000000000000000000000000000000000000000062000806427f000000000000000000000000000000000000000000000000000000000000000062001691565b336000908152600260205260409020546001600160a01b03161562001155576040805162461bcd60e51b8152602060048201526017602482015276596f752063616e2774207369676e20757020747769636560481b604482015290519081900360640190fd5b3360009081526004602052604090205460ff1615620011a65760405162461bcd60e51b815260040180806020018281038252602b81526020018062003923602b913960400191505060405180910390fd5b600033604051620011b79062001eae565b6001600160a01b03909116815260405190819003602001906000f080158015620011e5573d6000803e3d6000fd5b5033600081815260026020908152604080832080546001600160a01b0387166001600160a01b03199182168117909255908452600390925290912080549091168217905590915062001239906064620016ef565b604080516001600160a01b0383168152905133917f358ba8f768af134eb5af120e9a61dc1ef29b29f597f047b555fc3675064a0342919081900360200190a250565b7f000000000000000000000000000000000000000000000000000000000000000081565b8351825114620012e15760405162461bcd60e51b815260040180806020018281038252602a815260200180620037f1602a913960400191505060405180910390fd5b8351835114620013235760405162461bcd60e51b81526004018080602001828103825260298152602001806200376d6029913960400191505060405180910390fd5b8351815114620013655760405162461bcd60e51b815260040180806020018281038252602c8152602001806200381b602c913960400191505060405180910390fd5b60005b8351811015620014ea5760008482815181106200138157fe5b6020026020010151905060008483815181106200139a57fe5b602002602001015190506000878481518110620013b357fe5b602002602001015190506000858581518110620013cc57fe5b602002602001015190506000620013e583868662000ad6565b90508082111562001434576040805162461bcd60e51b8152602060048201526014602482015273151c9d5cdd081b1a5b5a5d08195e18d95959195960621b604482015290519081900360640190fd5b6200144185858462001751565b6001600160a01b0380841660009081526002602090815260408083205481516308299c0f60e21b81528a8616600482015289861660248201526044810188905291519416936320a6703c93606480840194938390030190829087803b158015620014aa57600080fd5b505af1158015620014bf573d6000803e3d6000fd5b505050506040513d6020811015620014d657600080fd5b505060019095019450620013689350505050565b50620014f7835162001906565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808211620015bd576040805162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015290519081900360640190fd5b818381620015c757fe5b049392505050565b600080821162001621576040805162461bcd60e51b8152602060048201526018602482015277536166654d6174683a206d6f64756c6f206279207a65726f60401b604482015290519081900360640190fd5b8183816200162b57fe5b069392505050565b600082620016445750600062000812565b828202828482816200165257fe5b041462000e0b5760405162461bcd60e51b8152600401808060200182810382526021815260200180620038476021913960400191505060405180910390fd5b600082821115620016e9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020859055805185815290519293927fe60c754dd8ab0b1b5fccba257d6ebcd7d09e360ab7dd7a6e58198ca1f57cdcec929181900390910190a35050565b6001600160a01b03831660009081526006602052604090205460ff1615620017bd576001600160a01b0383166000908152600660205260409020600101546200179b908262001e55565b6001600160a01b03841660009081526006602052604090206001015562001828565b6001600160a01b0383166000818152600660205260408120805460ff1916600190811782559081018490556007805491820181559091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b03191690911790555b6001600160a01b03821660009081526006602052604090205460ff161562001894576001600160a01b03821660009081526006602052604090206002015462001872908262001e55565b6001600160a01b03831660009081526006602052604090206002015562001901565b6001600160a01b0382166000818152600660205260408120805460ff19166001908117825560029091018490556007805491820181559091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b03191690911790555b505050565b60008060005b60075481101562001b02576200192162001ebc565b60066000600784815481106200193357fe5b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff161515815260018201549381018490526002909101549181018290529250101562001a64576001600160a01b03841615620019d35760405162461bcd60e51b8152600401808060200182810382526021815260200180620038896021913960400191505060405180910390fd5b336001600160a01b031660078381548110620019eb57fe5b6000918252602090912001546001600160a01b03161462001a3e5760405162461bcd60e51b8152600401808060200182810382526029815260200180620038cf6029913960400191505060405180910390fd5b6007828154811062001a4c57fe5b6000918252602090912001546001600160a01b031693505b80602001518160400151111562001af8576001600160a01b0383161562001ad2576040805162461bcd60e51b815260206004820181905260248201527f506174682073656e647320746f206d6f7265207468616e206f6e652064657374604482015290519081900360640190fd5b6007828154811062001ae057fe5b6000918252602090912001546001600160a01b031692505b506001016200190c565b506001600160a01b03821662001b5d576040805162461bcd60e51b815260206004820152601b60248201527a5472616e73616374696f6e206d757374206861766520612073726360281b604482015290519081900360640190fd5b6001600160a01b03811662001bb9576040805162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e206d75737420686176652061206465737400000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600660205260409020600201541562001c1e576040805162461bcd60e51b815260206004820152601360248201527253656e64657220697320726563656976696e6760681b604482015290519081900360640190fd5b6001600160a01b0381166000908152600660205260409020600101541562001c84576040805162461bcd60e51b8152602060048201526014602482015273526563697069656e742069732073656e64696e6760601b604482015290519081900360640190fd5b6001600160a01b038082166000908152600660205260408082206002015492851682529020600101541462001ceb5760405162461bcd60e51b81526004018080602001828103825260218152602001806200394e6021913960400191505060405180910390fd5b60075460018401101562001d40576040805162461bcd60e51b81526020600482015260176024820152765365656e20746f6f206d616e792061646472657373657360481b604482015290519081900360640190fd5b6001600160a01b038281166000818152600660209081526040918290206001015482519081529151938516937f8451019aab65b4193860ef723cb0d56b475a26a72b7bfc55c1dbd6121015285a9281900390910190a36007545b6001811062001df957600660006007600184038154811062001db857fe5b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff1916815560018101829055600201556000190162001d9a565b5062001e086007600062001edf565b6007541562001901576040805162461bcd60e51b81526020600482015260146024820152735365656e2073686f756c6420626520656d70747960601b604482015290519081900360640190fd5b60008282018381101562000e0b576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b61184f8062001f1e83390190565b604051806060016040528060001515815260200160008152602001600081525090565b508054600082559060005260206000209081019062001eff919062001f02565b50565b5b8082111562001f19576000815560010162001f03565b509056fe60c0604052600960f91b6080523480156200001957600080fd5b506040516200184f3803806200184f833981810160405260208110156200003f57600080fd5b50516001600160a01b0381166200005557600080fd5b6001600160601b0319606082901b1660a052600680546001600160a01b031916331790556200008362000192565b6005556200009062000196565b6007556006546040805163863623bb60e01b815290516001600160a01b039092169163863623bb91600480820192602092909190829003018186803b158015620000d957600080fd5b505afa158015620000ee573d6000803e3d6000fd5b505050506040513d60208110156200010557600080fd5b505160085560065460408051630cf96a5b60e31b815290516200018b9284926001600160a01b03909116916367cb52d891600480820192602092909190829003018186803b1580156200015757600080fd5b505afa1580156200016c573d6000803e3d6000fd5b505050506040513d60208110156200018357600080fd5b505162000215565b506200054e565b4290565b600080620001ea620001a762000324565b620001b8620001cc6001826200039d565b620003e360201b62000c021790919060201c565b620001d662000447565b6200048d60201b62000c5a1790919060201c565b90506200020f620001fa62000192565b82620004eb60201b62000cb31790919060201c565b91505090565b6001600160a01b03821662000271576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200027f6000838362000549565b6200029b81600254620003e360201b62000c021790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002ce91839062000c02620003e3821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6006546040805163eae4c19f60e01b815290516000926001600160a01b03169163eae4c19f916004808301926020929190829003018186803b1580156200036a57600080fd5b505afa1580156200037f573d6000803e3d6000fd5b505050506040513d60208110156200039657600080fd5b5051905090565b6006546040805163526575a160e11b815290516000926001600160a01b03169163a4caeb42916004808301926020929190829003018186803b1580156200036a57600080fd5b6000828201838110156200043e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6006546040805163ef78d4fd60e01b815290516000926001600160a01b03169163ef78d4fd916004808301926020929190829003018186803b1580156200036a57600080fd5b6000826200049e5750600062000441565b82820282848281620004ac57fe5b04146200043e5760405162461bcd60e51b81526004018080602001828103825260218152602001806200182e6021913960400191505060405180910390fd5b60008282111562000543576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b505050565b60805160f81c60a05160601c6112ac620005826000398061058952806109bc5280610ac45250806106ac52506112ac6000f3fe608060405234801561001057600080fd5b50600436106101645760003560e01c80636c050eae116100c95780636c050eae1461034c57806370a082311461035457806370dea79a1461037a57806375f12b21146103825780638b4eed811461038a5780638da5cb5b1461039257806395d89b411461039a578063a2e62045146103a2578063a457c2d7146103aa578063a4caeb42146103d6578063a9059cbb146103de578063d40480891461040a578063dd62ed3e14610412578063ef78d4fd1461044057610164565b806306fdde031461016957806307da68f5146101e6578063095ea7b3146101f05780630b0aaf2714610230578063107129dd1461024a57806316ada5471461025257806318160ddd1461025a57806320a6703c1461026257806323b872dd14610298578063313ce567146102ce578063365a86fc146102ec57806339509351146103105780633b6fe91f1461033c57806341c3054614610344575b600080fd5b610171610448565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ab578181015183820152602001610193565b50505050905090810190601f1680156101d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ee61057e565b005b61021c6004803603604081101561020657600080fd5b506001600160a01b0381351690602001356105c2565b604080519115158252519081900360200190f35b6102386105d9565b60408051918252519081900360200190f35b610238610605565b61023861060b565b61023861060f565b61021c6004803603606081101561027857600080fd5b506001600160a01b03813581169160208101359091169060400135610615565b61021c600480360360608110156102ae57600080fd5b506001600160a01b03813581169160208101359091169060400135610641565b6102d66106aa565b6040805160ff9092168252519081900360200190f35b6102f46106ce565b604080516001600160a01b039092168252519081900360200190f35b61021c6004803603604081101561032657600080fd5b506001600160a01b0381351690602001356106dd565b610238610713565b610238610789565b6102386107d5565b6102386004803603602081101561036a57600080fd5b50356001600160a01b031661090b565b610238610926565b61021c61096b565b6102386109b4565b6102f46109ba565b6101716109de565b6101ee610a23565b61021c600480360360408110156103c057600080fd5b506001600160a01b038135169060200135610aec565b610238610b3b565b61021c600480360360408110156103f457600080fd5b506001600160a01b038135169060200135610b80565b610238610b8c565b6102386004803603604081101561042857600080fd5b506001600160a01b0381358116916020013516610b92565b610238610bbd565b600654604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b15801561048d57600080fd5b505afa1580156104a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156104ca57600080fd5b8101908080516040519392919084600160201b8211156104e957600080fd5b9083019060208201858111156104fe57600080fd5b8251600160201b81118282018810171561051757600080fd5b82525081516020918201929091019080838360005b8381101561054457818101518382015260200161052c565b50505050905090810190601f1680156105715780820380516001836020036101000a031916815260200191505b5060405250505090505b90565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105b357600080fd5b6009805460ff19166001179055565b60006105cf338484610d10565b5060015b92915050565b60006106006105e6610bbd565b6105fa6105f1610713565b60055490610cb3565b90610dfc565b905090565b60075481565b4290565b60025490565b6006546000906001600160a01b0316331461062f57600080fd5b61063a848484610e60565b9392505050565b600061064e848484610e60565b6106a0843361069b856040518060600160405280602881526020016111e1602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610fbb565b610d10565b5060019392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6006546001600160a01b031681565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105cf91859061069b9086610c02565b6006546040805163eae4c19f60e01b815290516000926001600160a01b03169163eae4c19f916004808301926020929190829003018186803b15801561075857600080fd5b505afa15801561076c573d6000803e3d6000fd5b505050506040513d602081101561078257600080fd5b5051905090565b6000806107bb610797610713565b6107a76107ad60016107a7610b3b565b90610c02565b6107b5610bbd565b90610c5a565b90506107cf6107c861060b565b8290610cb3565b91505090565b60006107df61096b565b156107ec5750600061057b565b6005546007546008546000929190836108036105d9565b90505b61080e61060b565b6108188585610c02565b116108d65761083161082a8484610c5a565b8690610c02565b945061083d8484610c02565b9350610847610bbd565b9250610854816001610c02565b600654604080516361c4b42160e01b81526004810184905290519293506001600160a01b03909116916361c4b42191602480820192602092909190829003018186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d60208110156108cd57600080fd5b50519150610806565b60006108ea856108e461060b565b90610cb3565b90506109006108f98285610c5a565b8790610c02565b965050505050505090565b6001600160a01b031660009081526020819052604090205490565b6006546040805163386f53cd60e11b815290516000926001600160a01b0316916370dea79a916004808301926020929190829003018186803b15801561075857600080fd5b60095460009060ff16156109815750600161057b565b60006109916005546108e461060b565b905061099b610926565b8111156109ac57600191505061057b565b600091505090565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600654604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b15801561048d57600080fd5b6000610a2d6107d5565b90508015610ae957610a3d610789565b600755610a4861060b565b6005556006546040805163863623bb60e01b815290516001600160a01b039092169163863623bb91600480820192602092909190829003018186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d6020811015610aba57600080fd5b5051600855610ae97f000000000000000000000000000000000000000000000000000000000000000082611052565b50565b60006105cf338461069b85604051806060016040528060258152602001611252602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610fbb565b6006546040805163526575a160e11b815290516000926001600160a01b03169163a4caeb42916004808301926020929190829003018186803b15801561075857600080fd5b600061063a8383611142565b60085481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546040805163ef78d4fd60e01b815290516000926001600160a01b03169163ef78d4fd916004808301926020929190829003018186803b15801561075857600080fd5b60008282018381101561063a576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600082610c69575060006105d3565b82820282848281610c7657fe5b041461063a5760405162461bcd60e51b81526004018080602001828103825260218152602001806111c06021913960400191505060405180910390fd5b600082821115610d0a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b038316610d555760405162461bcd60e51b815260040180806020018281038252602481526020018061122e6024913960400191505060405180910390fd5b6001600160a01b038216610d9a5760405162461bcd60e51b81526004018080602001828103825260228152602001806111786022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000808211610e4f576040805162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015290519081900360640190fd5b818381610e5857fe5b049392505050565b6001600160a01b038316610ea55760405162461bcd60e51b81526004018080602001828103825260258152602001806112096025913960400191505060405180910390fd5b6001600160a01b038216610eea5760405162461bcd60e51b81526004018080602001828103825260238152602001806111556023913960400191505060405180910390fd5b610ef583838361114f565b610f328160405180606001604052806026815260200161119a602691396001600160a01b0386166000908152602081905260409020549190610fbb565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610f619082610c02565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561104a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561100f578181015183820152602001610ff7565b50505050905090810190601f16801561103c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166110ad576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6110b96000838361114f565b6002546110c69082610c02565b6002556001600160a01b0382166000908152602081905260409020546110ec9082610c02565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60006105cf338484610e60565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220e907e78d83fcfaf086b8e5e57d60e0ed0571f7134aca5d237090840030cdbc2864736f6c63430007010033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77546f6b656e73206172726179206c656e677468206d75737420657175616c2073726373206172726179596f752063616e2774207369676e20757020617320616e206f7267616e697a6174696f6e207477696365596f752063616e206f6e6c792074727573742070656f706c6520616674657220796f75277665207369676e656420757021546f6b656e73206172726179206c656e677468206d75737420657175616c206465737473206172726179546f6b656e73206172726179206c656e677468206d75737420657175616c20616d6f756e7473206172726179536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754727573742069732062696e61727920666f72206f7267616e697a6174696f6e73506174682073656e64732066726f6d206d6f7265207468616e206f6e65207372634c696d6974206d75737420626520612070657263656e74616765206f7574206f66203130305061746820646f65736e27742073656e642066726f6d207472616e73616374696f6e2073656e6465724e6f726d616c2075736572732063616e6e6f74207369676e7570206173206f7267616e697a6174696f6e734f7267616e697a6174696f6e732063616e6e6f74207369676e7570206173206e6f726d616c207573657273556e657175616c2073656e7420616e6420726563656976656420616d6f756e7473a26469706673582212203384b78cc5a24deb76b83b14c8a0100eeb1cab48837a3481131b61b54f1fabba64736f6c63430007010033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77";
var isSuperArgs$1 = (xs) => xs.length > 1;
var Hub__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$1(args)) {
      super(...args);
    } else {
      super(_abi$1, _bytecode$1, args[0]);
    }
  }
  getDeployTransaction(_inflation, _period, _symbol, _name, _signupBonus, _initialIssuance, _timeout, overrides) {
    return super.getDeployTransaction(_inflation, _period, _symbol, _name, _signupBonus, _initialIssuance, _timeout, overrides || {});
  }
  deploy(_inflation, _period, _symbol, _name, _signupBonus, _initialIssuance, _timeout, overrides) {
    return super.deploy(_inflation, _period, _symbol, _name, _signupBonus, _initialIssuance, _timeout, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi$1);
  }
  static connect(address, runner) {
    return new Contract(address, _abi$1, runner);
  }
};
Hub__factory.bytecode = _bytecode$1;
Hub__factory.abi = _abi$1;
var _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256"
      }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address"
      },
      {
        internalType: "address",
        name: "spender",
        type: "address"
      }
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "currentIssuance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256"
      }
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "hub",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256"
      }
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "inflationOffset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "lastTouched",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address"
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "time",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "period",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "periods",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "timeout",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "periodsWhenLastTouched",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "hubDeployedAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "stop",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "stopped",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "findInflationOffset",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "look",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "update",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        internalType: "address",
        name: "to",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "hubTransfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dst",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256"
      }
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var _bytecode = "0x60c0604052600960f91b6080523480156200001957600080fd5b506040516200184f3803806200184f833981810160405260208110156200003f57600080fd5b50516001600160a01b0381166200005557600080fd5b6001600160601b0319606082901b1660a052600680546001600160a01b031916331790556200008362000192565b6005556200009062000196565b6007556006546040805163863623bb60e01b815290516001600160a01b039092169163863623bb91600480820192602092909190829003018186803b158015620000d957600080fd5b505afa158015620000ee573d6000803e3d6000fd5b505050506040513d60208110156200010557600080fd5b505160085560065460408051630cf96a5b60e31b815290516200018b9284926001600160a01b03909116916367cb52d891600480820192602092909190829003018186803b1580156200015757600080fd5b505afa1580156200016c573d6000803e3d6000fd5b505050506040513d60208110156200018357600080fd5b505162000215565b506200054e565b4290565b600080620001ea620001a762000324565b620001b8620001cc6001826200039d565b620003e360201b62000c021790919060201c565b620001d662000447565b6200048d60201b62000c5a1790919060201c565b90506200020f620001fa62000192565b82620004eb60201b62000cb31790919060201c565b91505090565b6001600160a01b03821662000271576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200027f6000838362000549565b6200029b81600254620003e360201b62000c021790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002ce91839062000c02620003e3821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6006546040805163eae4c19f60e01b815290516000926001600160a01b03169163eae4c19f916004808301926020929190829003018186803b1580156200036a57600080fd5b505afa1580156200037f573d6000803e3d6000fd5b505050506040513d60208110156200039657600080fd5b5051905090565b6006546040805163526575a160e11b815290516000926001600160a01b03169163a4caeb42916004808301926020929190829003018186803b1580156200036a57600080fd5b6000828201838110156200043e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6006546040805163ef78d4fd60e01b815290516000926001600160a01b03169163ef78d4fd916004808301926020929190829003018186803b1580156200036a57600080fd5b6000826200049e5750600062000441565b82820282848281620004ac57fe5b04146200043e5760405162461bcd60e51b81526004018080602001828103825260218152602001806200182e6021913960400191505060405180910390fd5b60008282111562000543576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b505050565b60805160f81c60a05160601c6112ac620005826000398061058952806109bc5280610ac45250806106ac52506112ac6000f3fe608060405234801561001057600080fd5b50600436106101645760003560e01c80636c050eae116100c95780636c050eae1461034c57806370a082311461035457806370dea79a1461037a57806375f12b21146103825780638b4eed811461038a5780638da5cb5b1461039257806395d89b411461039a578063a2e62045146103a2578063a457c2d7146103aa578063a4caeb42146103d6578063a9059cbb146103de578063d40480891461040a578063dd62ed3e14610412578063ef78d4fd1461044057610164565b806306fdde031461016957806307da68f5146101e6578063095ea7b3146101f05780630b0aaf2714610230578063107129dd1461024a57806316ada5471461025257806318160ddd1461025a57806320a6703c1461026257806323b872dd14610298578063313ce567146102ce578063365a86fc146102ec57806339509351146103105780633b6fe91f1461033c57806341c3054614610344575b600080fd5b610171610448565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ab578181015183820152602001610193565b50505050905090810190601f1680156101d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ee61057e565b005b61021c6004803603604081101561020657600080fd5b506001600160a01b0381351690602001356105c2565b604080519115158252519081900360200190f35b6102386105d9565b60408051918252519081900360200190f35b610238610605565b61023861060b565b61023861060f565b61021c6004803603606081101561027857600080fd5b506001600160a01b03813581169160208101359091169060400135610615565b61021c600480360360608110156102ae57600080fd5b506001600160a01b03813581169160208101359091169060400135610641565b6102d66106aa565b6040805160ff9092168252519081900360200190f35b6102f46106ce565b604080516001600160a01b039092168252519081900360200190f35b61021c6004803603604081101561032657600080fd5b506001600160a01b0381351690602001356106dd565b610238610713565b610238610789565b6102386107d5565b6102386004803603602081101561036a57600080fd5b50356001600160a01b031661090b565b610238610926565b61021c61096b565b6102386109b4565b6102f46109ba565b6101716109de565b6101ee610a23565b61021c600480360360408110156103c057600080fd5b506001600160a01b038135169060200135610aec565b610238610b3b565b61021c600480360360408110156103f457600080fd5b506001600160a01b038135169060200135610b80565b610238610b8c565b6102386004803603604081101561042857600080fd5b506001600160a01b0381358116916020013516610b92565b610238610bbd565b600654604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b15801561048d57600080fd5b505afa1580156104a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156104ca57600080fd5b8101908080516040519392919084600160201b8211156104e957600080fd5b9083019060208201858111156104fe57600080fd5b8251600160201b81118282018810171561051757600080fd5b82525081516020918201929091019080838360005b8381101561054457818101518382015260200161052c565b50505050905090810190601f1680156105715780820380516001836020036101000a031916815260200191505b5060405250505090505b90565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105b357600080fd5b6009805460ff19166001179055565b60006105cf338484610d10565b5060015b92915050565b60006106006105e6610bbd565b6105fa6105f1610713565b60055490610cb3565b90610dfc565b905090565b60075481565b4290565b60025490565b6006546000906001600160a01b0316331461062f57600080fd5b61063a848484610e60565b9392505050565b600061064e848484610e60565b6106a0843361069b856040518060600160405280602881526020016111e1602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610fbb565b610d10565b5060019392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6006546001600160a01b031681565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105cf91859061069b9086610c02565b6006546040805163eae4c19f60e01b815290516000926001600160a01b03169163eae4c19f916004808301926020929190829003018186803b15801561075857600080fd5b505afa15801561076c573d6000803e3d6000fd5b505050506040513d602081101561078257600080fd5b5051905090565b6000806107bb610797610713565b6107a76107ad60016107a7610b3b565b90610c02565b6107b5610bbd565b90610c5a565b90506107cf6107c861060b565b8290610cb3565b91505090565b60006107df61096b565b156107ec5750600061057b565b6005546007546008546000929190836108036105d9565b90505b61080e61060b565b6108188585610c02565b116108d65761083161082a8484610c5a565b8690610c02565b945061083d8484610c02565b9350610847610bbd565b9250610854816001610c02565b600654604080516361c4b42160e01b81526004810184905290519293506001600160a01b03909116916361c4b42191602480820192602092909190829003018186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d60208110156108cd57600080fd5b50519150610806565b60006108ea856108e461060b565b90610cb3565b90506109006108f98285610c5a565b8790610c02565b965050505050505090565b6001600160a01b031660009081526020819052604090205490565b6006546040805163386f53cd60e11b815290516000926001600160a01b0316916370dea79a916004808301926020929190829003018186803b15801561075857600080fd5b60095460009060ff16156109815750600161057b565b60006109916005546108e461060b565b905061099b610926565b8111156109ac57600191505061057b565b600091505090565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600654604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b15801561048d57600080fd5b6000610a2d6107d5565b90508015610ae957610a3d610789565b600755610a4861060b565b6005556006546040805163863623bb60e01b815290516001600160a01b039092169163863623bb91600480820192602092909190829003018186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d6020811015610aba57600080fd5b5051600855610ae97f000000000000000000000000000000000000000000000000000000000000000082611052565b50565b60006105cf338461069b85604051806060016040528060258152602001611252602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610fbb565b6006546040805163526575a160e11b815290516000926001600160a01b03169163a4caeb42916004808301926020929190829003018186803b15801561075857600080fd5b600061063a8383611142565b60085481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546040805163ef78d4fd60e01b815290516000926001600160a01b03169163ef78d4fd916004808301926020929190829003018186803b15801561075857600080fd5b60008282018381101561063a576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600082610c69575060006105d3565b82820282848281610c7657fe5b041461063a5760405162461bcd60e51b81526004018080602001828103825260218152602001806111c06021913960400191505060405180910390fd5b600082821115610d0a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b038316610d555760405162461bcd60e51b815260040180806020018281038252602481526020018061122e6024913960400191505060405180910390fd5b6001600160a01b038216610d9a5760405162461bcd60e51b81526004018080602001828103825260228152602001806111786022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000808211610e4f576040805162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015290519081900360640190fd5b818381610e5857fe5b049392505050565b6001600160a01b038316610ea55760405162461bcd60e51b81526004018080602001828103825260258152602001806112096025913960400191505060405180910390fd5b6001600160a01b038216610eea5760405162461bcd60e51b81526004018080602001828103825260238152602001806111556023913960400191505060405180910390fd5b610ef583838361114f565b610f328160405180606001604052806026815260200161119a602691396001600160a01b0386166000908152602081905260409020549190610fbb565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610f619082610c02565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561104a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561100f578181015183820152602001610ff7565b50505050905090810190601f16801561103c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166110ad576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6110b96000838361114f565b6002546110c69082610c02565b6002556001600160a01b0382166000908152602081905260409020546110ec9082610c02565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60006105cf338484610e60565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220e907e78d83fcfaf086b8e5e57d60e0ed0571f7134aca5d237090840030cdbc2864736f6c63430007010033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77";
var isSuperArgs = (xs) => xs.length > 1;
var Token__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }
  getDeployTransaction(_owner, overrides) {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  deploy(_owner, overrides) {
    return super.deploy(_owner, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi);
  }
  static connect(address, runner) {
    return new Contract(address, _abi, runner);
  }
};
Token__factory.bytecode = _bytecode;
Token__factory.abi = _abi;

// node_modules/bignumber.js/bignumber.mjs
var isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i;
var mathceil = Math.ceil;
var mathfloor = Math.floor;
var bignumberError = "[BigNumber Error] ";
var tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ";
var BASE = 1e14;
var LOG_BASE = 14;
var MAX_SAFE_INTEGER = 9007199254740991;
var POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13];
var SQRT_BASE = 1e7;
var MAX = 1e9;
function clone(configObject) {
  var div, convertBase, parseNumeric, P = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
    prefix: "",
    groupSize: 3,
    secondaryGroupSize: 0,
    groupSeparator: ",",
    decimalSeparator: ".",
    fractionGroupSize: 0,
    fractionGroupSeparator: " ",
    // non-breaking space
    suffix: ""
  }, ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
  function BigNumber2(v, b) {
    var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
    if (!(x instanceof BigNumber2)) return new BigNumber2(v, b);
    if (b == null) {
      if (v && v._isBigNumber === true) {
        x.s = v.s;
        if (!v.c || v.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (v.e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = v.e;
          x.c = v.c.slice();
        }
        return;
      }
      if ((isNum = typeof v == "number") && v * 0 == 0) {
        x.s = 1 / v < 0 ? (v = -v, -1) : 1;
        if (v === ~~v) {
          for (e = 0, i = v; i >= 10; i /= 10, e++) ;
          if (e > MAX_EXP) {
            x.c = x.e = null;
          } else {
            x.e = e;
            x.c = [v];
          }
          return;
        }
        str = String(v);
      } else {
        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);
        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
      }
      if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
      if ((i = str.search(/e/i)) > 0) {
        if (e < 0) e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {
        e = str.length;
      }
    } else {
      intCheck(b, 2, ALPHABET.length, "Base");
      if (b == 10 && alphabetHasNormalDecimalDigits) {
        x = new BigNumber2(v);
        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
      }
      str = String(v);
      if (isNum = typeof v == "number") {
        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);
        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;
        if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
          throw Error(tooManyDigits + v);
        }
      } else {
        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
      }
      alphabet = ALPHABET.slice(0, b);
      e = i = 0;
      for (len = str.length; i < len; i++) {
        if (alphabet.indexOf(c = str.charAt(i)) < 0) {
          if (c == ".") {
            if (i > e) {
              e = len;
              continue;
            }
          } else if (!caseChanged) {
            if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
              caseChanged = true;
              i = -1;
              e = 0;
              continue;
            }
          }
          return parseNumeric(x, String(v), isNum, b);
        }
      }
      isNum = false;
      str = convertBase(str, b, 10, x.s);
      if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
      else e = str.length;
    }
    for (i = 0; str.charCodeAt(i) === 48; i++) ;
    for (len = str.length; str.charCodeAt(--len) === 48; ) ;
    if (str = str.slice(i, ++len)) {
      len -= i;
      if (isNum && BigNumber2.DEBUG && len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
        throw Error(tooManyDigits + x.s * v);
      }
      if ((e = e - i - 1) > MAX_EXP) {
        x.c = x.e = null;
      } else if (e < MIN_EXP) {
        x.c = [x.e = 0];
      } else {
        x.e = e;
        x.c = [];
        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;
        if (i < len) {
          if (i) x.c.push(+str.slice(0, i));
          for (len -= LOG_BASE; i < len; ) {
            x.c.push(+str.slice(i, i += LOG_BASE));
          }
          i = LOG_BASE - (str = str.slice(i)).length;
        } else {
          i -= len;
        }
        for (; i--; str += "0") ;
        x.c.push(+str);
      }
    } else {
      x.c = [x.e = 0];
    }
  }
  BigNumber2.clone = clone;
  BigNumber2.ROUND_UP = 0;
  BigNumber2.ROUND_DOWN = 1;
  BigNumber2.ROUND_CEIL = 2;
  BigNumber2.ROUND_FLOOR = 3;
  BigNumber2.ROUND_HALF_UP = 4;
  BigNumber2.ROUND_HALF_DOWN = 5;
  BigNumber2.ROUND_HALF_EVEN = 6;
  BigNumber2.ROUND_HALF_CEIL = 7;
  BigNumber2.ROUND_HALF_FLOOR = 8;
  BigNumber2.EUCLID = 9;
  BigNumber2.config = BigNumber2.set = function(obj) {
    var p, v;
    if (obj != null) {
      if (typeof obj == "object") {
        if (obj.hasOwnProperty(p = "DECIMAL_PLACES")) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          DECIMAL_PLACES = v;
        }
        if (obj.hasOwnProperty(p = "ROUNDING_MODE")) {
          v = obj[p];
          intCheck(v, 0, 8, p);
          ROUNDING_MODE = v;
        }
        if (obj.hasOwnProperty(p = "EXPONENTIAL_AT")) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, 0, p);
            intCheck(v[1], 0, MAX, p);
            TO_EXP_NEG = v[0];
            TO_EXP_POS = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
          }
        }
        if (obj.hasOwnProperty(p = "RANGE")) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, -1, p);
            intCheck(v[1], 1, MAX, p);
            MIN_EXP = v[0];
            MAX_EXP = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            if (v) {
              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
            } else {
              throw Error(bignumberError + p + " cannot be zero: " + v);
            }
          }
        }
        if (obj.hasOwnProperty(p = "CRYPTO")) {
          v = obj[p];
          if (v === !!v) {
            if (v) {
              if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                CRYPTO = v;
              } else {
                CRYPTO = !v;
                throw Error(bignumberError + "crypto unavailable");
              }
            } else {
              CRYPTO = v;
            }
          } else {
            throw Error(bignumberError + p + " not true or false: " + v);
          }
        }
        if (obj.hasOwnProperty(p = "MODULO_MODE")) {
          v = obj[p];
          intCheck(v, 0, 9, p);
          MODULO_MODE = v;
        }
        if (obj.hasOwnProperty(p = "POW_PRECISION")) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          POW_PRECISION = v;
        }
        if (obj.hasOwnProperty(p = "FORMAT")) {
          v = obj[p];
          if (typeof v == "object") FORMAT = v;
          else throw Error(bignumberError + p + " not an object: " + v);
        }
        if (obj.hasOwnProperty(p = "ALPHABET")) {
          v = obj[p];
          if (typeof v == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
            alphabetHasNormalDecimalDigits = v.slice(0, 10) == "0123456789";
            ALPHABET = v;
          } else {
            throw Error(bignumberError + p + " invalid: " + v);
          }
        }
      } else {
        throw Error(bignumberError + "Object expected: " + obj);
      }
    }
    return {
      DECIMAL_PLACES,
      ROUNDING_MODE,
      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
      RANGE: [MIN_EXP, MAX_EXP],
      CRYPTO,
      MODULO_MODE,
      POW_PRECISION,
      FORMAT,
      ALPHABET
    };
  };
  BigNumber2.isBigNumber = function(v) {
    if (!v || v._isBigNumber !== true) return false;
    if (!BigNumber2.DEBUG) return true;
    var i, n, c = v.c, e = v.e, s = v.s;
    out: if ({}.toString.call(c) == "[object Array]") {
      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
        if (c[0] === 0) {
          if (e === 0 && c.length === 1) return true;
          break out;
        }
        i = (e + 1) % LOG_BASE;
        if (i < 1) i += LOG_BASE;
        if (String(c[0]).length == i) {
          for (i = 0; i < c.length; i++) {
            n = c[i];
            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
          }
          if (n !== 0) return true;
        }
      }
    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
      return true;
    }
    throw Error(bignumberError + "Invalid BigNumber: " + v);
  };
  BigNumber2.maximum = BigNumber2.max = function() {
    return maxOrMin(arguments, -1);
  };
  BigNumber2.minimum = BigNumber2.min = function() {
    return maxOrMin(arguments, 1);
  };
  BigNumber2.random = function() {
    var pow2_53 = 9007199254740992;
    var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
      return mathfloor(Math.random() * pow2_53);
    } : function() {
      return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
    };
    return function(dp) {
      var a, b, e, k, v, i = 0, c = [], rand = new BigNumber2(ONE);
      if (dp == null) dp = DECIMAL_PLACES;
      else intCheck(dp, 0, MAX);
      k = mathceil(dp / LOG_BASE);
      if (CRYPTO) {
        if (crypto.getRandomValues) {
          a = crypto.getRandomValues(new Uint32Array(k *= 2));
          for (; i < k; ) {
            v = a[i] * 131072 + (a[i + 1] >>> 11);
            if (v >= 9e15) {
              b = crypto.getRandomValues(new Uint32Array(2));
              a[i] = b[0];
              a[i + 1] = b[1];
            } else {
              c.push(v % 1e14);
              i += 2;
            }
          }
          i = k / 2;
        } else if (crypto.randomBytes) {
          a = crypto.randomBytes(k *= 7);
          for (; i < k; ) {
            v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
            if (v >= 9e15) {
              crypto.randomBytes(7).copy(a, i);
            } else {
              c.push(v % 1e14);
              i += 7;
            }
          }
          i = k / 7;
        } else {
          CRYPTO = false;
          throw Error(bignumberError + "crypto unavailable");
        }
      }
      if (!CRYPTO) {
        for (; i < k; ) {
          v = random53bitInt();
          if (v < 9e15) c[i++] = v % 1e14;
        }
      }
      k = c[--i];
      dp %= LOG_BASE;
      if (k && dp) {
        v = POWS_TEN[LOG_BASE - dp];
        c[i] = mathfloor(k / v) * v;
      }
      for (; c[i] === 0; c.pop(), i--) ;
      if (i < 0) {
        c = [e = 0];
      } else {
        for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE) ;
        for (i = 1, v = c[0]; v >= 10; v /= 10, i++) ;
        if (i < LOG_BASE) e -= LOG_BASE - i;
      }
      rand.e = e;
      rand.c = c;
      return rand;
    };
  }();
  BigNumber2.sum = function() {
    var i = 1, args = arguments, sum = new BigNumber2(args[0]);
    for (; i < args.length; ) sum = sum.plus(args[i++]);
    return sum;
  };
  convertBase = /* @__PURE__ */ function() {
    var decimal = "0123456789";
    function toBaseOut(str, baseIn, baseOut, alphabet) {
      var j, arr = [0], arrL, i = 0, len = str.length;
      for (; i < len; ) {
        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn) ;
        arr[0] += alphabet.indexOf(str.charAt(i++));
        for (j = 0; j < arr.length; j++) {
          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] == null) arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }
      return arr.reverse();
    }
    return function(str, baseIn, baseOut, sign, callerIsToString) {
      var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
      if (i >= 0) {
        k = POW_PRECISION;
        POW_PRECISION = 0;
        str = str.replace(".", "");
        y = new BigNumber2(baseIn);
        x = y.pow(str.length - i);
        POW_PRECISION = k;
        y.c = toBaseOut(
          toFixedPoint(coeffToString(x.c), x.e, "0"),
          10,
          baseOut,
          decimal
        );
        y.e = y.c.length;
      }
      xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
      e = k = xc.length;
      for (; xc[--k] == 0; xc.pop()) ;
      if (!xc[0]) return alphabet.charAt(0);
      if (i < 0) {
        --e;
      } else {
        x.c = xc;
        x.e = e;
        x.s = sign;
        x = div(x, y, dp, rm, baseOut);
        xc = x.c;
        r = x.r;
        e = x.e;
      }
      d = e + dp + 1;
      i = xc[d];
      k = baseOut / 2;
      r = r || d < 0 || xc[d + 1] != null;
      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
      if (d < 1 || !xc[0]) {
        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
      } else {
        xc.length = d;
        if (r) {
          for (--baseOut; ++xc[--d] > baseOut; ) {
            xc[d] = 0;
            if (!d) {
              ++e;
              xc = [1].concat(xc);
            }
          }
        }
        for (k = xc.length; !xc[--k]; ) ;
        for (i = 0, str = ""; i <= k; str += alphabet.charAt(xc[i++])) ;
        str = toFixedPoint(str, e, alphabet.charAt(0));
      }
      return str;
    };
  }();
  div = /* @__PURE__ */ function() {
    function multiply(x, k, base) {
      var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
      for (x = x.slice(); i--; ) {
        xlo = x[i] % SQRT_BASE;
        xhi = x[i] / SQRT_BASE | 0;
        m = khi * xlo + xhi * klo;
        temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
        x[i] = temp % base;
      }
      if (carry) x = [carry].concat(x);
      return x;
    }
    function compare2(a, b, aL, bL) {
      var i, cmp;
      if (aL != bL) {
        cmp = aL > bL ? 1 : -1;
      } else {
        for (i = cmp = 0; i < aL; i++) {
          if (a[i] != b[i]) {
            cmp = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }
      return cmp;
    }
    function subtract(a, b, aL, base) {
      var i = 0;
      for (; aL--; ) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }
      for (; !a[0] && a.length > 1; a.splice(0, 1)) ;
    }
    return function(x, y, dp, rm, base) {
      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
      if (!xc || !xc[0] || !yc || !yc[0]) {
        return new BigNumber2(
          // Return NaN if either NaN, or both Infinity or 0.
          !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : (
            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
          )
        );
      }
      q = new BigNumber2(s);
      qc = q.c = [];
      e = x.e - y.e;
      s = dp + e + 1;
      if (!base) {
        base = BASE;
        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
        s = s / LOG_BASE | 0;
      }
      for (i = 0; yc[i] == (xc[i] || 0); i++) ;
      if (yc[i] > (xc[i] || 0)) e--;
      if (s < 0) {
        qc.push(1);
        more = true;
      } else {
        xL = xc.length;
        yL = yc.length;
        i = 0;
        s += 2;
        n = mathfloor(base / (yc[0] + 1));
        if (n > 1) {
          yc = multiply(yc, n, base);
          xc = multiply(xc, n, base);
          yL = yc.length;
          xL = xc.length;
        }
        xi = yL;
        rem = xc.slice(0, yL);
        remL = rem.length;
        for (; remL < yL; rem[remL++] = 0) ;
        yz = yc.slice();
        yz = [0].concat(yz);
        yc0 = yc[0];
        if (yc[1] >= base / 2) yc0++;
        do {
          n = 0;
          cmp = compare2(yc, rem, yL, remL);
          if (cmp < 0) {
            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
            n = mathfloor(rem0 / yc0);
            if (n > 1) {
              if (n >= base) n = base - 1;
              prod = multiply(yc, n, base);
              prodL = prod.length;
              remL = rem.length;
              while (compare2(prod, rem, prodL, remL) == 1) {
                n--;
                subtract(prod, yL < prodL ? yz : yc, prodL, base);
                prodL = prod.length;
                cmp = 1;
              }
            } else {
              if (n == 0) {
                cmp = n = 1;
              }
              prod = yc.slice();
              prodL = prod.length;
            }
            if (prodL < remL) prod = [0].concat(prod);
            subtract(rem, prod, remL, base);
            remL = rem.length;
            if (cmp == -1) {
              while (compare2(yc, rem, yL, remL) < 1) {
                n++;
                subtract(rem, yL < remL ? yz : yc, remL, base);
                remL = rem.length;
              }
            }
          } else if (cmp === 0) {
            n++;
            rem = [0];
          }
          qc[i++] = n;
          if (rem[0]) {
            rem[remL++] = xc[xi] || 0;
          } else {
            rem = [xc[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] != null) && s--);
        more = rem[0] != null;
        if (!qc[0]) qc.splice(0, 1);
      }
      if (base == BASE) {
        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++) ;
        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
      } else {
        q.e = e;
        q.r = +more;
      }
      return q;
    };
  }();
  function format(n, i, rm, id) {
    var c0, e, ne, len, str;
    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);
    if (!n.c) return n.toString();
    c0 = n.c[0];
    ne = n.e;
    if (i == null) {
      str = coeffToString(n.c);
      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
    } else {
      n = round(new BigNumber2(n), i, rm);
      e = n.e;
      str = coeffToString(n.c);
      len = str.length;
      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
        for (; len < i; str += "0", len++) ;
        str = toExponential(str, e);
      } else {
        i -= ne;
        str = toFixedPoint(str, e, "0");
        if (e + 1 > len) {
          if (--i > 0) for (str += "."; i--; str += "0") ;
        } else {
          i += e - len;
          if (i > 0) {
            if (e + 1 == len) str += ".";
            for (; i--; str += "0") ;
          }
        }
      }
    }
    return n.s < 0 && c0 ? "-" + str : str;
  }
  function maxOrMin(args, n) {
    var k, y, i = 1, x = new BigNumber2(args[0]);
    for (; i < args.length; i++) {
      y = new BigNumber2(args[i]);
      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
        x = y;
      }
    }
    return x;
  }
  function normalise(n, c, e) {
    var i = 1, j = c.length;
    for (; !c[--j]; c.pop()) ;
    for (j = c[0]; j >= 10; j /= 10, i++) ;
    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
      n.c = n.e = null;
    } else if (e < MIN_EXP) {
      n.c = [n.e = 0];
    } else {
      n.e = e;
      n.c = c;
    }
    return n;
  }
  parseNumeric = /* @__PURE__ */ function() {
    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
    return function(x, str, isNum, b) {
      var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
      if (isInfinityOrNaN.test(s)) {
        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
      } else {
        if (!isNum) {
          s = s.replace(basePrefix, function(m, p1, p2) {
            base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
            return !b || b == base ? p1 : m;
          });
          if (b) {
            base = b;
            s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
          }
          if (str != s) return new BigNumber2(s, base);
        }
        if (BigNumber2.DEBUG) {
          throw Error(bignumberError + "Not a" + (b ? " base " + b : "") + " number: " + str);
        }
        x.s = null;
      }
      x.c = x.e = null;
    };
  }();
  function round(x, sd, rm, r) {
    var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
    if (xc) {
      out: {
        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++) ;
        i = sd - d;
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          n = xc[ni = 0];
          rd = mathfloor(n / pows10[d - j - 1] % 10);
        } else {
          ni = mathceil((i + 1) / LOG_BASE);
          if (ni >= xc.length) {
            if (r) {
              for (; xc.length <= ni; xc.push(0)) ;
              n = rd = 0;
              d = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            n = k = xc[ni];
            for (d = 1; k >= 10; k /= 10, d++) ;
            i %= LOG_BASE;
            j = i - LOG_BASE + d;
            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);
          }
        }
        r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
        r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
        if (sd < 1 || !xc[0]) {
          xc.length = 0;
          if (r) {
            sd -= x.e + 1;
            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
            x.e = -sd || 0;
          } else {
            xc[0] = x.e = 0;
          }
          return x;
        }
        if (i == 0) {
          xc.length = ni;
          k = 1;
          ni--;
        } else {
          xc.length = ni + 1;
          k = pows10[LOG_BASE - i];
          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
        }
        if (r) {
          for (; ; ) {
            if (ni == 0) {
              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++) ;
              j = xc[0] += k;
              for (k = 1; j >= 10; j /= 10, k++) ;
              if (i != k) {
                x.e++;
                if (xc[0] == BASE) xc[0] = 1;
              }
              break;
            } else {
              xc[ni] += k;
              if (xc[ni] != BASE) break;
              xc[ni--] = 0;
              k = 1;
            }
          }
        }
        for (i = xc.length; xc[--i] === 0; xc.pop()) ;
      }
      if (x.e > MAX_EXP) {
        x.c = x.e = null;
      } else if (x.e < MIN_EXP) {
        x.c = [x.e = 0];
      }
    }
    return x;
  }
  function valueOf(n) {
    var str, e = n.e;
    if (e === null) return n.toString();
    str = coeffToString(n.c);
    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
    return n.s < 0 ? "-" + str : str;
  }
  P.absoluteValue = P.abs = function() {
    var x = new BigNumber2(this);
    if (x.s < 0) x.s = 1;
    return x;
  };
  P.comparedTo = function(y, b) {
    return compare(this, new BigNumber2(y, b));
  };
  P.decimalPlaces = P.dp = function(dp, rm) {
    var c, n, v, x = this;
    if (dp != null) {
      intCheck(dp, 0, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(new BigNumber2(x), dp + x.e + 1, rm);
    }
    if (!(c = x.c)) return null;
    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--) ;
    if (n < 0) n = 0;
    return n;
  };
  P.dividedBy = P.div = function(y, b) {
    return div(this, new BigNumber2(y, b), DECIMAL_PLACES, ROUNDING_MODE);
  };
  P.dividedToIntegerBy = P.idiv = function(y, b) {
    return div(this, new BigNumber2(y, b), 0, 1);
  };
  P.exponentiatedBy = P.pow = function(n, m) {
    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
    n = new BigNumber2(n);
    if (n.c && !n.isInteger()) {
      throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
    }
    if (m != null) m = new BigNumber2(m);
    nIsBig = n.e > 14;
    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
      y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
      return m ? y.mod(m) : y;
    }
    nIsNeg = n.s < 0;
    if (m) {
      if (m.c ? !m.c[0] : !m.s) return new BigNumber2(NaN);
      isModExp = !nIsNeg && x.isInteger() && m.isInteger();
      if (isModExp) x = x.mod(m);
    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
      k = x.s < 0 && isOdd(n) ? -0 : 0;
      if (x.e > -1) k = 1 / k;
      return new BigNumber2(nIsNeg ? 1 / k : k);
    } else if (POW_PRECISION) {
      k = mathceil(POW_PRECISION / LOG_BASE + 2);
    }
    if (nIsBig) {
      half = new BigNumber2(0.5);
      if (nIsNeg) n.s = 1;
      nIsOdd = isOdd(n);
    } else {
      i = Math.abs(+valueOf(n));
      nIsOdd = i % 2;
    }
    y = new BigNumber2(ONE);
    for (; ; ) {
      if (nIsOdd) {
        y = y.times(x);
        if (!y.c) break;
        if (k) {
          if (y.c.length > k) y.c.length = k;
        } else if (isModExp) {
          y = y.mod(m);
        }
      }
      if (i) {
        i = mathfloor(i / 2);
        if (i === 0) break;
        nIsOdd = i % 2;
      } else {
        n = n.times(half);
        round(n, n.e + 1, 1);
        if (n.e > 14) {
          nIsOdd = isOdd(n);
        } else {
          i = +valueOf(n);
          if (i === 0) break;
          nIsOdd = i % 2;
        }
      }
      x = x.times(x);
      if (k) {
        if (x.c && x.c.length > k) x.c.length = k;
      } else if (isModExp) {
        x = x.mod(m);
      }
    }
    if (isModExp) return y;
    if (nIsNeg) y = ONE.div(y);
    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
  };
  P.integerValue = function(rm) {
    var n = new BigNumber2(this);
    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);
    return round(n, n.e + 1, rm);
  };
  P.isEqualTo = P.eq = function(y, b) {
    return compare(this, new BigNumber2(y, b)) === 0;
  };
  P.isFinite = function() {
    return !!this.c;
  };
  P.isGreaterThan = P.gt = function(y, b) {
    return compare(this, new BigNumber2(y, b)) > 0;
  };
  P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
    return (b = compare(this, new BigNumber2(y, b))) === 1 || b === 0;
  };
  P.isInteger = function() {
    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
  };
  P.isLessThan = P.lt = function(y, b) {
    return compare(this, new BigNumber2(y, b)) < 0;
  };
  P.isLessThanOrEqualTo = P.lte = function(y, b) {
    return (b = compare(this, new BigNumber2(y, b))) === -1 || b === 0;
  };
  P.isNaN = function() {
    return !this.s;
  };
  P.isNegative = function() {
    return this.s < 0;
  };
  P.isPositive = function() {
    return this.s > 0;
  };
  P.isZero = function() {
    return !!this.c && this.c[0] == 0;
  };
  P.minus = function(y, b) {
    var i, j, t, xLTy, x = this, a = x.s;
    y = new BigNumber2(y, b);
    b = y.s;
    if (!a || !b) return new BigNumber2(NaN);
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }
    var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
    if (!xe || !ye) {
      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber2(yc ? x : NaN);
      if (!xc[0] || !yc[0]) {
        return yc[0] ? (y.s = -b, y) : new BigNumber2(xc[0] ? x : (
          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          ROUNDING_MODE == 3 ? -0 : 0
        ));
      }
    }
    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();
    if (a = xe - ye) {
      if (xLTy = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }
      t.reverse();
      for (b = a; b--; t.push(0)) ;
      t.reverse();
    } else {
      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
      for (a = b = 0; b < j; b++) {
        if (xc[b] != yc[b]) {
          xLTy = xc[b] < yc[b];
          break;
        }
      }
    }
    if (xLTy) {
      t = xc;
      xc = yc;
      yc = t;
      y.s = -y.s;
    }
    b = (j = yc.length) - (i = xc.length);
    if (b > 0) for (; b--; xc[i++] = 0) ;
    b = BASE - 1;
    for (; j > a; ) {
      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i]; xc[i] = b) ;
        --xc[i];
        xc[j] += BASE;
      }
      xc[j] -= yc[j];
    }
    for (; xc[0] == 0; xc.splice(0, 1), --ye) ;
    if (!xc[0]) {
      y.s = ROUNDING_MODE == 3 ? -1 : 1;
      y.c = [y.e = 0];
      return y;
    }
    return normalise(y, xc, ye);
  };
  P.modulo = P.mod = function(y, b) {
    var q, s, x = this;
    y = new BigNumber2(y, b);
    if (!x.c || !y.s || y.c && !y.c[0]) {
      return new BigNumber2(NaN);
    } else if (!y.c || x.c && !x.c[0]) {
      return new BigNumber2(x);
    }
    if (MODULO_MODE == 9) {
      s = y.s;
      y.s = 1;
      q = div(x, y, 0, 3);
      y.s = s;
      q.s *= s;
    } else {
      q = div(x, y, 0, MODULO_MODE);
    }
    y = x.minus(q.times(y));
    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
    return y;
  };
  P.multipliedBy = P.times = function(y, b) {
    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b)).c;
    if (!xc || !yc || !xc[0] || !yc[0]) {
      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
        y.c = y.e = y.s = null;
      } else {
        y.s *= x.s;
        if (!xc || !yc) {
          y.c = y.e = null;
        } else {
          y.c = [0];
          y.e = 0;
        }
      }
      return y;
    }
    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
    y.s *= x.s;
    xcL = xc.length;
    ycL = yc.length;
    if (xcL < ycL) {
      zc = xc;
      xc = yc;
      yc = zc;
      i = xcL;
      xcL = ycL;
      ycL = i;
    }
    for (i = xcL + ycL, zc = []; i--; zc.push(0)) ;
    base = BASE;
    sqrtBase = SQRT_BASE;
    for (i = ycL; --i >= 0; ) {
      c = 0;
      ylo = yc[i] % sqrtBase;
      yhi = yc[i] / sqrtBase | 0;
      for (k = xcL, j = i + k; j > i; ) {
        xlo = xc[--k] % sqrtBase;
        xhi = xc[k] / sqrtBase | 0;
        m = yhi * xlo + xhi * ylo;
        xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
        zc[j--] = xlo % base;
      }
      zc[j] = c;
    }
    if (c) {
      ++e;
    } else {
      zc.splice(0, 1);
    }
    return normalise(y, zc, e);
  };
  P.negated = function() {
    var x = new BigNumber2(this);
    x.s = -x.s || null;
    return x;
  };
  P.plus = function(y, b) {
    var t, x = this, a = x.s;
    y = new BigNumber2(y, b);
    b = y.s;
    if (!a || !b) return new BigNumber2(NaN);
    if (a != b) {
      y.s = -b;
      return x.minus(y);
    }
    var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
    if (!xe || !ye) {
      if (!xc || !yc) return new BigNumber2(a / 0);
      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
    }
    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();
    if (a = xe - ye) {
      if (a > 0) {
        ye = xe;
        t = yc;
      } else {
        a = -a;
        t = xc;
      }
      t.reverse();
      for (; a--; t.push(0)) ;
      t.reverse();
    }
    a = xc.length;
    b = yc.length;
    if (a - b < 0) {
      t = yc;
      yc = xc;
      xc = t;
      b = a;
    }
    for (a = 0; b; ) {
      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
    }
    if (a) {
      xc = [a].concat(xc);
      ++ye;
    }
    return normalise(y, xc, ye);
  };
  P.precision = P.sd = function(sd, rm) {
    var c, n, v, x = this;
    if (sd != null && sd !== !!sd) {
      intCheck(sd, 1, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);
      return round(new BigNumber2(x), sd, rm);
    }
    if (!(c = x.c)) return null;
    v = c.length - 1;
    n = v * LOG_BASE + 1;
    if (v = c[v]) {
      for (; v % 10 == 0; v /= 10, n--) ;
      for (v = c[0]; v >= 10; v /= 10, n++) ;
    }
    if (sd && x.e + 1 > n) n = x.e + 1;
    return n;
  };
  P.shiftedBy = function(k) {
    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    return this.times("1e" + k);
  };
  P.squareRoot = P.sqrt = function() {
    var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
    if (s !== 1 || !c || !c[0]) {
      return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
    }
    s = Math.sqrt(+valueOf(x));
    if (s == 0 || s == 1 / 0) {
      n = coeffToString(c);
      if ((n.length + e) % 2 == 0) n += "0";
      s = Math.sqrt(+n);
      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
      if (s == 1 / 0) {
        n = "5e" + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf("e") + 1) + e;
      }
      r = new BigNumber2(n);
    } else {
      r = new BigNumber2(s + "");
    }
    if (r.c[0]) {
      e = r.e;
      s = e + dp;
      if (s < 3) s = 0;
      for (; ; ) {
        t = r;
        r = half.times(t.plus(div(x, t, dp, 1)));
        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
          if (r.e < e) --s;
          n = n.slice(s - 3, s + 1);
          if (n == "9999" || !rep && n == "4999") {
            if (!rep) {
              round(t, t.e + DECIMAL_PLACES + 2, 0);
              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }
            dp += 4;
            s += 4;
            rep = 1;
          } else {
            if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
              round(r, r.e + DECIMAL_PLACES + 2, 1);
              m = !r.times(r).eq(x);
            }
            break;
          }
        }
      }
    }
    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
  };
  P.toExponential = function(dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp++;
    }
    return format(this, dp, rm, 1);
  };
  P.toFixed = function(dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp = dp + this.e + 1;
    }
    return format(this, dp, rm);
  };
  P.toFormat = function(dp, rm, format2) {
    var str, x = this;
    if (format2 == null) {
      if (dp != null && rm && typeof rm == "object") {
        format2 = rm;
        rm = null;
      } else if (dp && typeof dp == "object") {
        format2 = dp;
        dp = rm = null;
      } else {
        format2 = FORMAT;
      }
    } else if (typeof format2 != "object") {
      throw Error(bignumberError + "Argument not an object: " + format2);
    }
    str = x.toFixed(dp, rm);
    if (x.c) {
      var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
      if (g2) {
        i = g1;
        g1 = g2;
        g2 = i;
        len -= i;
      }
      if (g1 > 0 && len > 0) {
        i = len % g1 || g1;
        intPart = intDigits.substr(0, i);
        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
        if (isNeg) intPart = "-" + intPart;
      }
      str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(
        new RegExp("\\d{" + g2 + "}\\B", "g"),
        "$&" + (format2.fractionGroupSeparator || "")
      ) : fractionPart) : intPart;
    }
    return (format2.prefix || "") + str + (format2.suffix || "");
  };
  P.toFraction = function(md) {
    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
    if (md != null) {
      n = new BigNumber2(md);
      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
        throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
      }
    }
    if (!xc) return new BigNumber2(x);
    d = new BigNumber2(ONE);
    n1 = d0 = new BigNumber2(ONE);
    d1 = n0 = new BigNumber2(ONE);
    s = coeffToString(xc);
    e = d.e = s.length - x.e - 1;
    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
    md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
    exp = MAX_EXP;
    MAX_EXP = 1 / 0;
    n = new BigNumber2(s);
    n0.c[0] = 0;
    for (; ; ) {
      q = div(n, d, 0, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.comparedTo(md) == 1) break;
      d0 = d1;
      d1 = d2;
      n1 = n0.plus(q.times(d2 = n1));
      n0 = d2;
      d = n.minus(q.times(d2 = d));
      n = d2;
    }
    d2 = div(md.minus(d0), d1, 0, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;
    e = e * 2;
    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
      div(n0, d0, e, ROUNDING_MODE).minus(x).abs()
    ) < 1 ? [n1, d1] : [n0, d0];
    MAX_EXP = exp;
    return r;
  };
  P.toNumber = function() {
    return +valueOf(this);
  };
  P.toPrecision = function(sd, rm) {
    if (sd != null) intCheck(sd, 1, MAX);
    return format(this, sd, rm, 2);
  };
  P.toString = function(b) {
    var str, n = this, s = n.s, e = n.e;
    if (e === null) {
      if (s) {
        str = "Infinity";
        if (s < 0) str = "-" + str;
      } else {
        str = "NaN";
      }
    } else {
      if (b == null) {
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
      } else if (b === 10 && alphabetHasNormalDecimalDigits) {
        n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
        str = toFixedPoint(coeffToString(n.c), n.e, "0");
      } else {
        intCheck(b, 2, ALPHABET.length, "Base");
        str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b, s, true);
      }
      if (s < 0 && n.c[0]) str = "-" + str;
    }
    return str;
  };
  P.valueOf = P.toJSON = function() {
    return valueOf(this);
  };
  P._isBigNumber = true;
  P[Symbol.toStringTag] = "BigNumber";
  P[Symbol.for("nodejs.util.inspect.custom")] = P.valueOf;
  if (configObject != null) BigNumber2.set(configObject);
  return BigNumber2;
}
function bitFloor(n) {
  var i = n | 0;
  return n > 0 || n === i ? i : i - 1;
}
function coeffToString(a) {
  var s, z, i = 1, j = a.length, r = a[0] + "";
  for (; i < j; ) {
    s = a[i++] + "";
    z = LOG_BASE - s.length;
    for (; z--; s = "0" + s) ;
    r += s;
  }
  for (j = r.length; r.charCodeAt(--j) === 48; ) ;
  return r.slice(0, j + 1 || 1);
}
function compare(x, y) {
  var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
  if (!i || !j) return null;
  a = xc && !xc[0];
  b = yc && !yc[0];
  if (a || b) return a ? b ? 0 : -j : i;
  if (i != j) return i;
  a = i < 0;
  b = k == l;
  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
  if (!b) return k > l ^ a ? 1 : -1;
  j = (k = xc.length) < (l = yc.length) ? k : l;
  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
  return k == l ? 0 : k > l ^ a ? 1 : -1;
}
function intCheck(n, min, max, name) {
  if (n < min || n > max || n !== mathfloor(n)) {
    throw Error(bignumberError + (name || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
  }
}
function isOdd(n) {
  var k = n.c.length - 1;
  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
}
function toExponential(str, e) {
  return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
}
function toFixedPoint(str, e, z) {
  var len, zs;
  if (e < 0) {
    for (zs = z + "."; ++e; zs += z) ;
    str = zs + str;
  } else {
    len = str.length;
    if (++e > len) {
      for (zs = z, e -= len; --e; zs += z) ;
      str += zs;
    } else if (e < len) {
      str = str.slice(0, e) + "." + str.slice(e);
    }
  }
  return str;
}
var BigNumber = clone();

// node_modules/@circles-sdk/utils/dist/index.js
var import_multihashes = __toESM(require_src3());
var CirclesInceptionTimestamp = (/* @__PURE__ */ new Date("2020-10-15T00:00:00.000Z")).getTime();
var OneDayInMilliseconds = new BigNumber(86400).multipliedBy(1e3);
var OneCirclesYearInDays = new BigNumber(365.25);
var OneCirclesYearInMilliseconds = OneCirclesYearInDays.multipliedBy(24).multipliedBy(60).multipliedBy(60).multipliedBy(1e3);
function getCrcPayoutAt(timestamp) {
  const daysSinceCirclesInception = new BigNumber(timestamp - CirclesInceptionTimestamp).dividedBy(OneDayInMilliseconds);
  const circlesYearsSince = new BigNumber(timestamp - CirclesInceptionTimestamp).dividedBy(OneCirclesYearInMilliseconds);
  const daysInCurrentCirclesYear = daysSinceCirclesInception.mod(OneCirclesYearInDays);
  const initialDailyCrcPayout = new BigNumber(8);
  let circlesPayoutInCurrentYear = initialDailyCrcPayout;
  let previousCirclesPerDayValue = initialDailyCrcPayout;
  for (let index = 0; index < circlesYearsSince.toNumber(); index++) {
    previousCirclesPerDayValue = circlesPayoutInCurrentYear;
    circlesPayoutInCurrentYear = circlesPayoutInCurrentYear.multipliedBy(1.07);
  }
  const x = previousCirclesPerDayValue;
  const y = circlesPayoutInCurrentYear;
  const a = daysInCurrentCirclesYear.dividedBy(OneCirclesYearInDays);
  return x.multipliedBy(new BigNumber(1).minus(a)).plus(y.multipliedBy(a)).toNumber();
}
function crcToTc(timestamp, amount) {
  const amountFloat = parseFloat(ethers_exports.formatEther(amount ?? "0"));
  const ts = timestamp.getTime();
  const payoutAtTimestamp = getCrcPayoutAt(ts);
  const value = amountFloat / payoutAtTimestamp * 24;
  return value;
}
function tcToCrc(timestamp, amount) {
  const ts = timestamp.getTime();
  const payoutAtTimestamp = getCrcPayoutAt(ts);
  return parseEther((amount / 24 * payoutAtTimestamp).toString());
}
function cidV0ToUint8Array(cidV0) {
  const multihashBytes = import_multihashes.default.fromB58String(cidV0);
  const decodedMultihash = import_multihashes.default.decode(multihashBytes);
  if (decodedMultihash.code !== import_multihashes.default.names["sha2-256"]) {
    throw new Error("Unsupported hash algorithm. Only SHA-256 is supported for CIDv0.");
  }
  return decodedMultihash.digest;
}
function uint8ArrayToCidV0(uint8Array) {
  if (uint8Array.length !== 32) {
    throw new Error("Invalid array length. Expected 32 bytes.");
  }
  const multihashBytes = import_multihashes.default.encode(uint8Array, "sha2-256");
  return import_multihashes.default.toB58String(multihashBytes);
}
function hexStringToUint8Array(hexString) {
  const bytes = [];
  for (let i = 0; i < hexString.length; i += 2) {
    bytes.push(parseInt(hexString.substr(i, 2), 16));
  }
  return new Uint8Array(bytes);
}
function addressToUInt256(address) {
  if (address.startsWith("0x")) {
    address = address.slice(2);
  }
  return BigInt("0x" + address);
}

// node_modules/@circles-sdk/data/dist/index.js
var CirclesQuery = class {
  /**
   * The current page of the query (or undefined).
   */
  get currentPage() {
    return this._currentPage;
  }
  constructor(rpc, params, calculatedColumns) {
    this._calculatedColumns = {};
    this.params = params;
    this.rpc = rpc;
    if (!calculatedColumns) {
      return;
    }
    calculatedColumns.forEach((column) => {
      this._calculatedColumns[column.name] = column;
    });
  }
  /**
   * Builds the order by clause for a paged query.
   * Always orders by blockNumber, transactionIndex, and logIndex.
   * If the table is TransferBatch, also orders by batchIndex.
   * @param params The query parameters.
   * @private
   */
  buildOrderBy(params) {
    const order = [{
      Column: "blockNumber",
      SortOrder: params.sortOrder
    }, {
      Column: "transactionIndex",
      SortOrder: params.sortOrder
    }, {
      Column: "logIndex",
      SortOrder: params.sortOrder
    }];
    if (params.table === "TransferBatch") {
      order.push({
        Column: "batchIndex",
        SortOrder: params.sortOrder
      });
    }
    return order;
  }
  /**
   * Builds the cursor filter for a paged query.
   * Depending on the sort order, the cursor filter will be either greater than or less than the existing cursor.
   * @param params The query parameters.
   * @param cursor The cursor to use or undefined to start from the beginning/end depending on the sort order.
   * @private
   */
  buildCursorFilter(params, cursor) {
    if (!cursor) {
      return void 0;
    }
    const sortOrder = params.sortOrder === "ASC" ? "GreaterThan" : "LessThan";
    const blockNumberFilter = {
      Type: "FilterPredicate",
      FilterType: sortOrder,
      Column: "blockNumber",
      Value: cursor.blockNumber
    };
    const subFilters = [];
    subFilters.push({
      Type: "Conjunction",
      ConjunctionType: "And",
      Predicates: [
        {
          Type: "FilterPredicate",
          FilterType: "Equals",
          Column: "blockNumber",
          Value: cursor.blockNumber
        },
        {
          Type: "FilterPredicate",
          FilterType: sortOrder,
          Column: "transactionIndex",
          Value: cursor.transactionIndex
        }
      ]
    });
    subFilters.push({
      Type: "Conjunction",
      ConjunctionType: "And",
      Predicates: [
        {
          Type: "FilterPredicate",
          FilterType: "Equals",
          Column: "blockNumber",
          Value: cursor.blockNumber
        },
        {
          Type: "FilterPredicate",
          FilterType: "Equals",
          Column: "transactionIndex",
          Value: cursor.transactionIndex
        },
        {
          Type: "FilterPredicate",
          FilterType: sortOrder,
          Column: "logIndex",
          Value: cursor.logIndex
        }
      ]
    });
    if (params.table === "TransferBatch") {
      subFilters.push({
        Type: "Conjunction",
        ConjunctionType: "And",
        Predicates: [
          {
            Type: "FilterPredicate",
            FilterType: "Equals",
            Column: "blockNumber",
            Value: cursor.blockNumber
          },
          {
            Type: "FilterPredicate",
            FilterType: "Equals",
            Column: "transactionIndex",
            Value: cursor.transactionIndex
          },
          {
            Type: "FilterPredicate",
            FilterType: "Equals",
            Column: "logIndex",
            Value: cursor.logIndex
          },
          {
            Type: "FilterPredicate",
            FilterType: sortOrder,
            Column: "batchIndex",
            Value: cursor.batchIndex
          }
        ]
      });
    }
    const combinedFilter = {
      Type: "Conjunction",
      ConjunctionType: "Or",
      Predicates: [
        blockNumberFilter,
        ...subFilters
      ]
    };
    return [combinedFilter];
  }
  /**
   * Combines two filters into a single filter.
   * The filters are always combined with an 'And' conjunction.
   * @param filter1 The first filter or undefined.
   * @param filter2 The second filter or undefined.
   * @returns The combined filter or an empty array if both filters are undefined or empty.
   * @private
   */
  combineFilters(filter1, filter2) {
    if (!filter1 && !filter2) {
      return [];
    }
    if (!filter1) {
      return filter2 ?? [];
    }
    if (!filter2) {
      return filter1;
    }
    return [{
      Type: "Conjunction",
      ConjunctionType: "And",
      Predicates: [
        ...filter1,
        ...filter2
      ]
    }];
  }
  /**
   * Sends a `circles_query` call to a Circles Rpc node and returns the result as an array of objects.
   * @param method The method to call.
   * @param param The request parameters.
   * @private
   */
  async request(method, param) {
    const jsonResponse = await this.rpc.call(method, [param]);
    return await this.rowsToObjects(jsonResponse);
  }
  /**
   * Converts the rows from a Circles RPC response to an array of objects.
   * @param jsonResponse The JSON-RPC response.
   * @private
   */
  async rowsToObjects(jsonResponse) {
    const { columns, rows } = jsonResponse.result;
    const calculatedColumns = Object.entries(this._calculatedColumns);
    if (calculatedColumns.length > 0) {
      calculatedColumns.forEach((col) => columns.push(col[0]));
    }
    const rowObjects = await Promise.all(rows.map(async (row) => {
      const rowObj = {};
      row.forEach((value, index) => {
        rowObj[columns[index]] = value;
      });
      for (const [name, column] of calculatedColumns) {
        rowObj[name] = await column.generator(rowObj);
      }
      return rowObj;
    }));
    return rowObjects;
  }
  /**
   * Converts a row from a query result to a cursor.
   * The cursor is an object with the blockNumber, transactionIndex, logIndex, and optional batchIndex properties.
   * @param resultElement The row from the query result.
   * @private
   */
  rowToCursor(resultElement) {
    return {
      blockNumber: resultElement.blockNumber,
      transactionIndex: resultElement.transactionIndex,
      logIndex: resultElement.logIndex,
      batchIndex: !resultElement.batchIndex ? void 0 : resultElement.batchIndex
    };
  }
  /**
   * Builds a cursor from the first or last row of a query result.
   * If the result is empty, returns null.
   * @param result The query result.
   * @private
   */
  getFirstAndLastCursor(result) {
    if (result.length === 0) {
      return null;
    }
    const first = this.rowToCursor(result[0]);
    const last = this.rowToCursor(result[result.length - 1]);
    return { first, last };
  }
  /**
   * Queries the next page of a paged query.
   * @returns True if the query returned rows, false if there are no more results.
   */
  async queryNextPage() {
    var _a;
    const orderBy = this.buildOrderBy(this.params);
    const filter = this.buildCursorFilter(this.params, (_a = this._currentPage) == null ? void 0 : _a.lastCursor);
    const combinedFilter = this.combineFilters(this.params.filter, filter);
    const queryParams = {
      Namespace: this.params.namespace,
      Table: this.params.table,
      Columns: this.params.columns,
      Filter: combinedFilter,
      Order: orderBy,
      Limit: this.params.limit
    };
    const result = await this.request("circles_query", queryParams);
    const cursors = this.getFirstAndLastCursor(result);
    this._currentPage = {
      limit: this.params.limit,
      size: result.length,
      firstCursor: cursors == null ? void 0 : cursors.first,
      lastCursor: cursors == null ? void 0 : cursors.last,
      sortOrder: this.params.sortOrder,
      results: result
    };
    return result.length > 0;
  }
  /**
   * Queries a single row from the Circles RPC node.
   */
  async getSingleRow() {
    var _a;
    const orderBy = this.buildOrderBy(this.params);
    const filter = this.buildCursorFilter(this.params, (_a = this._currentPage) == null ? void 0 : _a.lastCursor);
    const combinedFilter = this.combineFilters(this.params.filter, filter);
    const queryParams = {
      Namespace: this.params.namespace,
      Table: this.params.table,
      Columns: this.params.columns,
      Filter: combinedFilter,
      Order: orderBy,
      Limit: 1
    };
    const result = await this.request("circles_query", queryParams);
    return result.length > 0 ? result[0] : void 0;
  }
};
var Observable = class _Observable {
  subscribe(subscriber) {
    this._subscribers.push(subscriber);
    return () => {
      this._subscribers.splice(this._subscribers.indexOf(subscriber), 1);
    };
  }
  constructor() {
    this._subscribers = [];
    this._subscribers = [];
  }
  emit(value) {
    this._subscribers.forEach((sub) => sub(value));
  }
  static create() {
    const prop = new _Observable();
    return {
      property: prop,
      emit: (e) => prop.emit(e)
    };
  }
};
var hexToBigInt = (hex) => BigInt(hex);
var hexToNumber = (hex) => parseInt(hex, 16);
var hexToUint8Array = (hex) => {
  if (hex.length % 2 !== 0)
    throw new Error("Invalid hex string");
  const array = new Uint8Array(hex.length / 2);
  for (let i = 0; i < hex.length; i += 2) {
    array[i / 2] = parseInt(hex.substr(i, 2), 16);
  }
  return array;
};
var parseEventValues = (event, values) => {
  const baseEvent = {
    $event: event,
    blockNumber: hexToNumber(values.blockNumber),
    timestamp: values.timestamp ? hexToNumber(values.timestamp) : void 0,
    transactionIndex: hexToNumber(values.transactionIndex),
    logIndex: hexToNumber(values.logIndex),
    transactionHash: values.transactionHash
  };
  switch (event) {
    case "CrcV1_HubTransfer":
      return {
        ...baseEvent,
        $event: "CrcV1_HubTransfer",
        from: values.from,
        to: values.to,
        amount: values.amount ? hexToBigInt(values.amount) : void 0
      };
    case "CrcV1_Signup":
      return {
        ...baseEvent,
        $event: "CrcV1_Signup",
        user: values.user,
        token: values.token
      };
    case "CrcV1_OrganizationSignup":
      return {
        ...baseEvent,
        $event: "CrcV1_OrganizationSignup",
        organization: values.organization
      };
    case "CrcV1_Trust":
      return {
        ...baseEvent,
        $event: "CrcV1_Trust",
        canSendTo: values.canSendTo,
        user: values.user,
        limit: values.limit ? hexToBigInt(values.limit) : void 0
      };
    case "CrcV1_Transfer":
      return {
        ...baseEvent,
        $event: "CrcV1_Transfer",
        tokenAddress: values.tokenAddress,
        from: values.from,
        to: values.to,
        amount: values.amount ? hexToBigInt(values.amount) : void 0
      };
    case "CrcV2_InviteHuman":
      return {
        ...baseEvent,
        $event: "CrcV2_InviteHuman",
        inviter: values.inviter,
        invited: values.invited
      };
    case "CrcV2_PersonalMint":
      return {
        ...baseEvent,
        $event: "CrcV2_PersonalMint",
        human: values.human,
        amount: values.amount ? hexToBigInt(values.amount) : void 0,
        startPeriod: values.startPeriod ? hexToBigInt(values.startPeriod) : void 0,
        endPeriod: values.endPeriod ? hexToBigInt(values.endPeriod) : void 0
      };
    case "CrcV2_RegisterGroup":
      return {
        ...baseEvent,
        $event: "CrcV2_RegisterGroup",
        group: values.group,
        mint: values.mint,
        treasury: values.treasury,
        name: values.name,
        symbol: values.symbol
      };
    case "CrcV2_RegisterHuman":
      return {
        ...baseEvent,
        $event: "CrcV2_RegisterHuman",
        avatar: values.avatar
      };
    case "CrcV2_RegisterOrganization":
      return {
        ...baseEvent,
        $event: "CrcV2_RegisterOrganization",
        organization: values.organization,
        name: values.name
      };
    case "CrcV2_Stopped":
      return {
        ...baseEvent,
        $event: "CrcV2_Stopped",
        avatar: values.avatar
      };
    case "CrcV2_Trust":
      return {
        ...baseEvent,
        $event: "CrcV2_Trust",
        truster: values.truster,
        trustee: values.trustee,
        expiryTime: values.expiryTime ? hexToBigInt(values.expiryTime) : void 0
      };
    case "CrcV2_TransferSingle":
      return {
        ...baseEvent,
        $event: "CrcV2_TransferSingle",
        operator: values.operator,
        from: values.from,
        to: values.to,
        id: values.id ? hexToBigInt(values.id) : void 0,
        value: values.value ? hexToBigInt(values.value) : void 0
      };
    case "CrcV2_URI":
      return {
        ...baseEvent,
        $event: "CrcV2_URI",
        value: values.value,
        id: values.id ? hexToBigInt(values.id) : void 0
      };
    case "CrcV2_ApprovalForAll":
      return {
        ...baseEvent,
        $event: "CrcV2_ApprovalForAll",
        account: values.account,
        operator: values.operator,
        approved: values.approved === "true"
      };
    case "CrcV2_TransferBatch":
      return {
        ...baseEvent,
        $event: "CrcV2_TransferBatch",
        batchIndex: hexToNumber(values.batchIndex),
        operator: values.operator,
        from: values.from,
        to: values.to,
        id: values.id ? hexToBigInt(values.id) : void 0,
        value: values.value ? hexToBigInt(values.value) : void 0
      };
    case "CrcV2_RegisterShortName":
      return {
        ...baseEvent,
        $event: "CrcV2_RegisterShortName",
        avatar: values.avatar,
        shortName: values.shortName ? hexToBigInt(values.shortName) : void 0,
        nonce: values.nonce ? hexToBigInt(values.nonce) : void 0
      };
    case "CrcV2_UpdateMetadataDigest":
      return {
        ...baseEvent,
        $event: "CrcV2_UpdateMetadataDigest",
        avatar: values.avatar,
        metadataDigest: values.metadataDigest ? hexToUint8Array(values.metadataDigest) : void 0
      };
    case "CrcV2_CidV0":
      return {
        ...baseEvent,
        $event: "CrcV2_CidV0",
        avatar: values.avatar,
        cidV0Digest: values.cidV0Digest ? hexToUint8Array(values.cidV0Digest) : void 0
      };
    case "CrcV2_CreateVault":
      return {
        ...baseEvent,
        $event: "CrcV2_CreateVault",
        group: values.group,
        vault: values.vault
      };
    case "CrcV2_StreamCompleted":
      return {
        ...baseEvent,
        $event: "CrcV2_StreamCompleted",
        operator: values.operator,
        from: values.from,
        to: values.to,
        id: values.id ? hexToBigInt(values.id) : void 0,
        amount: values.amount ? hexToBigInt(values.amount) : void 0
      };
    case "CrcV2_GroupMintBatch":
      return {
        ...baseEvent,
        $event: "CrcV2_GroupMintBatch",
        batchIndex: parseInt(values.batchIndex),
        group: values.group,
        id: values.id ? hexToBigInt(values.id) : void 0,
        value: values.value ? hexToBigInt(values.value) : void 0,
        userData: values.userData ? hexToUint8Array(values.userData) : void 0
      };
    case "CrcV2_GroupMintSingle":
      return {
        ...baseEvent,
        $event: "CrcV2_GroupMintSingle",
        group: values.group,
        id: values.id ? hexToBigInt(values.id) : void 0,
        value: values.value ? hexToBigInt(values.value) : void 0,
        userData: values.userData ? hexToUint8Array(values.userData) : void 0
      };
    case "CrcV2_GroupRedeem":
      return {
        ...baseEvent,
        $event: "CrcV2_GroupRedeem",
        group: values.group,
        id: values.id ? hexToBigInt(values.id) : void 0,
        value: values.value ? hexToBigInt(values.value) : void 0,
        data: values.data ? hexToUint8Array(values.data) : void 0
      };
    case "CrcV2_GroupRedeemCollateralBurn":
      return {
        ...baseEvent,
        $event: "CrcV2_GroupRedeemCollateralBurn",
        batchIndex: parseInt(values.batchIndex),
        group: values.group,
        id: values.id ? hexToBigInt(values.id) : void 0,
        value: values.value ? hexToBigInt(values.value) : void 0
      };
    case "CrcV2_GroupRedeemCollateralReturn":
      return {
        ...baseEvent,
        $event: "CrcV2_GroupRedeemCollateralReturn",
        batchIndex: parseInt(values.batchIndex),
        group: values.group,
        id: values.id ? hexToBigInt(values.id) : void 0,
        value: values.value ? hexToBigInt(values.value) : void 0
      };
    default:
      throw new Error(`Unknown event type: ${event}`);
  }
};
var parseRpcSubscriptionMessage = (message) => {
  return message.map((result) => parseEventValues(result.event, result.values));
};
var CirclesData = class {
  constructor(rpc) {
    this.rpc = rpc;
  }
  /**
   * Gets the total CRC v1 balance of an address.
   * @param avatar The address to get the CRC balance for.
   * @param asTimeCircles Whether to return the balance as TimeCircles or not (default: true).
   */
  async getTotalBalance(avatar, asTimeCircles = true) {
    const response = await this.rpc.call("circles_getTotalBalance", [avatar, asTimeCircles]);
    return response.result;
  }
  /**
   * Gets the total CRC v2 balance of an address.
   * @param avatar The address to get the CRC balance for.
   * @param asTimeCircles Whether to return the balance as TimeCircles or not (default: true).
   */
  async getTotalBalanceV2(avatar, asTimeCircles = true) {
    const response = await this.rpc.call("circlesV2_getTotalBalance", [avatar, asTimeCircles]);
    return response.result;
  }
  /**
   * Gets the detailed CRC v1 token balances of an address.
   * @param avatar The address to get the token balances for.
   * @param asTimeCircles Whether to return the balances as TimeCircles or not (default: true).
   */
  async getTokenBalances(avatar, asTimeCircles = true) {
    const response = await this.rpc.call("circles_getTokenBalances", [avatar, asTimeCircles]);
    return response.result;
  }
  /**
   * Gets the detailed CRC v2 token balances of an address.
   * @param avatar The address to get the token balances for.
   * @param asTimeCircles Whether to return the balances as TimeCircles or not (default: true).
   */
  async getTokenBalancesV2(avatar, asTimeCircles = true) {
    const response = await this.rpc.call("circlesV2_getTokenBalances", [avatar, asTimeCircles]);
    return response.result;
  }
  /**
   * Gets the transaction history of an address.
   * This contains incoming/outgoing transactions and minting of CRC.
   * @param avatar The address to get the transaction history for.
   * @param pageSize The maximum number of transactions per page.
   */
  getTransactionHistory(avatar, pageSize) {
    return new CirclesQuery(this.rpc, {
      namespace: "V_Crc",
      table: "Transfers",
      sortOrder: "DESC",
      limit: pageSize,
      columns: [
        "blockNumber",
        "timestamp",
        "transactionIndex",
        "logIndex",
        "batchIndex",
        "transactionHash",
        "version",
        "operator",
        "from",
        "to",
        "id",
        "value"
      ],
      filter: [
        {
          Type: "Conjunction",
          ConjunctionType: "Or",
          Predicates: [
            {
              Type: "FilterPredicate",
              FilterType: "Equals",
              Column: "from",
              Value: avatar.toLowerCase()
            },
            {
              Type: "FilterPredicate",
              FilterType: "Equals",
              Column: "to",
              Value: avatar.toLowerCase()
            }
          ]
        }
      ]
    }, [{
      name: "timeCircles",
      generator: async (row) => {
        if (row.version === 1) {
          const timestamp = new Date(row.timestamp * 1e3);
          return crcToTc(timestamp, BigInt(row.value)).toFixed(2);
        } else {
          return parseFloat(ethers_exports.formatEther(row.value)).toFixed(2);
        }
      }
    }, {
      name: "tokenAddress",
      generator: async (row) => {
        if (row.id && !row.id.startsWith("0x") && /^\d+$/.test(row.id)) {
          const hexString = BigInt(row.id).toString(16).padStart(40, "0");
          return ethers_exports.getAddress("0x" + hexString).toLowerCase();
        } else if (row.id && row.id.startsWith("0x")) {
          return row.id.toLowerCase();
        }
      }
    }]);
  }
  getIncomingTrustEvents(avatar, pageSize) {
    return new CirclesQuery(this.rpc, {
      namespace: "V_Crc",
      table: "TrustRelations",
      sortOrder: "DESC",
      limit: pageSize,
      columns: [
        "blockNumber",
        "timestamp",
        "transactionIndex",
        "logIndex",
        "transactionHash",
        "trustee",
        "truster",
        "expiryTime"
      ],
      filter: [
        {
          Type: "Conjunction",
          ConjunctionType: "And",
          Predicates: [{
            Type: "FilterPredicate",
            FilterType: "Equals",
            Column: "trustee",
            Value: avatar.toLowerCase()
          }, {
            Type: "FilterPredicate",
            FilterType: "IsNotNull",
            Column: "expiryTime",
            Value: true
          }]
        }
      ]
    });
  }
  /**
   * Gets the current incoming and outgoing trust relations of an address.
   * Expired or revoked trust relations are not included.
   * @param avatar The address to get the trust list for.
   * @param pageSize The maximum number of trust relations per page.
   */
  getTrustRelations(avatar, pageSize) {
    return new CirclesQuery(this.rpc, {
      namespace: "V_Crc",
      table: "TrustRelations",
      sortOrder: "DESC",
      limit: pageSize,
      columns: [
        "blockNumber",
        "timestamp",
        "transactionIndex",
        "logIndex",
        "transactionHash",
        "version",
        "trustee",
        "truster",
        "expiryTime",
        "limit"
      ],
      filter: [
        {
          Type: "Conjunction",
          ConjunctionType: "Or",
          Predicates: [
            {
              Type: "FilterPredicate",
              FilterType: "Equals",
              Column: "trustee",
              Value: avatar.toLowerCase()
            },
            {
              Type: "FilterPredicate",
              FilterType: "Equals",
              Column: "truster",
              Value: avatar.toLowerCase()
            }
          ]
        }
      ]
    });
  }
  /**
   * Gets all trust relations of an avatar and groups mutual trust relations together.
   * @param avatarAddress The address to get the trust relations for.
   */
  async getAggregatedTrustRelations(avatarAddress) {
    var _a;
    const pageSize = 1e3;
    const trustsQuery = this.getTrustRelations(avatarAddress, pageSize);
    const trustListRows = [];
    while (await trustsQuery.queryNextPage()) {
      const resultRows = ((_a = trustsQuery.currentPage) == null ? void 0 : _a.results) ?? [];
      if (resultRows.length === 0)
        break;
      trustListRows.push(...resultRows);
      if (resultRows.length < pageSize)
        break;
    }
    const trustBucket = {};
    trustListRows.forEach((row) => {
      if (row.truster !== avatarAddress) {
        trustBucket[row.truster] = trustBucket[row.truster] || [];
        trustBucket[row.truster].push(row);
      }
      if (row.trustee !== avatarAddress) {
        trustBucket[row.trustee] = trustBucket[row.trustee] || [];
        trustBucket[row.trustee].push(row);
      }
    });
    return Object.entries(trustBucket).filter(([avatar]) => avatar !== avatarAddress).map(([avatar, rows]) => {
      const maxTimestamp = Math.max(...rows.map((o) => o.timestamp));
      let relation;
      if (rows.length === 2) {
        relation = "mutuallyTrusts";
      } else if (rows[0].trustee === avatarAddress) {
        relation = "trustedBy";
      } else if (rows[0].truster === avatarAddress) {
        relation = "trusts";
      } else {
        throw new Error(`Unexpected trust list row. Couldn't determine trust relation.`);
      }
      return {
        subjectAvatar: avatarAddress,
        relation,
        objectAvatar: avatar,
        timestamp: maxTimestamp
      };
    });
  }
  /**
   * Gets basic information about an avatar.
   * This includes the signup timestamp, circles version, avatar type and token address/id.
   * @param avatar The address to check.
   * @returns The avatar info or undefined if the avatar is not found.
   */
  async getAvatarInfo(avatar) {
    const avatarInfos = await this.getAvatarInfos([avatar]);
    return avatarInfos.length > 0 ? avatarInfos[0] : void 0;
  }
  /**
   * Gets basic information about multiple avatars.
   * @param avatars The addresses to check.
   * @returns An array of avatar info objects.
   */
  async getAvatarInfos(avatars) {
    var _a;
    if (avatars.length === 0) {
      return [];
    }
    const circlesQuery = new CirclesQuery(this.rpc, {
      namespace: "V_Crc",
      table: "Avatars",
      columns: [
        "blockNumber",
        "timestamp",
        "transactionIndex",
        "logIndex",
        "transactionHash",
        "version",
        "type",
        "avatar",
        "tokenId",
        "cidV0Digest"
      ],
      filter: [
        {
          Type: "FilterPredicate",
          FilterType: "In",
          Column: "avatar",
          Value: avatars.map((a) => a.toLowerCase())
        }
      ],
      sortOrder: "ASC",
      limit: 1e3
    }, [{
      name: "cidV0",
      generator: async (row) => {
        try {
          if (!row.cidV0Digest) {
            return void 0;
          }
          const dataFromHexString = hexStringToUint8Array(row.cidV0Digest.substring(2));
          return uint8ArrayToCidV0(dataFromHexString);
        } catch (error) {
          console.error("Failed to convert cidV0Digest to CIDv0 string:", error);
          return void 0;
        }
      }
    }]);
    const results = [];
    while (await circlesQuery.queryNextPage()) {
      const resultRows = ((_a = circlesQuery.currentPage) == null ? void 0 : _a.results) ?? [];
      if (resultRows.length === 0)
        break;
      results.push(...resultRows);
      if (resultRows.length < 1e3)
        break;
    }
    const avatarMap = {};
    results.forEach((avatarRow) => {
      if (!avatarMap[avatarRow.avatar]) {
        avatarMap[avatarRow.avatar] = avatarRow;
      }
      if (avatarRow.version === 1) {
        avatarMap[avatarRow.avatar].hasV1 = true;
        avatarMap[avatarRow.avatar].v1Token = avatarRow.tokenId;
      } else {
        avatarMap[avatarRow.avatar] = {
          ...avatarMap[avatarRow.avatar],
          ...avatarRow
        };
      }
    });
    return avatars.map((avatar) => avatarMap[avatar.toLowerCase()]).filter((row) => row !== void 0);
  }
  /**
   * Gets the token info for a given token address.
   * @param address The address of the token.
   * @returns The token info or undefined if the token is not found.
   */
  async getTokenInfo(address) {
    const circlesQuery = new CirclesQuery(this.rpc, {
      namespace: "V_Crc",
      table: "Avatars",
      columns: [
        "blockNumber",
        "timestamp",
        "transactionIndex",
        "logIndex",
        "transactionHash",
        "version",
        "type",
        "avatar",
        "tokenId"
      ],
      filter: [
        {
          Type: "FilterPredicate",
          FilterType: "Equals",
          Column: "tokenId",
          Value: address.toLowerCase()
        }
      ],
      sortOrder: "ASC",
      limit: 1
    });
    return await circlesQuery.getSingleRow();
  }
  /**
   * Subscribes to Circles events.
   * @param avatar The avatar to subscribe to. If not provided, all events are subscribed to.
   */
  subscribeToEvents(avatar) {
    return this.rpc.subscribe(avatar);
  }
  /**
   * Gets the events for a given avatar in a block range.
   * @param avatar The avatar to get the events for.
   * @param fromBlock The block number to start from.
   * @param toBlock The block number to end at. If not provided, the latest block is used.
   */
  async getEvents(avatar, fromBlock, toBlock) {
    const response = await this.rpc.call("circles_events", [avatar, fromBlock, toBlock]);
    return parseRpcSubscriptionMessage(response.result);
  }
  /**
   * Gets the invitations sent by an avatar.
   * @param avatar The avatar to get the invitations for.
   * @param pageSize The maximum number of invitations per page.
   * @returns A CirclesQuery object to fetch the invitations.
   */
  getInvitations(avatar, pageSize) {
    return new CirclesQuery(this.rpc, {
      namespace: "CrcV2",
      table: "InviteHuman",
      columns: [
        "blockNumber",
        "transactionIndex",
        "logIndex",
        "timestamp",
        "transactionHash",
        "inviter",
        "invited"
      ],
      filter: [
        {
          Type: "FilterPredicate",
          FilterType: "Equals",
          Column: "inviter",
          Value: avatar.toLowerCase()
        }
      ],
      sortOrder: "DESC",
      limit: pageSize
    });
  }
  /**
   * Gets the avatar that invited the given avatar.
   * @param avatar The address of the invited avatar.
   * @returns The address of the inviting avatar or undefined if not found.
   */
  async getInvitedBy(avatar) {
    var _a;
    const circlesQuery = new CirclesQuery(this.rpc, {
      namespace: "CrcV2",
      table: "InviteHuman",
      columns: [
        "inviter"
      ],
      filter: [
        {
          Type: "FilterPredicate",
          FilterType: "Equals",
          Column: "invited",
          Value: avatar.toLowerCase()
        }
      ],
      sortOrder: "DESC",
      limit: 1
    });
    const page = await circlesQuery.queryNextPage();
    if (!page) {
      return void 0;
    }
    return (_a = circlesQuery.currentPage) == null ? void 0 : _a.results[0].inviter;
  }
  /**
   * Gets the list of groups.
   * @param pageSize The maximum number of groups per page.
   * @param params The query parameters to filter the groups.
   */
  findGroups(pageSize, params) {
    const queryDefintion = {
      namespace: "V_CrcV2",
      table: "Groups",
      columns: [
        "blockNumber",
        "timestamp",
        "transactionIndex",
        "logIndex",
        "transactionHash",
        "group",
        "mint",
        "treasury",
        "name",
        "symbol",
        "cidV0Digest"
      ],
      sortOrder: "DESC",
      limit: pageSize
    };
    if (!params) {
      return new CirclesQuery(this.rpc, queryDefintion);
    }
    let filter = [];
    if (params.nameStartsWith) {
      filter.push({
        Type: "FilterPredicate",
        FilterType: "Like",
        Column: "name",
        Value: params.symbolStartsWith + "%"
      });
    }
    if (params.symbolStartsWith) {
      filter.push({
        Type: "FilterPredicate",
        FilterType: "Like",
        Column: "symbol",
        Value: params.symbolStartsWith + "%"
      });
    }
    if (params.groupAddressIn) {
      filter.push({
        Type: "FilterPredicate",
        FilterType: "In",
        Column: "group",
        Value: params.groupAddressIn
      });
    }
    if (filter.length > 1) {
      filter = [{
        Type: "Conjunction",
        Predicates: filter,
        ConjunctionType: "And"
      }];
    }
    queryDefintion.filter = filter;
    return new CirclesQuery(this.rpc, queryDefintion);
  }
  /**
   * Gets the group memberships of an avatar.
   * @param avatar The avatar to get the group memberships for.
   * @param pageSize The maximum number of group memberships per page.
   */
  getGroupMemberships(avatar, pageSize) {
    return new CirclesQuery(this.rpc, {
      namespace: "V_CrcV2",
      table: "GroupMemberships",
      columns: [
        "blockNumber",
        "timestamp",
        "transactionIndex",
        "logIndex",
        "transactionHash",
        "group",
        "member",
        "expiryTime"
      ],
      filter: [
        {
          Type: "FilterPredicate",
          FilterType: "Equals",
          Column: "member",
          Value: avatar.toLowerCase()
        }
      ],
      sortOrder: "DESC",
      limit: pageSize
    });
  }
};
var CirclesRpc = class {
  constructor(rpcUrl) {
    this.idCounter = 0;
    this.websocket = null;
    this.websocketConnected = false;
    this.pendingResponses = {};
    this.subscriptionListeners = {};
    this.rpcUrl = rpcUrl;
  }
  async call(method, params) {
    const requestBody = {
      jsonrpc: "2.0",
      id: this.idCounter++,
      method,
      params
    };
    const response = await fetch(this.rpcUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(requestBody)
    });
    const jsonResponse = await response.json();
    if (!jsonResponse.result) {
      throw new Error(`RPC Error: ${JSON.stringify(jsonResponse)}`);
    }
    return jsonResponse;
  }
  connect() {
    return new Promise((resolve, reject) => {
      let wsUrl = this.rpcUrl.replace("http", "ws");
      if (wsUrl.endsWith("/")) {
        wsUrl += "ws";
      } else {
        wsUrl += "/ws";
      }
      this.websocket = new WebSocket(wsUrl);
      this.websocket.onopen = () => {
        resolve();
      };
      this.websocket.onmessage = (event) => {
        const message = JSON.parse(event.data);
        const { id, method, params } = message;
        if (id !== void 0 && this.pendingResponses[id]) {
          this.pendingResponses[id].resolve(message);
          delete this.pendingResponses[id];
        }
        if (method === "eth_subscription" && params) {
          const { subscription, result } = params;
          if (this.subscriptionListeners[subscription]) {
            this.subscriptionListeners[subscription].forEach((listener) => listener(result));
          }
        }
      };
      this.websocket.onclose = () => {
        this.websocketConnected = false;
      };
      this.websocket.onerror = (error) => {
        console.error("WebSocket error:", error);
        reject(error);
      };
    });
  }
  sendMessage(method, params, timeout = 5e3) {
    if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN) {
      return Promise.reject("WebSocket is not connected");
    }
    const id = this.idCounter++;
    const message = { jsonrpc: "2.0", method, params, id };
    return new Promise((resolve, reject) => {
      this.pendingResponses[id] = { resolve, reject };
      this.websocket.send(JSON.stringify(message));
      setTimeout(() => {
        if (this.pendingResponses[id]) {
          this.pendingResponses[id].reject("Request timed out");
          delete this.pendingResponses[id];
        }
      }, timeout);
    });
  }
  async subscribe(address) {
    if (!this.websocketConnected) {
      await this.connect();
      this.websocketConnected = true;
    }
    const observable = Observable.create();
    const subscriptionArgs = JSON.stringify(address ? { address } : {});
    const response = await this.sendMessage("eth_subscribe", ["circles", subscriptionArgs]);
    const subscriptionId = response.result;
    if (!this.subscriptionListeners[subscriptionId]) {
      this.subscriptionListeners[subscriptionId] = [];
    }
    this.subscriptionListeners[subscriptionId].push((events) => {
      parseRpcSubscriptionMessage(events).forEach((event) => observable.emit(event));
    });
    return observable.property;
  }
};

// node_modules/@circles-sdk/abi-v2/dist/index.js
var _abi$2 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_hubV1",
        type: "address",
        internalType: "contract IHubV1"
      },
      {
        name: "_nameRegistry",
        type: "address",
        internalType: "contract INameRegistry"
      },
      {
        name: "_migration",
        type: "address",
        internalType: "address"
      },
      {
        name: "_liftERC20",
        type: "address",
        internalType: "contract IERC20Lift"
      },
      {
        name: "_standardTreasury",
        type: "address",
        internalType: "address"
      },
      {
        name: "_inflationDayZero",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_bootstrapTime",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_gatewayUrl",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "advancedUsageFlags",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "avatars",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "balanceOf",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address"
      },
      {
        name: "_id",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "balanceOfBatch",
    inputs: [
      {
        name: "_accounts",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "_ids",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "balanceOfOnDay",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address"
      },
      {
        name: "_id",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_day",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "balanceOnDay_",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "discountCost_",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "burn",
    inputs: [
      {
        name: "_id",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "calculateIssuance",
    inputs: [
      {
        name: "_human",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "calculateIssuanceWithCheck",
    inputs: [
      {
        name: "_human",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "convertDemurrageToInflationaryValue",
    inputs: [
      {
        name: "_demurrageValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_dayUpdated",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "convertInflationaryToDemurrageValue",
    inputs: [
      {
        name: "_inflationaryValue",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_day",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "day",
    inputs: [
      {
        name: "_timestamp",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint64",
        internalType: "uint64"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "groupMint",
    inputs: [
      {
        name: "_group",
        type: "address",
        internalType: "address"
      },
      {
        name: "_collateralAvatars",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "_amounts",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "inflationDayZero",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isApprovedForAll",
    inputs: [
      {
        name: "_account",
        type: "address",
        internalType: "address"
      },
      {
        name: "_operator",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isGroup",
    inputs: [
      {
        name: "_group",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isHuman",
    inputs: [
      {
        name: "_human",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isOrganization",
    inputs: [
      {
        name: "_organization",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isPermittedFlow",
    inputs: [
      {
        name: "_from",
        type: "address",
        internalType: "address"
      },
      {
        name: "_to",
        type: "address",
        internalType: "address"
      },
      {
        name: "_circlesAvatar",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isTrusted",
    inputs: [
      {
        name: "_truster",
        type: "address",
        internalType: "address"
      },
      {
        name: "_trustee",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "migrate",
    inputs: [
      {
        name: "_owner",
        type: "address",
        internalType: "address"
      },
      {
        name: "_avatars",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "_amounts",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "mintPolicies",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "operateFlowMatrix",
    inputs: [
      {
        name: "_flowVertices",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "_flow",
        type: "tuple[]",
        internalType: "struct TypeDefinitions.FlowEdge[]",
        components: [
          {
            name: "streamSinkId",
            type: "uint16",
            internalType: "uint16"
          },
          {
            name: "amount",
            type: "uint192",
            internalType: "uint192"
          }
        ]
      },
      {
        name: "_streams",
        type: "tuple[]",
        internalType: "struct TypeDefinitions.Stream[]",
        components: [
          {
            name: "sourceCoordinate",
            type: "uint16",
            internalType: "uint16"
          },
          {
            name: "flowEdgeIds",
            type: "uint16[]",
            internalType: "uint16[]"
          },
          {
            name: "data",
            type: "bytes",
            internalType: "bytes"
          }
        ]
      },
      {
        name: "_packedCoordinates",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "personalMint",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "registerCustomGroup",
    inputs: [
      {
        name: "_mint",
        type: "address",
        internalType: "address"
      },
      {
        name: "_treasury",
        type: "address",
        internalType: "address"
      },
      {
        name: "_name",
        type: "string",
        internalType: "string"
      },
      {
        name: "_symbol",
        type: "string",
        internalType: "string"
      },
      {
        name: "_metadataDigest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "registerGroup",
    inputs: [
      {
        name: "_mint",
        type: "address",
        internalType: "address"
      },
      {
        name: "_name",
        type: "string",
        internalType: "string"
      },
      {
        name: "_symbol",
        type: "string",
        internalType: "string"
      },
      {
        name: "_metadataDigest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "registerHuman",
    inputs: [
      {
        name: "_inviter",
        type: "address",
        internalType: "address"
      },
      {
        name: "_metadataDigest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "registerOrganization",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string"
      },
      {
        name: "_metadataDigest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "safeBatchTransferFrom",
    inputs: [
      {
        name: "_from",
        type: "address",
        internalType: "address"
      },
      {
        name: "_to",
        type: "address",
        internalType: "address"
      },
      {
        name: "_ids",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "_values",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "safeTransferFrom",
    inputs: [
      {
        name: "_from",
        type: "address",
        internalType: "address"
      },
      {
        name: "_to",
        type: "address",
        internalType: "address"
      },
      {
        name: "_id",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_value",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_data",
        type: "bytes",
        internalType: "bytes"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setAdvancedUsageFlag",
    inputs: [
      {
        name: "_flag",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "setApprovalForAll",
    inputs: [
      {
        name: "_operator",
        type: "address",
        internalType: "address"
      },
      {
        name: "_approved",
        type: "bool",
        internalType: "bool"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stop",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "stopped",
    inputs: [
      {
        name: "_human",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "supportsInterface",
    inputs: [
      {
        name: "_interfaceId",
        type: "bytes4",
        internalType: "bytes4"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "toTokenId",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "totalSupply",
    inputs: [
      {
        name: "_id",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "treasuries",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "trust",
    inputs: [
      {
        name: "_trustReceiver",
        type: "address",
        internalType: "address"
      },
      {
        name: "_expiry",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "trustMarkers",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      },
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "previous",
        type: "address",
        internalType: "address"
      },
      {
        name: "expiry",
        type: "uint96",
        internalType: "uint96"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "uri",
    inputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "wrap",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "_type",
        type: "uint8",
        internalType: "enum CirclesType"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "ApprovalForAll",
    inputs: [
      {
        name: "account",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "approved",
        type: "bool",
        indexed: false,
        internalType: "bool"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "PersonalMint",
    inputs: [
      {
        name: "human",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "startPeriod",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "endPeriod",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RegisterGroup",
    inputs: [
      {
        name: "group",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "mint",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "treasury",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "name",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "symbol",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RegisterHuman",
    inputs: [
      {
        name: "avatar",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "RegisterOrganization",
    inputs: [
      {
        name: "organization",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "name",
        type: "string",
        indexed: false,
        internalType: "string"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Stopped",
    inputs: [
      {
        name: "avatar",
        type: "address",
        indexed: true,
        internalType: "address"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "StreamCompleted",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "ids",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      },
      {
        name: "amounts",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "TransferBatch",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "ids",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      },
      {
        name: "values",
        type: "uint256[]",
        indexed: false,
        internalType: "uint256[]"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "TransferSingle",
    inputs: [
      {
        name: "operator",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "from",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "to",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "id",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      },
      {
        name: "value",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "Trust",
    inputs: [
      {
        name: "truster",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "trustee",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "expiryTime",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "URI",
    inputs: [
      {
        name: "value",
        type: "string",
        indexed: false,
        internalType: "string"
      },
      {
        name: "id",
        type: "uint256",
        indexed: true,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "CirclesAddressCannotBeZero",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAmountMustNotBeZero",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAmountOverflow",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesArrayMustNotBeEmpty",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesArraysLengthMismatch",
    inputs: [
      {
        name: "lengthArray1",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "lengthArray2",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAvatarMustBeRegistered",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesDemurrageAmountExceedsMaxUint190",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "circlesId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesDemurrageDayBeforeLastUpdatedDay",
    inputs: [
      {
        name: "account",
        type: "address",
        internalType: "address"
      },
      {
        name: "circlesId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "day",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "lastUpdatedDay",
        type: "uint64",
        internalType: "uint64"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesERC1155CannotReceiveBatch",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesERC1155MintBlocked",
    inputs: [
      {
        name: "human",
        type: "address",
        internalType: "address"
      },
      {
        name: "mintV1Status",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubAvatarAlreadyRegistered",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubFlowEdgeIsNotPermitted",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address"
      },
      {
        name: "circlesId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubFlowEdgeStreamMismatch",
    inputs: [
      {
        name: "flowEdgeId",
        type: "uint16",
        internalType: "uint16"
      },
      {
        name: "streamId",
        type: "uint16",
        internalType: "uint16"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubFlowVerticesMustBeSorted",
    inputs: []
  },
  {
    type: "error",
    name: "CirclesHubGroupIsNotRegistered",
    inputs: [
      {
        name: "group",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubGroupMintPolicyRejectedBurn",
    inputs: [
      {
        name: "burner",
        type: "address",
        internalType: "address"
      },
      {
        name: "group",
        type: "address",
        internalType: "address"
      },
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubGroupMintPolicyRejectedMint",
    inputs: [
      {
        name: "minter",
        type: "address",
        internalType: "address"
      },
      {
        name: "group",
        type: "address",
        internalType: "address"
      },
      {
        name: "collateral",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "amounts",
        type: "uint256[]",
        internalType: "uint256[]"
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubInvalidTrustReceiver",
    inputs: [
      {
        name: "trustReceiver",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubMustBeHuman",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubNettedFlowMismatch",
    inputs: [
      {
        name: "vertexPosition",
        type: "uint16",
        internalType: "uint16"
      },
      {
        name: "matrixNettedFlow",
        type: "int256",
        internalType: "int256"
      },
      {
        name: "streamNettedFlow",
        type: "int256",
        internalType: "int256"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubOperatorNotApprovedForSource",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address"
      },
      {
        name: "source",
        type: "address",
        internalType: "address"
      },
      {
        name: "streamId",
        type: "uint16",
        internalType: "uint16"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubRegisterAvatarV1MustBeStoppedBeforeEndOfInvitationPeriod",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesHubStreamMismatch",
    inputs: [
      {
        name: "streamId",
        type: "uint16",
        internalType: "uint16"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesIdMustBeDerivedFromAddress",
    inputs: [
      {
        name: "providedId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidCirclesId",
    inputs: [
      {
        name: "id",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidFunctionCaller",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address"
      },
      {
        name: "expectedCaller",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidParameter",
    inputs: [
      {
        name: "parameter",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidString",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesLogicAssertion",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesProxyAlreadyInitialized",
    inputs: []
  },
  {
    type: "error",
    name: "CirclesReentrancyGuard",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1155InsufficientBalance",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address"
      },
      {
        name: "balance",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "needed",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "tokenId",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1155InvalidApprover",
    inputs: [
      {
        name: "approver",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1155InvalidArrayLength",
    inputs: [
      {
        name: "idsLength",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "valuesLength",
        type: "uint256",
        internalType: "uint256"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1155InvalidOperator",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1155InvalidReceiver",
    inputs: [
      {
        name: "receiver",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1155InvalidSender",
    inputs: [
      {
        name: "sender",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "ERC1155MissingApprovalForAll",
    inputs: [
      {
        name: "operator",
        type: "address",
        internalType: "address"
      },
      {
        name: "owner",
        type: "address",
        internalType: "address"
      }
    ]
  }
];
var _bytecode$2 = "";
var isSuperArgs$2 = (xs) => xs.length > 1;
var Hub__factory2 = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$2(args)) {
      super(...args);
    } else {
      super(_abi$2, _bytecode$2, args[0]);
    }
  }
  getDeployTransaction(_hubV1, _nameRegistry, _migration, _liftERC20, _standardTreasury, _inflationDayZero, _bootstrapTime, _gatewayUrl, overrides) {
    return super.getDeployTransaction(_hubV1, _nameRegistry, _migration, _liftERC20, _standardTreasury, _inflationDayZero, _bootstrapTime, _gatewayUrl, overrides || {});
  }
  deploy(_hubV1, _nameRegistry, _migration, _liftERC20, _standardTreasury, _inflationDayZero, _bootstrapTime, _gatewayUrl, overrides) {
    return super.deploy(_hubV1, _nameRegistry, _migration, _liftERC20, _standardTreasury, _inflationDayZero, _bootstrapTime, _gatewayUrl, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi$2);
  }
  static connect(address, runner) {
    return new Contract(address, _abi$2, runner);
  }
};
Hub__factory2.bytecode = _bytecode$2;
Hub__factory2.abi = _abi$2;
var _abi$12 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_hubV1",
        type: "address",
        internalType: "contract IHubV1"
      },
      {
        name: "_hubV2",
        type: "address",
        internalType: "contract IHubV2"
      },
      {
        name: "_inflationDayZero",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "convertFromV1ToDemurrage",
    inputs: [
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hubV1",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IHubV1"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hubV2",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IHubV2"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "inflationDayZero",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "migrate",
    inputs: [
      {
        name: "_avatars",
        type: "address[]",
        internalType: "address[]"
      },
      {
        name: "_amounts",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "period",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "error",
    name: "CirclesAddressCannotBeZero",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAmountMustNotBeZero",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAmountOverflow",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesArrayMustNotBeEmpty",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesArraysLengthMismatch",
    inputs: [
      {
        name: "lengthArray1",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "lengthArray2",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAvatarMustBeRegistered",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesIdMustBeDerivedFromAddress",
    inputs: [
      {
        name: "providedId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidCirclesId",
    inputs: [
      {
        name: "id",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidFunctionCaller",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address"
      },
      {
        name: "expectedCaller",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidParameter",
    inputs: [
      {
        name: "parameter",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidString",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesLogicAssertion",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesProxyAlreadyInitialized",
    inputs: []
  },
  {
    type: "error",
    name: "CirclesReentrancyGuard",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  }
];
var _bytecode$12 = "0x60e060405234801561000f575f80fd5b50604051610ba1380380610ba183398101604081905261002e91610132565b6001600160a01b03831661005c576040516321efd2b360e01b81525f60048201526024015b60405180910390fd5b6001600160a01b038216610086576040516321efd2b360e01b815260016004820152602401610053565b6001600160a01b0383811660808190525f80546001600160a01b0319169285169290921790915560a08290526040805163ef78d4fd60e01b8152905163ef78d4fd916004808201926020929091908290030181865afa1580156100eb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061010f9190610172565b60c05250610189915050565b6001600160a01b038116811461012f575f80fd5b50565b5f805f60608486031215610144575f80fd5b835161014f8161011b565b60208501519093506101608161011b565b80925050604084015190509250925092565b5f60208284031215610182575f80fd5b5051919050565b60805160a05160c0516109b86101e95f395f8181610127015281816101e10152818161037c01526103b901525f81816098015261020c01525f818160e00152818161014d0152818161026a01528181610300015261049d01526109b85ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c806379742f66146100645780637c234d01146100935780639a288377146100c8578063bde87738146100db578063de01e15114610102578063ef78d4fd14610122575b5f80fd5b5f54610076906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161008a565b6100ba6100d63660046106d9565b610149565b6100767f000000000000000000000000000000000000000000000000000000000000000081565b610115610110366004610738565b610413565b60405161008a91906107d9565b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a4caeb426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101cb91906107f2565b90505f6101d982600161081d565b90505f6102067f000000000000000000000000000000000000000000000000000000000000000084610836565b610230907f000000000000000000000000000000000000000000000000000000000000000061081d565b90505f61023d824261084d565b604051631549c1a160e11b81526305f5e1006004820152602481018690529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a93834290604401602060405180830381865afa1580156102af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d391906107f2565b604051631549c1a160e11b81526305f5e1006004820152602481018690529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a93834290604401602060405180830381865afa158015610345573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036991906107f2565b90505f6103768483610836565b6103a0857f000000000000000000000000000000000000000000000000000000000000000061084d565b6103aa9085610836565b6103b4919061081d565b9050807f00000000000000000000000000000000000000000000000000000000000000006305f5e1006103e88c6003610836565b6103f29190610836565b6103fc9190610836565b6104069190610860565b9998505050505050505050565b606083821461044a57604051638b5ccddf60e01b815260048101859052602481018390525f60448201526064015b60405180910390fd5b5f8467ffffffffffffffff8111156104645761046461087f565b60405190808252806020026020018201604052801561048d578160200160208202803683370190505b5090505f5b8581101561066c575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166328d249fe8989858181106104dc576104dc610893565b90506020020160208101906104f191906108be565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610533573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061055791906108d9565b90506001600160a01b038116610583576040516321efd2b360e01b815260026004820152602401610441565b6105a486868481811061059857610598610893565b90506020020135610149565b8383815181106105b6576105b6610893565b602002602001018181525050806001600160a01b03166323b872dd33308989878181106105e5576105e5610893565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152949093166024850152506020909102013560448201526064016020604051808303815f875af115801561063e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061066291906108f4565b5050600101610492565b505f5460405163f317707960e01b81526001600160a01b039091169063f3177079906106a29033908a908a908790600401610913565b5f604051808303815f87803b1580156106b9575f80fd5b505af11580156106cb573d5f803e3d5ffd5b509298975050505050505050565b5f602082840312156106e9575f80fd5b5035919050565b5f8083601f840112610700575f80fd5b50813567ffffffffffffffff811115610717575f80fd5b6020830191508360208260051b8501011115610731575f80fd5b9250929050565b5f805f806040858703121561074b575f80fd5b843567ffffffffffffffff80821115610762575f80fd5b61076e888389016106f0565b90965094506020870135915080821115610786575f80fd5b50610793878288016106f0565b95989497509550505050565b5f815180845260208085019450602084015f5b838110156107ce578151875295820195908201906001016107b2565b509495945050505050565b602081525f6107eb602083018461079f565b9392505050565b5f60208284031215610802575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561083057610830610809565b92915050565b808202811582820484141761083057610830610809565b8181038181111561083057610830610809565b5f8261087a57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b03811681146108bb575f80fd5b50565b5f602082840312156108ce575f80fd5b81356107eb816108a7565b5f602082840312156108e9575f80fd5b81516107eb816108a7565b5f60208284031215610904575f80fd5b815180151581146107eb575f80fd5b6001600160a01b038581168252606060208084018290529083018590525f91869160808501845b8881101561096157843561094d816108a7565b84168252938201939082019060010161093a565b508581036040870152610974818861079f565b9a995050505050505050505056fea264697066735822122020c2ba99b4debbe2a4abd5c016c29e74af13d0580bafa627bfe299b5fe8a437e64736f6c63430008180033";
var isSuperArgs$12 = (xs) => xs.length > 1;
var Migration__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs$12(args)) {
      super(...args);
    } else {
      super(_abi$12, _bytecode$12, args[0]);
    }
  }
  getDeployTransaction(_hubV1, _hubV2, _inflationDayZero, overrides) {
    return super.getDeployTransaction(_hubV1, _hubV2, _inflationDayZero, overrides || {});
  }
  deploy(_hubV1, _hubV2, _inflationDayZero, overrides) {
    return super.deploy(_hubV1, _hubV2, _inflationDayZero, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi$12);
  }
  static connect(address, runner) {
    return new Contract(address, _abi$12, runner);
  }
};
Migration__factory.bytecode = _bytecode$12;
Migration__factory.abi = _abi$12;
var _abi2 = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_hub",
        type: "address",
        internalType: "contract IHubV2"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "DEFAULT_CIRCLES_NAME_PREFIX",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "DEFAULT_CIRCLES_SYMBOL",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "MAX_SHORT_NAME",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint72",
        internalType: "uint72"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "avatarToMetaDataDigest",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "calculateShortNameWithNonce",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "_nonce",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [
      {
        name: "shortName_",
        type: "uint72",
        internalType: "uint72"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "customNames",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "customSymbols",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "getMetadataDigest",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "hub",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IHubV2"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "isValidName",
    inputs: [
      {
        name: "_name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "isValidSymbol",
    inputs: [
      {
        name: "_symbol",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool",
        internalType: "bool"
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    name: "name",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "registerCustomName",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "_name",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "registerCustomSymbol",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "_symbol",
        type: "string",
        internalType: "string"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "registerShortName",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "registerShortNameWithNonce",
    inputs: [
      {
        name: "_nonce",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "searchShortName",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "shortName_",
        type: "uint72",
        internalType: "uint72"
      },
      {
        name: "nonce_",
        type: "uint256",
        internalType: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "setMetadataDigest",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "_metadataDigest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    name: "shortNameToAvatar",
    inputs: [
      {
        name: "",
        type: "uint72",
        internalType: "uint72"
      }
    ],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "shortNames",
    inputs: [
      {
        name: "",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "uint72",
        internalType: "uint72"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "symbol",
    inputs: [
      {
        name: "_avatar",
        type: "address",
        internalType: "address"
      }
    ],
    outputs: [
      {
        name: "",
        type: "string",
        internalType: "string"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    name: "updateMetadataDigest",
    inputs: [
      {
        name: "_metadataDigest",
        type: "bytes32",
        internalType: "bytes32"
      }
    ],
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    name: "RegisterShortName",
    inputs: [
      {
        name: "avatar",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "shortName",
        type: "uint72",
        indexed: false,
        internalType: "uint72"
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: false,
        internalType: "uint256"
      }
    ],
    anonymous: false
  },
  {
    type: "event",
    name: "UpdateMetadataDigest",
    inputs: [
      {
        name: "avatar",
        type: "address",
        indexed: true,
        internalType: "address"
      },
      {
        name: "metadataDigest",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32"
      }
    ],
    anonymous: false
  },
  {
    type: "error",
    name: "CirclesAddressCannotBeZero",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAmountMustNotBeZero",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAmountOverflow",
    inputs: [
      {
        name: "amount",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesArrayMustNotBeEmpty",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesArraysLengthMismatch",
    inputs: [
      {
        name: "lengthArray1",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "lengthArray2",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesAvatarMustBeRegistered",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesIdMustBeDerivedFromAddress",
    inputs: [
      {
        name: "providedId",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidCirclesId",
    inputs: [
      {
        name: "id",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidFunctionCaller",
    inputs: [
      {
        name: "caller",
        type: "address",
        internalType: "address"
      },
      {
        name: "expectedCaller",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidParameter",
    inputs: [
      {
        name: "parameter",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesInvalidString",
    inputs: [
      {
        name: "str",
        type: "string",
        internalType: "string"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesLogicAssertion",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesNamesAvatarAlreadyHasCustomNameOrSymbol",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "nameOrSymbol",
        type: "string",
        internalType: "string"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesNamesInvalidName",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "name",
        type: "string",
        internalType: "string"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesNamesOrganizationHasNoSymbol",
    inputs: [
      {
        name: "organization",
        type: "address",
        internalType: "address"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesNamesShortNameAlreadyAssigned",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "shortName",
        type: "uint72",
        internalType: "uint72"
      },
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesNamesShortNameWithNonceTaken",
    inputs: [
      {
        name: "avatar",
        type: "address",
        internalType: "address"
      },
      {
        name: "nonce",
        type: "uint256",
        internalType: "uint256"
      },
      {
        name: "shortName",
        type: "uint72",
        internalType: "uint72"
      },
      {
        name: "takenByAvatar",
        type: "address",
        internalType: "address"
      }
    ]
  },
  {
    type: "error",
    name: "CirclesProxyAlreadyInitialized",
    inputs: []
  },
  {
    type: "error",
    name: "CirclesReentrancyGuard",
    inputs: [
      {
        name: "code",
        type: "uint8",
        internalType: "uint8"
      }
    ]
  }
];
var _bytecode2 = "0x608060405234801561000f575f80fd5b50604051611c40380380611c4083398101604081905261002e9161007f565b6001600160a01b03811661005b576040516321efd2b360e01b81525f600482015260240160405180910390fd5b5f80546001600160a01b0319166001600160a01b03929092169190911790556100ac565b5f6020828403121561008f575f80fd5b81516001600160a01b03811681146100a5575f80fd5b9392505050565b611b87806100b95f395ff3fe608060405234801561000f575f80fd5b506004361061013d575f3560e01c80635dabbfa7116100b4578063c5a5688c11610079578063c5a5688c14610331578063d199889314610344578063dc03a0f314610357578063e27871dd1461036a578063e44b8c351461037d578063e9973f7c14610390575f80fd5b80635dabbfa7146102e0578063829c0fde146102f35780638fd4f71a146102fb57806398245b0c1461030e578063a86e35761461031e575f80fd5b8063365a86fc11610105578063365a86fc146102245780633857d9d71461024e5780633bb7b6c5146102635780634068e58d1461027657806348f813b5146102955780634a4b8ae3146102b8575f80fd5b8063013046ae1461014157806301984892146101865780631455d1e6146101a65780631e30397f146101cb57806328898d0a146101ee575b5f80fd5b61016961014f36600461165d565b60016020525f90815260409020546001600160481b031681565b6040516001600160481b0390911681526020015b60405180910390f35b61019961019436600461165d565b6103c2565b60405161017d91906116a1565b6101996040518060400160405280600681526020016552696e67732d60d01b81525081565b6101de6101d9366004611718565b61059e565b604051901515815260200161017d565b6102166101fc36600461165d565b6001600160a01b03165f9081526005602052604090205490565b60405190815260200161017d565b5f54610236906001600160a01b031681565b6040516001600160a01b03909116815260200161017d565b61026161025c366004611757565b6107d8565b005b61019961027136600461165d565b610884565b61021661028436600461165d565b60056020525f908152604090205481565b6101996040518060400160405280600481526020016352494e4760e01b81525081565b6102366102c636600461176e565b60026020525f90815260409020546001600160a01b031681565b6101996102ee36600461165d565b61091b565b610261610933565b6101de610309366004611718565b6109da565b610169684e900abb53e6b70fff81565b61019961032c36600461165d565b610b30565b61026161033f366004611757565b610da6565b610261610352366004611794565b610e4c565b6101696103653660046117e5565b610eea565b610261610378366004611794565b610f5d565b61026161038b3660046117e5565b610ff4565b6103a361039e36600461165d565b61103b565b604080516001600160481b03909316835260208301919091520161017d565b5f8054604051633b7bae4f60e21b81526001600160a01b03808516600483015260609385936003939192169063edeeb93c90602401602060405180830381865afa158015610412573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610436919061180f565b6001600160a01b03160361046a57818160405163aa8ed7bd60e01b815260040161046192919061182a565b60405180910390fd5b5f5460405163f72c436f60e01b81526001600160a01b0386811660048301529091169063f72c436f90602401602060405180830381865afa1580156104b1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104d59190611846565b61058b576001600160a01b0384165f90815260036020526040812080546104fb90611865565b80601f016020809104026020016040519081016040528092919081815260200182805461052790611865565b80156105725780601f1061054957610100808354040283529160200191610572565b820191905f5260205f20905b81548152906001019060200180831161055557829003601f168201915b505050505090505f81511115610589579250610597565b505b610594846110f5565b92505b5050919050565b5f8083838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505082519293505060209091119050806105ea57508051155b156105f8575f9150506107d2565b5f5b81518110156107cb575f8282815181106106165761061661189d565b01602001516001600160f81b0319169050600360fc1b81108015906106495750603960f81b6001600160f81b0319821611155b15801561067f5750604160f81b6001600160f81b031982161080159061067d5750602d60f91b6001600160f81b0319821611155b155b80156106b45750606160f81b6001600160f81b03198216108015906106b25750603d60f91b6001600160f81b0319821611155b155b80156106ce5750600160fd1b6001600160f81b0319821614155b80156107005750602d60f81b6001600160f81b0319821614806106fe5750605f60f81b6001600160f81b03198216145b155b801561071a5750601760f91b6001600160f81b0319821614155b801561074c5750600560fb1b6001600160f81b03198216148061074a5750602960f81b6001600160f81b03198216145b155b80156107665750602760f81b6001600160f81b0319821614155b80156107805750601360f91b6001600160f81b0319821614155b80156107b25750602b60f81b6001600160f81b0319821614806107b05750602360f81b6001600160f81b03198216145b155b156107c2575f93505050506107d2565b506001016105fa565b5060019150505b92915050565b5f8054604051633b7bae4f60e21b815233600482018190529260029290916001600160a01b039091169063edeeb93c90602401602060405180830381865afa158015610826573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084a919061180f565b6001600160a01b03160361087557818160405163aa8ed7bd60e01b815260040161046192919061182a565b61087f338461118f565b505050565b60046020525f90815260409020805461089c90611865565b80601f01602080910402602001604051908101604052809291908181526020018280546108c890611865565b80156109135780601f106108ea57610100808354040283529160200191610913565b820191905f5260205f20905b8154815290600101906020018083116108f657829003601f168201915b505050505081565b60036020525f90815260409020805461089c90611865565b5f8054604051633b7bae4f60e21b81523360048201819052929182916001600160a01b039091169063edeeb93c90602401602060405180830381865afa15801561097f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a3919061180f565b6001600160a01b0316036109ce57818160405163aa8ed7bd60e01b815260040161046192919061182a565b6109d66111e7565b5050565b5f8083838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250508251929350509015905080610a25575060108151115b15610a33575f9150506107d2565b5f5b81518110156107cb575f828281518110610a5157610a5161189d565b01602001516001600160f81b0319169050600360fc1b8110801590610a845750603960f81b6001600160f81b0319821611155b80610ab65750604160f81b6001600160f81b0319821610801590610ab65750602d60f91b6001600160f81b0319821611155b80610ae85750606160f81b6001600160f81b0319821610801590610ae85750603d60f91b6001600160f81b0319821611155b80610b005750602d60f81b6001600160f81b03198216145b80610b185750605f60f81b6001600160f81b03198216145b610b27575f93505050506107d2565b50600101610a35565b5f8054604051633b7bae4f60e21b81526001600160a01b038085166004808401919091526060948694919390929091169063edeeb93c90602401602060405180830381865afa158015610b85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba9919061180f565b6001600160a01b031603610bd457818160405163aa8ed7bd60e01b815260040161046192919061182a565b5f5460405163b1ce8eab60e01b81526001600160a01b0386811660048301529091169063b1ce8eab90602401602060405180830381865afa158015610c1b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c3f9190611846565b15610c6157835f604051633191a38d60e01b815260040161046192919061182a565b5f5460405163278330f160e21b81526001600160a01b03868116600483015290911690639e0cc3c490602401602060405180830381865afa158015610ca8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ccc9190611846565b15610d83576001600160a01b0384165f9081526004602052604081208054610cf390611865565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1f90611865565b8015610d6a5780601f10610d4157610100808354040283529160200191610d6a565b820191905f5260205f20905b815481529060010190602001808311610d4d57829003601f168201915b505050505090505f81511115610d81579250610597565b505b505060408051808201909152600481526352494e4760e01b602082015292915050565b5f8054604051633b7bae4f60e21b815233600482018190529260019290916001600160a01b039091169063edeeb93c90602401602060405180830381865afa158015610df4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e18919061180f565b6001600160a01b031603610e4357818160405163aa8ed7bd60e01b815260040161046192919061182a565b61087f83611201565b5f546001906001600160a01b03163314610e8b575f54604051636844c68b60e11b81526104619133916001600160a01b039091169084906004016118b1565b8115610ee457610e9b838361059e565b610ec0578383835f60405163d76958f760e01b815260040161046194939291906118ff565b6001600160a01b0384165f908152600360205260409020610ee283858361198f565b505b50505050565b6040516bffffffffffffffffffffffff19606084901b166020820152603481018290525f908190605401604051602081830303815290604052805190602001209050684e900abb53e6b70fff6001610f429190611a5d565b610f55906001600160481b031682611a98565b949350505050565b5f546002906001600160a01b03163314610f9c575f54604051636844c68b60e11b81526104619133916001600160a01b039091169084906004016118b1565b8115610ee457610fac83836109da565b610fd257838383600160405163d76958f760e01b815260040161046194939291906118ff565b6001600160a01b0384165f908152600460205260409020610ee283858361198f565b5f80546001600160a01b03163314611031575f54604051636844c68b60e11b81526104619133916001600160a01b039091169084906004016118b1565b61087f838361118f565b6001600160a01b0381165f9081526001602052604081205481906001600160481b0316156110ab576001600160a01b0383165f8181526001602052604080822054905163ec7765c960e01b815260048101939093526001600160481b031660248301526044820152606401610461565b6110b58382610eea565b6001600160481b0381165f908152600260205260409020549092506001600160a01b0316156110f057806110e881611aab565b9150506110ab565b915091565b6001600160a01b0381165f908152600160205260409020546060906001600160481b03168061117c575f611131846001600160a01b03166112f2565b90506040518060400160405280600681526020016552696e67732d60d01b81525081604051602001611164929190611ac3565b60405160208183030381529060405292505050919050565b5f611131826001600160481b03166113bd565b6001600160a01b0382165f8181526005602052604090819020839055517f0a1d44830b9ad1708d85ea4071d97fd532b52504d7397d3e44461badd9f4f827906111db9084815260200190565b60405180910390a25050565b5f806111f23361103b565b915091506109d63383836114fb565b335f908152600160205260409020546001600160481b03161561126257335f8181526001602081905260409182902054915163ec7765c960e01b815260048101939093526001600160481b0390911660248301526044820152606401610461565b5f61126d3383610eea565b6001600160481b0381165f908152600260205260409020549091506001600160a01b0316156112e7576001600160481b0381165f818152600260205260409081902054905163690a563f60e11b81523360048201526024810185905260448101929092526001600160a01b03166064820152608401610461565b6109d63382846114fb565b6040805181815260608181018352915f91906020820181803683370190505090505f5b5f841180611321575080155b156113b3575f611332603a86611a98565b90506040518060600160405280603a8152602001611b18603a9139818151811061135e5761135e61189d565b01602001516001600160f81b031916838361137881611aab565b94508151811061138a5761138a61189d565b60200101906001600160f81b03191690815f1a9053506113ab603a86611af1565b945050611315565b6105948282611589565b60408051600c8082528183019092526060915f91906020820181803683370190505090505f5b5f8411806113ef575080155b15611481575f611400603a86611a98565b90506040518060600160405280603a8152602001611b18603a9139818151811061142c5761142c61189d565b01602001516001600160f81b031916838361144681611aab565b9450815181106114585761145861189d565b60200101906001600160f81b03191690815f1a905350611479603a86611af1565b9450506113e3565b600c8110156113b3576040518060600160405280603a8152602001611b18603a91395f815181106114b4576114b461189d565b01602001516001600160f81b03191682826114ce81611aab565b9350815181106114e0576114e061189d565b60200101906001600160f81b03191690815f1a905350611481565b6001600160a01b0383165f818152600160209081526040808320805468ffffffffffffffffff19166001600160481b038816908117909155808452600283529281902080546001600160a01b0319168517905580519283529082018490527f368e444a05faec665f223aebb06d81a86daf0bc59bd7bccc160042422c8b6229910160405180910390a2505050565b60605f8267ffffffffffffffff8111156115a5576115a5611937565b6040519080825280601f01601f1916602001820160405280156115cf576020820181803683370190505b5090505f5b8381101561163e5784816115e9600187611b04565b6115f39190611b04565b815181106116035761160361189d565b602001015160f81c60f81b8282815181106116205761162061189d565b60200101906001600160f81b03191690815f1a9053506001016115d4565b509392505050565b6001600160a01b038116811461165a575f80fd5b50565b5f6020828403121561166d575f80fd5b813561167881611646565b9392505050565b5f5b83811015611699578181015183820152602001611681565b50505f910152565b602081525f82518060208401526116bf81604085016020870161167f565b601f01601f19169190910160400192915050565b5f8083601f8401126116e3575f80fd5b50813567ffffffffffffffff8111156116fa575f80fd5b602083019150836020828501011115611711575f80fd5b9250929050565b5f8060208385031215611729575f80fd5b823567ffffffffffffffff81111561173f575f80fd5b61174b858286016116d3565b90969095509350505050565b5f60208284031215611767575f80fd5b5035919050565b5f6020828403121561177e575f80fd5b81356001600160481b0381168114611678575f80fd5b5f805f604084860312156117a6575f80fd5b83356117b181611646565b9250602084013567ffffffffffffffff8111156117cc575f80fd5b6117d8868287016116d3565b9497909650939450505050565b5f80604083850312156117f6575f80fd5b823561180181611646565b946020939093013593505050565b5f6020828403121561181f575f80fd5b815161167881611646565b6001600160a01b0392909216825260ff16602082015260400190565b5f60208284031215611856575f80fd5b81518015158114611678575f80fd5b600181811c9082168061187957607f821691505b60208210810361189757634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b03938416815291909216602082015260ff909116604082015260600190565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b6001600160a01b03851681526060602082018190525f9061192390830185876118d7565b905060ff8316604083015295945050505050565b634e487b7160e01b5f52604160045260245ffd5b601f82111561087f57805f5260205f20601f840160051c810160208510156119705750805b601f840160051c820191505b81811015610ee2575f815560010161197c565b67ffffffffffffffff8311156119a7576119a7611937565b6119bb836119b58354611865565b8361194b565b5f601f8411600181146119ec575f85156119d55750838201355b5f19600387901b1c1916600186901b178355610ee2565b5f83815260208120601f198716915b82811015611a1b57868501358255602094850194600190920191016119fb565b5086821015611a37575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b5f52601160045260245ffd5b6001600160481b03818116838216019080821115611a7d57611a7d611a49565b5092915050565b634e487b7160e01b5f52601260045260245ffd5b5f82611aa657611aa6611a84565b500690565b5f60018201611abc57611abc611a49565b5060010190565b5f8351611ad481846020880161167f565b835190830190611ae881836020880161167f565b01949350505050565b5f82611aff57611aff611a84565b500490565b818103818111156107d2576107d2611a4956fe31323334353637383941424344454647484a4b4c4d4e505152535455565758595a6162636465666768696a6b6d6e6f707172737475767778797aa2646970667358221220d9c36420ec3c72f6a959af5e08798a631ef85a9d23eed9f34682b86fb0417f1764736f6c63430008180033";
var isSuperArgs2 = (xs) => xs.length > 1;
var NameRegistry__factory = class extends ContractFactory {
  constructor(...args) {
    if (isSuperArgs2(args)) {
      super(...args);
    } else {
      super(_abi2, _bytecode2, args[0]);
    }
  }
  getDeployTransaction(_hub, overrides) {
    return super.getDeployTransaction(_hub, overrides || {});
  }
  deploy(_hub, overrides) {
    return super.deploy(_hub, overrides || {});
  }
  connect(runner) {
    return super.connect(runner);
  }
  static createInterface() {
    return new Interface(_abi2);
  }
  static connect(address, runner) {
    return new Contract(address, _abi2, runner);
  }
};
NameRegistry__factory.bytecode = _bytecode2;
NameRegistry__factory.abi = _abi2;

// node_modules/@circles-sdk/profiles/dist/index.js
var Profiles = class {
  constructor(profileServiceUrl) {
    this.profileServiceUrl = profileServiceUrl;
  }
  getProfileServiceUrl() {
    return this.profileServiceUrl.endsWith("/") ? this.profileServiceUrl : `${this.profileServiceUrl}/`;
  }
  async create(profile) {
    const response = await fetch(`${this.getProfileServiceUrl()}pin`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(profile)
    });
    if (!response.ok) {
      throw new Error(`Failed to create profile. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);
    }
    const data = await response.json();
    return data.cid;
  }
  /**
   * Retrieves a profile by its CID. If the profile is not found, an error is thrown.
   * @param cid The CID of the profile to retrieve.
   */
  async get(cid) {
    const response = await fetch(`${this.getProfileServiceUrl()}get?cid=${cid}`);
    if (!response.ok) {
      console.warn(`Failed to retrieve profile ${cid}. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);
      return void 0;
    }
    return await response.json();
  }
  /**
   * Retrieves multiple profiles by their CIDs. If a profile is not found, it will not be included in the result.
   * @param cids The CIDs of the profiles to retrieve.
   * @returns A map of CIDs to profiles. If a profile is not found, it will not be included in the map.
   */
  async getMany(cids) {
    const response = await fetch(`${this.getProfileServiceUrl()}getBatch?cids=${cids.join(",")}`);
    if (!response.ok) {
      throw new Error(`Failed to retrieve profiles ${cids.join(",")}. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);
    }
    const profilesArray = await response.json();
    const profiles = {};
    for (let i = 0; i < cids.length; i++) {
      if (profilesArray[i]) {
        profiles[cids[i]] = profilesArray[i];
      }
    }
    return profiles;
  }
};

// node_modules/@circles-sdk/sdk/dist/index.js
var V1Avatar = class {
  get address() {
    if (!this.avatarInfo) {
      throw new Error("Avatar is not initialized");
    }
    return this.avatarInfo.avatar;
  }
  // TODO: Empty stream makes no sense
  // readonly events: Observable<AvatarEvent> = Observable.create<AvatarEvent>().property;
  get v1Token() {
    return this._v1Token;
  }
  constructor(sdk, avatarInfo) {
    this.sdk = sdk;
    this.avatarInfo = avatarInfo;
    if (!this.avatarInfo.hasV1) {
      throw new Error("Avatar is not a v1 avatar");
    }
    if (this.avatarInfo.v1Token) {
      this._v1Token = Token__factory.connect(this.avatarInfo.v1Token, this.sdk.contractRunner);
    }
  }
  /**
   * Utilizes the pathfinder to find the max. transferable amount from the avatar to `to`.
   * @param to The recipient
   * @param tokenId The token to transfer (address). Leave empty to allow transitive transfers.
   * @returns The max. transferable amount at the time.
   */
  async getMaxTransferableAmount(to, tokenId) {
    var _a;
    this.throwIfNotInitialized();
    if (tokenId) {
      const tokenInfo = await this.sdk.data.getTokenInfo(tokenId);
      if (!tokenInfo) {
        throw new Error("Token not found");
      }
      const tokenBalances = await this.sdk.data.getTokenBalances(this.address);
      const tokenBalance = (_a = tokenBalances.filter((b) => b.token === tokenId)[0]) == null ? void 0 : _a.balance;
      return BigInt(tokenBalance ?? 0);
    }
    this.throwIfPathfinderIsNotAvailable();
    const largeAmount = BigInt("999999999999999999999999999999");
    const transferPath = await this.sdk.v1Pathfinder.getTransferPath(this.address, to, largeAmount);
    if (!transferPath.isValid) {
      return Promise.resolve(BigInt(0));
    }
    return transferPath.maxFlow;
  }
  /**
   * Utilizes the pathfinder to transitively send `amount` Circles to `to`.
   * @param to The recipient
   * @param amount The amount to send
   */
  async transfer(to, amount) {
    this.throwIfNotInitialized();
    this.throwIfPathfinderIsNotAvailable();
    const transferPath = await this.sdk.v1Pathfinder.getTransferPath(this.address, to, amount);
    if (!transferPath.isValid || transferPath.transferSteps.length === 0) {
      throw new Error(`Couldn't find a valid path from ${this.address} to ${to} for ${amount}.`);
    }
    const tokenOwners = transferPath.transferSteps.map((o) => o.token_owner);
    const srcs = transferPath.transferSteps.map((o) => o.from);
    const dests = transferPath.transferSteps.map((o) => o.to);
    const wads = transferPath.transferSteps.map((o) => BigInt(o.value));
    const tx = await this.sdk.v1Hub.transferThrough(tokenOwners, srcs, dests, wads);
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error(`The transferThrough call for '${this.address} -> ${to}: ${amount}' didn't yield a receipt.`);
    }
    return receipt;
  }
  async trust(avatar) {
    this.throwIfNotInitialized();
    const tx = await this.sdk.v1Hub.trust(avatar, BigInt(100));
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error(`The trust call for '${this.address} -> ${avatar}' didn't yield a receipt.`);
    }
    return receipt;
  }
  async untrust(avatar) {
    this.throwIfNotInitialized();
    const tx = await this.sdk.v1Hub.trust(avatar, BigInt(0));
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error(`The untrust call for '${this.address} -> ${avatar}' didn't yield a receipt.`);
    }
    return receipt;
  }
  async getMintableAmount() {
    if (!this.v1Token) {
      return 0;
    }
    const availableCrcToMint = await this.v1Token.look();
    return crcToTc(/* @__PURE__ */ new Date(), availableCrcToMint);
  }
  async personalMint() {
    this.throwIfNotInitialized();
    if (!this.v1Token) {
      throw new Error("Avatar does not have a token to mint");
    }
    if (await this.v1Token.stopped()) {
      throw new Error("Avatar token is stopped");
    }
    const tx = await this.v1Token.update();
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("The update call didn't yield a receipt");
    }
    return receipt;
  }
  async stop() {
    this.throwIfNotInitialized();
    if (!this.v1Token) {
      throw new Error("Avatar does not have a token to stop");
    }
    if (await this.v1Token.stopped()) {
      throw new Error("Avatar token is already stopped");
    }
    const tx = await this.v1Token.stop();
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("The stop call didn't yield a receipt");
    }
    return receipt;
  }
  throwIfNotInitialized() {
    if (this.avatarInfo) {
      return;
    }
    throw new Error("Avatar is either not initialized or is not signed up at Circles.");
  }
  async getTrustRelations() {
    return this.sdk.data.getAggregatedTrustRelations(this.address);
  }
  async getTransactionHistory(pageSize) {
    const query = this.sdk.data.getTransactionHistory(this.address, pageSize);
    await query.queryNextPage();
    return query;
  }
  async getTotalBalance() {
    return parseFloat(await this.sdk.data.getTotalBalance(this.address, true));
  }
  async getGasTokenBalance() {
    var _a;
    return await ((_a = this.sdk.contractRunner.provider) == null ? void 0 : _a.getBalance(this.address)) ?? 0n;
  }
  throwIfPathfinderIsNotAvailable() {
    if (!this.sdk.v1Pathfinder) {
      throw new Error("Pathfinder is not available");
    }
  }
};
var Pathfinder$1 = class Pathfinder {
  constructor(pathfinderURL) {
    this.pathfinderURL = pathfinderURL;
  }
  async getArgsForPath(from, to, value) {
    var _a;
    const query = {
      method: "compute_transfer",
      params: { from, to, value: value.toString() }
    };
    try {
      const response = await fetch(this.pathfinderURL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(query)
      });
      if (!response.ok) {
        throw new Error(`Error calling API: ${response.status}`);
      }
      const parsed = await response.json();
      const transformedResponse = {
        data: {
          directPath: {
            requestedAmount: value,
            flow: parsed.result.maxFlowValue,
            transfers: parsed.result.transferSteps.map((step) => ({
              from: step.from,
              to: step.to,
              tokenOwner: step.token_owner,
              value: step.value
            })),
            isValid: parsed.result.final
          }
        }
      };
      if ((_a = transformedResponse.data) == null ? void 0 : _a.directPath) {
        const flowMatrix = createFlowMatrix(from, to, value, transformedResponse.data.directPath.transfers);
        return flowMatrix;
      } else {
        throw new Error("Invalid response from pathfinder");
      }
    } catch (error) {
      if (error instanceof Error) {
        throw error;
      } else {
        throw new Error("An unknown error occurred");
      }
    }
  }
};
function transformToFlowVertices(transfers, from, to) {
  const addressSet = /* @__PURE__ */ new Set();
  addressSet.add(from.toLowerCase());
  addressSet.add(to.toLowerCase());
  for (const transfer of transfers) {
    addressSet.add(transfer.from.toLowerCase());
    addressSet.add(transfer.to.toLowerCase());
    addressSet.add(transfer.tokenOwner.toLowerCase());
  }
  const sortedAddresses = Array.from(addressSet).sort((a, b) => {
    const uint160A = BigInt(a);
    const uint160B = BigInt(b);
    return uint160A < uint160B ? -1 : uint160A > uint160B ? 1 : 0;
  });
  const lookUpMap = {};
  sortedAddresses.forEach((address, index) => {
    lookUpMap[address] = index;
  });
  return {
    sortedAddresses,
    lookUpMap
  };
}
function packCoordinates(coordinates) {
  const packedCoordinates = new Uint8Array(coordinates.length * 2);
  for (let i = 0; i < coordinates.length; i++) {
    packedCoordinates[2 * i] = coordinates[i] >> 8;
    packedCoordinates[2 * i + 1] = coordinates[i] & 255;
  }
  return packedCoordinates;
}
function createFlowMatrix(from, to, value, transfers) {
  const { sortedAddresses, lookUpMap } = transformToFlowVertices(transfers, from.toLowerCase(), to.toLowerCase());
  const flowEdges = transfers.map((transfer, index) => ({
    streamSinkId: transfer.to.toLowerCase() === to.toLowerCase() ? 1 : 0,
    // Set streamSinkId to 1 if transfer.to matches the given 'to' address
    amount: BigInt(transfer.value)
    // Convert string value to bigint
  }));
  if (!flowEdges.some((edge) => edge.streamSinkId === 1)) {
    flowEdges[flowEdges.length - 1].streamSinkId = 1;
  }
  const totalTerminalAmount = flowEdges.filter((edge) => edge.streamSinkId === 1).reduce((sum, edge) => sum + edge.amount, BigInt(0));
  if (totalTerminalAmount !== BigInt(value)) {
    throw new Error(`The total terminal amount (${totalTerminalAmount}) does not match the provided value (${value}).`);
  }
  const flowEdgeIds = flowEdges.map((edge, index) => edge.streamSinkId === 1 ? index : -1).filter((index) => index !== -1);
  const stream = {
    sourceCoordinate: BigInt(lookUpMap[from.toLowerCase()]),
    flowEdgeIds,
    data: new Uint8Array()
    // Empty bytes for now
  };
  const coordinates = [];
  for (const transfer of transfers) {
    coordinates.push(lookUpMap[transfer.tokenOwner.toLowerCase()]);
    coordinates.push(lookUpMap[transfer.from.toLowerCase()]);
    coordinates.push(lookUpMap[transfer.to.toLowerCase()]);
  }
  const packedCoordinates = packCoordinates(coordinates);
  return {
    flowVertices: sortedAddresses,
    flowEdges,
    streams: [stream],
    packedCoordinates,
    sourceCoordinate: lookUpMap[from.toLowerCase()]
    // Add sourceCoordinate using the lookup map
  };
}
var V2Avatar = class {
  get address() {
    return this.avatarInfo.avatar;
  }
  constructor(sdk, avatarInfo) {
    this.sdk = sdk;
    this.avatarInfo = avatarInfo;
    if (this.avatarInfo.version != 2) {
      throw new Error("Avatar is not a v2 avatar");
    }
  }
  async updateMetadata(cid) {
    var _a;
    this.throwIfNameRegistryIsNotAvailable();
    const digest = cidV0ToUint8Array(cid);
    const tx = await ((_a = this.sdk.nameRegistry) == null ? void 0 : _a.updateMetadataDigest(digest));
    const receipt = await (tx == null ? void 0 : tx.wait());
    if (!receipt) {
      throw new Error("Transfer failed");
    }
    this.avatarInfo.cidV0 = cid;
    return receipt;
  }
  async getMaxTransferableAmount(to, tokenId) {
    this.throwIfV2IsNotAvailable();
    if (tokenId) {
      const tokenInfo = await this.sdk.data.getTokenInfo(tokenId);
      if (!tokenInfo) {
        throw new Error("Token not found");
      }
      const tokenBalances = await this.sdk.data.getTokenBalancesV2(this.address);
      const tokenBalance = tokenBalances.filter((b) => b.tokenOwner.toString() === tokenInfo.tokenId.toString());
      console.log(`Token balance:`, tokenBalance);
      return !tokenBalance[0].balance ? 0n : ethers_exports.parseEther(tokenBalance[0].balance.toString());
    }
    const largeAmount = BigInt("999999999999999999999999999999");
    const transferPath = await this.sdk.v2Pathfinder.getTransferPath(this.address, to, largeAmount);
    if (!transferPath.isValid) {
      return Promise.resolve(BigInt(0));
    }
    return transferPath.maxFlow;
  }
  async getMintableAmount() {
    this.throwIfV2IsNotAvailable();
    const [a, b, c] = await this.sdk.v2Hub.calculateIssuance(this.address);
    return parseFloat(formatEther(a));
  }
  async getTotalBalance() {
    return parseFloat(await this.sdk.data.getTotalBalanceV2(this.address, true));
  }
  async getGasTokenBalance() {
    var _a;
    return await ((_a = this.sdk.contractRunner.provider) == null ? void 0 : _a.getBalance(this.address)) ?? 0n;
  }
  async getTransactionHistory(pageSize) {
    const query = this.sdk.data.getTransactionHistory(this.address, pageSize);
    await query.queryNextPage();
    return query;
  }
  async getTrustRelations() {
    return this.sdk.data.getAggregatedTrustRelations(this.address);
  }
  async personalMint() {
    this.throwIfV2IsNotAvailable();
    const tx = await this.sdk.v2Hub.personalMint();
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("Personal mint failed");
    }
    return receipt;
  }
  async stop() {
    this.throwIfV2IsNotAvailable();
    const tx = await this.sdk.v2Hub.stop();
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("Stop failed");
    }
    return receipt;
  }
  async transitiveTransfer(to, amount) {
    var _a;
    this.throwIfV2IsNotAvailable();
    const pathfinder = new Pathfinder$1(this.sdk.circlesConfig.v2PathfinderUrl);
    const flowMatrix = await pathfinder.getArgsForPath(this.address, to, amount.toString());
    const result = await ((_a = this.sdk.v2Hub) == null ? void 0 : _a.operateFlowMatrix(flowMatrix.flowVertices, flowMatrix.flowEdges, flowMatrix.streams, flowMatrix.packedCoordinates));
    const receipt = await (result == null ? void 0 : result.wait());
    if (!receipt) {
      throw new Error("Transfer failed");
    }
    return receipt;
  }
  async directTransfer(to, amount, tokenAddress) {
    var _a;
    const tokenInf = await this.sdk.data.getTokenInfo(tokenAddress);
    console.log(`Direct transfer - of: ${amount} - tokenId: ${tokenInf == null ? void 0 : tokenInf.tokenId} - to: ${to}`);
    if (!tokenInf) {
      throw new Error("Token not found");
    }
    const numericTokenId = addressToUInt256(tokenInf.tokenId);
    console.log(`numericTokenId: ${numericTokenId}`);
    const tx = await ((_a = this.sdk.v2Hub) == null ? void 0 : _a.safeTransferFrom(this.address, to, numericTokenId, amount, new Uint8Array(0)));
    const receipt = await (tx == null ? void 0 : tx.wait());
    if (!receipt) {
      throw new Error("Transfer failed");
    }
    return receipt;
  }
  async transfer(to, amount, tokenAddress) {
    if (!tokenAddress) {
      const approvalStatus = await this.sdk.v2Hub.isApprovedForAll(this.address, this.address);
      if (!approvalStatus) {
        const tx = await this.sdk.v2Hub.setApprovalForAll(this.address, true);
        const receipt = await tx.wait();
        if (!receipt) {
          throw new Error("Approval failed");
        }
      }
      console.log(`Approval by ${this.address} for ${this.address} successful`);
      return this.transitiveTransfer(to, amount);
    } else {
      return this.directTransfer(to, amount, tokenAddress);
    }
  }
  async trust(avatar) {
    this.throwIfV2IsNotAvailable();
    const tx = await this.sdk.v2Hub.trust(avatar, BigInt("79228162514264337593543950335"));
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("Trust failed");
    }
    return receipt;
  }
  async untrust(avatar) {
    this.throwIfV2IsNotAvailable();
    const tx = await this.sdk.v2Hub.trust(avatar, BigInt("0"));
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("Untrust failed");
    }
    return receipt;
  }
  async groupMint(group, collateral, amounts, data) {
    this.throwIfV2IsNotAvailable();
    const tx = await this.sdk.v2Hub.groupMint(group, collateral, amounts, data);
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("Group mint failed");
    }
    return receipt;
  }
  async getProfile() {
    var _a, _b, _c;
    const profileCid = (_a = this.avatarInfo) == null ? void 0 : _a.cidV0;
    if (this._cachedProfile && this._cachedProfileCid === profileCid) {
      return this._cachedProfile;
    }
    if (profileCid) {
      try {
        const profileData = await ((_c = (_b = this.sdk) == null ? void 0 : _b.profiles) == null ? void 0 : _c.get(profileCid));
        if (profileData) {
          this._cachedProfile = profileData;
          this._cachedProfileCid = profileCid;
          return this._cachedProfile;
        }
      } catch (e) {
        console.warn(`Couldn't load profile for CID ${profileCid}`, e);
      }
    }
    return void 0;
  }
  async updateProfile(profile) {
    var _a, _b;
    const result = await ((_b = (_a = this.sdk) == null ? void 0 : _a.profiles) == null ? void 0 : _b.create(profile));
    if (!result) {
      throw new Error("Failed to update profile. The profile service did not return a CID.");
    }
    const updateCidResult = await this.updateMetadata(result);
    if (!updateCidResult) {
      throw new Error("Failed to update profile. The CID was not updated.");
    }
    this.avatarInfo.cidV0 = result;
    return result;
  }
  async wrapDemurrageErc20(amount) {
    var _a;
    await ((_a = this.sdk.v2Hub) == null ? void 0 : _a.wrap(this.avatarInfo.avatar, amount, 0n));
    throw new Error("Not implemented");
  }
  async wrapInflationErc20(amount) {
    var _a;
    (_a = this.sdk.v2Hub) == null ? void 0 : _a.wrap(this.avatarInfo.avatar, amount, 1n);
    throw new Error("Not implemented");
  }
  /**
   * Invite a user to Circles.
   * @param avatar The address of the avatar to invite. Can be either a v1 address or an address that's not signed up yet.
   */
  async inviteHuman(avatar) {
    this.throwIfV2IsNotAvailable();
    const avatarInfo = await this.sdk.data.getAvatarInfo(avatar);
    if ((avatarInfo == null ? void 0 : avatarInfo.version) == 2) {
      throw new Error("Avatar is already a v2 avatar");
    }
    const receipt = await this.trust(avatar);
    if (!receipt) {
      throw new Error("Invite failed");
    }
    return receipt;
  }
  throwIfV2IsNotAvailable() {
    if (!this.sdk.circlesConfig.v2HubAddress) {
      throw new Error("V2 is not available");
    }
  }
  throwIfNameRegistryIsNotAvailable() {
    if (!this.sdk.nameRegistry) {
      throw new Error("Name registry is not available");
    }
  }
};
var Avatar = class {
  /**
   * After initialization, this property contains the avatar's basic information.
   */
  get avatarInfo() {
    return this._avatarInfo;
  }
  /**
   * Creates a new Avatar instance that controls a Circles avatar at the given address.
   * @param sdk The SDK instance to use.
   * @param avatarAddress The address of the avatar to control.
   */
  constructor(sdk, avatarAddress) {
    this._tokenEventSubscription = void 0;
    this.initialize = async () => {
      var _a;
      if (this._tokenEventSubscription) {
        this._tokenEventSubscription();
      }
      this._avatarInfo = await this._sdk.data.getAvatarInfo(this.address);
      if (!this._avatarInfo) {
        throw new Error("Avatar is not signed up at Circles");
      }
      const { version, hasV1 } = this._avatarInfo;
      const v1Person = () => new V1Avatar(this._sdk, this._avatarInfo);
      const v2Person = () => new V2Avatar(this._sdk, this._avatarInfo);
      switch (version) {
        case 1:
          this._avatar = v1Person();
          break;
        case 2:
          if (!hasV1) {
            this._avatar = v2Person();
          } else {
            const v1Avatar = v1Person();
            const isStopped = await ((_a = v1Avatar.v1Token) == null ? void 0 : _a.stopped());
            this._avatar = isStopped ? v2Person() : v1Person();
            const avatarInfo = this._avatar.avatarInfo;
            if (avatarInfo) {
              avatarInfo.v1Stopped = isStopped;
            }
          }
          break;
        default:
          throw new Error("Unsupported avatar");
      }
      this._events = await this._sdk.data.subscribeToEvents(this._avatarInfo.avatar);
    };
    this.getMintableAmount = () => this.onlyIfInitialized(() => this._avatar.getMintableAmount());
    this.personalMint = () => this.onlyIfInitialized(() => this._avatar.personalMint());
    this.stop = () => this.onlyIfInitialized(() => this._avatar.stop());
    this.getMaxTransferableAmount = (to, tokenId) => this.onlyIfInitialized(() => this._avatar.getMaxTransferableAmount(to, tokenId));
    this.trust = (avatar) => this.onlyIfInitialized(() => this._avatar.trust(avatar));
    this.untrust = (avatar) => this.onlyIfInitialized(() => this._avatar.untrust(avatar));
    this.getTrustRelations = () => this.onlyIfInitialized(() => this._avatar.getTrustRelations());
    this.getTransactionHistory = (pageSize) => this.onlyIfInitialized(() => this._avatar.getTransactionHistory(pageSize));
    this.getTotalBalance = () => this.onlyIfInitialized(() => this._avatar.getTotalBalance());
    this.getGasTokenBalance = () => this.onlyIfInitialized(() => this._avatar.getGasTokenBalance());
    this.groupMint = (group, collateral, amounts, data) => this.onlyIfV2((avatar) => avatar.groupMint(group, collateral, amounts, data));
    this.wrapDemurrageErc20 = (amount) => this.onlyIfV2((avatar) => avatar.wrapDemurrageErc20(amount));
    this.wrapInflationErc20 = (amount) => this.onlyIfV2((avatar) => avatar.wrapInflationErc20(amount));
    this.inviteHuman = (avatar) => this.onlyIfV2((_avatar) => _avatar.inviteHuman(avatar));
    this.updateMetadata = (cid) => this.onlyIfV2((_avatar) => _avatar.updateMetadata(cid));
    this.getProfile = () => this.onlyIfV2((_avatar) => _avatar.getProfile());
    this.updateProfile = (profile) => this.onlyIfV2((_avatar) => _avatar.updateProfile(profile));
    this.address = avatarAddress.toLowerCase();
    this._sdk = sdk;
  }
  /**
   * The events observable for this avatar.
   */
  get events() {
    if (!this._events) {
      throw new Error("Not initialized");
    }
    return this._events;
  }
  onlyIfInitialized(func) {
    if (!this._avatar) {
      throw new Error("Avatar is not initialized");
    }
    return func();
  }
  onlyIfV2(func) {
    var _a;
    if (!this._avatar || ((_a = this._avatarInfo) == null ? void 0 : _a.version) !== 2) {
      throw new Error("Avatar is not initialized or is not a v2 avatar");
    }
    return func(this._avatar);
  }
  transfer(to, amount, token) {
    var _a;
    if (typeof amount === "number") {
      const sendValue = ((_a = this == null ? void 0 : this.avatarInfo) == null ? void 0 : _a.version) === 1 ? tcToCrc(/* @__PURE__ */ new Date(), amount) : parseEther(amount.toString());
      return this.onlyIfInitialized(() => this._avatar.transfer(to, sendValue, token));
    }
    return this.onlyIfInitialized(() => this._avatar.transfer(to, amount, token));
  }
};
var Pathfinder2 = class {
  constructor(pathfinderURL) {
    this.pathfinderURL = pathfinderURL;
  }
  async getTransferPath(from, to, value) {
    const query = {
      method: "compute_transfer",
      params: { from, to, value: value.toString() }
    };
    const response = await fetch(this.pathfinderURL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(query)
    });
    if (!response.ok) {
      throw new Error(`Error calling API: ${response.status}`);
    }
    const parsed = await response.json();
    if (!parsed.result) {
      throw new Error(`The pathfinder response didn't carry a result: ${JSON.stringify(parsed)}`);
    }
    return {
      requestedAmount: value,
      maxFlow: BigInt(parsed.result.maxFlowValue),
      transferSteps: parsed.result.transferSteps,
      isValid: parsed.result.final
    };
  }
};
var Sdk = class {
  /**
   * Creates a new SDK instance.
   * @param circlesConfig The chain specific Circles configuration.
   * @param contractRunner A contract runner instance and its address.
   */
  constructor(circlesConfig, contractRunner) {
    this.getAvatar = async (avatarAddress) => {
      const avatar = new Avatar(this, avatarAddress);
      await avatar.initialize();
      return avatar;
    };
    this.registerHuman = async () => {
      const receipt = await this.v1Hub.signup();
      await receipt.wait();
      await this.waitForAvatarInfo(this.contractRunner.address);
      return this.getAvatar(this.contractRunner.address);
    };
    this.registerOrganization = async () => {
      const receipt = await this.v1Hub.organizationSignup();
      await receipt.wait();
      await this.waitForAvatarInfo(this.contractRunner.address);
      return this.getAvatar(this.contractRunner.address);
    };
    this.registerOrganizationV2 = async (profile) => {
      if (!this.v2Hub) {
        throw new Error("V2 hub not available");
      }
      const metadataDigest = await this.createProfileIfNecessary(profile);
      const receipt = await this.v2Hub.registerOrganization(profile.name, metadataDigest);
      await receipt.wait();
      await this.waitForAvatarInfo(this.contractRunner.address);
      return this.getAvatar(this.contractRunner.address);
    };
    this.registerGroupV2 = async (mint, profile) => {
      if (!this.v2Hub) {
        throw new Error("V2 hub not available");
      }
      const metadataDigest = await this.createProfileIfNecessary(profile);
      const receipt = await this.v2Hub.registerGroup(mint, profile.name, profile.symbol, metadataDigest);
      await receipt.wait();
      await this.waitForAvatarInfo(this.contractRunner.address);
      return this.getAvatar(this.contractRunner.address);
    };
    this.waitForAvatarInfo = async (address) => {
      let avatarRow;
      let retries = 0;
      do {
        avatarRow = await this.data.getAvatarInfo(address);
        await new Promise((resolve) => setTimeout(resolve, 500));
        retries++;
        if (retries > 120) {
          throw new Error(`Timeout getting avatar info for ${address}`);
        }
      } while (!avatarRow);
      return avatarRow;
    };
    this.migrateAvatar = async (avatar, profile) => {
      var _a, _b;
      if (!this.v2Hub) {
        throw new Error("V2 hub not available");
      }
      const avatarInfo = await this.data.getAvatarInfo(avatar);
      if (!avatarInfo) {
        throw new Error("Avatar not found");
      }
      if (avatarInfo.hasV1) {
        if (avatarInfo.v1Token) {
          const v1Avatar = new V1Avatar(this, avatarInfo);
          const isStopped = await ((_a = v1Avatar.v1Token) == null ? void 0 : _a.stopped());
          if (!isStopped) {
            await v1Avatar.personalMint();
            const stopTx = await ((_b = v1Avatar.v1Token) == null ? void 0 : _b.stop());
            const stopTxReceipt = await (stopTx == null ? void 0 : stopTx.wait());
            if (!stopTxReceipt) {
              throw new Error("Failed to stop V1 avatar");
            }
          }
        }
        if (avatarInfo.version === 1) {
          await this.registerHumanV2(profile);
        }
        const calculateIssuanceTx = await this.v2Hub.calculateIssuanceWithCheck(avatar);
        await calculateIssuanceTx.wait();
        await this.migrateAllV1Tokens(avatar);
      } else {
        throw new Error("Avatar is not a V1 avatar");
      }
    };
    this.migrateAllV1Tokens = async (avatar) => {
      if (!this.circlesConfig.migrationAddress) {
        throw new Error("Migration address not set");
      }
      const balances = await this.data.getTokenBalances(avatar, false);
      const tokensToMigrate = balances.filter((o) => BigInt(o.balance) > 0);
      await Promise.all(tokensToMigrate.map(async (t, i) => {
        const balance = BigInt(t.balance);
        const token = Token__factory.connect(t.token, this.contractRunner);
        const allowance = await token.allowance(avatar, this.circlesConfig.migrationAddress);
        if (allowance < balance) {
          const increase = balance - allowance;
          const tx = await token.increaseAllowance(this.circlesConfig.migrationAddress, increase);
          await tx.wait();
        }
      }));
      const migrationContract = Migration__factory.connect(this.circlesConfig.migrationAddress, this.contractRunner);
      const migrateTx = await migrationContract.migrate(tokensToMigrate.map((o) => o.tokenOwner), tokensToMigrate.map((o) => BigInt(o.balance)));
      await migrateTx.wait();
    };
    this.circlesConfig = circlesConfig;
    this.contractRunner = contractRunner;
    if (!this.contractRunner.address) {
      throw new Error("Contract runner is not initialized");
    }
    this.circlesRpc = new CirclesRpc(circlesConfig.circlesRpcUrl);
    this.data = new CirclesData(this.circlesRpc);
    this.v1Hub = Hub__factory.connect(circlesConfig.v1HubAddress ?? "0x29b9a7fBb8995b2423a71cC17cf9810798F6C543", this.contractRunner);
    if (circlesConfig.v2HubAddress) {
      this.v2Hub = Hub__factory2.connect(circlesConfig.v2HubAddress, this.contractRunner);
    }
    if (circlesConfig.pathfinderUrl) {
      this.v1Pathfinder = new Pathfinder2(circlesConfig.pathfinderUrl);
    }
    if (circlesConfig.v2PathfinderUrl) {
      this.v2Pathfinder = new Pathfinder2(circlesConfig.v2PathfinderUrl);
    }
    if (circlesConfig.nameRegistryAddress) {
      this.nameRegistry = NameRegistry__factory.connect(circlesConfig.nameRegistryAddress, this.contractRunner);
    }
    if (circlesConfig.profileServiceUrl) {
      this.profiles = new Profiles(circlesConfig.profileServiceUrl);
    }
  }
  /**
   * Registers the connected wallet as a human avatar in Circles v2.
   * @param profile The profile data of the avatar.
   */
  async registerHumanV2(profile) {
    return this._registerHuman(ZeroAddress, profile);
  }
  async acceptInvitation(inviter, profile) {
    return this._registerHuman(inviter, profile);
  }
  async _registerHuman(inviter, profile) {
    if (!this.v2Hub) {
      throw new Error("V2 hub not available");
    }
    let metadataDigest = await this.createProfileIfNecessary(profile);
    const tx = await this.v2Hub.registerHuman(inviter, metadataDigest);
    const receipt = await tx.wait();
    if (!receipt) {
      throw new Error("Transaction failed");
    }
    await this.waitForAvatarInfo(this.contractRunner.address);
    return this.getAvatar(this.contractRunner.address);
  }
  /**
   * Checks if the profile argument is a string or a Profile object and creates the profile if necessary.
   * If the profile is a string, it must be a CIDv0 string (Qm...).
   * @param profile The profile data or CIDv0 of the avatar.
   * @private
   */
  async createProfileIfNecessary(profile) {
    var _a;
    if (typeof profile === "string") {
      if (!profile.startsWith("Qm")) {
        throw new Error("Invalid profile CID. Must be a CIDv0 string (Qm...).");
      }
      return cidV0ToUint8Array(profile);
    } else if (this.profiles) {
      const profileCid = await ((_a = this.profiles) == null ? void 0 : _a.create(profile));
      return cidV0ToUint8Array(profileCid);
    } else {
      throw new Error("Profiles service is not configured");
    }
  }
};
var errorAbis = [
  "error CirclesHubOnlyDuringBootstrap(uint8 code)",
  "error CirclesHubRegisterAvatarV1MustBeStopped(address avatar, uint8 code)",
  "error CirclesHubAvatarAlreadyRegistered(address avatar, uint8 code)",
  "error CirclesHubMustBeHuman(address avatar, uint8 code)",
  "error CirclesHubGroupIsNotRegistered(address group, uint8 code)",
  "error CirclesHubInvalidTrustReceiver(address trustReceiver, uint8 code)",
  "error CirclesHubGroupMintPolicyRejectedMint(address minter, address group, uint256[] collateral, uint256[] amounts, bytes data, uint8 code)",
  "error CirclesHubGroupMintPolicyRejectedBurn(address burner, address group, uint256 amount, bytes data, uint8 code)",
  "error CirclesHubOperatorNotApprovedForSource(address operator, address source, uint16 streamId, uint8 code)",
  "error CirclesHubFlowEdgeIsNotPermitted(address receiver, uint256 circlesId, uint8 code)",
  "error CirclesHubOnClosedPathOnlyPersonalCirclesCanReturnToAvatar(address failedReceiver, uint256 circlesId)",
  "error CirclesHubFlowVerticesMustBeSorted()",
  "error CirclesHubFlowEdgeStreamMismatch(uint16 flowEdgeId, uint16 streamId, uint8 code)",
  "error CirclesHubStreamMismatch(uint16 streamId, uint8 code)",
  "error CirclesHubNettedFlowMismatch(uint16 vertexPosition, int256 matrixNettedFlow, int256 streamNettedFlow)",
  "error CirclesERC1155MintBlocked(address human, address mintV1Status)",
  "error CirclesDemurrageAmountExceedsMaxUint190(address account, uint256 circlesId, uint256 amount, uint8 code)",
  "error CirclesDemurrageDayBeforeLastUpdatedDay(address account, uint256 circlesId, uint64 day, uint64 lastUpdatedDay, uint8 code)",
  "error CirclesERC1155CannotReceiveBatch(uint8 code)",
  "error CirclesAvatarMustBeRegistered(address avatar, uint8 code)",
  "error CirclesAddressCannotBeZero(uint8 code)",
  "error CirclesInvalidFunctionCaller(address caller, address expectedCaller, uint8 code)",
  "error CirclesInvalidCirclesId(uint256 id, uint8 code)",
  "error CirclesInvalidString(string str, uint8 code)",
  "error CirclesInvalidParameter(uint256 parameter, uint8 code)",
  "error CirclesAmountOverflow(uint256 amount, uint8 code)",
  "error CirclesArraysLengthMismatch(uint256 lengthArray1, uint256 lengthArray2, uint8 code)",
  "error CirclesArrayMustNotBeEmpty(uint8 code)",
  "error CirclesAmountMustNotBeZero(uint8 code)",
  "error CirclesProxyAlreadyInitialized()",
  "error CirclesLogicAssertion(uint8 code)",
  "error CirclesIdMustBeDerivedFromAddress(uint256 providedId, uint8 code)",
  "error CirclesReentrancyGuard(uint8 code)",
  "error CirclesStandardTreasuryGroupHasNoVault(address group)",
  "error CirclesStandardTreasuryRedemptionCollateralMismatch(uint256 circlesId, uint256[] redemptionIds, uint256[] redemptionValues, uint256[] burnIds, uint256[] burnValues)",
  "error CirclesStandardTreasuryInvalidMetadataType(bytes32 metadataType, uint8 code)",
  "error CirclesStandardTreasuryInvalidMetadata(bytes metadata, uint8 code)",
  "error CirclesNamesInvalidName(address avatar, string name, uint8 code)",
  "error CirclesNamesShortNameAlreadyAssigned(address avatar, uint72 shortName, uint8 code)",
  "error CirclesNamesShortNameWithNonceTaken(address avatar, uint256 nonce, uint72 shortName, address takenByAvatar)",
  "error CirclesNamesAvatarAlreadyHasCustomNameOrSymbol(address avatar, string nameOrSymbol, uint8 code)",
  "error CirclesNamesOrganizationHasNoSymbol(address organization, uint8 code)"
];
var iface = new ethers_exports.Interface(errorAbis);
function parseError(errorData) {
  return iface.parseError(errorData);
}
export {
  Avatar,
  Observable,
  Pathfinder2 as Pathfinder,
  Sdk,
  V1Avatar,
  parseError
};
//# sourceMappingURL=@circles-sdk_sdk.js.map
