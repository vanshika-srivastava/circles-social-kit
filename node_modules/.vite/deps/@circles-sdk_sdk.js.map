{
  "version": 3,
  "sources": ["../../@multiformats/base-x/src/index.js", "../../multibase/src/util.js", "../../multibase/src/base.js", "../../multibase/src/rfc4648.js", "../../multibase/src/constants.js", "../../multibase/src/index.js", "../../varint/encode.js", "../../varint/decode.js", "../../varint/length.js", "../../varint/index.js", "../../multihashes/src/constants.js", "../../multihashes/src/index.js", "../../@circles-sdk/abi-v1/src/hub/factories/Hub__factory.ts", "../../@circles-sdk/abi-v1/src/token/factories/Token__factory.ts", "../../bignumber.js/bignumber.mjs", "../../@circles-sdk/utils/src/index.ts", "../../@circles-sdk/data/src/pagedQuery/circlesQuery.ts", "../../@circles-sdk/data/src/observable.ts", "../../@circles-sdk/data/src/events/parser.ts", "../../@circles-sdk/data/src/circlesData.ts", "../../@circles-sdk/data/src/circlesRpc.ts", "../../@circles-sdk/abi-v2/src/hub/factories/Hub__factory.ts", "../../@circles-sdk/abi-v2/src/migration/factories/Migration__factory.ts", "../../@circles-sdk/abi-v2/src/nameRegistry/factories/NameRegistry__factory.ts", "../../@circles-sdk/profiles/src/index.ts", "../../@circles-sdk/sdk/src/v1/v1Avatar.ts", "../../@circles-sdk/sdk/src/v2/pathfinderV2.ts", "../../@circles-sdk/sdk/src/v2/v2Avatar.ts", "../../@circles-sdk/sdk/src/avatar.ts", "../../@circles-sdk/sdk/src/v1/pathfinder.ts", "../../@circles-sdk/sdk/src/sdk.ts", "../../@circles-sdk/sdk/src/errors.ts"],
  "sourcesContent": ["'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n", "'use strict'\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n", "'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n", "'use strict'\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n\nmodule.exports = { rfc4648 }\n", "'use strict'\n\nconst baseX = require('@multiformats/base-x')\nconst Base = require('./base.js')\nconst { rfc4648 } = require('./rfc4648')\nconst { decodeText, encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import('./types').Codec} Codec */\n/** @typedef {import('./types').BaseName} BaseName */\n/** @typedef {import('./types').BaseCode} BaseCode */\n\n/** @type {CodecFactory} */\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\n/** @type {Record<BaseName,Base>} */\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, /** @type {Record<BaseName,Base>} */({}))\n\n/** @type {Record<BaseCode,Base>} */\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, /** @type {Record<BaseCode,Base>} */({}))\n\nmodule.exports = {\n  names,\n  codes\n}\n", "/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n'use strict'\n\nconst constants = require('./constants')\nconst { encodeText, decodeText, concat } = require('./util')\n\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  return concat([codeBuf, buf], codeBuf.length + buf.length)\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n  const data = encodeText(enc.encode(buf))\n\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length)\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(/** @type {BaseCode} */(data[0]))\n  return enc.decode(data.substring(1))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(/** @type {BaseCode} */(data[0]))\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */(nameOrCode))) {\n    return constants.names[/** @type {BaseName} */(nameOrCode)]\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */(nameOrCode))) {\n    return constants.codes[/** @type {BaseCode} */(nameOrCode)]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(/** @type {BaseCode} */(data[0]))\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nconst names = Object.freeze(constants.names)\nconst codes = Object.freeze(constants.codes)\nexports.names = names\nexports.codes = codes\n", "module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n", "module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n", "\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n", "module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n", "/* eslint quote-props: off */\n'use strict'\n\n/**\n * Names for all available hashes\n *\n * @typedef { \"identity\" | \"sha1\" | \"sha2-256\" | \"sha2-512\" | \"sha3-512\" | \"sha3-384\" | \"sha3-256\" | \"sha3-224\" | \"shake-128\" | \"shake-256\" | \"keccak-224\" | \"keccak-256\" | \"keccak-384\" | \"keccak-512\" | \"blake3\" | \"murmur3-128\" | \"murmur3-32\" | \"dbl-sha2-256\" | \"md4\" | \"md5\" | \"bmt\" | \"sha2-256-trunc254-padded\" | \"ripemd-128\" | \"ripemd-160\" | \"ripemd-256\" | \"ripemd-320\" | \"x11\" | \"kangarootwelve\" | \"sm3-256\" | \"blake2b-8\" | \"blake2b-16\" | \"blake2b-24\" | \"blake2b-32\" | \"blake2b-40\" | \"blake2b-48\" | \"blake2b-56\" | \"blake2b-64\" | \"blake2b-72\" | \"blake2b-80\" | \"blake2b-88\" | \"blake2b-96\" | \"blake2b-104\" | \"blake2b-112\" | \"blake2b-120\" | \"blake2b-128\" | \"blake2b-136\" | \"blake2b-144\" | \"blake2b-152\" | \"blake2b-160\" | \"blake2b-168\" | \"blake2b-176\" | \"blake2b-184\" | \"blake2b-192\" | \"blake2b-200\" | \"blake2b-208\" | \"blake2b-216\" | \"blake2b-224\" | \"blake2b-232\" | \"blake2b-240\" | \"blake2b-248\" | \"blake2b-256\" | \"blake2b-264\" | \"blake2b-272\" | \"blake2b-280\" | \"blake2b-288\" | \"blake2b-296\" | \"blake2b-304\" | \"blake2b-312\" | \"blake2b-320\" | \"blake2b-328\" | \"blake2b-336\" | \"blake2b-344\" | \"blake2b-352\" | \"blake2b-360\" | \"blake2b-368\" | \"blake2b-376\" | \"blake2b-384\" | \"blake2b-392\" | \"blake2b-400\" | \"blake2b-408\" | \"blake2b-416\" | \"blake2b-424\" | \"blake2b-432\" | \"blake2b-440\" | \"blake2b-448\" | \"blake2b-456\" | \"blake2b-464\" | \"blake2b-472\" | \"blake2b-480\" | \"blake2b-488\" | \"blake2b-496\" | \"blake2b-504\" | \"blake2b-512\" | \"blake2s-8\" | \"blake2s-16\" | \"blake2s-24\" | \"blake2s-32\" | \"blake2s-40\" | \"blake2s-48\" | \"blake2s-56\" | \"blake2s-64\" | \"blake2s-72\" | \"blake2s-80\" | \"blake2s-88\" | \"blake2s-96\" | \"blake2s-104\" | \"blake2s-112\" | \"blake2s-120\" | \"blake2s-128\" | \"blake2s-136\" | \"blake2s-144\" | \"blake2s-152\" | \"blake2s-160\" | \"blake2s-168\" | \"blake2s-176\" | \"blake2s-184\" | \"blake2s-192\" | \"blake2s-200\" | \"blake2s-208\" | \"blake2s-216\" | \"blake2s-224\" | \"blake2s-232\" | \"blake2s-240\" | \"blake2s-248\" | \"blake2s-256\" | \"skein256-8\" | \"skein256-16\" | \"skein256-24\" | \"skein256-32\" | \"skein256-40\" | \"skein256-48\" | \"skein256-56\" | \"skein256-64\" | \"skein256-72\" | \"skein256-80\" | \"skein256-88\" | \"skein256-96\" | \"skein256-104\" | \"skein256-112\" | \"skein256-120\" | \"skein256-128\" | \"skein256-136\" | \"skein256-144\" | \"skein256-152\" | \"skein256-160\" | \"skein256-168\" | \"skein256-176\" | \"skein256-184\" | \"skein256-192\" | \"skein256-200\" | \"skein256-208\" | \"skein256-216\" | \"skein256-224\" | \"skein256-232\" | \"skein256-240\" | \"skein256-248\" | \"skein256-256\" | \"skein512-8\" | \"skein512-16\" | \"skein512-24\" | \"skein512-32\" | \"skein512-40\" | \"skein512-48\" | \"skein512-56\" | \"skein512-64\" | \"skein512-72\" | \"skein512-80\" | \"skein512-88\" | \"skein512-96\" | \"skein512-104\" | \"skein512-112\" | \"skein512-120\" | \"skein512-128\" | \"skein512-136\" | \"skein512-144\" | \"skein512-152\" | \"skein512-160\" | \"skein512-168\" | \"skein512-176\" | \"skein512-184\" | \"skein512-192\" | \"skein512-200\" | \"skein512-208\" | \"skein512-216\" | \"skein512-224\" | \"skein512-232\" | \"skein512-240\" | \"skein512-248\" | \"skein512-256\" | \"skein512-264\" | \"skein512-272\" | \"skein512-280\" | \"skein512-288\" | \"skein512-296\" | \"skein512-304\" | \"skein512-312\" | \"skein512-320\" | \"skein512-328\" | \"skein512-336\" | \"skein512-344\" | \"skein512-352\" | \"skein512-360\" | \"skein512-368\" | \"skein512-376\" | \"skein512-384\" | \"skein512-392\" | \"skein512-400\" | \"skein512-408\" | \"skein512-416\" | \"skein512-424\" | \"skein512-432\" | \"skein512-440\" | \"skein512-448\" | \"skein512-456\" | \"skein512-464\" | \"skein512-472\" | \"skein512-480\" | \"skein512-488\" | \"skein512-496\" | \"skein512-504\" | \"skein512-512\" | \"skein1024-8\" | \"skein1024-16\" | \"skein1024-24\" | \"skein1024-32\" | \"skein1024-40\" | \"skein1024-48\" | \"skein1024-56\" | \"skein1024-64\" | \"skein1024-72\" | \"skein1024-80\" | \"skein1024-88\" | \"skein1024-96\" | \"skein1024-104\" | \"skein1024-112\" | \"skein1024-120\" | \"skein1024-128\" | \"skein1024-136\" | \"skein1024-144\" | \"skein1024-152\" | \"skein1024-160\" | \"skein1024-168\" | \"skein1024-176\" | \"skein1024-184\" | \"skein1024-192\" | \"skein1024-200\" | \"skein1024-208\" | \"skein1024-216\" | \"skein1024-224\" | \"skein1024-232\" | \"skein1024-240\" | \"skein1024-248\" | \"skein1024-256\" | \"skein1024-264\" | \"skein1024-272\" | \"skein1024-280\" | \"skein1024-288\" | \"skein1024-296\" | \"skein1024-304\" | \"skein1024-312\" | \"skein1024-320\" | \"skein1024-328\" | \"skein1024-336\" | \"skein1024-344\" | \"skein1024-352\" | \"skein1024-360\" | \"skein1024-368\" | \"skein1024-376\" | \"skein1024-384\" | \"skein1024-392\" | \"skein1024-400\" | \"skein1024-408\" | \"skein1024-416\" | \"skein1024-424\" | \"skein1024-432\" | \"skein1024-440\" | \"skein1024-448\" | \"skein1024-456\" | \"skein1024-464\" | \"skein1024-472\" | \"skein1024-480\" | \"skein1024-488\" | \"skein1024-496\" | \"skein1024-504\" | \"skein1024-512\" | \"skein1024-520\" | \"skein1024-528\" | \"skein1024-536\" | \"skein1024-544\" | \"skein1024-552\" | \"skein1024-560\" | \"skein1024-568\" | \"skein1024-576\" | \"skein1024-584\" | \"skein1024-592\" | \"skein1024-600\" | \"skein1024-608\" | \"skein1024-616\" | \"skein1024-624\" | \"skein1024-632\" | \"skein1024-640\" | \"skein1024-648\" | \"skein1024-656\" | \"skein1024-664\" | \"skein1024-672\" | \"skein1024-680\" | \"skein1024-688\" | \"skein1024-696\" | \"skein1024-704\" | \"skein1024-712\" | \"skein1024-720\" | \"skein1024-728\" | \"skein1024-736\" | \"skein1024-744\" | \"skein1024-752\" | \"skein1024-760\" | \"skein1024-768\" | \"skein1024-776\" | \"skein1024-784\" | \"skein1024-792\" | \"skein1024-800\" | \"skein1024-808\" | \"skein1024-816\" | \"skein1024-824\" | \"skein1024-832\" | \"skein1024-840\" | \"skein1024-848\" | \"skein1024-856\" | \"skein1024-864\" | \"skein1024-872\" | \"skein1024-880\" | \"skein1024-888\" | \"skein1024-896\" | \"skein1024-904\" | \"skein1024-912\" | \"skein1024-920\" | \"skein1024-928\" | \"skein1024-936\" | \"skein1024-944\" | \"skein1024-952\" | \"skein1024-960\" | \"skein1024-968\" | \"skein1024-976\" | \"skein1024-984\" | \"skein1024-992\" | \"skein1024-1000\" | \"skein1024-1008\" | \"skein1024-1016\" | \"skein1024-1024\" | \"poseidon-bls12_381-a2-fc1\" | \"poseidon-bls12_381-a2-fc1-sc\" } HashName\n */\n/**\n * Codes for all available hashes\n *\n * @typedef { 0x00 | 0x11 | 0x12 | 0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1a | 0x1b | 0x1c | 0x1d | 0x1e | 0x22 | 0x23 | 0x56 | 0xd4 | 0xd5 | 0xd6 | 0x1012 | 0x1052 | 0x1053 | 0x1054 | 0x1055 | 0x1100 | 0x1d01 | 0x534d | 0xb201 | 0xb202 | 0xb203 | 0xb204 | 0xb205 | 0xb206 | 0xb207 | 0xb208 | 0xb209 | 0xb20a | 0xb20b | 0xb20c | 0xb20d | 0xb20e | 0xb20f | 0xb210 | 0xb211 | 0xb212 | 0xb213 | 0xb214 | 0xb215 | 0xb216 | 0xb217 | 0xb218 | 0xb219 | 0xb21a | 0xb21b | 0xb21c | 0xb21d | 0xb21e | 0xb21f | 0xb220 | 0xb221 | 0xb222 | 0xb223 | 0xb224 | 0xb225 | 0xb226 | 0xb227 | 0xb228 | 0xb229 | 0xb22a | 0xb22b | 0xb22c | 0xb22d | 0xb22e | 0xb22f | 0xb230 | 0xb231 | 0xb232 | 0xb233 | 0xb234 | 0xb235 | 0xb236 | 0xb237 | 0xb238 | 0xb239 | 0xb23a | 0xb23b | 0xb23c | 0xb23d | 0xb23e | 0xb23f | 0xb240 | 0xb241 | 0xb242 | 0xb243 | 0xb244 | 0xb245 | 0xb246 | 0xb247 | 0xb248 | 0xb249 | 0xb24a | 0xb24b | 0xb24c | 0xb24d | 0xb24e | 0xb24f | 0xb250 | 0xb251 | 0xb252 | 0xb253 | 0xb254 | 0xb255 | 0xb256 | 0xb257 | 0xb258 | 0xb259 | 0xb25a | 0xb25b | 0xb25c | 0xb25d | 0xb25e | 0xb25f | 0xb260 | 0xb301 | 0xb302 | 0xb303 | 0xb304 | 0xb305 | 0xb306 | 0xb307 | 0xb308 | 0xb309 | 0xb30a | 0xb30b | 0xb30c | 0xb30d | 0xb30e | 0xb30f | 0xb310 | 0xb311 | 0xb312 | 0xb313 | 0xb314 | 0xb315 | 0xb316 | 0xb317 | 0xb318 | 0xb319 | 0xb31a | 0xb31b | 0xb31c | 0xb31d | 0xb31e | 0xb31f | 0xb320 | 0xb321 | 0xb322 | 0xb323 | 0xb324 | 0xb325 | 0xb326 | 0xb327 | 0xb328 | 0xb329 | 0xb32a | 0xb32b | 0xb32c | 0xb32d | 0xb32e | 0xb32f | 0xb330 | 0xb331 | 0xb332 | 0xb333 | 0xb334 | 0xb335 | 0xb336 | 0xb337 | 0xb338 | 0xb339 | 0xb33a | 0xb33b | 0xb33c | 0xb33d | 0xb33e | 0xb33f | 0xb340 | 0xb341 | 0xb342 | 0xb343 | 0xb344 | 0xb345 | 0xb346 | 0xb347 | 0xb348 | 0xb349 | 0xb34a | 0xb34b | 0xb34c | 0xb34d | 0xb34e | 0xb34f | 0xb350 | 0xb351 | 0xb352 | 0xb353 | 0xb354 | 0xb355 | 0xb356 | 0xb357 | 0xb358 | 0xb359 | 0xb35a | 0xb35b | 0xb35c | 0xb35d | 0xb35e | 0xb35f | 0xb360 | 0xb361 | 0xb362 | 0xb363 | 0xb364 | 0xb365 | 0xb366 | 0xb367 | 0xb368 | 0xb369 | 0xb36a | 0xb36b | 0xb36c | 0xb36d | 0xb36e | 0xb36f | 0xb370 | 0xb371 | 0xb372 | 0xb373 | 0xb374 | 0xb375 | 0xb376 | 0xb377 | 0xb378 | 0xb379 | 0xb37a | 0xb37b | 0xb37c | 0xb37d | 0xb37e | 0xb37f | 0xb380 | 0xb381 | 0xb382 | 0xb383 | 0xb384 | 0xb385 | 0xb386 | 0xb387 | 0xb388 | 0xb389 | 0xb38a | 0xb38b | 0xb38c | 0xb38d | 0xb38e | 0xb38f | 0xb390 | 0xb391 | 0xb392 | 0xb393 | 0xb394 | 0xb395 | 0xb396 | 0xb397 | 0xb398 | 0xb399 | 0xb39a | 0xb39b | 0xb39c | 0xb39d | 0xb39e | 0xb39f | 0xb3a0 | 0xb3a1 | 0xb3a2 | 0xb3a3 | 0xb3a4 | 0xb3a5 | 0xb3a6 | 0xb3a7 | 0xb3a8 | 0xb3a9 | 0xb3aa | 0xb3ab | 0xb3ac | 0xb3ad | 0xb3ae | 0xb3af | 0xb3b0 | 0xb3b1 | 0xb3b2 | 0xb3b3 | 0xb3b4 | 0xb3b5 | 0xb3b6 | 0xb3b7 | 0xb3b8 | 0xb3b9 | 0xb3ba | 0xb3bb | 0xb3bc | 0xb3bd | 0xb3be | 0xb3bf | 0xb3c0 | 0xb3c1 | 0xb3c2 | 0xb3c3 | 0xb3c4 | 0xb3c5 | 0xb3c6 | 0xb3c7 | 0xb3c8 | 0xb3c9 | 0xb3ca | 0xb3cb | 0xb3cc | 0xb3cd | 0xb3ce | 0xb3cf | 0xb3d0 | 0xb3d1 | 0xb3d2 | 0xb3d3 | 0xb3d4 | 0xb3d5 | 0xb3d6 | 0xb3d7 | 0xb3d8 | 0xb3d9 | 0xb3da | 0xb3db | 0xb3dc | 0xb3dd | 0xb3de | 0xb3df | 0xb3e0 | 0xb401 | 0xb402 } HashCode\n */\n\n/**\n * @type { Record<HashName,HashCode> }\n */\nconst names = Object.freeze({\n  'identity': 0x00,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'dbl-sha2-256': 0x56,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'kangarootwelve': 0x1d01,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402\n})\n\nmodule.exports = { names }\n", "/**\n * Multihash implementation in JavaScript.\n */\n'use strict'\n\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst { names } = require('./constants')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\nconst codes = /** @type {import('./types').CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const key in names) {\n  const name = /** @type {HashName} */(key)\n  codes[names[name]] = name\n}\nObject.freeze(codes)\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toHexString (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(hash, 'base16')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Uint8Array}\n */\nfunction fromHexString (hash) {\n  return uint8ArrayFromString(hash, 'base16')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nfunction toB58String (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return uint8ArrayToString(multibase.encode('base58btc', hash)).slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Uint8Array} hash\n * @returns {Uint8Array}\n */\nfunction fromB58String (hash) {\n  const encoded = hash instanceof Uint8Array\n    ? uint8ArrayToString(hash)\n    : hash\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Uint8Array} bytes\n * @returns {{code: HashCode, name: HashName, length: number, digest: Uint8Array}} result\n */\nfunction decode (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new Error('multihash must be a Uint8Array')\n  }\n\n  if (bytes.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = /** @type {HashCode} */(varint.decode(bytes))\n  if (!isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  const len = varint.decode(bytes)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  bytes = bytes.slice(varint.decode.bytes)\n\n  if (bytes.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${uint8ArrayToString(bytes, 'base16')}`)\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: bytes\n  }\n}\n\n/**\n * Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Uint8Array} digest\n * @param {HashName | HashCode} code\n * @param {number} [length]\n * @returns {Uint8Array}\n */\nfunction encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = coerceCode(code)\n\n  if (!(digest instanceof Uint8Array)) {\n    throw new Error('digest should be a Uint8Array')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  const hash = varint.encode(hashfn)\n  const len = varint.encode(length)\n  return uint8ArrayConcat([hash, len, digest], hash.length + len.length + digest.length)\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n *\n * @param {HashName | number} name\n * @returns {number}\n */\nfunction coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  // @ts-ignore\n  if (codes[code] === undefined && !isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks if a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nfunction isAppCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {HashCode} code\n * @returns {boolean}\n */\nfunction isValidCode (code) {\n  if (isAppCode(code)) {\n    return true\n  }\n\n  if (codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {void}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  decode(multihash) // throws if bad.\n}\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {Uint8Array}\n * @throws {Error}\n */\nfunction prefix (multihash) {\n  validate(multihash)\n\n  return multihash.subarray(0, 2)\n}\n\nmodule.exports = {\n  names,\n  codes,\n  toHexString,\n  fromHexString,\n  toB58String,\n  fromB58String,\n  decode,\n  encode,\n  coerceCode,\n  isAppCode,\n  validate,\n  prefix,\n  isValidCode\n}\n\n/**\n * @typedef { import(\"./constants\").HashCode } HashCode\n * @typedef { import(\"./constants\").HashName } HashName\n */\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type {\n  Signer,\n  BigNumberish,\n  ContractDeployTransaction,\n  ContractRunner,\n} from \"ethers\";\nimport type { NonPayableOverrides } from \"../common\";\nimport type { Hub, HubInterface } from \"../Hub\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_inflation\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_period\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_symbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"_name\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_signupBonus\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_initialIssuance\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_timeout\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"HubTransfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"organization\",\n        type: \"address\",\n      },\n    ],\n    name: \"OrganizationSignup\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"token\",\n        type: \"address\",\n      },\n    ],\n    name: \"Signup\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"canSendTo\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"limit\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Trust\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"deployedAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"divisor\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inflation\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"initialIssuance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"limits\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"organizations\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"period\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"seen\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"signupBonus\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"timeout\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"tokenToUser\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"userToToken\",\n    outputs: [\n      {\n        internalType: \"contract Token\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"validation\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"seen\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"sent\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"received\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"periods\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"issuance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_periods\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"issuanceByStep\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"_initial\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"_periods\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"inflate\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"signup\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"organizationSignup\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"limit\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"trust\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"base\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"exponent\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pow\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"tokenOwner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dest\",\n        type: \"address\",\n      },\n    ],\n    name: \"checkSendLimit\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address[]\",\n        name: \"tokenOwners\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"srcs\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"address[]\",\n        name: \"dests\",\n        type: \"address[]\",\n      },\n      {\n        internalType: \"uint256[]\",\n        name: \"wads\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"transferThrough\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x6101606040523480156200001257600080fd5b506040516200400a3803806200400a833981810160405260e08110156200003857600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006457600080fd5b9083019060208201858111156200007a57600080fd5b82516401000000008111828201881017156200009557600080fd5b82525081516020918201929091019080838360005b83811015620000c4578181015183820152602001620000aa565b50505050905090810190601f168015620000f25780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011657600080fd5b9083019060208201858111156200012c57600080fd5b82516401000000008111828201881017156200014757600080fd5b82525081516020918201929091019080838360005b83811015620001765781810151838201526020016200015c565b50505050905090810190601f168015620001a45780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060909201516080899052909350909150620001cf8762000221565b60a05260c08690528451620001ec90600090602088019062000537565b5083516200020290600190602087019062000537565b5060e0929092526101005242610120526101405250620005d392505050565b6000805b60096200024d62000238600a8462000271565b85620003a960201b620015691790919060201c565b11156200025d5760010162000225565b6200026a600a8262000271565b9392505050565b6000826200028257506000620003a3565b816200029157506001620003a3565b8160011415620002a3575081620003a3565b60015b60018311156200038557620002cb6002846200041260201b620015cf1790919060201c565b6200030f57620002ea84856200047b60201b620016331790919060201c565b935062000307600284620003a960201b620015691790919060201c565b92506200037f565b6200032981856200047b60201b620016331790919060201c565b90506200034584856200047b60201b620016331790919060201c565b93506200037c600262000368600186620004d960201b620016911790919060201c565b620003a960201b620015691790919060201c565b92505b620002a6565b6200039f81856200047b60201b620016331790919060201c565b9150505b92915050565b600080821162000400576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816200040a57fe5b049392505050565b600080821162000469576040805162461bcd60e51b815260206004820152601860248201527f536166654d6174683a206d6f64756c6f206279207a65726f0000000000000000604482015290519081900360640190fd5b8183816200047357fe5b069392505050565b6000826200048c57506000620003a3565b828202828482816200049a57fe5b04146200026a5760405162461bcd60e51b815260040180806020018281038252602181526020018062003fe96021913960400191505060405180910390fd5b60008282111562000531576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200057a57805160ff1916838001178555620005aa565b82800160010185558215620005aa579182015b82811115620005aa5782518255916020019190600101906200058d565b50620005b8929150620005bc565b5090565b5b80821115620005b85760008155600101620005bd565b60805160a05160c05160e0516101005161012051610140516139a46200064560003980610a2b5250806110ca52806114ff5250806109df5280610aa25280611547525080610a075250806110a4528061152352508061075752806107cd52508061079d528061127d52506139a46000f3fe60806040523480156200001157600080fd5b5060043610620001605760003560e01c8063863623bb11620000cf578063863623bb146200037a5780638a0ef184146200038457806395d89b4114620003bf5780639951d62f14620003c9578063a18b506b14620003f8578063a3eb2b4a1462000421578063a4caeb421462000452578063b7bc0f73146200045c578063be0522e01462000466578063d62fd9a21462000470578063eae4c19f14620006a6578063ef78d4fd14620006b0578063fc22a9f814620006ba5762000160565b806306fdde0314620001655780631f2dc5ef14620001e757806328d249fe14620002035780632a93834214620002485780632e4c697f146200026e5780633fbd653c14620002945780635a1f740614620002a057806361c4b42114620002dd57806367cb52d814620002fd57806370dea79a146200030757806377ed63c214620003115780637f501d04146200035a575b600080fd5b6200016f620006c4565b6040805160208082528351818301528351919283929083019185019080838360005b83811015620001ab57818101518382015260200162000191565b50505050905090810190601f168015620001d95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b620001f162000755565b60408051918252519081900360200190f35b6200022c600480360360208110156200021b57600080fd5b50356001600160a01b031662000779565b604080516001600160a01b039092168252519081900360200190f35b620001f1600480360360408110156200026057600080fd5b508035906020013562000794565b620001f1600480360360408110156200028657600080fd5b508035906020013562000818565b6200029e620008d8565b005b620002c960048036036020811015620002b857600080fd5b50356001600160a01b0316620009c2565b604080519115158252519081900360200190f35b620001f160048036036020811015620002f557600080fd5b5035620009d7565b620001f162000a05565b620001f162000a29565b6200033a600480360360208110156200032957600080fd5b50356001600160a01b031662000a4d565b604080519315158452602084019290925282820152519081900360600190f35b6200022c600480360360208110156200037257600080fd5b503562000a72565b620001f162000a9a565b620001f1600480360360608110156200039c57600080fd5b506001600160a01b03813581169160208101358216916040909101351662000ad6565b6200016f62000e12565b6200029e60048036036040811015620003e157600080fd5b506001600160a01b03813516906020013562000e70565b6200022c600480360360208110156200041057600080fd5b50356001600160a01b031662001064565b620001f1600480360360408110156200043957600080fd5b506001600160a01b03813581169160200135166200107f565b620001f16200109c565b6200029e620010ef565b620001f16200127b565b6200029e600480360360808110156200048857600080fd5b810190602081018135600160201b811115620004a357600080fd5b820183602082011115620004b657600080fd5b803590602001918460208302840111600160201b83111715620004d857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200052857600080fd5b8201836020820111156200053b57600080fd5b803590602001918460208302840111600160201b831117156200055d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115620005ad57600080fd5b820183602082011115620005c057600080fd5b803590602001918460208302840111600160201b83111715620005e257600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156200063257600080fd5b8201836020820111156200064557600080fd5b803590602001918460208302840111600160201b831117156200066757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506200129f945050505050565b620001f1620014fd565b620001f162001521565b620001f162001545565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200074d5780601f1062000721576101008083540402835291602001916200074d565b820191906000526020600020905b8154815290600101906020018083116200072f57829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002602052600090815260409020546001600160a01b031681565b600080620007c37f00000000000000000000000000000000000000000000000000000000000000008462000818565b90506000620007f37f00000000000000000000000000000000000000000000000000000000000000008562000818565b90506200080d8162000806878562001633565b9062001569565b925050505b92915050565b600082620008295750600062000812565b81620008385750600162000812565b81600114156200084a57508162000812565b60015b6001831115620008c45762000864836002620015cf565b6200088c5762000875848062001633565b93506200088483600262001569565b9250620008be565b62000898848262001633565b9050620008a6848062001633565b9350620008bb60026200080685600162001691565b92505b6200084d565b620008d0848262001633565b949350505050565b336000908152600260205260409020546001600160a01b0316156200092f5760405162461bcd60e51b815260040180806020018281038252602b815260200180620038f8602b913960400191505060405180910390fd5b3360009081526004602052604090205460ff1615620009805760405162461bcd60e51b815260040180806020018281038252602a81526020018062003796602a913960400191505060405180910390fd5b33600081815260046020526040808220805460ff19166001179055517fb0b94cff8b84fc67513b977d68a5cdd67550bd9b8d99a34b570e3367b78437869190a2565b60046020526000908152604090205460ff1681565b6000620008127f00000000000000000000000000000000000000000000000000000000000000008362000794565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60066020526000908152604090208054600182015460029092015460ff909116919083565b6007818154811062000a8057fe5b6000918252602090912001546001600160a01b0316905081565b600062000ad17f000000000000000000000000000000000000000000000000000000000000000062000acb6200109c565b62000794565b905090565b6001600160a01b03808216600090815260056020908152604080832093871683529290529081205462000b0c5750600062000e0b565b6001600160a01b038281166000908152600260205260409020541615801562000b4e57506001600160a01b03821660009081526004602052604090205460ff16155b1562000b5d5750600062000e0b565b6001600160a01b038481166000908152600260205260409020541662000b865750600062000e0b565b6001600160a01b0380851660009081526002602090815260408083205481516370a0823160e01b815288861660048201529151939416926370a0823192602480840193919291829003018186803b15801562000be157600080fd5b505afa15801562000bf6573d6000803e3d6000fd5b505050506040513d602081101562000c0d57600080fd5b505190506001600160a01b03858116908416148062000c4457506001600160a01b03831660009081526004602052604090205460ff165b1562000c5257905062000e0b565b6001600160a01b0380861660009081526002602090815260408083205481516370a0823160e01b815288861660048201529151939416926370a0823192602480840193919291829003018186803b15801562000cad57600080fd5b505afa15801562000cc2573d6000803e3d6000fd5b505050506040513d602081101562000cd957600080fd5b50516001600160a01b0380861660008181526005602090815260408083208c86168452825280832054848452600283528184205482516370a0823160e01b815260048101969096529151969750606496939562000d9395889562000806959394909216926370a0823192602480840193829003018186803b15801562000d5e57600080fd5b505afa15801562000d73573d6000803e3d6000fd5b505050506040513d602081101562000d8a57600080fd5b50519062001633565b90508281101562000dac57600094505050505062000e0b565b6001600160a01b038087166000908152600560209081526040808320938c1683529290529081205462000df5908490620008069062000ded90839062001691565b879062001633565b905062000e03828262001691565b955050505050505b9392505050565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156200074d5780601f1062000721576101008083540402835291602001916200074d565b336000908152600260205260409020546001600160a01b031615158062000ea657503360009081526004602052604090205460ff165b62000ee35760405162461bcd60e51b8152600401808060200182810382526031815260200180620037c06031913960400191505060405180910390fd5b336001600160a01b038316141562000f3f576040805162461bcd60e51b815260206004820152601a6024820152792cb7ba9031b0b713ba103ab73a393ab9ba103cb7bab939b2b63360311b604482015290519081900360640190fd5b6001600160a01b03821660009081526004602052604090205460ff161562000fae576040805162461bcd60e51b815260206004820152601f60248201527f596f752063616e277420747275737420616e206f7267616e697a6174696f6e00604482015290519081900360640190fd5b606481111562000ff05760405162461bcd60e51b8152600401808060200182810382526025815260200180620038aa6025913960400191505060405180910390fd5b3360009081526004602052604090205460ff16156200105457801580620010175750806064145b620010545760405162461bcd60e51b8152600401808060200182810382526021815260200180620038686021913960400191505060405180910390fd5b620010608282620016ef565b5050565b6003602052600090815260409020546001600160a01b031681565b600560209081526000928352604080842090915290825290205481565b600062000ad17f000000000000000000000000000000000000000000000000000000000000000062000806427f000000000000000000000000000000000000000000000000000000000000000062001691565b336000908152600260205260409020546001600160a01b03161562001155576040805162461bcd60e51b8152602060048201526017602482015276596f752063616e2774207369676e20757020747769636560481b604482015290519081900360640190fd5b3360009081526004602052604090205460ff1615620011a65760405162461bcd60e51b815260040180806020018281038252602b81526020018062003923602b913960400191505060405180910390fd5b600033604051620011b79062001eae565b6001600160a01b03909116815260405190819003602001906000f080158015620011e5573d6000803e3d6000fd5b5033600081815260026020908152604080832080546001600160a01b0387166001600160a01b03199182168117909255908452600390925290912080549091168217905590915062001239906064620016ef565b604080516001600160a01b0383168152905133917f358ba8f768af134eb5af120e9a61dc1ef29b29f597f047b555fc3675064a0342919081900360200190a250565b7f000000000000000000000000000000000000000000000000000000000000000081565b8351825114620012e15760405162461bcd60e51b815260040180806020018281038252602a815260200180620037f1602a913960400191505060405180910390fd5b8351835114620013235760405162461bcd60e51b81526004018080602001828103825260298152602001806200376d6029913960400191505060405180910390fd5b8351815114620013655760405162461bcd60e51b815260040180806020018281038252602c8152602001806200381b602c913960400191505060405180910390fd5b60005b8351811015620014ea5760008482815181106200138157fe5b6020026020010151905060008483815181106200139a57fe5b602002602001015190506000878481518110620013b357fe5b602002602001015190506000858581518110620013cc57fe5b602002602001015190506000620013e583868662000ad6565b90508082111562001434576040805162461bcd60e51b8152602060048201526014602482015273151c9d5cdd081b1a5b5a5d08195e18d95959195960621b604482015290519081900360640190fd5b6200144185858462001751565b6001600160a01b0380841660009081526002602090815260408083205481516308299c0f60e21b81528a8616600482015289861660248201526044810188905291519416936320a6703c93606480840194938390030190829087803b158015620014aa57600080fd5b505af1158015620014bf573d6000803e3d6000fd5b505050506040513d6020811015620014d657600080fd5b505060019095019450620013689350505050565b50620014f7835162001906565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000808211620015bd576040805162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015290519081900360640190fd5b818381620015c757fe5b049392505050565b600080821162001621576040805162461bcd60e51b8152602060048201526018602482015277536166654d6174683a206d6f64756c6f206279207a65726f60401b604482015290519081900360640190fd5b8183816200162b57fe5b069392505050565b600082620016445750600062000812565b828202828482816200165257fe5b041462000e0b5760405162461bcd60e51b8152600401808060200182810382526021815260200180620038476021913960400191505060405180910390fd5b600082821115620016e9576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020859055805185815290519293927fe60c754dd8ab0b1b5fccba257d6ebcd7d09e360ab7dd7a6e58198ca1f57cdcec929181900390910190a35050565b6001600160a01b03831660009081526006602052604090205460ff1615620017bd576001600160a01b0383166000908152600660205260409020600101546200179b908262001e55565b6001600160a01b03841660009081526006602052604090206001015562001828565b6001600160a01b0383166000818152600660205260408120805460ff1916600190811782559081018490556007805491820181559091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b03191690911790555b6001600160a01b03821660009081526006602052604090205460ff161562001894576001600160a01b03821660009081526006602052604090206002015462001872908262001e55565b6001600160a01b03831660009081526006602052604090206002015562001901565b6001600160a01b0382166000818152600660205260408120805460ff19166001908117825560029091018490556007805491820181559091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b03191690911790555b505050565b60008060005b60075481101562001b02576200192162001ebc565b60066000600784815481106200193357fe5b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208151606081018352815460ff161515815260018201549381018490526002909101549181018290529250101562001a64576001600160a01b03841615620019d35760405162461bcd60e51b8152600401808060200182810382526021815260200180620038896021913960400191505060405180910390fd5b336001600160a01b031660078381548110620019eb57fe5b6000918252602090912001546001600160a01b03161462001a3e5760405162461bcd60e51b8152600401808060200182810382526029815260200180620038cf6029913960400191505060405180910390fd5b6007828154811062001a4c57fe5b6000918252602090912001546001600160a01b031693505b80602001518160400151111562001af8576001600160a01b0383161562001ad2576040805162461bcd60e51b815260206004820181905260248201527f506174682073656e647320746f206d6f7265207468616e206f6e652064657374604482015290519081900360640190fd5b6007828154811062001ae057fe5b6000918252602090912001546001600160a01b031692505b506001016200190c565b506001600160a01b03821662001b5d576040805162461bcd60e51b815260206004820152601b60248201527a5472616e73616374696f6e206d757374206861766520612073726360281b604482015290519081900360640190fd5b6001600160a01b03811662001bb9576040805162461bcd60e51b815260206004820152601c60248201527f5472616e73616374696f6e206d75737420686176652061206465737400000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600660205260409020600201541562001c1e576040805162461bcd60e51b815260206004820152601360248201527253656e64657220697320726563656976696e6760681b604482015290519081900360640190fd5b6001600160a01b0381166000908152600660205260409020600101541562001c84576040805162461bcd60e51b8152602060048201526014602482015273526563697069656e742069732073656e64696e6760601b604482015290519081900360640190fd5b6001600160a01b038082166000908152600660205260408082206002015492851682529020600101541462001ceb5760405162461bcd60e51b81526004018080602001828103825260218152602001806200394e6021913960400191505060405180910390fd5b60075460018401101562001d40576040805162461bcd60e51b81526020600482015260176024820152765365656e20746f6f206d616e792061646472657373657360481b604482015290519081900360640190fd5b6001600160a01b038281166000818152600660209081526040918290206001015482519081529151938516937f8451019aab65b4193860ef723cb0d56b475a26a72b7bfc55c1dbd6121015285a9281900390910190a36007545b6001811062001df957600660006007600184038154811062001db857fe5b60009182526020808320909101546001600160a01b031683528201929092526040018120805460ff1916815560018101829055600201556000190162001d9a565b5062001e086007600062001edf565b6007541562001901576040805162461bcd60e51b81526020600482015260146024820152735365656e2073686f756c6420626520656d70747960601b604482015290519081900360640190fd5b60008282018381101562000e0b576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b61184f8062001f1e83390190565b604051806060016040528060001515815260200160008152602001600081525090565b508054600082559060005260206000209081019062001eff919062001f02565b50565b5b8082111562001f19576000815560010162001f03565b509056fe60c0604052600960f91b6080523480156200001957600080fd5b506040516200184f3803806200184f833981810160405260208110156200003f57600080fd5b50516001600160a01b0381166200005557600080fd5b6001600160601b0319606082901b1660a052600680546001600160a01b031916331790556200008362000192565b6005556200009062000196565b6007556006546040805163863623bb60e01b815290516001600160a01b039092169163863623bb91600480820192602092909190829003018186803b158015620000d957600080fd5b505afa158015620000ee573d6000803e3d6000fd5b505050506040513d60208110156200010557600080fd5b505160085560065460408051630cf96a5b60e31b815290516200018b9284926001600160a01b03909116916367cb52d891600480820192602092909190829003018186803b1580156200015757600080fd5b505afa1580156200016c573d6000803e3d6000fd5b505050506040513d60208110156200018357600080fd5b505162000215565b506200054e565b4290565b600080620001ea620001a762000324565b620001b8620001cc6001826200039d565b620003e360201b62000c021790919060201c565b620001d662000447565b6200048d60201b62000c5a1790919060201c565b90506200020f620001fa62000192565b82620004eb60201b62000cb31790919060201c565b91505090565b6001600160a01b03821662000271576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200027f6000838362000549565b6200029b81600254620003e360201b62000c021790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002ce91839062000c02620003e3821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6006546040805163eae4c19f60e01b815290516000926001600160a01b03169163eae4c19f916004808301926020929190829003018186803b1580156200036a57600080fd5b505afa1580156200037f573d6000803e3d6000fd5b505050506040513d60208110156200039657600080fd5b5051905090565b6006546040805163526575a160e11b815290516000926001600160a01b03169163a4caeb42916004808301926020929190829003018186803b1580156200036a57600080fd5b6000828201838110156200043e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6006546040805163ef78d4fd60e01b815290516000926001600160a01b03169163ef78d4fd916004808301926020929190829003018186803b1580156200036a57600080fd5b6000826200049e5750600062000441565b82820282848281620004ac57fe5b04146200043e5760405162461bcd60e51b81526004018080602001828103825260218152602001806200182e6021913960400191505060405180910390fd5b60008282111562000543576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b505050565b60805160f81c60a05160601c6112ac620005826000398061058952806109bc5280610ac45250806106ac52506112ac6000f3fe608060405234801561001057600080fd5b50600436106101645760003560e01c80636c050eae116100c95780636c050eae1461034c57806370a082311461035457806370dea79a1461037a57806375f12b21146103825780638b4eed811461038a5780638da5cb5b1461039257806395d89b411461039a578063a2e62045146103a2578063a457c2d7146103aa578063a4caeb42146103d6578063a9059cbb146103de578063d40480891461040a578063dd62ed3e14610412578063ef78d4fd1461044057610164565b806306fdde031461016957806307da68f5146101e6578063095ea7b3146101f05780630b0aaf2714610230578063107129dd1461024a57806316ada5471461025257806318160ddd1461025a57806320a6703c1461026257806323b872dd14610298578063313ce567146102ce578063365a86fc146102ec57806339509351146103105780633b6fe91f1461033c57806341c3054614610344575b600080fd5b610171610448565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ab578181015183820152602001610193565b50505050905090810190601f1680156101d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ee61057e565b005b61021c6004803603604081101561020657600080fd5b506001600160a01b0381351690602001356105c2565b604080519115158252519081900360200190f35b6102386105d9565b60408051918252519081900360200190f35b610238610605565b61023861060b565b61023861060f565b61021c6004803603606081101561027857600080fd5b506001600160a01b03813581169160208101359091169060400135610615565b61021c600480360360608110156102ae57600080fd5b506001600160a01b03813581169160208101359091169060400135610641565b6102d66106aa565b6040805160ff9092168252519081900360200190f35b6102f46106ce565b604080516001600160a01b039092168252519081900360200190f35b61021c6004803603604081101561032657600080fd5b506001600160a01b0381351690602001356106dd565b610238610713565b610238610789565b6102386107d5565b6102386004803603602081101561036a57600080fd5b50356001600160a01b031661090b565b610238610926565b61021c61096b565b6102386109b4565b6102f46109ba565b6101716109de565b6101ee610a23565b61021c600480360360408110156103c057600080fd5b506001600160a01b038135169060200135610aec565b610238610b3b565b61021c600480360360408110156103f457600080fd5b506001600160a01b038135169060200135610b80565b610238610b8c565b6102386004803603604081101561042857600080fd5b506001600160a01b0381358116916020013516610b92565b610238610bbd565b600654604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b15801561048d57600080fd5b505afa1580156104a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156104ca57600080fd5b8101908080516040519392919084600160201b8211156104e957600080fd5b9083019060208201858111156104fe57600080fd5b8251600160201b81118282018810171561051757600080fd5b82525081516020918201929091019080838360005b8381101561054457818101518382015260200161052c565b50505050905090810190601f1680156105715780820380516001836020036101000a031916815260200191505b5060405250505090505b90565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105b357600080fd5b6009805460ff19166001179055565b60006105cf338484610d10565b5060015b92915050565b60006106006105e6610bbd565b6105fa6105f1610713565b60055490610cb3565b90610dfc565b905090565b60075481565b4290565b60025490565b6006546000906001600160a01b0316331461062f57600080fd5b61063a848484610e60565b9392505050565b600061064e848484610e60565b6106a0843361069b856040518060600160405280602881526020016111e1602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610fbb565b610d10565b5060019392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6006546001600160a01b031681565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105cf91859061069b9086610c02565b6006546040805163eae4c19f60e01b815290516000926001600160a01b03169163eae4c19f916004808301926020929190829003018186803b15801561075857600080fd5b505afa15801561076c573d6000803e3d6000fd5b505050506040513d602081101561078257600080fd5b5051905090565b6000806107bb610797610713565b6107a76107ad60016107a7610b3b565b90610c02565b6107b5610bbd565b90610c5a565b90506107cf6107c861060b565b8290610cb3565b91505090565b60006107df61096b565b156107ec5750600061057b565b6005546007546008546000929190836108036105d9565b90505b61080e61060b565b6108188585610c02565b116108d65761083161082a8484610c5a565b8690610c02565b945061083d8484610c02565b9350610847610bbd565b9250610854816001610c02565b600654604080516361c4b42160e01b81526004810184905290519293506001600160a01b03909116916361c4b42191602480820192602092909190829003018186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d60208110156108cd57600080fd5b50519150610806565b60006108ea856108e461060b565b90610cb3565b90506109006108f98285610c5a565b8790610c02565b965050505050505090565b6001600160a01b031660009081526020819052604090205490565b6006546040805163386f53cd60e11b815290516000926001600160a01b0316916370dea79a916004808301926020929190829003018186803b15801561075857600080fd5b60095460009060ff16156109815750600161057b565b60006109916005546108e461060b565b905061099b610926565b8111156109ac57600191505061057b565b600091505090565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600654604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b15801561048d57600080fd5b6000610a2d6107d5565b90508015610ae957610a3d610789565b600755610a4861060b565b6005556006546040805163863623bb60e01b815290516001600160a01b039092169163863623bb91600480820192602092909190829003018186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d6020811015610aba57600080fd5b5051600855610ae97f000000000000000000000000000000000000000000000000000000000000000082611052565b50565b60006105cf338461069b85604051806060016040528060258152602001611252602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610fbb565b6006546040805163526575a160e11b815290516000926001600160a01b03169163a4caeb42916004808301926020929190829003018186803b15801561075857600080fd5b600061063a8383611142565b60085481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546040805163ef78d4fd60e01b815290516000926001600160a01b03169163ef78d4fd916004808301926020929190829003018186803b15801561075857600080fd5b60008282018381101561063a576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600082610c69575060006105d3565b82820282848281610c7657fe5b041461063a5760405162461bcd60e51b81526004018080602001828103825260218152602001806111c06021913960400191505060405180910390fd5b600082821115610d0a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b038316610d555760405162461bcd60e51b815260040180806020018281038252602481526020018061122e6024913960400191505060405180910390fd5b6001600160a01b038216610d9a5760405162461bcd60e51b81526004018080602001828103825260228152602001806111786022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000808211610e4f576040805162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015290519081900360640190fd5b818381610e5857fe5b049392505050565b6001600160a01b038316610ea55760405162461bcd60e51b81526004018080602001828103825260258152602001806112096025913960400191505060405180910390fd5b6001600160a01b038216610eea5760405162461bcd60e51b81526004018080602001828103825260238152602001806111556023913960400191505060405180910390fd5b610ef583838361114f565b610f328160405180606001604052806026815260200161119a602691396001600160a01b0386166000908152602081905260409020549190610fbb565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610f619082610c02565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561104a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561100f578181015183820152602001610ff7565b50505050905090810190601f16801561103c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166110ad576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6110b96000838361114f565b6002546110c69082610c02565b6002556001600160a01b0382166000908152602081905260409020546110ec9082610c02565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60006105cf338484610e60565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220e907e78d83fcfaf086b8e5e57d60e0ed0571f7134aca5d237090840030cdbc2864736f6c63430007010033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77546f6b656e73206172726179206c656e677468206d75737420657175616c2073726373206172726179596f752063616e2774207369676e20757020617320616e206f7267616e697a6174696f6e207477696365596f752063616e206f6e6c792074727573742070656f706c6520616674657220796f75277665207369676e656420757021546f6b656e73206172726179206c656e677468206d75737420657175616c206465737473206172726179546f6b656e73206172726179206c656e677468206d75737420657175616c20616d6f756e7473206172726179536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754727573742069732062696e61727920666f72206f7267616e697a6174696f6e73506174682073656e64732066726f6d206d6f7265207468616e206f6e65207372634c696d6974206d75737420626520612070657263656e74616765206f7574206f66203130305061746820646f65736e27742073656e642066726f6d207472616e73616374696f6e2073656e6465724e6f726d616c2075736572732063616e6e6f74207369676e7570206173206f7267616e697a6174696f6e734f7267616e697a6174696f6e732063616e6e6f74207369676e7570206173206e6f726d616c207573657273556e657175616c2073656e7420616e6420726563656976656420616d6f756e7473a26469706673582212203384b78cc5a24deb76b83b14c8a0100eeb1cab48837a3481131b61b54f1fabba64736f6c63430007010033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77\";\n\ntype HubConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: HubConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Hub__factory extends ContractFactory {\n  constructor(...args: HubConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    _inflation: BigNumberish,\n    _period: BigNumberish,\n    _symbol: string,\n    _name: string,\n    _signupBonus: BigNumberish,\n    _initialIssuance: BigNumberish,\n    _timeout: BigNumberish,\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(\n      _inflation,\n      _period,\n      _symbol,\n      _name,\n      _signupBonus,\n      _initialIssuance,\n      _timeout,\n      overrides || {}\n    );\n  }\n  override deploy(\n    _inflation: BigNumberish,\n    _period: BigNumberish,\n    _symbol: string,\n    _name: string,\n    _signupBonus: BigNumberish,\n    _initialIssuance: BigNumberish,\n    _timeout: BigNumberish,\n    overrides?: NonPayableOverrides & { from?: string }\n  ) {\n    return super.deploy(\n      _inflation,\n      _period,\n      _symbol,\n      _name,\n      _signupBonus,\n      _initialIssuance,\n      _timeout,\n      overrides || {}\n    ) as Promise<\n      Hub & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): Hub__factory {\n    return super.connect(runner) as Hub__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): HubInterface {\n    return new Interface(_abi) as HubInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): Hub {\n    return new Contract(address, _abi, runner) as unknown as Hub;\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type {\n  Signer,\n  AddressLike,\n  ContractDeployTransaction,\n  ContractRunner,\n} from \"ethers\";\nimport type { NonPayableOverrides } from \"../common\";\nimport type { Token, TokenInterface } from \"../Token\";\n\nconst _abi = [\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"account\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"currentIssuance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"subtractedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"decreaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"hub\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"addedValue\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"increaseAllowance\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"inflationOffset\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"lastTouched\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"owner\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"sender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"recipient\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"time\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"period\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"periods\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"timeout\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"periodsWhenLastTouched\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"hubDeployedAt\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stop\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"stopped\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"findInflationOffset\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"look\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"update\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"amount\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"hubTransfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n] as const;\n\nconst _bytecode =\n  \"0x60c0604052600960f91b6080523480156200001957600080fd5b506040516200184f3803806200184f833981810160405260208110156200003f57600080fd5b50516001600160a01b0381166200005557600080fd5b6001600160601b0319606082901b1660a052600680546001600160a01b031916331790556200008362000192565b6005556200009062000196565b6007556006546040805163863623bb60e01b815290516001600160a01b039092169163863623bb91600480820192602092909190829003018186803b158015620000d957600080fd5b505afa158015620000ee573d6000803e3d6000fd5b505050506040513d60208110156200010557600080fd5b505160085560065460408051630cf96a5b60e31b815290516200018b9284926001600160a01b03909116916367cb52d891600480820192602092909190829003018186803b1580156200015757600080fd5b505afa1580156200016c573d6000803e3d6000fd5b505050506040513d60208110156200018357600080fd5b505162000215565b506200054e565b4290565b600080620001ea620001a762000324565b620001b8620001cc6001826200039d565b620003e360201b62000c021790919060201c565b620001d662000447565b6200048d60201b62000c5a1790919060201c565b90506200020f620001fa62000192565b82620004eb60201b62000cb31790919060201c565b91505090565b6001600160a01b03821662000271576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6200027f6000838362000549565b6200029b81600254620003e360201b62000c021790919060201c565b6002556001600160a01b03821660009081526020818152604090912054620002ce91839062000c02620003e3821b17901c565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6006546040805163eae4c19f60e01b815290516000926001600160a01b03169163eae4c19f916004808301926020929190829003018186803b1580156200036a57600080fd5b505afa1580156200037f573d6000803e3d6000fd5b505050506040513d60208110156200039657600080fd5b5051905090565b6006546040805163526575a160e11b815290516000926001600160a01b03169163a4caeb42916004808301926020929190829003018186803b1580156200036a57600080fd5b6000828201838110156200043e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6006546040805163ef78d4fd60e01b815290516000926001600160a01b03169163ef78d4fd916004808301926020929190829003018186803b1580156200036a57600080fd5b6000826200049e5750600062000441565b82820282848281620004ac57fe5b04146200043e5760405162461bcd60e51b81526004018080602001828103825260218152602001806200182e6021913960400191505060405180910390fd5b60008282111562000543576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b505050565b60805160f81c60a05160601c6112ac620005826000398061058952806109bc5280610ac45250806106ac52506112ac6000f3fe608060405234801561001057600080fd5b50600436106101645760003560e01c80636c050eae116100c95780636c050eae1461034c57806370a082311461035457806370dea79a1461037a57806375f12b21146103825780638b4eed811461038a5780638da5cb5b1461039257806395d89b411461039a578063a2e62045146103a2578063a457c2d7146103aa578063a4caeb42146103d6578063a9059cbb146103de578063d40480891461040a578063dd62ed3e14610412578063ef78d4fd1461044057610164565b806306fdde031461016957806307da68f5146101e6578063095ea7b3146101f05780630b0aaf2714610230578063107129dd1461024a57806316ada5471461025257806318160ddd1461025a57806320a6703c1461026257806323b872dd14610298578063313ce567146102ce578063365a86fc146102ec57806339509351146103105780633b6fe91f1461033c57806341c3054614610344575b600080fd5b610171610448565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ab578181015183820152602001610193565b50505050905090810190601f1680156101d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101ee61057e565b005b61021c6004803603604081101561020657600080fd5b506001600160a01b0381351690602001356105c2565b604080519115158252519081900360200190f35b6102386105d9565b60408051918252519081900360200190f35b610238610605565b61023861060b565b61023861060f565b61021c6004803603606081101561027857600080fd5b506001600160a01b03813581169160208101359091169060400135610615565b61021c600480360360608110156102ae57600080fd5b506001600160a01b03813581169160208101359091169060400135610641565b6102d66106aa565b6040805160ff9092168252519081900360200190f35b6102f46106ce565b604080516001600160a01b039092168252519081900360200190f35b61021c6004803603604081101561032657600080fd5b506001600160a01b0381351690602001356106dd565b610238610713565b610238610789565b6102386107d5565b6102386004803603602081101561036a57600080fd5b50356001600160a01b031661090b565b610238610926565b61021c61096b565b6102386109b4565b6102f46109ba565b6101716109de565b6101ee610a23565b61021c600480360360408110156103c057600080fd5b506001600160a01b038135169060200135610aec565b610238610b3b565b61021c600480360360408110156103f457600080fd5b506001600160a01b038135169060200135610b80565b610238610b8c565b6102386004803603604081101561042857600080fd5b506001600160a01b0381358116916020013516610b92565b610238610bbd565b600654604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde03916004808301926000929190829003018186803b15801561048d57600080fd5b505afa1580156104a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156104ca57600080fd5b8101908080516040519392919084600160201b8211156104e957600080fd5b9083019060208201858111156104fe57600080fd5b8251600160201b81118282018810171561051757600080fd5b82525081516020918201929091019080838360005b8381101561054457818101518382015260200161052c565b50505050905090810190601f1680156105715780820380516001836020036101000a031916815260200191505b5060405250505090505b90565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105b357600080fd5b6009805460ff19166001179055565b60006105cf338484610d10565b5060015b92915050565b60006106006105e6610bbd565b6105fa6105f1610713565b60055490610cb3565b90610dfc565b905090565b60075481565b4290565b60025490565b6006546000906001600160a01b0316331461062f57600080fd5b61063a848484610e60565b9392505050565b600061064e848484610e60565b6106a0843361069b856040518060600160405280602881526020016111e1602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610fbb565b610d10565b5060019392505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6006546001600160a01b031681565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916105cf91859061069b9086610c02565b6006546040805163eae4c19f60e01b815290516000926001600160a01b03169163eae4c19f916004808301926020929190829003018186803b15801561075857600080fd5b505afa15801561076c573d6000803e3d6000fd5b505050506040513d602081101561078257600080fd5b5051905090565b6000806107bb610797610713565b6107a76107ad60016107a7610b3b565b90610c02565b6107b5610bbd565b90610c5a565b90506107cf6107c861060b565b8290610cb3565b91505090565b60006107df61096b565b156107ec5750600061057b565b6005546007546008546000929190836108036105d9565b90505b61080e61060b565b6108188585610c02565b116108d65761083161082a8484610c5a565b8690610c02565b945061083d8484610c02565b9350610847610bbd565b9250610854816001610c02565b600654604080516361c4b42160e01b81526004810184905290519293506001600160a01b03909116916361c4b42191602480820192602092909190829003018186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d60208110156108cd57600080fd5b50519150610806565b60006108ea856108e461060b565b90610cb3565b90506109006108f98285610c5a565b8790610c02565b965050505050505090565b6001600160a01b031660009081526020819052604090205490565b6006546040805163386f53cd60e11b815290516000926001600160a01b0316916370dea79a916004808301926020929190829003018186803b15801561075857600080fd5b60095460009060ff16156109815750600161057b565b60006109916005546108e461060b565b905061099b610926565b8111156109ac57600191505061057b565b600091505090565b60055481565b7f000000000000000000000000000000000000000000000000000000000000000081565b600654604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b41916004808301926000929190829003018186803b15801561048d57600080fd5b6000610a2d6107d5565b90508015610ae957610a3d610789565b600755610a4861060b565b6005556006546040805163863623bb60e01b815290516001600160a01b039092169163863623bb91600480820192602092909190829003018186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d6020811015610aba57600080fd5b5051600855610ae97f000000000000000000000000000000000000000000000000000000000000000082611052565b50565b60006105cf338461069b85604051806060016040528060258152602001611252602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610fbb565b6006546040805163526575a160e11b815290516000926001600160a01b03169163a4caeb42916004808301926020929190829003018186803b15801561075857600080fd5b600061063a8383611142565b60085481565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6006546040805163ef78d4fd60e01b815290516000926001600160a01b03169163ef78d4fd916004808301926020929190829003018186803b15801561075857600080fd5b60008282018381101561063a576040805162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015290519081900360640190fd5b600082610c69575060006105d3565b82820282848281610c7657fe5b041461063a5760405162461bcd60e51b81526004018080602001828103825260218152602001806111c06021913960400191505060405180910390fd5b600082821115610d0a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b038316610d555760405162461bcd60e51b815260040180806020018281038252602481526020018061122e6024913960400191505060405180910390fd5b6001600160a01b038216610d9a5760405162461bcd60e51b81526004018080602001828103825260228152602001806111786022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6000808211610e4f576040805162461bcd60e51b815260206004820152601a602482015279536166654d6174683a206469766973696f6e206279207a65726f60301b604482015290519081900360640190fd5b818381610e5857fe5b049392505050565b6001600160a01b038316610ea55760405162461bcd60e51b81526004018080602001828103825260258152602001806112096025913960400191505060405180910390fd5b6001600160a01b038216610eea5760405162461bcd60e51b81526004018080602001828103825260238152602001806111556023913960400191505060405180910390fd5b610ef583838361114f565b610f328160405180606001604052806026815260200161119a602691396001600160a01b0386166000908152602081905260409020549190610fbb565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610f619082610c02565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561104a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561100f578181015183820152602001610ff7565b50505050905090810190601f16801561103c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166110ad576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6110b96000838361114f565b6002546110c69082610c02565b6002556001600160a01b0382166000908152602081905260409020546110ec9082610c02565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b60006105cf338484610e60565b50505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220e907e78d83fcfaf086b8e5e57d60e0ed0571f7134aca5d237090840030cdbc2864736f6c63430007010033536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77\";\n\ntype TokenConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: TokenConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Token__factory extends ContractFactory {\n  constructor(...args: TokenConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    _owner: AddressLike,\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(_owner, overrides || {});\n  }\n  override deploy(\n    _owner: AddressLike,\n    overrides?: NonPayableOverrides & { from?: string }\n  ) {\n    return super.deploy(_owner, overrides || {}) as Promise<\n      Token & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): Token__factory {\n    return super.connect(runner) as Token__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): TokenInterface {\n    return new Interface(_abi) as TokenInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): Token {\n    return new Contract(address, _abi, runner) as unknown as Token;\n  }\n}\n", "/*\r\n *      bignumber.js v9.1.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar\r\n  isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      prefix: '',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      groupSeparator: ',',\r\n      decimalSeparator: '.',\r\n      fractionGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n      suffix: ''\r\n    },\r\n\r\n    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n    // '-', '.', whitespace, or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n    alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * v {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(v, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor call without `new`.\r\n    if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n    if (b == null) {\r\n\r\n      if (v && v._isBigNumber === true) {\r\n        x.s = v.s;\r\n\r\n        if (!v.c || v.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n        } else if (v.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.c = v.c.slice();\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n        // Fast path for integers, where n < 2147483648 (2**31).\r\n        if (v === ~~v) {\r\n          for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n          if (e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else {\r\n            x.e = e;\r\n            x.c = [v];\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        str = String(v);\r\n      } else {\r\n\r\n        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n      // Exponential form?\r\n      if ((i = str.search(/e/i)) > 0) {\r\n\r\n        // Determine exponent.\r\n        if (e < 0) e = i;\r\n        e += +str.slice(i + 1);\r\n        str = str.substring(0, i);\r\n      } else if (e < 0) {\r\n\r\n        // Integer.\r\n        e = str.length;\r\n      }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n        x = new BigNumber(v);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      str = String(v);\r\n\r\n      if (isNum = typeof v == 'number') {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + v);\r\n        }\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp, so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, String(v), isNum, b);\r\n        }\r\n      }\r\n\r\n      // Prevent later check for length on converted number.\r\n      isNum = false;\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    if (str = str.slice(i, ++len)) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * v));\r\n      }\r\n\r\n       // Overflow?\r\n      if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          i = LOG_BASE - (str = str.slice(i)).length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                       not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *     prefix                 {string}\r\n   *     groupSize              {number}\r\n   *     secondaryGroupSize     {number}\r\n   *     groupSeparator         {string}\r\n   *     decimalSeparator       {string}\r\n   *     fractionGroupSize      {number}\r\n   *     fractionGroupSeparator {string}\r\n   *     suffix                 {string}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (v && v.pop) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if less than two characters,\r\n          // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n          if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n   *\r\n   * v {any}\r\n   *\r\n   * '[BigNumber Error] Invalid BigNumber: {v}'\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    if (!v || v._isBigNumber !== true) return false;\r\n    if (!BigNumber.DEBUG) return true;\r\n\r\n    var i, n,\r\n      c = v.c,\r\n      e = v.e,\r\n      s = v.s;\r\n\r\n    out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n        // If the first element is zero, the BigNumber value must be zero.\r\n        if (c[0] === 0) {\r\n          if (e === 0 && c.length === 1) return true;\r\n          break out;\r\n        }\r\n\r\n        // Calculate number of digits that c[0] should have, based on the exponent.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (i < 1) i += LOG_BASE;\r\n\r\n        // Calculate number of digits of c[0].\r\n        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n        if (String(c[0]).length == i) {\r\n\r\n          for (i = 0; i < c.length; i++) {\r\n            n = c[i];\r\n            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n          }\r\n\r\n          // Last element cannot be zero, unless it is the only element.\r\n          if (n !== 0) return true;\r\n        }\r\n      }\r\n\r\n    // Infinity/NaN\r\n    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n      return true;\r\n    }\r\n\r\n    throw Error\r\n      (bignumberError + 'Invalid BigNumber: ' + v);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, -1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n   /*\r\n   * Return a BigNumber whose value is the sum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.sum = function () {\r\n    var i = 1,\r\n      args = arguments,\r\n      sum = new BigNumber(args[0]);\r\n    for (; i < args.length;) sum = sum.plus(args[i++]);\r\n    return sum;\r\n  };\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  // If any number is NaN, return NaN.\r\n  function maxOrMin(args, n) {\r\n    var k, y,\r\n      i = 1,\r\n      x = new BigNumber(args[0]);\r\n\r\n    for (; i < args.length; i++) {\r\n      y = new BigNumber(args[i]);\r\n      if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.s = null;\r\n      }\r\n\r\n      x.c = x.e = null;\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = mathfloor(n / pows10[d - j - 1] % 10);\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : mathfloor(n / pows10[d - j - 1] % 10);\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function valueOf(n) {\r\n    var str,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      if (nIsNeg) n.s = 1;\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      i = Math.abs(+valueOf(n));\r\n      nIsOdd = i % 2;\r\n    }\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (i) {\r\n        i = mathfloor(i / 2);\r\n        if (i === 0) break;\r\n        nIsOdd = i % 2;\r\n      } else {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n\r\n        if (n.e > 14) {\r\n          nIsOdd = isOdd(n);\r\n        } else {\r\n          i = +valueOf(n);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        }\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) {\r\n      zc = xc;\r\n      xc = yc;\r\n      yc = zc;\r\n      i = xcL;\r\n      xcL = ycL;\r\n      ycL = i;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n      b = a;\r\n    }\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+valueOf(x));\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(+n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the format or FORMAT object (see BigNumber.set).\r\n   *\r\n   * The formatting object may contain some or all of the properties shown below.\r\n   *\r\n   * FORMAT = {\r\n   *   prefix: '',\r\n   *   groupSize: 3,\r\n   *   secondaryGroupSize: 0,\r\n   *   groupSeparator: ',',\r\n   *   decimalSeparator: '.',\r\n   *   fractionGroupSize: 0,\r\n   *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n   *   suffix: ''\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   * [format] {object} Formatting options. See FORMAT pbject above.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   * '[BigNumber Error] Argument not an object: {format}'\r\n   */\r\n  P.toFormat = function (dp, rm, format) {\r\n    var str,\r\n      x = this;\r\n\r\n    if (format == null) {\r\n      if (dp != null && rm && typeof rm == 'object') {\r\n        format = rm;\r\n        rm = null;\r\n      } else if (dp && typeof dp == 'object') {\r\n        format = dp;\r\n        dp = rm = null;\r\n      } else {\r\n        format = FORMAT;\r\n      }\r\n    } else if (typeof format != 'object') {\r\n      throw Error\r\n        (bignumberError + 'Argument not an object: ' + format);\r\n    }\r\n\r\n    str = x.toFixed(dp, rm);\r\n\r\n    if (x.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +format.groupSize,\r\n        g2 = +format.secondaryGroupSize,\r\n        groupSeparator = format.groupSeparator || '',\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = x.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) {\r\n        i = g1;\r\n        g1 = g2;\r\n        g2 = i;\r\n        len -= i;\r\n      }\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + (format.fractionGroupSeparator || ''))\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return (format.prefix || '') + str + (format.suffix || '');\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n   * fraction with an integer numerator and an integer denominator.\r\n   * The denominator will be a positive non-zero value less than or equal to the specified\r\n   * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n   * the lowest value necessary to represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n      }\r\n    }\r\n\r\n    if (!xc) return new BigNumber(x);\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e = e * 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n    MAX_EXP = exp;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +valueOf(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(coeffToString(n.c), e)\r\n         : toFixedPoint(coeffToString(n.c), e, '0');\r\n      } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n        str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return valueOf(this);\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n  // Node.js v10.12.0+\r\n  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n// These functions don't need access to variables,\r\n// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== mathfloor(n)) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + String(n));\r\n  }\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORT\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n", "import { BigNumber } from 'bignumber.js';\nimport { ethers, parseEther } from 'ethers';\nimport multihash from 'multihashes';\n\n/**\n * Formats the token balance in time circles.\n * @param tokenBalance The token balance as a BigNumber.\n * @return The formatted token balance as a string.\n */\nfunction formatTimeCircles(tokenBalance: BigNumber): string {\n  const ether = tokenBalance.dividedToIntegerBy(new BigNumber(10).pow(18));\n  const remainder = tokenBalance.mod(new BigNumber(10).pow(18));\n  let remainderString = remainder.toFixed(0).padStart(18, '0').replace(/0+$/, '');\n\n  return remainderString.length > 0\n    ? `${ether.toString()}.${remainderString}`\n    : ether.toString();\n}\n\nconst CirclesInceptionTimestamp = new Date('2020-10-15T00:00:00.000Z').getTime();\nconst OneDayInMilliseconds = new BigNumber(86400).multipliedBy(1000);\nconst OneCirclesYearInDays = new BigNumber(365.25);\nconst OneCirclesYearInMilliseconds = OneCirclesYearInDays.multipliedBy(24).multipliedBy(60).multipliedBy(60).multipliedBy(1000);\n\nfunction getCrcPayoutAt(timestamp: number): number {\n  const daysSinceCirclesInception = new BigNumber(timestamp - CirclesInceptionTimestamp).dividedBy(OneDayInMilliseconds);\n  const circlesYearsSince = new BigNumber(timestamp - CirclesInceptionTimestamp).dividedBy(OneCirclesYearInMilliseconds);\n  const daysInCurrentCirclesYear = daysSinceCirclesInception.mod(OneCirclesYearInDays);\n\n  const initialDailyCrcPayout = new BigNumber(8);\n  let circlesPayoutInCurrentYear = initialDailyCrcPayout;\n  let previousCirclesPerDayValue = initialDailyCrcPayout;\n\n  for (let index = 0; index < circlesYearsSince.toNumber(); index++) {\n    previousCirclesPerDayValue = circlesPayoutInCurrentYear;\n    circlesPayoutInCurrentYear = circlesPayoutInCurrentYear.multipliedBy(1.07);\n  }\n\n  const x = previousCirclesPerDayValue;\n  const y = circlesPayoutInCurrentYear;\n  const a = daysInCurrentCirclesYear.dividedBy(OneCirclesYearInDays);\n\n  return x.multipliedBy(new BigNumber(1).minus(a)).plus(y.multipliedBy(a)).toNumber();\n}\n\n/**\n * Converts a CRC amount to a TC amount.\n * @param timestamp The point in time when the CRC transaction happened.\n * @param amount The CRC value of the transaction (bigint in wei).\n * @return The TC value of the transaction (as float).\n */\nexport function crcToTc(timestamp: Date, amount: bigint): number {\n  const amountFloat = parseFloat(ethers.formatEther(amount ?? '0'));\n  const ts = timestamp.getTime();\n  const payoutAtTimestamp = getCrcPayoutAt(ts);\n  const value = amountFloat / payoutAtTimestamp * 24;\n\n  return value;\n  // return Math.floor(value * 100) / 100;\n}\n\n/**\n * Converts a TC amount to a CRC amount.\n * @param timestamp The point in time when the CRC transaction happened.\n * @param amount The TC value of the transaction.\n */\nexport function tcToCrc(timestamp: Date, amount: number): bigint {\n  const ts = timestamp.getTime();\n  const payoutAtTimestamp = getCrcPayoutAt(ts);\n  return parseEther((amount / 24 * payoutAtTimestamp).toString());\n}\n\n/**\n * Converts a CIDv0 string to a UInt8Array, stripping the hashing algorithm identifier.\n * @param {string} cidV0 - The CIDv0 string (e.g., Qm...).\n * @returns {Uint8Array} - The resulting UInt8Array of the 32-byte hash digest.\n */\nexport function cidV0ToUint8Array(cidV0: string) {\n  // Decode the base58 CIDv0 string to a Multihash\n  const multihashBytes = multihash.fromB58String(cidV0);\n\n  // Verify the multihash algorithm (should be SHA-256)\n  const decodedMultihash = multihash.decode(multihashBytes);\n  if (decodedMultihash.code !== multihash.names['sha2-256']) {\n    throw new Error('Unsupported hash algorithm. Only SHA-256 is supported for CIDv0.');\n  }\n\n  // Extract and return the 32-byte hash digest\n  return decodedMultihash.digest;\n}\n\n/**\n * Converts a 32-byte UInt8Array back to a CIDv0 string by adding the hashing algorithm identifier.\n * @param {Uint8Array} uint8Array - The 32-byte hash digest.\n * @returns {string} - The resulting CIDv0 string (e.g., Qm...).\n */\nexport function uint8ArrayToCidV0(uint8Array: Uint8Array) {\n  if (uint8Array.length !== 32) {\n    throw new Error('Invalid array length. Expected 32 bytes.');\n  }\n\n  // Recreate the Multihash (prefix with SHA-256 code and length)\n  const multihashBytes = multihash.encode(uint8Array, 'sha2-256');\n\n  // Encode the Multihash as a base58 CIDv0 string\n  return multihash.toB58String(multihashBytes);\n}\n\n/**\n * Converts a Uint8Array to a hex string.\n * @param uint8Array - The Uint8Array to convert.\n */\nexport function uint8ArrayToHexString(uint8Array: Uint8Array) {\n  return Array.from(uint8Array).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Converts a hex string to a Uint8Array.\n * @param {string} hexString - The hex string to convert.\n * @returns {Uint8Array} - The resulting Uint8Array.\n */\nexport function hexStringToUint8Array(hexString: string) {\n  const bytes = [];\n  for (let i = 0; i < hexString.length; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16));\n  }\n  return new Uint8Array(bytes);\n}\n\nexport function addressToUInt256(address: string): bigint {\n  // Remove the '0x' prefix if it exists\n  if (address.startsWith('0x')) {\n    address = address.slice(2);\n  }\n\n  // Convert the address to a BigInt\n  return BigInt('0x' + address);\n}\n\nexport function uint256ToAddress(uint256: bigint): string {\n  // Convert the BigInt to a hex string\n  let hexString = uint256.toString(16);\n\n  // Add leading zeros to ensure the string length is 40\n  hexString = hexString.padStart(40, '0');\n\n  // Add the '0x' prefix\n  return '0x' + hexString;\n}", "import { PagedQueryParams } from './pagedQueryParams';\nimport { Cursor } from './cursor';\nimport { CirclesQueryParams } from '../rpcSchema/circlesQueryParams';\nimport { JsonRpcResponse } from '../rpcSchema/jsonRpcResponse';\nimport { Filter } from '../rpcSchema/filter';\nimport { Order } from '../rpcSchema/order';\nimport { PagedQueryResult } from './pagedQueryResult';\nimport { EventRow } from './eventRow';\nimport { CirclesRpc } from '../circlesRpc';\nimport { CirclesQueryRpcResult } from '../circlesQueryRpcResult';\n\nexport class CalculatedColumn {\n  constructor(public readonly name: string\n    , public readonly generator: (row: any) => Promise<any>) {\n  }\n}\n\n/**\n * A class for querying Circles RPC nodes with pagination.\n * The class maintains the state of the current page and provides methods for querying the next pages.\n *\n * Usage:\n * 1. Create a new instance of CirclesQuery with the CirclesRpc instance and the query parameters.\n * 2. Call queryNextPage() to get the next page of results.\n * 3. Access the results and cursors from the currentPage property.\n * 4. Repeat step 2 until there are no more results.\n *\n * @typeParam TRow The type of the rows returned by the query.\n */\nexport class CirclesQuery<TRow extends EventRow> {\n  private readonly params: PagedQueryParams;\n  private readonly rpc: CirclesRpc;\n\n  /**\n   * The current page of the query (or undefined).\n   */\n  get currentPage(): PagedQueryResult<TRow> | undefined {\n    return this._currentPage;\n  }\n\n  private _currentPage?: PagedQueryResult<TRow>;\n\n  private _calculatedColumns: {\n    [name: string]: CalculatedColumn\n  } = {};\n\n  constructor(rpc: CirclesRpc, params: PagedQueryParams, calculatedColumns?: CalculatedColumn[]) {\n    this.params = params;\n    this.rpc = rpc;\n\n    if (!calculatedColumns) {\n      return;\n    }\n\n    calculatedColumns.forEach(column => {\n      this._calculatedColumns[column.name] = column;\n    });\n  }\n\n  /**\n   * Builds the order by clause for a paged query.\n   * Always orders by blockNumber, transactionIndex, and logIndex.\n   * If the table is TransferBatch, also orders by batchIndex.\n   * @param params The query parameters.\n   * @private\n   */\n  private buildOrderBy(params: PagedQueryParams) {\n    const order: Order[] = [{\n      Column: 'blockNumber',\n      SortOrder: params.sortOrder\n    }, {\n      Column: 'transactionIndex',\n      SortOrder: params.sortOrder\n    }, {\n      Column: 'logIndex',\n      SortOrder: params.sortOrder\n    }];\n\n    if (params.table === 'TransferBatch') {\n      // TODO: Find a better way to handle this.\n      order.push({\n        Column: 'batchIndex',\n        SortOrder: params.sortOrder\n      });\n    }\n\n    return order;\n  }\n\n  /**\n   * Builds the cursor filter for a paged query.\n   * Depending on the sort order, the cursor filter will be either greater than or less than the existing cursor.\n   * @param params The query parameters.\n   * @param cursor The cursor to use or undefined to start from the beginning/end depending on the sort order.\n   * @private\n   */\n  private buildCursorFilter(params: PagedQueryParams, cursor?: Cursor) {\n    if (!cursor) {\n      return undefined;\n    }\n\n    const sortOrder = params.sortOrder === 'ASC' ? 'GreaterThan' : 'LessThan';\n\n    // Add primary filter for blockNumber\n    const blockNumberFilter: Filter = {\n      Type: 'FilterPredicate',\n      FilterType: sortOrder,\n      Column: 'blockNumber',\n      Value: cursor.blockNumber\n    };\n\n    // Create compound filter for transactionIndex, logIndex, and batchIndex\n    const subFilters: Filter[] = [];\n\n    // Filter for transactionIndex if blockNumber is equal\n    subFilters.push({\n      Type: 'Conjunction',\n      ConjunctionType: 'And',\n      Predicates: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'blockNumber',\n          Value: cursor.blockNumber\n        },\n        {\n          Type: 'FilterPredicate',\n          FilterType: sortOrder,\n          Column: 'transactionIndex',\n          Value: cursor.transactionIndex\n        }\n      ]\n    });\n\n    // Filter for logIndex if blockNumber and transactionIndex are equal\n    subFilters.push({\n      Type: 'Conjunction',\n      ConjunctionType: 'And',\n      Predicates: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'blockNumber',\n          Value: cursor.blockNumber\n        },\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'transactionIndex',\n          Value: cursor.transactionIndex\n        },\n        {\n          Type: 'FilterPredicate',\n          FilterType: sortOrder,\n          Column: 'logIndex',\n          Value: cursor.logIndex\n        }\n      ]\n    });\n\n    // Filter for batchIndex if applicable and all previous columns are equal\n    if (params.table === 'TransferBatch') {\n      subFilters.push({\n        Type: 'Conjunction',\n        ConjunctionType: 'And',\n        Predicates: [\n          {\n            Type: 'FilterPredicate',\n            FilterType: 'Equals',\n            Column: 'blockNumber',\n            Value: cursor.blockNumber\n          },\n          {\n            Type: 'FilterPredicate',\n            FilterType: 'Equals',\n            Column: 'transactionIndex',\n            Value: cursor.transactionIndex\n          },\n          {\n            Type: 'FilterPredicate',\n            FilterType: 'Equals',\n            Column: 'logIndex',\n            Value: cursor.logIndex\n          },\n          {\n            Type: 'FilterPredicate',\n            FilterType: sortOrder,\n            Column: 'batchIndex',\n            Value: cursor.batchIndex\n          }\n        ]\n      });\n    }\n\n    // Combine the primary and compound filters into a single filter\n    const combinedFilter: Filter = {\n      Type: 'Conjunction',\n      ConjunctionType: 'Or',\n      Predicates: [\n        blockNumberFilter,\n        ...subFilters\n      ]\n    };\n\n    return [combinedFilter];\n  }\n\n\n  /**\n   * Combines two filters into a single filter.\n   * The filters are always combined with an 'And' conjunction.\n   * @param filter1 The first filter or undefined.\n   * @param filter2 The second filter or undefined.\n   * @returns The combined filter or an empty array if both filters are undefined or empty.\n   * @private\n   */\n  private combineFilters(filter1?: Filter[], filter2?: Filter[]): Filter[] {\n    if (!filter1 && !filter2) {\n      return [];\n    }\n\n    if (!filter1) {\n      return filter2 ?? [];\n    }\n\n    if (!filter2) {\n      return filter1;\n    }\n\n    return [<Filter>{\n      Type: 'Conjunction',\n      ConjunctionType: 'And',\n      Predicates: [\n        ...filter1,\n        ...filter2\n      ]\n    }];\n  }\n\n  /**\n   * Sends a `circles_query` call to a Circles Rpc node and returns the result as an array of objects.\n   * @param method The method to call.\n   * @param param The request parameters.\n   * @private\n   */\n  private async request(method: string, param: CirclesQueryParams): Promise<TRow[]> {\n    const jsonResponse = await this.rpc.call<CirclesQueryRpcResult>(method, [param]);\n    return await this.rowsToObjects(jsonResponse);\n  }\n\n  /**\n   * Converts the rows from a Circles RPC response to an array of objects.\n   * @param jsonResponse The JSON-RPC response.\n   * @private\n   */\n  private async rowsToObjects(jsonResponse: JsonRpcResponse<CirclesQueryRpcResult>): Promise<TRow[]> {\n    const { columns, rows } = jsonResponse.result;\n\n    const calculatedColumns = Object.entries(this._calculatedColumns);\n    if (calculatedColumns.length > 0) {\n      calculatedColumns.forEach(col => columns.push(col[0]));\n    }\n\n    const rowObjects = await Promise.all(rows.map(async row => {\n      const rowObj: Record<string, any> = {};\n      row.forEach((value, index) => {\n        rowObj[columns[index]] = value;\n      });\n\n      for (const [name, column] of calculatedColumns) {\n        rowObj[name] = await column.generator(rowObj);\n      }\n\n      return rowObj;\n    }));\n\n    return rowObjects as TRow[];\n  }\n\n  /**\n   * Converts a row from a query result to a cursor.\n   * The cursor is an object with the blockNumber, transactionIndex, logIndex, and optional batchIndex properties.\n   * @param resultElement The row from the query result.\n   * @private\n   */\n  private rowToCursor(resultElement: TRow): Cursor {\n    return {\n      blockNumber: resultElement.blockNumber as number,\n      transactionIndex: resultElement.transactionIndex as number,\n      logIndex: resultElement.logIndex as number,\n      batchIndex: !resultElement.batchIndex ? undefined : resultElement.batchIndex as number\n    };\n  }\n\n  /**\n   * Builds a cursor from the first or last row of a query result.\n   * If the result is empty, returns null.\n   * @param result The query result.\n   * @private\n   */\n  private getFirstAndLastCursor(result: TRow[]): {\n    first: Cursor,\n    last: Cursor\n  } | null {\n    if (result.length === 0) {\n      return null;\n    }\n\n    const first = this.rowToCursor(result[0]);\n    const last = this.rowToCursor(result[result.length - 1]);\n\n    return { first, last };\n  }\n\n  /**\n   * Queries the next page of a paged query.\n   * @returns True if the query returned rows, false if there are no more results.\n   */\n  public async queryNextPage(): Promise<boolean> {\n    const orderBy = this.buildOrderBy(this.params);\n    const filter = this.buildCursorFilter(this.params, this._currentPage?.lastCursor);\n    const combinedFilter = this.combineFilters(this.params.filter, filter);\n\n    const queryParams: CirclesQueryParams = {\n      Namespace: this.params.namespace,\n      Table: this.params.table,\n      Columns: this.params.columns,\n      Filter: combinedFilter,\n      Order: orderBy,\n      Limit: this.params.limit\n    };\n\n    const result = await this.request('circles_query', queryParams);\n    const cursors = this.getFirstAndLastCursor(result);\n\n    this._currentPage = {\n      limit: this.params.limit,\n      size: result.length,\n      firstCursor: cursors?.first,\n      lastCursor: cursors?.last,\n      sortOrder: this.params.sortOrder,\n      results: result\n    };\n\n    return result.length > 0;\n  }\n\n  /**\n   * Queries a single row from the Circles RPC node.\n   */\n  public async getSingleRow(): Promise<TRow | undefined> {\n    const orderBy = this.buildOrderBy(this.params);\n    const filter = this.buildCursorFilter(this.params, this._currentPage?.lastCursor);\n    const combinedFilter = this.combineFilters(this.params.filter, filter);\n\n    const queryParams: CirclesQueryParams = {\n      Namespace: this.params.namespace,\n      Table: this.params.table,\n      Columns: this.params.columns,\n      Filter: combinedFilter,\n      Order: orderBy,\n      Limit: 1\n    };\n\n    const result = await this.request('circles_query', queryParams);\n    return result.length > 0 ? result[0] : undefined;\n  }\n}", "export type ObservableAndEmitter<TValue> = {\n  property: Observable<TValue>;\n  emit: (value: TValue) => void;\n}\n\nexport class Observable<TEvent> {\n  private readonly _subscribers: ((event: TEvent) => void)[] = [];\n\n  subscribe(subscriber: (value: TEvent) => void): (() => void) {\n    this._subscribers.push(subscriber);\n    return () => {\n      this._subscribers.splice(this._subscribers.indexOf(subscriber), 1);\n    };\n  }\n\n  protected constructor() {\n    this._subscribers = [];\n  }\n\n  protected emit(value: TEvent) {\n    this._subscribers.forEach(sub => sub(value));\n  }\n\n  public static create<T>(): ObservableAndEmitter<T> {\n    const prop = new Observable<T>();\n    return {\n      property: prop,\n      emit: (e) => prop.emit(e)\n    };\n  }\n}", "import {CirclesEvent, CirclesEventType} from './events';\n\ntype EventValues = {\n  [key: string]: string;\n};\n\nexport type RcpSubscriptionEvent = {\n  event: string;\n  values: EventValues;\n};\n\ntype RpcSubscriptionMessage = RcpSubscriptionEvent[];\n\nconst hexToBigInt = (hex: string): bigint => BigInt(hex);\nconst hexToNumber = (hex: string): number => parseInt(hex, 16);\nconst hexToUint8Array = (hex: string): Uint8Array => {\n  if (hex.length % 2 !== 0) throw new Error('Invalid hex string');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    array[i / 2] = parseInt(hex.substr(i, 2), 16);\n  }\n  return array;\n};\n\nconst parseEventValues = (event: CirclesEventType, values: EventValues): CirclesEvent => {\n  const baseEvent = {\n    $event: event,\n    blockNumber: hexToNumber(values.blockNumber),\n    timestamp: values.timestamp ? hexToNumber(values.timestamp) : undefined,\n    transactionIndex: hexToNumber(values.transactionIndex),\n    logIndex: hexToNumber(values.logIndex),\n    transactionHash: values.transactionHash\n  };\n\n  switch (event) {\n    case 'CrcV1_HubTransfer':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_HubTransfer\",\n        from: values.from,\n        to: values.to,\n        amount: values.amount ? hexToBigInt(values.amount) : undefined\n      };\n    case 'CrcV1_Signup':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_Signup\",\n        user: values.user,\n        token: values.token\n      };\n    case 'CrcV1_OrganizationSignup':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_OrganizationSignup\",\n        organization: values.organization\n      };\n    case 'CrcV1_Trust':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_Trust\",\n        canSendTo: values.canSendTo,\n        user: values.user,\n        limit: values.limit ? hexToBigInt(values.limit) : undefined\n      };\n    case 'CrcV1_Transfer':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_Transfer\",\n        tokenAddress: values.tokenAddress,\n        from: values.from,\n        to: values.to,\n        amount: values.amount ? hexToBigInt(values.amount) : undefined\n      };\n    case 'CrcV2_InviteHuman':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_InviteHuman\",\n        inviter: values.inviter,\n        invited: values.invited\n      };\n    case 'CrcV2_PersonalMint':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_PersonalMint\",\n        human: values.human,\n        amount: values.amount ? hexToBigInt(values.amount) : undefined,\n        startPeriod: values.startPeriod ? hexToBigInt(values.startPeriod) : undefined,\n        endPeriod: values.endPeriod ? hexToBigInt(values.endPeriod) : undefined\n      };\n    case 'CrcV2_RegisterGroup':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_RegisterGroup\",\n        group: values.group,\n        mint: values.mint,\n        treasury: values.treasury,\n        name: values.name,\n        symbol: values.symbol\n      };\n    case 'CrcV2_RegisterHuman':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_RegisterHuman\",\n        avatar: values.avatar\n      };\n    case 'CrcV2_RegisterOrganization':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_RegisterOrganization\",\n        organization: values.organization,\n        name: values.name\n      };\n    case 'CrcV2_Stopped':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_Stopped\",\n        avatar: values.avatar\n      };\n    case 'CrcV2_Trust':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_Trust\",\n        truster: values.truster,\n        trustee: values.trustee,\n        expiryTime: values.expiryTime ? hexToBigInt(values.expiryTime) : undefined\n      };\n    case 'CrcV2_TransferSingle':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_TransferSingle\",\n        operator: values.operator,\n        from: values.from,\n        to: values.to,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined\n      };\n    case 'CrcV2_URI':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_URI\",\n        value: values.value,\n        id: values.id ? hexToBigInt(values.id) : undefined\n      };\n    case 'CrcV2_ApprovalForAll':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_ApprovalForAll\",\n        account: values.account,\n        operator: values.operator,\n        approved: values.approved === 'true'\n      };\n    case 'CrcV2_TransferBatch':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_TransferBatch\",\n        batchIndex: hexToNumber(values.batchIndex),\n        operator: values.operator,\n        from: values.from,\n        to: values.to,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined\n      };\n    case 'CrcV2_RegisterShortName':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_RegisterShortName\",\n        avatar: values.avatar,\n        shortName: values.shortName ? hexToBigInt(values.shortName) : undefined,\n        nonce: values.nonce ? hexToBigInt(values.nonce) : undefined\n      };\n    case 'CrcV2_UpdateMetadataDigest':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_UpdateMetadataDigest\",\n        avatar: values.avatar,\n        metadataDigest: values.metadataDigest ? hexToUint8Array(values.metadataDigest) : undefined\n      };\n    case 'CrcV2_CidV0':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_CidV0\",\n        avatar: values.avatar,\n        cidV0Digest: values.cidV0Digest ? hexToUint8Array(values.cidV0Digest) : undefined\n      };\n    case \"CrcV2_CreateVault\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_CreateVault\",\n        group: values.group,\n        vault: values.vault\n      };\n    case \"CrcV2_StreamCompleted\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_StreamCompleted\",\n        operator: values.operator,\n        from: values.from,\n        to: values.to,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        amount: values.amount ? hexToBigInt(values.amount) : undefined\n      };\n    case \"CrcV2_GroupMintBatch\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupMintBatch\",\n        batchIndex: parseInt(values.batchIndex),\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined,\n        userData: values.userData ? hexToUint8Array(values.userData) : undefined\n      };\n    case \"CrcV2_GroupMintSingle\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupMintSingle\",\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined,\n        userData: values.userData ? hexToUint8Array(values.userData) : undefined,\n      };\n    case \"CrcV2_GroupRedeem\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupRedeem\",\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined,\n        data: values.data ? hexToUint8Array(values.data) : undefined\n      };\n    case \"CrcV2_GroupRedeemCollateralBurn\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupRedeemCollateralBurn\",\n        batchIndex: parseInt(values.batchIndex),\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined\n      };\n    case \"CrcV2_GroupRedeemCollateralReturn\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupRedeemCollateralReturn\",\n        batchIndex: parseInt(values.batchIndex),\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined\n      };\n    default:\n      throw new Error(`Unknown event type: ${event}`);\n  }\n};\n\nexport const parseRpcSubscriptionMessage = (message: RpcSubscriptionMessage): CirclesEvent[] => {\n  return message.map(result => parseEventValues(<CirclesEventType>result.event, result.values));\n};", "import {CirclesQuery} from './pagedQuery/circlesQuery';\nimport {TransactionHistoryRow} from './rows/transactionHistoryRow';\nimport {TrustListRow} from './rows/trustListRow';\nimport {TokenBalanceRow} from './rows/tokenBalanceRow';\nimport {CirclesRpc} from './circlesRpc';\nimport {AvatarRow} from './rows/avatarRow';\nimport {crcToTc, hexStringToUint8Array, uint8ArrayToCidV0} from '@circles-sdk/utils';\nimport {ethers} from 'ethers';\nimport {TrustRelation, TrustRelationRow} from './rows/trustRelationRow';\nimport {CirclesDataInterface, GroupQueryParams} from './circlesDataInterface';\nimport {Observable} from './observable';\nimport {CirclesEvent} from './events/events';\nimport {InvitationRow} from './rows/invitationRow';\nimport {PagedQueryParams} from './pagedQuery/pagedQueryParams';\nimport {Filter} from './rpcSchema/filter';\nimport {GroupMembershipRow} from './rows/groupMembershipRow';\nimport {GroupRow} from './rows/groupRow';\nimport {TokenInfoRow} from './rows/tokenInfoRow';\nimport {parseRpcSubscriptionMessage, RcpSubscriptionEvent} from './events/parser';\n\nexport type TrustEvent = {\n  blockNumber: number;\n  timestamp: number;\n  transactionIndex: number;\n  logIndex: number;\n  transactionHash: string;\n  trustee: string;\n  truster: string;\n  expiryTime: number;\n};\n\nexport class CirclesData implements CirclesDataInterface {\n  readonly rpc: CirclesRpc;\n\n  constructor(rpc: CirclesRpc) {\n    this.rpc = rpc;\n  }\n\n  /**\n   * Gets the total CRC v1 balance of an address.\n   * @param avatar The address to get the CRC balance for.\n   * @param asTimeCircles Whether to return the balance as TimeCircles or not (default: true).\n   */\n  async getTotalBalance(avatar: string, asTimeCircles: boolean = true): Promise<string> {\n    const response = await this.rpc.call<string>('circles_getTotalBalance', [avatar, asTimeCircles]);\n    return response.result;\n  }\n\n  /**\n   * Gets the total CRC v2 balance of an address.\n   * @param avatar The address to get the CRC balance for.\n   * @param asTimeCircles Whether to return the balance as TimeCircles or not (default: true).\n   */\n  async getTotalBalanceV2(avatar: string, asTimeCircles: boolean = true): Promise<string> {\n    const response = await this.rpc.call<string>('circlesV2_getTotalBalance', [avatar, asTimeCircles]);\n    return response.result;\n  }\n\n  /**\n   * Gets the detailed CRC v1 token balances of an address.\n   * @param avatar The address to get the token balances for.\n   * @param asTimeCircles Whether to return the balances as TimeCircles or not (default: true).\n   */\n  async getTokenBalances(avatar: string, asTimeCircles: boolean = true): Promise<TokenBalanceRow[]> {\n    const response = await this.rpc.call<TokenBalanceRow[]>('circles_getTokenBalances', [avatar, asTimeCircles]);\n    return response.result;\n  }\n\n  /**\n   * Gets the detailed CRC v2 token balances of an address.\n   * @param avatar The address to get the token balances for.\n   * @param asTimeCircles Whether to return the balances as TimeCircles or not (default: true).\n   */\n  async getTokenBalancesV2(avatar: string, asTimeCircles: boolean = true): Promise<TokenBalanceRow[]> {\n    const response = await this.rpc.call<TokenBalanceRow[]>('circlesV2_getTokenBalances', [avatar, asTimeCircles]);\n    return response.result;\n  }\n\n  /**\n   * Gets the transaction history of an address.\n   * This contains incoming/outgoing transactions and minting of CRC.\n   * @param avatar The address to get the transaction history for.\n   * @param pageSize The maximum number of transactions per page.\n   */\n  getTransactionHistory(avatar: string, pageSize: number): CirclesQuery<TransactionHistoryRow> {\n    return new CirclesQuery<any>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'Transfers',\n      sortOrder: 'DESC',\n      limit: pageSize,\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'batchIndex',\n        'transactionHash',\n        'version',\n        'operator',\n        'from',\n        'to',\n        'id',\n        'value'\n      ],\n      filter: [\n        {\n          Type: 'Conjunction',\n          ConjunctionType: 'Or',\n          Predicates: [\n            {\n              Type: 'FilterPredicate',\n              FilterType: 'Equals',\n              Column: 'from',\n              Value: avatar.toLowerCase()\n            },\n            {\n              Type: 'FilterPredicate',\n              FilterType: 'Equals',\n              Column: 'to',\n              Value: avatar.toLowerCase()\n            }\n          ]\n        }\n      ]\n    }, [{\n      name: 'timeCircles',\n      generator: async (row: TransactionHistoryRow) => {\n        if (row.version === 1) {\n          const timestamp = new Date(row.timestamp * 1000);\n          return crcToTc(timestamp, BigInt(row.value)).toFixed(2);\n        } else {\n          return parseFloat(ethers.formatEther(row.value)).toFixed(2);\n        }\n      }\n    }, {\n      name: 'tokenAddress',\n      generator: async (row: TransactionHistoryRow) => {\n        // If the id isset, doesn't start with 0x and only consists of digits, it's a BigInt that\n        // needs to be converted to a ethereum address. The BigInt is actually an encoded byte[20]\n        // that represents the address.\n        if (row.id && !row.id.startsWith('0x') && /^\\d+$/.test(row.id)) {\n          // UInt256 to ethereum address (use native BigInt)\n          const hexString = BigInt(row.id).toString(16).padStart(40, '0');\n          return ethers.getAddress('0x' + hexString).toLowerCase();\n        } else if (row.id && row.id.startsWith('0x')) {\n          return row.id.toLowerCase();\n        }\n      }\n    }]);\n  }\n\n  getIncomingTrustEvents(avatar: string, pageSize: number): CirclesQuery<TrustEvent> {\n    return new CirclesQuery<TrustEvent>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'TrustRelations',\n      sortOrder: 'DESC',\n      limit: pageSize,\n      columns: [\n        \"blockNumber\",\n        \"timestamp\",\n        \"transactionIndex\",\n        \"logIndex\",\n        \"transactionHash\",\n        \"trustee\",\n        \"truster\",\n        \"expiryTime\"\n      ],\n      filter: [\n        {\n          Type: 'Conjunction',\n          ConjunctionType: 'And',\n          Predicates: [{\n            Type: 'FilterPredicate',\n            FilterType: 'Equals',\n            Column: 'trustee',\n            Value: avatar.toLowerCase()\n          }, {\n            Type: 'FilterPredicate',\n            FilterType: 'IsNotNull',\n            Column: 'expiryTime',\n            Value: true\n          }]\n        }\n      ]\n    });\n  }\n\n  /**\n   * Gets the current incoming and outgoing trust relations of an address.\n   * Expired or revoked trust relations are not included.\n   * @param avatar The address to get the trust list for.\n   * @param pageSize The maximum number of trust relations per page.\n   */\n  getTrustRelations(avatar: string, pageSize: number): CirclesQuery<TrustListRow> {\n    return new CirclesQuery<any>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'TrustRelations',\n      sortOrder: 'DESC',\n      limit: pageSize,\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'version',\n        'trustee',\n        'truster',\n        'expiryTime',\n        'limit'\n      ],\n      filter: [\n        {\n          Type: 'Conjunction',\n          ConjunctionType: 'Or',\n          Predicates: [\n            {\n              Type: 'FilterPredicate',\n              FilterType: 'Equals',\n              Column: 'trustee',\n              Value: avatar.toLowerCase()\n            },\n            {\n              Type: 'FilterPredicate',\n              FilterType: 'Equals',\n              Column: 'truster',\n              Value: avatar.toLowerCase()\n            }\n          ]\n        }\n      ]\n    });\n  }\n\n  /**\n   * Gets all trust relations of an avatar and groups mutual trust relations together.\n   * @param avatarAddress The address to get the trust relations for.\n   */\n  async getAggregatedTrustRelations(avatarAddress: string): Promise<TrustRelationRow[]> {\n    const pageSize = 1000;\n    const trustsQuery = this.getTrustRelations(avatarAddress, pageSize);\n    const trustListRows: TrustListRow[] = [];\n\n    // Fetch all trust relations\n    while (await trustsQuery.queryNextPage()) {\n      const resultRows = trustsQuery.currentPage?.results ?? [];\n      if (resultRows.length === 0) break;\n      trustListRows.push(...resultRows);\n      if (resultRows.length < pageSize) break;\n    }\n\n    // Group trust list rows by truster and trustee\n    const trustBucket: { [avatar: string]: TrustListRow[] } = {};\n    trustListRows.forEach(row => {\n      if (row.truster !== avatarAddress) {\n        trustBucket[row.truster] = trustBucket[row.truster] || [];\n        trustBucket[row.truster].push(row);\n      }\n      if (row.trustee !== avatarAddress) {\n        trustBucket[row.trustee] = trustBucket[row.trustee] || [];\n        trustBucket[row.trustee].push(row);\n      }\n    });\n\n    // Determine trust relations\n    return Object.entries(trustBucket)\n      .filter(([avatar]) => avatar !== avatarAddress)\n      .map(([avatar, rows]) => {\n        const maxTimestamp = Math.max(...rows.map(o => o.timestamp));\n        let relation: TrustRelation;\n\n        if (rows.length === 2) {\n          relation = 'mutuallyTrusts';\n        } else if (rows[0].trustee === avatarAddress) {\n          relation = 'trustedBy';\n        } else if (rows[0].truster === avatarAddress) {\n          relation = 'trusts';\n        } else {\n          throw new Error(`Unexpected trust list row. Couldn't determine trust relation.`);\n        }\n\n        return {\n          subjectAvatar: avatarAddress,\n          relation: relation,\n          objectAvatar: avatar,\n          timestamp: maxTimestamp\n        };\n      });\n  }\n\n  /**\n   * Gets basic information about an avatar.\n   * This includes the signup timestamp, circles version, avatar type and token address/id.\n   * @param avatar The address to check.\n   * @returns The avatar info or undefined if the avatar is not found.\n   */\n  async getAvatarInfo(avatar: string): Promise<AvatarRow | undefined> {\n    const avatarInfos = await this.getAvatarInfos([avatar]);\n    return avatarInfos.length > 0 ? avatarInfos[0] : undefined;\n  }\n\n  /**\n   * Gets basic information about multiple avatars.\n   * @param avatars The addresses to check.\n   * @returns An array of avatar info objects.\n   */\n  async getAvatarInfos(avatars: string[]): Promise<AvatarRow[]> {\n    if (avatars.length === 0) {\n      return [];\n    }\n\n    const circlesQuery = new CirclesQuery<AvatarRow>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'Avatars',\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'version',\n        'type',\n        'avatar',\n        'tokenId',\n        'cidV0Digest'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'In',\n          Column: 'avatar',\n          Value: avatars.map(a => a.toLowerCase())\n        }\n      ],\n      sortOrder: 'ASC',\n      limit: 1000\n    }, [{\n      name: 'cidV0',\n      generator: async (row: AvatarRow) => {\n        try {\n          if (!row.cidV0Digest) {\n            return undefined;\n          }\n\n          const dataFromHexString = hexStringToUint8Array(row.cidV0Digest.substring(2));\n          return uint8ArrayToCidV0(dataFromHexString);\n        } catch (error) {\n          console.error('Failed to convert cidV0Digest to CIDv0 string:', error);\n          return undefined;\n        }\n      }\n    }]);\n\n    const results: AvatarRow[] = [];\n\n    while (await circlesQuery.queryNextPage()) {\n      const resultRows = circlesQuery.currentPage?.results ?? [];\n      if (resultRows.length === 0) break;\n      results.push(...resultRows);\n      if (resultRows.length < 1000) break;\n    }\n\n    const avatarMap: { [key: string]: AvatarRow } = {};\n\n    results.forEach(avatarRow => {\n      if (!avatarMap[avatarRow.avatar]) {\n        avatarMap[avatarRow.avatar] = avatarRow;\n      }\n\n      if (avatarRow.version === 1) {\n        avatarMap[avatarRow.avatar].hasV1 = true;\n        avatarMap[avatarRow.avatar].v1Token = avatarRow.tokenId;\n      } else {\n        avatarMap[avatarRow.avatar] = {\n          ...avatarMap[avatarRow.avatar],\n          ...avatarRow\n        };\n      }\n    });\n\n    return avatars.map(avatar => avatarMap[avatar.toLowerCase()]).filter(row => row !== undefined);\n  }\n\n  /**\n   * Gets the token info for a given token address.\n   * @param address The address of the token.\n   * @returns The token info or undefined if the token is not found.\n   */\n  async getTokenInfo(address: string): Promise<TokenInfoRow | undefined> {\n    const circlesQuery = new CirclesQuery<TokenInfoRow>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'Avatars',\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'version',\n        'type',\n        'avatar',\n        'tokenId'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'tokenId',\n          Value: address.toLowerCase()\n        }\n      ],\n      sortOrder: 'ASC',\n      limit: 1\n    });\n\n    return await circlesQuery.getSingleRow();\n  }\n\n  /**\n   * Subscribes to Circles events.\n   * @param avatar The avatar to subscribe to. If not provided, all events are subscribed to.\n   */\n  subscribeToEvents(avatar?: string): Promise<Observable<CirclesEvent>> {\n    return this.rpc.subscribe(avatar);\n  }\n\n  /**\n   * Gets the events for a given avatar in a block range.\n   * @param avatar The avatar to get the events for.\n   * @param fromBlock The block number to start from.\n   * @param toBlock The block number to end at. If not provided, the latest block is used.\n   */\n  async getEvents(avatar: string, fromBlock: number, toBlock?: number): Promise<CirclesEvent[]> {\n    const response = await this.rpc.call<RcpSubscriptionEvent[]>(\n      'circles_events',\n      [avatar, fromBlock, toBlock]\n    );\n    return parseRpcSubscriptionMessage(response.result);\n  }\n\n  /**\n   * Gets the invitations sent by an avatar.\n   * @param avatar The avatar to get the invitations for.\n   * @param pageSize The maximum number of invitations per page.\n   * @returns A CirclesQuery object to fetch the invitations.\n   */\n  getInvitations(avatar: string, pageSize: number): CirclesQuery<InvitationRow> {\n    return new CirclesQuery<InvitationRow>(this.rpc, {\n      namespace: 'CrcV2',\n      table: 'InviteHuman',\n      columns: [\n        'blockNumber',\n        'transactionIndex',\n        'logIndex',\n        'timestamp',\n        'transactionHash',\n        'inviter',\n        'invited'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'inviter',\n          Value: avatar.toLowerCase()\n        }\n      ],\n      sortOrder: 'DESC',\n      limit: pageSize\n    });\n  }\n\n  /**\n   * Gets the avatar that invited the given avatar.\n   * @param avatar The address of the invited avatar.\n   * @returns The address of the inviting avatar or undefined if not found.\n   */\n  async getInvitedBy(avatar: string): Promise<string | undefined> {\n    const circlesQuery = new CirclesQuery<InvitationRow>(this.rpc, {\n      namespace: 'CrcV2',\n      table: 'InviteHuman',\n      columns: [\n        'inviter'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'invited',\n          Value: avatar.toLowerCase()\n        }\n      ],\n      sortOrder: 'DESC',\n      limit: 1\n    });\n\n    const page = await circlesQuery.queryNextPage();\n    if (!page) {\n      return undefined;\n    }\n\n    return circlesQuery.currentPage?.results[0].inviter;\n  }\n\n  /**\n   * Gets the list of groups.\n   * @param pageSize The maximum number of groups per page.\n   * @param params The query parameters to filter the groups.\n   */\n  findGroups(pageSize: number, params?: GroupQueryParams): CirclesQuery<GroupRow> {\n    const queryDefintion: PagedQueryParams = {\n      namespace: 'V_CrcV2',\n      table: 'Groups',\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'group',\n        'mint',\n        'treasury',\n        'name',\n        'symbol',\n        'cidV0Digest',\n      ],\n      sortOrder: 'DESC',\n      limit: pageSize\n    };\n\n    if (!params) {\n      return new CirclesQuery<GroupRow>(this.rpc, queryDefintion);\n    }\n\n    let filter: Filter[] = [];\n\n    if (params.nameStartsWith) {\n      filter.push({\n        Type: 'FilterPredicate',\n        FilterType: 'Like',\n        Column: 'name',\n        Value: params.symbolStartsWith + '%'\n      });\n    }\n\n    if (params.symbolStartsWith) {\n      filter.push({\n        Type: 'FilterPredicate',\n        FilterType: 'Like',\n        Column: 'symbol',\n        Value: params.symbolStartsWith + '%'\n      });\n    }\n\n    if (params.groupAddressIn) {\n      filter.push({\n        Type: 'FilterPredicate',\n        FilterType: 'In',\n        Column: 'group',\n        Value: params.groupAddressIn\n      });\n    }\n\n    if (filter.length > 1) {\n      filter = [{\n        Type: 'Conjunction',\n        Predicates: filter,\n        ConjunctionType: 'And'\n      }];\n    }\n\n    queryDefintion.filter = filter;\n\n    return new CirclesQuery<any>(this.rpc, queryDefintion);\n  }\n\n  /**\n   * Gets the group memberships of an avatar.\n   * @param avatar The avatar to get the group memberships for.\n   * @param pageSize The maximum number of group memberships per page.\n   */\n  getGroupMemberships(avatar: string, pageSize: number): CirclesQuery<GroupMembershipRow> {\n    return new CirclesQuery<GroupMembershipRow>(this.rpc, {\n      namespace: 'V_CrcV2',\n      table: 'GroupMemberships',\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'group',\n        'member',\n        'expiryTime'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'member',\n          Value: avatar.toLowerCase()\n        }\n      ],\n      sortOrder: 'DESC',\n      limit: pageSize\n    });\n  }\n}", "import { JsonRpcRequest } from './rpcSchema/jsonRpcRequest';\nimport { JsonRpcResponse } from './rpcSchema/jsonRpcResponse';\nimport { Observable } from './observable';\nimport { CirclesEvent } from './events/events';\nimport { parseRpcSubscriptionMessage } from './events/parser';\n\nexport class CirclesRpc {\n  private readonly rpcUrl: string;\n  private idCounter = 0;\n\n  private websocket: WebSocket | null = null;\n  private websocketConnected = false;\n  private pendingResponses: Record<any, any> = {};\n  private subscriptionListeners: {\n    [subscriptionId: string]: ((event: { event: string, values: Record<string, any> }[]) => void)[]\n  } = {};\n\n  constructor(rpcUrl: string) {\n    this.rpcUrl = rpcUrl;\n  }\n\n  public async call<TResult>(method: string, params: any[]) {\n    const requestBody: JsonRpcRequest = {\n      jsonrpc: '2.0',\n      id: this.idCounter++,\n      method: method,\n      params: params\n    };\n\n    const response = await fetch(this.rpcUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    const jsonResponse: JsonRpcResponse<TResult> = await response.json();\n\n    if (!jsonResponse.result) {\n      throw new Error(`RPC Error: ${JSON.stringify(jsonResponse)}`);\n    }\n    return jsonResponse;\n  }\n\n  private connect() {\n    return new Promise<void>((resolve, reject) => {\n      let wsUrl = this.rpcUrl.replace('http', 'ws');\n      if (wsUrl.endsWith('/')) {\n        wsUrl += 'ws';\n      } else {\n        wsUrl += '/ws';\n      }\n      this.websocket = new WebSocket(wsUrl);\n\n      this.websocket.onopen = () => {\n        resolve();\n      };\n\n      this.websocket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        const { id, method, params } = message;\n\n        if (id !== undefined && this.pendingResponses[id]) {\n          this.pendingResponses[id].resolve(message);\n          delete this.pendingResponses[id];\n        }\n\n        if (method === 'eth_subscription' && params) {\n          const { subscription, result } = params;\n          if (this.subscriptionListeners[subscription]) {\n            this.subscriptionListeners[subscription].forEach(listener => listener(result));\n          }\n        }\n      };\n      this.websocket.onclose = () => {\n        this.websocketConnected = false;\n      };\n      this.websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        reject(error);\n      };\n    });\n  }\n\n  private sendMessage(method: string, params: Record<any, any>, timeout = 5000): Promise<any> {\n    if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN) {\n      return Promise.reject('WebSocket is not connected');\n    }\n    const id = this.idCounter++;\n    const message = { jsonrpc: '2.0', method, params, id };\n    return new Promise((resolve, reject) => {\n      this.pendingResponses[id] = { resolve, reject };\n      this.websocket!.send(JSON.stringify(message));\n\n      setTimeout(() => {\n        if (this.pendingResponses[id]) {\n          this.pendingResponses[id].reject('Request timed out');\n          delete this.pendingResponses[id];\n        }\n      }, timeout);\n    });\n  }\n\n  public async subscribe(address?: string): Promise<Observable<CirclesEvent>> {\n    if (!this.websocketConnected) {\n      await this.connect();\n      this.websocketConnected = true;\n    }\n    const observable = Observable.create<CirclesEvent>();\n    const subscriptionArgs = JSON.stringify(address ? { address } : {});\n    const response = await this.sendMessage('eth_subscribe', ['circles', subscriptionArgs]);\n    const subscriptionId = response.result;\n    if (!this.subscriptionListeners[subscriptionId]) {\n      this.subscriptionListeners[subscriptionId] = [];\n    }\n    this.subscriptionListeners[subscriptionId].push((events) => {\n      parseRpcSubscriptionMessage(events).forEach(event => observable.emit(event));\n    });\n\n    // TODO: Add unsubscribe method to observable\n    return observable.property;\n  }\n}", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type {\n  Signer,\n  BigNumberish,\n  AddressLike,\n  ContractDeployTransaction,\n  ContractRunner,\n} from \"ethers\";\nimport type { NonPayableOverrides } from \"../common\";\nimport type { Hub, HubInterface } from \"../Hub\";\n\nconst _abi = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_hubV1\",\n        type: \"address\",\n        internalType: \"contract IHubV1\",\n      },\n      {\n        name: \"_nameRegistry\",\n        type: \"address\",\n        internalType: \"contract INameRegistry\",\n      },\n      {\n        name: \"_migration\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_liftERC20\",\n        type: \"address\",\n        internalType: \"contract IERC20Lift\",\n      },\n      {\n        name: \"_standardTreasury\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_inflationDayZero\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_bootstrapTime\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_gatewayUrl\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"advancedUsageFlags\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"avatars\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"balanceOf\",\n    inputs: [\n      {\n        name: \"_account\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_id\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"balanceOfBatch\",\n    inputs: [\n      {\n        name: \"_accounts\",\n        type: \"address[]\",\n        internalType: \"address[]\",\n      },\n      {\n        name: \"_ids\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"balanceOfOnDay\",\n    inputs: [\n      {\n        name: \"_account\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_id\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_day\",\n        type: \"uint64\",\n        internalType: \"uint64\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"balanceOnDay_\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"discountCost_\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"burn\",\n    inputs: [\n      {\n        name: \"_id\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_amount\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_data\",\n        type: \"bytes\",\n        internalType: \"bytes\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"calculateIssuance\",\n    inputs: [\n      {\n        name: \"_human\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"calculateIssuanceWithCheck\",\n    inputs: [\n      {\n        name: \"_human\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"convertDemurrageToInflationaryValue\",\n    inputs: [\n      {\n        name: \"_demurrageValue\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_dayUpdated\",\n        type: \"uint64\",\n        internalType: \"uint64\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"convertInflationaryToDemurrageValue\",\n    inputs: [\n      {\n        name: \"_inflationaryValue\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_day\",\n        type: \"uint64\",\n        internalType: \"uint64\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"day\",\n    inputs: [\n      {\n        name: \"_timestamp\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint64\",\n        internalType: \"uint64\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"groupMint\",\n    inputs: [\n      {\n        name: \"_group\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_collateralAvatars\",\n        type: \"address[]\",\n        internalType: \"address[]\",\n      },\n      {\n        name: \"_amounts\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n      {\n        name: \"_data\",\n        type: \"bytes\",\n        internalType: \"bytes\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"inflationDayZero\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"isApprovedForAll\",\n    inputs: [\n      {\n        name: \"_account\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_operator\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"isGroup\",\n    inputs: [\n      {\n        name: \"_group\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"isHuman\",\n    inputs: [\n      {\n        name: \"_human\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"isOrganization\",\n    inputs: [\n      {\n        name: \"_organization\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"isPermittedFlow\",\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_circlesAvatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"isTrusted\",\n    inputs: [\n      {\n        name: \"_truster\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_trustee\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"migrate\",\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_avatars\",\n        type: \"address[]\",\n        internalType: \"address[]\",\n      },\n      {\n        name: \"_amounts\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"mintPolicies\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"operateFlowMatrix\",\n    inputs: [\n      {\n        name: \"_flowVertices\",\n        type: \"address[]\",\n        internalType: \"address[]\",\n      },\n      {\n        name: \"_flow\",\n        type: \"tuple[]\",\n        internalType: \"struct TypeDefinitions.FlowEdge[]\",\n        components: [\n          {\n            name: \"streamSinkId\",\n            type: \"uint16\",\n            internalType: \"uint16\",\n          },\n          {\n            name: \"amount\",\n            type: \"uint192\",\n            internalType: \"uint192\",\n          },\n        ],\n      },\n      {\n        name: \"_streams\",\n        type: \"tuple[]\",\n        internalType: \"struct TypeDefinitions.Stream[]\",\n        components: [\n          {\n            name: \"sourceCoordinate\",\n            type: \"uint16\",\n            internalType: \"uint16\",\n          },\n          {\n            name: \"flowEdgeIds\",\n            type: \"uint16[]\",\n            internalType: \"uint16[]\",\n          },\n          {\n            name: \"data\",\n            type: \"bytes\",\n            internalType: \"bytes\",\n          },\n        ],\n      },\n      {\n        name: \"_packedCoordinates\",\n        type: \"bytes\",\n        internalType: \"bytes\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"personalMint\",\n    inputs: [],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"registerCustomGroup\",\n    inputs: [\n      {\n        name: \"_mint\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_treasury\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_name\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"_symbol\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"_metadataDigest\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"registerGroup\",\n    inputs: [\n      {\n        name: \"_mint\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_name\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"_symbol\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"_metadataDigest\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"registerHuman\",\n    inputs: [\n      {\n        name: \"_inviter\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_metadataDigest\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"registerOrganization\",\n    inputs: [\n      {\n        name: \"_name\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"_metadataDigest\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"safeBatchTransferFrom\",\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_ids\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n      {\n        name: \"_values\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n      {\n        name: \"_data\",\n        type: \"bytes\",\n        internalType: \"bytes\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"safeTransferFrom\",\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_id\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_data\",\n        type: \"bytes\",\n        internalType: \"bytes\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"setAdvancedUsageFlag\",\n    inputs: [\n      {\n        name: \"_flag\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"setApprovalForAll\",\n    inputs: [\n      {\n        name: \"_operator\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_approved\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"stop\",\n    inputs: [],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"stopped\",\n    inputs: [\n      {\n        name: \"_human\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"supportsInterface\",\n    inputs: [\n      {\n        name: \"_interfaceId\",\n        type: \"bytes4\",\n        internalType: \"bytes4\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"toTokenId\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"totalSupply\",\n    inputs: [\n      {\n        name: \"_id\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"treasuries\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"trust\",\n    inputs: [\n      {\n        name: \"_trustReceiver\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_expiry\",\n        type: \"uint96\",\n        internalType: \"uint96\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"trustMarkers\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"previous\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"expiry\",\n        type: \"uint96\",\n        internalType: \"uint96\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"uri\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"wrap\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_amount\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"_type\",\n        type: \"uint8\",\n        internalType: \"enum CirclesType\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"event\",\n    name: \"ApprovalForAll\",\n    inputs: [\n      {\n        name: \"account\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"operator\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"approved\",\n        type: \"bool\",\n        indexed: false,\n        internalType: \"bool\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"PersonalMint\",\n    inputs: [\n      {\n        name: \"human\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"amount\",\n        type: \"uint256\",\n        indexed: false,\n        internalType: \"uint256\",\n      },\n      {\n        name: \"startPeriod\",\n        type: \"uint256\",\n        indexed: false,\n        internalType: \"uint256\",\n      },\n      {\n        name: \"endPeriod\",\n        type: \"uint256\",\n        indexed: false,\n        internalType: \"uint256\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"RegisterGroup\",\n    inputs: [\n      {\n        name: \"group\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"mint\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"treasury\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"name\",\n        type: \"string\",\n        indexed: false,\n        internalType: \"string\",\n      },\n      {\n        name: \"symbol\",\n        type: \"string\",\n        indexed: false,\n        internalType: \"string\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"RegisterHuman\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"RegisterOrganization\",\n    inputs: [\n      {\n        name: \"organization\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"name\",\n        type: \"string\",\n        indexed: false,\n        internalType: \"string\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"Stopped\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"StreamCompleted\",\n    inputs: [\n      {\n        name: \"operator\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"from\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"to\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"ids\",\n        type: \"uint256[]\",\n        indexed: false,\n        internalType: \"uint256[]\",\n      },\n      {\n        name: \"amounts\",\n        type: \"uint256[]\",\n        indexed: false,\n        internalType: \"uint256[]\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"TransferBatch\",\n    inputs: [\n      {\n        name: \"operator\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"from\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"to\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"ids\",\n        type: \"uint256[]\",\n        indexed: false,\n        internalType: \"uint256[]\",\n      },\n      {\n        name: \"values\",\n        type: \"uint256[]\",\n        indexed: false,\n        internalType: \"uint256[]\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"TransferSingle\",\n    inputs: [\n      {\n        name: \"operator\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"from\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"to\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"id\",\n        type: \"uint256\",\n        indexed: false,\n        internalType: \"uint256\",\n      },\n      {\n        name: \"value\",\n        type: \"uint256\",\n        indexed: false,\n        internalType: \"uint256\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"Trust\",\n    inputs: [\n      {\n        name: \"truster\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"trustee\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"expiryTime\",\n        type: \"uint256\",\n        indexed: false,\n        internalType: \"uint256\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"URI\",\n    inputs: [\n      {\n        name: \"value\",\n        type: \"string\",\n        indexed: false,\n        internalType: \"string\",\n      },\n      {\n        name: \"id\",\n        type: \"uint256\",\n        indexed: true,\n        internalType: \"uint256\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAddressCannotBeZero\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAmountMustNotBeZero\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAmountOverflow\",\n    inputs: [\n      {\n        name: \"amount\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesArrayMustNotBeEmpty\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesArraysLengthMismatch\",\n    inputs: [\n      {\n        name: \"lengthArray1\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"lengthArray2\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAvatarMustBeRegistered\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesDemurrageAmountExceedsMaxUint190\",\n    inputs: [\n      {\n        name: \"account\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"circlesId\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"amount\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesDemurrageDayBeforeLastUpdatedDay\",\n    inputs: [\n      {\n        name: \"account\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"circlesId\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"day\",\n        type: \"uint64\",\n        internalType: \"uint64\",\n      },\n      {\n        name: \"lastUpdatedDay\",\n        type: \"uint64\",\n        internalType: \"uint64\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesERC1155CannotReceiveBatch\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesERC1155MintBlocked\",\n    inputs: [\n      {\n        name: \"human\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"mintV1Status\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubAvatarAlreadyRegistered\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubFlowEdgeIsNotPermitted\",\n    inputs: [\n      {\n        name: \"receiver\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"circlesId\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubFlowEdgeStreamMismatch\",\n    inputs: [\n      {\n        name: \"flowEdgeId\",\n        type: \"uint16\",\n        internalType: \"uint16\",\n      },\n      {\n        name: \"streamId\",\n        type: \"uint16\",\n        internalType: \"uint16\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubFlowVerticesMustBeSorted\",\n    inputs: [],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubGroupIsNotRegistered\",\n    inputs: [\n      {\n        name: \"group\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubGroupMintPolicyRejectedBurn\",\n    inputs: [\n      {\n        name: \"burner\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"group\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"amount\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"data\",\n        type: \"bytes\",\n        internalType: \"bytes\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubGroupMintPolicyRejectedMint\",\n    inputs: [\n      {\n        name: \"minter\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"group\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"collateral\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n      {\n        name: \"amounts\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n      {\n        name: \"data\",\n        type: \"bytes\",\n        internalType: \"bytes\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubInvalidTrustReceiver\",\n    inputs: [\n      {\n        name: \"trustReceiver\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubMustBeHuman\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubNettedFlowMismatch\",\n    inputs: [\n      {\n        name: \"vertexPosition\",\n        type: \"uint16\",\n        internalType: \"uint16\",\n      },\n      {\n        name: \"matrixNettedFlow\",\n        type: \"int256\",\n        internalType: \"int256\",\n      },\n      {\n        name: \"streamNettedFlow\",\n        type: \"int256\",\n        internalType: \"int256\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubOperatorNotApprovedForSource\",\n    inputs: [\n      {\n        name: \"operator\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"source\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"streamId\",\n        type: \"uint16\",\n        internalType: \"uint16\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubRegisterAvatarV1MustBeStoppedBeforeEndOfInvitationPeriod\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesHubStreamMismatch\",\n    inputs: [\n      {\n        name: \"streamId\",\n        type: \"uint16\",\n        internalType: \"uint16\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesIdMustBeDerivedFromAddress\",\n    inputs: [\n      {\n        name: \"providedId\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidCirclesId\",\n    inputs: [\n      {\n        name: \"id\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidFunctionCaller\",\n    inputs: [\n      {\n        name: \"caller\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"expectedCaller\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidParameter\",\n    inputs: [\n      {\n        name: \"parameter\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidString\",\n    inputs: [\n      {\n        name: \"str\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesLogicAssertion\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesProxyAlreadyInitialized\",\n    inputs: [],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesReentrancyGuard\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"ERC1155InsufficientBalance\",\n    inputs: [\n      {\n        name: \"sender\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"balance\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"needed\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"tokenId\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"ERC1155InvalidApprover\",\n    inputs: [\n      {\n        name: \"approver\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"ERC1155InvalidArrayLength\",\n    inputs: [\n      {\n        name: \"idsLength\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"valuesLength\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"ERC1155InvalidOperator\",\n    inputs: [\n      {\n        name: \"operator\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"ERC1155InvalidReceiver\",\n    inputs: [\n      {\n        name: \"receiver\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"ERC1155InvalidSender\",\n    inputs: [\n      {\n        name: \"sender\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"ERC1155MissingApprovalForAll\",\n    inputs: [\n      {\n        name: \"operator\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"owner\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n  },\n] as const;\n\nconst _bytecode =\n  \"\";\n\ntype HubConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: HubConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Hub__factory extends ContractFactory {\n  constructor(...args: HubConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    _hubV1: AddressLike,\n    _nameRegistry: AddressLike,\n    _migration: AddressLike,\n    _liftERC20: AddressLike,\n    _standardTreasury: AddressLike,\n    _inflationDayZero: BigNumberish,\n    _bootstrapTime: BigNumberish,\n    _gatewayUrl: string,\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(\n      _hubV1,\n      _nameRegistry,\n      _migration,\n      _liftERC20,\n      _standardTreasury,\n      _inflationDayZero,\n      _bootstrapTime,\n      _gatewayUrl,\n      overrides || {}\n    );\n  }\n  override deploy(\n    _hubV1: AddressLike,\n    _nameRegistry: AddressLike,\n    _migration: AddressLike,\n    _liftERC20: AddressLike,\n    _standardTreasury: AddressLike,\n    _inflationDayZero: BigNumberish,\n    _bootstrapTime: BigNumberish,\n    _gatewayUrl: string,\n    overrides?: NonPayableOverrides & { from?: string }\n  ) {\n    return super.deploy(\n      _hubV1,\n      _nameRegistry,\n      _migration,\n      _liftERC20,\n      _standardTreasury,\n      _inflationDayZero,\n      _bootstrapTime,\n      _gatewayUrl,\n      overrides || {}\n    ) as Promise<\n      Hub & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): Hub__factory {\n    return super.connect(runner) as Hub__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): HubInterface {\n    return new Interface(_abi) as HubInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): Hub {\n    return new Contract(address, _abi, runner) as unknown as Hub;\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type {\n  Signer,\n  BigNumberish,\n  AddressLike,\n  ContractDeployTransaction,\n  ContractRunner,\n} from \"ethers\";\nimport type { NonPayableOverrides } from \"../common\";\nimport type { Migration, MigrationInterface } from \"../Migration\";\n\nconst _abi = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_hubV1\",\n        type: \"address\",\n        internalType: \"contract IHubV1\",\n      },\n      {\n        name: \"_hubV2\",\n        type: \"address\",\n        internalType: \"contract IHubV2\",\n      },\n      {\n        name: \"_inflationDayZero\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"convertFromV1ToDemurrage\",\n    inputs: [\n      {\n        name: \"_amount\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"hubV1\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"contract IHubV1\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"hubV2\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"contract IHubV2\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"inflationDayZero\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"migrate\",\n    inputs: [\n      {\n        name: \"_avatars\",\n        type: \"address[]\",\n        internalType: \"address[]\",\n      },\n      {\n        name: \"_amounts\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256[]\",\n        internalType: \"uint256[]\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"period\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAddressCannotBeZero\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAmountMustNotBeZero\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAmountOverflow\",\n    inputs: [\n      {\n        name: \"amount\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesArrayMustNotBeEmpty\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesArraysLengthMismatch\",\n    inputs: [\n      {\n        name: \"lengthArray1\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"lengthArray2\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAvatarMustBeRegistered\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesIdMustBeDerivedFromAddress\",\n    inputs: [\n      {\n        name: \"providedId\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidCirclesId\",\n    inputs: [\n      {\n        name: \"id\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidFunctionCaller\",\n    inputs: [\n      {\n        name: \"caller\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"expectedCaller\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidParameter\",\n    inputs: [\n      {\n        name: \"parameter\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidString\",\n    inputs: [\n      {\n        name: \"str\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesLogicAssertion\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesProxyAlreadyInitialized\",\n    inputs: [],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesReentrancyGuard\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n] as const;\n\nconst _bytecode =\n  \"0x60e060405234801561000f575f80fd5b50604051610ba1380380610ba183398101604081905261002e91610132565b6001600160a01b03831661005c576040516321efd2b360e01b81525f60048201526024015b60405180910390fd5b6001600160a01b038216610086576040516321efd2b360e01b815260016004820152602401610053565b6001600160a01b0383811660808190525f80546001600160a01b0319169285169290921790915560a08290526040805163ef78d4fd60e01b8152905163ef78d4fd916004808201926020929091908290030181865afa1580156100eb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061010f9190610172565b60c05250610189915050565b6001600160a01b038116811461012f575f80fd5b50565b5f805f60608486031215610144575f80fd5b835161014f8161011b565b60208501519093506101608161011b565b80925050604084015190509250925092565b5f60208284031215610182575f80fd5b5051919050565b60805160a05160c0516109b86101e95f395f8181610127015281816101e10152818161037c01526103b901525f81816098015261020c01525f818160e00152818161014d0152818161026a01528181610300015261049d01526109b85ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c806379742f66146100645780637c234d01146100935780639a288377146100c8578063bde87738146100db578063de01e15114610102578063ef78d4fd14610122575b5f80fd5b5f54610076906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161008a565b6100ba6100d63660046106d9565b610149565b6100767f000000000000000000000000000000000000000000000000000000000000000081565b610115610110366004610738565b610413565b60405161008a91906107d9565b6100ba7f000000000000000000000000000000000000000000000000000000000000000081565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a4caeb426040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101cb91906107f2565b90505f6101d982600161081d565b90505f6102067f000000000000000000000000000000000000000000000000000000000000000084610836565b610230907f000000000000000000000000000000000000000000000000000000000000000061081d565b90505f61023d824261084d565b604051631549c1a160e11b81526305f5e1006004820152602481018690529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a93834290604401602060405180830381865afa1580156102af573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d391906107f2565b604051631549c1a160e11b81526305f5e1006004820152602481018690529091505f906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a93834290604401602060405180830381865afa158015610345573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036991906107f2565b90505f6103768483610836565b6103a0857f000000000000000000000000000000000000000000000000000000000000000061084d565b6103aa9085610836565b6103b4919061081d565b9050807f00000000000000000000000000000000000000000000000000000000000000006305f5e1006103e88c6003610836565b6103f29190610836565b6103fc9190610836565b6104069190610860565b9998505050505050505050565b606083821461044a57604051638b5ccddf60e01b815260048101859052602481018390525f60448201526064015b60405180910390fd5b5f8467ffffffffffffffff8111156104645761046461087f565b60405190808252806020026020018201604052801561048d578160200160208202803683370190505b5090505f5b8581101561066c575f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166328d249fe8989858181106104dc576104dc610893565b90506020020160208101906104f191906108be565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610533573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061055791906108d9565b90506001600160a01b038116610583576040516321efd2b360e01b815260026004820152602401610441565b6105a486868481811061059857610598610893565b90506020020135610149565b8383815181106105b6576105b6610893565b602002602001018181525050806001600160a01b03166323b872dd33308989878181106105e5576105e5610893565b6040516001600160e01b031960e088901b1681526001600160a01b039586166004820152949093166024850152506020909102013560448201526064016020604051808303815f875af115801561063e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061066291906108f4565b5050600101610492565b505f5460405163f317707960e01b81526001600160a01b039091169063f3177079906106a29033908a908a908790600401610913565b5f604051808303815f87803b1580156106b9575f80fd5b505af11580156106cb573d5f803e3d5ffd5b509298975050505050505050565b5f602082840312156106e9575f80fd5b5035919050565b5f8083601f840112610700575f80fd5b50813567ffffffffffffffff811115610717575f80fd5b6020830191508360208260051b8501011115610731575f80fd5b9250929050565b5f805f806040858703121561074b575f80fd5b843567ffffffffffffffff80821115610762575f80fd5b61076e888389016106f0565b90965094506020870135915080821115610786575f80fd5b50610793878288016106f0565b95989497509550505050565b5f815180845260208085019450602084015f5b838110156107ce578151875295820195908201906001016107b2565b509495945050505050565b602081525f6107eb602083018461079f565b9392505050565b5f60208284031215610802575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561083057610830610809565b92915050565b808202811582820484141761083057610830610809565b8181038181111561083057610830610809565b5f8261087a57634e487b7160e01b5f52601260045260245ffd5b500490565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b03811681146108bb575f80fd5b50565b5f602082840312156108ce575f80fd5b81356107eb816108a7565b5f602082840312156108e9575f80fd5b81516107eb816108a7565b5f60208284031215610904575f80fd5b815180151581146107eb575f80fd5b6001600160a01b038581168252606060208084018290529083018590525f91869160808501845b8881101561096157843561094d816108a7565b84168252938201939082019060010161093a565b508581036040870152610974818861079f565b9a995050505050505050505056fea264697066735822122020c2ba99b4debbe2a4abd5c016c29e74af13d0580bafa627bfe299b5fe8a437e64736f6c63430008180033\";\n\ntype MigrationConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: MigrationConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class Migration__factory extends ContractFactory {\n  constructor(...args: MigrationConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    _hubV1: AddressLike,\n    _hubV2: AddressLike,\n    _inflationDayZero: BigNumberish,\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(\n      _hubV1,\n      _hubV2,\n      _inflationDayZero,\n      overrides || {}\n    );\n  }\n  override deploy(\n    _hubV1: AddressLike,\n    _hubV2: AddressLike,\n    _inflationDayZero: BigNumberish,\n    overrides?: NonPayableOverrides & { from?: string }\n  ) {\n    return super.deploy(\n      _hubV1,\n      _hubV2,\n      _inflationDayZero,\n      overrides || {}\n    ) as Promise<\n      Migration & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): Migration__factory {\n    return super.connect(runner) as Migration__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): MigrationInterface {\n    return new Interface(_abi) as MigrationInterface;\n  }\n  static connect(address: string, runner?: ContractRunner | null): Migration {\n    return new Contract(address, _abi, runner) as unknown as Migration;\n  }\n}\n", "/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nimport {\n  Contract,\n  ContractFactory,\n  ContractTransactionResponse,\n  Interface,\n} from \"ethers\";\nimport type {\n  Signer,\n  AddressLike,\n  ContractDeployTransaction,\n  ContractRunner,\n} from \"ethers\";\nimport type { NonPayableOverrides } from \"../common\";\nimport type { NameRegistry, NameRegistryInterface } from \"../NameRegistry\";\n\nconst _abi = [\n  {\n    type: \"constructor\",\n    inputs: [\n      {\n        name: \"_hub\",\n        type: \"address\",\n        internalType: \"contract IHubV2\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"DEFAULT_CIRCLES_NAME_PREFIX\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"DEFAULT_CIRCLES_SYMBOL\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"MAX_SHORT_NAME\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint72\",\n        internalType: \"uint72\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"avatarToMetaDataDigest\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"calculateShortNameWithNonce\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_nonce\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"shortName_\",\n        type: \"uint72\",\n        internalType: \"uint72\",\n      },\n    ],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"customNames\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"customSymbols\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"getMetadataDigest\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"hub\",\n    inputs: [],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"contract IHubV2\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"isValidName\",\n    inputs: [\n      {\n        name: \"_name\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"isValidSymbol\",\n    inputs: [\n      {\n        name: \"_symbol\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n        internalType: \"bool\",\n      },\n    ],\n    stateMutability: \"pure\",\n  },\n  {\n    type: \"function\",\n    name: \"name\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"registerCustomName\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_name\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"registerCustomSymbol\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_symbol\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"registerShortName\",\n    inputs: [],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"registerShortNameWithNonce\",\n    inputs: [\n      {\n        name: \"_nonce\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"searchShortName\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"shortName_\",\n        type: \"uint72\",\n        internalType: \"uint72\",\n      },\n      {\n        name: \"nonce_\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"setMetadataDigest\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"_metadataDigest\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"function\",\n    name: \"shortNameToAvatar\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"uint72\",\n        internalType: \"uint72\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"shortNames\",\n    inputs: [\n      {\n        name: \"\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint72\",\n        internalType: \"uint72\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"symbol\",\n    inputs: [\n      {\n        name: \"_avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n    ],\n    stateMutability: \"view\",\n  },\n  {\n    type: \"function\",\n    name: \"updateMetadataDigest\",\n    inputs: [\n      {\n        name: \"_metadataDigest\",\n        type: \"bytes32\",\n        internalType: \"bytes32\",\n      },\n    ],\n    outputs: [],\n    stateMutability: \"nonpayable\",\n  },\n  {\n    type: \"event\",\n    name: \"RegisterShortName\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"shortName\",\n        type: \"uint72\",\n        indexed: false,\n        internalType: \"uint72\",\n      },\n      {\n        name: \"nonce\",\n        type: \"uint256\",\n        indexed: false,\n        internalType: \"uint256\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"event\",\n    name: \"UpdateMetadataDigest\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        indexed: true,\n        internalType: \"address\",\n      },\n      {\n        name: \"metadataDigest\",\n        type: \"bytes32\",\n        indexed: false,\n        internalType: \"bytes32\",\n      },\n    ],\n    anonymous: false,\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAddressCannotBeZero\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAmountMustNotBeZero\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAmountOverflow\",\n    inputs: [\n      {\n        name: \"amount\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesArrayMustNotBeEmpty\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesArraysLengthMismatch\",\n    inputs: [\n      {\n        name: \"lengthArray1\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"lengthArray2\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesAvatarMustBeRegistered\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesIdMustBeDerivedFromAddress\",\n    inputs: [\n      {\n        name: \"providedId\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidCirclesId\",\n    inputs: [\n      {\n        name: \"id\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidFunctionCaller\",\n    inputs: [\n      {\n        name: \"caller\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"expectedCaller\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidParameter\",\n    inputs: [\n      {\n        name: \"parameter\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesInvalidString\",\n    inputs: [\n      {\n        name: \"str\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesLogicAssertion\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesNamesAvatarAlreadyHasCustomNameOrSymbol\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"nameOrSymbol\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesNamesInvalidName\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"name\",\n        type: \"string\",\n        internalType: \"string\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesNamesOrganizationHasNoSymbol\",\n    inputs: [\n      {\n        name: \"organization\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesNamesShortNameAlreadyAssigned\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"shortName\",\n        type: \"uint72\",\n        internalType: \"uint72\",\n      },\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesNamesShortNameWithNonceTaken\",\n    inputs: [\n      {\n        name: \"avatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n      {\n        name: \"nonce\",\n        type: \"uint256\",\n        internalType: \"uint256\",\n      },\n      {\n        name: \"shortName\",\n        type: \"uint72\",\n        internalType: \"uint72\",\n      },\n      {\n        name: \"takenByAvatar\",\n        type: \"address\",\n        internalType: \"address\",\n      },\n    ],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesProxyAlreadyInitialized\",\n    inputs: [],\n  },\n  {\n    type: \"error\",\n    name: \"CirclesReentrancyGuard\",\n    inputs: [\n      {\n        name: \"code\",\n        type: \"uint8\",\n        internalType: \"uint8\",\n      },\n    ],\n  },\n] as const;\n\nconst _bytecode =\n  \"0x608060405234801561000f575f80fd5b50604051611c40380380611c4083398101604081905261002e9161007f565b6001600160a01b03811661005b576040516321efd2b360e01b81525f600482015260240160405180910390fd5b5f80546001600160a01b0319166001600160a01b03929092169190911790556100ac565b5f6020828403121561008f575f80fd5b81516001600160a01b03811681146100a5575f80fd5b9392505050565b611b87806100b95f395ff3fe608060405234801561000f575f80fd5b506004361061013d575f3560e01c80635dabbfa7116100b4578063c5a5688c11610079578063c5a5688c14610331578063d199889314610344578063dc03a0f314610357578063e27871dd1461036a578063e44b8c351461037d578063e9973f7c14610390575f80fd5b80635dabbfa7146102e0578063829c0fde146102f35780638fd4f71a146102fb57806398245b0c1461030e578063a86e35761461031e575f80fd5b8063365a86fc11610105578063365a86fc146102245780633857d9d71461024e5780633bb7b6c5146102635780634068e58d1461027657806348f813b5146102955780634a4b8ae3146102b8575f80fd5b8063013046ae1461014157806301984892146101865780631455d1e6146101a65780631e30397f146101cb57806328898d0a146101ee575b5f80fd5b61016961014f36600461165d565b60016020525f90815260409020546001600160481b031681565b6040516001600160481b0390911681526020015b60405180910390f35b61019961019436600461165d565b6103c2565b60405161017d91906116a1565b6101996040518060400160405280600681526020016552696e67732d60d01b81525081565b6101de6101d9366004611718565b61059e565b604051901515815260200161017d565b6102166101fc36600461165d565b6001600160a01b03165f9081526005602052604090205490565b60405190815260200161017d565b5f54610236906001600160a01b031681565b6040516001600160a01b03909116815260200161017d565b61026161025c366004611757565b6107d8565b005b61019961027136600461165d565b610884565b61021661028436600461165d565b60056020525f908152604090205481565b6101996040518060400160405280600481526020016352494e4760e01b81525081565b6102366102c636600461176e565b60026020525f90815260409020546001600160a01b031681565b6101996102ee36600461165d565b61091b565b610261610933565b6101de610309366004611718565b6109da565b610169684e900abb53e6b70fff81565b61019961032c36600461165d565b610b30565b61026161033f366004611757565b610da6565b610261610352366004611794565b610e4c565b6101696103653660046117e5565b610eea565b610261610378366004611794565b610f5d565b61026161038b3660046117e5565b610ff4565b6103a361039e36600461165d565b61103b565b604080516001600160481b03909316835260208301919091520161017d565b5f8054604051633b7bae4f60e21b81526001600160a01b03808516600483015260609385936003939192169063edeeb93c90602401602060405180830381865afa158015610412573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610436919061180f565b6001600160a01b03160361046a57818160405163aa8ed7bd60e01b815260040161046192919061182a565b60405180910390fd5b5f5460405163f72c436f60e01b81526001600160a01b0386811660048301529091169063f72c436f90602401602060405180830381865afa1580156104b1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104d59190611846565b61058b576001600160a01b0384165f90815260036020526040812080546104fb90611865565b80601f016020809104026020016040519081016040528092919081815260200182805461052790611865565b80156105725780601f1061054957610100808354040283529160200191610572565b820191905f5260205f20905b81548152906001019060200180831161055557829003601f168201915b505050505090505f81511115610589579250610597565b505b610594846110f5565b92505b5050919050565b5f8083838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152505082519293505060209091119050806105ea57508051155b156105f8575f9150506107d2565b5f5b81518110156107cb575f8282815181106106165761061661189d565b01602001516001600160f81b0319169050600360fc1b81108015906106495750603960f81b6001600160f81b0319821611155b15801561067f5750604160f81b6001600160f81b031982161080159061067d5750602d60f91b6001600160f81b0319821611155b155b80156106b45750606160f81b6001600160f81b03198216108015906106b25750603d60f91b6001600160f81b0319821611155b155b80156106ce5750600160fd1b6001600160f81b0319821614155b80156107005750602d60f81b6001600160f81b0319821614806106fe5750605f60f81b6001600160f81b03198216145b155b801561071a5750601760f91b6001600160f81b0319821614155b801561074c5750600560fb1b6001600160f81b03198216148061074a5750602960f81b6001600160f81b03198216145b155b80156107665750602760f81b6001600160f81b0319821614155b80156107805750601360f91b6001600160f81b0319821614155b80156107b25750602b60f81b6001600160f81b0319821614806107b05750602360f81b6001600160f81b03198216145b155b156107c2575f93505050506107d2565b506001016105fa565b5060019150505b92915050565b5f8054604051633b7bae4f60e21b815233600482018190529260029290916001600160a01b039091169063edeeb93c90602401602060405180830381865afa158015610826573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084a919061180f565b6001600160a01b03160361087557818160405163aa8ed7bd60e01b815260040161046192919061182a565b61087f338461118f565b505050565b60046020525f90815260409020805461089c90611865565b80601f01602080910402602001604051908101604052809291908181526020018280546108c890611865565b80156109135780601f106108ea57610100808354040283529160200191610913565b820191905f5260205f20905b8154815290600101906020018083116108f657829003601f168201915b505050505081565b60036020525f90815260409020805461089c90611865565b5f8054604051633b7bae4f60e21b81523360048201819052929182916001600160a01b039091169063edeeb93c90602401602060405180830381865afa15801561097f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a3919061180f565b6001600160a01b0316036109ce57818160405163aa8ed7bd60e01b815260040161046192919061182a565b6109d66111e7565b5050565b5f8083838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250508251929350509015905080610a25575060108151115b15610a33575f9150506107d2565b5f5b81518110156107cb575f828281518110610a5157610a5161189d565b01602001516001600160f81b0319169050600360fc1b8110801590610a845750603960f81b6001600160f81b0319821611155b80610ab65750604160f81b6001600160f81b0319821610801590610ab65750602d60f91b6001600160f81b0319821611155b80610ae85750606160f81b6001600160f81b0319821610801590610ae85750603d60f91b6001600160f81b0319821611155b80610b005750602d60f81b6001600160f81b03198216145b80610b185750605f60f81b6001600160f81b03198216145b610b27575f93505050506107d2565b50600101610a35565b5f8054604051633b7bae4f60e21b81526001600160a01b038085166004808401919091526060948694919390929091169063edeeb93c90602401602060405180830381865afa158015610b85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba9919061180f565b6001600160a01b031603610bd457818160405163aa8ed7bd60e01b815260040161046192919061182a565b5f5460405163b1ce8eab60e01b81526001600160a01b0386811660048301529091169063b1ce8eab90602401602060405180830381865afa158015610c1b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c3f9190611846565b15610c6157835f604051633191a38d60e01b815260040161046192919061182a565b5f5460405163278330f160e21b81526001600160a01b03868116600483015290911690639e0cc3c490602401602060405180830381865afa158015610ca8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ccc9190611846565b15610d83576001600160a01b0384165f9081526004602052604081208054610cf390611865565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1f90611865565b8015610d6a5780601f10610d4157610100808354040283529160200191610d6a565b820191905f5260205f20905b815481529060010190602001808311610d4d57829003601f168201915b505050505090505f81511115610d81579250610597565b505b505060408051808201909152600481526352494e4760e01b602082015292915050565b5f8054604051633b7bae4f60e21b815233600482018190529260019290916001600160a01b039091169063edeeb93c90602401602060405180830381865afa158015610df4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e18919061180f565b6001600160a01b031603610e4357818160405163aa8ed7bd60e01b815260040161046192919061182a565b61087f83611201565b5f546001906001600160a01b03163314610e8b575f54604051636844c68b60e11b81526104619133916001600160a01b039091169084906004016118b1565b8115610ee457610e9b838361059e565b610ec0578383835f60405163d76958f760e01b815260040161046194939291906118ff565b6001600160a01b0384165f908152600360205260409020610ee283858361198f565b505b50505050565b6040516bffffffffffffffffffffffff19606084901b166020820152603481018290525f908190605401604051602081830303815290604052805190602001209050684e900abb53e6b70fff6001610f429190611a5d565b610f55906001600160481b031682611a98565b949350505050565b5f546002906001600160a01b03163314610f9c575f54604051636844c68b60e11b81526104619133916001600160a01b039091169084906004016118b1565b8115610ee457610fac83836109da565b610fd257838383600160405163d76958f760e01b815260040161046194939291906118ff565b6001600160a01b0384165f908152600460205260409020610ee283858361198f565b5f80546001600160a01b03163314611031575f54604051636844c68b60e11b81526104619133916001600160a01b039091169084906004016118b1565b61087f838361118f565b6001600160a01b0381165f9081526001602052604081205481906001600160481b0316156110ab576001600160a01b0383165f8181526001602052604080822054905163ec7765c960e01b815260048101939093526001600160481b031660248301526044820152606401610461565b6110b58382610eea565b6001600160481b0381165f908152600260205260409020549092506001600160a01b0316156110f057806110e881611aab565b9150506110ab565b915091565b6001600160a01b0381165f908152600160205260409020546060906001600160481b03168061117c575f611131846001600160a01b03166112f2565b90506040518060400160405280600681526020016552696e67732d60d01b81525081604051602001611164929190611ac3565b60405160208183030381529060405292505050919050565b5f611131826001600160481b03166113bd565b6001600160a01b0382165f8181526005602052604090819020839055517f0a1d44830b9ad1708d85ea4071d97fd532b52504d7397d3e44461badd9f4f827906111db9084815260200190565b60405180910390a25050565b5f806111f23361103b565b915091506109d63383836114fb565b335f908152600160205260409020546001600160481b03161561126257335f8181526001602081905260409182902054915163ec7765c960e01b815260048101939093526001600160481b0390911660248301526044820152606401610461565b5f61126d3383610eea565b6001600160481b0381165f908152600260205260409020549091506001600160a01b0316156112e7576001600160481b0381165f818152600260205260409081902054905163690a563f60e11b81523360048201526024810185905260448101929092526001600160a01b03166064820152608401610461565b6109d63382846114fb565b6040805181815260608181018352915f91906020820181803683370190505090505f5b5f841180611321575080155b156113b3575f611332603a86611a98565b90506040518060600160405280603a8152602001611b18603a9139818151811061135e5761135e61189d565b01602001516001600160f81b031916838361137881611aab565b94508151811061138a5761138a61189d565b60200101906001600160f81b03191690815f1a9053506113ab603a86611af1565b945050611315565b6105948282611589565b60408051600c8082528183019092526060915f91906020820181803683370190505090505f5b5f8411806113ef575080155b15611481575f611400603a86611a98565b90506040518060600160405280603a8152602001611b18603a9139818151811061142c5761142c61189d565b01602001516001600160f81b031916838361144681611aab565b9450815181106114585761145861189d565b60200101906001600160f81b03191690815f1a905350611479603a86611af1565b9450506113e3565b600c8110156113b3576040518060600160405280603a8152602001611b18603a91395f815181106114b4576114b461189d565b01602001516001600160f81b03191682826114ce81611aab565b9350815181106114e0576114e061189d565b60200101906001600160f81b03191690815f1a905350611481565b6001600160a01b0383165f818152600160209081526040808320805468ffffffffffffffffff19166001600160481b038816908117909155808452600283529281902080546001600160a01b0319168517905580519283529082018490527f368e444a05faec665f223aebb06d81a86daf0bc59bd7bccc160042422c8b6229910160405180910390a2505050565b60605f8267ffffffffffffffff8111156115a5576115a5611937565b6040519080825280601f01601f1916602001820160405280156115cf576020820181803683370190505b5090505f5b8381101561163e5784816115e9600187611b04565b6115f39190611b04565b815181106116035761160361189d565b602001015160f81c60f81b8282815181106116205761162061189d565b60200101906001600160f81b03191690815f1a9053506001016115d4565b509392505050565b6001600160a01b038116811461165a575f80fd5b50565b5f6020828403121561166d575f80fd5b813561167881611646565b9392505050565b5f5b83811015611699578181015183820152602001611681565b50505f910152565b602081525f82518060208401526116bf81604085016020870161167f565b601f01601f19169190910160400192915050565b5f8083601f8401126116e3575f80fd5b50813567ffffffffffffffff8111156116fa575f80fd5b602083019150836020828501011115611711575f80fd5b9250929050565b5f8060208385031215611729575f80fd5b823567ffffffffffffffff81111561173f575f80fd5b61174b858286016116d3565b90969095509350505050565b5f60208284031215611767575f80fd5b5035919050565b5f6020828403121561177e575f80fd5b81356001600160481b0381168114611678575f80fd5b5f805f604084860312156117a6575f80fd5b83356117b181611646565b9250602084013567ffffffffffffffff8111156117cc575f80fd5b6117d8868287016116d3565b9497909650939450505050565b5f80604083850312156117f6575f80fd5b823561180181611646565b946020939093013593505050565b5f6020828403121561181f575f80fd5b815161167881611646565b6001600160a01b0392909216825260ff16602082015260400190565b5f60208284031215611856575f80fd5b81518015158114611678575f80fd5b600181811c9082168061187957607f821691505b60208210810361189757634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b6001600160a01b03938416815291909216602082015260ff909116604082015260600190565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b6001600160a01b03851681526060602082018190525f9061192390830185876118d7565b905060ff8316604083015295945050505050565b634e487b7160e01b5f52604160045260245ffd5b601f82111561087f57805f5260205f20601f840160051c810160208510156119705750805b601f840160051c820191505b81811015610ee2575f815560010161197c565b67ffffffffffffffff8311156119a7576119a7611937565b6119bb836119b58354611865565b8361194b565b5f601f8411600181146119ec575f85156119d55750838201355b5f19600387901b1c1916600186901b178355610ee2565b5f83815260208120601f198716915b82811015611a1b57868501358255602094850194600190920191016119fb565b5086821015611a37575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b634e487b7160e01b5f52601160045260245ffd5b6001600160481b03818116838216019080821115611a7d57611a7d611a49565b5092915050565b634e487b7160e01b5f52601260045260245ffd5b5f82611aa657611aa6611a84565b500690565b5f60018201611abc57611abc611a49565b5060010190565b5f8351611ad481846020880161167f565b835190830190611ae881836020880161167f565b01949350505050565b5f82611aff57611aff611a84565b500490565b818103818111156107d2576107d2611a4956fe31323334353637383941424344454647484a4b4c4d4e505152535455565758595a6162636465666768696a6b6d6e6f707172737475767778797aa2646970667358221220d9c36420ec3c72f6a959af5e08798a631ef85a9d23eed9f34682b86fb0417f1764736f6c63430008180033\";\n\ntype NameRegistryConstructorParams =\n  | [signer?: Signer]\n  | ConstructorParameters<typeof ContractFactory>;\n\nconst isSuperArgs = (\n  xs: NameRegistryConstructorParams\n): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;\n\nexport class NameRegistry__factory extends ContractFactory {\n  constructor(...args: NameRegistryConstructorParams) {\n    if (isSuperArgs(args)) {\n      super(...args);\n    } else {\n      super(_abi, _bytecode, args[0]);\n    }\n  }\n\n  override getDeployTransaction(\n    _hub: AddressLike,\n    overrides?: NonPayableOverrides & { from?: string }\n  ): Promise<ContractDeployTransaction> {\n    return super.getDeployTransaction(_hub, overrides || {});\n  }\n  override deploy(\n    _hub: AddressLike,\n    overrides?: NonPayableOverrides & { from?: string }\n  ) {\n    return super.deploy(_hub, overrides || {}) as Promise<\n      NameRegistry & {\n        deploymentTransaction(): ContractTransactionResponse;\n      }\n    >;\n  }\n  override connect(runner: ContractRunner | null): NameRegistry__factory {\n    return super.connect(runner) as NameRegistry__factory;\n  }\n\n  static readonly bytecode = _bytecode;\n  static readonly abi = _abi;\n  static createInterface(): NameRegistryInterface {\n    return new Interface(_abi) as NameRegistryInterface;\n  }\n  static connect(\n    address: string,\n    runner?: ContractRunner | null\n  ): NameRegistry {\n    return new Contract(address, _abi, runner) as unknown as NameRegistry;\n  }\n}\n", "export interface Profile {\n    name: string;\n    description?: string;\n    previewImageUrl?: string;\n    imageUrl?: string;\n}\n\nexport interface GroupProfile extends Profile {\n    symbol: string;\n}\n\nexport class Profiles {\n    constructor(private readonly profileServiceUrl: string) {\n    }\n\n    private getProfileServiceUrl(): string {\n        return this.profileServiceUrl.endsWith('/') ? this.profileServiceUrl : `${this.profileServiceUrl}/`;\n    }\n\n    async create(profile: Profile): Promise<string> {\n        const response = await fetch(`${this.getProfileServiceUrl()}pin`, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(profile)\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to create profile. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);\n        }\n\n        const data = await response.json();\n        return data.cid;\n    }\n\n    /**\n     * Retrieves a profile by its CID. If the profile is not found, an error is thrown.\n     * @param cid The CID of the profile to retrieve.\n     */\n    async get(cid: string): Promise<Profile|undefined> {\n        const response = await fetch(`${this.getProfileServiceUrl()}get?cid=${cid}`);\n        if (!response.ok) {\n          console.warn(`Failed to retrieve profile ${cid}. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);\n          return undefined;\n        }\n\n        return await response.json();\n    }\n\n    /**\n     * Retrieves multiple profiles by their CIDs. If a profile is not found, it will not be included in the result.\n     * @param cids The CIDs of the profiles to retrieve.\n     * @returns A map of CIDs to profiles. If a profile is not found, it will not be included in the map.\n     */\n    async getMany(cids: string[]): Promise<Record<string, Profile>> {\n        const response = await fetch(`${this.getProfileServiceUrl()}getBatch?cids=${cids.join(',')}`);\n        if (!response.ok) {\n            throw new Error(`Failed to retrieve profiles ${cids.join(',')}. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);\n        }\n\n        const profilesArray = await response.json();\n        const profiles: Record<string, Profile> = {};\n\n        for (let i = 0; i < cids.length; i++) {\n            if (profilesArray[i]) {\n                profiles[cids[i]] = profilesArray[i];\n            }\n        }\n\n        return profiles;\n    }\n}", "import {\n  ContractTransactionReceipt\n} from 'ethers';\nimport { Sdk } from '../sdk';\nimport { AvatarInterface } from '../AvatarInterface';\nimport { Token, Token__factory } from '@circles-sdk/abi-v1';\nimport {\n  AvatarRow,\n  CirclesQuery,\n  TransactionHistoryRow,\n  TrustRelationRow\n} from '@circles-sdk/data';\nimport { crcToTc } from '@circles-sdk/utils';\n\nexport class V1Avatar implements AvatarInterface {\n  public readonly sdk: Sdk;\n\n  get address(): string {\n    if (!this.avatarInfo) {\n      throw new Error('Avatar is not initialized');\n    }\n    return this.avatarInfo.avatar;\n  }\n\n  // TODO: Empty stream makes no sense\n  // readonly events: Observable<AvatarEvent> = Observable.create<AvatarEvent>().property;\n\n  get v1Token(): Token | undefined {\n    return this._v1Token;\n  }\n\n  private _v1Token?: Token;\n\n  public readonly avatarInfo: AvatarRow;\n\n  constructor(sdk: Sdk, avatarInfo: AvatarRow) {\n    this.sdk = sdk;\n    this.avatarInfo = avatarInfo;\n\n    if (!this.avatarInfo.hasV1) {\n      throw new Error('Avatar is not a v1 avatar');\n    }\n\n    if (this.avatarInfo.v1Token) {\n      this._v1Token = Token__factory.connect(this.avatarInfo.v1Token, this.sdk.contractRunner);\n    }\n  }\n\n  /**\n   * Utilizes the pathfinder to find the max. transferable amount from the avatar to `to`.\n   * @param to The recipient\n   * @param tokenId The token to transfer (address). Leave empty to allow transitive transfers.\n   * @returns The max. transferable amount at the time.\n   */\n  async getMaxTransferableAmount(to: string, tokenId?: string): Promise<bigint> {\n    this.throwIfNotInitialized();\n\n    if (tokenId) {\n      const tokenInfo = await this.sdk.data.getTokenInfo(tokenId);\n      if (!tokenInfo) {\n        throw new Error('Token not found');\n      }\n\n      const tokenBalances = await this.sdk.data.getTokenBalances(this.address);\n      const tokenBalance = tokenBalances.filter(b => b.token === tokenId)[0]?.balance;\n      return BigInt(tokenBalance ?? 0);\n    }\n\n    this.throwIfPathfinderIsNotAvailable();\n\n    const largeAmount = BigInt('999999999999999999999999999999');\n    const transferPath = await this.sdk.v1Pathfinder!.getTransferPath(\n      this.address,\n      to,\n      largeAmount);\n\n    if (!transferPath.isValid) {\n      return Promise.resolve(BigInt(0));\n    }\n\n    return transferPath.maxFlow;\n  }\n\n  /**\n   * Utilizes the pathfinder to transitively send `amount` Circles to `to`.\n   * @param to The recipient\n   * @param amount The amount to send\n   */\n  async transfer(to: string, amount: bigint): Promise<ContractTransactionReceipt> {\n    this.throwIfNotInitialized();\n    this.throwIfPathfinderIsNotAvailable();\n\n    const transferPath = await this.sdk.v1Pathfinder!.getTransferPath(\n      this.address,\n      to,\n      amount);\n\n    if (!transferPath.isValid || transferPath.transferSteps.length === 0) {\n      throw new Error(`Couldn't find a valid path from ${this.address} to ${to} for ${amount}.`);\n    }\n\n    const tokenOwners = transferPath.transferSteps.map(o => o.token_owner);\n    const srcs = transferPath.transferSteps.map(o => o.from);\n    const dests = transferPath.transferSteps.map(o => o.to);\n    const wads = transferPath.transferSteps.map(o => BigInt(o.value));\n\n    const tx = await this.sdk.v1Hub.transferThrough(tokenOwners, srcs, dests, wads);\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error(`The transferThrough call for '${this.address} -> ${to}: ${amount}' didn't yield a receipt.`);\n    }\n\n    return receipt;\n  }\n\n  async trust(avatar: string) {\n    this.throwIfNotInitialized();\n\n    const tx = await this.sdk.v1Hub.trust(avatar, BigInt(100));\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error(`The trust call for '${this.address} -> ${avatar}' didn't yield a receipt.`);\n    }\n    return receipt;\n  }\n\n  async untrust(avatar: string) {\n    this.throwIfNotInitialized();\n\n    const tx = await this.sdk.v1Hub.trust(avatar, BigInt(0));\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error(`The untrust call for '${this.address} -> ${avatar}' didn't yield a receipt.`);\n    }\n    return receipt;\n  }\n\n  async getMintableAmount(): Promise<number> {\n    if (!this.v1Token) {\n      return 0;\n    }\n\n    const availableCrcToMint = await this.v1Token.look();\n    return crcToTc(new Date(), availableCrcToMint);\n  }\n\n  async personalMint(): Promise<ContractTransactionReceipt> {\n    this.throwIfNotInitialized();\n\n    if (!this.v1Token) {\n      throw new Error('Avatar does not have a token to mint');\n    }\n    if (await this.v1Token.stopped()) {\n      throw new Error('Avatar token is stopped');\n    }\n\n    const tx = await this.v1Token.update();\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('The update call didn\\'t yield a receipt');\n    }\n\n    return receipt;\n  }\n\n  async stop(): Promise<ContractTransactionReceipt> {\n    this.throwIfNotInitialized();\n\n    if (!this.v1Token) {\n      throw new Error('Avatar does not have a token to stop');\n    }\n    if (await this.v1Token.stopped()) {\n      throw new Error('Avatar token is already stopped');\n    }\n\n    const tx = await this.v1Token.stop();\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('The stop call didn\\'t yield a receipt');\n    }\n\n    return receipt;\n  }\n\n  private throwIfNotInitialized() {\n    if (this.avatarInfo) {\n      return;\n    }\n    throw new Error('Avatar is either not initialized or is not signed up at Circles.');\n  }\n\n  async getTrustRelations(): Promise<TrustRelationRow[]> {\n    return this.sdk.data.getAggregatedTrustRelations(this.address);\n  }\n\n  async getTransactionHistory(pageSize: number): Promise<CirclesQuery<TransactionHistoryRow>> {\n    const query = this.sdk.data.getTransactionHistory(this.address, pageSize);\n    await query.queryNextPage();\n\n    return query;\n  }\n\n  async getTotalBalance(): Promise<number> {\n    return parseFloat(await this.sdk.data.getTotalBalance(this.address, true));\n  }\n\n  async getGasTokenBalance(): Promise<bigint> {\n    return await this.sdk.contractRunner.provider?.getBalance(this.address) ?? 0n;\n  }\n\n  private throwIfPathfinderIsNotAvailable() {\n    if (!this.sdk.v1Pathfinder) {\n      throw new Error('Pathfinder is not available');\n    }\n  }\n}", "export interface TransferPathStep {\n  readonly from: string;\n  readonly to: string;\n  readonly tokenOwner: string;\n  readonly value: string;\n}\n\ntype ApiTransferStep = {\n  from: string;\n  to: string;\n  token_owner: string;\n  value: string;\n};\n\ntype directPathResponse = {\n  data?: {\n    directPath?: {\n      requestedAmount: string;\n      flow: unknown;\n      transfers: TransferPathStep[];\n      isValid?: boolean;\n    };\n  };\n};\n\ntype FlowEdge = {\n  streamSinkId: number;\n  amount: bigint;\n};\n\ntype Stream = {\n  sourceCoordinate: bigint,\n  flowEdgeIds: number[],\n  data: Uint8Array\n}\n\n// Define FlowMatrix type\ntype FlowMatrix = {\n  flowVertices: string[];\n  flowEdges: FlowEdge[];\n  streams: Stream[];\n  packedCoordinates: Uint8Array;\n  sourceCoordinate: number;\n};\n\n\nexport class Pathfinder {\n  pathfinderURL: string;\n\n  constructor(pathfinderURL: string) {\n    this.pathfinderURL = pathfinderURL;\n  }\n\n  async getArgsForPath(from: string, to: string, value: string): Promise<FlowMatrix> {\n    const query = {\n      method: 'compute_transfer',\n      params: { from, to, value: value.toString() }\n    };\n\n    try {\n      const response = await fetch(this.pathfinderURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(query)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error calling API: ${response.status}`);\n      }\n\n      const parsed = await response.json();\n\n      const transformedResponse: directPathResponse = {\n        data: {\n          directPath: {\n            requestedAmount: value,\n            flow: parsed.result.maxFlowValue,\n            transfers: parsed.result.transferSteps.map((step: ApiTransferStep) => ({\n              from: step.from,\n              to: step.to,\n              tokenOwner: step.token_owner,\n              value: step.value\n            })),\n            isValid: parsed.result.final\n          }\n        }\n      };\n\n      // todo: this is not great, I mangle the PathFinder response; should split these functions\n      if (transformedResponse.data?.directPath) {\n        const flowMatrix = createFlowMatrix(from, to, value, transformedResponse.data.directPath.transfers);\n\n        return flowMatrix;\n      } else {\n        throw new Error('Invalid response from pathfinder');\n      }\n\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      } else {\n        throw new Error('An unknown error occurred');\n      }\n    }\n  };\n}\n\nfunction transformToFlowVertices(transfers: TransferPathStep[], from: string, to: string) {\n  // Normalize and extract all unique addresses from transfers\n  const addressSet = new Set<string>();\n  addressSet.add(from.toLowerCase());\n  addressSet.add(to.toLowerCase());\n  for (const transfer of transfers) {\n    addressSet.add(transfer.from.toLowerCase());\n    addressSet.add(transfer.to.toLowerCase());\n    addressSet.add(transfer.tokenOwner.toLowerCase());\n  }\n\n  // Convert addresses to uint160 and sort\n  const sortedAddresses = Array.from(addressSet).sort((a, b) => {\n    const uint160A = BigInt(a);\n    const uint160B = BigInt(b);\n    return uint160A < uint160B ? -1 : uint160A > uint160B ? 1 : 0;\n  });\n\n  // Create the lookup map\n  const lookUpMap: { [address: string]: number } = {};\n  sortedAddresses.forEach((address, index) => {\n    lookUpMap[address] = index;\n  });\n\n  return {\n    sortedAddresses: sortedAddresses,\n    lookUpMap: lookUpMap\n  };\n}\n\nfunction packCoordinates(coordinates: number[]): Uint8Array {\n  const packedCoordinates = new Uint8Array(coordinates.length * 2);\n  for (let i = 0; i < coordinates.length; i++) {\n    packedCoordinates[2 * i] = coordinates[i] >> 8; // High byte\n    packedCoordinates[2 * i + 1] = coordinates[i] & 0xFF; // Low byte\n  }\n  return packedCoordinates;\n}\n\nfunction createFlowMatrix(from: string, to: string, value: string, transfers: TransferPathStep[]): FlowMatrix {\n  // Transform transfers to flow matrix structure with normalized addresses\n  const { sortedAddresses, lookUpMap } = transformToFlowVertices(transfers, from.toLowerCase(), to.toLowerCase());\n\n  // Initialize flow edges\n  const flowEdges: FlowEdge[] = transfers.map((transfer, index) => ({\n    streamSinkId: transfer.to.toLowerCase() === to.toLowerCase() ? 1 : 0, // Set streamSinkId to 1 if transfer.to matches the given 'to' address\n    amount: BigInt(transfer.value) // Convert string value to bigint\n  }));\n\n  // If no terminal edge was found, set the last edge as terminal by default\n  if (!flowEdges.some(edge => edge.streamSinkId === 1)) {\n    flowEdges[flowEdges.length - 1].streamSinkId = 1;\n  }\n\n  // Check if the sum of terminal amounts matches the provided value\n  const totalTerminalAmount = flowEdges\n    .filter(edge => edge.streamSinkId === 1)\n    .reduce((sum, edge) => sum + edge.amount, BigInt(0));\n\n  if (totalTerminalAmount !== BigInt(value)) {\n    throw new Error(`The total terminal amount (${totalTerminalAmount}) does not match the provided value (${value}).`);\n  }\n\n  // Initialize stream object\n  const flowEdgeIds: number[] = flowEdges\n    .map((edge, index) => (edge.streamSinkId === 1 ? index : -1))\n    .filter(index => index !== -1);\n\n  const stream: Stream = {\n    sourceCoordinate: BigInt(lookUpMap[from.toLowerCase()]),\n    flowEdgeIds: flowEdgeIds,\n    data: new Uint8Array() // Empty bytes for now\n  };\n\n  // Get coordinates for each triple (tokenOwner, sender, receiver) and pack them\n  const coordinates: number[] = [];\n  for (const transfer of transfers) {\n    coordinates.push(lookUpMap[transfer.tokenOwner.toLowerCase()]);\n    coordinates.push(lookUpMap[transfer.from.toLowerCase()]);\n    coordinates.push(lookUpMap[transfer.to.toLowerCase()]);\n  }\n  const packedCoordinates = packCoordinates(coordinates);\n\n  return {\n    flowVertices: sortedAddresses,\n    flowEdges: flowEdges,\n    streams: [stream],\n    packedCoordinates: packedCoordinates,\n    sourceCoordinate: lookUpMap[from.toLowerCase()] // Add sourceCoordinate using the lookup map\n  };\n}\n", "import {AvatarInterfaceV2} from '../AvatarInterface';\nimport {\n  ContractTransactionReceipt, ethers,\n  formatEther\n} from 'ethers';\nimport {Sdk} from '../sdk';\nimport {\n  AvatarRow,\n  CirclesQuery,\n  TransactionHistoryRow,\n  TrustRelationRow\n} from '@circles-sdk/data';\nimport {addressToUInt256, cidV0ToUint8Array} from '@circles-sdk/utils';\nimport {Pathfinder} from './pathfinderV2';\nimport {Profile} from \"@circles-sdk/profiles\";\n\nexport type FlowEdge = {\n  streamSinkId: bigint;\n  amount: bigint;\n};\n\nexport type Stream = {\n  sourceCoordinate: bigint,\n  flowEdgeIds: bigint[],\n  data: Uint8Array\n}\n\nexport class V2Avatar implements AvatarInterfaceV2 {\n  public readonly sdk: Sdk;\n\n  get address(): string {\n    return this.avatarInfo.avatar;\n  }\n\n  public readonly avatarInfo: AvatarRow;\n\n  private _cachedProfile: Profile | undefined;\n  private _cachedProfileCid: string | undefined;\n\n  constructor(sdk: Sdk, avatarInfo: AvatarRow) {\n    this.sdk = sdk;\n    this.avatarInfo = avatarInfo;\n\n    if (this.avatarInfo.version != 2) {\n      throw new Error('Avatar is not a v2 avatar');\n    }\n  }\n\n  async updateMetadata(cid: string): Promise<ContractTransactionReceipt> {\n    this.throwIfNameRegistryIsNotAvailable();\n\n    const digest = cidV0ToUint8Array(cid);\n    const tx = await this.sdk.nameRegistry?.updateMetadataDigest(digest);\n    const receipt = await tx?.wait();\n    if (!receipt) {\n      throw new Error('Transfer failed');\n    }\n\n    this.avatarInfo.cidV0 = cid;\n\n    return receipt;\n  }\n\n  async getMaxTransferableAmount(to: string, tokenId?: string): Promise<bigint> {\n    this.throwIfV2IsNotAvailable();\n\n    if (tokenId) {\n      const tokenInfo = await this.sdk.data.getTokenInfo(tokenId);\n      if (!tokenInfo) {\n        throw new Error('Token not found');\n      }\n\n      const tokenBalances = await this.sdk.data.getTokenBalancesV2(this.address);\n      const tokenBalance = tokenBalances.filter(b => b.tokenOwner.toString() === tokenInfo.tokenId.toString());\n      console.log(`Token balance:`, tokenBalance);\n      return !tokenBalance[0].balance ? 0n : ethers.parseEther(tokenBalance[0].balance.toString());\n    }\n\n    const largeAmount = BigInt('999999999999999999999999999999');\n    const transferPath = await this.sdk.v2Pathfinder!.getTransferPath(\n      this.address,\n      to,\n      largeAmount);\n\n    if (!transferPath.isValid) {\n      return Promise.resolve(BigInt(0));\n    }\n\n    return transferPath.maxFlow;\n  }\n\n  async getMintableAmount(): Promise<number> {\n    this.throwIfV2IsNotAvailable();\n    const [a, b, c] = await this.sdk.v2Hub!.calculateIssuance(this.address);\n    return parseFloat(formatEther(a));\n  }\n\n  async getTotalBalance(): Promise<number> {\n    return parseFloat(await this.sdk.data.getTotalBalanceV2(this.address, true));\n  }\n\n  async getGasTokenBalance(): Promise<bigint> {\n    return await this.sdk.contractRunner.provider?.getBalance(this.address) ?? 0n;\n  }\n\n  async getTransactionHistory(pageSize: number): Promise<CirclesQuery<TransactionHistoryRow>> {\n    const query = this.sdk.data.getTransactionHistory(this.address, pageSize);\n    await query.queryNextPage();\n\n    return query;\n  }\n\n  async getTrustRelations(): Promise<TrustRelationRow[]> {\n    return this.sdk.data.getAggregatedTrustRelations(this.address);\n  }\n\n  async personalMint(): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.personalMint();\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Personal mint failed');\n    }\n\n    return receipt;\n  }\n\n  async stop(): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.stop();\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Stop failed');\n    }\n\n    return receipt;\n  }\n\n  private async transitiveTransfer(to: string, amount: bigint): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n\n    const pathfinder = new Pathfinder(this.sdk.circlesConfig.v2PathfinderUrl!);\n    const flowMatrix = await pathfinder.getArgsForPath(this.address, to, amount.toString());\n    const result = await this.sdk.v2Hub?.operateFlowMatrix(flowMatrix.flowVertices, flowMatrix.flowEdges, flowMatrix.streams, flowMatrix.packedCoordinates);\n    const receipt = await result?.wait();\n    if (!receipt) {\n      throw new Error('Transfer failed');\n    }\n    return receipt;\n  }\n\n  private async directTransfer(to: string, amount: bigint, tokenAddress: string): Promise<ContractTransactionReceipt> {\n    const tokenInf = await this.sdk.data.getTokenInfo(tokenAddress);\n    console.log(`Direct transfer - of: ${amount} - tokenId: ${tokenInf?.tokenId} - to: ${to}`);\n    if (!tokenInf) {\n      throw new Error('Token not found');\n    }\n\n    const numericTokenId = addressToUInt256(tokenInf.tokenId);\n    console.log(`numericTokenId: ${numericTokenId}`);\n    const tx = await this.sdk.v2Hub?.safeTransferFrom(\n      this.address,\n      to,\n      numericTokenId,\n      amount,\n      new Uint8Array(0));\n\n    const receipt = await tx?.wait();\n    if (!receipt) {\n      throw new Error('Transfer failed');\n    }\n\n    return receipt;\n  }\n\n  async transfer(to: string, amount: bigint, tokenAddress?: string): Promise<ContractTransactionReceipt> {\n    if (!tokenAddress) {\n      const approvalStatus = await this.sdk.v2Hub!.isApprovedForAll(this.address, this.address);\n      if (!approvalStatus) {\n        const tx = await this.sdk.v2Hub!.setApprovalForAll(this.address, true);\n        const receipt = await tx.wait();\n        if (!receipt) {\n          throw new Error('Approval failed');\n        }\n      }\n      console.log(`Approval by ${this.address} for ${this.address} successful`);\n\n      return this.transitiveTransfer(to, amount);\n    } else {\n      return this.directTransfer(to, amount, tokenAddress);\n    }\n  }\n\n  async trust(avatar: string): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.trust(avatar, BigInt('79228162514264337593543950335'));\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Trust failed');\n    }\n\n    return receipt;\n  }\n\n  async untrust(avatar: string): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.trust(avatar, BigInt('0'));\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Untrust failed');\n    }\n\n    return receipt;\n  }\n\n  async groupMint(group: string, collateral: string[], amounts: bigint[], data: Uint8Array): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.groupMint(group, collateral, amounts, data);\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Group mint failed');\n    }\n\n    return receipt;\n  }\n\n  async getProfile(): Promise<Profile | undefined> {\n    const profileCid = this.avatarInfo?.cidV0;\n    if (this._cachedProfile && this._cachedProfileCid === profileCid) {\n      return this._cachedProfile;\n    }\n\n    if (profileCid) {\n      try {\n        const profileData = await this.sdk?.profiles?.get(profileCid);\n        if (profileData) {\n          this._cachedProfile = profileData;\n          this._cachedProfileCid = profileCid;\n\n          return this._cachedProfile;\n        }\n      } catch (e) {\n        console.warn(`Couldn't load profile for CID ${profileCid}`, e);\n      }\n    }\n\n    return undefined;\n  }\n\n  async updateProfile(profile: Profile): Promise<string> {\n    const result = await this.sdk?.profiles?.create(profile);\n    if (!result) {\n      throw new Error('Failed to update profile. The profile service did not return a CID.');\n    }\n\n    const updateCidResult = await this.updateMetadata(result);\n    if (!updateCidResult) {\n      throw new Error('Failed to update profile. The CID was not updated.');\n    }\n\n    this.avatarInfo.cidV0 = result;\n\n    return result;\n  }\n\n  async wrapDemurrageErc20(amount: bigint): Promise<ContractTransactionReceipt> {\n\n    const wrapResult = await this.sdk.v2Hub?.wrap(this.avatarInfo.avatar, amount, 0n /*Demurrage*/);\n\n    throw new Error('Not implemented');\n  }\n\n  async wrapInflationErc20(amount: bigint): Promise<ContractTransactionReceipt> {\n\n    this.sdk.v2Hub?.wrap(this.avatarInfo.avatar, amount, 1n /*Inflation*/);\n\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Invite a user to Circles.\n   * @param avatar The address of the avatar to invite. Can be either a v1 address or an address that's not signed up yet.\n   */\n  async inviteHuman(avatar: string): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n\n    const avatarInfo = await this.sdk.data.getAvatarInfo(avatar);\n    if (avatarInfo?.version == 2) {\n      throw new Error('Avatar is already a v2 avatar');\n    }\n\n    const receipt = await this.trust(avatar);\n    if (!receipt) {\n      throw new Error('Invite failed');\n    }\n\n    return receipt;\n  }\n\n  private throwIfV2IsNotAvailable() {\n    if (!this.sdk.circlesConfig.v2HubAddress) {\n      throw new Error('V2 is not available');\n    }\n  }\n\n  private throwIfNameRegistryIsNotAvailable() {\n    if (!this.sdk.nameRegistry) {\n      throw new Error('Name registry is not available');\n    }\n  }\n}", "import { V1Avatar } from './v1/v1Avatar';\nimport { ContractTransactionReceipt, parseEther } from 'ethers';\nimport { Sdk } from './sdk';\nimport { AvatarInterface, AvatarInterfaceV2 } from './AvatarInterface';\nimport {\n  AvatarRow,\n  CirclesQuery, Observable,\n  TransactionHistoryRow,\n  TrustRelationRow\n} from '@circles-sdk/data';\nimport { V2Avatar } from './v2/v2Avatar';\nimport { CirclesEvent } from '@circles-sdk/data';\nimport { tcToCrc } from '@circles-sdk/utils';\nimport { Profile } from \"@circles-sdk/profiles\";\n\n/**\n * An Avatar represents a user registered at Circles.\n * It provides methods to interact with the Circles protocol, such as minting, transferring and trusting other avatars.\n */\nexport class Avatar implements AvatarInterfaceV2 {\n\n  public readonly address: string;\n\n  /**\n   * The actual avatar implementation to use behind this facade.\n   * @private\n   */\n  private _avatar: AvatarInterface | undefined;\n  private _avatarInfo: AvatarRow | undefined;\n  private _sdk: Sdk;\n\n  /**\n   * After initialization, this property contains the avatar's basic information.\n   */\n  get avatarInfo(): AvatarRow | undefined {\n    return this._avatarInfo;\n  }\n\n  private _tokenEventSubscription?: () => void = undefined;\n\n  /**\n   * Creates a new Avatar instance that controls a Circles avatar at the given address.\n   * @param sdk The SDK instance to use.\n   * @param avatarAddress The address of the avatar to control.\n   */\n  constructor(sdk: Sdk, avatarAddress: string) {\n    this.address = avatarAddress.toLowerCase();\n    this._sdk = sdk;\n  }\n\n  /**\n   * The events observable for this avatar.\n   */\n  public get events(): Observable<CirclesEvent> {\n    if (!this._events) {\n      throw new Error('Not initialized');\n    }\n    return this._events;\n  }\n\n  private _events: Observable<CirclesEvent> | undefined;\n\n  /**\n   * Initializes the avatar.\n   */\n  initialize = async () => {\n    if (this._tokenEventSubscription) {\n      this._tokenEventSubscription();\n    }\n\n    this._avatarInfo = await this._sdk.data.getAvatarInfo(this.address);\n    if (!this._avatarInfo) {\n      throw new Error('Avatar is not signed up at Circles');\n    }\n\n    const { version, hasV1 } = this._avatarInfo;\n    const v1Person = () => new V1Avatar(this._sdk, this._avatarInfo!);\n    const v2Person = () => new V2Avatar(this._sdk, this._avatarInfo!);\n\n    switch (version) {\n      case 1:\n        this._avatar = v1Person();\n        break;\n\n      case 2:\n        if (!hasV1) {\n          this._avatar = v2Person();\n        } else {\n          const v1Avatar = v1Person();\n          const isStopped = await v1Avatar.v1Token?.stopped();\n          this._avatar = isStopped ? v2Person() : v1Person();\n          const avatarInfo = this._avatar.avatarInfo;\n          if (avatarInfo) {\n            avatarInfo.v1Stopped = isStopped;\n          }\n        }\n        break;\n\n      default:\n        throw new Error('Unsupported avatar');\n    }\n\n    this._events = await this._sdk.data.subscribeToEvents(this._avatarInfo.avatar);\n  };\n\n  private onlyIfInitialized<T>(func: () => T) {\n    if (!this._avatar) {\n      throw new Error('Avatar is not initialized');\n    }\n    return func();\n  }\n\n  private onlyIfV2<T>(func: (avatar: AvatarInterfaceV2) => T) {\n    if (!this._avatar || this._avatarInfo?.version !== 2) {\n      throw new Error('Avatar is not initialized or is not a v2 avatar');\n    }\n    return func(<AvatarInterfaceV2>this._avatar);\n  }\n\n  /**\n   * `human` avatars can mint 24 personal Circles per day. This method returns the amount of Circles that can be minted.\n   *\n   * Note: v2 avatars can mint at max. 14 days * 24 Circles = 336 Circles.\n   *       v1 avatars on the other hand will stop minting after 90 days without minting.\n   * @returns The amount of Circles that can be minted.\n   */\n  getMintableAmount = (): Promise<number> => this.onlyIfInitialized(() => this._avatar!.getMintableAmount());\n  /**\n   * Mints the available personal Circles for the avatar. Check `getMintableAmount()` to see how many Circles can be minted.\n   * @returns The transaction receipt.\n   */\n  personalMint = (): Promise<ContractTransactionReceipt> => this.onlyIfInitialized(() => this._avatar!.personalMint());\n  /**\n   * Stops the avatar's token. This will prevent any future `personalMint()` calls and is not reversible.\n   */\n  stop = (): Promise<ContractTransactionReceipt> => this.onlyIfInitialized(() => this._avatar!.stop());\n  /**\n   * Utilizes the pathfinder to find the maximum Circles amount that can be transferred from this Avatar to the other avatar.\n   * @param to The address to transfer the Circles to.\n   * @param tokenId The token ID to transfer. If not specified, a transitve transfer is calculated.\n   * @returns The maximum Circles amount that can be transferred.\n   */\n  getMaxTransferableAmount = (to: string, tokenId?: string): Promise<bigint> => this.onlyIfInitialized(() => this._avatar!.getMaxTransferableAmount(to, tokenId));\n  /**\n   * Transfers Circles to another avatar.\n   *\n   * Note: The max. transferable amount can be lower than the avatar's balance depending on its trust relations and token holdings.\n   *       Use the `getMaxTransferableAmount()` method to calculate the max. transferable amount if you need to know it beforehand.\n   * @param to The address of the avatar to transfer to.\n   * @param amount The amount to transfer.\n   * @param token The token to transfer. Leave empty to allow transitive transfers.\n   */\n  transfer(to: string, amount: number, token?: string): Promise<ContractTransactionReceipt>;\n  transfer(to: string, amount: bigint, token?: string): Promise<ContractTransactionReceipt>;\n  transfer(to: string, amount: number | bigint, token?: string): Promise<ContractTransactionReceipt> {\n    if (typeof amount === 'number') {\n      const sendValue = this?.avatarInfo?.version === 1\n        ? tcToCrc(new Date(), amount)\n        : parseEther(amount.toString());\n\n      return this.onlyIfInitialized(() => this._avatar!.transfer(to, sendValue, token))\n    }\n    return this.onlyIfInitialized(() => this._avatar!.transfer(to, amount, token))\n  }\n  /**\n   * Trusts another avatar. Trusting an avatar means you're willing to accept Circles that have been issued by this avatar.\n   * @param avatar The address of the avatar to trust.\n   * @returns The transaction receipt.\n   */\n  trust = (avatar: string): Promise<ContractTransactionReceipt> => this.onlyIfInitialized(() => this._avatar!.trust(avatar));\n  /**\n   * Revokes trust from another avatar. This means you will no longer accept Circles issued by this avatar. This will not affect already received Circles.\n   * @param avatar The address of the avatar to untrust.\n   * @returns The transaction receipt.\n   */\n  untrust = (avatar: string): Promise<ContractTransactionReceipt> => this.onlyIfInitialized(() => this._avatar!.untrust(avatar));\n  /**\n   * Gets the trust relations of the avatar.\n   * @returns An array of trust relations in this form: avatar1 - [trusts|trustedBy|mutuallyTrusts] -> avatar2.\n   */\n  getTrustRelations = (): Promise<TrustRelationRow[]> => this.onlyIfInitialized(() => this._avatar!.getTrustRelations());\n  /**\n   * Gets the Circles transaction history of the avatar. The history contains incoming/outgoing transactions and minting of personal Circles and Group Circles.\n   * @param pageSize The maximum number of transactions per page.\n   * @returns A query object that can be used to iterate over the transaction history.\n   */\n  getTransactionHistory = (pageSize: number): Promise<CirclesQuery<TransactionHistoryRow>> => this.onlyIfInitialized(() => this._avatar!.getTransactionHistory(pageSize));\n  /**\n   * Gets the avatar's total Circles balance.\n   *\n   * Note: This queries either the v1 or the v2 balance of an avatar. Check the `avatarInfo` property to see which version your avatar uses.\n   *       Token holdings in v1 can be migrated to v2. Check out `Sdk.migrateAvatar` or `Sdk.migrateAllV1Tokens` for more information.\n   */\n  getTotalBalance = (): Promise<number> => this.onlyIfInitialized(() => this._avatar!.getTotalBalance());\n\n  /**\n   * Gets the avatar's total balance of chain-native tokens.\n   */\n  getGasTokenBalance = (): Promise<bigint> => this.onlyIfInitialized(() => this._avatar!.getGasTokenBalance());\n\n  /**\n   * Use collateral, trusted by the group, to mint new Group Circles.\n   * @param group The group which Circles to mint.\n   * @param collateral The collateral tokens to use for minting.\n   * @param amounts The amounts of the collateral tokens to use.\n   * @param data Additional data for the minting operation.\n   * @returns The transaction receipt.\n   */\n  groupMint = (group: string, collateral: string[], amounts: bigint[], data: Uint8Array): Promise<ContractTransactionReceipt> => this.onlyIfV2((avatar) => avatar.groupMint(group, collateral, amounts, data));\n  /**\n   * Wraps the specified amount of personal Circles into demurraged ERC20 tokens for use outside the Circles protocol.\n   * Note: This kind of token can be incompatible with services since it's demurraged and thus the balance changes over time.\n   * @param amount The amount of Circles to wrap.\n   */\n  wrapDemurrageErc20 = (amount: bigint): Promise<ContractTransactionReceipt> => this.onlyIfV2((avatar) => avatar.wrapDemurrageErc20(amount));\n  /**\n   * Wraps the specified amount of inflation Circles into ERC20 tokens for use outside the Circles protocol.\n   * In contrast to demurraged tokens, these token's balance does not change over time.\n   * @param amount\n   */\n  wrapInflationErc20 = (amount: bigint): Promise<ContractTransactionReceipt> => this.onlyIfV2((avatar) => avatar.wrapInflationErc20(amount));\n  /**\n   * Invite a human avatar to join Circles.\n   * @param avatar The address of any human controlled wallet.\n   */\n  inviteHuman = (avatar: string): Promise<ContractTransactionReceipt> => this.onlyIfV2((_avatar) => _avatar.inviteHuman(avatar));\n  /**\n   * Updates the avatar's metadata (profile).\n   * @param cid The IPFS content identifier of the metadata (Qm....).\n   */\n  updateMetadata = (cid: string): Promise<ContractTransactionReceipt> => this.onlyIfV2((_avatar) => _avatar.updateMetadata(cid));\n\n  /**\n   * Gets the profile that's associated with the avatar or returns `undefined` if no profile is associated.\n   * @returns The profile or `undefined`.\n   */\n  getProfile = (): Promise<Profile | undefined> => this.onlyIfV2((_avatar) => _avatar.getProfile());\n\n  /**\n   * Updates the avatar's profile.\n   * @param profile The new profile.\n   * @returns The IPFS CID of the updated profile.\n   */\n  updateProfile = (profile: Profile): Promise<string> => this.onlyIfV2((_avatar) => _avatar.updateProfile(profile));\n}", "export type TransferStep = {\n  from: string;\n  to: string;\n  token_owner: string;\n  value: string;\n};\n\nexport type TransferPath = {\n  requestedAmount: bigint;\n  maxFlow: bigint;\n  transferSteps: TransferStep[];\n  isValid: boolean;\n}\n\nexport class Pathfinder {\n  private readonly pathfinderURL: string;\n\n  constructor(pathfinderURL: string) {\n    this.pathfinderURL = pathfinderURL;\n  }\n\n  async getTransferPath(from: string, to: string, value: bigint): Promise<TransferPath> {\n    const query = {\n      method: 'compute_transfer',\n      params: { from, to, value: value.toString() }\n    };\n\n    const response = await fetch(this.pathfinderURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(query)\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error calling API: ${response.status}`);\n    }\n\n    const parsed = await response.json();\n    if (!parsed.result) {\n      throw new Error(`The pathfinder response didn't carry a result: ${JSON.stringify(parsed)}`);\n    }\n\n    return <TransferPath>{\n      requestedAmount: value,\n      maxFlow: BigInt(parsed.result.maxFlowValue),\n      transferSteps: parsed.result.transferSteps,\n      isValid: parsed.result.final\n    };\n  }\n}\n", "import {Avatar} from './avatar';\nimport {CirclesConfig} from './circlesConfig';\nimport {Pathfinder} from './v1/pathfinder';\nimport {AvatarInterface} from './AvatarInterface';\nimport {Hub as HubV1, Hub__factory as HubV1Factory, Token__factory} from '@circles-sdk/abi-v1';\nimport {\n  Hub as HubV2,\n  Hub__factory as HubV2Factory,\n  Migration__factory, NameRegistry, NameRegistry__factory\n} from '@circles-sdk/abi-v2';\nimport {AvatarRow, CirclesData, CirclesRpc} from '@circles-sdk/data';\nimport {V1Avatar} from './v1/v1Avatar';\nimport {cidV0ToUint8Array} from '@circles-sdk/utils';\nimport {GroupProfile, Profile, Profiles} from '@circles-sdk/profiles';\nimport {EthersContractRunner} from '@circles-sdk/adapter-ethers';\nimport {ZeroAddress} from \"ethers\";\n\n/**\n * The SDK interface.\n */\ninterface SdkInterface {\n  /**\n   * The signer used to sign transactions (connected wallet e.g. MetaMask).\n   */\n  contractRunner: EthersContractRunner;\n  /**\n   * The chain specific Circles configuration (contract addresses and rpc endpoints).\n   */\n  circlesConfig: CirclesConfig;\n  /**\n   * A configured instance of the CirclesData class, an easy-to-use wrapper around\n   * the Circles RPC Query API.\n   */\n  data: CirclesData;\n  /**\n   * An instance of the typechain generated Circles V1 Hub contract wrapper.\n   */\n  v1Hub: HubV1;\n  /**\n   * An instance of the typechain generated Circles V2 Hub contract wrapper.\n   */\n  v2Hub?: HubV2;\n  /**\n   * An instance of the v1 Pathfinder client (necessary for transfers; only available on gnosis chain with v1 Circles at the moment).\n   */\n  v1Pathfinder?: Pathfinder;\n  /**\n   * Stores and retrieves profiles from the Circles profile service.\n   */\n  profiles?: Profiles;\n  /**\n   * Gets an Avatar instance by its address. Fails if the avatar is not signed up at Circles.\n   * @param avatarAddress The avatar's address.\n   * @returns The Avatar instance.\n   */\n  getAvatar: (avatarAddress: string) => Promise<Avatar>;\n  /**\n   * Registers the connected wallet as a human avatar in Circles v1.\n   * @returns The Avatar instance.\n   */\n  registerHuman: () => Promise<AvatarInterface>;\n\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2 and creates a profile.\n   * @param profile The profile data of the avatar.\n   * @returns The Avatar instance.\n   */\n  registerHumanV2(profile: Profile): Promise<AvatarInterface>;\n\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2 and using an existing CID as profile.\n   * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n   * @returns The Avatar instance.\n   */\n  registerHumanV2(cidV0: string): Promise<AvatarInterface>;\n\n  /**\n   * Registers the connected wallet as an organization avatar in Circles v1.\n   */\n  registerOrganization: () => Promise<AvatarInterface>;\n  /**\n   * Registers the connected wallet as an organization avatar in Circles v2.\n   * @param profile The profile data of the organization.\n   */\n  registerOrganizationV2: (profile: Profile) => Promise<AvatarInterface>;\n  /**\n   * Registers the connected wallet as a group avatar in Circles v2.\n   * @param mint The address of the minting policy contract to use.\n   * @param profile The profile data of the group.\n   */\n  registerGroupV2: (mint: string, profile: GroupProfile) => Promise<AvatarInterface>;\n  /**\n   * Migrates a v1 avatar and all its Circles holdings to v2.\n   * [[ Currently only works for human avatars. ]]\n   * @param avatar The avatar's address.\n   * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n   */\n  migrateAvatar: (avatar: string, profile: Profile) => Promise<void>;\n}\n\n/**\n * Wraps a contract runner with its address.\n */\n\n\n/**\n * The SDK provides a high-level interface to interact with the Circles protocol.\n */\nexport class Sdk implements SdkInterface {\n  /**\n   * The signer used to sign transactions.\n   */\n  readonly contractRunner: EthersContractRunner;\n  /**\n   * The chain specific Circles configuration.\n   */\n  readonly circlesConfig: CirclesConfig;\n  /**\n   * The Circles RPC client.\n   */\n  readonly circlesRpc: CirclesRpc;\n  /**\n   * The Circles data client.\n   */\n  readonly data: CirclesData;\n  /**\n   * The typechain generated V1 hub contract wrapper.\n   */\n  readonly v1Hub: HubV1;\n  /**\n   * The typechain generated V2 hub contract wrapper.\n   */\n  readonly v2Hub?: HubV2;\n  /**\n   * The typechain generated NameRegistry contract wrapper.\n   */\n  readonly nameRegistry?: NameRegistry;\n  /**\n   * The pathfinder client (v1).\n   */\n  readonly v1Pathfinder?: Pathfinder;\n  /**\n   * The pathfinder client (v2).\n   */\n  readonly v2Pathfinder?: Pathfinder;\n  /**\n   * The profiles service client.\n   */\n  readonly profiles?: Profiles;\n\n  /**\n   * Creates a new SDK instance.\n   * @param circlesConfig The chain specific Circles configuration.\n   * @param contractRunner A contract runner instance and its address.\n   */\n  constructor(circlesConfig: CirclesConfig, contractRunner: EthersContractRunner) {\n    this.circlesConfig = circlesConfig;\n    this.contractRunner = contractRunner;\n    if (!this.contractRunner.address) {\n      throw new Error('Contract runner is not initialized');\n    }\n\n    this.circlesRpc = new CirclesRpc(circlesConfig.circlesRpcUrl);\n    this.data = new CirclesData(this.circlesRpc);\n    this.v1Hub = HubV1Factory.connect(circlesConfig.v1HubAddress ?? '0x29b9a7fBb8995b2423a71cC17cf9810798F6C543', this.contractRunner);\n    if (circlesConfig.v2HubAddress) {\n      this.v2Hub = HubV2Factory.connect(circlesConfig.v2HubAddress, this.contractRunner);\n    }\n    if (circlesConfig.pathfinderUrl) {\n      this.v1Pathfinder = new Pathfinder(circlesConfig.pathfinderUrl);\n    }\n    if (circlesConfig.v2PathfinderUrl) {\n      this.v2Pathfinder = new Pathfinder(circlesConfig.v2PathfinderUrl);\n    }\n    if (circlesConfig.nameRegistryAddress) {\n      this.nameRegistry = NameRegistry__factory.connect(circlesConfig.nameRegistryAddress, this.contractRunner);\n    }\n    if (circlesConfig.profileServiceUrl) {\n      this.profiles = new Profiles(circlesConfig.profileServiceUrl);\n    }\n  }\n\n  /**\n   * Gets an avatar by its address.\n   * @param avatarAddress The avatar's address.\n   * @returns The avatar instance.\n   * @throws If the given avatar address is not signed up at Circles.\n   */\n  getAvatar = async (avatarAddress: string): Promise<Avatar> => {\n    const avatar = new Avatar(this, avatarAddress);\n    await avatar.initialize();\n\n    return avatar;\n  };\n\n  /**\n   * Registers the connected wallet as a human avatar.\n   * @returns The avatar instance.\n   */\n  registerHuman = async (): Promise<AvatarInterface> => {\n    const receipt = await this.v1Hub.signup();\n    await receipt.wait();\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n    return this.getAvatar(this.contractRunner.address!);\n  };\n\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2.\n   * Note: This will only work if you already have a v1 avatar and only during the migration period.\n   *       The only way to join after the migration period is to be invited by an existing member.\n   * @param profile The profile data of the avatar.\n   * @returns The Avatar instance.\n   */\n  registerHumanV2(profile: Profile): Promise<AvatarInterface>;\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2 using an existing CID as profile.\n   * Note: This will only work if you already have a v1 avatar and only during the migration period.\n   *      The only way to join after the migration period is to be invited by an existing member.\n   * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n   * @returns The Avatar instance.\n   */\n  registerHumanV2(cidV0: string): Promise<AvatarInterface>;\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2.\n   * @param profile The profile data of the avatar.\n   */\n  async registerHumanV2(profile: Profile | string): Promise<AvatarInterface> {\n    return this._registerHuman(ZeroAddress, profile);\n  };\n\n  /**\n   * If you have been invited to Circles, you can accept the invitation and join the Circles network.\n   * Specify who invited you and supply the profile you want to use with your new account.\n   * @param inviter The address of the avatar that invited you.\n   * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n   */\n  acceptInvitation(inviter: string, cidV0: string): Promise<AvatarInterface>;\n  /**\n   * If you have been invited to Circles, you can accept the invitation and join the Circles network.\n   * @param inviter The address of the avatar that invited you.\n   * @param profile The profile data of the avatar.\n   */\n  acceptInvitation(inviter: string, profile: Profile): Promise<AvatarInterface>;\n\n  async acceptInvitation(inviter: string, profile: Profile | string): Promise<AvatarInterface> {\n    return this._registerHuman(inviter, profile);\n  }\n\n  private async _registerHuman(inviter: string, profile: Profile | string): Promise<AvatarInterface> {\n    if (!this.v2Hub) {\n      throw new Error('V2 hub not available');\n    }\n\n    let metadataDigest: Uint8Array = await this.createProfileIfNecessary(profile);\n\n    const tx = await this.v2Hub.registerHuman(inviter, metadataDigest);\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Transaction failed');\n    }\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n\n    return this.getAvatar(this.contractRunner.address!);\n  }\n\n  /**\n   * Checks if the profile argument is a string or a Profile object and creates the profile if necessary.\n   * If the profile is a string, it must be a CIDv0 string (Qm...).\n   * @param profile The profile data or CIDv0 of the avatar.\n   * @private\n   */\n  private async createProfileIfNecessary(profile: Profile | string) {\n    if (typeof profile === 'string') {\n      if (!profile.startsWith('Qm')) {\n        throw new Error('Invalid profile CID. Must be a CIDv0 string (Qm...).');\n      }\n      return cidV0ToUint8Array(profile);\n    } else if (this.profiles) {\n      const profileCid = await this.profiles?.create(profile);\n      return cidV0ToUint8Array(profileCid);\n    } else {\n      throw new Error('Profiles service is not configured');\n    }\n  }\n\n  /**\n   * Registers the connected wallet as an organization avatar.\n   * @returns The avatar instance.\n   */\n  registerOrganization = async (): Promise<AvatarInterface> => {\n    const receipt = await this.v1Hub.organizationSignup();\n    await receipt.wait();\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n    return this.getAvatar(this.contractRunner.address!);\n  };\n\n  /**\n   * Registers the connected wallet as an organization avatar in Circles v2.\n   * @param profile The profile data of the organization.\n   */\n  registerOrganizationV2 = async (profile: Profile): Promise<AvatarInterface> => {\n    if (!this.v2Hub) {\n      throw new Error('V2 hub not available');\n    }\n\n    const metadataDigest = await this.createProfileIfNecessary(profile);\n    const receipt = await this.v2Hub.registerOrganization(profile.name, metadataDigest);\n    await receipt.wait();\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n    return this.getAvatar(this.contractRunner.address!);\n  };\n\n  /**\n   * Registers the connected wallet as a group avatar in Circles v2.\n   * @param mint The address of the minting policy contract to use.\n   * @param profile The profile data of the group.\n   */\n  registerGroupV2 = async (mint: string, profile: GroupProfile): Promise<AvatarInterface> => {\n    if (!this.v2Hub) {\n      throw new Error('V2 hub not available');\n    }\n\n    const metadataDigest = await this.createProfileIfNecessary(profile);\n    const receipt = await this.v2Hub.registerGroup(mint, profile.name, profile.symbol, metadataDigest);\n    await receipt.wait();\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n    return this.getAvatar(this.contractRunner.address!);\n  };\n\n  private waitForAvatarInfo = async (address: string): Promise<AvatarRow> => {\n    let avatarRow: AvatarRow | undefined;\n    let retries = 0;\n    do {\n      avatarRow = await this.data.getAvatarInfo(address);\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      retries++;\n\n      if (retries > 120) {\n        throw new Error(`Timeout getting avatar info for ${address}`);\n      }\n    } while (!avatarRow);\n\n    return avatarRow;\n  };\n\n  /**\n   * Migrates a v1 avatar and all its Circles holdings to v2.\n   * @param avatar The avatar's address.\n   * @param profile The profile data of the avatar.\n   */\n  migrateAvatar = async (avatar: string, profile: Profile): Promise<void> => {\n    if (!this.v2Hub) {\n      throw new Error('V2 hub not available');\n    }\n    const avatarInfo = await this.data.getAvatarInfo(avatar);\n    if (!avatarInfo) {\n      throw new Error('Avatar not found');\n    }\n\n    if (avatarInfo.hasV1) {\n      // 1. Stop V1 token if necessary\n      if (avatarInfo.v1Token) {\n        const v1Avatar = new V1Avatar(this, avatarInfo);\n        const isStopped = await v1Avatar.v1Token?.stopped();\n\n        if (!isStopped) {\n          await v1Avatar.personalMint();\n          const stopTx = await v1Avatar.v1Token?.stop();\n          const stopTxReceipt = await stopTx?.wait();\n          if (!stopTxReceipt) {\n            throw new Error('Failed to stop V1 avatar');\n          }\n        }\n      }\n\n      // 2. Signup V2 avatar if necessary\n      if (avatarInfo.version === 1) {\n        await this.registerHumanV2(profile);\n      }\n\n      // 3. Make sure the v1 token minting status is known to the v2 hub\n      const calculateIssuanceTx = await this.v2Hub.calculateIssuanceWithCheck(avatar);\n      await calculateIssuanceTx.wait();\n\n      // 4. Migrate V1 tokens\n      await this.migrateAllV1Tokens(avatar);\n    } else {\n      throw new Error('Avatar is not a V1 avatar');\n    }\n  };\n\n  /**\n   * Migrates all V1 tokens of an avatar to V2.\n   * @param avatar The avatar's address.\n   */\n  /**\n   * Migrates all V1 token holdings of an avatar to V2.\n   * @param avatar The avatar whose tokens to migrate.\n   */\n  migrateAllV1Tokens = async (avatar: string): Promise<void> => {\n    if (!this.circlesConfig.migrationAddress) {\n      throw new Error('Migration address not set');\n    }\n    const balances = await this.data.getTokenBalances(avatar, false);\n    const tokensToMigrate = balances\n      .filter(o => BigInt(o.balance) > 0);\n\n    // TODO: Send in one transaction if sent to Safe\n    await Promise.all(tokensToMigrate.map(async (t, i) => {\n      const balance = BigInt(t.balance);\n      const token = Token__factory.connect(t.token, this.contractRunner);\n      const allowance = await token.allowance(avatar, this.circlesConfig.migrationAddress!);\n      if (allowance < balance) {\n        const increase = balance - allowance;\n        const tx = await token.increaseAllowance(this.circlesConfig.migrationAddress!, increase);\n        await tx.wait();\n      }\n    }));\n\n    const migrationContract = Migration__factory.connect(this.circlesConfig.migrationAddress, this.contractRunner);\n    const migrateTx = await migrationContract.migrate(\n      tokensToMigrate.map(o => o.tokenOwner)\n      , tokensToMigrate.map(o => BigInt(o.balance)));\n\n    await migrateTx.wait();\n  };\n}", "import {ethers} from 'ethers';\n\nexport const errorAbis = [\n    'error CirclesHubOnlyDuringBootstrap(uint8 code)',\n    'error CirclesHubRegisterAvatarV1MustBeStopped(address avatar, uint8 code)',\n    'error CirclesHubAvatarAlreadyRegistered(address avatar, uint8 code)',\n    'error CirclesHubMustBeHuman(address avatar, uint8 code)',\n    'error CirclesHubGroupIsNotRegistered(address group, uint8 code)',\n    'error CirclesHubInvalidTrustReceiver(address trustReceiver, uint8 code)',\n    'error CirclesHubGroupMintPolicyRejectedMint(address minter, address group, uint256[] collateral, uint256[] amounts, bytes data, uint8 code)',\n    'error CirclesHubGroupMintPolicyRejectedBurn(address burner, address group, uint256 amount, bytes data, uint8 code)',\n    'error CirclesHubOperatorNotApprovedForSource(address operator, address source, uint16 streamId, uint8 code)',\n    'error CirclesHubFlowEdgeIsNotPermitted(address receiver, uint256 circlesId, uint8 code)',\n    'error CirclesHubOnClosedPathOnlyPersonalCirclesCanReturnToAvatar(address failedReceiver, uint256 circlesId)',\n    'error CirclesHubFlowVerticesMustBeSorted()',\n    'error CirclesHubFlowEdgeStreamMismatch(uint16 flowEdgeId, uint16 streamId, uint8 code)',\n    'error CirclesHubStreamMismatch(uint16 streamId, uint8 code)',\n    'error CirclesHubNettedFlowMismatch(uint16 vertexPosition, int256 matrixNettedFlow, int256 streamNettedFlow)',\n    'error CirclesERC1155MintBlocked(address human, address mintV1Status)',\n    'error CirclesDemurrageAmountExceedsMaxUint190(address account, uint256 circlesId, uint256 amount, uint8 code)',\n    'error CirclesDemurrageDayBeforeLastUpdatedDay(address account, uint256 circlesId, uint64 day, uint64 lastUpdatedDay, uint8 code)',\n    'error CirclesERC1155CannotReceiveBatch(uint8 code)',\n    'error CirclesAvatarMustBeRegistered(address avatar, uint8 code)',\n    'error CirclesAddressCannotBeZero(uint8 code)',\n    'error CirclesInvalidFunctionCaller(address caller, address expectedCaller, uint8 code)',\n    'error CirclesInvalidCirclesId(uint256 id, uint8 code)',\n    'error CirclesInvalidString(string str, uint8 code)',\n    'error CirclesInvalidParameter(uint256 parameter, uint8 code)',\n    'error CirclesAmountOverflow(uint256 amount, uint8 code)',\n    'error CirclesArraysLengthMismatch(uint256 lengthArray1, uint256 lengthArray2, uint8 code)',\n    'error CirclesArrayMustNotBeEmpty(uint8 code)',\n    'error CirclesAmountMustNotBeZero(uint8 code)',\n    'error CirclesProxyAlreadyInitialized()',\n    'error CirclesLogicAssertion(uint8 code)',\n    'error CirclesIdMustBeDerivedFromAddress(uint256 providedId, uint8 code)',\n    'error CirclesReentrancyGuard(uint8 code)',\n    'error CirclesStandardTreasuryGroupHasNoVault(address group)',\n    'error CirclesStandardTreasuryRedemptionCollateralMismatch(uint256 circlesId, uint256[] redemptionIds, uint256[] redemptionValues, uint256[] burnIds, uint256[] burnValues)',\n    'error CirclesStandardTreasuryInvalidMetadataType(bytes32 metadataType, uint8 code)',\n    'error CirclesStandardTreasuryInvalidMetadata(bytes metadata, uint8 code)',\n    'error CirclesNamesInvalidName(address avatar, string name, uint8 code)',\n    'error CirclesNamesShortNameAlreadyAssigned(address avatar, uint72 shortName, uint8 code)',\n    'error CirclesNamesShortNameWithNonceTaken(address avatar, uint256 nonce, uint72 shortName, address takenByAvatar)',\n    'error CirclesNamesAvatarAlreadyHasCustomNameOrSymbol(address avatar, string nameOrSymbol, uint8 code)',\n    'error CirclesNamesOrganizationHasNoSymbol(address organization, uint8 code)'\n];\n\nconst iface = new ethers.Interface(errorAbis);\n\nexport function parseError(errorData: string): ethers.ErrorDescription | null {\n    return iface.parseError(errorData);\n}"],
  "mappings": "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Cd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,aAAa;AAAA,MACb,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,cAAc;AAAA,MACd,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,cAAc;AAAA,MACd,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AAAA,MACjB,iBAAiB;AA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ACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,MAAM;EACP;EACD;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,MAAM;EACP;EACD;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,MAAM;EACP;EACD;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;EACP;;AAGH,IAAMC,cACJ;AAMF,IAAMC,gBAAc,CAClB,OACwD,GAAG,SAAS;AAEhE,IAAO,eAAP,cAA4B,gBAAe;EAC/C,eAAe,MAA0B;AACvC,QAAIA,cAAY,IAAI,GAAG;AACrB,YAAM,GAAG,IAAI;WACR;AACL,YAAMF,QAAMC,aAAW,KAAK,CAAC,CAAC;;;EAIzB,qBACP,YACA,SACA,SACA,OACA,cACA,kBACA,UACA,WAAmD;AAEnD,WAAO,MAAM,qBACX,YACA,SACA,SACA,OACA,cACA,kBACA,UACA,aAAa,CAAA,CAAE;;EAGV,OACP,YACA,SACA,SACA,OACA,cACA,kBACA,UACA,WAAmD;AAEnD,WAAO,MAAM,OACX,YACA,SACA,SACA,OACA,cACA,kBACA,UACA,aAAa,CAAA,CAAE;;EAOV,QAAQ,QAA6B;AAC5C,WAAO,MAAM,QAAQ,MAAM;;EAK7B,OAAO,kBAAe;AACpB,WAAO,IAAI,UAAUD,MAAI;;EAE3B,OAAO,QAAQ,SAAiB,QAA8B;AAC5D,WAAO,IAAI,SAAS,SAASA,QAAM,MAAM;;;AAN3B,aAAQ,WAAGC;AACX,aAAG,MAAGD;ACjnBxB,IAAM,OAAO;EACX;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,MAAM;EACP;EACD;IACE,WAAW;IACX,QAAQ;MACN;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,SAAS;QACT,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ;MACN;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;MACD;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS;MACP;QACE,cAAc;QACd,MAAM;QACN,MAAM;MACP;IACF;IACD,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QAAQ,CAAA;IACR,MAAM;IACN,SAAS,CAAA;IACT,iBAAiB;IACjB,MAAM;EACP;EACD;IACE,QA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QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;QACd,YAAY;UACV;YACE,MAAM;YACN,MAAM;YACN,cAAc;UACf;UACD;YACE,MAAM;YACN,MAAM;YACN,cAAc;UACf;QACF;MACF;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;QACd,YAAY;UACV;YACE,MAAM;YACN,MAAM;YACN,cAAc;UACf;UACD;YACE,MAAM;YACN,MAAM;YACN,cAAc;UACf;UACD;YACE,MAAM;YACN,MAAM;YACN,cAAc;UACf;QACF;MACF;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;EACT;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;EACT;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;;AAGH,IAAMC,cACJ;AAMF,IAAMC,gBAAc,CAClB,OACwD,GAAG,SAAS;AAEhE,IAAOC,gBAAP,cAA4B,gBAAe;EAC/C,eAAe,MAA0B;AACvC,QAAID,cAAY,IAAI,GAAG;AACrB,YAAM,GAAG,IAAI;WACR;AACL,YAAMF,QAAMC,aAAW,KAAK,CAAC,CAAC;;;EAIzB,qBACP,QACA,eACA,YACA,YACA,mBACA,mBACA,gBACA,aACA,WAAmD;AAEnD,WAAO,MAAM,qBACX,QACA,eACA,YACA,YACA,mBACA,mBACA,gBACA,aACA,aAAa,CAAA,CAAE;;EAGV,OACP,QACA,eACA,YACA,YACA,mBACA,mBACA,gBACA,aACA,WAAmD;AAEnD,WAAO,MAAM,OACX,QACA,eACA,YACA,YACA,mBACA,mBACA,gBACA,aACA,aAAa,CAAA,CAAE;;EAOV,QAAQ,QAA6B;AAC5C,WAAO,MAAM,QAAQ,MAAM;;EAK7B,OAAO,kBAAe;AACpB,WAAO,IAAI,UAAUD,MAAI;;EAE3B,OAAO,QAAQ,SAAiB,QAA8B;AAC5D,WAAO,IAAI,SAAS,SAASA,QAAM,MAAM;;;AAN3BG,cAAQ,WAAGF;AACXE,cAAG,MAAGH;AC98DxB,IAAMA,UAAO;EACX;IACE,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;EACT;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;;AAGH,IAAMC,eACJ;AAMF,IAAMC,iBAAc,CAClB,OACwD,GAAG,SAAS;AAEhE,IAAO,qBAAP,cAAkC,gBAAe;EACrD,eAAe,MAAgC;AAC7C,QAAIA,eAAY,IAAI,GAAG;AACrB,YAAM,GAAG,IAAI;WACR;AACL,YAAMF,SAAMC,cAAW,KAAK,CAAC,CAAC;;;EAIzB,qBACP,QACA,QACA,mBACA,WAAmD;AAEnD,WAAO,MAAM,qBACX,QACA,QACA,mBACA,aAAa,CAAA,CAAE;;EAGV,OACP,QACA,QACA,mBACA,WAAmD;AAEnD,WAAO,MAAM,OACX,QACA,QACA,mBACA,aAAa,CAAA,CAAE;;EAOV,QAAQ,QAA6B;AAC5C,WAAO,MAAM,QAAQ,MAAM;;EAK7B,OAAO,kBAAe;AACpB,WAAO,IAAI,UAAUD,OAAI;;EAE3B,OAAO,QAAQ,SAAiB,QAA8B;AAC5D,WAAO,IAAI,SAAS,SAASA,SAAM,MAAM;;;AAN3B,mBAAQ,WAAGC;AACX,mBAAG,MAAGD;ACrXxB,IAAMA,QAAO;EACX;IACE,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;IACR,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS;MACP;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;IACD,SAAS,CAAA;IACT,iBAAiB;EAClB;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,SAAS;QACT,cAAc;MACf;IACF;IACD,WAAW;EACZ;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;MACD;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ,CAAA;EACT;EACD;IACE,MAAM;IACN,MAAM;IACN,QAAQ;MACN;QACE,MAAM;QACN,MAAM;QACN,cAAc;MACf;IACF;EACF;;AAGH,IAAMC,aACJ;AAMF,IAAMC,eAAc,CAClB,OACwD,GAAG,SAAS;AAEhE,IAAO,wBAAP,cAAqC,gBAAe;EACxD,eAAe,MAAmC;AAChD,QAAIA,aAAY,IAAI,GAAG;AACrB,YAAM,GAAG,IAAI;WACR;AACL,YAAMF,OAAMC,YAAW,KAAK,CAAC,CAAC;;;EAIzB,qBACP,MACA,WAAmD;AAEnD,WAAO,MAAM,qBAAqB,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",
  "names": ["BASE", "i", "j", "require_src", "require_constants", "require_src", "multihash", "_abi", "_bytecode", "isSuperArgs", "BigNumber", "compare", "format", "multihash", "_abi", "_bytecode", "isSuperArgs", "Hub__factory", "Pathfinder", "HubV1Factory", "HubV2Factory"]
}
