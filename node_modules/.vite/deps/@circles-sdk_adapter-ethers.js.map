{
  "version": 3,
  "sources": ["../../@circles-sdk/adapter-ethers/src/index.ts"],
  "sourcesContent": ["import {\n  AddressLike,\n  BigNumberish,\n  BrowserProvider,\n  ContractRunner,\n  Provider,\n  TransactionRequest,\n  TransactionResponse, Wallet\n} from 'ethers';\nimport {SdkContractRunner} from '@circles-sdk/adapter';\n\nexport abstract class EthersContractRunner implements ContractRunner {\n  abstract address?: string;\n  abstract provider: Provider | null;\n  abstract estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined;\n  abstract call?: ((tx: TransactionRequest) => Promise<string>) | undefined;\n  abstract resolveName?: ((name: string) => Promise<string | null>) | undefined;\n  abstract sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined;\n\n  abstract init(): Promise<void>;\n}\n\nexport class PrivateKeyContractRunner implements EthersContractRunner {\n  constructor(public provider: Provider, private privateKey: string) {\n  }\n\n  private _wallet?: Wallet;\n\n  async init(): Promise<void> {\n    this._wallet = new Wallet(this.privateKey, this.provider);\n    this.address = await this._wallet.getAddress();\n  }\n\n  private ensureWallet(): Wallet {\n    if (!this._wallet) {\n      throw new Error('Not initialized');\n    }\n    return this._wallet;\n  }\n\n  address?: string;\n  estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined = async (tx) => {\n    return this.ensureWallet().estimateGas(tx);\n  };\n  call?: ((tx: TransactionRequest) => Promise<string>) | undefined = async (tx) => {\n    return this.ensureWallet().call(tx);\n  };\n  resolveName?: ((name: string) => Promise<string | null>) | undefined = async (name) => {\n    return this.ensureWallet().resolveName(name);\n  };\n  sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined = async (tx) => {\n    return this.ensureWallet().sendTransaction(tx);\n  };\n}\n\nexport class BrowserProviderContractRunner implements EthersContractRunner {\n  constructor() {\n    const w: any = window;\n    const ethereumObject = w.ethereum;\n    if (!ethereumObject) {\n      throw new Error('No provider found on window.ethereum');\n    }\n    this.provider = new BrowserProvider(ethereumObject);\n  }\n\n  async init(): Promise<void> {\n    this.address = await (<BrowserProvider>this.provider).getSigner().then(signer => signer.getAddress());\n  }\n\n  address?: string;\n  provider: Provider;\n  estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined = async (tx) => this.provider.estimateGas(tx);\n  call?: ((tx: TransactionRequest) => Promise<string>) | undefined = async (tx) => this.provider.call(tx);\n  resolveName?: ((name: string) => Promise<string | null>) | undefined = async (name) => this.provider.resolveName(name);\n  sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined = async (tx) => {\n    const signer = await (<BrowserProvider>this.provider).getSigner();\n    return signer.sendTransaction(tx);\n  };\n}\n\n/**\n * Takes an ethers6 provider and a sdk contract runner and creates a contract runner that can be used with ethers6\n * and thus with the typechahain generated ethers6 contract wrappers.\n */\nexport class SdkContractRunnerWrapper implements EthersContractRunner {\n  /**\n   * Creates a new EthersContractRunner. The provider is used to fetch the transaction details and the sdkContractRunner is used to execute the transactions.\n   * @param provider The ethers6 provider\n   * @param address The address of the account that signs transactions\n   * @param sdkContractRunner The sdk contract runner\n   */\n  constructor(public provider: Provider, public address: string, private sdkContractRunner: SdkContractRunner) {\n  }\n\n  async init(): Promise<void> {\n  }\n\n  private async addressLikeToString(addressLike: AddressLike) {\n    if (typeof addressLike === 'string') {\n      return addressLike;\n    }\n    if (addressLike instanceof Promise) {\n      return addressLike;\n    }\n    return addressLike.getAddress();\n  }\n\n  private bignumberishToBigInt(value?: BigNumberish | null) {\n    if (!value) {\n      return BigInt(0);\n    }\n    if (typeof value === 'bigint') {\n      return value;\n    }\n    return BigInt(value);\n  }\n\n  estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined = async (tx) => {\n    if (!this.sdkContractRunner.estimateGas) {\n      throw new Error('estimateGas not supported');\n    }\n\n    if (!tx.to) {\n      throw new Error('to is required');\n    }\n    if (!tx.data && !tx.value) {\n      throw new Error('data or value is required');\n    }\n\n    return this.sdkContractRunner.estimateGas({\n      to: await this.addressLikeToString(tx.to),\n      data: tx.data ?? '0x',\n      value: this.bignumberishToBigInt(tx.value)\n    });\n  };\n\n  call?: ((tx: TransactionRequest) => Promise<string>) | undefined = async (tx) => {\n    if (!this.sdkContractRunner.call) {\n      throw new Error('call not supported');\n    }\n\n    if (!tx.to) {\n      throw new Error('to is required');\n    }\n    if (!tx.data && !tx.value) {\n      throw new Error('data or value is required');\n    }\n\n    return this.sdkContractRunner.call({\n      to: await this.addressLikeToString(tx.to),\n      data: tx.data ?? '0x',\n      value: this.bignumberishToBigInt(tx.value)\n    });\n  };\n  resolveName?: ((name: string) => Promise<string | null>) | undefined;\n  sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined = async (tx) => {\n    if (!this.sdkContractRunner.sendTransaction) {\n      throw new Error('sendTransaction not supported');\n    }\n\n    if (!tx.to) {\n      throw new Error('to is required');\n    }\n    if (!tx.data && !tx.value) {\n      throw new Error('data or value is required');\n    }\n\n    const response = await this.sdkContractRunner.sendTransaction({\n      to: await this.addressLikeToString(tx.to),\n      data: tx.data ?? '0x',\n      value: this.bignumberishToBigInt(tx.value)\n    });\n\n    const transactionResponse = await this.provider.getTransaction(response.hash);\n    if (!transactionResponse) {\n      throw new Error('Transaction not found');\n    }\n\n    return transactionResponse;\n  };\n}"],
  "mappings": "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",
  "names": []
}
