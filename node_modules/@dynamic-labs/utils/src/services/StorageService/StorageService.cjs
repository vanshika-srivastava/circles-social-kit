'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var EventEmitter = require('eventemitter3');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var EventEmitter__default = /*#__PURE__*/_interopDefaultLegacy(EventEmitter);

class StorageService {
    static clearRegistry() {
        StorageService.registry = {
            localStorage: undefined,
            secureStorage: undefined,
            sessionStorage: undefined,
        };
    }
    static registerSourceStorage(source, implementation) {
        StorageService.registry[source] = implementation;
    }
    static getSourceStorage(source) {
        return StorageService.registry[source];
    }
    static resolveStorage(options) {
        const priority = (options === null || options === void 0 ? void 0 : options.priority) || ['localStorage'];
        for (const source of priority) {
            const storage = StorageService.getSourceStorage(source);
            if (storage) {
                return storage;
            }
        }
        throw new Error('No available storage found based on the specified priority');
    }
    static getItem(key, options) {
        const storage = StorageService.resolveStorage(options);
        return storage.getItem(key);
    }
    static setItem(key, value, options) {
        const storage = StorageService.resolveStorage(options);
        storage.setItem(key, value);
    }
    static removeItem(key, options) {
        const storage = StorageService.resolveStorage(options);
        storage.removeItem(key);
    }
    static getKeys(options) {
        return StorageService.resolveStorage(options).getKeys();
    }
}
StorageService.registry = {
    localStorage: undefined,
    secureStorage: undefined,
    sessionStorage: undefined,
};
StorageService.events = new EventEmitter__default["default"]();

exports.StorageService = StorageService;
