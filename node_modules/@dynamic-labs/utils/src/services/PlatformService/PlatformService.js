'use client'
import { __classPrivateFieldGet, __classPrivateFieldSet } from '../../../_virtual/_tslib.js';
import { createBrowserPlatformService } from './createBrowserPlatformService/createBrowserPlatformService.js';

var _a, _PlatformService_implementation;
class PlatformService {
    static get implementation() {
        if (!__classPrivateFieldGet(_a, _a, "f", _PlatformService_implementation)) {
            return createBrowserPlatformService(window);
        }
        return __classPrivateFieldGet(_a, _a, "f", _PlatformService_implementation);
    }
    static set implementation(implementation) {
        __classPrivateFieldSet(_a, _a, implementation, "f", _PlatformService_implementation);
    }
    /**
     * Indicates if the current platform is a native mobile app
     * like react-native or flutter.
     */
    static get isNativeMobile() {
        return _a.implementation.isNativeMobile;
    }
    /**
     * Gets the origin of the current location.
     *
     * @example window.location.origin
     */
    static get getOrigin() {
        return _a.implementation.getOrigin;
    }
    /**
     * Gets the origin to be displayed in the UI.
     *
     * @example window.location.origin
     */
    static get getDisplayOrigin() {
        return _a.implementation.getDisplayOrigin;
    }
    /**
     * Gets the host of the current location.
     *
     * @example window.location.host
     */
    static get getHost() {
        return _a.implementation.getHost;
    }
    /**
     * Gets the hostname of the current location.
     *
     * @example window.location.hostname
     */
    static get getHostname() {
        return _a.implementation.getHostname;
    }
    static get getTLD() {
        return _a.implementation.getTLD;
    }
    /**
     * Opens a URL. If possible, should avoid new windows.
     */
    static get openURL() {
        return _a.implementation.openURL;
    }
}
_a = PlatformService;
_PlatformService_implementation = { value: void 0 };

export { PlatformService };
