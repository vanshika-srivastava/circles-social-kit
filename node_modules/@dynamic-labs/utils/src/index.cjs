'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var parseChainId = require('./parseChainId.cjs');
var parseEvmNetworks = require('./parseEvmNetworks.cjs');
var AccountExistsError = require('./errors/AccountExistsError.cjs');
var ChainalysisError = require('./errors/ChainalysisError.cjs');
var SandboxMaximumThresholdReachedError = require('./errors/SandboxMaximumThresholdReachedError.cjs');
var CustomError = require('./errors/CustomError.cjs');
var DynamicError = require('./errors/DynamicError.cjs');
var EmailAlreadyExistsError = require('./errors/EmailAlreadyExistsError.cjs');
var EmailProviderError = require('./errors/EmailProviderError.cjs');
var EmailVerificationError = require('./errors/EmailVerificationError.cjs');
var GateBlockedError = require('./errors/GateBlockedError.cjs');
var InsufficientFundsError = require('./errors/InsufficientFundsError.cjs');
var MissingEnvironmentIdError = require('./errors/MissingEnvironmentIdError.cjs');
var MissingPublicAddressError = require('./errors/MissingPublicAddressError.cjs');
var NoAccessError = require('./errors/NoAccessError.cjs');
var NotSupportedError = require('./errors/NotSupportedError.cjs');
var SmsVerificationError = require('./errors/SmsVerificationError.cjs');
var SocialAccountAlreadyExistsError = require('./errors/SocialAccountAlreadyExistsError.cjs');
var TransactionGasCannotBeSponsoredError = require('./errors/TransactionGasCannotBeSponsoredError.cjs');
var UserHasAccountWithEmailError = require('./errors/UserHasAccountWithEmailError.cjs');
var UsernameAlreadyExistsError = require('./errors/UsernameAlreadyExistsError.cjs');
var WalletNotDeployedError = require('./errors/WalletNotDeployedError.cjs');
var WalletUsedError = require('./errors/WalletUsedError.cjs');
var UserRejectedTransactionError = require('./errors/UserRejectedTransactionError.cjs');
var TooManyEmailVerificationsError = require('./errors/TooManyEmailVerificationsError.cjs');
var VerificationDataCollectionError = require('./errors/VerificationDataCollectionError.cjs');
var InvalidPhoneNumberError = require('./errors/InvalidPhoneNumberError.cjs');
var MergeAccountsConfirmationError = require('./errors/MergeAccountsConfirmationError.cjs');
var CustomFieldNotUniqueError = require('./errors/CustomFieldNotUniqueError.cjs');
var CookieInvalidError = require('./errors/CookieInvalidError.cjs');
var AccessBlockedError = require('./errors/AccessBlockedError.cjs');
var EmbeddedWalletException = require('./errors/EmbeddedWalletException.cjs');
var MfaInvalidOtpError = require('./errors/MfaInvalidOtpError.cjs');
var MfaRateLimitedError = require('./errors/MfaRateLimitedError.cjs');
var ExternalAuthError = require('./errors/ExternalAuthError.cjs');
var WalletAddressMismatchError = require('./errors/WalletAddressMismatchError.cjs');
var UserRejectedRequestError = require('./errors/UserRejectedRequestError.cjs');
var CancellablePromise = require('./CancellablePromise/CancellablePromise.cjs');
var isFunction = require('./isFunction/isFunction.cjs');
var isMobile = require('./isMobile.cjs');
var localStorageAsync = require('./localStorageAsync.cjs');
var bufferToBase64 = require('./bufferToBase64.cjs');
var last = require('./last.cjs');
var getProvidersFromWindow = require('./getProvidersFromWindow.cjs');
var sleep = require('./sleep/sleep.cjs');
var retryableFn = require('./retryableFn.cjs');
var wrapMethodWithCallback = require('./wrapMethodWithCallback/wrapMethodWithCallback.cjs');
var DeferredPromise = require('./DeferredPromise/DeferredPromise.cjs');
var handleMobileWalletRedirect = require('./handleMobileWalletRedirect/handleMobileWalletRedirect.cjs');
var uniq = require('./uniq/uniq.cjs');
var getTLD = require('./getTLD/getTLD.cjs');
var pipe = require('./pipe/pipe.cjs');
var formatNumberText = require('./formatNumberText/formatNumberText.cjs');
var ceil = require('./ceil/ceil.cjs');
var trimEnd = require('./trimEnd/trimEnd.cjs');
var isLedgerAddressViaVerifiedCredentials = require('./isLedgerAddressViaVerifiedCredentials.cjs');
var nativeMobileOauthStateParam = require('./nativeMobileOauthStateParam.cjs');
var eip6963Provider = require('./eip6963/eip6963Provider.cjs');
var runSafe = require('./runSafe/runSafe.cjs');
var PlatformService = require('./services/PlatformService/PlatformService.cjs');
var createBrowserPlatformService = require('./services/PlatformService/createBrowserPlatformService/createBrowserPlatformService.cjs');
var FetchService = require('./services/FetchService/FetchService.cjs');
var Oauth2Service = require('./services/Oauth2Service/Oauth2Service.cjs');
var createWindowOauth2Service = require('./services/Oauth2Service/createWindowOauth2Service/createWindowOauth2Service.cjs');
var template = require('./template/template.cjs');
var get = require('./get/get.cjs');
var hexToString = require('./hexToString/hexToString.cjs');
var isHex = require('./isHex/isHex.cjs');
var StorageService = require('./services/StorageService/StorageService.cjs');
var createStorageService = require('./services/StorageService/createStorageService/createStorageService.cjs');
var cloneObjectWithOverrides = require('./cloneObjectWithOverrides/cloneObjectWithOverrides.cjs');



exports.parseChainId = parseChainId.parseChainId;
exports.parseEvmNetworks = parseEvmNetworks.parseEvmNetworks;
exports.AccountExistsError = AccountExistsError.AccountExistsError;
exports.ChainalysisError = ChainalysisError.ChainalysisError;
exports.SandboxMaximumThresholdReachedError = SandboxMaximumThresholdReachedError.SandboxMaximumThresholdReachedError;
exports.CustomError = CustomError.CustomError;
exports.DynamicError = DynamicError.DynamicError;
exports.EmailAlreadyExistsError = EmailAlreadyExistsError.EmailAlreadyExistsError;
exports.EmailProviderError = EmailProviderError.EmailProviderError;
exports.EmailVerificationError = EmailVerificationError.EmailVerificationError;
exports.GateBlockedError = GateBlockedError.GateBlockedError;
exports.InsufficientFundsError = InsufficientFundsError.InsufficientFundsError;
exports.MissingEnvironmentIdError = MissingEnvironmentIdError.MissingEnvironmentIdError;
exports.MissingPublicAddressError = MissingPublicAddressError.MissingPublicAddressError;
exports.NoAccessError = NoAccessError.NoAccessError;
exports.NotSupportedError = NotSupportedError.NotSupportedError;
exports.SmsVerificationError = SmsVerificationError.SmsVerificationError;
exports.SocialAccountAlreadyExistsError = SocialAccountAlreadyExistsError.SocialAccountAlreadyExistsError;
exports.TransactionGasCannotBeSponsoredError = TransactionGasCannotBeSponsoredError.TransactionGasCannotBeSponsoredError;
exports.UserHasAccountWithEmailError = UserHasAccountWithEmailError.UserHasAccountWithEmailError;
exports.UsernameAlreadyExistsError = UsernameAlreadyExistsError.UsernameAlreadyExistsError;
exports.WalletNotDeployedError = WalletNotDeployedError.WalletNotDeployedError;
exports.WalletUsedError = WalletUsedError.WalletUsedError;
exports.UserRejectedTransactionError = UserRejectedTransactionError.UserRejectedTransactionError;
exports.TooManyEmailVerificationsError = TooManyEmailVerificationsError.TooManyEmailVerificationsError;
exports.VerificationDataCollectionError = VerificationDataCollectionError.VerificationDataCollectionError;
exports.InvalidPhoneNumberError = InvalidPhoneNumberError.InvalidPhoneNumberError;
exports.MergeAccountsConfirmationError = MergeAccountsConfirmationError.MergeAccountsConfirmationError;
exports.CustomFieldNotUniqueError = CustomFieldNotUniqueError.CustomFieldNotUniqueError;
exports.CookieInvalidError = CookieInvalidError.CookieInvalidError;
exports.AccessBlockedError = AccessBlockedError.AccessBlockedError;
exports.EmbeddedWalletException = EmbeddedWalletException.EmbeddedWalletException;
exports.MfaInvalidOtpError = MfaInvalidOtpError.MfaInvalidOtpError;
exports.MfaRateLimitedError = MfaRateLimitedError.MfaRateLimitedError;
exports.ExternalAuthError = ExternalAuthError.ExternalAuthError;
exports.WalletAddressMismatchError = WalletAddressMismatchError.WalletAddressMismatchError;
exports.UserRejectedRequestError = UserRejectedRequestError.UserRejectedRequestError;
exports.CancellablePromise = CancellablePromise.CancellablePromise;
exports.isFunction = isFunction.isFunction;
exports.getAndroidVersion = isMobile.getAndroidVersion;
exports.isAndroid = isMobile.isAndroid;
exports.isIOS = isMobile.isIOS;
exports.isIPad = isMobile.isIPad;
exports.isIPhone = isMobile.isIPhone;
exports.isIPhone8OrEarlier = isMobile.isIPhone8OrEarlier;
exports.isLegacySafari = isMobile.isLegacySafari;
exports.isMobile = isMobile.isMobile;
exports.isSafariBrowser = isMobile.isSafariBrowser;
exports.isSamsungBrowser = isMobile.isSamsungBrowser;
exports.isWindows = isMobile.isWindows;
exports.getItemAsync = localStorageAsync.getItemAsync;
exports.removeItemAsync = localStorageAsync.removeItemAsync;
exports.setItemAsync = localStorageAsync.setItemAsync;
exports.bufferToBase64 = bufferToBase64.bufferToBase64;
exports.last = last.last;
exports.getProvidersFromWindow = getProvidersFromWindow.getProvidersFromWindow;
exports.sleep = sleep.sleep;
exports.FALLBACK_UNDEFINED = retryableFn.FALLBACK_UNDEFINED;
exports.retryableFn = retryableFn.retryableFn;
exports.wrapMethodWithCallback = wrapMethodWithCallback.wrapMethodWithCallback;
exports.DeferredPromise = DeferredPromise.DeferredPromise;
exports.handleMobileWalletRedirect = handleMobileWalletRedirect.handleMobileWalletRedirect;
exports.uniq = uniq.uniq;
exports.getTLD = getTLD.getTLD;
exports.pipe = pipe.pipe;
exports.formatNumberText = formatNumberText.formatNumberText;
exports.ceil = ceil.ceil;
exports.trimEnd = trimEnd.trimEnd;
exports.isLedgerAddressViaVerifiedCredentials = isLedgerAddressViaVerifiedCredentials.isLedgerAddressViaVerifiedCredentials;
exports.nativeMobileOauthStateParam = nativeMobileOauthStateParam.nativeMobileOauthStateParam;
exports.Eip6963Provider = eip6963Provider.Eip6963Provider;
exports.Eip6963ProviderSingleton = eip6963Provider.Eip6963ProviderSingleton;
exports.runSafe = runSafe.runSafe;
exports.PlatformService = PlatformService.PlatformService;
exports.createBrowserPlatformService = createBrowserPlatformService.createBrowserPlatformService;
exports.FetchService = FetchService.FetchService;
exports.Oauth2Service = Oauth2Service.Oauth2Service;
exports.createWindowOauth2Service = createWindowOauth2Service.createWindowOauth2Service;
exports.template = template.template;
exports.get = get.get;
exports.hexToString = hexToString.hexToString;
exports.isHex = isHex.isHex;
exports.StorageService = StorageService.StorageService;
exports.createStorageService = createStorageService.createStorageService;
exports.cloneObjectWithOverrides = cloneObjectWithOverrides.cloneObjectWithOverrides;
