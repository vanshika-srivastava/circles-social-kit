'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { toAccount } from 'viem/accounts';
import { ViemUiTransaction } from '../ViemUiTransaction/ViemUiTransaction.js';

const createAccountWithUiConfirmation = ({ address, account, provider, walletConnector, walletUiUtils, }) => toAccount({
    address,
    signMessage: (...args) => __awaiter(void 0, void 0, void 0, function* () {
        return walletUiUtils.signMessage({
            handler: () => __awaiter(void 0, void 0, void 0, function* () { return (yield account()).signMessage(...args); }),
            message: (() => {
                var _a;
                const msg = (_a = args[0]) === null || _a === void 0 ? void 0 : _a.message;
                return msg && !(typeof msg === 'string' && Array.isArray(msg))
                    ? JSON.stringify(msg)
                    : msg === null || msg === void 0 ? void 0 : msg.toString();
            })(),
            walletConnector,
        });
    }),
    signTransaction: (...args) => __awaiter(void 0, void 0, void 0, function* () {
        const uiTransaction = new ViemUiTransaction({
            account: address,
            onSubmit: (transaction) => __awaiter(void 0, void 0, void 0, function* () { return (yield account()).signTransaction(transaction); }),
            publicClient: provider,
            transaction: args[0],
        });
        return walletUiUtils.sendTransaction(walletConnector, uiTransaction);
    }),
    signTypedData: (...args) => walletUiUtils.signMessage({
        handler: () => __awaiter(void 0, void 0, void 0, function* () { return (yield account()).signTypedData(...args); }),
        message: JSON.stringify(args[0]),
        walletConnector,
    }),
});

export { createAccountWithUiConfirmation };
