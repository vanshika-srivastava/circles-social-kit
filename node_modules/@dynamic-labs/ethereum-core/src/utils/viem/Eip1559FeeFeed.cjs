'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var logger = require('../logger.cjs');

class Eip1559FeeFeed {
    constructor({ publicClient, initialGasLimit, initialMaxFeePerGas, }) {
        this.fee = {
            gas: BigInt(0),
        };
        this.publicClient = publicClient;
        this.initialGasLimit = initialGasLimit;
        this.initialMaxFeePerGas = initialMaxFeePerGas;
    }
    fetchFee() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            try {
                const l1Fee = yield this.estimateL1Fee();
                // Original transaction already defined the gas limit and max fee per gas
                if (this.initialGasLimit && this.initialMaxFeePerGas) {
                    this.fee.gas = this.initialGasLimit * this.initialMaxFeePerGas + l1Fee;
                    return;
                }
                // Estimate the gas limit
                const gasLimit = yield this.estimateGas();
                // Original transaction defined the max fee per gas
                if (this.initialMaxFeePerGas) {
                    this.fee.gas = gasLimit * this.initialMaxFeePerGas + l1Fee;
                    return;
                }
                // Estimate max fee per gas
                const estimatedFeesPerGas = yield this.publicClient.estimateFeesPerGas();
                if (!estimatedFeesPerGas || !estimatedFeesPerGas.maxFeePerGas) {
                    return;
                }
                this.fee.gas = gasLimit * estimatedFeesPerGas.maxFeePerGas + l1Fee;
                this.maxFeePerGas = estimatedFeesPerGas.maxFeePerGas;
                this.maxPriorityFeePerGas = estimatedFeesPerGas.maxPriorityFeePerGas;
            }
            catch (error) {
                logger.logger.debug(error);
                return undefined;
            }
        });
    }
}

exports.Eip1559FeeFeed = Eip1559FeeFeed;
