'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var viem = require('viem');
var utils = require('@dynamic-labs/utils');
var Eip1559FeeFeed = require('../Eip1559FeeFeed.cjs');
var estimateL1Fee = require('../estimateL1Fee/estimateL1Fee.cjs');
var validateAddressFormat = require('../../validateAddressFormat/validateAddressFormat.cjs');
var parseEther = require('../parseEther/parseEther.cjs');
var formatEther = require('../formatEther/formatEther.cjs');

class ViemUiTransaction extends Eip1559FeeFeed.Eip1559FeeFeed {
    constructor({ transaction, onSubmit, publicClient, account, }) {
        super({
            initialGasLimit: transaction.gas,
            initialMaxFeePerGas: transaction.maxFeePerGas,
            publicClient,
        });
        this.chain = 'EVM';
        this.validateAddressFormat = validateAddressFormat.validateAddressFormat;
        this.parse = parseEther.parseEther;
        this.parseNonNativeToken = (amount, decimals) => viem.parseUnits(amount, decimals);
        this.format = formatEther.formatEther;
        this.formatNonNativeToken = (value, decimals) => viem.formatUnits(value, decimals);
        this.transaction = transaction;
        this.onSubmit = onSubmit;
        this.publicClient = publicClient;
        this.address = account;
    }
    get to() {
        return this.transaction.to || undefined;
    }
    set to(toAddress) {
        this.transaction.to = toAddress;
    }
    get from() {
        return this.address;
    }
    get value() {
        return this.transaction.value;
    }
    set value(value) {
        this.transaction.value = value;
    }
    get nonNativeValue() {
        return this.transaction.nonNativeValue;
    }
    set nonNativeValue(value) {
        this.transaction.nonNativeValue = value;
    }
    get nonNativeAddress() {
        return this.transaction.nonNativeAddress;
    }
    set nonNativeAddress(value) {
        this.transaction.nonNativeAddress = value;
    }
    get nonNativeDecimal() {
        return this.transaction.nonNativeDecimal;
    }
    set nonNativeDecimal(value) {
        this.transaction.nonNativeDecimal = value;
    }
    get data() {
        return this.transaction.data;
    }
    submit() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            return this.onSubmit(this.transaction).catch((error) => {
                if (error instanceof utils.UserRejectedTransactionError) {
                    throw new viem.TransactionExecutionError(new viem.BaseError(error.message), this.transaction);
                }
                throw error;
            });
        });
    }
    getBalance() {
        return this.publicClient.getBalance({ address: this.address });
    }
    estimateGas() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const hexResult = (yield this.publicClient.transport.request({
                method: 'eth_estimateGas',
                params: [
                    {
                        data: this.data,
                        to: this.to,
                        value: this.convertBigIntToHex(this.value),
                    },
                ],
            }));
            return viem.hexToBigInt(hexResult);
        });
    }
    convertBigIntToHex(value) {
        return value ? viem.toHex(value) : undefined;
    }
    estimateL1Fee() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!estimateL1Fee.isL1FeeSupportedByChain(((_a = this.publicClient.chain) === null || _a === void 0 ? void 0 : _a.id) || 0)) {
                return BigInt(0);
            }
            return estimateL1Fee.estimateL1Fee(this.publicClient, {
                data: this.transaction.data,
                to: this.transaction.to,
                value: this.transaction.value,
            });
        });
    }
    set maxFeePerGas(value) {
        this.transaction.maxFeePerGas = value;
    }
    set maxPriorityFeePerGas(value) {
        this.transaction.maxPriorityFeePerGas = value;
    }
}

exports.ViemUiTransaction = ViemUiTransaction;
