'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { parseUnits, formatUnits, toHex, TransactionExecutionError, BaseError, hexToBigInt } from 'viem';
import { UserRejectedTransactionError } from '@dynamic-labs/utils';
import { Eip1559FeeFeed } from '../Eip1559FeeFeed.js';
import { isL1FeeSupportedByChain, estimateL1Fee } from '../estimateL1Fee/estimateL1Fee.js';
import { validateAddressFormat } from '../../validateAddressFormat/validateAddressFormat.js';
import { parseEther } from '../parseEther/parseEther.js';
import { formatEther } from '../formatEther/formatEther.js';

class ViemUiTransaction extends Eip1559FeeFeed {
    constructor({ transaction, onSubmit, publicClient, account, }) {
        super({
            initialGasLimit: transaction.gas,
            initialMaxFeePerGas: transaction.maxFeePerGas,
            publicClient,
        });
        this.chain = 'EVM';
        this.validateAddressFormat = validateAddressFormat;
        this.parse = parseEther;
        this.parseNonNativeToken = (amount, decimals) => parseUnits(amount, decimals);
        this.format = formatEther;
        this.formatNonNativeToken = (value, decimals) => formatUnits(value, decimals);
        this.transaction = transaction;
        this.onSubmit = onSubmit;
        this.publicClient = publicClient;
        this.address = account;
    }
    get to() {
        return this.transaction.to || undefined;
    }
    set to(toAddress) {
        this.transaction.to = toAddress;
    }
    get from() {
        return this.address;
    }
    get value() {
        return this.transaction.value;
    }
    set value(value) {
        this.transaction.value = value;
    }
    get nonNativeValue() {
        return this.transaction.nonNativeValue;
    }
    set nonNativeValue(value) {
        this.transaction.nonNativeValue = value;
    }
    get nonNativeAddress() {
        return this.transaction.nonNativeAddress;
    }
    set nonNativeAddress(value) {
        this.transaction.nonNativeAddress = value;
    }
    get nonNativeDecimal() {
        return this.transaction.nonNativeDecimal;
    }
    set nonNativeDecimal(value) {
        this.transaction.nonNativeDecimal = value;
    }
    get data() {
        return this.transaction.data;
    }
    submit() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.onSubmit(this.transaction).catch((error) => {
                if (error instanceof UserRejectedTransactionError) {
                    throw new TransactionExecutionError(new BaseError(error.message), this.transaction);
                }
                throw error;
            });
        });
    }
    getBalance() {
        return this.publicClient.getBalance({ address: this.address });
    }
    estimateGas() {
        return __awaiter(this, void 0, void 0, function* () {
            const hexResult = (yield this.publicClient.transport.request({
                method: 'eth_estimateGas',
                params: [
                    {
                        data: this.data,
                        to: this.to,
                        value: this.convertBigIntToHex(this.value),
                    },
                ],
            }));
            return hexToBigInt(hexResult);
        });
    }
    convertBigIntToHex(value) {
        return value ? toHex(value) : undefined;
    }
    estimateL1Fee() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (!isL1FeeSupportedByChain(((_a = this.publicClient.chain) === null || _a === void 0 ? void 0 : _a.id) || 0)) {
                return BigInt(0);
            }
            return estimateL1Fee(this.publicClient, {
                data: this.transaction.data,
                to: this.transaction.to,
                value: this.transaction.value,
            });
        });
    }
    set maxFeePerGas(value) {
        this.transaction.maxFeePerGas = value;
    }
    set maxPriorityFeePerGas(value) {
        this.transaction.maxPriorityFeePerGas = value;
    }
}

export { ViemUiTransaction };
