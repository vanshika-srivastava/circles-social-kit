'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var viem = require('viem');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('@dynamic-labs/utils');
require('../utils/logger.cjs');
require('../utils/viem/estimateL1Fee/opStack/estimateL1Fee.cjs');
require('../utils/viem/chainsMap/chainsMap.cjs');
var interceptTransport = require('../utils/viem/interceptTransport/interceptTransport.cjs');
require('viem/accounts');
require('viem/chains');

class EthereumWallet extends walletConnectorCore.Wallet {
    /**
     * Retrieves the public client.
     * @returns A promise that resolves to the public client,
     * or throws if the client cannot be retrieved.
     */
    getPublicClient() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const client = yield this._connector.getPublicClient();
            if (!client) {
                throw new Error('Unable to retrieve PublicClient');
            }
            return client;
        });
    }
    /**
     * Retrieves the wallet client.
     * @param chainId - (optional) Chain id to be used by the wallet client.
     * @returns A promise that resolves to the wallet client,
     * or throws if the client cannot be retrieved.
     */
    getWalletClient(chainId) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const walletClient = this._connector.getWalletClient(chainId);
            if (!walletClient) {
                throw new Error('Unable to retrieve WalletClient');
            }
            return viem.createWalletClient({
                account: this.address,
                chain: walletClient.chain,
                transport: interceptTransport.interceptTransport({
                    onPersonalSign: (_a) => _tslib.__awaiter(this, [_a], void 0, function* ({ provider, args }) {
                        yield this.sync();
                        return provider.request(args);
                    }),
                    onSendTransaction: (_b) => _tslib.__awaiter(this, [_b], void 0, function* ({ provider, args }) {
                        yield this.sync();
                        return provider.request(args);
                    }),
                    onSignTypedData: (_c) => _tslib.__awaiter(this, [_c], void 0, function* ({ provider, args }) {
                        yield this.sync();
                        return provider.request(args);
                    }),
                    transport: viem.custom(walletClient.transport),
                }),
            });
        });
    }
}

exports.EthereumWallet = EthereumWallet;
