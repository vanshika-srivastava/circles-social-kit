'use client'
'use strict';

var viem = require('viem');
var rpcProviders = require('@dynamic-labs/rpc-providers');
var utils = require('@dynamic-labs/utils');
require('../../../_virtual/_tslib.cjs');
require('../../utils/logger.cjs');
require('../../utils/viem/estimateL1Fee/opStack/estimateL1Fee.cjs');
require('../../utils/viem/chainsMap/chainsMap.cjs');
require('viem/accounts');
var getOrMapViemChain = require('../../utils/viem/getOrMapViemChain/getOrMapViemChain.cjs');

rpcProviders.ChainRpcProviders.getEvmProviderByChainId = (rpcProviders, chainId) => {
    var _a;
    const provider = (_a = rpcProviders['evm']) === null || _a === void 0 ? void 0 : _a.find((provider) => provider.chainId === chainId);
    return provider;
};
rpcProviders.ChainRpcProviders.registerEvmProviders = () => {
    rpcProviders.ChainRpcProviders.registerChainProviders(rpcProviders.ProviderChain.EVM, (config) => {
        const rpcProviders = {};
        if (config === null || config === void 0 ? void 0 : config.evm) {
            rpcProviders.evm = utils.parseEvmNetworks(config.evm).map((network) => {
                var _a;
                const rpcUrl = ((_a = network.privateCustomerRpcUrls) === null || _a === void 0 ? void 0 : _a[0]) || network.rpcUrls[0];
                const provider = viem.createPublicClient({
                    chain: getOrMapViemChain.getOrMapViemChain(network),
                    transport: viem.http(rpcUrl),
                });
                return {
                    chainId: network.chainId,
                    chainName: network.name,
                    provider,
                };
            });
        }
        return rpcProviders.evm;
    });
};
