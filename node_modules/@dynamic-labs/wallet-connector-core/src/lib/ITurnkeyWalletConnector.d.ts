import { JwtVerifiedCredential, TurnkeyWalletProperties } from '@dynamic-labs/sdk-api-core';
import { WalletConnectorBase } from './WalletConnector';
type JwtVerifiedCredentialWithSmartWalletRef = JwtVerifiedCredential & {
    smartWalletRefId?: string;
    smartWalletRefAddress?: string;
};
type SessionKeys = {
    publicKey: string;
    privateKey: string;
};
export interface ITurnkeyWalletConnector extends WalletConnectorBase {
    createOrRestoreSessionFetcherFunction?: ({ ignoreRestore, }: {
        ignoreRestore?: boolean;
    }) => Promise<SessionKeys>;
    removeSessionKeysFunction?: () => Promise<void>;
    getWebAuthnAttestation(): Promise<{
        attestation: {
            attestationObject: ArrayBuffer;
            clientDataJson: ArrayBuffer;
            credentialId: ArrayBuffer;
            transports: string[];
        };
        challenge: string;
        displayName: string;
    }>;
    getAuthenticatorHandler(): unknown;
    getExportHandler(): unknown;
    email: string | null | undefined;
    setEmail(email: string | null | undefined): void;
    clearEmail(): void;
    phone: string | null | undefined;
    setPhone(phone: string | null | undefined): void;
    passkeyIdentifier: string | null | undefined;
    setPasskeyIdentifier(passkeyIdentifier: string | null | undefined): void;
    turnkeyAddress: string | undefined;
    walletProperties: TurnkeyWalletProperties | undefined;
    verifiedCredential: JwtVerifiedCredentialWithSmartWalletRef | undefined;
    verifiedCredentials: JwtVerifiedCredentialWithSmartWalletRef[] | undefined;
    setSessionKeyFetcher(func: () => Promise<SessionKeys>): void;
    setSessionKeyRemoveFunction(func: () => Promise<void>): void;
    removeSessionKeys(): Promise<void>;
    createOrRestoreSession({ ignoreRestore, }: {
        ignoreRestore?: boolean;
    }): Promise<string | undefined>;
    isSessionKeyCompatible(): boolean;
    isSessionActive(): Promise<boolean>;
    sessionKeys: SessionKeys | undefined;
}
export {};
