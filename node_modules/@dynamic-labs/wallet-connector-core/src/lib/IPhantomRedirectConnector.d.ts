import EventEmitter from 'eventemitter3';
import { WalletConnectorBase } from '.';
export type SignAndSendTransactionListener = (response: {
    signature?: string;
    errorCode?: string;
    errorMessage?: string;
}) => void;
export type SignAllTransactionsListener = (response: {
    transactions?: string[];
    errorCode?: string;
    errorMessage?: string;
}) => void;
export type SignTransactionListener = (response: {
    transaction?: string;
    errorCode?: string;
    errorMessage?: string;
}) => void;
export type SignMessageListener = (response: {
    signature?: string;
    errorCode?: string;
    errorMessage?: string;
}) => void;
type Events = {
    signAndSendTransaction: SignAndSendTransactionListener;
    signAllTransactions: SignAllTransactionsListener;
    signTransaction: SignTransactionListener;
    signMessage: SignMessageListener;
};
export interface IPhantomRedirectConnector extends WalletConnectorBase {
    extractSignature(): {
        signature: string;
        message: string;
    };
    extractTransactions(): any[];
    extractTransaction(): any;
    consumeMethod(): keyof Events | undefined;
}
export type IPhantomRedirectConnectorWithEvents = IPhantomRedirectConnector & EventEmitter<Events>;
export {};
