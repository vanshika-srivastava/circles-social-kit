/**
 * Dashboard API
 * Dashboard API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CompletePasskeyRecoveryRequest, ConnectRequest, CreateEmbeddedWalletsRequest, CreateWalletAccountRequest, EmailProviderResponse, EmailVerificationCreateRequest, EmailVerificationCreateResponse, EmailVerificationRetryRequest, EmailVerificationVerifyRequest, EmbeddedWalletAuthToken, EmbeddedWalletAuthType, EmbeddedWalletChainEnum, EmbeddedWalletPasscodeClaimRequest, EmbeddedWalletSecret, ExportEmbeddedWalletResponse, ExternalAuthSigninRequest, FarcasterSignInRequest, GetUserPasskeysResponse, HealthcheckResponse, InitEmailAuthRequest, InitEmailAuthResponse, InitPasskeyRecoveryRequest, InitPasskeyRecoveryResponse, JwksResponse, MFAAuthPasskeyDeviceGetResponse, MFAAuthPasskeyDevicePostRequest, MFAAuthRecoveryDevicePostRequest, MFAAuthTotpDevicePostRequest, MFADevice, MFAGetRecoveryCodesResponse, MFAListDevicesResponse, MFARegenRecoveryCodesResponse, MFARegisterPasskeyDeviceGetResponse, MFARegisterPasskeyDevicePostRequest, MFARegisterTotpDeviceGetResponse, MFARegisterTotpDevicePostRequest, MFAUpdateDeviceRequest, MergeUserConflictResolutions, NetworkConfigurationResponse, NonceResponse, OauthInitAuthRequest, OauthProviderLoginUrl, OauthRequest, OauthResultRequest, OauthResultResponse, PrefetchRequest, ProjectSettings, ProviderEnum, PublishEvents, RegisterEmbeddedWalletSessionKeyResponse, RegisterSessionKeyRequest, ScanWebsiteUrlRequest, ScanWebsiteUrlResponse, SdkSettingsRequest, SdkUser, SmsVerificationCreateRequest, SmsVerificationCreateResponse, SmsVerificationRetryRequest, SmsVerificationVerifyRequest, SolanaTransactionOptimizationRequest, SolanaTransactionOptimizationResponse, SupportedOnrampsResponse, TelegramPostRequest, TokenBalance, TurnkeyCreateWalletAccountsRequestBody, UpdateRecoveryEmailRequest, UpdateSelfResponse, UpdateUserPasskeyRequest, UserFields, UserPasskey, UserWalletSelectionRequest, VerifyRequest, VerifyResponse, VerifyUnlinkRequest } from '../models';
export interface AuthMfaPasskeyDeviceRequest {
    environmentId: string;
    mFAAuthPasskeyDevicePostRequest: MFAAuthPasskeyDevicePostRequest;
}
export interface AuthMfaPasskeyDeviceChallengeRequest {
    environmentId: string;
}
export interface AuthMfaPasskeyDeviceOptionsRequest {
    environmentId: string;
}
export interface AuthMfaRecoveryRequest {
    environmentId: string;
    mFAAuthRecoveryDevicePostRequest: MFAAuthRecoveryDevicePostRequest;
}
export interface AuthMfaRecoveryOptionsRequest {
    environmentId: string;
}
export interface AuthMfaTotpDeviceRequest {
    environmentId: string;
    mFAAuthTotpDevicePostRequest: MFAAuthTotpDevicePostRequest;
}
export interface AuthMfaTotpDeviceOptionsRequest {
    environmentId: string;
}
export interface ClaimEmbeddedWalletRequest {
    environmentId: string;
    embeddedWalletPasscodeClaimRequest: EmbeddedWalletPasscodeClaimRequest;
}
export interface ClaimEmbeddedWalletOptionsRequest {
    environmentId: string;
}
export interface CompletePasskeyRecoveryOperationRequest {
    environmentId: string;
    completePasskeyRecoveryRequest: CompletePasskeyRecoveryRequest;
}
export interface CreateEmailVerificationRequest {
    environmentId: string;
    emailVerificationCreateRequest: EmailVerificationCreateRequest;
}
export interface CreateEmailVerificationOptionsRequest {
    environmentId: string;
}
export interface CreateEmbeddedWalletsOperationRequest {
    environmentId: string;
    createEmbeddedWalletsRequest: CreateEmbeddedWalletsRequest;
}
export interface CreateEmbeddedWalletsOptionsRequest {
    environmentId: string;
}
export interface CreateNewRecoveryCodesRequest {
    environmentId: string;
}
export interface CreateSmsVerificationRequest {
    environmentId: string;
    smsVerificationCreateRequest: SmsVerificationCreateRequest;
}
export interface CreateSmsVerificationOptionsRequest {
    environmentId: string;
}
export interface CreateVisitRequest {
    environmentId: string;
    connectRequest: ConnectRequest;
}
export interface CreateWalletAccountOperationRequest {
    environmentId: string;
    createWalletAccountRequest: CreateWalletAccountRequest;
}
export interface DeleteMfaDeviceRequest {
    environmentId: string;
    mfaDeviceId: string;
    xMfaAuthToken: string;
}
export interface EmailAuthOptionsRequest {
    environmentId: string;
}
export interface EmailProviderOptionsRequest {
    environmentId: string;
}
export interface EmbeddedWalletExportRequest {
    environmentId: string;
    walletId: string;
    activityId: string;
}
export interface EmbeddedWalletExportOptionsRequest {
    environmentId: string;
    walletId: string;
    activityId: string;
}
export interface EventsOptionsRequest {
    environmentId: string;
}
export interface ExternalAuthSigninOperationRequest {
    environmentId: string;
    externalAuthSigninRequest: ExternalAuthSigninRequest;
}
export interface ExternalAuthSigninOptionsRequest {
    environmentId: string;
}
export interface ExternalAuthVerifyRequest {
    environmentId: string;
    externalAuthSigninRequest: ExternalAuthSigninRequest;
}
export interface ExternalAuthVerifyOptionsRequest {
    environmentId: string;
}
export interface FarcasterSignInOperationRequest {
    environmentId: string;
    farcasterSignInRequest?: FarcasterSignInRequest;
}
export interface FarcasterSignInOptionsRequest {
    environmentId: string;
}
export interface FarcasterVerifyRequest {
    environmentId: string;
    farcasterSignInRequest?: FarcasterSignInRequest;
}
export interface FarcasterVerifyOptionsRequest {
    environmentId: string;
}
export interface GetAccountBalancesRequest {
    environmentId: string;
    chainName: GetAccountBalancesChainNameEnum;
    accountAddress: string;
    networkId?: GetAccountBalancesNetworkIdEnum;
    includePrices?: boolean;
    includeNative?: boolean;
}
export interface GetAccountBalancesOptionsRequest {
    environmentId: string;
    chainName: GetAccountBalancesOptionsChainNameEnum;
    networkId: number;
    accountAddress: string;
}
export interface GetAuthTokenRequest {
    environmentId: string;
    type?: EmbeddedWalletAuthType;
}
export interface GetAuthTokenOptsRequest {
    environmentId: string;
}
export interface GetAuthenticatedUserRequest {
    environmentId: string;
}
export interface GetCreateWalletAccountRequestRequest {
    environmentId: string;
    chain: EmbeddedWalletChainEnum;
}
export interface GetEmailProviderRequest {
    environmentId: string;
    email: string;
}
export interface GetEmbeddedWalletBackupOptionRequest {
    environmentId: string;
}
export interface GetEmbeddedWalletBackupsRequest {
    environmentId: string;
}
export interface GetEmbeddedWalletPasscodeRequest {
    environmentId: string;
}
export interface GetEmbeddedWalletPasscodeOptionRequest {
    environmentId: string;
}
export interface GetEnvironmentSettingsRequest {
    environmentId: string;
    sdkVersion?: string;
}
export interface GetHealthcheckRequest {
    environmentId: string;
}
export interface GetHealthcheckOptionsRequest {
    environmentId: string;
}
export interface GetJwksByEnvironmentIdRequest {
    environmentId: string;
}
export interface GetMfaDeviceRequest {
    environmentId: string;
    mfaDeviceId: string;
}
export interface GetMfaDeviceOptionsRequest {
    environmentId: string;
    mfaDeviceId: string;
}
export interface GetNetworksConfigurationByEnvIdRequest {
    environmentId: string;
}
export interface GetNonceRequest {
    environmentId: string;
}
export interface GetRecoveryCodesRequest {
    environmentId: string;
}
export interface GetSupportedOnrampsRequest {
    environmentId: string;
    walletAddress: string;
    chain: string;
    networkId?: string;
    token?: string;
}
export interface GetTelegramAuthRequest {
    environmentId: string;
    state: string;
}
export interface GetUserMfaDevicesRequest {
    environmentId: string;
}
export interface GetUserPasskeysRequest {
    environmentId: string;
}
export interface InitAuthRequest {
    environmentId: string;
    providerType: ProviderEnum;
    oauthInitAuthRequest: OauthInitAuthRequest;
}
export interface InitAuthOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface InitEmailAuthOperationRequest {
    environmentId: string;
    initEmailAuthRequest: InitEmailAuthRequest;
}
export interface InitPasskeyRecoveryOperationRequest {
    environmentId: string;
    initPasskeyRecoveryRequest: InitPasskeyRecoveryRequest;
}
export interface JwksOptionsRequest {
    environmentId: string;
}
export interface ListMfaDevicesOptionsRequest {
    environmentId: string;
}
export interface LogDynamicSdkSettingsRequest {
    environmentId: string;
    sdkSettingsRequest: SdkSettingsRequest;
}
export interface MergeUsersRequest {
    environmentId: string;
}
export interface MergeUsersOptionsRequest {
    environmentId: string;
}
export interface NetworksOptionsRequest {
    environmentId: string;
}
export interface NonceOptionsRequest {
    environmentId: string;
}
export interface OauthAuthorizeHtmlRequest {
    environmentId: string;
    providerType: ProviderEnum;
    scope?: string;
    state?: string;
    redirectUri?: string;
}
export interface OauthAuthorizeHtmlOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthLoginRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthLoginOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthLoginUrlRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthLoginUrlOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthRedirectRequest {
    environmentId: string;
    providerType: ProviderEnum;
    code?: string;
    state?: string;
    idToken?: string;
    error?: string;
}
export interface OauthRedirectCodeRequest {
    environmentId: string;
    providerType: ProviderEnum;
    code?: string;
    scope?: string;
    state?: string;
    authuser?: string;
    prompt?: string;
    error?: string;
}
export interface OauthRedirectOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthResultOperationRequest {
    environmentId: string;
    providerType: ProviderEnum;
    oauthResultRequest: OauthResultRequest;
}
export interface OauthResultOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthSignInRequest {
    environmentId: string;
    providerType: ProviderEnum;
    oauthRequest: OauthRequest;
}
export interface OauthSignInOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OauthVerifyRequest {
    environmentId: string;
    providerType: ProviderEnum;
    oauthRequest: OauthRequest;
}
export interface OauthVerifyOptionsRequest {
    environmentId: string;
    providerType: ProviderEnum;
}
export interface OnrampsOptionsRequest {
    environmentId: string;
}
export interface OptimizeTransactionRequest {
    environmentId: string;
    solanaTransactionOptimizationRequest: SolanaTransactionOptimizationRequest;
}
export interface OptimizeTransactionOptionsRequest {
    environmentId: string;
}
export interface OptionsConnectRequest {
    environmentId: string;
}
export interface PasskeyRecoveryOptionsRequest {
    environmentId: string;
}
export interface PostTelegramAuthRequest {
    environmentId: string;
    telegramPostRequest: TelegramPostRequest;
}
export interface PrefetchOperationRequest {
    environmentId: string;
    prefetchRequest: PrefetchRequest;
}
export interface PublishEventRequest {
    environmentId: string;
    publishEvents: PublishEvents;
}
export interface RecoveryCodesOptionsRequest {
    environmentId: string;
}
export interface RecoveryEmailOptionsRequest {
    environmentId: string;
}
export interface RefreshAuthRequest {
    environmentId: string;
}
export interface RefreshOptionsRequest {
    environmentId: string;
}
export interface RegisterPasskeyMfaDeviceRequest {
    environmentId: string;
}
export interface RegisterPasskeyMfaDeviceOptionsRequest {
    environmentId: string;
}
export interface RegisterPasskeyMfaDeviceVerifyRequest {
    environmentId: string;
    mFARegisterPasskeyDevicePostRequest: MFARegisterPasskeyDevicePostRequest;
}
export interface RegisterSessionKeyOperationRequest {
    environmentId: string;
    registerSessionKeyRequest: RegisterSessionKeyRequest;
}
export interface RegisterTotpMfaDeviceRequest {
    environmentId: string;
}
export interface RegisterTotpMfaDeviceOptionsRequest {
    environmentId: string;
}
export interface RegisterTotpMfaDeviceVerifyRequest {
    environmentId: string;
    mFARegisterTotpDevicePostRequest: MFARegisterTotpDevicePostRequest;
}
export interface RetryEmailVerificationRequest {
    environmentId: string;
    emailVerificationRetryRequest: EmailVerificationRetryRequest;
}
export interface RetryEmailVerificationOptionsRequest {
    environmentId: string;
}
export interface RetrySmsVerificationRequest {
    environmentId: string;
    smsVerificationRetryRequest: SmsVerificationRetryRequest;
}
export interface RetrySmsVerificationOptionsRequest {
    environmentId: string;
}
export interface RevokeSessionRequest {
    environmentId: string;
}
export interface RevokeSessionOptionRequest {
    environmentId: string;
}
export interface ScanUrlRequest {
    environmentId: string;
    scanWebsiteUrlRequest: ScanWebsiteUrlRequest;
}
export interface SdkSettingsOptionsRequest {
    environmentId: string;
}
export interface SelectUserWalletRequest {
    environmentId: string;
    userWalletSelectionRequest: UserWalletSelectionRequest;
}
export interface SelectUserWalletOptionsRequest {
    environmentId: string;
}
export interface SessionCheckRequest {
    environmentId: string;
}
export interface SessionCheckOptionsRequest {
    environmentId: string;
}
export interface SessionKeyOptionsRequest {
    environmentId: string;
}
export interface SettingsOptionsRequest {
    environmentId: string;
}
export interface SignInWithEmailVerificationRequest {
    environmentId: string;
    emailVerificationVerifyRequest: EmailVerificationVerifyRequest;
}
export interface SignInWithEmailVerificationOptionsRequest {
    environmentId: string;
}
export interface SignInWithSmsVerificationRequest {
    environmentId: string;
    smsVerificationVerifyRequest: SmsVerificationVerifyRequest;
}
export interface SignInWithSmsVerificationOptionsRequest {
    environmentId: string;
}
export interface TelegramAuthOptionsRequest {
    environmentId: string;
}
export interface TelegramSignInRequest {
    environmentId: string;
    oauthResultRequest?: OauthResultRequest;
}
export interface TelegramSignInOptionsRequest {
    environmentId: string;
}
export interface TelegramVerifyRequest {
    environmentId: string;
    oauthResultRequest?: OauthResultRequest;
}
export interface TelegramVerifyOptionsRequest {
    environmentId: string;
}
export interface UpdateEmbeddedWalletRecoveryEmailRequest {
    environmentId: string;
    updateRecoveryEmailRequest: UpdateRecoveryEmailRequest;
}
export interface UpdatePasskeyRequest {
    environmentId: string;
    updateUserPasskeyRequest: UpdateUserPasskeyRequest;
}
export interface UpdateSelfRequest {
    environmentId: string;
    userFields: UserFields;
}
export interface UpdateUserMfaDeviceRequest {
    environmentId: string;
    mfaDeviceId: string;
    mFAUpdateDeviceRequest?: MFAUpdateDeviceRequest;
}
export interface UserPasskeysOptionsRequest {
    environmentId: string;
}
export interface UsersOptionsRequest {
    environmentId: string;
}
export interface VerifyOperationRequest {
    environmentId: string;
    verifyRequest: VerifyRequest;
}
export interface VerifyEmailVerificationRequest {
    environmentId: string;
    emailVerificationVerifyRequest: EmailVerificationVerifyRequest;
}
export interface VerifyEmailVerificationOptionsRequest {
    environmentId: string;
}
export interface VerifyLinkRequest {
    environmentId: string;
    verifyRequest: VerifyRequest;
}
export interface VerifyLinkOptionsRequest {
    environmentId: string;
}
export interface VerifyMergeUsersRequest {
    environmentId: string;
    mergeUserConflictResolutions: MergeUserConflictResolutions;
}
export interface VerifyMergeUsersOptionsRequest {
    environmentId: string;
}
export interface VerifyOptionsRequest {
    environmentId: string;
}
export interface VerifyPrefetchRequest {
    environmentId: string;
}
export interface VerifySmsVerificationRequest {
    environmentId: string;
    smsVerificationVerifyRequest: SmsVerificationVerifyRequest;
}
export interface VerifySmsVerificationOptionsRequest {
    environmentId: string;
}
export interface VerifyTransferRequest {
    environmentId: string;
    verifyRequest: VerifyRequest;
}
export interface VerifyTransferOptionsRequest {
    environmentId: string;
}
export interface VerifyUnlinkOperationRequest {
    environmentId: string;
    verifyUnlinkRequest: VerifyUnlinkRequest;
}
export interface VerifyUnlinkOptionsRequest {
    environmentId: string;
}
export interface WalletAccountOptionsRequest {
    environmentId: string;
}
export interface WalletAccountRequestOptionsRequest {
    environmentId: string;
}
/**
 *
 */
export declare class SDKApi extends runtime.BaseAPI {
    /**
     * Upgrade JWT scope with valid MFA session
     */
    authMfaPasskeyDeviceRaw(requestParameters: AuthMfaPasskeyDeviceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Upgrade JWT scope with valid MFA session
     */
    authMfaPasskeyDevice(requestParameters: AuthMfaPasskeyDeviceRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Auth Passkey MFA device
     */
    authMfaPasskeyDeviceChallengeRaw(requestParameters: AuthMfaPasskeyDeviceChallengeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MFAAuthPasskeyDeviceGetResponse>>;
    /**
     * Auth Passkey MFA device
     */
    authMfaPasskeyDeviceChallenge(requestParameters: AuthMfaPasskeyDeviceChallengeRequest, initOverrides?: RequestInit): Promise<MFAAuthPasskeyDeviceGetResponse>;
    /**
     * Options call for this endpoint
     */
    authMfaPasskeyDeviceOptionsRaw(requestParameters: AuthMfaPasskeyDeviceOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    authMfaPasskeyDeviceOptions(requestParameters: AuthMfaPasskeyDeviceOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Upgrade JWT scope with valid MFA session
     */
    authMfaRecoveryRaw(requestParameters: AuthMfaRecoveryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Upgrade JWT scope with valid MFA session
     */
    authMfaRecovery(requestParameters: AuthMfaRecoveryRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    authMfaRecoveryOptionsRaw(requestParameters: AuthMfaRecoveryOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    authMfaRecoveryOptions(requestParameters: AuthMfaRecoveryOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Upgrade JWT scope with valid MFA session
     */
    authMfaTotpDeviceRaw(requestParameters: AuthMfaTotpDeviceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Upgrade JWT scope with valid MFA session
     */
    authMfaTotpDevice(requestParameters: AuthMfaTotpDeviceRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    authMfaTotpDeviceOptionsRaw(requestParameters: AuthMfaTotpDeviceOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    authMfaTotpDeviceOptions(requestParameters: AuthMfaTotpDeviceOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Claim a pregenerated embedded wallet
     */
    claimEmbeddedWalletRaw(requestParameters: ClaimEmbeddedWalletRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Claim a pregenerated embedded wallet
     */
    claimEmbeddedWallet(requestParameters: ClaimEmbeddedWalletRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    claimEmbeddedWalletOptionsRaw(requestParameters: ClaimEmbeddedWalletOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    claimEmbeddedWalletOptions(requestParameters: ClaimEmbeddedWalletOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Completes the passkey recovery process for a user\'s passkey embedded wallet
     * Completes the passkey recovery process for a user\'s passkey embedded wallet
     */
    completePasskeyRecoveryRaw(requestParameters: CompletePasskeyRecoveryOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Completes the passkey recovery process for a user\'s passkey embedded wallet
     * Completes the passkey recovery process for a user\'s passkey embedded wallet
     */
    completePasskeyRecovery(requestParameters: CompletePasskeyRecoveryOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Initialize email verification process
     */
    createEmailVerificationRaw(requestParameters: CreateEmailVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmailVerificationCreateResponse>>;
    /**
     * Initialize email verification process
     */
    createEmailVerification(requestParameters: CreateEmailVerificationRequest, initOverrides?: RequestInit): Promise<EmailVerificationCreateResponse>;
    /**
     * Options call for this endpoint
     */
    createEmailVerificationOptionsRaw(requestParameters: CreateEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    createEmailVerificationOptions(requestParameters: CreateEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Create one or more embedded wallets for a user
     * Create one or more new embedded wallets for a user
     */
    createEmbeddedWalletsRaw(requestParameters: CreateEmbeddedWalletsOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Create one or more embedded wallets for a user
     * Create one or more new embedded wallets for a user
     */
    createEmbeddedWallets(requestParameters: CreateEmbeddedWalletsOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    createEmbeddedWalletsOptionsRaw(requestParameters: CreateEmbeddedWalletsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    createEmbeddedWalletsOptions(requestParameters: CreateEmbeddedWalletsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Generate new recovery codes for user
     */
    createNewRecoveryCodesRaw(requestParameters: CreateNewRecoveryCodesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MFARegenRecoveryCodesResponse>>;
    /**
     * Generate new recovery codes for user
     */
    createNewRecoveryCodes(requestParameters: CreateNewRecoveryCodesRequest, initOverrides?: RequestInit): Promise<MFARegenRecoveryCodesResponse>;
    /**
     * Initialize sms verification process
     */
    createSmsVerificationRaw(requestParameters: CreateSmsVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SmsVerificationCreateResponse>>;
    /**
     * Initialize sms verification process
     */
    createSmsVerification(requestParameters: CreateSmsVerificationRequest, initOverrides?: RequestInit): Promise<SmsVerificationCreateResponse>;
    /**
     * Options call for this endpoint
     */
    createSmsVerificationOptionsRaw(requestParameters: CreateSmsVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    createSmsVerificationOptions(requestParameters: CreateSmsVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint to send minimal wallet information for a connect-only or connect-first visitor.
     * Create a visit
     */
    createVisitRaw(requestParameters: CreateVisitRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Endpoint to send minimal wallet information for a connect-only or connect-first visitor.
     * Create a visit
     */
    createVisit(requestParameters: CreateVisitRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Add a wallet account to a user\'s existing Turnkey HD wallet
     * Add a wallet account to a user\'s existing Turnkey HD wallet
     */
    createWalletAccountRaw(requestParameters: CreateWalletAccountOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Add a wallet account to a user\'s existing Turnkey HD wallet
     * Add a wallet account to a user\'s existing Turnkey HD wallet
     */
    createWalletAccount(requestParameters: CreateWalletAccountOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Delete a device (if not default device)
     */
    deleteMfaDeviceRaw(requestParameters: DeleteMfaDeviceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a device (if not default device)
     */
    deleteMfaDevice(requestParameters: DeleteMfaDeviceRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    emailAuthOptionsRaw(requestParameters: EmailAuthOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    emailAuthOptions(requestParameters: EmailAuthOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    emailProviderOptionsRaw(requestParameters: EmailProviderOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    emailProviderOptions(requestParameters: EmailProviderOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Requests an export of an embedded wallet
     * Requests an export of an embedded wallet
     */
    embeddedWalletExportRaw(requestParameters: EmbeddedWalletExportRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ExportEmbeddedWalletResponse>>;
    /**
     * Requests an export of an embedded wallet
     * Requests an export of an embedded wallet
     */
    embeddedWalletExport(requestParameters: EmbeddedWalletExportRequest, initOverrides?: RequestInit): Promise<ExportEmbeddedWalletResponse>;
    /**
     * Options call for this endpoint
     */
    embeddedWalletExportOptionsRaw(requestParameters: EmbeddedWalletExportOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    embeddedWalletExportOptions(requestParameters: EmbeddedWalletExportOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     */
    eventsOptionsRaw(requestParameters: EventsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     */
    eventsOptions(requestParameters: EventsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint to sign-in using a token issued by an external auth provider
     */
    externalAuthSigninRaw(requestParameters: ExternalAuthSigninOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Endpoint to sign-in using a token issued by an external auth provider
     */
    externalAuthSignin(requestParameters: ExternalAuthSigninOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    externalAuthSigninOptionsRaw(requestParameters: ExternalAuthSigninOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    externalAuthSigninOptions(requestParameters: ExternalAuthSigninOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint to verify using a token issued by an external auth provider
     */
    externalAuthVerifyRaw(requestParameters: ExternalAuthVerifyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Endpoint to verify using a token issued by an external auth provider
     */
    externalAuthVerify(requestParameters: ExternalAuthVerifyRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    externalAuthVerifyOptionsRaw(requestParameters: ExternalAuthVerifyOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    externalAuthVerifyOptions(requestParameters: ExternalAuthVerifyOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Farcaster SignIn endpoint to exchange SIWF data
     * Farcaster provider SignIn endpoint
     */
    farcasterSignInRaw(requestParameters: FarcasterSignInOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Farcaster SignIn endpoint to exchange SIWF data
     * Farcaster provider SignIn endpoint
     */
    farcasterSignIn(requestParameters: FarcasterSignInOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    farcasterSignInOptionsRaw(requestParameters: FarcasterSignInOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    farcasterSignInOptions(requestParameters: FarcasterSignInOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Farcaster Verify endpoint to exchange SIWF data
     * Farcaster provider Verify endpoint
     */
    farcasterVerifyRaw(requestParameters: FarcasterVerifyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Farcaster Verify endpoint to exchange SIWF data
     * Farcaster provider Verify endpoint
     */
    farcasterVerify(requestParameters: FarcasterVerifyRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    farcasterVerifyOptionsRaw(requestParameters: FarcasterVerifyOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    farcasterVerifyOptions(requestParameters: FarcasterVerifyOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get the token balances for an account
     */
    getAccountBalancesRaw(requestParameters: GetAccountBalancesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TokenBalance>>>;
    /**
     * Get the token balances for an account
     */
    getAccountBalances(requestParameters: GetAccountBalancesRequest, initOverrides?: RequestInit): Promise<Array<TokenBalance>>;
    /**
     * Options call for this endpoint
     */
    getAccountBalancesOptionsRaw(requestParameters: GetAccountBalancesOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    getAccountBalancesOptions(requestParameters: GetAccountBalancesOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get auth token for given embedded wallet type
     */
    getAuthTokenRaw(requestParameters: GetAuthTokenRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmbeddedWalletAuthToken>>;
    /**
     * Get auth token for given embedded wallet type
     */
    getAuthToken(requestParameters: GetAuthTokenRequest, initOverrides?: RequestInit): Promise<EmbeddedWalletAuthToken>;
    /**
     * Options call for this endpoint
     */
    getAuthTokenOptsRaw(requestParameters: GetAuthTokenOptsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    getAuthTokenOpts(requestParameters: GetAuthTokenOptsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Fetch user profile for the current authenticated user
     */
    getAuthenticatedUserRaw(requestParameters: GetAuthenticatedUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SdkUser>>;
    /**
     * Fetch user profile for the current authenticated user
     */
    getAuthenticatedUser(requestParameters: GetAuthenticatedUserRequest, initOverrides?: RequestInit): Promise<SdkUser>;
    /**
     * Generates the turnkey request body for a user\'s create wallet account request
     * Generates the turnkey request body for a user\'s create wallet account request
     */
    getCreateWalletAccountRequestRaw(requestParameters: GetCreateWalletAccountRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TurnkeyCreateWalletAccountsRequestBody>>;
    /**
     * Generates the turnkey request body for a user\'s create wallet account request
     * Generates the turnkey request body for a user\'s create wallet account request
     */
    getCreateWalletAccountRequest(requestParameters: GetCreateWalletAccountRequestRequest, initOverrides?: RequestInit): Promise<TurnkeyCreateWalletAccountsRequestBody>;
    /**
     * Return the email provider to be used for signing in with a given email. If an external provider such as magicLink is disabled, this endpoint would return emailOnly. If an external provider such as magicLink is enabled, it will return emailOnly when the email already exists in Dynamic and it is associated with a wallet, otherwise it will return magicLink.
     * Get signin email provider
     */
    getEmailProviderRaw(requestParameters: GetEmailProviderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmailProviderResponse>>;
    /**
     * Return the email provider to be used for signing in with a given email. If an external provider such as magicLink is disabled, this endpoint would return emailOnly. If an external provider such as magicLink is enabled, it will return emailOnly when the email already exists in Dynamic and it is associated with a wallet, otherwise it will return magicLink.
     * Get signin email provider
     */
    getEmailProvider(requestParameters: GetEmailProviderRequest, initOverrides?: RequestInit): Promise<EmailProviderResponse>;
    /**
     * Options call for this endpoint
     */
    getEmbeddedWalletBackupOptionRaw(requestParameters: GetEmbeddedWalletBackupOptionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    getEmbeddedWalletBackupOption(requestParameters: GetEmbeddedWalletBackupOptionRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Return the backup key for the embedded wallet of the authenticated user
     */
    getEmbeddedWalletBackupsRaw(requestParameters: GetEmbeddedWalletBackupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmbeddedWalletSecret>>;
    /**
     * Return the backup key for the embedded wallet of the authenticated user
     */
    getEmbeddedWalletBackups(requestParameters: GetEmbeddedWalletBackupsRequest, initOverrides?: RequestInit): Promise<EmbeddedWalletSecret>;
    /**
     * Return the passcode for the pregenerated embedded wallet of the authenticated user
     */
    getEmbeddedWalletPasscodeRaw(requestParameters: GetEmbeddedWalletPasscodeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmbeddedWalletSecret>>;
    /**
     * Return the passcode for the pregenerated embedded wallet of the authenticated user
     */
    getEmbeddedWalletPasscode(requestParameters: GetEmbeddedWalletPasscodeRequest, initOverrides?: RequestInit): Promise<EmbeddedWalletSecret>;
    /**
     * Options call for this endpoint
     */
    getEmbeddedWalletPasscodeOptionRaw(requestParameters: GetEmbeddedWalletPasscodeOptionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    getEmbeddedWalletPasscodeOption(requestParameters: GetEmbeddedWalletPasscodeOptionRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get the environment\'s settings
     */
    getEnvironmentSettingsRaw(requestParameters: GetEnvironmentSettingsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectSettings>>;
    /**
     * Get the environment\'s settings
     */
    getEnvironmentSettings(requestParameters: GetEnvironmentSettingsRequest, initOverrides?: RequestInit): Promise<ProjectSettings>;
    /**
     * Health check endpoint to check for uptime of API.
     */
    getHealthcheckRaw(requestParameters: GetHealthcheckRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<HealthcheckResponse>>;
    /**
     * Health check endpoint to check for uptime of API.
     */
    getHealthcheck(requestParameters: GetHealthcheckRequest, initOverrides?: RequestInit): Promise<HealthcheckResponse>;
    /**
     * Options call for this endpoint
     */
    getHealthcheckOptionsRaw(requestParameters: GetHealthcheckOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    getHealthcheckOptions(requestParameters: GetHealthcheckOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Find jwks for public key
     */
    getJwksByEnvironmentIdRaw(requestParameters: GetJwksByEnvironmentIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<JwksResponse>>;
    /**
     * Find jwks for public key
     */
    getJwksByEnvironmentId(requestParameters: GetJwksByEnvironmentIdRequest, initOverrides?: RequestInit): Promise<JwksResponse>;
    /**
     * Get the current user\'s MFA by device id
     */
    getMfaDeviceRaw(requestParameters: GetMfaDeviceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MFADevice>>;
    /**
     * Get the current user\'s MFA by device id
     */
    getMfaDevice(requestParameters: GetMfaDeviceRequest, initOverrides?: RequestInit): Promise<MFADevice>;
    /**
     * Options call for this endpoint
     */
    getMfaDeviceOptionsRaw(requestParameters: GetMfaDeviceOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    getMfaDeviceOptions(requestParameters: GetMfaDeviceOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Find the configuration for the enabled networks associated to an environment
     */
    getNetworksConfigurationByEnvIdRaw(requestParameters: GetNetworksConfigurationByEnvIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<NetworkConfigurationResponse>>>;
    /**
     * Find the configuration for the enabled networks associated to an environment
     */
    getNetworksConfigurationByEnvId(requestParameters: GetNetworksConfigurationByEnvIdRequest, initOverrides?: RequestInit): Promise<Array<NetworkConfigurationResponse>>;
    /**
     * Create nonce for authentication flow
     */
    getNonceRaw(requestParameters: GetNonceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NonceResponse>>;
    /**
     * Create nonce for authentication flow
     */
    getNonce(requestParameters: GetNonceRequest, initOverrides?: RequestInit): Promise<NonceResponse>;
    /**
     * Get recovery codes
     */
    getRecoveryCodesRaw(requestParameters: GetRecoveryCodesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MFAGetRecoveryCodesResponse>>;
    /**
     * Get recovery codes
     */
    getRecoveryCodes(requestParameters: GetRecoveryCodesRequest, initOverrides?: RequestInit): Promise<MFAGetRecoveryCodesResponse>;
    /**
     * Find the configuration for the enabled onramps associated to an environment
     * Configuration for enabled onramps
     */
    getSupportedOnrampsRaw(requestParameters: GetSupportedOnrampsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SupportedOnrampsResponse>>;
    /**
     * Find the configuration for the enabled onramps associated to an environment
     * Configuration for enabled onramps
     */
    getSupportedOnramps(requestParameters: GetSupportedOnrampsRequest, initOverrides?: RequestInit): Promise<SupportedOnrampsResponse>;
    /**
     * Get HTML with rendered Telegram login widget
     */
    getTelegramAuthRaw(requestParameters: GetTelegramAuthRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Get HTML with rendered Telegram login widget
     */
    getTelegramAuth(requestParameters: GetTelegramAuthRequest, initOverrides?: RequestInit): Promise<string>;
    /**
     * Get the current user\'s MFA Devices
     */
    getUserMfaDevicesRaw(requestParameters: GetUserMfaDevicesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MFAListDevicesResponse>>;
    /**
     * Get the current user\'s MFA Devices
     */
    getUserMfaDevices(requestParameters: GetUserMfaDevicesRequest, initOverrides?: RequestInit): Promise<MFAListDevicesResponse>;
    /**
     * Gets passkey data associated with a user
     */
    getUserPasskeysRaw(requestParameters: GetUserPasskeysRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetUserPasskeysResponse>>;
    /**
     * Gets passkey data associated with a user
     */
    getUserPasskeys(requestParameters: GetUserPasskeysRequest, initOverrides?: RequestInit): Promise<GetUserPasskeysResponse>;
    /**
     * This endpoint initializes a secure oauth authentication sequence by providing the state and current url path to the API.
     * Initialize oauth auth sequence
     */
    initAuthRaw(requestParameters: InitAuthRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * This endpoint initializes a secure oauth authentication sequence by providing the state and current url path to the API.
     * Initialize oauth auth sequence
     */
    initAuth(requestParameters: InitAuthRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    initAuthOptionsRaw(requestParameters: InitAuthOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    initAuthOptions(requestParameters: InitAuthOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Initialize the email authentication process for a user\'s embedded wallet
     * Initialize the email authentication process for a user\'s embedded wallet
     */
    initEmailAuthRaw(requestParameters: InitEmailAuthOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InitEmailAuthResponse>>;
    /**
     * Initialize the email authentication process for a user\'s embedded wallet
     * Initialize the email authentication process for a user\'s embedded wallet
     */
    initEmailAuth(requestParameters: InitEmailAuthOperationRequest, initOverrides?: RequestInit): Promise<InitEmailAuthResponse>;
    /**
     * Initialize the passkey recovery process for a user\'s passkey embedded wallet
     * Initialize the passkey recovery process for a user\'s passkey embedded wallet
     */
    initPasskeyRecoveryRaw(requestParameters: InitPasskeyRecoveryOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InitPasskeyRecoveryResponse>>;
    /**
     * Initialize the passkey recovery process for a user\'s passkey embedded wallet
     * Initialize the passkey recovery process for a user\'s passkey embedded wallet
     */
    initPasskeyRecovery(requestParameters: InitPasskeyRecoveryOperationRequest, initOverrides?: RequestInit): Promise<InitPasskeyRecoveryResponse>;
    /**
     * Options call for this endpoint
     */
    jwksOptionsRaw(requestParameters: JwksOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    jwksOptions(requestParameters: JwksOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    listMfaDevicesOptionsRaw(requestParameters: ListMfaDevicesOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    listMfaDevicesOptions(requestParameters: ListMfaDevicesOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Update SDK settings for a specific environment
     */
    logDynamicSdkSettingsRaw(requestParameters: LogDynamicSdkSettingsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Update SDK settings for a specific environment
     */
    logDynamicSdkSettings(requestParameters: LogDynamicSdkSettingsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Used to merge two owned accounts connected by email address
     * After successful verification allow to merge two owned accounts
     */
    mergeUsersRaw(requestParameters: MergeUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Used to merge two owned accounts connected by email address
     * After successful verification allow to merge two owned accounts
     */
    mergeUsers(requestParameters: MergeUsersRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    mergeUsersOptionsRaw(requestParameters: MergeUsersOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    mergeUsersOptions(requestParameters: MergeUsersOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    networksOptionsRaw(requestParameters: NetworksOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    networksOptions(requestParameters: NetworksOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    nonceOptionsRaw(requestParameters: NonceOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    nonceOptions(requestParameters: NonceOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint where an oauth provider would return authorization HTML used for mobile-friendly login, such as Apple ID with Touch ID on enabled devices.
     * Oauth provider authorization endpoint
     */
    oauthAuthorizeHtmlRaw(requestParameters: OauthAuthorizeHtmlRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Endpoint where an oauth provider would return authorization HTML used for mobile-friendly login, such as Apple ID with Touch ID on enabled devices.
     * Oauth provider authorization endpoint
     */
    oauthAuthorizeHtml(requestParameters: OauthAuthorizeHtmlRequest, initOverrides?: RequestInit): Promise<string>;
    /**
     * Options call for this endpoint
     */
    oauthAuthorizeHtmlOptionsRaw(requestParameters: OauthAuthorizeHtmlOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthAuthorizeHtmlOptions(requestParameters: OauthAuthorizeHtmlOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get redirect URL for Oauth provider login
     */
    oauthLoginRaw(requestParameters: OauthLoginRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Get redirect URL for Oauth provider login
     */
    oauthLogin(requestParameters: OauthLoginRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    oauthLoginOptionsRaw(requestParameters: OauthLoginOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthLoginOptions(requestParameters: OauthLoginOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Get redirect URL for Oauth provider login. This will return a string that the SDK can manipulate before redirecting the browser to.
     */
    oauthLoginUrlRaw(requestParameters: OauthLoginUrlRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OauthProviderLoginUrl>>;
    /**
     * Get redirect URL for Oauth provider login. This will return a string that the SDK can manipulate before redirecting the browser to.
     */
    oauthLoginUrl(requestParameters: OauthLoginUrlRequest, initOverrides?: RequestInit): Promise<OauthProviderLoginUrl>;
    /**
     * Options call for this endpoint
     */
    oauthLoginUrlOptionsRaw(requestParameters: OauthLoginUrlOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthLoginUrlOptions(requestParameters: OauthLoginUrlOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint where an oauth provider would redirect after a successful user authorizing the oauth application.
     * Oauth provider redirect endpoint for apple ID
     */
    oauthRedirectRaw(requestParameters: OauthRedirectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Endpoint where an oauth provider would redirect after a successful user authorizing the oauth application.
     * Oauth provider redirect endpoint for apple ID
     */
    oauthRedirect(requestParameters: OauthRedirectRequest, initOverrides?: RequestInit): Promise<string>;
    /**
     * Endpoint where an oauth provider would redirect after a successful user authorizing the oauth application.
     * Oauth provider redirect endpoint
     */
    oauthRedirectCodeRaw(requestParameters: OauthRedirectCodeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>>;
    /**
     * Endpoint where an oauth provider would redirect after a successful user authorizing the oauth application.
     * Oauth provider redirect endpoint
     */
    oauthRedirectCode(requestParameters: OauthRedirectCodeRequest, initOverrides?: RequestInit): Promise<string>;
    /**
     * Options call for this endpoint
     */
    oauthRedirectOptionsRaw(requestParameters: OauthRedirectOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthRedirectOptions(requestParameters: OauthRedirectOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Returns the authorization code or error retuned by oauth provider
     */
    oauthResultRaw(requestParameters: OauthResultOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OauthResultResponse>>;
    /**
     * Returns the authorization code or error retuned by oauth provider
     */
    oauthResult(requestParameters: OauthResultOperationRequest, initOverrides?: RequestInit): Promise<OauthResultResponse>;
    /**
     * Options call for this endpoint
     */
    oauthResultOptionsRaw(requestParameters: OauthResultOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthResultOptions(requestParameters: OauthResultOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Standard OAuth SignIn callback to exchange temproary code for oauth access and return a valid Dynamic JWT and user
     * Oauth provider SignIn endpoint
     */
    oauthSignInRaw(requestParameters: OauthSignInRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Standard OAuth SignIn callback to exchange temproary code for oauth access and return a valid Dynamic JWT and user
     * Oauth provider SignIn endpoint
     */
    oauthSignIn(requestParameters: OauthSignInRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    oauthSignInOptionsRaw(requestParameters: OauthSignInOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthSignInOptions(requestParameters: OauthSignInOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Standard OAuth verify callback to exchange temproary code for oauth access
     * Oauth provider verify endpoint
     */
    oauthVerifyRaw(requestParameters: OauthVerifyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Standard OAuth verify callback to exchange temproary code for oauth access
     * Oauth provider verify endpoint
     */
    oauthVerify(requestParameters: OauthVerifyRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    oauthVerifyOptionsRaw(requestParameters: OauthVerifyOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    oauthVerifyOptions(requestParameters: OauthVerifyOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    onrampsOptionsRaw(requestParameters: OnrampsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    onrampsOptions(requestParameters: OnrampsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Add fees to a Solana transaction
     */
    optimizeTransactionRaw(requestParameters: OptimizeTransactionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SolanaTransactionOptimizationResponse>>;
    /**
     * Add fees to a Solana transaction
     */
    optimizeTransaction(requestParameters: OptimizeTransactionRequest, initOverrides?: RequestInit): Promise<SolanaTransactionOptimizationResponse>;
    /**
     * Options call for this endpoint
     */
    optimizeTransactionOptionsRaw(requestParameters: OptimizeTransactionOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    optimizeTransactionOptions(requestParameters: OptimizeTransactionOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    optionsConnectRaw(requestParameters: OptionsConnectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    optionsConnect(requestParameters: OptionsConnectRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    passkeyRecoveryOptionsRaw(requestParameters: PasskeyRecoveryOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    passkeyRecoveryOptions(requestParameters: PasskeyRecoveryOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Handle Telegram authentication
     */
    postTelegramAuthRaw(requestParameters: PostTelegramAuthRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Handle Telegram authentication
     */
    postTelegramAuth(requestParameters: PostTelegramAuthRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint to send minimal wallet information to the API to prefetch name service information for an address.
     * prefetch information for wallet address
     */
    prefetchRaw(requestParameters: PrefetchOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Endpoint to send minimal wallet information to the API to prefetch name service information for an address.
     * prefetch information for wallet address
     */
    prefetch(requestParameters: PrefetchOperationRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Publish events for SDK
     */
    publishEventRaw(requestParameters: PublishEventRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Publish events for SDK
     */
    publishEvent(requestParameters: PublishEventRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    recoveryCodesOptionsRaw(requestParameters: RecoveryCodesOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    recoveryCodesOptions(requestParameters: RecoveryCodesOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    recoveryEmailOptionsRaw(requestParameters: RecoveryEmailOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    recoveryEmailOptions(requestParameters: RecoveryEmailOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Endpoint to refresh the JWT auth token using the current valid JWT auth token in the authorization header
     */
    refreshAuthRaw(requestParameters: RefreshAuthRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Endpoint to refresh the JWT auth token using the current valid JWT auth token in the authorization header
     */
    refreshAuth(requestParameters: RefreshAuthRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    refreshOptionsRaw(requestParameters: RefreshOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    refreshOptions(requestParameters: RefreshOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Register a new Passkey MFA device
     */
    registerPasskeyMfaDeviceRaw(requestParameters: RegisterPasskeyMfaDeviceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MFARegisterPasskeyDeviceGetResponse>>;
    /**
     * Register a new Passkey MFA device
     */
    registerPasskeyMfaDevice(requestParameters: RegisterPasskeyMfaDeviceRequest, initOverrides?: RequestInit): Promise<MFARegisterPasskeyDeviceGetResponse>;
    /**
     * Options call for this endpoint
     */
    registerPasskeyMfaDeviceOptionsRaw(requestParameters: RegisterPasskeyMfaDeviceOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    registerPasskeyMfaDeviceOptions(requestParameters: RegisterPasskeyMfaDeviceOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Verify Passkey MFA device
     */
    registerPasskeyMfaDeviceVerifyRaw(requestParameters: RegisterPasskeyMfaDeviceVerifyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Verify Passkey MFA device
     */
    registerPasskeyMfaDeviceVerify(requestParameters: RegisterPasskeyMfaDeviceVerifyRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Registers a session key for an embedded wallet
     * Registers a session key for an embedded wallet
     */
    registerSessionKeyRaw(requestParameters: RegisterSessionKeyOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RegisterEmbeddedWalletSessionKeyResponse>>;
    /**
     * Registers a session key for an embedded wallet
     * Registers a session key for an embedded wallet
     */
    registerSessionKey(requestParameters: RegisterSessionKeyOperationRequest, initOverrides?: RequestInit): Promise<RegisterEmbeddedWalletSessionKeyResponse>;
    /**
     * Register a new TOTP MFA device and get Totp Secret
     */
    registerTotpMfaDeviceRaw(requestParameters: RegisterTotpMfaDeviceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MFARegisterTotpDeviceGetResponse>>;
    /**
     * Register a new TOTP MFA device and get Totp Secret
     */
    registerTotpMfaDevice(requestParameters: RegisterTotpMfaDeviceRequest, initOverrides?: RequestInit): Promise<MFARegisterTotpDeviceGetResponse>;
    /**
     * Options call for this endpoint
     */
    registerTotpMfaDeviceOptionsRaw(requestParameters: RegisterTotpMfaDeviceOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    registerTotpMfaDeviceOptions(requestParameters: RegisterTotpMfaDeviceOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Verify TOTP MFA device
     */
    registerTotpMfaDeviceVerifyRaw(requestParameters: RegisterTotpMfaDeviceVerifyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MFADevice>>;
    /**
     * Verify TOTP MFA device
     */
    registerTotpMfaDeviceVerify(requestParameters: RegisterTotpMfaDeviceVerifyRequest, initOverrides?: RequestInit): Promise<MFADevice>;
    /**
     * Send new code for email verification
     */
    retryEmailVerificationRaw(requestParameters: RetryEmailVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<EmailVerificationCreateResponse>>;
    /**
     * Send new code for email verification
     */
    retryEmailVerification(requestParameters: RetryEmailVerificationRequest, initOverrides?: RequestInit): Promise<EmailVerificationCreateResponse>;
    /**
     * Options call for this endpoint
     */
    retryEmailVerificationOptionsRaw(requestParameters: RetryEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    retryEmailVerificationOptions(requestParameters: RetryEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Send new code for sms verification
     */
    retrySmsVerificationRaw(requestParameters: RetrySmsVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SmsVerificationCreateResponse>>;
    /**
     * Send new code for sms verification
     */
    retrySmsVerification(requestParameters: RetrySmsVerificationRequest, initOverrides?: RequestInit): Promise<SmsVerificationCreateResponse>;
    /**
     * Options call for this endpoint
     */
    retrySmsVerificationOptionsRaw(requestParameters: RetrySmsVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    retrySmsVerificationOptions(requestParameters: RetrySmsVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Revoke a session
     */
    revokeSessionRaw(requestParameters: RevokeSessionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Revoke a session
     */
    revokeSession(requestParameters: RevokeSessionRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    revokeSessionOptionRaw(requestParameters: RevokeSessionOptionRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    revokeSessionOption(requestParameters: RevokeSessionOptionRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Scan a URL for potential malicious activity
     */
    scanUrlRaw(requestParameters: ScanUrlRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ScanWebsiteUrlResponse>>;
    /**
     * Scan a URL for potential malicious activity
     */
    scanUrl(requestParameters: ScanUrlRequest, initOverrides?: RequestInit): Promise<ScanWebsiteUrlResponse>;
    /**
     */
    sdkSettingsOptionsRaw(requestParameters: SdkSettingsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     */
    sdkSettingsOptions(requestParameters: SdkSettingsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * When a user selects a wallet to be the primary wallet in a multi-wallet enabled environment, this endpoint is called to record this on the backend.
     */
    selectUserWalletRaw(requestParameters: SelectUserWalletRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * When a user selects a wallet to be the primary wallet in a multi-wallet enabled environment, this endpoint is called to record this on the backend.
     */
    selectUserWallet(requestParameters: SelectUserWalletRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    selectUserWalletOptionsRaw(requestParameters: SelectUserWalletOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    selectUserWalletOptions(requestParameters: SelectUserWalletOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Check that session is valid
     */
    sessionCheckRaw(requestParameters: SessionCheckRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Check that session is valid
     */
    sessionCheck(requestParameters: SessionCheckRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    sessionCheckOptionsRaw(requestParameters: SessionCheckOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    sessionCheckOptions(requestParameters: SessionCheckOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    sessionKeyOptionsRaw(requestParameters: SessionKeyOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    sessionKeyOptions(requestParameters: SessionKeyOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    settingsOptionsRaw(requestParameters: SettingsOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    settingsOptions(requestParameters: SettingsOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Verify an email and sign in user
     */
    signInWithEmailVerificationRaw(requestParameters: SignInWithEmailVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Verify an email and sign in user
     */
    signInWithEmailVerification(requestParameters: SignInWithEmailVerificationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    signInWithEmailVerificationOptionsRaw(requestParameters: SignInWithEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    signInWithEmailVerificationOptions(requestParameters: SignInWithEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Verify an sms and sign in user
     */
    signInWithSmsVerificationRaw(requestParameters: SignInWithSmsVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Verify an sms and sign in user
     */
    signInWithSmsVerification(requestParameters: SignInWithSmsVerificationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    signInWithSmsVerificationOptionsRaw(requestParameters: SignInWithSmsVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    signInWithSmsVerificationOptions(requestParameters: SignInWithSmsVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    telegramAuthOptionsRaw(requestParameters: TelegramAuthOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    telegramAuthOptions(requestParameters: TelegramAuthOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Telegram provider SignIn endpoint
     */
    telegramSignInRaw(requestParameters: TelegramSignInRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Telegram provider SignIn endpoint
     */
    telegramSignIn(requestParameters: TelegramSignInRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    telegramSignInOptionsRaw(requestParameters: TelegramSignInOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    telegramSignInOptions(requestParameters: TelegramSignInOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Telegram provider Verify endpoint
     */
    telegramVerifyRaw(requestParameters: TelegramVerifyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Telegram provider Verify endpoint
     */
    telegramVerify(requestParameters: TelegramVerifyRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    telegramVerifyOptionsRaw(requestParameters: TelegramVerifyOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    telegramVerifyOptions(requestParameters: TelegramVerifyOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Update a user\'s Turnkey recovery email
     */
    updateEmbeddedWalletRecoveryEmailRaw(requestParameters: UpdateEmbeddedWalletRecoveryEmailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Update a user\'s Turnkey recovery email
     */
    updateEmbeddedWalletRecoveryEmail(requestParameters: UpdateEmbeddedWalletRecoveryEmailRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Update a passkey\'s info
     */
    updatePasskeyRaw(requestParameters: UpdatePasskeyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserPasskey>>;
    /**
     * Update a passkey\'s info
     */
    updatePasskey(requestParameters: UpdatePasskeyRequest, initOverrides?: RequestInit): Promise<UserPasskey>;
    /**
     * Update a user\'s fields
     */
    updateSelfRaw(requestParameters: UpdateSelfRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateSelfResponse>>;
    /**
     * Update a user\'s fields
     */
    updateSelf(requestParameters: UpdateSelfRequest, initOverrides?: RequestInit): Promise<UpdateSelfResponse>;
    /**
     * Update a device
     */
    updateUserMfaDeviceRaw(requestParameters: UpdateUserMfaDeviceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Update a device
     */
    updateUserMfaDevice(requestParameters: UpdateUserMfaDeviceRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    userPasskeysOptionsRaw(requestParameters: UserPasskeysOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    userPasskeysOptions(requestParameters: UserPasskeysOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    usersOptionsRaw(requestParameters: UsersOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    usersOptions(requestParameters: UsersOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Verify payload and return JWT
     */
    verifyRaw(requestParameters: VerifyOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Verify payload and return JWT
     */
    verify(requestParameters: VerifyOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Verify email verification request
     */
    verifyEmailVerificationRaw(requestParameters: VerifyEmailVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateSelfResponse>>;
    /**
     * Verify email verification request
     */
    verifyEmailVerification(requestParameters: VerifyEmailVerificationRequest, initOverrides?: RequestInit): Promise<UpdateSelfResponse>;
    /**
     * Options call for this endpoint
     */
    verifyEmailVerificationOptionsRaw(requestParameters: VerifyEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyEmailVerificationOptions(requestParameters: VerifyEmailVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Link a wallet to a valid environment user, and return an updated JWT
     * Link wallet to user
     */
    verifyLinkRaw(requestParameters: VerifyLinkRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Link a wallet to a valid environment user, and return an updated JWT
     * Link wallet to user
     */
    verifyLink(requestParameters: VerifyLinkRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    verifyLinkOptionsRaw(requestParameters: VerifyLinkOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyLinkOptions(requestParameters: VerifyLinkOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Used to merge two users with user-chosen resolutions to conflicting data between the two users to be merged
     * Merge users with conflict resolutions
     */
    verifyMergeUsersRaw(requestParameters: VerifyMergeUsersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Used to merge two users with user-chosen resolutions to conflicting data between the two users to be merged
     * Merge users with conflict resolutions
     */
    verifyMergeUsers(requestParameters: VerifyMergeUsersRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    verifyMergeUsersOptionsRaw(requestParameters: VerifyMergeUsersOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyMergeUsersOptions(requestParameters: VerifyMergeUsersOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    verifyOptionsRaw(requestParameters: VerifyOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyOptions(requestParameters: VerifyOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    verifyPrefetchRaw(requestParameters: VerifyPrefetchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyPrefetch(requestParameters: VerifyPrefetchRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Verify sms verification request
     */
    verifySmsVerificationRaw(requestParameters: VerifySmsVerificationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UpdateSelfResponse>>;
    /**
     * Verify sms verification request
     */
    verifySmsVerification(requestParameters: VerifySmsVerificationRequest, initOverrides?: RequestInit): Promise<UpdateSelfResponse>;
    /**
     * Options call for this endpoint
     */
    verifySmsVerificationOptionsRaw(requestParameters: VerifySmsVerificationOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifySmsVerificationOptions(requestParameters: VerifySmsVerificationOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Used to link a wallet after user has confirmed transfer to the new account
     * Verify wallet transfer
     */
    verifyTransferRaw(requestParameters: VerifyTransferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Used to link a wallet after user has confirmed transfer to the new account
     * Verify wallet transfer
     */
    verifyTransfer(requestParameters: VerifyTransferRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    verifyTransferOptionsRaw(requestParameters: VerifyTransferOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyTransferOptions(requestParameters: VerifyTransferOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Remove a link from to a valid environment user, and return an updated JWT
     * unlink wallet from user
     */
    verifyUnlinkRaw(requestParameters: VerifyUnlinkOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VerifyResponse>>;
    /**
     * Remove a link from to a valid environment user, and return an updated JWT
     * unlink wallet from user
     */
    verifyUnlink(requestParameters: VerifyUnlinkOperationRequest, initOverrides?: RequestInit): Promise<VerifyResponse>;
    /**
     * Options call for this endpoint
     */
    verifyUnlinkOptionsRaw(requestParameters: VerifyUnlinkOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    verifyUnlinkOptions(requestParameters: VerifyUnlinkOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    walletAccountOptionsRaw(requestParameters: WalletAccountOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    walletAccountOptions(requestParameters: WalletAccountOptionsRequest, initOverrides?: RequestInit): Promise<void>;
    /**
     * Options call for this endpoint
     */
    walletAccountRequestOptionsRaw(requestParameters: WalletAccountRequestOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;
    /**
     * Options call for this endpoint
     */
    walletAccountRequestOptions(requestParameters: WalletAccountRequestOptionsRequest, initOverrides?: RequestInit): Promise<void>;
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetAccountBalancesChainNameEnum {
    Evm = "EVM",
    Sol = "SOL"
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetAccountBalancesNetworkIdEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_10 = 10,
    NUMBER_137 = 137,
    NUMBER_42161 = 42161,
    NUMBER_8453 = 8453
}
/**
    * @export
    * @enum {string}
    */
export declare enum GetAccountBalancesOptionsChainNameEnum {
    Evm = "EVM",
    Sol = "SOL"
}
