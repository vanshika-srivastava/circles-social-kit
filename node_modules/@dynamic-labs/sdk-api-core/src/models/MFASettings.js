import { exists } from '../runtime.js';
import { MFADeviceTypeFromJSON, MFADeviceTypeToJSON } from './MFADeviceType.js';

/* tslint:disable */
function MFASettingsFromJSON(json) {
    return MFASettingsFromJSONTyped(json);
}
function MFASettingsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'required': !exists(json, 'required') ? undefined : json['required'],
        'availableMethods': !exists(json, 'availableMethods') ? undefined : (json['availableMethods'].map(MFADeviceTypeFromJSON)),
    };
}
function MFASettingsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'enabled': value.enabled,
        'required': value.required,
        'availableMethods': value.availableMethods === undefined ? undefined : (value.availableMethods.map(MFADeviceTypeToJSON)),
    };
}

export { MFASettingsFromJSON, MFASettingsFromJSONTyped, MFASettingsToJSON };
