/**
 * Dashboard API
 * Dashboard API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ChainConfiguration } from './ChainConfiguration';
import { Duration } from './Duration';
import { EmbeddedWalletVersionEnum } from './EmbeddedWalletVersionEnum';
import { SupportedSecurityMethods } from './SupportedSecurityMethods';
/**
 *
 * @export
 * @interface ProjectSettingsSdkEmbeddedWallets
 */
export interface ProjectSettingsSdkEmbeddedWallets {
    /**
     * When true embedded wallets will be generated during onboarding for the users. When false customer needs to trigger the creation.
     * @type {boolean}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    automaticEmbeddedWalletCreation?: boolean;
    /**
     * When true users will see embedded wallets action confirmation views.
     * @type {boolean}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    showEmbeddedWalletActionsUI?: boolean;
    /**
     * When true users will be able to start recovery for their accounts.
     * @type {boolean}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    emailRecoveryEnabled?: boolean;
    /**
     * When true user will be prompted to add a security method during onboarding. When false user will need to add a security method before a transaction
     * @type {boolean}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    forceAuthenticatorAtSignup?: boolean;
    /**
     * When combined with forceAuthenticatorAtSignup it allows user to skip adding a security method during onboarding. User will need to add it before a transaction.
     * @type {boolean}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    allowSkippingAuthenticatorAtSignup?: boolean;
    /**
     *
     * @type {Duration}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    sessionKeyDuration?: Duration;
    /**
     *
     * @type {SupportedSecurityMethods}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    supportedSecurityMethods?: SupportedSecurityMethods;
    /**
     * Chain specific configuration for dynamic embedded wallets
     * @type {Array<ChainConfiguration>}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    chainConfigurations?: Array<ChainConfiguration>;
    /**
     * When a client domain needs to be whitelisted explicitly by one of our embedded wallet providers, this will be true when Dynamic has confirmed that this is the case.
     * @type {boolean}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    domainEnabledByProvider?: boolean;
    /**
     *
     * @type {EmbeddedWalletVersionEnum}
     * @memberof ProjectSettingsSdkEmbeddedWallets
     */
    defaultWalletVersion?: EmbeddedWalletVersionEnum;
}
export declare function ProjectSettingsSdkEmbeddedWalletsFromJSON(json: any): ProjectSettingsSdkEmbeddedWallets;
export declare function ProjectSettingsSdkEmbeddedWalletsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectSettingsSdkEmbeddedWallets;
export declare function ProjectSettingsSdkEmbeddedWalletsToJSON(value?: ProjectSettingsSdkEmbeddedWallets | null): any;
