'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@dynamic-labs/utils');
var errors = require('../../utils/constants/errors.cjs');

const TurnkeyErrorMap = {
    0: 'Operation was canceled.',
    16: 'Invalid Passkey signature. Select the passkey for this account and device.',
    3: 'You reached the limit of passkeys for this account.',
    5: 'Invalid Passkey signature. Select the passkey for this account and device.',
    7: 'The code is invalid or expired.',
};
const reactNativePasskeyErrors = {
    RequestFailed: 'Request failed. Please try again.',
    UserCancelled: TurnkeyErrorMap[0],
};
const DOMExceptionErrorMap = {
    NotAllowedError: 'Request Cancelled. Select a device or password manager to set up a passkey.',
};
const getProperErrorMessage = (originalError) => {
    var _a;
    if (typeof originalError === 'string') {
        return originalError;
    }
    if ('reason' in originalError) {
        return originalError.reason;
    }
    if (originalError instanceof DOMException) {
        return DOMExceptionErrorMap[originalError.name] || 'Something went wrong';
    }
    if ('cause' in originalError) {
        if (((_a = originalError === null || originalError === void 0 ? void 0 : originalError.cause) === null || _a === void 0 ? void 0 : _a.code) !== undefined) {
            if (originalError.cause.code === errors.ACCESS_BLOCKED_ERROR_CODE) {
                throw new utils.AccessBlockedError();
            }
            return TurnkeyErrorMap[originalError.cause.code];
        }
        if (originalError.cause &&
            'error' in originalError.cause &&
            typeof originalError.cause.error === 'string' &&
            reactNativePasskeyErrors[originalError.cause.error]) {
            return reactNativePasskeyErrors[originalError.cause.error];
        }
    }
    if ('code' in originalError && originalError.code) {
        if (originalError.code === errors.ACCESS_BLOCKED_ERROR_CODE) {
            throw new utils.AccessBlockedError();
        }
        return TurnkeyErrorMap[originalError.code];
    }
    if ('error' in originalError &&
        typeof originalError.error === 'string' &&
        reactNativePasskeyErrors[originalError.error]) {
        return reactNativePasskeyErrors[originalError.error];
    }
    return 'Something went wrong';
};

exports.getProperErrorMessage = getProperErrorMessage;
