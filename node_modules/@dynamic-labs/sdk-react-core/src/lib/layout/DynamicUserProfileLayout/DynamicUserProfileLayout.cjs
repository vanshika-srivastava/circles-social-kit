'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
require('react');
require('react-dom');
require('@dynamic-labs/sdk-api-core');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../context/ViewContext/ViewContext.cjs');
var profileOutline = require('../../shared/assets/profile-outline.cjs');
var walletOutlineV2 = require('../../shared/assets/wallet-outline-v2.cjs');
var settingsOutline = require('../../shared/assets/settings-outline.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var classNames = require('../../utils/functions/classNames/classNames.cjs');
require('../../events/dynamicEvents.cjs');
require('../../../../_virtual/_tslib.cjs');
require('../../context/DynamicContext/DynamicContext.cjs');
var useInternalDynamicContext = require('../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('../../context/WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
var useKYCFlag = require('../../utils/hooks/useKYCFlag/useKYCFlag.cjs');
require('@dynamic-labs/types');
require('../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../context/MockContext/MockContext.cjs');
require('../../views/CollectUserDataView/useFields.cjs');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../context/FooterAnimationContext/index.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var DynamicWidgetContext = require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../store/state/sendBalances.cjs');
var DynamicWidgetHeader = require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
var DynamicWidgetPrompts = require('../../widgets/DynamicWidget/components/DynamicWidgetPrompts/DynamicWidgetPrompts.cjs');
var DynamicWidgetViews = require('../../widgets/DynamicWidget/components/DynamicWidgetViews/DynamicWidgetViews.cjs');
var DynamicWidgetContext_types = require('../../widgets/DynamicWidget/context/DynamicWidgetContext.types.cjs');
var BottomNavBar = require('../../widgets/DynamicWidget/components/BottomNavBar/BottomNavBar.cjs');
require('../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../polyfills.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../context/FundingContext/FundingContext.cjs');
require('../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../context/ConnectWithOtpContext/constants.cjs');
require('../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../store/state/tokenBalances.cjs');
var OverlayCardTarget = require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');

const shouldNotRenderHeaderViews = [
    ...DynamicWidgetContext_types.DynamicPasskeyWidgetViews,
    ...DynamicWidgetContext_types.DynamicTransactionsWidgetViews,
    ...DynamicWidgetContext_types.DynamicMfaWidgetViews,
    ...DynamicWidgetContext_types.DynamicSettingsViews,
    ...DynamicWidgetContext_types.DynamicGlobalWalletViews,
];
const DynamicUserProfileLayout = ({ variant, className, style, }) => {
    const { multiWallet } = useInternalDynamicContext.useInternalDynamicContext();
    const isKYCEnabled = useKYCFlag.useKYCFlag();
    const { dynamicWidgetView, setDynamicWidgetView, overridenWidgetView } = DynamicWidgetContext.useWidgetContext();
    const getNavBarOptions = () => {
        const options = [];
        if (multiWallet) {
            options.push({
                icon: jsxRuntime.jsx(walletOutlineV2.ReactComponent, {}),
                label: 'Wallets',
                value: 'wallets',
            });
        }
        if (isKYCEnabled) {
            options.push({
                icon: jsxRuntime.jsx(profileOutline.ReactComponent, {}),
                label: 'Profile',
                value: 'profile',
            });
        }
        options.push({
            icon: jsxRuntime.jsx(settingsOutline.ReactComponent, {}),
            label: 'Settings',
            value: 'settings',
        });
        return options;
    };
    // It should render header only if the view is not send-balance or one of passkey widgets view
    const shouldRenderHeader = !shouldNotRenderHeaderViews.includes(dynamicWidgetView);
    const shouldRenderOptionsSwitcher = multiWallet || isKYCEnabled;
    return (jsxRuntime.jsx(OverlayCardTarget.OverlayCardTarget, { children: jsxRuntime.jsxs("div", { className: classNames.classNames(className, 'dynamic-user-profile-layout'), style: style, children: [shouldRenderHeader && jsxRuntime.jsx(DynamicWidgetHeader.MemoizedDynamicWidgetHeader, { variant: variant }), jsxRuntime.jsx(DynamicWidgetViews.DynamicWidgetViews, {}), jsxRuntime.jsx(DynamicWidgetPrompts.DynamicWidgetPrompts, {}), shouldRenderOptionsSwitcher && (jsxRuntime.jsx(BottomNavBar.BottomNavBar, { value: overridenWidgetView, onChange: (view) => setDynamicWidgetView(view), options: getNavBarOptions() }))] }) }));
};

exports.DynamicUserProfileLayout = DynamicUserProfileLayout;
