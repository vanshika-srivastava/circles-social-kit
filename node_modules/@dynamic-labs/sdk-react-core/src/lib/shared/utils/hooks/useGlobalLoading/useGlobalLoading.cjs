'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var loadingAndLifecycle = require('../../../../store/state/loadingAndLifecycle.cjs');
var logger = require('../../../logger.cjs');
var index = require('../../functions/lastAuthenticatedAccount/index.cjs');

const useGlobalLoading = ({ authMode, connectedInfo, connectedWallets, projectSettings, primaryWallet, user, walletBook, enableInstrumentation, appName, environmentId, }) => {
    var _a, _b;
    // Once we declare the SDK as loaded, we do not ever want to flip back to false
    const hasLoaded = React.useRef(false);
    const loadingStart = React.useRef(new Date().getTime());
    const { sessionValidation } = loadingAndLifecycle.useLoadingAndLifecycle();
    const finishLoading = () => {
        if (hasLoaded.current)
            return;
        hasLoaded.current = true;
        logger.logger.logVerboseTroubleshootingMessage('SDK finished loading', {
            appName,
            authMode,
            connectedInfo,
            connectedWallets,
            enableInstrumentation,
            environmentId,
            primaryWallet,
            projectSettings,
            sessionValidation,
            user,
            walletBook,
        });
        // Calculate how long loading took and emit log
        if (enableInstrumentation) {
            const loadingTime = new Date().getTime() - loadingStart.current;
            // Pass as default arg and as an object. The object value will be injected
            // in the log later on, keeping its format as a number for calculation purposes
            logger.logger.instrument(`SDK loaded in (ms) ${loadingTime}`, {
                appName,
                environmentId,
                key: 'sdkHasLoaded',
                primaryWalletId: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.id,
                time: loadingTime,
                userId: user === null || user === void 0 ? void 0 : user.userId,
            });
        }
    };
    if (hasLoaded.current)
        return true;
    const hasWalletBookLoaded = Boolean(Object.keys((_a = walletBook === null || walletBook === void 0 ? void 0 : walletBook.wallets) !== null && _a !== void 0 ? _a : {}).length);
    const isPrimaryWalletLoading = user &&
        ((_b = index.lastAuthenticatedAccount(user)) === null || _b === void 0 ? void 0 : _b.format) === 'blockchain' &&
        !primaryWallet;
    const isConnectOnlyWalletsLoading = authMode === 'connect-only' &&
        connectedInfo &&
        connectedWallets.length === 0;
    if (hasWalletBookLoaded &&
        Boolean(projectSettings) &&
        !isPrimaryWalletLoading &&
        !isConnectOnlyWalletsLoading &&
        sessionValidation)
        finishLoading();
    return hasLoaded.current;
};

exports.useGlobalLoading = useGlobalLoading;
