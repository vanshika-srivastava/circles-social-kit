'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var iconic = require('@dynamic-labs/iconic');
var walletBook = require('@dynamic-labs/wallet-book');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var AccessDeniedContext = require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('react');
require('../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../shared/logger.cjs');
require('../../context/ViewContext/ViewContext.cjs');
var embeddedWalletIcon = require('../../shared/assets/embedded-wallet-icon.cjs');
require('@dynamic-labs/utils');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
require('../../events/dynamicEvents.cjs');
require('../../../../_virtual/_tslib.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var getReferencedAccount = require('../../utils/functions/getReferencedAccount/getReferencedAccount.cjs');
var pixelToRem = require('../../utils/functions/pixelToRem/pixelToRem.cjs');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
var WalletContext = require('../../context/WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
var useFindSocialIcon = require('../../utils/hooks/useFindSocialIcon/useFindSocialIcon.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../context/MockContext/MockContext.cjs');
require('../../views/CollectUserDataView/useFields.cjs');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../Accordion/components/AccordionItem/AccordionItem.cjs');
require('../Alert/Alert.cjs');
require('../ShadowDOM/ShadowDOM.cjs');
require('../IconButton/IconButton.cjs');
require('../InlineWidget/InlineWidget.cjs');
require('../Input/Input.cjs');
require('../IsBrowser/IsBrowser.cjs');
require('../MenuList/Dropdown/Dropdown.cjs');
require('../Transition/ZoomTransition/ZoomTransition.cjs');
require('../Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../Transition/OpacityTransition/OpacityTransition.cjs');
require('../OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../Popper/Popper/Popper.cjs');
require('../Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
var WalletIconWithNetwork = require('../../widgets/DynamicWidget/components/WalletIconWithNetwork/WalletIconWithNetwork.cjs');
require('formik');
require('../../context/FooterAnimationContext/index.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../store/state/sendBalances.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../polyfills.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../context/FundingContext/FundingContext.cjs');
require('../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../context/ConnectWithOtpContext/constants.cjs');
require('../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const getWalletIcon = ({ findSocialIcon, wallet, user, }) => {
    if (walletConnectorCore.isEmailOTPWalletConnector(wallet.connector)) {
        return iconic.SignInWithEmailIcon;
    }
    if (walletConnectorCore.isSocialWalletConnector(wallet.connector)) {
        const socialAccountDataForWallet = getReferencedAccount.getReferencedAccount(user, wallet.id);
        if (!socialAccountDataForWallet ||
            !socialAccountDataForWallet.oauthProvider) {
            return iconic.SignInWithEmailIcon;
        }
        const { oauthProvider } = socialAccountDataForWallet;
        try {
            const MagicSocialWalletIcon = findSocialIcon(oauthProvider);
            return MagicSocialWalletIcon;
        }
        catch (err) {
            logger.logger.error(err);
        }
    }
    if (walletConnectorCore.isEmbeddedConnector(wallet.connector) ||
        walletConnectorCore.isAccountAbstractionConnector(wallet.connector)) {
        return embeddedWalletIcon.ReactComponent;
    }
    return null;
};
const AuthProviderIcon = ({ iconSize = 64, showNetworkIcon = false, wallet, }) => {
    const { primaryWallet, selectedWalletConnector, user, userWithMissingInfo } = useInternalDynamicContext.useInternalDynamicContext();
    const { deniedOauthProvider, deniedAddress } = AccessDeniedContext.useAccessDeniedContext();
    const { isLoadingEmbeddedWallet } = WalletContext.useWalletContext();
    const findSocialIcon = useFindSocialIcon.useFindSocialIcon();
    if (deniedOauthProvider) {
        const MagicSocialWalletIcon = findSocialIcon(deniedOauthProvider);
        if (!MagicSocialWalletIcon) {
            return null;
        }
        return (jsxRuntime.jsx(MagicSocialWalletIcon, { style: {
                height: pixelToRem.pixelToRem(iconSize),
                width: pixelToRem.pixelToRem(iconSize),
            } }));
    }
    // it means that user tried to login with actual wallet and no magic social and failed to go through the access list
    if (deniedAddress) {
        return (jsxRuntime.jsx(walletBook.WalletIcon, { walletKey: selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.key, style: { height: pixelToRem.pixelToRem(iconSize), width: pixelToRem.pixelToRem(iconSize) } }));
    }
    const walletForIcon = wallet ? wallet : primaryWallet;
    if (!walletForIcon) {
        if (isLoadingEmbeddedWallet) {
            return (jsxRuntime.jsx(WalletIconWithNetwork.WalletIconWithNetwork, { iconSize: iconSize, Icon: embeddedWalletIcon.ReactComponent, chainName: 'EVM', showNetwork: false }));
        }
        return null;
    }
    const Icon = getWalletIcon({
        findSocialIcon,
        user: user !== null && user !== void 0 ? user : userWithMissingInfo,
        wallet: walletForIcon,
    });
    return (jsxRuntime.jsx(WalletIconWithNetwork.WalletIconWithNetwork, { iconSize: iconSize, Icon: Icon !== null && Icon !== void 0 ? Icon : null, chainName: walletForIcon.chain, showNetwork: showNetworkIcon, walletKey: walletForIcon.key }));
};

exports.AuthProviderIcon = AuthProviderIcon;
