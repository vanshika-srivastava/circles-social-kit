'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var walletBook = require('@dynamic-labs/wallet-book');
require('@dynamic-labs/sdk-api-core');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../context/ViewContext/ViewContext.cjs');
require('react');
var tooltip = require('../../shared/assets/tooltip.cjs');
var shortenWalletAddress = require('../../shared/utils/functions/shortenWalletAddress/shortenWalletAddress.cjs');
require('@dynamic-labs/utils');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var sendBalances = require('../../store/state/sendBalances.cjs');
var networksAndChains = require('../../utils/functions/networksAndChains/networksAndChains.cjs');
var Icon = require('../Icon/Icon.cjs');
var Tooltip = require('../Tooltip/Tooltip.cjs');
var utils = require('../TransactionConfirmationPageLayout/utils.cjs');
var Typography = require('../Typography/Typography.cjs');

const TransactionCard = ({ transaction, currentToken, currencySymbol, valueRounded, showFiat, transactionValue, isGasSponsored, gasFiatValue, totalGasFiatValue, currency, total, t, walletKey, }) => {
    const { amount, chainName } = sendBalances.useSendBalanceState();
    const currentChainName = chainName || 'eth';
    return (jsxRuntime.jsxs("div", { className: 'transaction-card', children: [jsxRuntime.jsxs("div", { className: 'transaction-card__header', children: [jsxRuntime.jsxs("div", { className: 'transaction-card__icon', children: [jsxRuntime.jsxs("div", { className: 'transaction-card__icon__container', children: [jsxRuntime.jsx("img", { src: (currentToken === null || currentToken === void 0 ? void 0 : currentToken.logoURI) || networksAndChains.getIconUrl(currentChainName), alt: currencySymbol, width: 25, height: 25 }), jsxRuntime.jsx("img", { className: 'transaction-card__icon__container__network', src: networksAndChains.getIconUrl(currentChainName), alt: currencySymbol, width: 25, height: 25 })] }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', children: currencySymbol })] }), jsxRuntime.jsxs("div", { children: [jsxRuntime.jsxs("div", { className: 'transaction-card__info', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'secondary', children: currencySymbol }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', children: valueRounded ||
                                            ((transaction === null || transaction === void 0 ? void 0 : transaction.value)
                                                ? transaction.format(transaction.value, { precision: 6 })
                                                : '') })] }), showFiat && transactionValue && (jsxRuntime.jsxs("div", { className: 'transaction-card__info', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', color: 'secondary', children: "$" }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', color: 'primary', children: utils.getDisplayFiatPrice(amount, currentToken) })] }))] })] }), jsxRuntime.jsx("div", { className: 'transaction-card__arrow', children: jsxRuntime.jsx("span", { children: "\u2193" }) }), jsxRuntime.jsxs("div", { className: 'transaction-card__destination', children: [jsxRuntime.jsxs("div", { className: 'transaction-card__icon__container', children: [jsxRuntime.jsx(Icon.Icon, { size: 'medium', children: jsxRuntime.jsx(walletBook.WalletIcon, { walletKey: walletKey, width: 25, height: 25 }) }), jsxRuntime.jsx("img", { className: 'transaction-card__icon__container__network', src: networksAndChains.getIconUrl(currentChainName), alt: currencySymbol, width: 30, height: 30 })] }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', className: 'transaction-card__wallet-address', children: shortenWalletAddress.shortenWalletAddress(transaction.to, 4, 4) })] }), !isGasSponsored && (jsxRuntime.jsxs("div", { className: 'transaction-card__total', children: [jsxRuntime.jsxs("div", { className: 'row', "data-testid": 'transaction-estimated-gas-fee', children: [jsxRuntime.jsx("div", { children: jsxRuntime.jsxs(Typography.Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', className: 'flex-row gap-native', children: [t('dyn_send_transaction.confirmation.data.gas_estimate'), jsxRuntime.jsx(Tooltip.Tooltip, { content: t('dyn_send_transaction.confirmation.data.gas_tooltip'), copykey: t('dyn_send_transaction.confirmation.data.gas_tooltip'), className: 'transaction-confirmation', children: jsxRuntime.jsx(Icon.Icon, { size: 'small', className: 'fee-tooltip', children: jsxRuntime.jsx(tooltip.ReactComponent, {}) }) })] }) }), showFiat && (currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) ? (jsxRuntime.jsxs("div", { className: 'flex-row', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', children: "~ $" }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'regular', color: 'primary', children: Number(gasFiatValue) <= 0.01 ? '<0.01' : gasFiatValue })] })) : (jsxRuntime.jsxs("div", { className: 'flex-row gap-native', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'regular', color: 'primary', children: transaction.fee.gas
                                            ? transaction.format(transaction.fee.gas, { precision: 6 })
                                            : '--' }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', children: currency })] }))] }), (currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) && (jsxRuntime.jsxs("div", { className: 'row', "data-testid": 'transaction-total', children: [jsxRuntime.jsx("div", { children: jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'bold', color: 'primary', children: t('dyn_send_transaction.confirmation.data.total') }) }), !showFiat ? (jsxRuntime.jsxs("div", { className: 'flex-row gap-native', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'bold', color: 'primary', children: total
                                            ? transaction.format(total, { precision: 6 })
                                            : t('dyn_send_transaction.confirmation.not_applied') }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'bold', color: 'primary', children: currency })] })) : (jsxRuntime.jsxs("div", { className: 'flex-row', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', children: "~ $" }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', children: Number(totalGasFiatValue) <= 0.01
                                            ? '<0.01'
                                            : totalGasFiatValue })] }))] }))] }))] }));
};

exports.TransactionCard = TransactionCard;
