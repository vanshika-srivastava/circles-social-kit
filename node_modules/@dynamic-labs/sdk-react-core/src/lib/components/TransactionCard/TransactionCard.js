'use client'
import { jsxs, jsx } from 'react/jsx-runtime';
import { WalletIcon } from '@dynamic-labs/wallet-book';
import '@dynamic-labs/sdk-api-core';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../../context/ViewContext/ViewContext.js';
import 'react';
import { ReactComponent as SvgTooltip } from '../../shared/assets/tooltip.js';
import { shortenWalletAddress } from '../../shared/utils/functions/shortenWalletAddress/shortenWalletAddress.js';
import '@dynamic-labs/utils';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import { useSendBalanceState } from '../../store/state/sendBalances.js';
import { getIconUrl } from '../../utils/functions/networksAndChains/networksAndChains.js';
import { Icon } from '../Icon/Icon.js';
import { Tooltip } from '../Tooltip/Tooltip.js';
import { getDisplayFiatPrice } from '../TransactionConfirmationPageLayout/utils.js';
import { Typography } from '../Typography/Typography.js';

const TransactionCard = ({ transaction, currentToken, currencySymbol, valueRounded, showFiat, transactionValue, isGasSponsored, gasFiatValue, totalGasFiatValue, currency, total, t, walletKey, }) => {
    const { amount, chainName } = useSendBalanceState();
    const currentChainName = chainName || 'eth';
    return (jsxs("div", { className: 'transaction-card', children: [jsxs("div", { className: 'transaction-card__header', children: [jsxs("div", { className: 'transaction-card__icon', children: [jsxs("div", { className: 'transaction-card__icon__container', children: [jsx("img", { src: (currentToken === null || currentToken === void 0 ? void 0 : currentToken.logoURI) || getIconUrl(currentChainName), alt: currencySymbol, width: 25, height: 25 }), jsx("img", { className: 'transaction-card__icon__container__network', src: getIconUrl(currentChainName), alt: currencySymbol, width: 25, height: 25 })] }), jsx(Typography, { variant: 'body_normal', color: 'primary', children: currencySymbol })] }), jsxs("div", { children: [jsxs("div", { className: 'transaction-card__info', children: [jsx(Typography, { variant: 'body_normal', color: 'secondary', children: currencySymbol }), jsx(Typography, { variant: 'body_normal', color: 'primary', children: valueRounded ||
                                            ((transaction === null || transaction === void 0 ? void 0 : transaction.value)
                                                ? transaction.format(transaction.value, { precision: 6 })
                                                : '') })] }), showFiat && transactionValue && (jsxs("div", { className: 'transaction-card__info', children: [jsx(Typography, { variant: 'body_small', color: 'secondary', children: "$" }), jsx(Typography, { variant: 'body_small', color: 'primary', children: getDisplayFiatPrice(amount, currentToken) })] }))] })] }), jsx("div", { className: 'transaction-card__arrow', children: jsx("span", { children: "\u2193" }) }), jsxs("div", { className: 'transaction-card__destination', children: [jsxs("div", { className: 'transaction-card__icon__container', children: [jsx(Icon, { size: 'medium', children: jsx(WalletIcon, { walletKey: walletKey, width: 25, height: 25 }) }), jsx("img", { className: 'transaction-card__icon__container__network', src: getIconUrl(currentChainName), alt: currencySymbol, width: 30, height: 30 })] }), jsx(Typography, { variant: 'body_normal', color: 'primary', className: 'transaction-card__wallet-address', children: shortenWalletAddress(transaction.to, 4, 4) })] }), !isGasSponsored && (jsxs("div", { className: 'transaction-card__total', children: [jsxs("div", { className: 'row', "data-testid": 'transaction-estimated-gas-fee', children: [jsx("div", { children: jsxs(Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', className: 'flex-row gap-native', children: [t('dyn_send_transaction.confirmation.data.gas_estimate'), jsx(Tooltip, { content: t('dyn_send_transaction.confirmation.data.gas_tooltip'), copykey: t('dyn_send_transaction.confirmation.data.gas_tooltip'), className: 'transaction-confirmation', children: jsx(Icon, { size: 'small', className: 'fee-tooltip', children: jsx(SvgTooltip, {}) }) })] }) }), showFiat && (currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) ? (jsxs("div", { className: 'flex-row', children: [jsx(Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', children: "~ $" }), jsx(Typography, { variant: 'body_normal', weight: 'regular', color: 'primary', children: Number(gasFiatValue) <= 0.01 ? '<0.01' : gasFiatValue })] })) : (jsxs("div", { className: 'flex-row gap-native', children: [jsx(Typography, { variant: 'body_normal', weight: 'regular', color: 'primary', children: transaction.fee.gas
                                            ? transaction.format(transaction.fee.gas, { precision: 6 })
                                            : '--' }), jsx(Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', children: currency })] }))] }), (currentToken === null || currentToken === void 0 ? void 0 : currentToken.price) && (jsxs("div", { className: 'row', "data-testid": 'transaction-total', children: [jsx("div", { children: jsx(Typography, { variant: 'body_normal', weight: 'bold', color: 'primary', children: t('dyn_send_transaction.confirmation.data.total') }) }), !showFiat ? (jsxs("div", { className: 'flex-row gap-native', children: [jsx(Typography, { variant: 'body_normal', weight: 'bold', color: 'primary', children: total
                                            ? transaction.format(total, { precision: 6 })
                                            : t('dyn_send_transaction.confirmation.not_applied') }), jsx(Typography, { variant: 'body_normal', weight: 'bold', color: 'primary', children: currency })] })) : (jsxs("div", { className: 'flex-row', children: [jsx(Typography, { variant: 'body_normal', color: 'primary', children: "~ $" }), jsx(Typography, { variant: 'body_normal', color: 'primary', children: Number(totalGasFiatValue) <= 0.01
                                            ? '<0.01'
                                            : totalGasFiatValue })] }))] }))] }))] }));
};

export { TransactionCard };
