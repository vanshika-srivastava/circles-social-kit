'use client'
import { jsxs, jsx } from 'react/jsx-runtime';
import { useTranslation } from 'react-i18next';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import 'react';
import { ReactComponent as SvgExternalLink } from '../../../shared/assets/externalLink.js';
import { ReactComponent as SvgLink } from '../../../shared/assets/link.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { classNames } from '../../../utils/functions/classNames/classNames.js';
import '../../Accordion/components/AccordionItem/AccordionItem.js';
import '../../Alert/Alert.js';
import '../../../events/dynamicEvents.js';
import '../../../../../_virtual/_tslib.js';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import { Typography } from '../../Typography/Typography.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../ShadowDOM/ShadowDOM.js';
import '../../Transition/ZoomTransition/ZoomTransition.js';
import '../../Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../Transition/OpacityTransition/OpacityTransition.js';
import '../../OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import { Icon } from '../../Icon/Icon.js';
import { useWalletDownloadLinks } from '../../../widgets/DynamicWidget/hooks/useWalletDownloadLinks/useWalletDownloadLinks.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../IconButton/IconButton.js';
import '../../MenuList/Dropdown/Dropdown.js';
import { TypographyButton } from '../../TypographyButton/TypographyButton.js';
import 'formik';
import '../../../store/state/sendBalances.js';
import '../../Input/Input.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../IsBrowser/IsBrowser.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../Popper/Popper/Popper.js';
import '../../Popper/PopperContext/PopperContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { CopyButton } from '../../CopyButton/CopyButton.js';
import '../../InlineWidget/InlineWidget.js';
import { QRCode } from '../../QRCode/QRCode.js';
import { LoadingQrCode } from '../../LoadingQrCode/LoadingQrCode.js';

const QrCodeContainer = ({ accentColor, walletConnector, qrcodeValue, Icon: MainIcon, showCopyToClipboardButton = false, desktopUri, showQrCodeMessage, showQrCodeImage, }) => {
    const { t } = useTranslation();
    const { setView } = useViewContext();
    const downloadLinks = useWalletDownloadLinks(walletConnector);
    const renderAppOrExtensionButton = () => {
        if (desktopUri) {
            return (jsx(TypographyButton, { expanded: true, dataTestId: 'get-extension-button', buttonPadding: 'small', buttonVariant: 'primary', buttonClassName: 'qr-code-button', onClick: () => window.open(desktopUri), copykey: 'dyn_qr_code.open_button', typographyProps: { variant: 'button_secondary' }, startSlot: 
                // eslint-disable-next-line react/jsx-wrap-multilines
                jsx(Icon, { size: 'xsmall', color: 'text-tertiary', children: jsx(SvgExternalLink, {}) }), children: t('dyn_qr_code.open_button') }));
        }
        if (downloadLinks === null || downloadLinks === void 0 ? void 0 : downloadLinks.length) {
            return (jsx(TypographyButton, { expanded: true, dataTestId: 'get-extension-button', buttonPadding: 'small', buttonVariant: 'primary', buttonClassName: 'qr-code-button', onClick: () => setView('no-qr-not-installed'), copykey: 'dyn_qr_code.get_extension_button', typographyProps: { variant: 'button_secondary' }, startSlot: 
                // eslint-disable-next-line react/jsx-wrap-multilines
                jsx(Icon, { size: 'xsmall', color: 'text-tertiary', children: jsx(SvgExternalLink, {}) }), children: t('dyn_qr_code.get_extension_button') }));
        }
        return null;
    };
    return (jsxs("div", { className: classNames('qrcode-container__container', {
            'qrcode-container__container--message': showQrCodeMessage,
        }), children: [jsxs("div", { className: 'qrcode-container__top', children: [qrcodeValue.length ? (jsx(QRCode, { Icon: MainIcon, accentColor: accentColor, value: qrcodeValue, logoSize: 50, walletKey: walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key, showQrCodeImage: showQrCodeImage })) : (jsx(LoadingQrCode, { Icon: MainIcon, logoSize: 50 })), jsxs("div", { className: 'button-container', children: [showCopyToClipboardButton && (jsx(CopyButton, { variant: 'button', textToCopy: qrcodeValue, disabled: !qrcodeValue.length, buttonClassName: 'qr-code-button', copykey: 'dyn_qr_code.copy_button', startSlot: 
                                // eslint-disable-next-line react/jsx-wrap-multilines
                                jsx(Icon, { size: 'mini', color: 'text-tertiary', children: jsx(SvgLink, {}) }), children: t('dyn_qr_code.copy_button') })), renderAppOrExtensionButton()] })] }), jsx(Typography, { variant: 'body_normal', color: 'secondary', weight: 'regular', className: 'qrcode-container__content', copykey: 'dyn_qr_code.scan_title', children: t('dyn_qr_code.scan_title', {
                    app: walletConnector ? 'wallet' : 'app',
                }) })] }));
};

export { QrCodeContainer };
