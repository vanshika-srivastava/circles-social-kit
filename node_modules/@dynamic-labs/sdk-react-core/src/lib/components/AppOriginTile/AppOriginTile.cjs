'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var Typography = require('../Typography/Typography.cjs');

const AppOriginTile = ({ appLogoUrl, appName, appOrigin, }) => {
    const ref = React.useRef(null);
    const [showAppName, setShowAppName] = React.useState(false);
    React.useLayoutEffect(() => {
        if (ref.current) {
            const { width, height } = ref.current.getBoundingClientRect();
            if (width < height * 2) {
                setShowAppName(true);
            }
            else {
                setShowAppName(false);
            }
        }
    }, [ref, setShowAppName]);
    return (jsxRuntime.jsxs("div", { className: 'app-origin-tile', children: [Boolean(appName) && (jsxRuntime.jsx("div", { className: 'app-origin-tile__title', children: appLogoUrl ? (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("img", { alt: 'app_logo', src: appLogoUrl, className: 'app-origin-tile__logo', ref: ref }), showAppName && (jsxRuntime.jsx(Typography.Typography, { color: 'primary', variant: 'body_normal', children: appName }))] })) : (jsxRuntime.jsx(Typography.Typography, { "data-testid": 'app-name', color: 'primary', variant: 'body_normal', children: appName })) })), appOrigin && (jsxRuntime.jsx(Typography.Typography, { color: 'secondary', variant: 'body_normal', weight: 'regular', children: appOrigin }))] }));
};

exports.AppOriginTile = AppOriginTile;
