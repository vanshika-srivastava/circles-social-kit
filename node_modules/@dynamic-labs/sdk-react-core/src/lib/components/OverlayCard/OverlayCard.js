'use client'
import { jsxs, jsx } from 'react/jsx-runtime';
import { useRef } from 'react';
import { createPortal } from 'react-dom';
import '@dynamic-labs/sdk-api-core';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import { useOnClickOutside } from '../../shared/utils/hooks/useOnClickOutside/index.js';
import { usePreventPageScroll } from '../../shared/utils/hooks/usePreventPageScroll/usePreventPageScroll.js';
import '../../shared/consts/index.js';
import { classNames } from '../../utils/functions/classNames/classNames.js';
import { AnimatePresence } from '../AnimatePresence/AnimatePresence.js';
import { ShadowDOM } from '../ShadowDOM/ShadowDOM.js';
import '../Transition/ZoomTransition/ZoomTransition.js';
import { SlideInUpTransition } from '../Transition/SlideInUpTransition/SlideInUpTransition.js';
import { OpacityTransition } from '../Transition/OpacityTransition/OpacityTransition.js';
import '../../../../_virtual/_tslib.js';
import '../../events/dynamicEvents.js';
import '../../context/DynamicContext/DynamicContext.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../config/ApiEndpoint.js';
import '../../store/state/user/user.js';
import '../../locale/locale.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import '../../context/VerificationContext/VerificationContext.js';
import '../../context/WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../context/ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../context/MockContext/MockContext.js';
import '../../views/CollectUserDataView/useFields.js';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../store/state/environmentId.js';
import '../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../Accordion/components/AccordionItem/AccordionItem.js';
import '../Alert/Alert.js';
import '../IconButton/IconButton.js';
import '../InlineWidget/InlineWidget.js';
import '../Input/Input.js';
import '../IsBrowser/IsBrowser.js';
import '../MenuList/Dropdown/Dropdown.js';
import { useOverlayCardTarget } from './OverlayCardTarget/OverlayCardTarget.js';
import '../PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../Popper/Popper/Popper.js';
import '../Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../context/FooterAnimationContext/index.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../store/state/sendBalances.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../polyfills.js';
import '../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../context/FundingContext/FundingContext.js';
import '../../context/SendBalanceContext/SendBalanceContext.js';
import '../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../context/ConnectWithOtpContext/constants.js';
import '../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../store/state/tokenBalances.js';

const OverlayCard = ({ isOpen, children, onClickOverlay, style, className, }) => {
    const target = useOverlayCardTarget(isOpen);
    // Only prevent scroll if using body as portal
    usePreventPageScroll(isOpen && !target);
    const contentRef = useRef(null);
    useOnClickOutside(contentRef, () => onClickOverlay === null || onClickOverlay === void 0 ? void 0 : onClickOverlay());
    const content = (jsxs("div", { className: classNames('overlay-card', {
            'overlay-card--disabled': !isOpen,
        }), style: { position: target === undefined ? 'fixed' : 'absolute' }, children: [jsx(AnimatePresence, { animationComponent: jsx(OpacityTransition, { className: 'overlay-card__animation' }), children: isOpen && (jsx("div", { onClick: onClickOverlay, className: 'overlay-card__overlay' })) }), jsx(AnimatePresence, { animationComponent: jsx(SlideInUpTransition, { className: 'overlay-card__animation overlay-card__animation--limit-height' }), children: isOpen && (jsx(AnimatePresence, { animationComponent: jsx(OpacityTransition, { className: 'overlay-card__animation' }), children: isOpen && (jsx("div", { ref: contentRef, className: classNames(className, 'overlay-card__content'), style: style, children: children })) })) })] }));
    if (target)
        return createPortal(content, target);
    return createPortal(jsx(ShadowDOM, { children: content }), document.body);
};

export { OverlayCard };
