'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import '@dynamic-labs/sdk-api-core';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import { useEffectOnce } from '../../shared/utils/hooks/useEffectOnce/useEffectOnce.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import { roundToNthDecimal } from '../../utils/functions/roundToNthDecimal/roundToNthDecimal.js';
import { dynamicEvents } from '../../events/dynamicEvents.js';

const useCurrencySymbol = (currentToken, currency) => (currentToken === null || currentToken === void 0 ? void 0 : currentToken.symbol) || currency;
const getValueRounded = (isNativeToken, transaction) => {
    let value;
    if (isNativeToken)
        value = transaction.value ? transaction.format(transaction.value) : '0';
    else {
        value =
            (transaction === null || transaction === void 0 ? void 0 : transaction.nonNativeValue) && (transaction === null || transaction === void 0 ? void 0 : transaction.formatNonNativeToken)
                ? transaction.formatNonNativeToken(transaction.nonNativeValue, transaction.nonNativeDecimal || 18)
                : '0';
    }
    return roundToNthDecimal(Number(value), 6);
};
const calculateFiatPrice = (amount, price, decimals) => {
    if (amount === undefined || isNaN(amount) || !decimals || !price)
        return 0;
    const SCALE = BigInt(Math.pow(10, decimals));
    const paddedPrice = Number(price.toFixed(decimals));
    try {
        const scaledTokenAmount = BigInt(amount * Number(SCALE));
        const fiatPriceBigInt = BigInt(paddedPrice * Number(SCALE));
        const product = scaledTokenAmount * fiatPriceBigInt;
        return Number(product / SCALE) / Number(SCALE);
    }
    catch (e) {
        // Possible issue: getting wrong price / decimals.
        // E.g: price is 0.00002206 and decimal is 5
        //'The number 2.206 cannot be converted to a BigInt because it is not an integer'
        return undefined;
    }
};
const getDisplayFiatPrice = (amountValue, currentToken) => {
    if (!(currentToken === null || currentToken === void 0 ? void 0 : currentToken.price))
        return '--';
    const fiatValue = calculateFiatPrice(amountValue, currentToken.price, currentToken.decimals);
    if (fiatValue === undefined) {
        return '--';
    }
    return fiatValue === 0 || fiatValue >= 0.01 ? fiatValue.toFixed(2) : '<0.01';
};
const useHandleRecovery = (walletConnector, usingSessionKey, onSuccess, shouldInitRecovery, initPasskeyRecoveryProcess, hideModal) => {
    const handleRecovery = () => __awaiter(void 0, void 0, void 0, function* () {
        if ((yield shouldInitRecovery()) &&
            walletConnector &&
            !usingSessionKey(walletConnector)) {
            yield initPasskeyRecoveryProcess('email', 'sendTransaction'); // Ensure the parameters match the actual function signature
        }
        onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess('callHandlerOutsideModal');
    });
    useEffectOnce(() => {
        if (hideModal) {
            handleRecovery();
        }
    });
};
const useHandleSubmitWithChecks = (config, recoveryHandlers, viewHandlers) => (e) => __awaiter(void 0, void 0, void 0, function* () {
    const { walletConnector, usingSessionKey, onClickSend, isTurnkeyWallet, userNeedsCrossDomainPasskey, } = config;
    const { shouldInitRecovery, initPasskeyRecoveryProcess } = recoveryHandlers;
    const { setView, setShowAuthFlow } = viewHandlers;
    if (walletConnector && usingSessionKey(walletConnector)) {
        onClickSend(e);
        return;
    }
    if (yield shouldInitRecovery()) {
        yield initPasskeyRecoveryProcess('email', 'sendTransaction');
    }
    if (isTurnkeyWallet && userNeedsCrossDomainPasskey) {
        setView('passkey-new-domain-detected');
        setShowAuthFlow(true, {
            ignoreIfIsEmbeddedWidget: false,
            performMultiWalletChecks: false,
        });
        dynamicEvents.once('passkeyRecoveryCompleted', () => {
            onClickSend(e);
        });
        return;
    }
    onClickSend(e);
});

export { calculateFiatPrice, getDisplayFiatPrice, getValueRounded, useCurrencySymbol, useHandleRecovery, useHandleSubmitWithChecks };
