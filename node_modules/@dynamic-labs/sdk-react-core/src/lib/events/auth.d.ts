import { AuthMethod, AuthOptions } from '@dynamic-labs/types';
/**
 * Maps auth methods to what property will be displayed under the "option" property of the event.
 *
 * Users will be able to access this data through the AuthOptions[K] type injection as well,
 * but with the "option" property they will also have a standard way to access the auth method target.
 */
type AuthEventPayloadOptionMap = {
    wallet: AuthOptions['wallet']['connectorName'];
    sms: AuthOptions['sms']['phone'];
    email: AuthOptions['email']['email'];
    social: AuthOptions['social']['provider'];
    externalAuth: AuthOptions['externalAuth']['externalUserId'];
};
/** Payload of auth events that provide insight into which auth method was selected */
export type AuthEventPayload = {
    [K in AuthMethod]: {
        type: K;
        option: AuthEventPayloadOptionMap[K];
    } & AuthOptions[K];
}[AuthMethod];
export type AuthEvents = {
    /**
     * Informs an auth attempt failed.
     * In general triggered when an error occurs or when user cancels out.
     * For email/sms, specifically happens when users cancels the OTP verification.
     */
    authFailure: (method: AuthEventPayload, 
    /** Will be 'user-cancelled' when cancelled, or the error when there is an error */
    reason: 'user-cancelled' | {
        error: unknown;
    }) => void;
    /** Informs an auth attempt initialized, and provides insight into which auth option it is */
    authInit: (method: AuthEventPayload) => void;
    logout: () => void;
    /**
     * DO NOT EXPOSE OR RELY ON THIS EVENT.
     * This indicates we should perform session validation.
     */
    triggerSessionValidation: () => void;
    /**
     * Emitted when the user succesfully completes an MFA challenge
     */
    mfaCompletionSuccess: (args: {
        mfaToken?: string;
    }) => void;
    /**
     * Emitted when there is an error verifiyng the MFA challenge
     */
    mfaCompletionFailure: (args: {
        error: unknown;
    }) => void;
};
export {};
