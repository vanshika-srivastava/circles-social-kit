'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var api = require('../api.cjs');

const revokeSession = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ environmentId, sessionId, }) {
    try {
        yield api.sdkApi().revokeSession({
            environmentId,
        });
    }
    catch (error) {
        const body = yield error.json();
        logger.logger.error(Error(body.error.message));
    }
});
const mapChainToChainEnum = (chain) => {
    const foundChain = Object.values(sdkApiCore.ChainEnum).find((value) => value === chain);
    if (!foundChain) {
        throw new utils.DynamicError(`Invalid chain ${chain}`);
    }
    return foundChain;
};
const mapProviderToProviderEnum = (provider) => {
    const foundProvider = Object.values(sdkApiCore.WalletProviderEnum).find((value) => value === provider);
    if (!foundProvider) {
        throw new utils.DynamicError(`Invalid provider ${provider}`);
    }
    return foundProvider;
};
const mapAuthModeTypeToEnum = (authMode) => {
    const found = Object.values(sdkApiCore.AuthModeEnum).find((value) => value === authMode);
    if (!found) {
        throw new utils.DynamicError(`Invalid authMode ${authMode}`);
    }
    return found;
};
const createVisit = (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ authMode, chain, environmentId, walletProvider, publicWalletAddress, walletName, }) {
    try {
        const connectRequest = {
            address: publicWalletAddress,
            authMode: mapAuthModeTypeToEnum(authMode),
            chain: mapChainToChainEnum(chain),
            provider: mapProviderToProviderEnum(walletProvider),
            walletName,
        };
        yield api.sdkApi().createVisit({
            connectRequest,
            environmentId,
        });
    }
    catch (error) {
        // log error to console, don't do anything else
        logger.logger.error(error);
    }
});

exports.createVisit = createVisit;
exports.mapAuthModeTypeToEnum = mapAuthModeTypeToEnum;
exports.mapChainToChainEnum = mapChainToChainEnum;
exports.mapProviderToProviderEnum = mapProviderToProviderEnum;
exports.revokeSession = revokeSession;
