'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { DynamicError } from '@dynamic-labs/utils';
import { ChainEnum, WalletProviderEnum, AuthModeEnum } from '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { sdkApi } from '../api.js';

const revokeSession = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, sessionId, }) {
    try {
        yield sdkApi().revokeSession({
            environmentId,
        });
    }
    catch (error) {
        const body = yield error.json();
        logger.error(Error(body.error.message));
    }
});
const mapChainToChainEnum = (chain) => {
    const foundChain = Object.values(ChainEnum).find((value) => value === chain);
    if (!foundChain) {
        throw new DynamicError(`Invalid chain ${chain}`);
    }
    return foundChain;
};
const mapProviderToProviderEnum = (provider) => {
    const foundProvider = Object.values(WalletProviderEnum).find((value) => value === provider);
    if (!foundProvider) {
        throw new DynamicError(`Invalid provider ${provider}`);
    }
    return foundProvider;
};
const mapAuthModeTypeToEnum = (authMode) => {
    const found = Object.values(AuthModeEnum).find((value) => value === authMode);
    if (!found) {
        throw new DynamicError(`Invalid authMode ${authMode}`);
    }
    return found;
};
const createVisit = (_b) => __awaiter(void 0, [_b], void 0, function* ({ authMode, chain, environmentId, walletProvider, publicWalletAddress, walletName, }) {
    try {
        const connectRequest = {
            address: publicWalletAddress,
            authMode: mapAuthModeTypeToEnum(authMode),
            chain: mapChainToChainEnum(chain),
            provider: mapProviderToProviderEnum(walletProvider),
            walletName,
        };
        yield sdkApi().createVisit({
            connectRequest,
            environmentId,
        });
    }
    catch (error) {
        // log error to console, don't do anything else
        logger.error(error);
    }
});

export { createVisit, mapAuthModeTypeToEnum, mapChainToChainEnum, mapProviderToProviderEnum, revokeSession };
