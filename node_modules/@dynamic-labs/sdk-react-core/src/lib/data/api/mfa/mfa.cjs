'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var utils = require('@dynamic-labs/utils');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var api = require('../api.cjs');

const getUserMfaDevices = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ environmentId, }) {
    try {
        const { devices } = yield api.sdkApi().getUserMfaDevices({
            environmentId,
        });
        return devices;
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        return [];
    }
});
const addMfaDevice = (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ environmentId, type, }) {
    try {
        if (type === sdkApiCore.MFADeviceType.Totp) {
            const response = yield api.sdkApi().registerTotpMfaDevice({
                environmentId,
            });
            return response;
        }
        throw new Error('Unsupported MFA device type');
    }
    catch (e) {
        const message = e instanceof Error ? e.message : (yield e.json()).error;
        logger.logger.error(message);
        throw new Error(message);
    }
});
const updateUserMfaDevice = (_c) => _tslib.__awaiter(void 0, [_c], void 0, function* ({ environmentId, mfaDeviceId, }) {
    try {
        yield api.sdkApi().updateUserMfaDevice({
            environmentId,
            mfaDeviceId,
        });
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
    }
});
const deleteMfaDevice = (_d) => _tslib.__awaiter(void 0, [_d], void 0, function* ({ environmentId, mfaDeviceId, mfaAuthToken, }) {
    try {
        yield api.sdkApi().deleteMfaDevice({
            environmentId,
            mfaDeviceId,
            xMfaAuthToken: mfaAuthToken,
        });
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
    }
});
// used when verifying a device added after the user is already logged in
// no jwt update needed
const verifyMfaDevice = (_e) => _tslib.__awaiter(void 0, [_e], void 0, function* ({ environmentId, type, code, }) {
    try {
        if (type === sdkApiCore.MFADeviceType.Totp) {
            const request = {
                code,
                type,
            };
            const device = yield api.sdkApi().registerTotpMfaDeviceVerify({
                environmentId,
                mFARegisterTotpDevicePostRequest: request,
            });
            return device;
        }
        throw new Error('Unsupported MFA device type');
    }
    catch (e) {
        const message = e instanceof Error ? e.message : (yield e.json()).error;
        logger.logger.error(message);
        return undefined;
    }
});
// used when verifying a device when user is logging in
// jwt update needed
const authMfaDevice = (_f) => _tslib.__awaiter(void 0, [_f], void 0, function* ({ deviceId, environmentId, type, code, createMfaToken, }) {
    try {
        if (type === sdkApiCore.MFADeviceType.Totp) {
            const request = {
                code,
                createMfaToken,
                id: deviceId || undefined,
            };
            const response = yield api.sdkApi().authMfaTotpDevice({
                environmentId,
                mFAAuthTotpDevicePostRequest: request,
            });
            return response;
        }
        throw new Error('Unsupported MFA device type');
    }
    catch (error) {
        logger.logger.error(error);
        if (error instanceof Response) {
            const responseError = yield error.json();
            if (responseError.code === 'mfa_invalid_code') {
                throw new utils.MfaInvalidOtpError();
            }
            if (responseError.code === 'mfa_rate_limited') {
                throw new utils.MfaRateLimitedError();
            }
        }
        throw error;
    }
});
const getRecoveryCodes = (_g) => _tslib.__awaiter(void 0, [_g], void 0, function* ({ environmentId, }) {
    try {
        const { recoveryCodes } = yield api.sdkApi().getRecoveryCodes({
            environmentId,
        });
        return recoveryCodes;
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        return [];
    }
});
const createNewRecoveryCodes = (_h) => _tslib.__awaiter(void 0, [_h], void 0, function* ({ environmentId, }) {
    try {
        const { recoveryCodes } = yield api.sdkApi().createNewRecoveryCodes({
            environmentId,
        });
        return recoveryCodes;
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        return [];
    }
});
// used when verifying a device when user is logging in with recovery code
// jwt update needed
const authMfaRecovery = (_j) => _tslib.__awaiter(void 0, [_j], void 0, function* ({ environmentId, code, }) {
    try {
        const request = {
            code,
        };
        const response = yield api.sdkApi().authMfaRecovery({
            environmentId,
            mFAAuthRecoveryDevicePostRequest: request,
        });
        return response;
    }
    catch (error) {
        logger.logger.error(error);
        if (error instanceof Response) {
            const responseError = yield error.json();
            if (responseError.code === 'mfa_invalid_code') {
                throw new utils.MfaInvalidOtpError();
            }
        }
        throw error;
    }
});

exports.addMfaDevice = addMfaDevice;
exports.authMfaDevice = authMfaDevice;
exports.authMfaRecovery = authMfaRecovery;
exports.createNewRecoveryCodes = createNewRecoveryCodes;
exports.deleteMfaDevice = deleteMfaDevice;
exports.getRecoveryCodes = getRecoveryCodes;
exports.getUserMfaDevices = getUserMfaDevices;
exports.updateUserMfaDevice = updateUserMfaDevice;
exports.verifyMfaDevice = verifyMfaDevice;
