'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var locale = require('../../../locale/locale.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var api = require('../api.cjs');

const createSmsVerification = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ isoCountryCode, phoneNumber, phoneCountryCode, environmentId, captchaToken, }) {
    try {
        return yield api.sdkApi().createSmsVerification({
            environmentId,
            smsVerificationCreateRequest: {
                captchaToken,
                isoCountryCode,
                phoneCountryCode,
                phoneNumber,
            },
        });
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        throw new utils.SmsVerificationError(data.error, data.code);
    }
});
const signInWithSmsVerification = (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ verificationToken, verificationUUID, environmentId, captchaToken, sessionPublicKey, }) {
    var _c;
    try {
        return yield api.sdkApi().signInWithSmsVerification({
            environmentId,
            smsVerificationVerifyRequest: {
                captchaToken,
                sessionPublicKey,
                verificationToken,
                verificationUUID,
            },
        });
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        if (((_c = data.error) === null || _c === void 0 ? void 0 : _c.code) === 'missing_from_list') {
            throw new utils.NoAccessError({ phoneNumber: data.payload.phoneNumber });
        }
        if (data.code === 'wrong_sms_verification_token') {
            throw new utils.SmsVerificationError(locale.Locale.getInstance().t('dyn_login.helper.phone_number_form.invalid_sms_verification'), data.code);
        }
        if (data.error.code === 'sandbox_maximum_threshold_reached') {
            throw new utils.SandboxMaximumThresholdReachedError(data.error.message);
        }
        throw new utils.SmsVerificationError(data.error, data.code);
    }
});
const retrySmsVerification = (_d) => _tslib.__awaiter(void 0, [_d], void 0, function* ({ isoCountryCode, phoneCountryCode, phoneNumber, environmentId, verificationUUID, }) {
    try {
        return yield api.sdkApi().retrySmsVerification({
            environmentId,
            smsVerificationRetryRequest: {
                isoCountryCode,
                phoneCountryCode,
                phoneNumber,
                verificationUUID,
            },
        });
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        throw new utils.SmsVerificationError(data.error, data.code);
    }
});
const verifySms = (_e) => _tslib.__awaiter(void 0, [_e], void 0, function* ({ verificationToken, verificationUUID, environmentId, }) {
    try {
        return yield api.sdkApi().verifySmsVerification({
            environmentId,
            smsVerificationVerifyRequest: {
                verificationToken,
                verificationUUID,
            },
        });
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        if (data.error.code === 'sandbox_maximum_threshold_reached') {
            throw new utils.SandboxMaximumThresholdReachedError(data.error.message);
        }
        throw new utils.SmsVerificationError(data.error, data.code);
    }
});

exports.createSmsVerification = createSmsVerification;
exports.retrySmsVerification = retrySmsVerification;
exports.signInWithSmsVerification = signInWithSmsVerification;
exports.verifySms = verifySms;
