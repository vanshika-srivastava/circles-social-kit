'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { ExternalAuthError, SandboxMaximumThresholdReachedError, DynamicError } from '@dynamic-labs/utils';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { storeAuthTokenAndUser } from '../../../store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.js';
import '../../../store/state/user/user.js';
import { sdkApi } from '../api.js';

const externalAuthSignin = (_a) => __awaiter(void 0, [_a], void 0, function* ({ environmentId, externalJwt, sessionPublicKey, }) {
    try {
        const response = yield sdkApi().externalAuthSignin({
            environmentId,
            externalAuthSigninRequest: {
                jwt: externalJwt,
                sessionPublicKey,
            },
        });
        return storeAuthTokenAndUser(response);
    }
    catch (e) {
        const data = yield e.json();
        logger.error('Error signing in with external JWT', data);
        if (data.code === 'invalid_external_auth') {
            throw new ExternalAuthError(data.code);
        }
        if (data.error.code === 'sandbox_maximum_threshold_reached') {
            throw new SandboxMaximumThresholdReachedError(data.error.message);
        }
        throw new DynamicError(data.error);
    }
});
const externalAuthVerify = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId, externalJwt, }) {
    try {
        const response = yield sdkApi().externalAuthVerify({
            environmentId,
            externalAuthSigninRequest: {
                jwt: externalJwt,
            },
        });
        return storeAuthTokenAndUser(response);
    }
    catch (e) {
        const data = yield e.json();
        logger.error('Error verifying external JWT', data);
        if (data.code === 'invalid_external_auth') {
            throw new ExternalAuthError(data.code);
        }
        if (data.error.code === 'sandbox_maximum_threshold_reached') {
            throw new SandboxMaximumThresholdReachedError(data.error.message);
        }
        throw new DynamicError(data.error);
    }
});

export { externalAuthSignin, externalAuthVerify };
