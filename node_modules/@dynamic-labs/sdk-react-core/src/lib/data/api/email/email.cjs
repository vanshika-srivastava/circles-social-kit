'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var api = require('../api.cjs');

const getEmailProvider = (_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ email, environmentId, }) {
    try {
        const res = yield api.sdkApi().getEmailProvider({
            email,
            environmentId,
        });
        return res;
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        throw new utils.EmailProviderError(data.code);
    }
});
const createEmailVerification = (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ email, environmentId, captchaToken, }) {
    try {
        const res = yield api.sdkApi().createEmailVerification({
            emailVerificationCreateRequest: {
                captchaToken,
                email,
            },
            environmentId,
        });
        return res;
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        throw new utils.EmailVerificationError(data.code);
    }
});
const signInWithEmailVerification = (_c) => _tslib.__awaiter(void 0, [_c], void 0, function* ({ verificationToken, verificationUUID, environmentId, captchaToken, sessionPublicKey, }) {
    try {
        const res = yield api.sdkApi().signInWithEmailVerification({
            emailVerificationVerifyRequest: {
                captchaToken,
                sessionPublicKey,
                verificationToken,
                verificationUUID,
            },
            environmentId,
        });
        return res;
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        if (data.error.code === 'missing_from_list') {
            throw new utils.NoAccessError({ email: data.payload.email });
        }
        if (data.code === 'email_associated_with_different_provider') {
            throw new utils.AccountExistsError(data.error, data.payload);
        }
        if (data.error.code === 'sandbox_maximum_threshold_reached') {
            throw new utils.SandboxMaximumThresholdReachedError(data.error.message);
        }
        throw new utils.EmailVerificationError(data.code);
    }
});
const retryEmailVerification = (_d) => _tslib.__awaiter(void 0, [_d], void 0, function* ({ email, environmentId, verificationUUID, }) {
    try {
        const res = yield api.sdkApi().retryEmailVerification({
            emailVerificationRetryRequest: {
                email,
                verificationUUID,
            },
            environmentId,
        });
        return res;
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        throw new utils.EmailVerificationError(data.code);
    }
});
const verifyEmail = (_e) => _tslib.__awaiter(void 0, [_e], void 0, function* ({ verificationToken, verificationUUID, environmentId, }) {
    try {
        const res = yield api.sdkApi().verifyEmailVerification({
            emailVerificationVerifyRequest: {
                verificationToken,
                verificationUUID,
            },
            environmentId,
        });
        return res;
    }
    catch (e) {
        const data = yield e.json();
        logger.logger.error(data.error);
        if (data.code === sdkApiCore.UnprocessableEntityErrorCode.UserHasAlreadyAccountWithEmail) {
            throw new utils.UserHasAccountWithEmailError(data.error);
        }
        if (data.error.code === 'sandbox_maximum_threshold_reached') {
            throw new utils.SandboxMaximumThresholdReachedError(data.error.message);
        }
        throw new utils.EmailVerificationError(data.code);
    }
});

exports.createEmailVerification = createEmailVerification;
exports.getEmailProvider = getEmailProvider;
exports.retryEmailVerification = retryEmailVerification;
exports.signInWithEmailVerification = signInWithEmailVerification;
exports.verifyEmail = verifyEmail;
