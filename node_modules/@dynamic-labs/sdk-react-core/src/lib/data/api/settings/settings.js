'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { sdkApi } from '../api.js';
import { isDynamicContextSessionSettingExpired, setDynamicContextSessionSettings, isWagmiSessionSettingExpired, setWagmiSessionSettings } from '../../../context/DynamicContext/helpers/helpers.js';
import { VERSION } from '../../../../version.js';

const fetchProjectSettings = (environmentId) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const res = yield sdkApi().getEnvironmentSettings({
            environmentId,
            sdkVersion: `WalletKit/${VERSION}`,
        }, {
            credentials: 'omit',
        });
        return res;
    }
    catch (e) {
        logger.error(e);
        return undefined;
    }
});
const sendDynamicProps = (environmentId, settingsToSend) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { dynamicContextProps, dynamicWagmiSettings, frameworkSettings } = settingsToSend;
        if (dynamicContextProps) {
            yield sendDynamicContextSettings(environmentId, { dynamicContextProps, frameworkSettings }, isDynamicContextSessionSettingExpired, setDynamicContextSessionSettings);
        }
        if (dynamicWagmiSettings) {
            yield sendDynamicContextSettings(environmentId, { dynamicWagmiSettings }, isWagmiSessionSettingExpired, setWagmiSessionSettings);
        }
    }
    catch (error) {
        logger.warn('Error caught when sending sdkSettings to api. Please notify Dynamic, and send the DynamicContextProvider settings you currently have configured', { error });
    }
});
const sendDynamicContextSettings = (environmentId, sdkSettingsRequest, isSdkSettingExpired, setSDKSessionSettings) => __awaiter(void 0, void 0, void 0, function* () {
    // sent once. no need to send again
    if (!isSdkSettingExpired()) {
        return;
    }
    yield sdkApi().logDynamicSdkSettings({ environmentId, sdkSettingsRequest });
    setSDKSessionSettings();
});

export { fetchProjectSettings, sendDynamicProps };
