'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { SocialAccountAlreadyExistsError, SandboxMaximumThresholdReachedError, GateBlockedError, NoAccessError, AccountExistsError } from '@dynamic-labs/utils';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { sdkApi } from '../api.js';
import { storeAuthTokenAndUser } from '../../../store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.js';
import '../../../store/state/user/user.js';

const initAuth = (environmentId, providerType, oauthInitAuthRequest) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield sdkApi().initAuth({
            environmentId,
            oauthInitAuthRequest,
            providerType,
        });
    }
    catch (e) {
        logger.error(e);
    }
});
const verifyOAuth = (environmentId_1, providerType_1, _a) => __awaiter(void 0, [environmentId_1, providerType_1, _a], void 0, function* (environmentId, providerType, { code, codeVerifier, state }) {
    const oauthRequest = {
        code,
        codeVerifier,
        state,
    };
    try {
        const response = yield sdkApi().oauthVerify({
            environmentId,
            oauthRequest,
            providerType,
        });
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleVerifyError(e);
    }
});
const unlinkOAuth = (_b) => __awaiter(void 0, [_b], void 0, function* ({ environmentId, primaryWalletId, verifiedCrentialId, }) {
    try {
        const response = yield sdkApi().verifyUnlink({
            environmentId,
            verifyUnlinkRequest: {
                primaryWalletId,
                verifiedCrentialId,
            },
        });
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return undefined;
    }
});
const signInOAuth = (environmentId_2, providerType_2, _c) => __awaiter(void 0, [environmentId_2, providerType_2, _c], void 0, function* (environmentId, providerType, { code, codeVerifier, state, captchaToken, sessionPublicKey }) {
    const oauthRequest = {
        captchaToken,
        code,
        codeVerifier,
        sessionPublicKey,
        state,
    };
    try {
        const response = yield sdkApi().oauthSignIn({
            environmentId,
            oauthRequest,
            providerType,
        });
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleSignInError(e);
    }
});
const getOAuthResult = (environmentId_3, providerType_3, _d) => __awaiter(void 0, [environmentId_3, providerType_3, _d], void 0, function* (environmentId, providerType, { state }) {
    const oauthResultRequest = {
        state,
    };
    try {
        const result = yield sdkApi().oauthResult({
            environmentId,
            oauthResultRequest,
            providerType,
        });
        return result;
    }
    catch (e) {
        logger.error(e);
        return undefined;
    }
});
const farcasterSignIn = (environmentId, farcasterSignInRequest) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield sdkApi().farcasterSignIn({
            environmentId,
            farcasterSignInRequest,
        });
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleSignInError(e);
    }
});
const farcasterVerify = (farcasterVerifyRequest) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield sdkApi().farcasterVerify(farcasterVerifyRequest);
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleVerifyError(e);
    }
});
const telegramSignIn = (environmentId, oauthResultRequest) => __awaiter(void 0, void 0, void 0, function* () {
    const telegramSignInRequest = {
        environmentId,
        oauthResultRequest,
    };
    try {
        const response = yield sdkApi().telegramSignIn(telegramSignInRequest);
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleSignInError(e);
    }
});
const telegramVerify = (environmentId, oauthResultRequest) => __awaiter(void 0, void 0, void 0, function* () {
    const telegramVerifyRequest = {
        environmentId,
        oauthResultRequest,
    };
    try {
        const response = yield sdkApi().telegramVerify(telegramVerifyRequest);
        const user = storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleVerifyError(e);
    }
});
const handleVerifyError = (e) => __awaiter(void 0, void 0, void 0, function* () {
    logger.error(e);
    const data = yield e.json();
    if (data.code === 'social_account_already_exists') {
        throw new SocialAccountAlreadyExistsError();
    }
    if (data.error.code === 'sandbox_maximum_threshold_reached') {
        throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    return undefined;
});
const handleSignInError = (e) => __awaiter(void 0, void 0, void 0, function* () {
    var _e, _f, _g;
    logger.error(e);
    const data = yield e.json();
    if (data.error.code === 'gate_blocked') {
        throw new GateBlockedError(data.payload.walletPublicKey);
    }
    if (data.error.code === 'missing_from_list') {
        throw new NoAccessError({
            socialProvider: (_e = data === null || data === void 0 ? void 0 : data.payload) === null || _e === void 0 ? void 0 : _e.socialProvider,
            socialUsername: (_f = data === null || data === void 0 ? void 0 : data.payload) === null || _f === void 0 ? void 0 : _f.socialUsername,
            walletPublicKey: (_g = data === null || data === void 0 ? void 0 : data.payload) === null || _g === void 0 ? void 0 : _g.walletPublicKey,
        });
    }
    if (data.code === 'email_associated_with_different_provider') {
        throw new AccountExistsError(data.error, data.payload);
    }
    if (data.error.code === 'sandbox_maximum_threshold_reached') {
        throw new SandboxMaximumThresholdReachedError(data.error.message);
    }
    return undefined;
});

export { farcasterSignIn, farcasterVerify, getOAuthResult, initAuth, signInOAuth, telegramSignIn, telegramVerify, unlinkOAuth, verifyOAuth };
