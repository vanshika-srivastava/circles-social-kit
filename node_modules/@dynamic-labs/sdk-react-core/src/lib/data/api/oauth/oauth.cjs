'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var api = require('../api.cjs');
var storeAuthTokenAndUser = require('../../../store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.cjs');
require('../../../store/state/user/user.cjs');

const initAuth = (environmentId, providerType, oauthInitAuthRequest) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    try {
        yield api.sdkApi().initAuth({
            environmentId,
            oauthInitAuthRequest,
            providerType,
        });
    }
    catch (e) {
        logger.logger.error(e);
    }
});
const verifyOAuth = (environmentId_1, providerType_1, _a) => _tslib.__awaiter(void 0, [environmentId_1, providerType_1, _a], void 0, function* (environmentId, providerType, { code, codeVerifier, state }) {
    const oauthRequest = {
        code,
        codeVerifier,
        state,
    };
    try {
        const response = yield api.sdkApi().oauthVerify({
            environmentId,
            oauthRequest,
            providerType,
        });
        const user = storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleVerifyError(e);
    }
});
const unlinkOAuth = (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ environmentId, primaryWalletId, verifiedCrentialId, }) {
    try {
        const response = yield api.sdkApi().verifyUnlink({
            environmentId,
            verifyUnlinkRequest: {
                primaryWalletId,
                verifiedCrentialId,
            },
        });
        const user = storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return undefined;
    }
});
const signInOAuth = (environmentId_2, providerType_2, _c) => _tslib.__awaiter(void 0, [environmentId_2, providerType_2, _c], void 0, function* (environmentId, providerType, { code, codeVerifier, state, captchaToken, sessionPublicKey }) {
    const oauthRequest = {
        captchaToken,
        code,
        codeVerifier,
        sessionPublicKey,
        state,
    };
    try {
        const response = yield api.sdkApi().oauthSignIn({
            environmentId,
            oauthRequest,
            providerType,
        });
        const user = storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleSignInError(e);
    }
});
const getOAuthResult = (environmentId_3, providerType_3, _d) => _tslib.__awaiter(void 0, [environmentId_3, providerType_3, _d], void 0, function* (environmentId, providerType, { state }) {
    const oauthResultRequest = {
        state,
    };
    try {
        const result = yield api.sdkApi().oauthResult({
            environmentId,
            oauthResultRequest,
            providerType,
        });
        return result;
    }
    catch (e) {
        logger.logger.error(e);
        return undefined;
    }
});
const farcasterSignIn = (environmentId, farcasterSignInRequest) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield api.sdkApi().farcasterSignIn({
            environmentId,
            farcasterSignInRequest,
        });
        const user = storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleSignInError(e);
    }
});
const farcasterVerify = (farcasterVerifyRequest) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield api.sdkApi().farcasterVerify(farcasterVerifyRequest);
        const user = storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleVerifyError(e);
    }
});
const telegramSignIn = (environmentId, oauthResultRequest) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    const telegramSignInRequest = {
        environmentId,
        oauthResultRequest,
    };
    try {
        const response = yield api.sdkApi().telegramSignIn(telegramSignInRequest);
        const user = storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleSignInError(e);
    }
});
const telegramVerify = (environmentId, oauthResultRequest) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    const telegramVerifyRequest = {
        environmentId,
        oauthResultRequest,
    };
    try {
        const response = yield api.sdkApi().telegramVerify(telegramVerifyRequest);
        const user = storeAuthTokenAndUser.storeAuthTokenAndUser(response);
        return user;
    }
    catch (e) {
        return handleVerifyError(e);
    }
});
const handleVerifyError = (e) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    logger.logger.error(e);
    const data = yield e.json();
    if (data.code === 'social_account_already_exists') {
        throw new utils.SocialAccountAlreadyExistsError();
    }
    if (data.error.code === 'sandbox_maximum_threshold_reached') {
        throw new utils.SandboxMaximumThresholdReachedError(data.error.message);
    }
    return undefined;
});
const handleSignInError = (e) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    var _e, _f, _g;
    logger.logger.error(e);
    const data = yield e.json();
    if (data.error.code === 'gate_blocked') {
        throw new utils.GateBlockedError(data.payload.walletPublicKey);
    }
    if (data.error.code === 'missing_from_list') {
        throw new utils.NoAccessError({
            socialProvider: (_e = data === null || data === void 0 ? void 0 : data.payload) === null || _e === void 0 ? void 0 : _e.socialProvider,
            socialUsername: (_f = data === null || data === void 0 ? void 0 : data.payload) === null || _f === void 0 ? void 0 : _f.socialUsername,
            walletPublicKey: (_g = data === null || data === void 0 ? void 0 : data.payload) === null || _g === void 0 ? void 0 : _g.walletPublicKey,
        });
    }
    if (data.code === 'email_associated_with_different_provider') {
        throw new utils.AccountExistsError(data.error, data.payload);
    }
    if (data.error.code === 'sandbox_maximum_threshold_reached') {
        throw new utils.SandboxMaximumThresholdReachedError(data.error.message);
    }
    return undefined;
});

exports.farcasterSignIn = farcasterSignIn;
exports.farcasterVerify = farcasterVerify;
exports.getOAuthResult = getOAuthResult;
exports.initAuth = initAuth;
exports.signInOAuth = signInOAuth;
exports.telegramSignIn = telegramSignIn;
exports.telegramVerify = telegramVerify;
exports.unlinkOAuth = unlinkOAuth;
exports.verifyOAuth = verifyOAuth;
