'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var DynamicWidgetContext = require('../../context/DynamicWidgetContext.cjs');
require('../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../components/Alert/Alert.cjs');
var useDynamicEvents = require('../../../../utils/hooks/events/useDynamicEvents/useDynamicEvents.cjs');
require('@dynamic-labs/utils');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
var ViewContext = require('../../../../context/ViewContext/ViewContext.cjs');
var add = require('../../../../shared/assets/add.cjs');
var chevronLeft = require('../../../../shared/assets/chevron-left.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
var useEffectOnce = require('../../../../shared/utils/hooks/useEffectOnce/useEffectOnce.cjs');
require('../../../../store/state/loadingAndLifecycle.cjs');
require('../../../../shared/consts/index.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../store/state/user/user.cjs');
require('../../../../locale/locale.cjs');
require('../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../events/dynamicEvents.cjs');
require('../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../context/WalletContext/WalletContext.cjs');
require('../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
require('../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../views/CollectUserDataView/useFields.cjs');
require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../store/state/environmentId.cjs');
require('../../../../store/state/walletConnectorOptions.cjs');
var Typography = require('../../../../components/Typography/Typography.cjs');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
var IconButton = require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
var TypographyButton = require('../../../../components/TypographyButton/TypographyButton.cjs');
require('formik');
require('../../../../store/state/sendBalances.cjs');
var ModalHeader = require('../../../../components/ModalHeader/ModalHeader.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var MfaDeviceTileSkeleton = require('../../../../components/MfaDeviceTileSkeleton/MfaDeviceTileSkeleton.cjs');
var UserDeviceTile = require('./components/UserDeviceTile.cjs');
var sort = require('./components/utils/sort.cjs');
require('../../../../../polyfills.cjs');
require('../../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../../context/FundingContext/FundingContext.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var useMfa = require('../../../../utils/hooks/useMfa/useMfa.cjs');
require('../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
var useDynamicModals = require('../../../../utils/hooks/useDynamicModals/useDynamicModals.cjs');
require('../../../../store/state/tokenBalances.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('qrcode');

const ManageMfaWidgetView = () => {
    var _a;
    const [userDevices, setUserDevices] = React.useState([]);
    const [mfaMethod, setMfaMethod] = React.useState();
    const [loading, setLoading] = React.useState(false);
    const { setDynamicWidgetView } = DynamicWidgetContext.useWidgetContext();
    const { setShowMfaQRCode, setShowOTPVerification } = useDynamicModals.useDynamicModals();
    const { setView } = ViewContext.useViewContext();
    const { getUserDevices, deleteUserDevice } = useMfa.useMfa();
    const { t } = reactI18next.useTranslation();
    const { projectSettings, setShowAuthFlow } = useInternalDynamicContext.useInternalDynamicContext();
    const isMfaRequired = Boolean((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.mfa) === null || _a === void 0 ? void 0 : _a.required);
    const getDevices = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        setLoading(true);
        const devices = yield getUserDevices();
        // set the user devices with the default device first
        setUserDevices(sort.sortDevices(devices));
        setLoading(false);
    }), [getUserDevices]);
    // re-fetch devices when a new device is added
    useDynamicEvents.useDynamicEvents('mfaCompletionSuccess', (_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ mfaToken }) {
        if (mfaToken) {
            // we now require an MFA token to delete a device which is an async operation
            if ((mfaMethod === null || mfaMethod === void 0 ? void 0 : mfaMethod.action) === 'remove') {
                yield deleteUserDevice(mfaMethod.params.deviceId, mfaToken);
                setMfaMethod(undefined);
            }
        }
        getDevices();
    }));
    // delete device and then re-fetch devices
    const deleteDevice = (id) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        setMfaMethod({ action: 'remove', params: { deviceId: id } });
        setShowOTPVerification(true);
    });
    // load devices on initial page load
    useEffectOnce.useEffectOnce(() => {
        getDevices();
    });
    const backButton = (jsxRuntime.jsx(IconButton.IconButton, { type: 'button', onClick: () => setDynamicWidgetView('settings'), "data-testid": 'back-button', children: jsxRuntime.jsx(chevronLeft.ReactComponent, {}) }));
    const handleGenerateBackupCodes = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        setShowAuthFlow(true);
        setView('mfa-display-backup-codes', { regenerateCodes: true });
    });
    return (jsxRuntime.jsxs("div", { className: 'manage-mfa-widget-view', children: [jsxRuntime.jsx(ModalHeader.ModalHeader, { leading: backButton, children: jsxRuntime.jsx("div", { className: 'send-balance-page-layout__header-content', children: jsxRuntime.jsx(Typography.Typography, { variant: 'title', color: 'primary', copykey: 'dyn_manage_mfa.title', children: t('dyn_manage_mfa.title') }) }) }), jsxRuntime.jsxs("div", { className: 'manage-mfa-widget-view__scroll-container', children: [loading && jsxRuntime.jsx(MfaDeviceTileSkeleton.MfaDeviceTileSkeleton, {}), !loading && userDevices.length === 0 && (jsxRuntime.jsx(Typography.Typography, { className: 'manage-mfa-widget-view__no-devices', variant: 'body_normal', color: 'secondary', copykey: 'dyn_manage_mfa.no_devices', children: t('dyn_manage_mfa.no_devices') })), userDevices.map((device, index) => (jsxRuntime.jsx(UserDeviceTile.UserDeviceTile, { isMfaRequired: isMfaRequired, userDevice: device, index: index, deleteDevice: deleteDevice }, device.id)))] }), jsxRuntime.jsx("div", { className: 'manage-mfa-widget-view__add-mfa-button-container', children: userDevices.length > 0 ? (jsxRuntime.jsx(TypographyButton.TypographyButton, { buttonClassName: 'manage-mfa-widget-view__add-mfa-button-container__button', onClick: handleGenerateBackupCodes, copykey: 'dyn_manage_mfa.generate_backup_codes_button', children: t('dyn_manage_mfa.generate_backup_codes_button') })) : (jsxRuntime.jsx(TypographyButton.TypographyButton, { buttonClassName: 'manage-mfa-widget-view__add-mfa-button-container__button', onClick: () => setShowMfaQRCode(true), copykey: 'dyn_manage_mfa.add_mfa_button', startSlot: jsxRuntime.jsx(add.ReactComponent, {}), children: t('dyn_manage_mfa.add_mfa_button') })) })] }));
};

exports.ManageMfaWidgetView = ManageMfaWidgetView;
