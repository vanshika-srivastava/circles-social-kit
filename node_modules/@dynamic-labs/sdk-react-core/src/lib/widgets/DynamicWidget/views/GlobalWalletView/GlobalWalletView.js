'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { useState, useCallback, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { isMobile } from '@dynamic-labs/utils';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import { useViewContext } from '../../../../context/ViewContext/ViewContext.js';
import { ReactComponent as SvgArrowLeft } from '../../../../shared/assets/arrow-left.js';
import { ReactComponent as SvgCopy } from '../../../../shared/assets/copy.js';
import { ReactComponent as SvgBlueWalletconnect } from '../../../../shared/assets/blue-walletconnect.js';
import { ReactComponent as SvgQuestionMark } from '../../../../shared/assets/question-mark.js';
import '@dynamic-labs/wallet-book';
import '../../../../utils/constants/colors.js';
import '../../../../utils/constants/values.js';
import '../../../../store/state/loadingAndLifecycle.js';
import '../../../../shared/consts/index.js';
import { IconButton } from '../../../../components/IconButton/IconButton.js';
import { useWidgetContext } from '../../context/DynamicWidgetContext.js';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../events/dynamicEvents.js';
import { useDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useDynamicContext.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/environmentId.js';
import '../../../../store/state/walletConnectorOptions.js';
import { Typography } from '../../../../components/Typography/Typography.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import { Divider } from '../../../../components/Divider/Divider.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import 'formik';
import '../../../../store/state/sendBalances.js';
import { Input } from '../../../../components/Input/Input.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { GlobalWalletScanner } from './scanner/GlobalWalletScanner.js';
import '../../../../../polyfills.js';
import '../../../../context/DynamicContext/DynamicContext.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../../context/FundingContext/FundingContext.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import '../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../store/state/tokenBalances.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import 'qrcode';

const GlobalWalletView = () => {
    var _a;
    const { t } = useTranslation();
    const { setDynamicWidgetView, goToInitialDynamicWidgetView } = useWidgetContext();
    const { setView } = useViewContext();
    const { setShowAuthFlow } = useInternalDynamicContext();
    const { primaryWallet } = useDynamicContext();
    const [walletConnectUri, setWalletConnectUri] = useState('');
    const [bannerMessage, setBannerMessage] = useState(null);
    const [isScanned, setIsScanned] = useState(false);
    const { globalWallet } = 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (_a = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector) !== null && _a !== void 0 ? _a : {};
    if (!globalWallet)
        throw new Error('Global Wallet not found');
    const showBanner = useCallback((message, type) => {
        setBannerMessage({ message, type });
        const timeout = type === 'success' ? 2000 : 3000;
        setTimeout(() => {
            setBannerMessage(null);
            if (type === 'success')
                goToInitialDynamicWidgetView();
        }, timeout);
    }, [goToInitialDynamicWidgetView]);
    const popupConfirmView = () => {
        const pendingPairing = globalWallet.getPendingPairing();
        if (!pendingPairing)
            throw new Error('No pending pairing');
        const { name, url, icons } = pendingPairing.params.proposer.metadata;
        setView('global-wallet-confirm', {
            onCancel: () => {
                setDynamicWidgetView('global-wallet');
                setShowAuthFlow(false, {
                    ignoreIfIsEmbeddedWidget: false,
                    performMultiWalletChecks: false,
                });
                setWalletConnectUri('');
            },
            onConfirm: () => __awaiter(void 0, void 0, void 0, function* () {
                try {
                    yield globalWallet.confirmPairing(true);
                    setDynamicWidgetView('global-wallet');
                    setShowAuthFlow(false, {
                        ignoreIfIsEmbeddedWidget: false,
                        performMultiWalletChecks: false,
                    });
                    showBanner(t('global_wallet.banner.success', {
                        name: name !== null && name !== void 0 ? name : t('global_wallet.the_dapp'),
                    }), 'success');
                }
                catch (error) {
                    showBanner(t('global_wallet.banner.warning', {
                        name: name !== null && name !== void 0 ? name : t('global_wallet.the_dapp'),
                    }), 'error');
                }
            }),
            pairingInfo: { icons, name, url },
        });
        setShowAuthFlow(true, {
            ignoreIfIsEmbeddedWidget: false,
            performMultiWalletChecks: false,
        });
    };
    const handlePairing = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!walletConnectUri.startsWith('wc:')) {
            showBanner(t('global_wallet.banner.bad_input'), 'error');
            return;
        }
        try {
            yield globalWallet.pairWithWC(walletConnectUri);
            globalWallet.getWeb3Wallet().on('session_proposal', popupConfirmView);
        }
        catch (error) {
            const errorMessage = String(error);
            if (errorMessage.includes('expired')) {
                showBanner(t('global_wallet.banner.expired'), 'error');
            }
            else if (errorMessage.includes('exists')) {
                showBanner(t('global_wallet.banner.already_connected', {
                    name: t('global_wallet.this_app'),
                }), 'success');
            }
            else {
                showBanner(t('global_wallet.banner.warning', {
                    name: t('global_wallet.the_dapp'),
                }), 'error');
            }
        }
    }), // eslint-disable-next-line react-hooks/exhaustive-deps
    [walletConnectUri]);
    const handleScan = useCallback((result) => {
        if (result) {
            setIsScanned(true);
            setWalletConnectUri(result);
        }
    }, []);
    useEffect(() => {
        if (walletConnectUri.startsWith('wc:')) {
            handlePairing();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [walletConnectUri]);
    const renderHeader = () => (jsxs("div", { className: 'header', children: [jsx(IconButton, { type: 'button', onClick: goToInitialDynamicWidgetView, "data-testid": 'back-button', children: jsx(SvgArrowLeft, {}) }), jsx(Typography, { variant: 'title', weight: 'medium', color: 'primary', as: 'h1', copykey: 'global_wallet.connect_to_apps', children: t('global_wallet.connect_to_apps') }), isMobile() && (jsx(IconButton, { type: 'button', onClick: () => {
                    setView('global-wallet-info');
                    setShowAuthFlow(true, {
                        ignoreIfIsEmbeddedWidget: false,
                        performMultiWalletChecks: false,
                    });
                }, "data-testid": 'info-button', children: jsx(SvgQuestionMark, {}) }))] }));
    const renderScanner = () => isMobile() && (jsxs(Fragment, { children: [jsxs("div", { className: 'scanner-wrapper', children: [jsx(GlobalWalletScanner, { onScan: handleScan, jsQR: globalWallet.qrScanner }), jsxs("div", { className: 'scanner-overlay', children: [jsxs("div", { className: 'scanner-frame', children: [jsx("div", { className: 'corner top-left' }), jsx("div", { className: 'corner top-right' }), jsx("div", { className: 'corner bottom-left' }), jsx("div", { className: 'corner bottom-right' })] }), jsxs("div", { className: 'scanner-overlay-content', children: [jsx(SvgBlueWalletconnect, { className: 'scanner-icon' }), jsx(Typography, { variant: 'body_small', weight: 'regular', color: 'white', copykey: 'global_wallet.scan_qr_code', children: t('global_wallet.scan_qr_code') })] })] })] }), jsx(Divider, { text: t('global_wallet.or') })] }));
    const renderInput = () => (jsxs("div", { className: 'wallet-connect-card', children: [jsx("div", { className: 'input-group', children: jsx(Input, { copykey: 'global_wallet.walletconnect_uri', id: 'walletconnect-uri', label: t('global_wallet.walletconnect_uri'), placeholder: 'wc:...', value: isScanned ? '' : walletConnectUri, onChange: (e) => {
                        setWalletConnectUri(e.target.value);
                        setIsScanned(false);
                    }, variant: 'dense' }) }), bannerMessage && (jsx("div", { className: `banner ${bannerMessage.type}`, children: jsx(Typography, { variant: 'body_small', weight: 'regular', color: 'primary', children: bannerMessage.message }) }))] }));
    const renderInfoCard = () => !isMobile() && (jsx("div", { className: 'info-card', children: jsxs("div", { className: 'wrapper', children: [jsx(Typography, { variant: 'body_small', weight: 'bold', color: 'primary', as: 'h2', children: t('global_wallet.help.title') }), jsx(Typography, { variant: 'body_small', weight: 'regular', color: 'secondary', children: t('global_wallet.help.step.1') }), jsx(Typography, { variant: 'body_small', weight: 'regular', color: 'secondary', children: t('global_wallet.help.step.2') }), jsx(Typography, { variant: 'body_small', weight: 'regular', color: 'secondary', children: jsxs("span", { className: 'inline-logo-text', children: ["3. Open WalletConnect", jsx(SvgBlueWalletconnect, { className: 'inline-logo' }), " from the list"] }) }), jsx(Typography, { variant: 'body_small', weight: 'regular', color: 'secondary', children: jsxs("span", { className: 'inline-logo-text', children: ["4. Locate and click ", jsx(SvgCopy, { className: 'inline-logo' }), " to copy the URI code"] }) })] }) }));
    return (jsxs("div", { className: 'connect-dapps-view', children: [renderHeader(), renderScanner(), renderInput(), renderInfoCard()] }));
};

export { GlobalWalletView, GlobalWalletView as default };
