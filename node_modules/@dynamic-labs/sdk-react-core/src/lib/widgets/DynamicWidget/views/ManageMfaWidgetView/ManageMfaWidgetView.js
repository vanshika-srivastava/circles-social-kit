'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { useState, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import { useWidgetContext } from '../../context/DynamicWidgetContext.js';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import { useDynamicEvents } from '../../../../utils/hooks/events/useDynamicEvents/useDynamicEvents.js';
import '@dynamic-labs/utils';
import '../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import { useViewContext } from '../../../../context/ViewContext/ViewContext.js';
import { ReactComponent as SvgAdd } from '../../../../shared/assets/add.js';
import { ReactComponent as SvgChevronLeft } from '../../../../shared/assets/chevron-left.js';
import '@dynamic-labs/wallet-book';
import '../../../../utils/constants/colors.js';
import '../../../../utils/constants/values.js';
import { useEffectOnce } from '../../../../shared/utils/hooks/useEffectOnce/useEffectOnce.js';
import '../../../../store/state/loadingAndLifecycle.js';
import '../../../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../events/dynamicEvents.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/environmentId.js';
import '../../../../store/state/walletConnectorOptions.js';
import { Typography } from '../../../../components/Typography/Typography.js';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import { IconButton } from '../../../../components/IconButton/IconButton.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import { TypographyButton } from '../../../../components/TypographyButton/TypographyButton.js';
import 'formik';
import '../../../../store/state/sendBalances.js';
import { ModalHeader } from '../../../../components/ModalHeader/ModalHeader.js';
import '../../../../components/Input/Input.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { MfaDeviceTileSkeleton } from '../../../../components/MfaDeviceTileSkeleton/MfaDeviceTileSkeleton.js';
import { UserDeviceTile } from './components/UserDeviceTile.js';
import { sortDevices } from './components/utils/sort.js';
import '../../../../../polyfills.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../../context/FundingContext/FundingContext.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import '../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { useMfa } from '../../../../utils/hooks/useMfa/useMfa.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import { useDynamicModals } from '../../../../utils/hooks/useDynamicModals/useDynamicModals.js';
import '../../../../store/state/tokenBalances.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import 'qrcode';

const ManageMfaWidgetView = () => {
    var _a;
    const [userDevices, setUserDevices] = useState([]);
    const [mfaMethod, setMfaMethod] = useState();
    const [loading, setLoading] = useState(false);
    const { setDynamicWidgetView } = useWidgetContext();
    const { setShowMfaQRCode, setShowOTPVerification } = useDynamicModals();
    const { setView } = useViewContext();
    const { getUserDevices, deleteUserDevice } = useMfa();
    const { t } = useTranslation();
    const { projectSettings, setShowAuthFlow } = useInternalDynamicContext();
    const isMfaRequired = Boolean((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.mfa) === null || _a === void 0 ? void 0 : _a.required);
    const getDevices = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        setLoading(true);
        const devices = yield getUserDevices();
        // set the user devices with the default device first
        setUserDevices(sortDevices(devices));
        setLoading(false);
    }), [getUserDevices]);
    // re-fetch devices when a new device is added
    useDynamicEvents('mfaCompletionSuccess', (_b) => __awaiter(void 0, [_b], void 0, function* ({ mfaToken }) {
        if (mfaToken) {
            // we now require an MFA token to delete a device which is an async operation
            if ((mfaMethod === null || mfaMethod === void 0 ? void 0 : mfaMethod.action) === 'remove') {
                yield deleteUserDevice(mfaMethod.params.deviceId, mfaToken);
                setMfaMethod(undefined);
            }
        }
        getDevices();
    }));
    // delete device and then re-fetch devices
    const deleteDevice = (id) => __awaiter(void 0, void 0, void 0, function* () {
        setMfaMethod({ action: 'remove', params: { deviceId: id } });
        setShowOTPVerification(true);
    });
    // load devices on initial page load
    useEffectOnce(() => {
        getDevices();
    });
    const backButton = (jsx(IconButton, { type: 'button', onClick: () => setDynamicWidgetView('settings'), "data-testid": 'back-button', children: jsx(SvgChevronLeft, {}) }));
    const handleGenerateBackupCodes = () => __awaiter(void 0, void 0, void 0, function* () {
        setShowAuthFlow(true);
        setView('mfa-display-backup-codes', { regenerateCodes: true });
    });
    return (jsxs("div", { className: 'manage-mfa-widget-view', children: [jsx(ModalHeader, { leading: backButton, children: jsx("div", { className: 'send-balance-page-layout__header-content', children: jsx(Typography, { variant: 'title', color: 'primary', copykey: 'dyn_manage_mfa.title', children: t('dyn_manage_mfa.title') }) }) }), jsxs("div", { className: 'manage-mfa-widget-view__scroll-container', children: [loading && jsx(MfaDeviceTileSkeleton, {}), !loading && userDevices.length === 0 && (jsx(Typography, { className: 'manage-mfa-widget-view__no-devices', variant: 'body_normal', color: 'secondary', copykey: 'dyn_manage_mfa.no_devices', children: t('dyn_manage_mfa.no_devices') })), userDevices.map((device, index) => (jsx(UserDeviceTile, { isMfaRequired: isMfaRequired, userDevice: device, index: index, deleteDevice: deleteDevice }, device.id)))] }), jsx("div", { className: 'manage-mfa-widget-view__add-mfa-button-container', children: userDevices.length > 0 ? (jsx(TypographyButton, { buttonClassName: 'manage-mfa-widget-view__add-mfa-button-container__button', onClick: handleGenerateBackupCodes, copykey: 'dyn_manage_mfa.generate_backup_codes_button', children: t('dyn_manage_mfa.generate_backup_codes_button') })) : (jsx(TypographyButton, { buttonClassName: 'manage-mfa-widget-view__add-mfa-button-container__button', onClick: () => setShowMfaQRCode(true), copykey: 'dyn_manage_mfa.add_mfa_button', startSlot: jsx(SvgAdd, {}), children: t('dyn_manage_mfa.add_mfa_button') })) })] }));
};

export { ManageMfaWidgetView };
