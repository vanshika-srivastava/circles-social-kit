'use client'
import { jsx, jsxs } from 'react/jsx-runtime';
import React__default, { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { isSendBalanceWalletConnector } from '@dynamic-labs/wallet-connector-core';
import '../../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import { Alert } from '../../../../../components/Alert/Alert.js';
import '../../../../../events/dynamicEvents.js';
import '../../../../../../../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import '../../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../../../../../context/ViewContext/ViewContext.js';
import { ReactComponent as SvgAdd } from '../../../../../shared/assets/add.js';
import { ReactComponent as SvgLink } from '../../../../../shared/assets/link.js';
import { ReactComponent as SvgSend } from '../../../../../shared/assets/send.js';
import '@dynamic-labs/wallet-book';
import '../../../../../utils/constants/colors.js';
import '../../../../../utils/constants/values.js';
import '../../../../../store/state/loadingAndLifecycle.js';
import '../../../../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { getUserIdentifier } from '../../../../../utils/functions/getUserIdentifier/getUserIdentifier.js';
import '../../../../../config/ApiEndpoint.js';
import '../../../../../store/state/user/user.js';
import '../../../../../locale/locale.js';
import '../../../../../store/state/projectSettings/projectSettings.js';
import '../../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import { useWalletContext } from '../../../../../context/WalletContext/WalletContext.js';
import '../../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../../context/ThemeContext/ThemeContext.js';
import '../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../../../context/MockContext/MockContext.js';
import '../../../../../views/CollectUserDataView/useFields.js';
import '../../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../../store/state/environmentId.js';
import '../../../../../store/state/walletConnectorOptions.js';
import { Typography } from '../../../../../components/Typography/Typography.js';
import '../../../../../context/FooterAnimationContext/index.js';
import '../../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../DynamicWidgetHeader.js';
import 'react-focus-lock';
import { Icon } from '../../../../../components/Icon/Icon.js';
import { useWidgetContext } from '../../../context/DynamicWidgetContext.js';
import '../../../../../components/IconButton/IconButton.js';
import '../../../../../components/MenuList/Dropdown/Dropdown.js';
import { TypographyButton } from '../../../../../components/TypographyButton/TypographyButton.js';
import 'formik';
import '../../../../../store/state/sendBalances.js';
import '../../../../../components/Input/Input.js';
import { Spinner } from '../../../../../components/Spinner/spinner.js';
import '../../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../../../polyfills.js';
import '../../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../../DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../DynamicWidgetCard/DynamicWidgetCard.js';
import { UserAvatar } from '../../../../../components/UserAvatar/UserAvatar.js';
import '../../../../../components/IsBrowser/IsBrowser.js';
import '../../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import { useFundingContext } from '../../../../../context/FundingContext/FundingContext.js';
import '../../../../../components/Popper/Popper/Popper.js';
import '../../../../../components/Popper/PopperContext/PopperContext.js';
import '../../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import { useSendBalance } from '../../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../../store/state/tokenBalances.js';
import '../../../../../components/InlineWidget/InlineWidget.js';
import 'qrcode';
import { SecureEmbeddedWalletCard } from '../../../../../components/SecureEmbeddedWalletCard/SecureEmbeddedWalletCard.js';
import { ActiveWalletInformation } from '../../ActiveWalletInformation/ActiveWalletInformation.js';
import { UnknownWalletInformation } from '../../UnknownWalletInformation/UnknownWalletInformation.js';

const LinkButton = React__default.memo(({ connector }) => {
    const { setDynamicWidgetView } = useWidgetContext();
    const handleOnClickLink = () => {
        setDynamicWidgetView('global-wallet');
    };
    if (!connector.globalWallet)
        return null;
    return (jsx(TypographyButton, { expanded: true, dataTestId: 'link-button', buttonPadding: 'small', buttonVariant: 'primary', onClick: handleOnClickLink, startSlot: jsx(Icon, { size: 'small', color: 'text-secondary', children: jsx(SvgLink, {}) }), children: "Connect" }));
});
LinkButton.displayName = 'LinkButton';
const DynamicWidgetWalletHeader = ({ variant, }) => {
    const { primaryWallet, user } = useInternalDynamicContext();
    const { open: openSendBalanceModal } = useSendBalance();
    const { supportsFunding, setShowFunding, fundingEnabled } = useFundingContext();
    const { setDynamicWidgetView, setIsOpen } = useWidgetContext();
    const { isLoadingEmbeddedWallet } = useWalletContext();
    const { t } = useTranslation();
    const isSendBalanceEnabled = useMemo(() => {
        const connector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
        if (!connector)
            return false;
        return isSendBalanceWalletConnector(connector);
    }, [primaryWallet]);
    const handleOnClickSend = () => {
        if (variant === 'dropdown') {
            setIsOpen(false);
            openSendBalanceModal().catch((err) => logger.error(err));
        }
        else {
            setDynamicWidgetView('send-balance');
        }
    };
    const renderWalletHeader = () => {
        const unknownWallet = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((credential) => credential.walletName === 'unknown');
        if (primaryWallet || isLoadingEmbeddedWallet) {
            return jsx(ActiveWalletInformation, { isLoading: isLoadingEmbeddedWallet });
        }
        else if (unknownWallet) {
            return jsx(UnknownWalletInformation, { address: unknownWallet.address });
        }
        else {
            return (jsx("div", { className: 'dynamic-widget-wallet-header__icon-container', children: jsx(UserAvatar, { user: user }) }));
        }
    };
    const isActionsVisible = isSendBalanceEnabled || fundingEnabled;
    return (jsxs("div", { className: 'dynamic-widget-wallet-header', "data-testid": 'dynamic-widget-wallet-header', children: [renderWalletHeader(), isLoadingEmbeddedWallet && (jsx("div", { className: 'dynamic-widget-wallet-header__wallet-info', children: jsx("div", { className: 'dynamic-widget-wallet-header__wallet-loading', children: jsx(Alert, { variant: 'info', icon: jsx(Spinner, { className: 'button__spinner' }), children: t('dyn_creating_wallet.loading_message') }) }) })), primaryWallet ? (jsxs("div", { "data-testid": 'primaryWalletStatus', className: 'dynamic-widget-wallet-header__wallet-info', children: [jsx(SecureEmbeddedWalletCard, { className: 'dynamic-widget-wallet-header__wallet-info__secure-wallet' }), isActionsVisible && (jsxs("div", { className: 'dynamic-widget-wallet-header__wallet-actions', children: [fundingEnabled && (jsx(TypographyButton, { expanded: true, dataTestId: 'buy-crypto-button', buttonPadding: 'small', buttonVariant: 'primary', onClick: () => setShowFunding(true), disabled: !supportsFunding, startSlot: jsx(Icon, { size: 'small', color: 'text-secondary', children: jsx(SvgAdd, {}) }), children: "Buy" })), isSendBalanceEnabled && (jsx(TypographyButton, { expanded: true, dataTestId: 'send-balance-button', buttonPadding: 'small', buttonVariant: 'primary', onClick: handleOnClickSend, startSlot: jsx(Icon, { size: 'small', color: 'text-secondary', children: jsx(SvgSend, {}) }), children: "Send" })), jsx(LinkButton, { connector: primaryWallet.connector })] }))] })) : (jsx(Typography, { className: 'dynamic-widget-wallet-header__email', variant: 'body_normal', weight: 'regular', children: !isLoadingEmbeddedWallet && getUserIdentifier(user) }))] }));
};
React__default.memo(DynamicWidgetWalletHeader);

export { DynamicWidgetWalletHeader };
