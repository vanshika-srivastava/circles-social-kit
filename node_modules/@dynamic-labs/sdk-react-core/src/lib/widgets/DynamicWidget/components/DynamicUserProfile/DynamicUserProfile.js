'use client'
import { jsx } from 'react/jsx-runtime';
import { useMemo, useCallback } from 'react';
import { isMobile } from '@dynamic-labs/utils';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../events/dynamicEvents.js';
import '../../../../../../_virtual/_tslib.js';
import '../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../../utils/constants/colors.js';
import '../../../../utils/constants/values.js';
import '../../../../store/state/loadingAndLifecycle.js';
import { useOnClickOutside } from '../../../../shared/utils/hooks/useOnClickOutside/index.js';
import { widgetModalZIndex } from '../../../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/environmentId.js';
import '../../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../../context/FooterAnimationContext/index.js';
import { ShadowDOM } from '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import { DynamicUserProfileLayout } from '../../../../layout/DynamicUserProfileLayout/DynamicUserProfileLayout.js';
import '../../../../store/state/sendBalances.js';
import '../../../../components/IconButton/IconButton.js';
import 'formik';
import '../../../../components/Input/Input.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../../polyfills.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import { DynamicWidgetVariants } from '../DynamicWidgetVariants/DynamicWidgetVariants.js';
import { DynamicWidgetCard } from '../DynamicWidgetCard/DynamicWidgetCard.js';
import { useWidgetContext } from '../../context/DynamicWidgetContext.js';
import { IsBrowser } from '../../../../components/IsBrowser/IsBrowser.js';
import { useRegisterWidget } from '../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../../context/FundingContext/FundingContext.js';
import '../../../../components/Popper/Popper/Popper.js';
import { PopperProvider } from '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import '../../../DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../store/state/tokenBalances.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import 'qrcode';
import { SandboxIndicatorWrapper } from '../../../../components/SandboxIndicatorWrapper/SandboxIndicatorWrapper.js';

const DynamicUserProfile = ({ variant, }) => {
    const { projectSettings, setShowDynamicUserProfile, showAuthFlow } = useInternalDynamicContext();
    const { setIsOpen, isOpen, widgetRef, inlineControlsRef } = useWidgetContext();
    const _variant = useMemo(() => {
        if (isMobile()) {
            return 'modal';
        }
        return variant;
    }, [variant]);
    // Use the same method to close the widget on outside click as in DynamicWidget
    const closeOnOutsideClick = useCallback((e) => {
        var _a;
        const target = e.composedPath().shift();
        if ((_a = inlineControlsRef.current) === null || _a === void 0 ? void 0 : _a.contains(target))
            return;
        if (variant === 'dropdown' && !showAuthFlow) {
            setShowDynamicUserProfile(false);
        }
    }, [inlineControlsRef, variant, showAuthFlow, setShowDynamicUserProfile]);
    useOnClickOutside(widgetRef, closeOnOutsideClick);
    const shouldRenderUserProfile = Boolean(projectSettings);
    useRegisterWidget('user-profile', shouldRenderUserProfile);
    if (!shouldRenderUserProfile)
        return null;
    return (jsx(IsBrowser, { children: jsx(PopperProvider, { children: jsx(DynamicWidgetVariants, { isOpen: isOpen, setIsOpen: setIsOpen, variant: _variant, zIndex: widgetModalZIndex, children: jsx(SandboxIndicatorWrapper, { children: jsx(DynamicWidgetCard, { ref: widgetRef, children: jsx(DynamicUserProfileLayout, { variant: variant }) }) }) }) }) }));
};
const ShadowedDynamicUserProfile = ({ variant, }) => (jsx(ShadowDOM, { zIndex: widgetModalZIndex, children: jsx(DynamicUserProfile, { variant: variant }) }));

export { DynamicUserProfile, ShadowedDynamicUserProfile };
