'use client'
import { ProviderEnum } from '@dynamic-labs/sdk-api-core';
import '../../constants/values.js';
import '@dynamic-labs/utils';
import '../../../../../_virtual/_tslib.js';
import '@dynamic-labs/multi-wallet';
import '../../../shared/logger.js';
import '../../constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { isProviderEnabled } from '../isProviderEnabled/isProviderEnabled.js';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';

const getEnabledEmbeddedWalletProviders = (projectSettings) => {
    var _a;
    const providers = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) !== null && _a !== void 0 ? _a : [];
    const embeddedWalletProviders = [
        ProviderEnum.Turnkey,
        ProviderEnum.CoinbaseWaas,
        ProviderEnum.MagicLink,
        ProviderEnum.Blocto,
    ];
    return embeddedWalletProviders.filter((provider) => isProviderEnabled(providers, provider));
};

export { getEnabledEmbeddedWalletProviders };
