'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { EmbeddedWalletAuthType } from '@dynamic-labs/sdk-api-core';
import '@dynamic-labs/utils';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../config/ApiEndpoint.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/projectSettings/projectSettings.js';
import { getWalletAuthToken, getEmbeddedWalletBackup, getEmbeddedWalletPasscode } from '../../../data/api/embeddedWallets/embeddedWallets.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';

const getCoinbaseMPCConnectorFetchers = ({ environmentId }) => {
    const fetchAuthToken = () => __awaiter(void 0, void 0, void 0, function* () {
        const token = yield getWalletAuthToken({
            environmentId,
            type: EmbeddedWalletAuthType.Mpc,
        });
        return token || '';
    });
    const fetchBackupCode = () => __awaiter(void 0, void 0, void 0, function* () {
        const token = yield getEmbeddedWalletBackup({
            environmentId,
        });
        return token || '';
    });
    const fetchPasscode = () => __awaiter(void 0, void 0, void 0, function* () {
        const token = yield getEmbeddedWalletPasscode({
            environmentId,
        });
        return token || '';
    });
    return { fetchAuthToken, fetchBackupCode, fetchPasscode };
};

export { getCoinbaseMPCConnectorFetchers };
