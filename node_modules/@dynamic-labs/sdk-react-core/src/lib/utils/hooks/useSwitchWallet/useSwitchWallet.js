'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { isTurnkeyWalletConnector, isEmailWalletConnector } from '@dynamic-labs/wallet-connector-core';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import { useUserWallets } from '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import { useSmartWallets } from '../useSmartWallets/useSmartWallets.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

/**
 * Switch wallet
 *
 * @returns Function to switch wallet
 *
 * @example
 * ```tsx
 * const App = () => {
 *   const userWallets = useUserWallets();
 *   const switchWallet = useSwitchWallet();
 *
 *   return (
 *     <div>
 *       {userWallets.map((wallet) => (
 *         <button
 *           key={wallet.address}
 *           onClick={() => switchWallet(wallet.id)}
 *         >
 *           {wallet.address}
 *         </button>
 *       ))}
 *    </div>
 *  );
 * }
 */
const useSwitchWallet = () => {
    const { setPrimaryWallet, user, primaryWallet } = useInternalDynamicContext();
    const { getEOAWallet } = useSmartWallets();
    const userWallets = useUserWallets();
    return useCallback((walletId) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const wallet = userWallets.find((wallet) => wallet.id === walletId);
        if (!wallet) {
            throw new Error(`Wallet with id ${walletId} not found`);
        }
        if (((_a = wallet.connector) === null || _a === void 0 ? void 0 : _a.key) === 'unknown') {
            throw new Error("Cannot make this wallet active, since this wallet doesn't have a compatible connector on this device.");
        }
        const eoaWallet = getEOAWallet(wallet);
        if (eoaWallet && isTurnkeyWalletConnector(eoaWallet.connector)) {
            const sortedVcs = (_c = (_b = eoaWallet.connector) === null || _b === void 0 ? void 0 : _b.verifiedCredentials) === null || _c === void 0 ? void 0 : _c.reduce((acc, vc) => {
                if (vc.address === eoaWallet.address) {
                    return [vc, ...acc];
                }
                return [...acc, vc];
            }, []);
            if (sortedVcs) {
                eoaWallet.connector.setVerifiedCredentials(sortedVcs);
            }
        }
        const { connector } = wallet;
        const email = (_d = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((verifiedCredential) => verifiedCredential.format === 'email')) === null || _d === void 0 ? void 0 : _d.email;
        if (isEmailWalletConnector(connector) && email) {
            connector.setEmail(email);
        }
        if ((primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain) === 'flow' &&
            connector.connectedChain === 'FLOW') {
            yield connector.endSession();
        }
        setPrimaryWallet(walletId);
    }), [
        getEOAWallet,
        primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.chain,
        setPrimaryWallet,
        user === null || user === void 0 ? void 0 : user.verifiedCredentials,
        userWallets,
    ]);
};

export { useSwitchWallet };
