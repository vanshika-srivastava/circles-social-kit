'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var useDynamicEvents = require('../events/useDynamicEvents/useDynamicEvents.cjs');
require('../../../context/DynamicContext/DynamicContext.cjs');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
var hasPendingMfaAction = require('../../../shared/utils/functions/hasPendingMfaAction/hasPendingMfaAction.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../events/dynamicEvents.cjs');
var VerificationContext = require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
var useUserAuth = require('../useUserAuth/useUserAuth.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
var useUserUpdateRequest = require('../useUserUpdateRequest/useUserUpdateRequest.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useSyncOnboardingFlow = ({ handler: headlessHandler, } = {}) => {
    const { setShowAuthFlow, userWithMissingInfo, sdkHasLoaded, setSelectedWalletConnectorKey, } = useInternalDynamicContext.useInternalDynamicContext();
    const { setView } = ViewContext.useViewContext();
    const { updateUser } = useUserUpdateRequest.useUserUpdateRequestInternal({
        validationSchemaStripUnknown: false,
    });
    const { completeAuth, handleAuthError } = useUserAuth.useUserAuth({});
    const { displayedDestination: formattedPhone } = VerificationContext.useVerification();
    const triggeredOnboarding = React.useRef(false);
    useDynamicEvents.useInternalDynamicEvents('logout', () => {
        triggeredOnboarding.current = false;
    });
    // this is used to trigger onboarding flow
    // either by headless or dynamic widget
    // it will be triggered when user has missing fields
    // either on login or refreshing the page
    React.useEffect(() => {
        var _a;
        const handleHeadlessOnboarding = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            var _b;
            if (!headlessHandler || !((_b = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) === null || _b === void 0 ? void 0 : _b.length)) {
                return;
            }
            triggeredOnboarding.current = true;
            try {
                const missingFieldsRequestInput = userWithMissingInfo.missingFields.map((field) => ({
                    isCustom: field.type === 'custom',
                    key: field.name,
                    label: field.label,
                    required: field.required,
                }));
                const onboardingResponse = yield headlessHandler(missingFieldsRequestInput);
                const userFields = {};
                const customFields = Object.assign({}, userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata);
                onboardingResponse.forEach((field) => {
                    if (field.isCustom) {
                        customFields[field.key] = field.value;
                    }
                    else {
                        userFields[field.key] = field.value;
                    }
                });
                yield completeAuth({
                    updateJwtFunction: () => _tslib.__awaiter(void 0, void 0, void 0, function* () { return updateUser(Object.assign(Object.assign({}, userFields), { metadata: customFields })); }),
                });
            }
            catch (error) {
                logger.logger.error('Error handling user onboarding', error);
                handleAuthError(error, {});
            }
        });
        const handleOnboarding = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            triggeredOnboarding.current = true;
            setShowAuthFlow(true);
            const lastVerifiedCredential = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.verifiedCredentials.find((vc) => vc.id === (userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.lastVerifiedCredentialId));
            if (lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.walletName) {
                setSelectedWalletConnectorKey(lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.walletName);
            }
            switch (lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.format) {
                case sdkApiCore.JwtVerifiedCredentialFormatEnum.Email:
                case sdkApiCore.JwtVerifiedCredentialFormatEnum.Oauth:
                    setView('collect-user-data-login-no-wallet', {
                        userIdentification: 'email',
                    });
                    break;
                case sdkApiCore.JwtVerifiedCredentialFormatEnum.PhoneNumber:
                    setView('collect-user-data-login-no-wallet', {
                        userIdentification: 'phoneNumber',
                        userIdentificationOverride: formattedPhone,
                    });
                    break;
                default:
                    setView('collect-user-data');
            }
        });
        if (!sdkHasLoaded ||
            triggeredOnboarding.current ||
            !((_a = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) === null || _a === void 0 ? void 0 : _a.length) ||
            hasPendingMfaAction.hasPendingMfaAction(userWithMissingInfo)) {
            return;
        }
        if (headlessHandler) {
            handleHeadlessOnboarding();
            return;
        }
        handleOnboarding();
        return;
    }, [
        sdkHasLoaded,
        userWithMissingInfo,
        headlessHandler,
        completeAuth,
        updateUser,
        setShowAuthFlow,
        setView,
        formattedPhone,
        handleAuthError,
        setSelectedWalletConnectorKey,
    ]);
};

exports.useSyncOnboardingFlow = useSyncOnboardingFlow;
