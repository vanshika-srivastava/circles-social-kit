'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useRef, useEffect } from 'react';
import { JwtVerifiedCredentialFormatEnum } from '@dynamic-labs/sdk-api-core';
import { useInternalDynamicEvents } from '../events/useDynamicEvents/useDynamicEvents.js';
import '../../../context/DynamicContext/DynamicContext.js';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../constants/colors.js';
import '../../constants/values.js';
import { hasPendingMfaAction } from '../../../shared/utils/functions/hasPendingMfaAction/hasPendingMfaAction.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../events/dynamicEvents.js';
import { useVerification } from '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import { useUserAuth } from '../useUserAuth/useUserAuth.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import { useUserUpdateRequestInternal } from '../useUserUpdateRequest/useUserUpdateRequest.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useSyncOnboardingFlow = ({ handler: headlessHandler, } = {}) => {
    const { setShowAuthFlow, userWithMissingInfo, sdkHasLoaded, setSelectedWalletConnectorKey, } = useInternalDynamicContext();
    const { setView } = useViewContext();
    const { updateUser } = useUserUpdateRequestInternal({
        validationSchemaStripUnknown: false,
    });
    const { completeAuth, handleAuthError } = useUserAuth({});
    const { displayedDestination: formattedPhone } = useVerification();
    const triggeredOnboarding = useRef(false);
    useInternalDynamicEvents('logout', () => {
        triggeredOnboarding.current = false;
    });
    // this is used to trigger onboarding flow
    // either by headless or dynamic widget
    // it will be triggered when user has missing fields
    // either on login or refreshing the page
    useEffect(() => {
        var _a;
        const handleHeadlessOnboarding = () => __awaiter(void 0, void 0, void 0, function* () {
            var _b;
            if (!headlessHandler || !((_b = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) === null || _b === void 0 ? void 0 : _b.length)) {
                return;
            }
            triggeredOnboarding.current = true;
            try {
                const missingFieldsRequestInput = userWithMissingInfo.missingFields.map((field) => ({
                    isCustom: field.type === 'custom',
                    key: field.name,
                    label: field.label,
                    required: field.required,
                }));
                const onboardingResponse = yield headlessHandler(missingFieldsRequestInput);
                const userFields = {};
                const customFields = Object.assign({}, userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata);
                onboardingResponse.forEach((field) => {
                    if (field.isCustom) {
                        customFields[field.key] = field.value;
                    }
                    else {
                        userFields[field.key] = field.value;
                    }
                });
                yield completeAuth({
                    updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () { return updateUser(Object.assign(Object.assign({}, userFields), { metadata: customFields })); }),
                });
            }
            catch (error) {
                logger.error('Error handling user onboarding', error);
                handleAuthError(error, {});
            }
        });
        const handleOnboarding = () => __awaiter(void 0, void 0, void 0, function* () {
            triggeredOnboarding.current = true;
            setShowAuthFlow(true);
            const lastVerifiedCredential = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.verifiedCredentials.find((vc) => vc.id === (userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.lastVerifiedCredentialId));
            if (lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.walletName) {
                setSelectedWalletConnectorKey(lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.walletName);
            }
            switch (lastVerifiedCredential === null || lastVerifiedCredential === void 0 ? void 0 : lastVerifiedCredential.format) {
                case JwtVerifiedCredentialFormatEnum.Email:
                case JwtVerifiedCredentialFormatEnum.Oauth:
                    setView('collect-user-data-login-no-wallet', {
                        userIdentification: 'email',
                    });
                    break;
                case JwtVerifiedCredentialFormatEnum.PhoneNumber:
                    setView('collect-user-data-login-no-wallet', {
                        userIdentification: 'phoneNumber',
                        userIdentificationOverride: formattedPhone,
                    });
                    break;
                default:
                    setView('collect-user-data');
            }
        });
        if (!sdkHasLoaded ||
            triggeredOnboarding.current ||
            !((_a = userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.missingFields) === null || _a === void 0 ? void 0 : _a.length) ||
            hasPendingMfaAction(userWithMissingInfo)) {
            return;
        }
        if (headlessHandler) {
            handleHeadlessOnboarding();
            return;
        }
        handleOnboarding();
        return;
    }, [
        sdkHasLoaded,
        userWithMissingInfo,
        headlessHandler,
        completeAuth,
        updateUser,
        setShowAuthFlow,
        setView,
        formattedPhone,
        handleAuthError,
        setSelectedWalletConnectorKey,
    ]);
};

export { useSyncOnboardingFlow };
