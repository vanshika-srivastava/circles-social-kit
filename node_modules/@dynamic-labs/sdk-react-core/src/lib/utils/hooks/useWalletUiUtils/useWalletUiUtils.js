'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { useRef, useCallback, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../events/dynamicEvents.js';
import '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import { useConfirmationModal } from '../useConfirmationModal/useConfirmationModal.js';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import '../../../store/state/tokenBalances.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import 'react-dom';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import { CreatePasswordModal } from '../../../modals/CreatePasswordModal/CreatePasswordModal.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { EnterPasswordModal } from '../../../modals/EnterPasswordModal/EnterPasswordModal.js';
import { SignMessageConfirmationModal } from '../../../modals/SignMessageConfirmationModal/SignMessageConfirmationModal.js';
import { SyncWalletPromptModal } from '../../../modals/SyncWalletPromptModal/SyncWalletPromptModal.js';
import { TransactionConfirmationModal } from '../../../modals/TransactionConfirmationModal/TransactionConfirmationModal.js';

const useWalletUiUtils = ({ appLogoUrl, appName, hideEmbeddedWalletTransactionUIs = false, }) => {
    const confirmationStateRef = useRef('enabled');
    const { t } = useTranslation();
    const { modal: sendTransactionModal, open: openSendTransaction } = useConfirmationModal({
        elementId: 'dynamic-send-transaction',
    });
    const { modal: signMessageModal, open: openSignMessage } = useConfirmationModal({
        elementId: 'dynamic-sign-message',
    });
    const { modal: enterPasswordModal, open: openEnterPassword } = useConfirmationModal({
        elementId: 'dynamic-enter-password',
    });
    const { modal: createPasswordModal, open: openCreatePassword } = useConfirmationModal({
        elementId: 'dynamic-create-password',
    });
    const { modal: syncWalletPromptModal, open: openSyncWalletPrompt } = useConfirmationModal({
        elementId: 'dynamic-sync-wallet',
    });
    const shouldConfirmAction = useCallback(() => {
        if (confirmationStateRef.current === 'disabled') {
            confirmationStateRef.current = 'enabled';
            return false;
        }
        return true;
    }, [confirmationStateRef]);
    const signMessage = useCallback((_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, message, handler }) {
        // prevent the modal from opening itself again
        if (!shouldConfirmAction())
            return handler();
        return openSignMessage((resolve, reject) => (jsx(SignMessageConfirmationModal, { appLogoUrl: appLogoUrl, appName: appName, message: message, handler: handler, onSignMessage: resolve, onReject: reject, hideModal: hideEmbeddedWalletTransactionUIs &&
                !(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.isGlobalTransaction) }))).then((signedMessage) => __awaiter(void 0, void 0, void 0, function* () {
            if (signedMessage === 'callHandlerOutsideModal')
                return handler();
            else
                return signedMessage;
        }));
    }), [
        appLogoUrl,
        appName,
        hideEmbeddedWalletTransactionUIs,
        openSignMessage,
        shouldConfirmAction,
    ]);
    const sendTransaction = useCallback((walletConnector, transaction) => __awaiter(void 0, void 0, void 0, function* () {
        // prevent the modal from opening itself again
        if (!shouldConfirmAction())
            return transaction.submit();
        return openSendTransaction((resolve, reject) => (jsx(TransactionConfirmationModal, { copykey: 'dyn_send_transaction.confirmation.title', title: t('dyn_send_transaction.confirmation.title'), transaction: transaction, onTransactionResponseSuccess: resolve, onReject: reject, walletConnector: walletConnector, hideModal: hideEmbeddedWalletTransactionUIs &&
                !(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.isGlobalTransaction) }))).then((signedTransaction) => __awaiter(void 0, void 0, void 0, function* () {
            if (signedTransaction === 'callHandlerOutsideModal')
                return transaction.submit();
            else
                return signedTransaction;
        }));
    }), [
        hideEmbeddedWalletTransactionUIs,
        openSendTransaction,
        shouldConfirmAction,
        t,
    ]);
    const enterPassword = useCallback((_b) => __awaiter(void 0, [_b], void 0, function* ({ handler, closeView = true }) {
        return openEnterPassword((resolve, reject) => (jsx(EnterPasswordModal, { handler: handler, onResolve: resolve, onReject: reject, closeView: closeView })));
    }), [openEnterPassword]);
    const createPassword = useCallback((_c) => __awaiter(void 0, [_c], void 0, function* ({ closeView = true }) {
        return openCreatePassword((resolve, reject) => (jsx(CreatePasswordModal, { onResolve: resolve, onReject: reject, closeView: closeView })));
    }), [openCreatePassword]);
    const syncWallet = useCallback((_d) => __awaiter(void 0, [_d], void 0, function* ({ walletConnector, activeAddress, expectedAddress }) {
        yield openSyncWalletPrompt((resolve, reject) => (jsx(SyncWalletPromptModal, { onResolve: resolve, onReject: reject, connector: walletConnector, expectedAddress: expectedAddress, activeAddress: activeAddress })));
    }), [openSyncWalletPrompt]);
    const disabledConfirmationOnce = useCallback(() => {
        confirmationStateRef.current = 'disabled';
    }, []);
    const walletUiUtils = useMemo(() => ({
        createPassword,
        disabledConfirmationOnce,
        enterPassword,
        sendTransaction,
        signMessage,
        syncWallet,
    }), [
        signMessage,
        disabledConfirmationOnce,
        sendTransaction,
        enterPassword,
        createPassword,
        syncWallet,
    ]);
    return useMemo(() => [
        signMessageModal ||
            sendTransactionModal ||
            enterPasswordModal ||
            createPasswordModal ||
            syncWalletPromptModal,
        walletUiUtils,
    ], [
        signMessageModal,
        sendTransactionModal,
        enterPasswordModal,
        createPasswordModal,
        syncWalletPromptModal,
        walletUiUtils,
    ]);
};

export { useWalletUiUtils };
