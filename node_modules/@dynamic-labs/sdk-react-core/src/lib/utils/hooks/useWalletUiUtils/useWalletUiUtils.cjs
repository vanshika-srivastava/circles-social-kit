'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../events/dynamicEvents.cjs');
require('@dynamic-labs/utils');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
var useConfirmationModal = require('../useConfirmationModal/useConfirmationModal.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('react-dom');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
var CreatePasswordModal = require('../../../modals/CreatePasswordModal/CreatePasswordModal.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var EnterPasswordModal = require('../../../modals/EnterPasswordModal/EnterPasswordModal.cjs');
var SignMessageConfirmationModal = require('../../../modals/SignMessageConfirmationModal/SignMessageConfirmationModal.cjs');
var SyncWalletPromptModal = require('../../../modals/SyncWalletPromptModal/SyncWalletPromptModal.cjs');
var TransactionConfirmationModal = require('../../../modals/TransactionConfirmationModal/TransactionConfirmationModal.cjs');

const useWalletUiUtils = ({ appLogoUrl, appName, hideEmbeddedWalletTransactionUIs = false, }) => {
    const confirmationStateRef = React.useRef('enabled');
    const { t } = reactI18next.useTranslation();
    const { modal: sendTransactionModal, open: openSendTransaction } = useConfirmationModal.useConfirmationModal({
        elementId: 'dynamic-send-transaction',
    });
    const { modal: signMessageModal, open: openSignMessage } = useConfirmationModal.useConfirmationModal({
        elementId: 'dynamic-sign-message',
    });
    const { modal: enterPasswordModal, open: openEnterPassword } = useConfirmationModal.useConfirmationModal({
        elementId: 'dynamic-enter-password',
    });
    const { modal: createPasswordModal, open: openCreatePassword } = useConfirmationModal.useConfirmationModal({
        elementId: 'dynamic-create-password',
    });
    const { modal: syncWalletPromptModal, open: openSyncWalletPrompt } = useConfirmationModal.useConfirmationModal({
        elementId: 'dynamic-sync-wallet',
    });
    const shouldConfirmAction = React.useCallback(() => {
        if (confirmationStateRef.current === 'disabled') {
            confirmationStateRef.current = 'enabled';
            return false;
        }
        return true;
    }, [confirmationStateRef]);
    const signMessage = React.useCallback((_a) => _tslib.__awaiter(void 0, [_a], void 0, function* ({ walletConnector, message, handler }) {
        // prevent the modal from opening itself again
        if (!shouldConfirmAction())
            return handler();
        return openSignMessage((resolve, reject) => (jsxRuntime.jsx(SignMessageConfirmationModal.SignMessageConfirmationModal, { appLogoUrl: appLogoUrl, appName: appName, message: message, handler: handler, onSignMessage: resolve, onReject: reject, hideModal: hideEmbeddedWalletTransactionUIs &&
                !(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.isGlobalTransaction) }))).then((signedMessage) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            if (signedMessage === 'callHandlerOutsideModal')
                return handler();
            else
                return signedMessage;
        }));
    }), [
        appLogoUrl,
        appName,
        hideEmbeddedWalletTransactionUIs,
        openSignMessage,
        shouldConfirmAction,
    ]);
    const sendTransaction = React.useCallback((walletConnector, transaction) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        // prevent the modal from opening itself again
        if (!shouldConfirmAction())
            return transaction.submit();
        return openSendTransaction((resolve, reject) => (jsxRuntime.jsx(TransactionConfirmationModal.TransactionConfirmationModal, { copykey: 'dyn_send_transaction.confirmation.title', title: t('dyn_send_transaction.confirmation.title'), transaction: transaction, onTransactionResponseSuccess: resolve, onReject: reject, walletConnector: walletConnector, hideModal: hideEmbeddedWalletTransactionUIs &&
                !(walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.isGlobalTransaction) }))).then((signedTransaction) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            if (signedTransaction === 'callHandlerOutsideModal')
                return transaction.submit();
            else
                return signedTransaction;
        }));
    }), [
        hideEmbeddedWalletTransactionUIs,
        openSendTransaction,
        shouldConfirmAction,
        t,
    ]);
    const enterPassword = React.useCallback((_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ handler, closeView = true }) {
        return openEnterPassword((resolve, reject) => (jsxRuntime.jsx(EnterPasswordModal.EnterPasswordModal, { handler: handler, onResolve: resolve, onReject: reject, closeView: closeView })));
    }), [openEnterPassword]);
    const createPassword = React.useCallback((_c) => _tslib.__awaiter(void 0, [_c], void 0, function* ({ closeView = true }) {
        return openCreatePassword((resolve, reject) => (jsxRuntime.jsx(CreatePasswordModal.CreatePasswordModal, { onResolve: resolve, onReject: reject, closeView: closeView })));
    }), [openCreatePassword]);
    const syncWallet = React.useCallback((_d) => _tslib.__awaiter(void 0, [_d], void 0, function* ({ walletConnector, activeAddress, expectedAddress }) {
        yield openSyncWalletPrompt((resolve, reject) => (jsxRuntime.jsx(SyncWalletPromptModal.SyncWalletPromptModal, { onResolve: resolve, onReject: reject, connector: walletConnector, expectedAddress: expectedAddress, activeAddress: activeAddress })));
    }), [openSyncWalletPrompt]);
    const disabledConfirmationOnce = React.useCallback(() => {
        confirmationStateRef.current = 'disabled';
    }, []);
    const walletUiUtils = React.useMemo(() => ({
        createPassword,
        disabledConfirmationOnce,
        enterPassword,
        sendTransaction,
        signMessage,
        syncWallet,
    }), [
        signMessage,
        disabledConfirmationOnce,
        sendTransaction,
        enterPassword,
        createPassword,
        syncWallet,
    ]);
    return React.useMemo(() => [
        signMessageModal ||
            sendTransactionModal ||
            enterPasswordModal ||
            createPasswordModal ||
            syncWalletPromptModal,
        walletUiUtils,
    ], [
        signMessageModal,
        sendTransactionModal,
        enterPasswordModal,
        createPasswordModal,
        syncWalletPromptModal,
        walletUiUtils,
    ]);
};

exports.useWalletUiUtils = useWalletUiUtils;
