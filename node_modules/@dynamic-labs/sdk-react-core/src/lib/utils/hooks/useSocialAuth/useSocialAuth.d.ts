/// <reference types="react" />
import { ProviderEnum } from '@dynamic-labs/sdk-api-core';
import { SocialOAuthError, SocialOAuthErrorCode } from '@dynamic-labs/types';
export type SocialAuthMode = 'link' | 'signin' | 'unlink';
type UseSocialAuthProps = {
    sessionTimeout: number;
    onSettled?: () => void;
    onError?: () => void;
    onFarcasterUrl?: (url: string) => void;
};
export type ConnectSocialAccountProps = {
    authMode: SocialAuthMode;
    provider: ProviderEnum;
    validator?: (provider: ProviderEnum) => boolean;
    captchaToken?: string;
    redirectUrl?: string;
    telegramAuthToken?: string;
};
export declare const useSocialAuth: ({ sessionTimeout, onSettled, onError, onFarcasterUrl, }: UseSocialAuthProps) => {
    readonly checkValidProvider: (provider: ProviderEnum, authMode: SocialAuthMode) => boolean;
    readonly completeConnection: ({ authMode, provider, state, authCode, captchaToken, verifier, telegramAuthToken, }: {
        authMode: SocialAuthMode;
        provider: ProviderEnum;
        state: string;
        captchaToken?: string | undefined;
        authCode?: string | undefined;
        verifier?: string | undefined;
        telegramAuthToken?: string | undefined;
    }) => Promise<void>;
    readonly connectSocialAccount: ({ authMode, provider, validator, captchaToken, redirectUrl, telegramAuthToken, }: ConnectSocialAccountProps) => Promise<void>;
    readonly error: SocialOAuthError | undefined;
    readonly handleError: (provider: ProviderEnum | undefined, code: SocialOAuthErrorCode, message: string, options?: {
        raiseAuthFailure?: boolean | undefined;
    } | undefined) => void;
    readonly isProcessing: boolean;
    readonly setError: import("react").Dispatch<import("react").SetStateAction<SocialOAuthError | undefined>>;
    readonly setIsProcessing: import("react").Dispatch<import("react").SetStateAction<boolean>>;
};
export {};
