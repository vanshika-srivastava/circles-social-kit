'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
var isAllowedToLinkWallet = require('../../functions/isAllowedToLinkWallet/isAllowedToLinkWallet.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
var useIsLoggedIn = require('../useIsLoggedIn/useIsLoggedIn.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
var useMfaModals = require('../useMfaModals/useMfaModals.cjs');
require('../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

/**
 * this hook wraps `setShowAuthFlow`. WalletConnect requires initialization
 * before we can connect a wallet. The goal here is that when a user clicks
 * on the "Log in or sign up" button, the SDK starts initializing WalletConnect
 * and will prime it for connection. This way, when the user clicks on the
 * "Connect" button in the WalletConnect modal, there is a uri ready to go
 * to immediately trigger the deep link on mobile
 */
const useDynamicModals = () => {
    const { projectSettings, user, multiWallet, setShowAuthFlow } = useInternalDynamicContext.useInternalDynamicContext();
    const isLoggedIn = useIsLoggedIn.useIsLoggedIn();
    const { setView } = ViewContext.useViewContext();
    const canLink = isAllowedToLinkWallet.isAllowedToLinkWallet(projectSettings, user === null || user === void 0 ? void 0 : user.verifiedCredentials, multiWallet);
    const { setShowMfaChooseType, setShowMfaEnterBackupCodes, setShowMfaQRCode, setShowMfaViewBackupCodes, setShowOTPVerification, } = useMfaModals.useMfaModals();
    const setSetShowLinkNewWalletModalWithInit = React.useCallback((value) => {
        if (value) {
            // Do not change state if the user is already signed in and multi-wallet is not enabled
            if (!isLoggedIn) {
                logger.logger.warn('setShowLinkNewWalletModal was called while the user was not logged in. This results in a no-op. To log the user in, use setShowAuthFlow. For more information, see: https://docs.dynamic.xyz/react-sdk/hooks/usedynamiccontext');
                return;
            }
            if (!canLink) {
                logger.logger.warn('setShowLinkNewWalletModal was called but the user is not allowed to link a wallet. This results in a no-op. Please double check that multi-wallet is enabled in the dashboard. For more information, see: https://docs.dynamic.xyz/branded-wallets/multi-wallet');
                return;
            }
            setView('multi-wallet-wallet-list');
        }
        setShowAuthFlow(value, {
            emitCancelAuth: true,
            ignoreIfIsEmbeddedWidget: true,
            initializeWalletConnect: true,
            performMultiWalletChecks: false,
        });
    }, [canLink, isLoggedIn, setShowAuthFlow, setView]);
    return {
        setShowLinkNewWalletModal: setSetShowLinkNewWalletModalWithInit,
        setShowMfaChooseType,
        setShowMfaEnterBackupCodes,
        setShowMfaQRCode,
        setShowMfaViewBackupCodes,
        setShowOTPVerification,
    };
};

exports.useDynamicModals = useDynamicModals;
