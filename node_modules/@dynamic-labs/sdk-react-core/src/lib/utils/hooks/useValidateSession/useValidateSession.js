'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { logger } from '../../../shared/logger.js';
import { useEffectOnce } from '../../../shared/utils/hooks/useEffectOnce/useEffectOnce.js';
import { setLoadingAndLifecycle } from '../../../store/state/loadingAndLifecycle.js';
import { useInternalDynamicEvents } from '../events/useDynamicEvents/useDynamicEvents.js';
import { handleStoreAndEnvironmentMismatch } from './handleStoreAndEnvironmentMismatch/handleStoreAndEnvironmentMismatch.js';
import { handleUserDataOutOfSync } from './handleUserDataOutOfSync/handleUserDataOutOfSync.js';

const useValidateSession = ({ environmentId, handleLogOut }) => {
    const logout = useCallback(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (reason, params) => __awaiter(void 0, void 0, void 0, function* () {
        logger.debug(`Logging out due to invalid session - Reason: ${reason}`, Object.assign({}, params));
        return handleLogOut();
    }), [handleLogOut]);
    const validateSession = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        const params = { environmentId, logout };
        yield Promise.all([
            handleStoreAndEnvironmentMismatch(params),
            handleUserDataOutOfSync(params),
        ]);
        // Regardless of whether we logged out or not, session validation is now complete
        setLoadingAndLifecycle({ sessionValidation: true });
    }), [environmentId, logout]);
    useEffectOnce(() => {
        validateSession();
    });
    useInternalDynamicEvents('triggerSessionValidation', validateSession);
};

export { useValidateSession };
