'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var logger = require('../../../shared/logger.cjs');
var useEffectOnce = require('../../../shared/utils/hooks/useEffectOnce/useEffectOnce.cjs');
var loadingAndLifecycle = require('../../../store/state/loadingAndLifecycle.cjs');
var useDynamicEvents = require('../events/useDynamicEvents/useDynamicEvents.cjs');
var handleStoreAndEnvironmentMismatch = require('./handleStoreAndEnvironmentMismatch/handleStoreAndEnvironmentMismatch.cjs');
var handleUserDataOutOfSync = require('./handleUserDataOutOfSync/handleUserDataOutOfSync.cjs');

const useValidateSession = ({ environmentId, handleLogOut }) => {
    const logout = React.useCallback(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (reason, params) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        logger.logger.debug(`Logging out due to invalid session - Reason: ${reason}`, Object.assign({}, params));
        return handleLogOut();
    }), [handleLogOut]);
    const validateSession = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const params = { environmentId, logout };
        yield Promise.all([
            handleStoreAndEnvironmentMismatch.handleStoreAndEnvironmentMismatch(params),
            handleUserDataOutOfSync.handleUserDataOutOfSync(params),
        ]);
        // Regardless of whether we logged out or not, session validation is now complete
        loadingAndLifecycle.setLoadingAndLifecycle({ sessionValidation: true });
    }), [environmentId, logout]);
    useEffectOnce.useEffectOnce(() => {
        validateSession();
    });
    useDynamicEvents.useInternalDynamicEvents('triggerSessionValidation', validateSession);
};

exports.useValidateSession = useValidateSession;
