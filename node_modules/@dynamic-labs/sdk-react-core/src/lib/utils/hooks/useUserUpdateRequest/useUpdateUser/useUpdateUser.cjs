'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../../constants/colors.cjs');
require('../../../constants/values.cjs');
require('../../../../store/state/loadingAndLifecycle.cjs');
require('../../../../shared/consts/index.cjs');
require('../../../../events/dynamicEvents.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../store/state/user/user.cjs');
require('../../../../locale/locale.cjs');
var user = require('../../../../data/api/user/user.cjs');
require('../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
var VerificationContext = require('../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../context/WalletContext/WalletContext.cjs');
require('../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
var useHandleVerificationRequired = require('../../useHandleVerificationRequired/useHandleVerificationRequired.cjs');
require('@dynamic-labs/types');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../views/CollectUserDataView/useFields.cjs');
var FieldsStateContext = require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
var userFieldsSchema = require('./userFieldsSchema.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../store/state/environmentId.cjs');
require('../../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../store/state/sendBalances.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../../polyfills.cjs');
require('../../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../../context/FundingContext/FundingContext.cjs');
require('../../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useUpdateUser = (validationSchemaStripUnknown) => {
    const { environmentId, userWithMissingInfo, setCallback } = useInternalDynamicContext.useInternalDynamicContext();
    const { setRetryData } = VerificationContext.useVerification();
    const { selectedPhoneCountry } = FieldsStateContext.useFieldsState();
    const handleVerificationRequired = useHandleVerificationRequired.useHandleVerificationRequired();
    const updateUser = React.useCallback((userFields, options) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        // `stripUnknown: true` will automatically strip out any values in the metadata object
        // so we need to pull out the metadata object here and then re-add it after stripping unknown fields
        let { metadata } = userFields;
        // when a user has already logged in but a custom field was added to env, in order to not clear the old fields
        metadata = metadata
            ? Object.assign(Object.assign({}, userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata), metadata) : userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata;
        // we dont add user.metadata from edit profile because it is already in the metadata request for updateUser
        const validatedUserFields = yield userFieldsSchema.userFieldsSchema.validate(userFields, {
            stripUnknown: validationSchemaStripUnknown,
        });
        // If there is a phone number, store it in the retry verification data
        // in case we need to perform sms verification
        if (validatedUserFields.phoneNumber &&
            validatedUserFields.phoneNumber.length > 0 &&
            selectedPhoneCountry.current)
            setRetryData({
                dialCode: selectedPhoneCountry.current.dialCode,
                iso2: selectedPhoneCountry.current.iso2,
                phone: validatedUserFields.phoneNumber,
            });
        const updateUserProfileResponse = yield user.updateUserProfileFields((_a = options === null || options === void 0 ? void 0 : options.userEnvironmentId) !== null && _a !== void 0 ? _a : environmentId, Object.assign(Object.assign({}, validatedUserFields), { metadata }));
        // check if decoded JWT still somehow has missing fields, we can't proceed if it does
        const missingFields = (_b = updateUserProfileResponse.user.missingFields) !== null && _b !== void 0 ? _b : [];
        const requiredVerificationDestination = useHandleVerificationRequired.getVerificationDestination(updateUserProfileResponse.nextView);
        if (requiredVerificationDestination)
            return handleVerificationRequired({
                destination: requiredVerificationDestination,
                missingFields,
                updateUserProfileResponse,
            });
        setCallback('userProfileUpdate');
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: false,
            missingFields,
            updateUserProfileResponse,
        };
    }), [
        userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata,
        validationSchemaStripUnknown,
        selectedPhoneCountry,
        setRetryData,
        environmentId,
        handleVerificationRequired,
        setCallback,
    ]);
    return updateUser;
};

exports.useUpdateUser = useUpdateUser;
