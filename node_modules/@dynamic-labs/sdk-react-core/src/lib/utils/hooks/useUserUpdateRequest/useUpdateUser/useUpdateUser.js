'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import '../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../store/state/loadingAndLifecycle.js';
import '../../../../shared/consts/index.js';
import '../../../../events/dynamicEvents.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import { updateUserProfileFields } from '../../../../data/api/user/user.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import { useVerification } from '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import { useHandleVerificationRequired, getVerificationDestination } from '../../useHandleVerificationRequired/useHandleVerificationRequired.js';
import '@dynamic-labs/types';
import '../../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import { useFieldsState } from '../../../../context/FieldsStateContext/FieldsStateContext.js';
import { userFieldsSchema } from './userFieldsSchema.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/environmentId.js';
import '../../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../../polyfills.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../../context/FundingContext/FundingContext.js';
import '../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useUpdateUser = (validationSchemaStripUnknown) => {
    const { environmentId, userWithMissingInfo, setCallback } = useInternalDynamicContext();
    const { setRetryData } = useVerification();
    const { selectedPhoneCountry } = useFieldsState();
    const handleVerificationRequired = useHandleVerificationRequired();
    const updateUser = useCallback((userFields, options) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        // `stripUnknown: true` will automatically strip out any values in the metadata object
        // so we need to pull out the metadata object here and then re-add it after stripping unknown fields
        let { metadata } = userFields;
        // when a user has already logged in but a custom field was added to env, in order to not clear the old fields
        metadata = metadata
            ? Object.assign(Object.assign({}, userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata), metadata) : userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata;
        // we dont add user.metadata from edit profile because it is already in the metadata request for updateUser
        const validatedUserFields = yield userFieldsSchema.validate(userFields, {
            stripUnknown: validationSchemaStripUnknown,
        });
        // If there is a phone number, store it in the retry verification data
        // in case we need to perform sms verification
        if (validatedUserFields.phoneNumber &&
            validatedUserFields.phoneNumber.length > 0 &&
            selectedPhoneCountry.current)
            setRetryData({
                dialCode: selectedPhoneCountry.current.dialCode,
                iso2: selectedPhoneCountry.current.iso2,
                phone: validatedUserFields.phoneNumber,
            });
        const updateUserProfileResponse = yield updateUserProfileFields((_a = options === null || options === void 0 ? void 0 : options.userEnvironmentId) !== null && _a !== void 0 ? _a : environmentId, Object.assign(Object.assign({}, validatedUserFields), { metadata }));
        // check if decoded JWT still somehow has missing fields, we can't proceed if it does
        const missingFields = (_b = updateUserProfileResponse.user.missingFields) !== null && _b !== void 0 ? _b : [];
        const requiredVerificationDestination = getVerificationDestination(updateUserProfileResponse.nextView);
        if (requiredVerificationDestination)
            return handleVerificationRequired({
                destination: requiredVerificationDestination,
                missingFields,
                updateUserProfileResponse,
            });
        setCallback('userProfileUpdate');
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: false,
            missingFields,
            updateUserProfileResponse,
        };
    }), [
        userWithMissingInfo === null || userWithMissingInfo === void 0 ? void 0 : userWithMissingInfo.metadata,
        validationSchemaStripUnknown,
        selectedPhoneCountry,
        setRetryData,
        environmentId,
        handleVerificationRequired,
        setCallback,
    ]);
    return updateUser;
};

export { useUpdateUser };
