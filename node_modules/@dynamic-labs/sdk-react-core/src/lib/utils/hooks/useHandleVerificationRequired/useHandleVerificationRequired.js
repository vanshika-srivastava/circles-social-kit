'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { NextViewEnum } from '@dynamic-labs/sdk-api-core';
import { VerificationDataCollectionError } from '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { formatPhone } from '../../functions/formatPhone/formatPhone.js';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import { updateUserProfileFields } from '../../../data/api/user/user.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import { useOtpVerificationRequestRaw } from '../authenticationHooks/useOtpVerificationRequest/useOtpVerificationRequest.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import { useVerification } from '../../../context/VerificationContext/VerificationContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import { userFieldsSchema } from '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const getResponseInfo = (response, destination) => {
    var _a, _b, _c, _d, _e, _f, _g;
    if (destination === 'email')
        return {
            displayDestination: (_a = response.emailVerification) === null || _a === void 0 ? void 0 : _a.email,
            verificationUUID: (_b = response.emailVerification) === null || _b === void 0 ? void 0 : _b.verificationUUID,
        };
    return {
        displayDestination: formatPhone('+' +
            ((_d = (_c = response.smsVerification) === null || _c === void 0 ? void 0 : _c.phoneCountryCode) !== null && _d !== void 0 ? _d : '') +
            ((_f = (_e = response.smsVerification) === null || _e === void 0 ? void 0 : _e.phoneNumber) !== null && _f !== void 0 ? _f : '')),
        verificationUUID: (_g = response.smsVerification) === null || _g === void 0 ? void 0 : _g.verificationUUID,
    };
};
const getVerificationDestination = (nextView) => {
    if (nextView === NextViewEnum.VerifyEmail)
        return 'email';
    if (nextView === NextViewEnum.VerifySms)
        return 'sms';
    return undefined;
};
const useHandleVerificationRequired = () => {
    const { setVerificationUUID, setDisplayedDestination } = useVerification();
    const { environmentId } = useInternalDynamicContext();
    const { verifyOtp } = useOtpVerificationRequestRaw();
    const collectNecessaryVerificationData = useCallback((destination, updateUserProfileResponse) => __awaiter(void 0, void 0, void 0, function* () {
        // We just need to make sure we have the emailVerification/smsVerification data
        // If it's already present, use it as is
        if ((destination === 'email' &&
            updateUserProfileResponse.emailVerification) ||
            (destination === 'sms' && updateUserProfileResponse.smsVerification))
            return updateUserProfileResponse;
        const userField = destination === 'email' ? 'email' : 'phoneNumber';
        // If verification is required but we don't have the userField's verification data,
        // make another call to the api to get it
        if (!updateUserProfileResponse.user[userField])
            throw new VerificationDataCollectionError(`missing ${userField} field to perform update`);
        const validatedUserFields = yield userFieldsSchema.validate({
            [userField]: updateUserProfileResponse.user[userField],
        });
        const { emailVerification, smsVerification } = yield updateUserProfileFields(environmentId, validatedUserFields);
        if ((destination === 'email' && !emailVerification) ||
            (destination === 'sms' && !smsVerification))
            throw new VerificationDataCollectionError(`could not get ${destination} verification data from api`);
        return Object.assign(Object.assign({}, updateUserProfileResponse), { emailVerification,
            smsVerification });
    }), [environmentId]);
    const handleVerificationRequired = useCallback((_a) => __awaiter(void 0, [_a], void 0, function* ({ updateUserProfileResponse: updateUserProfileResponseRaw, missingFields, destination, }) {
        const updateUserProfileResponse = yield collectNecessaryVerificationData(destination, updateUserProfileResponseRaw);
        // Use this information in the Verification view
        const { displayDestination, verificationUUID } = getResponseInfo(updateUserProfileResponse, destination);
        setDisplayedDestination(displayDestination);
        setVerificationUUID(verificationUUID);
        const scopedVerify = (verificationToken) => __awaiter(void 0, void 0, void 0, function* () {
            return verifyOtp(handleVerificationRequired, verificationToken, destination, verificationUUID);
        });
        if (destination === 'email')
            return {
                isEmailVerificationRequired: true,
                isSmsVerificationRequired: false,
                missingFields,
                updateUserProfileResponse,
                verifyOtp: scopedVerify,
            };
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: true,
            missingFields,
            updateUserProfileResponse,
            verifyOtp: scopedVerify,
        };
    }), [
        collectNecessaryVerificationData,
        setDisplayedDestination,
        setVerificationUUID,
        verifyOtp,
    ]);
    return handleVerificationRequired;
};

export { getResponseInfo, getVerificationDestination, useHandleVerificationRequired };
