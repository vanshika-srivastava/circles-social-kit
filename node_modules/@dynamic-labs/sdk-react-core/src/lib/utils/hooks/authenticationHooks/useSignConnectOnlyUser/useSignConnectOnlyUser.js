'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { isEmbeddedConnector, isBloctoConnector } from '@dynamic-labs/wallet-connector-core';
import 'react';
import '../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import { useViewContext } from '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../store/state/loadingAndLifecycle.js';
import '../../../../shared/consts/index.js';
import '../../../../events/dynamicEvents.js';
import { useCaptchaContext } from '../../../../context/CaptchaContext/CaptchaContext.js';
import { useErrorContext } from '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import { useVerifyWallet } from '../../useVerifyWallet/useVerifyWallet.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import '../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/LoadingContext/LoadingContext.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/environmentId.js';
import '../../../../store/state/walletConnectorOptions.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../../polyfills.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../../context/FundingContext/FundingContext.js';
import '../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useSignConnectOnlyUser = () => {
    const { setView } = useViewContext();
    const { setErrorMessage } = useErrorContext();
    const { getCaptchaToken } = useCaptchaContext();
    const { connectWallet, consumeNonce, displaySiweStatement, projectSettings, environmentId, setIsSingleWalletAccount, setShowAuthFlow, setSelectedWalletConnectorKey, walletUiUtils, } = useInternalDynamicContext();
    const verifyWallet = useVerifyWallet({
        consumeNonce,
        displaySiweStatement,
        environmentId,
        projectSettings,
        setIsSingleWalletAccount,
    });
    return (_a) => __awaiter(void 0, [_a], void 0, function* ({ walletConnector, getAddressOpts = undefined }) {
        try {
            if (isEmbeddedConnector(walletConnector) &&
                !isBloctoConnector(walletConnector)) {
                walletUiUtils.disabledConfirmationOnce();
            }
            // Prepare states to show the pending signature view (without back button)
            // We need this because in connect-only we don't want to show wallet-list
            // We don't want to show the back button in the pending signature view
            // because we don't want to go back to the wallet-list
            setSelectedWalletConnectorKey(walletConnector.key);
            setView('pending-signature-without-back-button');
            setShowAuthFlow(true);
            // Wallet should be already connected at this point
            // We just need to verify it
            const connectionResult = yield connectWallet(walletConnector, getAddressOpts);
            if (!(connectionResult === null || connectionResult === void 0 ? void 0 : connectionResult.address)) {
                return;
            }
            yield verifyWallet({
                captchaToken: getCaptchaToken(),
                publicWalletAddress: connectionResult.address,
                walletConnector,
            });
        }
        catch (err) {
            logger.debug(err);
            setErrorMessage(err.toString());
            setShowAuthFlow(false, { emitCancelAuth: true });
            return;
        }
    });
};

export { useSignConnectOnlyUser };
