'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
var utils = require('@dynamic-labs/utils');
require('../../../../events/dynamicEvents.cjs');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../constants/colors.cjs');
require('../../../constants/values.cjs');
require('../../../../store/state/loadingAndLifecycle.cjs');
require('../../../../shared/consts/index.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../context/ErrorContext/ErrorContext.cjs');
var errors = require('../../../constants/errors.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var email = require('../../../../data/api/email/email.cjs');
var storeAuthTokenAndUser = require('../../../../store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.cjs');
require('../../../../store/state/user/user.cjs');
require('../../../../config/ApiEndpoint.cjs');
var sms = require('../../../../data/api/sms/sms.cjs');
require('../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
var VerificationContext = require('../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../context/WalletContext/WalletContext.cjs');
require('../../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
var useHandleVerificationRequired = require('../../useHandleVerificationRequired/useHandleVerificationRequired.cjs');
require('@dynamic-labs/types');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../../views/CollectUserDataView/useFields.cjs');
require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../store/state/environmentId.cjs');
require('../../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../../locale/locale.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../store/state/sendBalances.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../../polyfills.cjs');
require('../../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../../context/FundingContext/FundingContext.cjs');
require('../../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../../store/state/tokenBalances.cjs');

/**
 * Same as useOtpVerificationRequest, but requires you to pass it a handleVerificationRequired method as param.
 * This is to avoid a circular logic issue, as handleVerificationRequired needs to use the logic in this file as well.
 */
const useOtpVerificationRequestRaw = () => {
    const { environmentId, user, userWithMissingInfo } = useInternalDynamicContext.useInternalDynamicContext();
    const { verificationUUID: contextVerificationUUID } = VerificationContext.useVerification();
    const verifyOtp = React.useCallback((handleVerificationRequired, verificationToken, destination, localVerificationUUID) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        if (!user && !userWithMissingInfo)
            throw new utils.DynamicError(errors.USER_NOT_LOGGED_IN);
        // VerificationUUID is saved in the context in case the view changes
        // after a profile update (changing the view from edit profile to verify email)
        if (!localVerificationUUID && !contextVerificationUUID)
            throw new utils.DynamicError('No verification UUID is available');
        const verificationUUID = (localVerificationUUID !== null && localVerificationUUID !== void 0 ? localVerificationUUID : contextVerificationUUID);
        const verify = destination === 'email' ? email.verifyEmail : sms.verifySms;
        const updateSelfResponse = yield verify({
            environmentId,
            verificationToken,
            verificationUUID,
        });
        const updatedUser = updateSelfResponse.user;
        const missingFields = (_a = updatedUser === null || updatedUser === void 0 ? void 0 : updatedUser.missingFields) !== null && _a !== void 0 ? _a : [];
        const requiredVerificationDestination = useHandleVerificationRequired.getVerificationDestination(updateSelfResponse.nextView);
        // If verification is not needed then we can update the user profile immediately.
        storeAuthTokenAndUser.storeAuthTokenAndUser(updateSelfResponse);
        if (requiredVerificationDestination)
            return handleVerificationRequired({
                destination: requiredVerificationDestination,
                missingFields,
                updateUserProfileResponse: updateSelfResponse,
            });
        return {
            isEmailVerificationRequired: false,
            isSmsVerificationRequired: false,
            missingFields,
            updateUserProfileResponse: updateSelfResponse,
        };
    }), [contextVerificationUUID, environmentId, user, userWithMissingInfo]);
    return { verifyOtp };
};
/**
 * Hook to make verifications and already handle nuances like handling additional verifications
 * and setting the user jwt on success
 */
// ATTENTION: THIS IS EXPOSED TO THE PUBLIC!
const useOtpVerificationRequest = () => {
    const handleVerificationRequired = useHandleVerificationRequired.useHandleVerificationRequired();
    const { verifyOtp } = useOtpVerificationRequestRaw();
    return React.useMemo(() => ({
        verifyOtp: (token, destination, verificationUUID) => verifyOtp(handleVerificationRequired, token, destination, verificationUUID),
    }), [handleVerificationRequired, verifyOtp]);
};

exports.useOtpVerificationRequest = useOtpVerificationRequest;
exports.useOtpVerificationRequestRaw = useOtpVerificationRequestRaw;
