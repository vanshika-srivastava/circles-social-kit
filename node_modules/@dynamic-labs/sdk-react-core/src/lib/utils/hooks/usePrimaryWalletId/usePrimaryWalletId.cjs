'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
var localStorage = require('../../constants/localStorage.cjs');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
var useLocalStorage = require('../../../shared/utils/hooks/useLocalStorage/useLocalStorage.cjs');
require('../../../shared/consts/index.cjs');
var primaryWalletIdValidator = require('../useWalletConnectors/utils/primaryWalletIdValidator/primaryWalletIdValidator.cjs');
require('../../../config/ApiEndpoint.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
var wallets = require('../../../data/api/wallets/wallets.cjs');

const usePrimaryWalletId = ({ environmentId, user }) => {
    const [primaryWalletId, setPrimaryWalletIdState, clearPrimaryWalletId] = useLocalStorage.useLocalStorage(localStorage.PRIMARY_WALLET_ID, undefined, primaryWalletIdValidator.primaryWalletIdValidator);
    const setPrimaryWalletId = React.useCallback((walletId) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        setPrimaryWalletIdState(walletId);
        // should only store the selected wallet if the user is authenticated
        if (user) {
            yield wallets.storeSelectedWallet({ environmentId, walletId });
        }
    }), [environmentId, setPrimaryWalletIdState, user]);
    return {
        clearPrimaryWalletId,
        primaryWalletId,
        setPrimaryWalletId,
    };
};

exports.usePrimaryWalletId = usePrimaryWalletId;
