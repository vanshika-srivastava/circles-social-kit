'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import { PRIMARY_WALLET_ID } from '../../constants/localStorage.js';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import { useLocalStorage } from '../../../shared/utils/hooks/useLocalStorage/useLocalStorage.js';
import '../../../shared/consts/index.js';
import { primaryWalletIdValidator } from '../useWalletConnectors/utils/primaryWalletIdValidator/primaryWalletIdValidator.js';
import '../../../config/ApiEndpoint.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import { storeSelectedWallet } from '../../../data/api/wallets/wallets.js';

const usePrimaryWalletId = ({ environmentId, user }) => {
    const [primaryWalletId, setPrimaryWalletIdState, clearPrimaryWalletId] = useLocalStorage(PRIMARY_WALLET_ID, undefined, primaryWalletIdValidator);
    const setPrimaryWalletId = useCallback((walletId) => __awaiter(void 0, void 0, void 0, function* () {
        setPrimaryWalletIdState(walletId);
        // should only store the selected wallet if the user is authenticated
        if (user) {
            yield storeSelectedWallet({ environmentId, walletId });
        }
    }), [environmentId, setPrimaryWalletIdState, user]);
    return {
        clearPrimaryWalletId,
        primaryWalletId,
        setPrimaryWalletId,
    };
};

export { usePrimaryWalletId };
