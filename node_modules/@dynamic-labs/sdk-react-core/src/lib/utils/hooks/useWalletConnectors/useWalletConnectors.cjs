'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var utils = require('@dynamic-labs/utils');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var UserWalletsContext = require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var createLinkedWalletsFromWalletOptions = require('./utils/createLinkedWalletsFromWalletOptions/createLinkedWalletsFromWalletOptions.cjs');
var updateUserWalletsFromLinkedWallets = require('./utils/updateUserWalletsFromLinkedWallets/updateUserWalletsFromLinkedWallets.cjs');

const useWalletConnectors = ({ authMode, connectedWallets, walletConnectorOptions, setMultiWalletWidgetState, primaryWalletId, setPrimaryWalletId, user, canHaveMultipleWalletsConnected, }) => {
    const [showQrcodeModal, setShowQrcodeModal] = React.useState(false);
    const linkedWallets = React.useMemo(() => {
        if (!user) {
            return [];
        }
        return createLinkedWalletsFromWalletOptions.createLinkedWalletsFromWalletOptions({
            primaryWalletId,
            user,
            walletConnectorOptions,
        });
    }, [user, primaryWalletId, walletConnectorOptions]);
    logger.logger.logVerboseTroubleshootingMessage('linkedWallets', linkedWallets);
    const wallets = React.useMemo(() => {
        // Before signing the first message we are using connected wallets list
        // This is because we want the first connected wallet to have events applied by useWalletEventListeners
        // In connect-and-sign mode, events are only applied after the message is signed.
        // This change ensures that events will be applied even before the signature.
        // After signing the message user could be undefined in scenarios like OTP
        if (authMode === 'connect-and-sign' && user) {
            return linkedWallets;
        }
        /**
         * This is to handle users in connect-only who are signing in with social/email
         * with an embedded wallet
         */
        if (authMode === 'connect-only' &&
            linkedWallets.find((wallet) => walletConnectorCore.isEmbeddedConnector(wallet.connector))) {
            return linkedWallets;
        }
        return connectedWallets !== null && connectedWallets !== void 0 ? connectedWallets : [];
    }, [authMode, connectedWallets, linkedWallets, user]);
    logger.logger.logVerboseTroubleshootingMessage('wallets', wallets);
    /**
     * This useEffect is temporary.
     * While the wallet connectors don't use the event emitter, we need to manually
     * initialize the bridge between the old event listeners and the new event emitter.
     * When the wallet connectors are migrated to the new event emitter, there will be no
     * need to initialize or teardown event listeners, then we can remove this useEffect.
     */
    React.useEffect(() => wallets.forEach((wallet) => {
        wallet.connector.initEventListener();
    }), [wallets]);
    const { setUserWallets } = UserWalletsContext.useInternalUserWallets();
    // Keep userWallets in sync whenever linkedWallets changes
    React.useEffect(() => {
        logger.logger.logVerboseTroubleshootingMessage('[useWalletConnectors] will call setUserWallets', wallets);
        setUserWallets((userWallets) => updateUserWalletsFromLinkedWallets.updateUserWalletsFromLinkedWallets(userWallets, wallets));
    }, [setUserWallets, wallets]);
    const primaryWallet = React.useMemo(() => { var _a; return (_a = wallets.find((wallet) => wallet.id === primaryWalletId)) !== null && _a !== void 0 ? _a : null; }, [primaryWalletId, wallets]);
    const secondaryWallets = React.useMemo(() => canHaveMultipleWalletsConnected
        ? wallets.filter((wallet) => wallet.id !== primaryWalletId)
        : [], [primaryWalletId, wallets, canHaveMultipleWalletsConnected]);
    const getSelectedWallet = React.useCallback((walletId) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const newWallet = wallets.find(({ id }) => id === walletId);
        if (!newWallet) {
            throw new utils.DynamicError(`Wallet with id: ${walletId} not found`);
        }
        return newWallet;
    }), [wallets]);
    const setPrimaryWallet = React.useCallback((walletId) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const newPrimaryWallet = yield getSelectedWallet(walletId);
        if (!primaryWalletId) {
            yield newPrimaryWallet.connector.connect();
            setPrimaryWalletId(walletId);
            return;
        }
        if (primaryWalletId === walletId)
            return;
        if (walletConnectorCore.isEmailWalletConnector(newPrimaryWallet.connector)) {
            const emailConnector = newPrimaryWallet.connector;
            const email = localStorage.getItem('magic-link-email');
            if (email) {
                emailConnector.setEmail(email);
            }
        }
        setPrimaryWalletId(walletId);
        setMultiWalletWidgetState('idle');
    }), [
        getSelectedWallet,
        primaryWalletId,
        setMultiWalletWidgetState,
        setPrimaryWalletId,
    ]);
    return {
        primaryWallet,
        secondaryWallets,
        setPrimaryWallet,
        setShowQrcodeModal,
        showQrcodeModal,
        wallets,
    };
};

exports.useWalletConnectors = useWalletConnectors;
