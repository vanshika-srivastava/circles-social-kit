'use client'
import { __awaiter } from '../../../../../../../_virtual/_tslib.js';
import { isTurnkeyWalletConnector, isSameAddress, isAccountAbstractionConnector } from '@dynamic-labs/wallet-connector-core';
import { VerifiedCredentialNameToChainEnum } from '../../../../constants/values.js';
import { findWalletOptionFor } from '../../../../functions/findWalletOptionFor/findWalletOptionFor.js';

// assumes `account` input is a smart wallet (has a signerRefId) and attempts to find
// the associated eoa account
const findOwner = (account, verifiedCredentials) => verifiedCredentials.find((credential) => credential.id === account.signerRefId);
const findSmartWallet = (account, verifiedCredentials) => verifiedCredentials.find((credential) => credential.signerRefId === account.id);
const isOwnerOfASmartWallet = (account, verifiedCredentials) => Boolean(findSmartWallet(account, verifiedCredentials));
const initializeSmartWallet = (_a) => __awaiter(void 0, [_a], void 0, function* ({ account, verifiedCredentials, walletConnectorOptions, }) {
    var _b, _c;
    const owner = findOwner(account, verifiedCredentials);
    if (!owner) {
        throw new Error('could not find associated eoa account for smart wallet');
    }
    const ownerWallet = findWalletOptionFor(owner, walletConnectorOptions);
    if (!ownerWallet) {
        throw new Error('could not find owner wallet from wallet options');
    }
    if (ownerWallet && isTurnkeyWalletConnector(ownerWallet.walletConnector)) {
        const sortedVcs = (_c = (_b = ownerWallet.walletConnector) === null || _b === void 0 ? void 0 : _b.verifiedCredentials) === null || _c === void 0 ? void 0 : _c.reduce((acc, vc) => {
            if (vc.smartWalletRefAddress &&
                account.address &&
                account.chain &&
                isSameAddress(vc.smartWalletRefAddress, account.address, VerifiedCredentialNameToChainEnum[account.chain])) {
                return [vc, ...acc];
            }
            return [...acc, vc];
        }, []);
        if (sortedVcs) {
            ownerWallet.walletConnector.setVerifiedCredentials(sortedVcs);
        }
    }
    const smartWallet = findWalletOptionFor(account, walletConnectorOptions);
    if (!smartWallet) {
        throw new Error('could not find smart wallet from wallet options');
    }
    const connector = smartWallet.walletConnector;
    if (!isAccountAbstractionConnector(connector)) {
        throw new Error('could not initialize smart wallet');
    }
    yield connector.setEoaConnector(ownerWallet.walletConnector);
});

export { findOwner, findSmartWallet, initializeSmartWallet, isOwnerOfASmartWallet };
