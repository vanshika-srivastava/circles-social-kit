'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { DynamicError } from '@dynamic-labs/utils';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import { NONCE_STORAGE_KEY } from '../../constants/localStorage.js';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import { useLocalStorage } from '../../../shared/utils/hooks/useLocalStorage/useLocalStorage.js';
import '../../../shared/consts/index.js';
import '../../../config/ApiEndpoint.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import { fetchNonce } from '../../../data/api/utils.js';
import { validateLocalStorageExpiry } from '../../../context/DynamicContext/validators/validators.js';
import { usePromise } from '../usePromise/usePromise.js';

const useFetchNonce = (environmentId, maxRetries = 2) => {
    const [lsNonce, setLsNonce, removeLsNonce] = useLocalStorage(NONCE_STORAGE_KEY, undefined, validateLocalStorageExpiry);
    const nonceExists = (lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value) !== '' && (lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value) !== undefined ? true : false;
    if (lsNonce &&
        lsNonce.environmentId &&
        lsNonce.environmentId !== environmentId) {
        removeLsNonce();
    }
    usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
        return fetchNonce(environmentId).then((response) => {
            if (!response)
                throw new DynamicError('Nonce is not defined');
            const expiry = new Date().getTime() + 60000 * 60 * 24;
            return { environmentId, expiry: expiry, value: response };
        });
    }), {
        deps: [environmentId, nonceExists],
        enabled: !nonceExists,
        initialData: undefined,
        onResolve: setLsNonce,
        retries: maxRetries,
    });
    const consumeNonce = useCallback(() => {
        const nonce = lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value;
        removeLsNonce();
        return nonce;
    }, [removeLsNonce, lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value]);
    return {
        consumeNonce: () => consumeNonce(),
    };
};

export { useFetchNonce };
