'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var utils$1 = require('@dynamic-labs/utils');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var localStorage = require('../../constants/localStorage.cjs');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
var useLocalStorage = require('../../../shared/utils/hooks/useLocalStorage/useLocalStorage.cjs');
require('../../../shared/consts/index.cjs');
require('../../../config/ApiEndpoint.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
var utils = require('../../../data/api/utils.cjs');
var validators = require('../../../context/DynamicContext/validators/validators.cjs');
var usePromise = require('../usePromise/usePromise.cjs');

const useFetchNonce = (environmentId, maxRetries = 2) => {
    const [lsNonce, setLsNonce, removeLsNonce] = useLocalStorage.useLocalStorage(localStorage.NONCE_STORAGE_KEY, undefined, validators.validateLocalStorageExpiry);
    const nonceExists = (lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value) !== '' && (lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value) !== undefined ? true : false;
    if (lsNonce &&
        lsNonce.environmentId &&
        lsNonce.environmentId !== environmentId) {
        removeLsNonce();
    }
    usePromise.usePromise(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        return utils.fetchNonce(environmentId).then((response) => {
            if (!response)
                throw new utils$1.DynamicError('Nonce is not defined');
            const expiry = new Date().getTime() + 60000 * 60 * 24;
            return { environmentId, expiry: expiry, value: response };
        });
    }), {
        deps: [environmentId, nonceExists],
        enabled: !nonceExists,
        initialData: undefined,
        onResolve: setLsNonce,
        retries: maxRetries,
    });
    const consumeNonce = React.useCallback(() => {
        const nonce = lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value;
        removeLsNonce();
        return nonce;
    }, [removeLsNonce, lsNonce === null || lsNonce === void 0 ? void 0 : lsNonce.value]);
    return {
        consumeNonce: () => consumeNonce(),
    };
};

exports.useFetchNonce = useFetchNonce;
