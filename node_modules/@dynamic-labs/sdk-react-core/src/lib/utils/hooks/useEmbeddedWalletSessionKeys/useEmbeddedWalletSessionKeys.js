'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { StorageService } from '@dynamic-labs/utils';
import { SECURE_ENCLAVE_WALLET_SESSION_KEYS, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS } from '../../constants/sessionStorage.js';
import { p256Keygen } from '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/utils.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../config/ApiEndpoint.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/projectSettings/projectSettings.js';
import { registerSessionKey } from '../../../data/api/embeddedWallets/embeddedWallets.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';

const useEmbeddedWalletSessionKeys = (environmentId) => {
    const registerEmbeddedWalletSessionKey = (...args_1) => __awaiter(void 0, [...args_1], void 0, function* ({ ignoreRestore = false, } = {}) {
        // check if session keys are already stored in session storage
        const sessionKeysSS = StorageService.getItem(SECURE_ENCLAVE_WALLET_SESSION_KEYS, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS);
        if (sessionKeysSS && !ignoreRestore) {
            const sessionKeysInSS = JSON.parse(Buffer.from(sessionKeysSS, 'base64').toString());
            return sessionKeysInSS;
        }
        const { publicKey, privateKey } = yield generateSessionKey();
        yield registerSessionKey({
            environmentId,
            publicKey,
        });
        return { privateKey, publicKey };
    });
    const generateSessionKey = () => __awaiter(void 0, void 0, void 0, function* () {
        const { private: privateKey, public: publicKey } = yield p256Keygen();
        // convert to base64 and store the session keys in session storage
        const newSessionKeys = { privateKey, publicKey };
        const sessionKeysString = JSON.stringify(newSessionKeys);
        const sessionKeysBase64 = Buffer.from(sessionKeysString).toString('base64');
        StorageService.setItem(SECURE_ENCLAVE_WALLET_SESSION_KEYS, sessionKeysBase64, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS);
        return { privateKey, publicKey };
    });
    const removeSessionKey = useCallback(() => StorageService.removeItem(SECURE_ENCLAVE_WALLET_SESSION_KEYS, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS), []);
    const shouldRegisterSessionKeysOnSignin = () => false;
    // TODO: uncomment this once we actually implement and enforce session key chaining
    // GVTY-2206
    // projectSettings?.sdk?.embeddedWallets?.defaultWalletVersion ===
    // EmbeddedWalletVersionEnum.V2;
    return {
        generateSessionKey,
        registerEmbeddedWalletSessionKey,
        removeSessionKey,
        shouldRegisterSessionKeysOnSignin,
    };
};

export { useEmbeddedWalletSessionKeys };
