'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var React = require('react');
var utils = require('@dynamic-labs/utils');
var sessionStorage = require('../../constants/sessionStorage.cjs');
var utils$1 = require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/utils.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
require('../../../config/ApiEndpoint.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../store/state/projectSettings/projectSettings.cjs');
var embeddedWallets = require('../../../data/api/embeddedWallets/embeddedWallets.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');

const useEmbeddedWalletSessionKeys = (environmentId) => {
    const registerEmbeddedWalletSessionKey = (...args_1) => _tslib.__awaiter(void 0, [...args_1], void 0, function* ({ ignoreRestore = false, } = {}) {
        // check if session keys are already stored in session storage
        const sessionKeysSS = utils.StorageService.getItem(sessionStorage.SECURE_ENCLAVE_WALLET_SESSION_KEYS, sessionStorage.SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS);
        if (sessionKeysSS && !ignoreRestore) {
            const sessionKeysInSS = JSON.parse(Buffer.from(sessionKeysSS, 'base64').toString());
            return sessionKeysInSS;
        }
        const { publicKey, privateKey } = yield generateSessionKey();
        yield embeddedWallets.registerSessionKey({
            environmentId,
            publicKey,
        });
        return { privateKey, publicKey };
    });
    const generateSessionKey = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const { private: privateKey, public: publicKey } = yield utils$1.p256Keygen();
        // convert to base64 and store the session keys in session storage
        const newSessionKeys = { privateKey, publicKey };
        const sessionKeysString = JSON.stringify(newSessionKeys);
        const sessionKeysBase64 = Buffer.from(sessionKeysString).toString('base64');
        utils.StorageService.setItem(sessionStorage.SECURE_ENCLAVE_WALLET_SESSION_KEYS, sessionKeysBase64, sessionStorage.SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS);
        return { privateKey, publicKey };
    });
    const removeSessionKey = React.useCallback(() => utils.StorageService.removeItem(sessionStorage.SECURE_ENCLAVE_WALLET_SESSION_KEYS, sessionStorage.SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS), []);
    const shouldRegisterSessionKeysOnSignin = () => false;
    // TODO: uncomment this once we actually implement and enforce session key chaining
    // GVTY-2206
    // projectSettings?.sdk?.embeddedWallets?.defaultWalletVersion ===
    // EmbeddedWalletVersionEnum.V2;
    return {
        generateSessionKey,
        registerEmbeddedWalletSessionKey,
        removeSessionKey,
        shouldRegisterSessionKeysOnSignin,
    };
};

exports.useEmbeddedWalletSessionKeys = useEmbeddedWalletSessionKeys;
