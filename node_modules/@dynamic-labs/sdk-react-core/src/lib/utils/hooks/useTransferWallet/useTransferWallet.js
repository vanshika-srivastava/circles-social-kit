'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { DynamicError } from '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import { USER_NOT_LOGGED_IN } from '../../constants/errors.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { getVerifyArgs } from '../../functions/getVerifyArgs/getVerifyArgs.js';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import { transferWallet } from '../../../data/api/wallets/wallets.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import { useInternalUserWallets } from '../../../context/UserWalletsContext/UserWalletsContext.js';
import { getWalletProvider } from '../../functions/getWalletProvider/getWalletProvider.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useTransferWallet = () => {
    const { displaySiweStatement, environmentId, user, primaryWallet, setPrimaryWalletId, } = useInternalDynamicContext();
    const { addedWalletsIds } = useInternalUserWallets();
    const updatePrimaryWalletId = useCallback((walletConnector, user) => {
        const newWalletKey = walletConnector.key;
        if (user.lastVerifiedCredentialId) {
            if (!primaryWallet) {
                setPrimaryWalletId(user.lastVerifiedCredentialId);
                return;
            }
            const currentPrimaryWalletKey = primaryWallet.connector.key;
            if (newWalletKey === currentPrimaryWalletKey) {
                setPrimaryWalletId(user.lastVerifiedCredentialId);
            }
            // if both wallets are flow wallets, set the last verified wallet as primary
            // this is a limitation of flow as all wallets use the same flow connector
            if (primaryWallet.connector.connectedChain === 'FLOW' &&
                walletConnector.connectedChain === 'FLOW') {
                setPrimaryWalletId(user.lastVerifiedCredentialId);
            }
        }
    }, [primaryWallet, setPrimaryWalletId]);
    return useCallback((props) => __awaiter(void 0, void 0, void 0, function* () {
        if (!user)
            throw new DynamicError(USER_NOT_LOGGED_IN);
        const { overrideSiweStatement, walletConnector } = props;
        const args = 'nonce' in props
            ? Object.assign(Object.assign({}, props), { displaySiweStatement,
                environmentId, siweStatement: overrideSiweStatement, walletProvider: getWalletProvider(walletConnector) }) : Object.assign(Object.assign({}, props), { displaySiweStatement,
            environmentId, 
            // We don't need the nonce if we are passing messageToSignOverride and signedMessageOverride
            // and if props doesn't have nonce, that means it has messageToSignOverride and signedMessageOverride
            nonce: '', siweStatement: props.overrideSiweStatement, walletProvider: getWalletProvider(walletConnector) });
        const verifyArgs = yield getVerifyArgs(args);
        const userProfile = yield transferWallet(environmentId, verifyArgs);
        if (!userProfile) {
            throw new DynamicError('Error transferring wallet.');
        }
        updatePrimaryWalletId(walletConnector, userProfile);
        const walletId = userProfile.lastVerifiedCredentialId;
        if (walletId) {
            addedWalletsIds.current.push(walletId);
        }
    }), [
        addedWalletsIds,
        displaySiweStatement,
        environmentId,
        updatePrimaryWalletId,
        user,
    ]);
};

export { useTransferWallet };
