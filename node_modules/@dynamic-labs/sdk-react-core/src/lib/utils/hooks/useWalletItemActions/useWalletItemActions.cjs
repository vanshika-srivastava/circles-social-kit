'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var utils = require('@dynamic-labs/utils');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var localStorage = require('../../constants/localStorage.cjs');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
require('../../../events/dynamicEvents.cjs');
var useConnectAndSign = require('../authenticationHooks/useConnectAndSign/useConnectAndSign.cjs');
var ErrorContext = require('../../../context/ErrorContext/ErrorContext.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../config/ApiEndpoint.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var requiresTwoStepAuthentication = require('../../functions/requiresTwoStepAuthentication/requiresTwoStepAuthentication.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
var useConnectAndSignSplitSteps = require('../authenticationHooks/useConnectAndSignSplitSteps/useConnectAndSignSplitSteps.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
var MockContext = require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
var isSelectedWalletAlreadyConnected = require('../../functions/isSelectedWalletAlreadyConnected/isSelectedWalletAlreadyConnected.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useWalletItemActions = () => {
    const { setMultiWalletWidgetState, setShowAuthFlow, setSelectedWalletConnectorKey, walletConnectorOptions, setQrcodeUri, setDesktopUri, user, linkedWallets, setLegacyIsVerifying, authMode, } = useInternalDynamicContext.useInternalDynamicContext();
    const { mockedSDK } = MockContext.useMockContext();
    const { setError, setErrorMessage } = ErrorContext.useErrorContext();
    const { setView, goToInitialView } = ViewContext.useViewContext();
    const { onlyConnectUser } = useConnectAndSignSplitSteps.useConnectAndSignSplitSteps();
    const connectAndSignWallet = useConnectAndSign.useConnectAndSign();
    const handleCustodialWalletClick = (walletConnector) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        logger.logger.debug('handleCustodialWalletClick', walletConnector);
        const twoStepAuthentication = requiresTwoStepAuthentication.requiresTwoStepAuthentication(walletConnector);
        logger.logger.logVerboseTroubleshootingMessage('[handleCustodialWalletClick]', {
            twoStepAuthentication,
        });
        if (twoStepAuthentication) {
            setSelectedWalletConnectorKey(walletConnector.key);
            yield onlyConnectUser({
                walletConnector,
            });
        }
        else {
            setSelectedWalletConnectorKey(walletConnector.key);
            setMultiWalletWidgetState('awaiting_signature', undefined, 'linking_new_wallet');
        }
        setView('pending-signature');
    });
    const handleMobileWalletClick = (walletConnector) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        logger.logger.debug('handleMobileWalletClick', walletConnector);
        setSelectedWalletConnectorKey(walletConnector.key);
        // We need to set to LS when about to verify phantom wallet on mobile
        // because the deeplink interrupts this code execution and then redirects back on a new tab.
        // This resets all state (except for LS obviously). When we receive the phantom signature in this new tab,
        // we can't tell whether it's supposed to be used to sign a message, verify a wallet sign in/link,
        // or conclude a wallet transfer, which is why we need this LS variable: it will indicate whether it
        // is a signature, authentication or transfer.
        // Check method handleUserResponse in file useResponseHandlers, case 'signMessage'.
        if (walletConnector.key === 'phantom') {
            const currentState = utils.StorageService.getItem(localStorage.PHANTOM_SIGNATURE_STATE);
            utils.StorageService.setItem(localStorage.PHANTOM_SIGNATURE_STATE, {
                loseOriginalAccountOnTransfer: (_a = currentState === null || currentState === void 0 ? void 0 : currentState.loseOriginalAccountOnTransfer) !== null && _a !== void 0 ? _a : false,
                submittedAtTimestamp: new Date().toString(),
                verificationType: 'awaiting_verification',
            });
        }
        onlyConnectUser({ walletConnector });
    });
    const handleInstalledExtensionClick = (walletConnector) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        logger.logger.debug('handleInstalledExtensionClick', walletConnector);
        setSelectedWalletConnectorKey(walletConnector.key);
        setMultiWalletWidgetState('awaiting_signature', undefined, 'linking_new_wallet');
    });
    const handleUninstalledClick = (walletConnector) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        logger.logger.debug('handleUninstalledClick', walletConnector);
        setSelectedWalletConnectorKey(walletConnector.key);
        if (!walletConnector.canConnectViaQrCode) {
            setView('no-qr-not-installed');
        }
        else {
            connectAndSignWallet({
                getAddressOpts: {
                    onDesktopUri: (uri) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                        setDesktopUri(uri);
                    }),
                    onDisplayUri: (uri) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                        setQrcodeUri(uri);
                    }),
                },
                walletConnector,
            });
            setView('qr-code');
        }
        setError(undefined);
    });
    const handleAlreadyConnectedWallet = (walletConnector) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        logger.logger.debug('handleAlreadyConnectedWallet', walletConnector);
        setShowAuthFlow(false);
        const connectedAccounts = yield walletConnector.getConnectedAccounts();
        const activeAccountAlreadyLinked = linkedWallets.find((wallet) => { var _a; return wallet.address.toLowerCase() === ((_a = connectedAccounts[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });
        logger.logger.logVerboseTroubleshootingMessage('[handleAlreadyConnectedWallet]', {
            activeAccountAlreadyLinked,
            connectedAccounts,
            linkedWallets,
        });
        if (activeAccountAlreadyLinked) {
            setMultiWalletWidgetState('awaiting_account_switch', 'linking_new_wallet');
        }
        else {
            setMultiWalletWidgetState('awaiting_signature', undefined, 'linking_new_wallet');
        }
        setSelectedWalletConnectorKey(walletConnector.key);
    });
    const openWallet = (walletKey, handlers) => {
        var _a;
        const { openMobileWallet = handleMobileWalletClick, openCustodialWallet = handleCustodialWalletClick, openExtensionWallet = handleInstalledExtensionClick, } = handlers || {};
        const walletConnector = (_a = walletConnectorOptions.find((wallet) => wallet.key === walletKey)) === null || _a === void 0 ? void 0 : _a.walletConnector;
        if (!walletConnector)
            return;
        if (utils.isMobile()) {
            openMobileWallet(walletConnector);
        }
        else if (walletConnector.canConnectViaCustodialService) {
            openCustodialWallet(walletConnector);
        }
        else if (walletConnector.isInstalledOnBrowser()) {
            openExtensionWallet(walletConnector);
        }
    };
    const handleWalletItemClick = (wallet) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const { walletConnector, isInstalledOnBrowser } = wallet;
        const shouldEndWalletConnectorSession = walletConnector.connectedChain === 'FLOW' ||
            walletConnectorCore.isPhantomRedirectConnector(walletConnector);
        logger.logger.logVerboseTroubleshootingMessage('[handleWalletItemClick]', {
            mockedSDK,
            shouldEndWalletConnectorSession,
            wallet,
        });
        if (mockedSDK)
            return;
        if (shouldEndWalletConnectorSession) {
            yield walletConnector.endSession();
        }
        setLegacyIsVerifying(false);
        // in connect only we only allow one account to be connected in the same wallet
        if (authMode !== 'connect-only') {
            try {
                yield walletConnector.chooseAccountsToConnect();
            }
            catch (error) {
                if (error instanceof utils.UserRejectedRequestError) {
                    setErrorMessage('connection_rejected');
                    goToInitialView();
                    return;
                }
            }
        }
        if (isSelectedWalletAlreadyConnected.isSelectedWalletAlreadyConnected(linkedWallets, walletConnector, user) &&
            walletConnector.connectedChain !== 'FLOW') {
            // wallet is already connected
            handleAlreadyConnectedWallet(walletConnector);
        }
        else if (walletConnector.canConnectViaCustodialService) {
            // providers like blocto and dapper
            handleCustodialWalletClick(walletConnector);
        }
        else if (utils.isMobile()) {
            // mobile wallets
            if (walletConnector.key === 'walletconnect') {
                setView('wallet-connect-mobile-wallets-list');
            }
            else {
                handleMobileWalletClick(walletConnector);
            }
        }
        else if (isInstalledOnBrowser) {
            // browser extensions or injected wallets
            handleInstalledExtensionClick(walletConnector);
        }
        else {
            // wallet requiring a qr code (wallet connect/coinbase wallet)
            handleUninstalledClick(walletConnector);
        }
    });
    return {
        handleAlreadyConnectedWallet,
        handleCustodialWalletClick,
        handleInstalledExtensionClick,
        handleMobileWalletClick,
        handleUninstalledClick,
        handleWalletItemClick,
        openWallet,
    };
};

exports.useWalletItemActions = useWalletItemActions;
