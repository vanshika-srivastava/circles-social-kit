'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { MFADeviceType, MfaBackupCodeAcknowledgement } from '@dynamic-labs/sdk-api-core';
import 'react';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { dynamicEvents } from '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import { USER_NOT_LOGGED_IN } from '../../constants/errors.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import { getUserMfaDevices, updateUserMfaDevice, deleteMfaDevice, addMfaDevice, authMfaDevice, authMfaRecovery, verifyMfaDevice, createNewRecoveryCodes, getRecoveryCodes } from '../../../data/api/mfa/mfa.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import { useUserAuth } from '../useUserAuth/useUserAuth.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import { useUserUpdateRequestInternal } from '../useUserUpdateRequest/useUserUpdateRequest.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../context/LoadingContext/LoadingContext.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useMfa = () => {
    const { completeAuth } = useUserAuth({});
    const { user, userWithMissingInfo, environmentId } = useInternalDynamicContext();
    const verifiedUser = user || userWithMissingInfo;
    const getUserDevices = () => __awaiter(void 0, void 0, void 0, function* () {
        if (!verifiedUser) {
            throw new Error(USER_NOT_LOGGED_IN);
        }
        const devices = yield getUserMfaDevices({ environmentId });
        return devices;
    });
    const updateUserDevice = (deviceId) => __awaiter(void 0, void 0, void 0, function* () {
        if (!verifiedUser) {
            throw new Error(USER_NOT_LOGGED_IN);
        }
        yield updateUserMfaDevice({
            environmentId,
            mfaDeviceId: deviceId,
        });
    });
    const deleteUserDevice = (deviceId, mfaAuthToken) => __awaiter(void 0, void 0, void 0, function* () {
        if (!verifiedUser) {
            throw new Error(USER_NOT_LOGGED_IN);
        }
        yield deleteMfaDevice({
            environmentId,
            mfaAuthToken,
            mfaDeviceId: deviceId,
        });
    });
    const addDevice = (...args_1) => __awaiter(void 0, [...args_1], void 0, function* (type = MFADeviceType.Totp) {
        if (!verifiedUser) {
            throw new Error(USER_NOT_LOGGED_IN);
        }
        const { id, secret, uri } = yield addMfaDevice({
            environmentId,
            type,
        });
        return { id, secret, uri };
    });
    const authDevice = (code_1, ...args_2) => __awaiter(void 0, [code_1, ...args_2], void 0, function* (code, type = MFADeviceType.Totp, deviceId) {
        try {
            if (!verifiedUser) {
                throw new Error(USER_NOT_LOGGED_IN);
            }
            let isValid = false;
            yield completeAuth({
                onValidUpdatedJwt: () => __awaiter(void 0, void 0, void 0, function* () {
                    isValid = true;
                }),
                updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () {
                    const response = yield authMfaDevice({
                        code,
                        createMfaToken: {
                            singleUse: true,
                        },
                        deviceId,
                        environmentId,
                        type,
                    });
                    dynamicEvents.emit('mfaCompletionSuccess', {
                        mfaToken: response.mfaToken,
                    });
                    return {
                        isEmailVerificationRequired: false,
                        isSmsVerificationRequired: false,
                        missingFields: [],
                        // in the mfa flow, we only care about the user in the response
                        updateUserProfileResponse: response,
                    };
                }),
            });
            return isValid;
        }
        catch (error) {
            dynamicEvents.emit('mfaCompletionFailure', { error });
            throw error;
        }
    });
    const authRecoveryCode = (code) => __awaiter(void 0, void 0, void 0, function* () {
        if (!verifiedUser) {
            throw new Error(USER_NOT_LOGGED_IN);
        }
        let isValid = false;
        yield completeAuth({
            onValidUpdatedJwt: () => __awaiter(void 0, void 0, void 0, function* () {
                isValid = true;
            }),
            updateJwtFunction: () => __awaiter(void 0, void 0, void 0, function* () {
                const response = yield authMfaRecovery({
                    code,
                    environmentId,
                });
                if (!response) {
                    throw new Error('Failed to authenticate recovey code');
                }
                return {
                    isEmailVerificationRequired: false,
                    isSmsVerificationRequired: false,
                    missingFields: [],
                    // in the mfa flow, we only care about the user in the response
                    updateUserProfileResponse: response,
                };
            }),
        });
        return isValid;
    });
    const verifyDevice = (code_2, ...args_3) => __awaiter(void 0, [code_2, ...args_3], void 0, function* (code, type = MFADeviceType.Totp) {
        if (!verifiedUser) {
            throw new Error(USER_NOT_LOGGED_IN);
        }
        const device = yield verifyMfaDevice({
            code,
            environmentId,
            type,
        });
        if (!device) {
            throw new Error('Failed to verify device');
        }
        return device;
    });
    const getRecoveryCodes$1 = (...args_4) => __awaiter(void 0, [...args_4], void 0, function* (generateNewCodes = false) {
        if (!verifiedUser) {
            throw new Error(USER_NOT_LOGGED_IN);
        }
        const getRecoveryCodesFunc = generateNewCodes
            ? createNewRecoveryCodes
            : getRecoveryCodes;
        const recoveryCodes = yield getRecoveryCodesFunc({
            environmentId,
        });
        if (!recoveryCodes) {
            throw new Error('Recovery codes not found');
        }
        return recoveryCodes;
    });
    const { updateUser } = useUserUpdateRequestInternal({
        validationSchemaStripUnknown: false,
    });
    const completeAcknowledgement = () => __awaiter(void 0, void 0, void 0, function* () {
        yield updateUser({
            mfaBackupCodeAcknowledgement: MfaBackupCodeAcknowledgement.Complete,
        });
    });
    return {
        addDevice,
        authDevice,
        authRecoveryCode,
        completeAcknowledgement,
        deleteUserDevice,
        getRecoveryCodes: getRecoveryCodes$1,
        getUserDevices,
        updateUserDevice,
        verifyDevice,
    };
};

export { useMfa };
