'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
var errors = require('../../constants/errors.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
var mfa = require('../../../data/api/mfa/mfa.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
var useUserAuth = require('../useUserAuth/useUserAuth.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
var useUserUpdateRequest = require('../useUserUpdateRequest/useUserUpdateRequest.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useMfa = () => {
    const { completeAuth } = useUserAuth.useUserAuth({});
    const { user, userWithMissingInfo, environmentId } = useInternalDynamicContext.useInternalDynamicContext();
    const verifiedUser = user || userWithMissingInfo;
    const getUserDevices = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!verifiedUser) {
            throw new Error(errors.USER_NOT_LOGGED_IN);
        }
        const devices = yield mfa.getUserMfaDevices({ environmentId });
        return devices;
    });
    const updateUserDevice = (deviceId) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!verifiedUser) {
            throw new Error(errors.USER_NOT_LOGGED_IN);
        }
        yield mfa.updateUserMfaDevice({
            environmentId,
            mfaDeviceId: deviceId,
        });
    });
    const deleteUserDevice = (deviceId, mfaAuthToken) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!verifiedUser) {
            throw new Error(errors.USER_NOT_LOGGED_IN);
        }
        yield mfa.deleteMfaDevice({
            environmentId,
            mfaAuthToken,
            mfaDeviceId: deviceId,
        });
    });
    const addDevice = (...args_1) => _tslib.__awaiter(void 0, [...args_1], void 0, function* (type = sdkApiCore.MFADeviceType.Totp) {
        if (!verifiedUser) {
            throw new Error(errors.USER_NOT_LOGGED_IN);
        }
        const { id, secret, uri } = yield mfa.addMfaDevice({
            environmentId,
            type,
        });
        return { id, secret, uri };
    });
    const authDevice = (code_1, ...args_2) => _tslib.__awaiter(void 0, [code_1, ...args_2], void 0, function* (code, type = sdkApiCore.MFADeviceType.Totp, deviceId) {
        try {
            if (!verifiedUser) {
                throw new Error(errors.USER_NOT_LOGGED_IN);
            }
            let isValid = false;
            yield completeAuth({
                onValidUpdatedJwt: () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                    isValid = true;
                }),
                updateJwtFunction: () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                    const response = yield mfa.authMfaDevice({
                        code,
                        createMfaToken: {
                            singleUse: true,
                        },
                        deviceId,
                        environmentId,
                        type,
                    });
                    dynamicEvents.dynamicEvents.emit('mfaCompletionSuccess', {
                        mfaToken: response.mfaToken,
                    });
                    return {
                        isEmailVerificationRequired: false,
                        isSmsVerificationRequired: false,
                        missingFields: [],
                        // in the mfa flow, we only care about the user in the response
                        updateUserProfileResponse: response,
                    };
                }),
            });
            return isValid;
        }
        catch (error) {
            dynamicEvents.dynamicEvents.emit('mfaCompletionFailure', { error });
            throw error;
        }
    });
    const authRecoveryCode = (code) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!verifiedUser) {
            throw new Error(errors.USER_NOT_LOGGED_IN);
        }
        let isValid = false;
        yield completeAuth({
            onValidUpdatedJwt: () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                isValid = true;
            }),
            updateJwtFunction: () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
                const response = yield mfa.authMfaRecovery({
                    code,
                    environmentId,
                });
                if (!response) {
                    throw new Error('Failed to authenticate recovey code');
                }
                return {
                    isEmailVerificationRequired: false,
                    isSmsVerificationRequired: false,
                    missingFields: [],
                    // in the mfa flow, we only care about the user in the response
                    updateUserProfileResponse: response,
                };
            }),
        });
        return isValid;
    });
    const verifyDevice = (code_2, ...args_3) => _tslib.__awaiter(void 0, [code_2, ...args_3], void 0, function* (code, type = sdkApiCore.MFADeviceType.Totp) {
        if (!verifiedUser) {
            throw new Error(errors.USER_NOT_LOGGED_IN);
        }
        const device = yield mfa.verifyMfaDevice({
            code,
            environmentId,
            type,
        });
        if (!device) {
            throw new Error('Failed to verify device');
        }
        return device;
    });
    const getRecoveryCodes = (...args_4) => _tslib.__awaiter(void 0, [...args_4], void 0, function* (generateNewCodes = false) {
        if (!verifiedUser) {
            throw new Error(errors.USER_NOT_LOGGED_IN);
        }
        const getRecoveryCodesFunc = generateNewCodes
            ? mfa.createNewRecoveryCodes
            : mfa.getRecoveryCodes;
        const recoveryCodes = yield getRecoveryCodesFunc({
            environmentId,
        });
        if (!recoveryCodes) {
            throw new Error('Recovery codes not found');
        }
        return recoveryCodes;
    });
    const { updateUser } = useUserUpdateRequest.useUserUpdateRequestInternal({
        validationSchemaStripUnknown: false,
    });
    const completeAcknowledgement = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        yield updateUser({
            mfaBackupCodeAcknowledgement: sdkApiCore.MfaBackupCodeAcknowledgement.Complete,
        });
    });
    return {
        addDevice,
        authDevice,
        authRecoveryCode,
        completeAcknowledgement,
        deleteUserDevice,
        getRecoveryCodes,
        getUserDevices,
        updateUserDevice,
        verifyDevice,
    };
};

exports.useMfa = useMfa;
