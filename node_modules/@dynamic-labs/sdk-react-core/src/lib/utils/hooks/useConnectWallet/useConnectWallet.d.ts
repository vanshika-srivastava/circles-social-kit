import { UserProfile } from '@dynamic-labs/types';
import { Chain, GetAddressOpts, WalletConnector } from '@dynamic-labs/wallet-connector-core';
import { HardwareWalletEnum } from '@dynamic-labs/sdk-api-core';
import { SetShowAuthFlow } from '../../../context/DynamicContext/hooks';
import { ConnectWalletResult } from '../../../context/DynamicContext/types';
import { AuthModeType, HandleConnectedWallet, WalletOption, Wallet } from '../../../shared';
export type ConnectedWalletConnectorType = {
    id: string;
    walletChain?: Chain;
    walletConnectorKey: string;
    provider: string;
    hardwareWallet: HardwareWalletEnum | undefined;
};
export type UseConnectWalletProps = {
    authMode: AuthModeType;
    clearPrimaryWalletId: () => void;
    enableVisitTrackingOnConnectOnly: boolean;
    environmentId: string;
    primaryWalletId: string | undefined;
    setPrimaryWalletId: (walletId: string) => void;
    walletConnectorOptions: WalletOption[];
    handleConnectedWallet: HandleConnectedWallet | undefined;
    setShowAuthFlow: SetShowAuthFlow;
    isBridgeFlow: boolean;
    user: UserProfile | undefined;
};
export type ConnectWalletOptions = {
    /** Whether to call handleConnectedWallet */
    applyHandleConnectedWallet?: boolean;
};
type UseConnectWalletValue = {
    connectWallet: (walletConnector: WalletConnector, getAddressOpts?: GetAddressOpts, options?: ConnectWalletOptions) => Promise<ConnectWalletResult | undefined>;
    connectedWallets: Wallet[];
    connectedWalletsInfo: ConnectedWalletConnectorType[];
    getConnectedWalletById: (walletId: string) => Wallet | undefined;
    refreshConnectedWallet: (walletId: string, walletConnector: WalletConnector) => Promise<void>;
    removeConnectedWalletsInfo: () => void;
    disconnectWallet: (walletId: string) => Promise<void>;
};
export declare const useConnectWallet: ({ authMode, clearPrimaryWalletId, enableVisitTrackingOnConnectOnly, environmentId, primaryWalletId, setPrimaryWalletId, walletConnectorOptions, handleConnectedWallet, setShowAuthFlow, isBridgeFlow, user, }: UseConnectWalletProps) => UseConnectWalletValue;
export {};
