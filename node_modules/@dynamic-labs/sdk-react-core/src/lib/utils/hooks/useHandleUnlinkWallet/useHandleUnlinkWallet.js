'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { StorageService } from '@dynamic-labs/utils';
import { useInternalUserWallets } from '../../../context/UserWalletsContext/UserWalletsContext.js';
import { PRIMARY_WALLET_ID } from '../../constants/localStorage.js';
import '../../constants/colors.js';
import '../../constants/values.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../config/ApiEndpoint.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import { unlinkWallet } from '../../../data/api/wallets/wallets.js';

const useHandleUnlinkWallet = ({ verifiedCredentials, environmentId, primaryWalletId, secondaryWallets, }) => {
    const { removedWalletsIds } = useInternalUserWallets();
    const callback = useCallback((walletId) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // when we call handleUnlinkWallet on the same execution stack as setPrimaryWallet, the value of
        // primaryWalletId coming from the DynamicContext will be the old one in  this callback function
        // so we need to get the latest value from LS
        // e.g. primary wallet id is 1234, and we have a function like this:
        // async function setPrimaryWalletAndUnlink() {
        //  await setPrimaryWallet('5678');
        //  handleUnlinkWallet('1234');
        // }
        // without fetching from LS, primaryWalletId would still be 1234 when handleUnlinkWallet runs in the example above
        const currentPrimaryWalletId = (_a = StorageService.getItem(PRIMARY_WALLET_ID)) !== null && _a !== void 0 ? _a : primaryWalletId;
        if (walletId === currentPrimaryWalletId)
            return;
        yield unlinkWallet({
            environmentId,
            onSuccess: () => {
                removedWalletsIds.current.push(walletId);
            },
            primaryWalletId: currentPrimaryWalletId,
            walletId,
        });
        const wallet = secondaryWallets.find((w) => w.id === walletId);
        const numberOfLinkedWallets = verifiedCredentials.filter((account) => account.walletName === ((wallet === null || wallet === void 0 ? void 0 : wallet.connector.key) || '')).length;
        // If there's only 1, it's the one being removed and we can kill the session
        if (numberOfLinkedWallets === 1) {
            yield (wallet === null || wallet === void 0 ? void 0 : wallet.connector.endSession());
        }
    }), [
        primaryWalletId,
        environmentId,
        secondaryWallets,
        verifiedCredentials,
        removedWalletsIds,
    ]);
    return callback;
};

export { useHandleUnlinkWallet };
