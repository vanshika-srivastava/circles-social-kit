'use client'
import 'react';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../events/dynamicEvents.js';
import '../../../../../_virtual/_tslib.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import { useMockContext } from '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import { isUserLinkingWallet } from '../../../shared/utils/functions/isUserLinkingWallet/isUserLinkingWallet.js';
import { useDynamicLayoutData } from '../useDynamicLayoutData/useDynamicLayoutData.js';
import { useFooterAnimationContext } from '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useAuthLayoutChecks = () => {
    var _a;
    const { view } = useViewContext();
    const { user, customPrivacyPolicy, customTermsOfServices, privacyPolicyUrl, termsOfServiceUrl, isBridgeFlow, authMode, projectSettings, } = useInternalDynamicContext();
    const { isFooterExpanded } = useFooterAnimationContext();
    const { mockedSDK } = useMockContext();
    const { helpHeaderData } = useDynamicLayoutData({
        authMode,
        view: view.type,
    });
    const displayBorderBelowHeader = (view.type !== 'wallet-list' &&
        view.type !== 'login-with-email-or-wallet-full-wallet-list' &&
        view.type !== 'multi-wallet-wallet-list' &&
        view.type !== 'login-with-wallet-only') ||
        isFooterExpanded;
    const isWalletListTypeView = view.type === 'wallet-connect-mobile-wallets-list' ||
        view.type === 'wallet-list' ||
        view.type === 'login-with-email-or-wallet-full-wallet-list' ||
        view.type === 'login-with-wallet-only';
    const showHelpContent = Boolean(helpHeaderData &&
        // Notice the negation here
        !(view.type === 'qr-code' ||
            view.type === 'no-qr-not-installed' ||
            view.type === 'wallet-used' ||
            view.type === 'chainalysis-blocked-wallet' ||
            view.type === 'wallet-sign' ||
            view.type === 'collect-user-data' ||
            view.type === 'passkey-new-domain-detected' ||
            isUserLinkingWallet(user, view.type, mockedSDK)));
    const showHeader = view.type !== 'collect-user-data' &&
        view.type !== 'no-access' &&
        view.type !== 'chainalysis-blocked-wallet' &&
        view.type !== 'wallet-locked-view' &&
        view.type !== 'gate-blocked-wallet' &&
        view.type !== 'email-wallet-otp-verification-view' &&
        view.type !== 'bridge-welcome' &&
        view.type !== 'bridge-summary' &&
        view.type !== 'bridge-next-wallet-connection' &&
        view.type !== 'passkey-intro' &&
        view.type !== 'passkey-new-domain-detected' &&
        view.type !== 'social-redirect-view' &&
        view.type !== 'collect-user-data-login-no-wallet' &&
        view.type !== 'passkey-recovery-bundle' &&
        view.type !== 'passkey-recovery-start' &&
        view.type !== 'embedded-reveal-view' &&
        view.type !== 'embedded-reveal-account-view' &&
        view.type !== 'rename-passkey' &&
        view.type !== 'create-password-view' &&
        view.type !== 'embedded-wallet-auth-choice' &&
        view.type !== 'wallet-claim-intro' &&
        view.type !== 'passkey-recovery-add-email' &&
        view.type !== 'global-wallet-confirm' &&
        view.type !== 'global-wallet-info' &&
        view.type !== 'mfa-choose-device' &&
        view.type !== 'mfa-verification';
    const showConnectedWalletProgress = isBridgeFlow &&
        (view.type === 'wallet-list' ||
            view.type === 'qr-code' ||
            view.type === 'wallet-connect-mobile-wallets-list' ||
            view.type === 'pending-connect' ||
            view.type === 'pending-signature' ||
            view.type === 'pending-signature-without-back-button' ||
            view.type === 'bridge-next-wallet-connection' ||
            view.type === 'bridge-summary');
    const showToSFooter = Boolean(!isUserLinkingWallet(user, view.type, mockedSDK) &&
        (view.type === 'wallet-list' ||
            view.type === 'wallet-connect-mobile-wallets-list' ||
            // Don't show empty footer during the login
            ((view.type === 'login-with-email-or-wallet' ||
                view.type === 'login-with-email-or-wallet-full-wallet-list' ||
                view.type === 'login-with-wallet-only' ||
                view.type === 'multi-wallet-wallet-list') &&
                (termsOfServiceUrl ||
                    privacyPolicyUrl ||
                    customPrivacyPolicy ||
                    customTermsOfServices))));
    const showDynamicFooter = Boolean((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _a === void 0 ? void 0 : _a.displayDynamicMessaging) &&
        (view.type === 'login-with-email-or-wallet' ||
            view.type === 'login-with-email-or-wallet-full-wallet-list' ||
            view.type === 'login-with-wallet-only' ||
            view.type === 'login-with-email-verification' ||
            view.type === 'login-with-sms-verification' ||
            view.type === 'verify-email' ||
            view.type === 'verify-sms' ||
            view.type === 'pending-connect' ||
            view.type === 'wallet-group' ||
            view.type === 'select-wallet-in-wallet-group' ||
            view.type === 'select-hardware-wallet' ||
            view.type === 'pending-signature' ||
            view.type === 'qr-code' ||
            view.type === 'wallet-used' ||
            view.type === 'email-wallet-otp-verification-view' ||
            view.type === 'farcaster-connect-view' ||
            view.type === 'merge-user-accounts' ||
            view.type === 'merge-user-accounts-conflicts' ||
            view.type === 'mfa-verification' ||
            view.type === 'mfa-display-backup-codes' ||
            view.type === 'mfa-recovery');
    const showCloseButton = view.type !== 'login-with-email-or-wallet-full-wallet-list' &&
        view.type !== 'login-with-email-verification' &&
        view.type !== 'login-with-sms-verification' &&
        view.type !== 'network-not-supported' &&
        view.type !== 'passkey-recovery-complete' &&
        view.type !== 'passkey-recovery-start' &&
        view.type !== 'passkey-recovery-bundle' &&
        view.type !== 'rename-passkey' &&
        view.type !== 'qr-code' &&
        view.type !== 'mfa-verification' &&
        view.type !== 'mfa-display-backup-codes' &&
        view.type !== 'mfa-recovery';
    const showBackButton = view.type === 'pending-signature' ||
        view.type === 'no-qr-not-installed' ||
        view.type === 'wallet-connect-mobile-wallets-list' ||
        view.type === 'login-with-email-verification' ||
        view.type === 'login-with-sms-verification' ||
        view.type === 'login-with-email-or-wallet-full-wallet-list' ||
        view.type === 'wallet-group' ||
        view.type === 'select-wallet-in-wallet-group' ||
        view.type === 'select-hardware-wallet' ||
        view.type === 'pending-connect' ||
        view.type === 'account-exists' ||
        view.type === 'passkey-intro' ||
        view.type === 'qr-code' ||
        view.type === 'farcaster-connect-view' ||
        view.type === 'mfa-verification' ||
        view.type === 'mfa-secure-device-help' ||
        view.type === 'merge-user-accounts-conflicts' ||
        view.type === 'mfa-recovery' ||
        (view.type === 'merge-user-accounts-with-same-email' && !user);
    const showDefaultFooter = !showConnectedWalletProgress && !showDynamicFooter && !showToSFooter;
    const shouldHideDynamicFooterSeparator = showDynamicFooter && showToSFooter;
    return {
        displayBorderBelowHeader,
        isWalletListTypeView,
        shouldHideDynamicFooterSeparator,
        showBackButton,
        showCloseButton,
        showConnectedWalletProgress,
        showDefaultFooter,
        showDynamicFooter,
        showHeader,
        showHelpContent,
        showToSFooter,
    };
};

export { useAuthLayoutChecks };
