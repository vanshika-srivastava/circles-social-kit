'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
var hasPendingMfaAction = require('../../../shared/utils/functions/hasPendingMfaAction/hasPendingMfaAction.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var useDynamicEvents = require('../events/useDynamicEvents/useDynamicEvents.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
var useMfa = require('../useMfa/useMfa.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

/**
 * This hook is used to ensure we show the correct MFA view on page refresh
 */
const useSyncMfaFlow = ({ handler: headlessHandler, } = {}) => {
    const { setShowAuthFlow, userWithMissingInfo, sdkHasLoaded } = useInternalDynamicContext.useInternalDynamicContext();
    const { setView } = ViewContext.useViewContext();
    const { getUserDevices } = useMfa.useMfa();
    // this is used to make sure we only trigger the effect once
    const triggered = React.useRef(false);
    useDynamicEvents.useInternalDynamicEvents('logout', () => {
        triggered.current = false;
    });
    React.useEffect(() => {
        var _a;
        // boilterplate: we don't want to run the sync logic if the sdk hasn't finished loading,
        // or if the effect has already been triggered
        if (!sdkHasLoaded || triggered.current) {
            return;
        }
        // this is the case when the user has fully logged in and completed all mfa steps if needed,
        // like accepting their backup codes after enrolling
        if (!userWithMissingInfo || !hasPendingMfaAction.hasPendingMfaAction(userWithMissingInfo)) {
            return;
        }
        triggered.current = true;
        // if a handler is provided, we assume "headless mode"
        if (headlessHandler) {
            setShowAuthFlow(false);
            headlessHandler();
            return;
        }
        /**
         * There are two scenarios:
         *   1. The user has not yet completed mfa
         *   2. The user has completed mfa, but has not yet acknowledged their backup codes
         *
         * In scenario 1, the user scope will contain 'requiresAdditionalAuth'. In this case, we need
         * to show the enrollment view or verification view, depending on whether the user has devices
         *
         * In scenario 2, the user scope will not contain 'requiresAdditionalAuth', and the user
         * mfaBackupCodeAcknowledgement field will be 'pending'. In this case, we need to show the
         * backup codes view
         */
        setShowAuthFlow(true);
        if ((_a = userWithMissingInfo.scope) === null || _a === void 0 ? void 0 : _a.includes('requiresAdditionalAuth')) {
            getUserDevices().then((devices) => {
                if (devices.length === 0) {
                    setView('mfa-choose-device');
                }
                else {
                    setView('mfa-verification');
                }
            });
        }
        else {
            setView('mfa-display-backup-codes');
        }
    }, [
        getUserDevices,
        sdkHasLoaded,
        setShowAuthFlow,
        setView,
        userWithMissingInfo,
        headlessHandler,
    ]);
};

exports.useSyncMfaFlow = useSyncMfaFlow;
