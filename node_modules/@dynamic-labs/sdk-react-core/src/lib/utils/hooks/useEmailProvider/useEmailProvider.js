'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { ProviderEnum } from '@dynamic-labs/sdk-api-core';
import 'react';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { dynamicEvents } from '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { isProviderEnabled } from '../../functions/isProviderEnabled/isProviderEnabled.js';
import { isTurnkeyEnabled } from '../../functions/isTurnkeyEnabled/isTurnkeyEnabled.js';
import { getEmailProvider, createEmailVerification } from '../../../data/api/email/email.js';
import '../../../store/state/user/user.js';
import '../../../config/ApiEndpoint.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import { useVerification } from '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import { useWalletItemActions } from '../useWalletItemActions/useWalletItemActions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import { useConnectWithEmail } from '../useConnectWithEmail/useConnectWithEmail.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useEmailProvider = ({ emailWalletConnector }) => {
    const { projectSettings, environmentId } = useInternalDynamicContext();
    const { setDisplayedDestination: setEmailForVerification, setVerificationUUID, } = useVerification();
    const { setView } = useViewContext();
    const { handleInstalledExtensionClick } = useWalletItemActions();
    const { connectWithEmail, loading: isEmailProviderLoading } = useConnectWithEmail({
        emailWalletConnector,
        handleConnect: handleInstalledExtensionClick,
    });
    const { providers } = projectSettings || {};
    const isInjectedWalletProviderEnabled = emailWalletConnector !== undefined;
    // this is enabled in the sense that we could use the given provider in the email form
    // for magic, as long as there are magic credentials available, then could have an email
    // address that is a magic address, even if magic was previously turned off in dashboard
    const isMagicOrBloctoEnabled = isInjectedWalletProviderEnabled &&
        (isProviderEnabled(providers || [], ProviderEnum.MagicLink) ||
            isProviderEnabled(providers || [], ProviderEnum.Blocto));
    const handleEmailOnlyLoginSubmit = (emailInput, captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
        const { email, verificationUUID } = yield createEmailVerification({
            captchaToken,
            email: emailInput,
            environmentId,
        });
        setView('login-with-email-verification');
        setEmailForVerification(email);
        setVerificationUUID(verificationUUID);
    });
    const handleMagicLinkOrBloctoSubmit = (emailInput) => __awaiter(void 0, void 0, void 0, function* () {
        yield connectWithEmail(emailInput);
    });
    const submitEmail = (emailInput, captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
        if (isMagicOrBloctoEnabled) {
            yield handleMagicLinkOrBloctoSubmit(emailInput);
            return;
        }
        yield handleEmailOnlyLoginSubmit(emailInput, captchaToken);
    });
    const handleEmailSubmitWithOptionalCaptcha = (emailInput, captchaToken) => __awaiter(void 0, void 0, void 0, function* () {
        dynamicEvents.emit('authInit', {
            email: emailInput,
            option: emailInput,
            type: 'email',
        });
        try {
            if ((emailWalletConnector !== undefined ||
                isTurnkeyEnabled(projectSettings)) &&
                (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.confirmEmailProviderForVerify)) {
                // see: https://linear.app/dynamic-labs/issue/DYN-2517
                // if confirmWalletTransfers setting is true, check api first to confirm emailProvider
                const { emailProvider } = yield getEmailProvider({
                    email: emailInput,
                    environmentId,
                });
                if (emailProvider === ProviderEnum.Dynamic) {
                    yield handleEmailOnlyLoginSubmit(emailInput, captchaToken);
                    return;
                }
            }
            yield submitEmail(emailInput, captchaToken);
        }
        catch (error) {
            dynamicEvents.emit('authFailure', {
                email: emailInput,
                option: emailInput,
                type: 'email',
            }, { error });
            throw error;
        }
    });
    return {
        handleEmailSubmitWithOptionalCaptcha,
        isEmailProviderLoading,
    };
};

export { useEmailProvider };
