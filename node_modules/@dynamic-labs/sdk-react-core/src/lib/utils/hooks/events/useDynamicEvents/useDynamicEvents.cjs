'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var dynamicEvents = require('../../../../events/dynamicEvents.cjs');

/** Allows us to subscribe to all dynamicEvents with a hook, even the internal ones */
const useInternalDynamicEvents = (event, listener) => {
    const handler = React.useRef(listener);
    handler.current = listener;
    React.useEffect(() => {
        const callback = (...args) => handler.current(...args);
        dynamicEvents.dynamicEvents.on(event, callback);
        return () => {
            dynamicEvents.dynamicEvents.off(event, callback);
        };
    }, [event]);
};
// ATTENTION
// Everything below should be made public soon, but we need to plan this out first
// Main issues:
// 1. How should we map customer callback names to our dynamic event names?
//  -> Gui's suggestion: breaking change to rename customer callbacks so they fit these events names
// 2. We would have to remove these callbacks from the useCustomerCallbacks hook
/** Which events are accessible by our clients */
const externalEvents = [
    'emailVerificationResult',
    'embeddedWalletCreated',
    'logout',
    'walletAdded',
    'mfaCompletionSuccess',
    'mfaCompletionFailure',
];
/** Allows subscribing to dynamic events directly inside components with a hook */
const useDynamicEvents = (event, listener) => {
    if (!externalEvents.includes(event))
        throw new Error(`Unrecognized event "${event}" used with useDynamicEvents`);
    useInternalDynamicEvents(event, listener);
};

exports.useDynamicEvents = useDynamicEvents;
exports.useInternalDynamicEvents = useInternalDynamicEvents;
