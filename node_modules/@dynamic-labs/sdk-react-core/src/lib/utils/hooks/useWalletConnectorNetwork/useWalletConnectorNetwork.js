'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useState } from 'react';
import { usePromise } from '../usePromise/usePromise.js';
import '../../../events/dynamicEvents.js';
import { useWalletConnectorEvent } from '../events/useWalletConnectorEvent/useWalletConnectorEvent.js';

/**
 * Sync wallet connector network.
 *
 * @param walletConnector - The WalletConnector instance to be used.
 *
 * @returns {{ network: string | number | undefined }} An object containing the current network state.
 *
 * @example
 * // Example of using the useWalletConnectorNetwork hook
 * const { network } = useWalletConnectorNetwork(walletConnector);
 *
 * // You can then use the 'network' state in your component
 * return <div>Current Network: {network}</div>;
 */
const useWalletConnectorNetwork = (walletConnector, { onChange } = { onChange: () => { } }) => {
    const [network, setNetwork] = useState();
    const { isLoading } = usePromise(() => walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.getNetwork(), {
        deps: [walletConnector],
        onResolve: (network) => {
            setNetwork(network);
        },
    });
    useWalletConnectorEvent(walletConnector || undefined, 'chainChange', ({ chain }) => {
        const parsedChain = (walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.connectedChain) === 'STARK' ? chain : parseInt(chain);
        setNetwork(parsedChain);
        onChange === null || onChange === void 0 ? void 0 : onChange(parsedChain);
    });
    /**
     * Listen to disconnect event and update the network because ArgentX
     * emits a disconnect event when the user switches network.
     */
    useWalletConnectorEvent(walletConnector || undefined, 'disconnect', () => __awaiter(void 0, void 0, void 0, function* () {
        if ((walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.key) !== 'argentx')
            return;
        const chain = yield walletConnector.getNetwork();
        setNetwork(chain);
        onChange === null || onChange === void 0 ? void 0 : onChange(chain);
    }));
    return { isLoading, network };
};

export { useWalletConnectorNetwork };
