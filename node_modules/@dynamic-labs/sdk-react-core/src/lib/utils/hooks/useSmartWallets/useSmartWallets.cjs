'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../constants/colors.cjs');
require('../../constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
var findWalletOptionFor = require('../../functions/findWalletOptionFor/findWalletOptionFor.cjs');
require('../../../context/WalletContext/WalletContext.cjs');
require('../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../../views/CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('../../../components/Input/Input.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../store/state/sendBalances.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useSmartWallets = () => {
    const { user, walletConnectorOptions } = useInternalDynamicContext.useInternalDynamicContext();
    const getSCWAccount = React.useCallback((wallet) => {
        const { verifiedCredentials } = user !== null && user !== void 0 ? user : {};
        if (!verifiedCredentials)
            return;
        // Ensure this is a SCW wallet
        const scwAccount = verifiedCredentials.find((credential) => credential.id === wallet.id);
        return (scwAccount === null || scwAccount === void 0 ? void 0 : scwAccount.walletProvider) ===
            sdkApiCore.WalletProviderEnum.SmartContractWallet
            ? scwAccount
            : undefined;
    }, [user]);
    const getEOAWallet = React.useCallback((wallet) => {
        var _a, _b, _c;
        const verifiedCredentials = user === null || user === void 0 ? void 0 : user.verifiedCredentials;
        if (!verifiedCredentials)
            return;
        // Ensure this is a SCW wallet
        const scwAccount = getSCWAccount(wallet);
        // Find the EOA account for this SCW
        const eoaAccount = verifiedCredentials.find((credential) => credential.id === (scwAccount === null || scwAccount === void 0 ? void 0 : scwAccount.signerRefId));
        if (!(eoaAccount === null || eoaAccount === void 0 ? void 0 : eoaAccount.address) || !(eoaAccount === null || eoaAccount === void 0 ? void 0 : eoaAccount.chain))
            return;
        const { walletConnector } = (_a = findWalletOptionFor.findWalletOptionFor(eoaAccount, walletConnectorOptions)) !== null && _a !== void 0 ? _a : {};
        // It's always authenticated, unless it's a turnkey wallet that still hasn't created a passkey
        const isTurnkey = (_b = eoaAccount.walletName) === null || _b === void 0 ? void 0 : _b.startsWith('turnkey');
        const isAuthenticated = !isTurnkey ||
            Boolean((_c = eoaAccount.walletProperties) === null || _c === void 0 ? void 0 : _c.isAuthenticatorAttached);
        return walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.createWallet({
            address: eoaAccount.address,
            chain: walletConnector.connectedChain,
            connector: walletConnector,
            id: eoaAccount.id,
            isAuthenticated,
            key: walletConnector.key,
        });
    }, [getSCWAccount, user === null || user === void 0 ? void 0 : user.verifiedCredentials, walletConnectorOptions]);
    const getSmartWallet = React.useCallback((wallet) => {
        var _a;
        const verifiedCredentials = user === null || user === void 0 ? void 0 : user.verifiedCredentials;
        if (!verifiedCredentials)
            return;
        // Get the EOA account for this wallet
        const eoaAccount = verifiedCredentials.find((credential) => credential.id === wallet.id);
        // Find the smart wallet account for this EOA
        const scwAccount = verifiedCredentials.find((credential) => credential.signerRefId === (eoaAccount === null || eoaAccount === void 0 ? void 0 : eoaAccount.id));
        if (!(scwAccount === null || scwAccount === void 0 ? void 0 : scwAccount.address) || !(scwAccount === null || scwAccount === void 0 ? void 0 : scwAccount.chain))
            return;
        const { walletConnector } = (_a = findWalletOptionFor.findWalletOptionFor(scwAccount, walletConnectorOptions)) !== null && _a !== void 0 ? _a : {};
        return walletConnector === null || walletConnector === void 0 ? void 0 : walletConnector.createWallet({
            address: scwAccount.address,
            chain: walletConnector.connectedChain,
            connector: walletConnector,
            id: scwAccount.id,
            isAuthenticated: true,
            key: walletConnector.key,
        });
    }, [user === null || user === void 0 ? void 0 : user.verifiedCredentials, walletConnectorOptions]);
    return React.useMemo(() => ({
        getEOAWallet,
        getSmartWallet,
        isSmartWallet: (wallet) => getSCWAccount(wallet) !== undefined,
    }), [getEOAWallet, getSCWAccount, getSmartWallet]);
};

exports.useSmartWallets = useSmartWallets;
