'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useMemo } from 'react';
import { isHardwareWalletConnector } from '@dynamic-labs/wallet-connector-core';
import { useWalletBookContext, getWalletGroup } from '@dynamic-labs/wallet-book';
import { DynamicError } from '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import '../../constants/colors.js';
import '../../constants/values.js';
import { isWalletGroup } from '../../functions/walletListBuilder/utils/isWalletGroup/isWalletGroup.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import { useWalletItemActions } from '../useWalletItemActions/useWalletItemActions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import { groupWalletOptions } from '../../functions/walletListBuilder/utils/groupWalletOptions/groupWalletOptions.js';
import '../../../context/FooterAnimationContext/index.js';
import { useWalletGroupContext } from '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const embeddedWalletsKeys = [
    'magicemailotp',
    'magiclink',
    'magicsocial',
    'turnkey',
    'turnkeyhd',
    'coinbasempc',
    'zerodev',
];
const useWalletOptions = () => {
    const { walletConnectorOptions, setShowAuthFlow } = useInternalDynamicContext();
    const { walletBook } = useWalletBookContext();
    const { setView } = useViewContext();
    const { navigateToWalletGroup } = useWalletGroupContext();
    const { handleWalletItemClick } = useWalletItemActions();
    const walletOptions = useMemo(() => {
        var _a;
        return (_a = walletConnectorOptions === null || walletConnectorOptions === void 0 ? void 0 : walletConnectorOptions.filter((option) => !embeddedWalletsKeys.includes(option.walletConnector.key)).map((option) => {
            const groupName = option.group
                ? getWalletGroup(walletBook, option.group).name
                : undefined;
            return {
                group: option.group,
                groupName,
                key: option.walletConnector.key,
                name: option.name,
            };
        })) !== null && _a !== void 0 ? _a : [];
    }, [walletBook, walletConnectorOptions]);
    const selectWalletOption = (walletKey) => __awaiter(void 0, void 0, void 0, function* () {
        const group = groupWalletOptions(walletBook, walletConnectorOptions);
        const walletOption = group.find((wallet) => wallet.key === walletKey);
        logger.logVerboseTroubleshootingMessage('[useWalletOptions] selectWalletOption', {
            walletKey,
            walletOption: walletOption === null || walletOption === void 0 ? void 0 : walletOption.key,
        });
        if (!walletOption) {
            throw new DynamicError('Invalid wallet option key provided.');
        }
        if (isWalletGroup(walletOption)) {
            navigateToWalletGroup(walletOption);
        }
        else if (isHardwareWalletConnector(walletOption.walletConnector) &&
            walletOption.walletConnector.canConnectWithHardwareWallet()) {
            setView('select-hardware-wallet', {
                onSelectWallet: handleWalletItemClick,
                wallet: walletOption,
            });
        }
        else {
            handleWalletItemClick(walletOption);
        }
        setShowAuthFlow(true);
    });
    return {
        selectWalletOption,
        walletOptions,
    };
};

export { useWalletOptions };
