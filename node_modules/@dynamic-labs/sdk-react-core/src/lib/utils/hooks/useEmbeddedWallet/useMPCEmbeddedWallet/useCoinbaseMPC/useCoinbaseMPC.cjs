'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../../_virtual/_tslib.cjs');
var React = require('react');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
var createUserProfile = require('../../../../functions/createUserProfile/createUserProfile.cjs');
var findEmbeddedWalletFromVerifiedCredentials = require('../../../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.cjs');
require('../../../../constants/values.cjs');
var errors = require('../../../../constants/errors.cjs');
require('@dynamic-labs/multi-wallet');
var logger = require('../../../../../shared/logger.cjs');
require('../../../../constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
require('../../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var generateRandomPassword = require('../../../../../shared/utils/functions/generateRandomPassword/generateRandomPassword.cjs');
require('../../../../../store/state/loadingAndLifecycle.cjs');
require('../../../../../shared/consts/index.cjs');
var getVerifyArgs = require('../../../../functions/getVerifyArgs/getVerifyArgs.cjs');
var findCoinbaseMPCWallet = require('../../../../functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.cjs');
var getCoinbaseMPCConnectorFetchers = require('../../../../functions/getCoinbaseMPCConnectorFetchers/getCoinbaseMPCConnectorFetchers.cjs');
require('../../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../../context/DynamicContext/DynamicContext.cjs');
var dynamicEvents = require('../../../../../events/dynamicEvents.cjs');
require('../../../../../context/CaptchaContext/CaptchaContext.cjs');
var ErrorContext = require('../../../../../context/ErrorContext/ErrorContext.cjs');
require('../../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../../config/ApiEndpoint.cjs');
require('../../../../../store/state/user/user.cjs');
require('../../../../../locale/locale.cjs');
var wallets = require('../../../../../data/api/wallets/wallets.cjs');
var getSiweStatement = require('../../../../functions/getSiweStatement/getSiweStatement.cjs');
require('../../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../../context/WalletContext/WalletContext.cjs');
require('../../useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../../../context/ThemeContext/ThemeContext.cjs');
require('../../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../../../context/MockContext/MockContext.cjs');
require('../../../../../views/CollectUserDataView/useFields.cjs');
require('../../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../../store/state/environmentId.cjs');
require('../../../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../../components/Alert/Alert.cjs');
require('../../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../../components/IconButton/IconButton.cjs');
require('../../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../../components/Input/Input.cjs');
require('../../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../../components/Popper/Popper/Popper.cjs');
require('../../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../../context/FooterAnimationContext/index.cjs');
require('../../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../../store/state/sendBalances.cjs');
require('../../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../../../polyfills.cjs');
require('../../../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../../../context/FundingContext/FundingContext.cjs');
require('../../../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const DYNAMIC_PASSWORD_LENGTH = 20;
const useCoinbaseMPC = () => {
    const { user, setPrimaryWalletId, walletConnectorOptions, environmentId, consumeNonce, displaySiweStatement, appName, siweStatement, handleLogOut, setShowAuthFlow, } = useInternalDynamicContext.useInternalDynamicContext();
    const { setError } = ErrorContext.useErrorContext();
    const returnExistingCoinbaseMPCWallet = React.useCallback((validatedUser, connector, embeddedWalletVerifiedCredential) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        connector.setVerifiedCredentials(validatedUser.verifiedCredentials);
        setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
        const coinbaseMPCWallet = connector.createWallet({
            address: (yield (connector === null || connector === void 0 ? void 0 : connector.getAddress())) || '',
            chain: connector.connectedChain,
            connector,
            id: embeddedWalletVerifiedCredential.id,
            isAuthenticated: true,
            key: (_a = embeddedWalletVerifiedCredential.walletName) !== null && _a !== void 0 ? _a : connector.key,
        });
        return coinbaseMPCWallet;
    }), [setPrimaryWalletId]);
    const linkCoinbaseMPCWallet = React.useCallback((_b) => _tslib.__awaiter(void 0, [_b], void 0, function* ({ connector, backupCode, password, source, }) {
        const nonce = consumeNonce();
        if (nonce === undefined)
            throw new utils.DynamicError('Missing nonce');
        const address = yield connector.getAddress();
        if (!address)
            throw new utils.DynamicError('Missing address');
        const verifyArgs = yield getVerifyArgs.getVerifyArgs({
            displaySiweStatement,
            environmentId,
            nonce,
            publicWalletAddress: address,
            siweStatement: getSiweStatement.getSiweStatement({ appName, siweStatement }),
            walletConnector: connector,
            walletProvider: 'embeddedWallet',
        });
        const passcodeArgs = source === sdkApiCore.PasswordSourceTypeEnum.Dynamic
            ? { password, passwordSource: source }
            : {};
        const response = yield wallets.linkWallet(environmentId, Object.assign(Object.assign(Object.assign({}, passcodeArgs), verifyArgs), { backup: backupCode }));
        if (!response) {
            throw new utils.DynamicError('Unable to link wallet');
        }
        const updatedUserProfile = createUserProfile.createUserProfileFromSdkUser(response.user);
        const newSelectedCredentialWallet = updatedUserProfile.verifiedCredentials.find((cred) => cred.id === updatedUserProfile.lastVerifiedCredentialId &&
            cred.format === 'blockchain');
        if (!newSelectedCredentialWallet) {
            throw new utils.DynamicError('No primary wallet found');
        }
        setPrimaryWalletId(newSelectedCredentialWallet.id);
        connector.setVerifiedCredentials(updatedUserProfile.verifiedCredentials);
        return { newSelectedCredentialWallet, updatedUser: updatedUserProfile };
    }), [
        appName,
        consumeNonce,
        displaySiweStatement,
        environmentId,
        setPrimaryWalletId,
        siweStatement,
    ]);
    const createNewCoinbaseMPCWallet = React.useCallback((connector, password) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _c;
        const initialWalletPassword = password
            ? password
            : generateRandomPassword.generateRandomPassword(DYNAMIC_PASSWORD_LENGTH);
        const source = password
            ? sdkApiCore.PasswordSourceTypeEnum.User
            : sdkApiCore.PasswordSourceTypeEnum.Dynamic;
        try {
            const backupCode = yield connector.generateWallet(source, initialWalletPassword);
            const { updatedUser, newSelectedCredentialWallet } = yield linkCoinbaseMPCWallet({
                backupCode,
                connector,
                password: initialWalletPassword,
                source,
            });
            const coinbaseMPCWallet = connector.createWallet({
                address: (yield (connector === null || connector === void 0 ? void 0 : connector.getAddress())) || '',
                chain: connector === null || connector === void 0 ? void 0 : connector.connectedChain,
                connector,
                id: newSelectedCredentialWallet.id,
                isAuthenticated: true,
                key: (_c = newSelectedCredentialWallet.walletName) !== null && _c !== void 0 ? _c : connector.key,
            });
            dynamicEvents.dynamicEvents.emit('embeddedWalletCreated', coinbaseMPCWallet, newSelectedCredentialWallet, updatedUser);
            return coinbaseMPCWallet;
        }
        catch (error) {
            logger.logger.error(error);
            if (error instanceof utils.DynamicError &&
                error.code === 'create_embedded_wallet_error') {
                yield handleLogOut();
                setError(error.message);
            }
        }
        return undefined;
    }), [linkCoinbaseMPCWallet, handleLogOut, setError]);
    const createCoinbaseMPCWallet = React.useCallback((...args_1) => _tslib.__awaiter(void 0, [...args_1], void 0, function* (chains = [sdkApiCore.EmbeddedWalletChainEnum.Evm], password) {
        var _d;
        if (!user) {
            throw new utils.DynamicError(errors.USER_NOT_LOGGED_IN);
        }
        const connector = (_d = findCoinbaseMPCWallet.findCoinbaseMPCWallet(walletConnectorOptions)) === null || _d === void 0 ? void 0 : _d.walletConnector;
        if (!connector || !walletConnectorCore.isCoinbaseMpcWalletConnector(connector)) {
            const error = new utils.DynamicError('CoinbaseWaaSWalletConnectors not found');
            logger.logger.error('Failed to create embedded wallet', error);
            dynamicEvents.dynamicEvents.emit('embeddedWalletFailed', error);
            setError(error.message);
            throw error;
        }
        setShowAuthFlow(false);
        const { fetchAuthToken } = getCoinbaseMPCConnectorFetchers.getCoinbaseMPCConnectorFetchers({
            environmentId,
        });
        if (fetchAuthToken) {
            connector.setAuthTokenFetcher(fetchAuthToken);
        }
        const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials.findEmbeddedWalletFromVerifiedCredentials(user, chains);
        // if user already has embedded wallet, set it as primary wallet and return
        if (embeddedWalletVerifiedCredential) {
            return returnExistingCoinbaseMPCWallet(user, connector, embeddedWalletVerifiedCredential);
        }
        return createNewCoinbaseMPCWallet(connector, password);
    }), [
        user,
        walletConnectorOptions,
        setShowAuthFlow,
        environmentId,
        createNewCoinbaseMPCWallet,
        setError,
        returnExistingCoinbaseMPCWallet,
    ]);
    return {
        createCoinbaseMPCWallet,
    };
};

exports.useCoinbaseMPC = useCoinbaseMPC;
