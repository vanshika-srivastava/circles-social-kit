'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { isCoinbaseMpcWalletConnector } from '@dynamic-labs/wallet-connector-core';
import { DynamicError, EmbeddedWalletException } from '@dynamic-labs/utils';
import '../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import '../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../constants/colors.js';
import '../../../constants/values.js';
import '../../../../store/state/loadingAndLifecycle.js';
import '../../../../shared/consts/index.js';
import '../../../../events/dynamicEvents.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import { findEmbeddedWalletFromVerifiedCredentials } from '../../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.js';
import { USER_NOT_LOGGED_IN } from '../../../constants/errors.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { getUserWalletsFromVerifiedCredentials } from '../../../functions/getUserWalletsFromVerifiedCredentials/getUserWalletsFromVerifiedCredentials.js';
import { findCoinbaseMPCWallet } from '../../../functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.js';
import { requiresPasswordForEmbeddedWallet } from '../../../functions/requiresPasswordForEmbeddedWallet/requiresPasswordForEmbeddedWallet.js';
import { requiresPasswordForEmbeddedWalletOnSignup } from '../../../functions/requiresPasswordForEmbeddedWalletOnSignup/requiresPasswordForEmbeddedWalletOnSignup.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import { hasEmbeddedWallet } from '../../../functions/hasEmbeddedWallet/hasEmbeddedWallet.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import { useWalletContext } from '../../../../context/WalletContext/WalletContext.js';
import { validateMPCProviderEnabled } from '../../../validations/validateMPCProviderEnabled/validateMPCProviderEnabled.js';
import '../useSecureEnclaveEmbeddedWallet/constants.js';
import { useEmbeddedWalletPassword } from '../../useEmbeddedWalletPassword/useEmbeddedWalletPassword.js';
import { useCoinbaseMPC } from './useCoinbaseMPC/useCoinbaseMPC.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/environmentId.js';
import '../../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../../polyfills.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../../context/FundingContext/FundingContext.js';
import '../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

// Hook exposed to customers and used internally to trigger embedded wallet creation
/**
 * @returns {
 *  createEmbeddedWallet, - creates Dynamic or MPC embedded wallet according to the settings
 *  createPassword, - creates MPC embedded wallet password
 *  isLoadingEmbeddedWallet, - loading state of the embedded wallet
 *  userHasEmbeddedWallet, - checks if the user has an embedded wallet
 * }
 */
const useMPCEmbeddedWallet = () => {
    const { projectSettings, walletConnectorOptions, user } = useInternalDynamicContext();
    const { createPassword: internalCreatePassword } = useEmbeddedWalletPassword();
    const { createCoinbaseMPCWallet } = useCoinbaseMPC();
    const { isLoadingEmbeddedWallet, setIsLoadingEmbeddedWallet } = useWalletContext();
    const userHasEmbeddedWallet = () => hasEmbeddedWallet(user, 'coinbase');
    const createPassword = useCallback((showIntro) => __awaiter(void 0, void 0, void 0, function* () { return internalCreatePassword(showIntro); }), [internalCreatePassword]);
    const prepareToCreateMPCWallet = useCallback((chains) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        if (!user) {
            throw new DynamicError(USER_NOT_LOGGED_IN);
        }
        const userWalletsCredentials = getUserWalletsFromVerifiedCredentials(user);
        const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user, chains);
        const isManualMode = ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk.embeddedWallets) === null || _a === void 0 ? void 0 : _a.automaticEmbeddedWalletCreation) === false;
        // if user has a wallet and it's not embedded,
        // throw error to follow another flow and set up the right wallet
        // However, if the user is in manual mode continue.
        if ((userWalletsCredentials === null || userWalletsCredentials === void 0 ? void 0 : userWalletsCredentials.length) &&
            !embeddedWalletVerifiedCredential &&
            !isManualMode) {
            throw new EmbeddedWalletException('User already has a linked branded wallet, and manual mode creation is not enabled.');
        }
        validateMPCProviderEnabled(projectSettings);
        const connector = (_b = findCoinbaseMPCWallet(walletConnectorOptions)) === null || _b === void 0 ? void 0 : _b.walletConnector;
        if (!isCoinbaseMpcWalletConnector(connector)) {
            throw new Error('Coinbase MPC wallet connector not found');
        }
        // since we can dynamically change the settings from demov2, we need to set
        // requires password prop here in case the connector has already been initialized with a different value
        connector.setRequiredPassword((_c = requiresPasswordForEmbeddedWallet(projectSettings)) !== null && _c !== void 0 ? _c : false);
    }), [user, projectSettings, walletConnectorOptions]);
    const canCreateMPCWallet = useCallback((chains) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            yield prepareToCreateMPCWallet(chains);
            return true;
        }
        catch (e) {
            return false;
        }
    }), [prepareToCreateMPCWallet]);
    const createEmbeddedWallet = useCallback((chains) => __awaiter(void 0, void 0, void 0, function* () {
        if (!user) {
            throw new DynamicError(USER_NOT_LOGGED_IN);
        }
        yield prepareToCreateMPCWallet(chains);
        setIsLoadingEmbeddedWallet(true);
        let password;
        const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user, chains);
        if (!embeddedWalletVerifiedCredential &&
            requiresPasswordForEmbeddedWalletOnSignup(projectSettings)) {
            password = yield internalCreatePassword(false, true);
        }
        const wallet = yield createCoinbaseMPCWallet(chains, password);
        setIsLoadingEmbeddedWallet(false);
        return wallet;
    }), [
        user,
        createCoinbaseMPCWallet,
        internalCreatePassword,
        prepareToCreateMPCWallet,
        projectSettings,
        setIsLoadingEmbeddedWallet,
    ]);
    const revealEmbeddedWalletKey = () => __awaiter(void 0, void 0, void 0, function* () {
        throw new DynamicError('Coinbase MPC wallet does not support headless reveal yet');
    });
    return {
        canCreateMPCWallet,
        createEmbeddedWallet,
        createPassword,
        isLoadingEmbeddedWallet,
        revealEmbeddedWalletKey,
        userHasEmbeddedWallet,
    };
};

export { useMPCEmbeddedWallet };
