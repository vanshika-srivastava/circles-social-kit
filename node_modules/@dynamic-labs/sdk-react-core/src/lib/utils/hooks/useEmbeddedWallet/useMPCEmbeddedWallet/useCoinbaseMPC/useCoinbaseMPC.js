'use client'
import { __awaiter } from '../../../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { PasswordSourceTypeEnum, EmbeddedWalletChainEnum } from '@dynamic-labs/sdk-api-core';
import { isCoinbaseMpcWalletConnector } from '@dynamic-labs/wallet-connector-core';
import { DynamicError } from '@dynamic-labs/utils';
import { createUserProfileFromSdkUser } from '../../../../functions/createUserProfile/createUserProfile.js';
import { findEmbeddedWalletFromVerifiedCredentials } from '../../../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.js';
import '../../../../constants/values.js';
import { USER_NOT_LOGGED_IN } from '../../../../constants/errors.js';
import '@dynamic-labs/multi-wallet';
import { logger } from '../../../../../shared/logger.js';
import '../../../../constants/colors.js';
import 'react-international-phone';
import '@dynamic-labs/iconic';
import 'react/jsx-runtime';
import '../../../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import { generateRandomPassword } from '../../../../../shared/utils/functions/generateRandomPassword/generateRandomPassword.js';
import '../../../../../store/state/loadingAndLifecycle.js';
import '../../../../../shared/consts/index.js';
import { getVerifyArgs } from '../../../../functions/getVerifyArgs/getVerifyArgs.js';
import { findCoinbaseMPCWallet } from '../../../../functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.js';
import { getCoinbaseMPCConnectorFetchers } from '../../../../functions/getCoinbaseMPCConnectorFetchers/getCoinbaseMPCConnectorFetchers.js';
import '../../../../../store/state/projectSettings/projectSettings.js';
import '../../../../../context/DynamicContext/DynamicContext.js';
import { dynamicEvents } from '../../../../../events/dynamicEvents.js';
import '../../../../../context/CaptchaContext/CaptchaContext.js';
import { useErrorContext } from '../../../../../context/ErrorContext/ErrorContext.js';
import '../../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../../config/ApiEndpoint.js';
import '../../../../../store/state/user/user.js';
import '../../../../../locale/locale.js';
import { linkWallet } from '../../../../../data/api/wallets/wallets.js';
import { getSiweStatement } from '../../../../functions/getSiweStatement/getSiweStatement.js';
import '../../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../../context/WalletContext/WalletContext.js';
import '../../useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../../context/ThemeContext/ThemeContext.js';
import '../../../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../../../context/MockContext/MockContext.js';
import '../../../../../views/CollectUserDataView/useFields.js';
import '../../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../../store/state/environmentId.js';
import '../../../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../../components/Alert/Alert.js';
import '../../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../../components/IconButton/IconButton.js';
import '../../../../../components/InlineWidget/InlineWidget.js';
import '../../../../../components/Input/Input.js';
import '../../../../../components/IsBrowser/IsBrowser.js';
import '../../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../../components/Popper/Popper/Popper.js';
import '../../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../../context/FooterAnimationContext/index.js';
import '../../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../../store/state/sendBalances.js';
import '../../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../../../polyfills.js';
import '../../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../../../context/FundingContext/FundingContext.js';
import '../../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const DYNAMIC_PASSWORD_LENGTH = 20;
const useCoinbaseMPC = () => {
    const { user, setPrimaryWalletId, walletConnectorOptions, environmentId, consumeNonce, displaySiweStatement, appName, siweStatement, handleLogOut, setShowAuthFlow, } = useInternalDynamicContext();
    const { setError } = useErrorContext();
    const returnExistingCoinbaseMPCWallet = useCallback((validatedUser, connector, embeddedWalletVerifiedCredential) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        connector.setVerifiedCredentials(validatedUser.verifiedCredentials);
        setPrimaryWalletId(embeddedWalletVerifiedCredential.id);
        const coinbaseMPCWallet = connector.createWallet({
            address: (yield (connector === null || connector === void 0 ? void 0 : connector.getAddress())) || '',
            chain: connector.connectedChain,
            connector,
            id: embeddedWalletVerifiedCredential.id,
            isAuthenticated: true,
            key: (_a = embeddedWalletVerifiedCredential.walletName) !== null && _a !== void 0 ? _a : connector.key,
        });
        return coinbaseMPCWallet;
    }), [setPrimaryWalletId]);
    const linkCoinbaseMPCWallet = useCallback((_b) => __awaiter(void 0, [_b], void 0, function* ({ connector, backupCode, password, source, }) {
        const nonce = consumeNonce();
        if (nonce === undefined)
            throw new DynamicError('Missing nonce');
        const address = yield connector.getAddress();
        if (!address)
            throw new DynamicError('Missing address');
        const verifyArgs = yield getVerifyArgs({
            displaySiweStatement,
            environmentId,
            nonce,
            publicWalletAddress: address,
            siweStatement: getSiweStatement({ appName, siweStatement }),
            walletConnector: connector,
            walletProvider: 'embeddedWallet',
        });
        const passcodeArgs = source === PasswordSourceTypeEnum.Dynamic
            ? { password, passwordSource: source }
            : {};
        const response = yield linkWallet(environmentId, Object.assign(Object.assign(Object.assign({}, passcodeArgs), verifyArgs), { backup: backupCode }));
        if (!response) {
            throw new DynamicError('Unable to link wallet');
        }
        const updatedUserProfile = createUserProfileFromSdkUser(response.user);
        const newSelectedCredentialWallet = updatedUserProfile.verifiedCredentials.find((cred) => cred.id === updatedUserProfile.lastVerifiedCredentialId &&
            cred.format === 'blockchain');
        if (!newSelectedCredentialWallet) {
            throw new DynamicError('No primary wallet found');
        }
        setPrimaryWalletId(newSelectedCredentialWallet.id);
        connector.setVerifiedCredentials(updatedUserProfile.verifiedCredentials);
        return { newSelectedCredentialWallet, updatedUser: updatedUserProfile };
    }), [
        appName,
        consumeNonce,
        displaySiweStatement,
        environmentId,
        setPrimaryWalletId,
        siweStatement,
    ]);
    const createNewCoinbaseMPCWallet = useCallback((connector, password) => __awaiter(void 0, void 0, void 0, function* () {
        var _c;
        const initialWalletPassword = password
            ? password
            : generateRandomPassword(DYNAMIC_PASSWORD_LENGTH);
        const source = password
            ? PasswordSourceTypeEnum.User
            : PasswordSourceTypeEnum.Dynamic;
        try {
            const backupCode = yield connector.generateWallet(source, initialWalletPassword);
            const { updatedUser, newSelectedCredentialWallet } = yield linkCoinbaseMPCWallet({
                backupCode,
                connector,
                password: initialWalletPassword,
                source,
            });
            const coinbaseMPCWallet = connector.createWallet({
                address: (yield (connector === null || connector === void 0 ? void 0 : connector.getAddress())) || '',
                chain: connector === null || connector === void 0 ? void 0 : connector.connectedChain,
                connector,
                id: newSelectedCredentialWallet.id,
                isAuthenticated: true,
                key: (_c = newSelectedCredentialWallet.walletName) !== null && _c !== void 0 ? _c : connector.key,
            });
            dynamicEvents.emit('embeddedWalletCreated', coinbaseMPCWallet, newSelectedCredentialWallet, updatedUser);
            return coinbaseMPCWallet;
        }
        catch (error) {
            logger.error(error);
            if (error instanceof DynamicError &&
                error.code === 'create_embedded_wallet_error') {
                yield handleLogOut();
                setError(error.message);
            }
        }
        return undefined;
    }), [linkCoinbaseMPCWallet, handleLogOut, setError]);
    const createCoinbaseMPCWallet = useCallback((...args_1) => __awaiter(void 0, [...args_1], void 0, function* (chains = [EmbeddedWalletChainEnum.Evm], password) {
        var _d;
        if (!user) {
            throw new DynamicError(USER_NOT_LOGGED_IN);
        }
        const connector = (_d = findCoinbaseMPCWallet(walletConnectorOptions)) === null || _d === void 0 ? void 0 : _d.walletConnector;
        if (!connector || !isCoinbaseMpcWalletConnector(connector)) {
            const error = new DynamicError('CoinbaseWaaSWalletConnectors not found');
            logger.error('Failed to create embedded wallet', error);
            dynamicEvents.emit('embeddedWalletFailed', error);
            setError(error.message);
            throw error;
        }
        setShowAuthFlow(false);
        const { fetchAuthToken } = getCoinbaseMPCConnectorFetchers({
            environmentId,
        });
        if (fetchAuthToken) {
            connector.setAuthTokenFetcher(fetchAuthToken);
        }
        const embeddedWalletVerifiedCredential = findEmbeddedWalletFromVerifiedCredentials(user, chains);
        // if user already has embedded wallet, set it as primary wallet and return
        if (embeddedWalletVerifiedCredential) {
            return returnExistingCoinbaseMPCWallet(user, connector, embeddedWalletVerifiedCredential);
        }
        return createNewCoinbaseMPCWallet(connector, password);
    }), [
        user,
        walletConnectorOptions,
        setShowAuthFlow,
        environmentId,
        createNewCoinbaseMPCWallet,
        setError,
        returnExistingCoinbaseMPCWallet,
    ]);
    return {
        createCoinbaseMPCWallet,
    };
};

export { useCoinbaseMPC };
