'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useCallback } from 'react';
import { WalletProviderEnum } from '@dynamic-labs/sdk-api-core';
import { DynamicError, StorageService } from '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import { PRIMARY_WALLET_ID } from '../../constants/localStorage.js';
import '../../constants/colors.js';
import '../../constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../events/dynamicEvents.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import { findEmbeddedWalletFromVerifiedCredentials } from '../../functions/findEmbeddedWalletFromVerifiedCredentials/findEmbeddedWalletFromVerifiedCredentials.js';
import { USER_NOT_LOGGED_IN } from '../../constants/errors.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { isTurnkeyEnabled } from '../../functions/isTurnkeyEnabled/isTurnkeyEnabled.js';
import { isCoinbaseWaasEnabled } from '../../functions/isCoinbaseWaasEnabled/isCoinbaseWaasEnabled.js';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import { hasEmbeddedWallet } from '../../functions/hasEmbeddedWallet/hasEmbeddedWallet.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import { findPrimaryEmbeddedChain } from '../../../views/Passkey/utils/findPrimaryEmbeddedChain/findPrimaryEmbeddedChain.js';
import { useWalletContext } from '../../../context/WalletContext/WalletContext.js';
import { useIsTurnkeyWallet } from '../useIsTurnkeyWallet/useIsTurnkeyWallet.js';
import { useSecureEnclaveEmbeddedWallet } from './useSecureEnclaveEmbeddedWallet/useSecureEnclaveEmbeddedWallet.js';
import './useSecureEnclaveEmbeddedWallet/constants.js';
import { useMPCEmbeddedWallet } from './useMPCEmbeddedWallet/useMPCEmbeddedWallet.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

// Hook exposed to customers and used internally to trigger embedded wallet creation
/**
 * @returns {
 *  createEmbeddedWallet, - creates Dynamic embedded wallet according to the settings
 *  createOrRestoreSession, - creates or restores session for the embedded wallet
 *  createPasskey, - creates passkey for the embedded wallet
 *  createPassword, - creates MPC embedded wallet password
 *  getPasskeys, - gets passkeys for the embedded wallet
 *  isLoadingEmbeddedWallet, - loading state of the embedded wallet
 *  isSessionActive, - checks if the session is active for the embedded wallet
 *  revealWalletKey, - reveals the private key or recovery phrase for the embedded wallet
 *  sendOneTimeCode, - sends one time code for the embedded wallet
 *  userHasEmbeddedWallet, - checks if the user has an embedded wallet
 * }
 */
const useEmbeddedWallet = () => {
    const { user, projectSettings, setPrimaryWalletId } = useInternalDynamicContext();
    const { isTurnkeyWallet } = useIsTurnkeyWallet();
    const { createEmbeddedWallet: createMPCWallet, canCreateMPCWallet, createPassword, revealEmbeddedWalletKey: revealCoinbaseMPCEmbeddedWalletKey, } = useMPCEmbeddedWallet();
    const { createEmbeddedWallet: createTurnkeyEmbeddedWallet, createEmbeddedWalletAccount, createOrRestoreSession, createPasskey, revealEmbeddedWalletKey: revealTurnkeyEmbeddedWalletKey, getPasskeys, isSessionActive, sendOneTimeCode, getWalletVersion: getTurnkeyWalletVersion, } = useSecureEnclaveEmbeddedWallet();
    const { isLoadingEmbeddedWallet } = useWalletContext();
    const userHasEmbeddedWallet = useCallback(() => hasEmbeddedWallet(user), [user]);
    const getWalletVersion = useCallback(() => {
        if (!user) {
            throw new DynamicError(USER_NOT_LOGGED_IN);
        }
        if (!userHasEmbeddedWallet()) {
            throw new DynamicError('Embedded wallet not found');
        }
        if (isTurnkeyWallet) {
            return getTurnkeyWalletVersion();
        }
        return undefined;
    }, [getTurnkeyWalletVersion, isTurnkeyWallet, user, userHasEmbeddedWallet]);
    /**
     * Creates Dynamic embedded wallet according to the settings
     * @param chains - array of chains to create the wallet for
     * @param options - options for the wallet creation
     * @returns Promise<Wallet | undefined> - created wallet object
     */
    const createEmbeddedWallet = useCallback((chains, options) => __awaiter(void 0, void 0, void 0, function* () {
        if (yield canCreateMPCWallet(chains)) {
            const wallet = yield createMPCWallet(chains);
            return wallet;
        }
        const wallet = yield createTurnkeyEmbeddedWallet(chains, options);
        return wallet;
    }), [canCreateMPCWallet, createMPCWallet, createTurnkeyEmbeddedWallet]);
    /**
     * Reveals the private key or recovery phrase for the embedded wallet
     * @param options - options for revealing the wallet key
     * @returns Promise<boolean> - true if the key was revealed successfully
     */
    const revealWalletKey = (options) => __awaiter(void 0, void 0, void 0, function* () {
        if (!user) {
            throw new DynamicError(USER_NOT_LOGGED_IN);
        }
        if (!userHasEmbeddedWallet()) {
            throw new DynamicError('Embedded wallet not found');
        }
        if (isTurnkeyWallet) {
            return revealTurnkeyEmbeddedWalletKey(options);
        }
        return revealCoinbaseMPCEmbeddedWalletKey();
    });
    const shouldAutoCreateEmbeddedWallet = useCallback((verifiedUser) => {
        var _a, _b, _c, _d, _e;
        const hasEmbeddedWalletProviderEnabled = isTurnkeyEnabled(projectSettings) ||
            isCoinbaseWaasEnabled(projectSettings);
        const hasPrimaryWallet = StorageService.getItem(PRIMARY_WALLET_ID);
        if (!hasEmbeddedWalletProviderEnabled || hasPrimaryWallet) {
            return false;
        }
        // Turnkey specific rules
        if (verifiedUser) {
            const primaryEmbeddedChain = findPrimaryEmbeddedChain(projectSettings);
            const embeddedWalletVerifiedCredentialId = (_a = findEmbeddedWalletFromVerifiedCredentials(verifiedUser, [
                primaryEmbeddedChain,
            ])) === null || _a === void 0 ? void 0 : _a.id;
            const AAWalletCredentialId = (_c = (_b = verifiedUser.verifiedCredentials) === null || _b === void 0 ? void 0 : _b.find((vc) => vc.walletProvider === WalletProviderEnum.SmartContractWallet)) === null || _c === void 0 ? void 0 : _c.id;
            const targetPrimaryWalletId = AAWalletCredentialId
                ? AAWalletCredentialId
                : embeddedWalletVerifiedCredentialId;
            if (targetPrimaryWalletId) {
                setPrimaryWalletId(targetPrimaryWalletId);
                return false;
            }
        }
        if (
        // if coinbase is enabled it should still call createWallet, despite the turnkey rules
        !isCoinbaseWaasEnabled(projectSettings) &&
            isTurnkeyEnabled(projectSettings) &&
            !((_e = (_d = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _d === void 0 ? void 0 : _d.embeddedWallets) === null || _e === void 0 ? void 0 : _e.automaticEmbeddedWalletCreation)) {
            return false;
        }
        return true;
    }, [projectSettings, setPrimaryWalletId]);
    return {
        createEmbeddedWallet,
        createEmbeddedWalletAccount,
        createOrRestoreSession,
        createPasskey,
        createPassword,
        getPasskeys,
        getWalletVersion,
        isLoadingEmbeddedWallet,
        isSessionActive,
        revealWalletKey,
        sendOneTimeCode,
        shouldAutoCreateEmbeddedWallet,
        userHasEmbeddedWallet,
    };
};

export { useEmbeddedWallet };
