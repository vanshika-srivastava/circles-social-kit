'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('../../../../utils/constants/colors.cjs');
var values = require('../../../../utils/constants/values.cjs');
var createUserProfile = require('../../../../utils/functions/createUserProfile/createUserProfile.cjs');
require('@dynamic-labs/sdk-api-core');
require('@dynamic-labs/utils');
require('../../../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/multi-wallet');
require('../../../../shared/logger.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../loadingAndLifecycle.cjs');
require('../../../../shared/consts/index.cjs');
var index = require('../../../../utils/functions/storeAuthToken/index.cjs');
require('../../../../config/ApiEndpoint.cjs');
var storeExpiresAt = require('../../../../utils/functions/storeExpiresAt/storeExpiresAt.cjs');
var user = require('../user.cjs');
require('../../../../locale/locale.cjs');
var isCookieEnabled = require('../../../../utils/functions/isCookieEnabled/isCookieEnabled.cjs');

const storeAuthTokenAndUser = ({ user: user$1, jwt, minifiedJwt, expiresAt, }) => {
    // expiresAt is always sent back by the backend, regardless of whether jwt/minifiedJwt are sent or not
    storeExpiresAt.storeExpiresAt(expiresAt);
    if (jwt && minifiedJwt) {
        index.storeAuthToken(jwt, minifiedJwt);
        if (isCookieEnabled.isCookieEnabled()) {
            // if cookie is enabled, but the backend returns a JWT, then use JS to store the cookie
            const expireDate = new Date(expiresAt * 1000).toUTCString();
            const authCookie = `${values.DYNAMIC_AUTH_COOKIE_NAME}=${minifiedJwt}; expires=${expireDate}; path=/; SameSite=Lax`;
            document.cookie = authCookie;
        }
    }
    const userProfile = createUserProfile.createUserProfileFromSdkUser(user$1);
    user.setUser(userProfile);
    return userProfile;
};

exports.storeAuthTokenAndUser = storeAuthTokenAndUser;
