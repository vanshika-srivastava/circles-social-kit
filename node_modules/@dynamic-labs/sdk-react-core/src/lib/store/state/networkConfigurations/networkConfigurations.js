'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { useDynamicEvents } from '../../../utils/hooks/events/useDynamicEvents/useDynamicEvents.js';
import 'react';
import '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../user/user.js';
import '../../../locale/locale.js';
import '../projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../events/dynamicEvents.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import { usePromise } from '../../../utils/hooks/usePromise/usePromise.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../environmentId.js';
import '../walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../context/FooterAnimationContext/index.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../tokenBalances.js';
import { createStoreState } from '../../internalImplementation/utils/createStoreState/createStoreState.js';

const { getNetworkConfigurations, setNetworkConfigurations, useNetworkConfigurations, resetNetworkConfigurations, } = createStoreState('networkConfigurations');
const createNetwork = (network, parser = (input) => input) => ({
    blockExplorerUrls: network.blockExplorerUrls,
    chainId: parser(network.chainId),
    iconUrls: network.iconUrls,
    lcdUrl: network.lcdUrl,
    name: network.name,
    nativeCurrency: network.nativeCurrency,
    networkId: parser(network.networkId),
    privateCustomerRpcUrls: network.privateCustomerRpcUrls,
    rpcUrls: network.rpcUrls,
    vanityName: network.vanityName,
});
const overrideNetworks = (networkOverrides, networks) => {
    if (!networkOverrides) {
        return networks;
    }
    if (Array.isArray(networkOverrides)) {
        return networkOverrides;
    }
    else {
        return networkOverrides(networks !== null && networks !== void 0 ? networks : []);
    }
};
const useFetchNetworkConfigurations = ({ environmentId, projectSettings, evmNetworksOverrides, cosmosNetworkOverrides, }) => {
    const { retrigger } = usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        if (!(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.networks))
            return Promise.resolve({});
        const { networks } = projectSettings;
        const evm = networks.find((configurations) => configurations.chainName === 'evm');
        const solana = networks.find((configurations) => configurations.chainName === 'solana');
        const cosmos = networks.find((configurations) => configurations.chainName === 'cosmos');
        const starknet = networks.find((configurations) => configurations.chainName === 'starknet');
        let cosmosNetworks = (_a = cosmos === null || cosmos === void 0 ? void 0 : cosmos.networks) === null || _a === void 0 ? void 0 : _a.map((net) => createNetwork(net, parseInt));
        cosmosNetworks = overrideNetworks(cosmosNetworkOverrides, cosmosNetworks);
        let evmNetworks = (_b = evm === null || evm === void 0 ? void 0 : evm.networks) === null || _b === void 0 ? void 0 : _b.map((net) => createNetwork(net, parseInt));
        evmNetworks = overrideNetworks(evmNetworksOverrides, evmNetworks);
        const starknetNetworks = (_c = starknet === null || starknet === void 0 ? void 0 : starknet.networks) === null || _c === void 0 ? void 0 : _c.map((net) => createNetwork(net));
        const solanaNetworks = (_d = solana === null || solana === void 0 ? void 0 : solana.networks) === null || _d === void 0 ? void 0 : _d.map((net) => createNetwork(net));
        if (evmNetworksOverrides) {
            if (Array.isArray(evmNetworksOverrides)) {
                evmNetworks = evmNetworksOverrides;
            }
            else {
                evmNetworks = evmNetworksOverrides(evmNetworks !== null && evmNetworks !== void 0 ? evmNetworks : []);
            }
        }
        return Promise.resolve({
            cosmos: cosmosNetworks,
            evm: evmNetworks,
            solana: solanaNetworks,
            starknet: starknetNetworks,
        });
    }), {
        deps: [environmentId, projectSettings, evmNetworksOverrides],
        enabled: Boolean(projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.networks),
        initialData: undefined,
        onResolve: (networkConfigurations) => {
            const expiry = new Date().getTime() + 60000 * 5;
            setNetworkConfigurations({
                expiresAt: expiry,
                networkConfigurations: networkConfigurations,
            });
        },
    });
    useDynamicEvents('logout', retrigger);
};

export { getNetworkConfigurations, resetNetworkConfigurations, setNetworkConfigurations, useFetchNetworkConfigurations, useNetworkConfigurations };
