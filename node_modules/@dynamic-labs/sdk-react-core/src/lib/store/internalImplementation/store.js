'use client'
import { persist, createStore } from '@dynamic-labs/store';
import { STORE_STORAGE_KEY } from '../../utils/constants/localStorage.js';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import { transformStateForLocalStorage, createInitialStates } from '../stateConfig.js';
import { clearExpiredData } from './utils/clearExpiredData/clearExpiredData.js';
import { syncLegacyStorage } from './utils/syncLegacyStorage/syncLegacyStorage.js';

let store;
const getStore = () => {
    if (!store) {
        throw new Error('Store not initialized');
    }
    return store;
};
const removeStoreInstance = () => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    store = undefined;
};
const initializeStore = ({ storageSuffix, environmentId, }) => {
    if (store) {
        return;
    }
    const persistName = storageSuffix
        ? `${STORE_STORAGE_KEY}_${storageSuffix}`
        : STORE_STORAGE_KEY;
    store = syncLegacyStorage(persist({
        name: persistName,
        partialize: transformStateForLocalStorage,
        storage: getStorage(),
        // Map each entry to its initialValue
        store: createStore(() => createInitialStates({ environmentId, storageSuffix })),
    }));
    clearExpiredData(store);
};
const getStorage = () => {
    if (typeof localStorage === 'undefined') {
        return {
            getItem: () => null,
            setItem: () => { },
        };
    }
    return window.localStorage;
};

export { getStore, initializeStore, removeStoreInstance };
