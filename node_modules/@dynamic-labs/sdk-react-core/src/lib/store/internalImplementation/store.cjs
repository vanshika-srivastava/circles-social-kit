'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var store$1 = require('@dynamic-labs/store');
var localStorage$1 = require('../../utils/constants/localStorage.cjs');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
var stateConfig = require('../stateConfig.cjs');
var clearExpiredData = require('./utils/clearExpiredData/clearExpiredData.cjs');
var syncLegacyStorage = require('./utils/syncLegacyStorage/syncLegacyStorage.cjs');

let store;
const getStore = () => {
    if (!store) {
        throw new Error('Store not initialized');
    }
    return store;
};
const removeStoreInstance = () => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    store = undefined;
};
const initializeStore = ({ storageSuffix, environmentId, }) => {
    if (store) {
        return;
    }
    const persistName = storageSuffix
        ? `${localStorage$1.STORE_STORAGE_KEY}_${storageSuffix}`
        : localStorage$1.STORE_STORAGE_KEY;
    store = syncLegacyStorage.syncLegacyStorage(store$1.persist({
        name: persistName,
        partialize: stateConfig.transformStateForLocalStorage,
        storage: getStorage(),
        // Map each entry to its initialValue
        store: store$1.createStore(() => stateConfig.createInitialStates({ environmentId, storageSuffix })),
    }));
    clearExpiredData.clearExpiredData(store);
};
const getStorage = () => {
    if (typeof localStorage === 'undefined') {
        return {
            getItem: () => null,
            setItem: () => { },
        };
    }
    return window.localStorage;
};

exports.getStore = getStore;
exports.initializeStore = initializeStore;
exports.removeStoreInstance = removeStoreInstance;
