'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
require('@dynamic-labs/sdk-api-core');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var isSSR = require('../../../../shared/utils/functions/isSSR/isSSR.cjs');
require('@dynamic-labs/utils');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
var useEffectOnce = require('../../../../shared/utils/hooks/useEffectOnce/useEffectOnce.cjs');
require('../../../../store/state/loadingAndLifecycle.cjs');
var useEffectOnceCondition = require('../../../../shared/utils/hooks/useEffectOnceCondition/useEffectOnceCondition.cjs');
require('../../../../shared/consts/index.cjs');
require('../../../DynamicContext/DynamicContext.cjs');
require('../../../../events/dynamicEvents.cjs');
require('../../../CaptchaContext/CaptchaContext.cjs');
require('../../../ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var socialStorage = require('../../../../utils/functions/socialStorage/socialStorage.cjs');
var getSocialSignInProviderForProviderEnum = require('../../../../utils/functions/getSocialSignInProviderForProviderEnum/getSocialSignInProviderForProviderEnum.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../store/state/user/user.cjs');
require('../../../../locale/locale.cjs');
require('../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../AccountExistsContext/AccountExistsContext.cjs');
require('../../../UserWalletsContext/UserWalletsContext.cjs');
require('../../../VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../WalletContext/WalletContext.cjs');
require('../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../ThemeContext/ThemeContext.cjs');
require('../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
var useSocialAuth = require('../../../../utils/hooks/useSocialAuth/useSocialAuth.cjs');
require('yup');
require('../../../MockContext/MockContext.cjs');
require('../../../../views/CollectUserDataView/useFields.cjs');
require('../../../FieldsStateContext/FieldsStateContext.cjs');
require('../../../UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../store/state/environmentId.cjs');
require('../../../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../components/Alert/Alert.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../FooterAnimationContext/index.cjs');
require('../../../WalletGroupContext/WalletGroupContext.cjs');
require('../../SocialRedirectContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../LoadingContext/LoadingContext.cjs');
var DynamicWidgetContext = require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../PasskeyContext/PasskeyContext.cjs');
require('../../../../store/state/sendBalances.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../../polyfills.cjs');
require('../../../ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../FundingContext/FundingContext.cjs');
require('../../../SendBalanceContext/SendBalanceContext.cjs');
require('../../../ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../ConnectWithOtpContext/constants.cjs');
require('../../../ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useRedirectSocialHandler = ({ setSocialProvider, }) => {
    const { setView } = ViewContext.useViewContext();
    const { setDynamicWidgetView } = DynamicWidgetContext.useWidgetContext();
    const [socialStorageItem, setSocialStorageItem] = React.useState(null);
    const { sdkHasLoaded, user, setShowAuthFlow, isRenderingEmbeddedAuthFlow, setShowDynamicUserProfile, } = useInternalDynamicContext.useInternalDynamicContext();
    const { completeConnection } = useSocialAuth.useSocialAuth({
        sessionTimeout: 10000,
    });
    const updateInterfaceStateForSignIn = React.useCallback((socialStorageItem) => {
        const socialSignInProvider = getSocialSignInProviderForProviderEnum.getSocialSignInProviderForProviderEnum(socialStorageItem.provider);
        setSocialProvider(socialSignInProvider);
        setView('social-redirect-view');
        // Only open the auth flow when the embedded widget is not rendered
        if (!isRenderingEmbeddedAuthFlow.current) {
            setShowAuthFlow(true);
        }
    }, [setSocialProvider, setView, isRenderingEmbeddedAuthFlow, setShowAuthFlow]);
    const updateInterfaceStateForLink = React.useCallback(() => {
        setDynamicWidgetView('profile');
        setShowDynamicUserProfile(true);
    }, [setDynamicWidgetView, setShowDynamicUserProfile]);
    useEffectOnce.useEffectOnce(() => {
        // Do not run on server side
        if (isSSR.isSSR())
            return;
        const url = new URL(window.location.href);
        const dynamicOauthState = url.searchParams.get('dynamicOauthState');
        const dynamicOauthCode = url.searchParams.get('dynamicOauthCode');
        if (!dynamicOauthState || !dynamicOauthCode) {
            return;
        }
        const socialStorageItem = socialStorage.searchSocialStorageByState(dynamicOauthState);
        if (!socialStorageItem)
            return;
        // we got back the dynamicOauthCode from the oauth provider, set it here so we can use it to sign in
        socialStorageItem.code = dynamicOauthCode;
        setSocialStorageItem(socialStorageItem);
        // Clear the state from local storage
        socialStorage.deleteSocialStorage(socialStorageItem.provider);
    });
    useEffectOnceCondition.useEffectOnceCondition(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!socialStorageItem)
            return;
        const authMode = user ? 'link' : 'signin';
        // Update UI to reflect the original state
        if (authMode === 'signin') {
            updateInterfaceStateForSignIn(socialStorageItem);
        }
        else if (authMode === 'link') {
            updateInterfaceStateForLink();
        }
        yield completeConnection({
            authCode: socialStorageItem.code,
            authMode,
            captchaToken: socialStorageItem.captchaToken,
            provider: socialStorageItem.provider,
            state: socialStorageItem.state,
            verifier: socialStorageItem.codeVerifier,
        });
    }), Boolean(socialStorageItem) && sdkHasLoaded);
};

exports.useRedirectSocialHandler = useRedirectSocialHandler;
