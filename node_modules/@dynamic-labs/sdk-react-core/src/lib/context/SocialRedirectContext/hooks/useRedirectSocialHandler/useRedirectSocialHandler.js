'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { useState, useCallback } from 'react';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import { useViewContext } from '../../../ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import { isSSR } from '../../../../shared/utils/functions/isSSR/isSSR.js';
import '@dynamic-labs/utils';
import '../../../../utils/constants/colors.js';
import '../../../../utils/constants/values.js';
import { useEffectOnce } from '../../../../shared/utils/hooks/useEffectOnce/useEffectOnce.js';
import '../../../../store/state/loadingAndLifecycle.js';
import { useEffectOnceCondition } from '../../../../shared/utils/hooks/useEffectOnceCondition/useEffectOnceCondition.js';
import '../../../../shared/consts/index.js';
import '../../../DynamicContext/DynamicContext.js';
import '../../../../events/dynamicEvents.js';
import '../../../CaptchaContext/CaptchaContext.js';
import '../../../ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { searchSocialStorageByState, deleteSocialStorage } from '../../../../utils/functions/socialStorage/socialStorage.js';
import { getSocialSignInProviderForProviderEnum } from '../../../../utils/functions/getSocialSignInProviderForProviderEnum/getSocialSignInProviderForProviderEnum.js';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../AccessDeniedContext/AccessDeniedContext.js';
import '../../../AccountExistsContext/AccountExistsContext.js';
import '../../../UserWalletsContext/UserWalletsContext.js';
import '../../../VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../WalletContext/WalletContext.js';
import '../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../ThemeContext/ThemeContext.js';
import '../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import { useSocialAuth } from '../../../../utils/hooks/useSocialAuth/useSocialAuth.js';
import 'yup';
import '../../../MockContext/MockContext.js';
import '../../../../views/CollectUserDataView/useFields.js';
import '../../../FieldsStateContext/FieldsStateContext.js';
import '../../../UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/environmentId.js';
import '../../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../FooterAnimationContext/index.js';
import '../../../WalletGroupContext/WalletGroupContext.js';
import '../../SocialRedirectContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../LoadingContext/LoadingContext.js';
import { useWidgetContext } from '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../IpConfigurationContext/IpConfigurationContext.js';
import '../../../PasskeyContext/PasskeyContext.js';
import '../../../../store/state/sendBalances.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../../polyfills.js';
import '../../../ErrorBoundary/ErrorBoundaryBase.js';
import '../../../ErrorBoundary/ErrorBoundaryContext.js';
import '../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../FundingContext/FundingContext.js';
import '../../../SendBalanceContext/SendBalanceContext.js';
import '../../../ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../ConnectWithOtpContext/constants.js';
import '../../../ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const useRedirectSocialHandler = ({ setSocialProvider, }) => {
    const { setView } = useViewContext();
    const { setDynamicWidgetView } = useWidgetContext();
    const [socialStorageItem, setSocialStorageItem] = useState(null);
    const { sdkHasLoaded, user, setShowAuthFlow, isRenderingEmbeddedAuthFlow, setShowDynamicUserProfile, } = useInternalDynamicContext();
    const { completeConnection } = useSocialAuth({
        sessionTimeout: 10000,
    });
    const updateInterfaceStateForSignIn = useCallback((socialStorageItem) => {
        const socialSignInProvider = getSocialSignInProviderForProviderEnum(socialStorageItem.provider);
        setSocialProvider(socialSignInProvider);
        setView('social-redirect-view');
        // Only open the auth flow when the embedded widget is not rendered
        if (!isRenderingEmbeddedAuthFlow.current) {
            setShowAuthFlow(true);
        }
    }, [setSocialProvider, setView, isRenderingEmbeddedAuthFlow, setShowAuthFlow]);
    const updateInterfaceStateForLink = useCallback(() => {
        setDynamicWidgetView('profile');
        setShowDynamicUserProfile(true);
    }, [setDynamicWidgetView, setShowDynamicUserProfile]);
    useEffectOnce(() => {
        // Do not run on server side
        if (isSSR())
            return;
        const url = new URL(window.location.href);
        const dynamicOauthState = url.searchParams.get('dynamicOauthState');
        const dynamicOauthCode = url.searchParams.get('dynamicOauthCode');
        if (!dynamicOauthState || !dynamicOauthCode) {
            return;
        }
        const socialStorageItem = searchSocialStorageByState(dynamicOauthState);
        if (!socialStorageItem)
            return;
        // we got back the dynamicOauthCode from the oauth provider, set it here so we can use it to sign in
        socialStorageItem.code = dynamicOauthCode;
        setSocialStorageItem(socialStorageItem);
        // Clear the state from local storage
        deleteSocialStorage(socialStorageItem.provider);
    });
    useEffectOnceCondition(() => __awaiter(void 0, void 0, void 0, function* () {
        if (!socialStorageItem)
            return;
        const authMode = user ? 'link' : 'signin';
        // Update UI to reflect the original state
        if (authMode === 'signin') {
            updateInterfaceStateForSignIn(socialStorageItem);
        }
        else if (authMode === 'link') {
            updateInterfaceStateForLink();
        }
        yield completeConnection({
            authCode: socialStorageItem.code,
            authMode,
            captchaToken: socialStorageItem.captchaToken,
            provider: socialStorageItem.provider,
            state: socialStorageItem.state,
            verifier: socialStorageItem.codeVerifier,
        });
    }), Boolean(socialStorageItem) && sdkHasLoaded);
};

export { useRedirectSocialHandler };
