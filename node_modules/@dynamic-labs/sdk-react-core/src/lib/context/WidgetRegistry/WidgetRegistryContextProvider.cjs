'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
require('@dynamic-labs/sdk-api-core');
require('../../utils/constants/values.cjs');
require('@dynamic-labs/utils');
require('../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/multi-wallet');
require('../../shared/logger.cjs');
require('../../utils/constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var randomString = require('../../utils/functions/randomString/randomString.cjs');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');

const widgetRegistryContext = React.createContext(null);
const WidgetRegistryContextProvider = ({ children, }) => {
    const [registry, setRegistry] = React.useState({});
    const registerId = React.useCallback((widgetId, widgetType) => {
        setRegistry((prevRegistry) => (Object.assign(Object.assign({}, prevRegistry), { [widgetId]: {
                type: widgetType,
            } })));
    }, [setRegistry]);
    const removeId = React.useCallback((widgetId) => {
        setRegistry((prevRegistry) => {
            const newRegistry = Object.assign({}, prevRegistry);
            delete newRegistry[widgetId];
            return newRegistry;
        });
    }, [setRegistry]);
    const checkWidgetPresence = React.useCallback((widgetType) => Object.values(registry).some((widget) => widget.type === widgetType), [registry]);
    return (jsxRuntime.jsx(widgetRegistryContext.Provider, { value: { checkWidgetPresence, registerId, removeId }, children: children }));
};
const useWidgetRegistry = () => {
    const context = React.useContext(widgetRegistryContext);
    if (context === null) {
        throw new Error('usage of useWidgetRegistry not wrapped in `WidgetRegistryContextProvider`.');
    }
    return context;
};
const useRegisterWidget = (widgetType, enabled = true) => {
    const idRef = React.useRef(randomString.randomString(8));
    const { registerId, removeId } = useWidgetRegistry();
    React.useEffect(() => {
        if (enabled === false) {
            return;
        }
        registerId(idRef.current, widgetType);
        return () => {
            // This is disabled because eslint think we are using state value
            // but this is fine because it is a ref
            // eslint-disable-next-line react-hooks/exhaustive-deps
            removeId(idRef.current);
        };
    }, [widgetType, enabled, registerId, removeId]);
};
const useWidgetRegistryCheck = (widgetType) => {
    const { checkWidgetPresence } = useWidgetRegistry();
    return checkWidgetPresence(widgetType);
};

exports.WidgetRegistryContextProvider = WidgetRegistryContextProvider;
exports.useRegisterWidget = useRegisterWidget;
exports.useWidgetRegistryCheck = useWidgetRegistryCheck;
