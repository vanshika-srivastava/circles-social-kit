'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var dynamicEvents = require('../../events/dynamicEvents.cjs');

/** Context for accessing the current user/session's wallets */
const UserWalletsContext = React.createContext(undefined);
const UserWalletsProvider = ({ children }) => {
    const [userWallets, _setUserWallets] = React.useState([]);
    const addedWalletsIds = React.useRef([]);
    const removedWalletsIds = React.useRef([]);
    const setUserWallets = React.useCallback((returnUpdatedWallets) => {
        _setUserWallets((prevWallets) => {
            const updatedWallets = returnUpdatedWallets(prevWallets);
            addedWalletsIds.current.forEach((walletId) => {
                const wallet = updatedWallets.find(({ id }) => id === walletId);
                if (!wallet)
                    return;
                dynamicEvents.dynamicEvents.emit('walletAdded', wallet, updatedWallets);
            });
            removedWalletsIds.current.forEach((walletId) => {
                const wallet = prevWallets.find(({ id }) => id === walletId);
                if (!wallet)
                    return;
                dynamicEvents.dynamicEvents.emit('walletRemoved', wallet, updatedWallets);
            });
            addedWalletsIds.current = [];
            removedWalletsIds.current = [];
            return updatedWallets;
        });
    }, []);
    return (jsxRuntime.jsx(UserWalletsContext.Provider, { value: {
            addedWalletsIds,
            registerUserWallet: (newWallet) => setUserWallets((userWallets) => [...userWallets, newWallet]),
            removeUserWallet: (walletId) => setUserWallets((userWallets) => userWallets.filter(({ id }) => walletId !== id)),
            removedWalletsIds,
            setUserWallets,
            userWallets,
        }, children: children }));
};
/** Provides access to state and setters of the current user/session wallets array */
const useInternalUserWallets = () => {
    const context = React.useContext(UserWalletsContext);
    if (!context)
        throw new Error('Can only call useInternalUserWallets inside UserWalletsProvider');
    return context;
};
/** Provides access to the current user/session wallets */
const useUserWallets = () => {
    const context = React.useContext(UserWalletsContext);
    if (!context)
        throw new Error('Can only call useUserWallets inside UserWalletsProvider');
    return context.userWallets;
};

exports.UserWalletsContext = UserWalletsContext;
exports.UserWalletsProvider = UserWalletsProvider;
exports.useInternalUserWallets = useInternalUserWallets;
exports.useUserWallets = useUserWallets;
