'use client'
import { jsx } from 'react/jsx-runtime';
import { createContext, useContext, useState, useRef, useCallback } from 'react';
import { dynamicEvents } from '../../events/dynamicEvents.js';

/** Context for accessing the current user/session's wallets */
const UserWalletsContext = createContext(undefined);
const UserWalletsProvider = ({ children }) => {
    const [userWallets, _setUserWallets] = useState([]);
    const addedWalletsIds = useRef([]);
    const removedWalletsIds = useRef([]);
    const setUserWallets = useCallback((returnUpdatedWallets) => {
        _setUserWallets((prevWallets) => {
            const updatedWallets = returnUpdatedWallets(prevWallets);
            addedWalletsIds.current.forEach((walletId) => {
                const wallet = updatedWallets.find(({ id }) => id === walletId);
                if (!wallet)
                    return;
                dynamicEvents.emit('walletAdded', wallet, updatedWallets);
            });
            removedWalletsIds.current.forEach((walletId) => {
                const wallet = prevWallets.find(({ id }) => id === walletId);
                if (!wallet)
                    return;
                dynamicEvents.emit('walletRemoved', wallet, updatedWallets);
            });
            addedWalletsIds.current = [];
            removedWalletsIds.current = [];
            return updatedWallets;
        });
    }, []);
    return (jsx(UserWalletsContext.Provider, { value: {
            addedWalletsIds,
            registerUserWallet: (newWallet) => setUserWallets((userWallets) => [...userWallets, newWallet]),
            removeUserWallet: (walletId) => setUserWallets((userWallets) => userWallets.filter(({ id }) => walletId !== id)),
            removedWalletsIds,
            setUserWallets,
            userWallets,
        }, children: children }));
};
/** Provides access to state and setters of the current user/session wallets array */
const useInternalUserWallets = () => {
    const context = useContext(UserWalletsContext);
    if (!context)
        throw new Error('Can only call useInternalUserWallets inside UserWalletsProvider');
    return context;
};
/** Provides access to the current user/session wallets */
const useUserWallets = () => {
    const context = useContext(UserWalletsContext);
    if (!context)
        throw new Error('Can only call useUserWallets inside UserWalletsProvider');
    return context.userWallets;
};

export { UserWalletsContext, UserWalletsProvider, useInternalUserWallets, useUserWallets };
