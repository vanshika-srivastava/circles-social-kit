'use client'
import { __rest } from '../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import { ErrorBoundaryBase } from './ErrorBoundaryBase.js';
import { ErrorBoundaryContext, assertErrorBoundaryContext } from './ErrorBoundaryContext.js';

class ErrorBoundaryReporter extends ErrorBoundaryBase {
    constructor(props) {
        super(props);
        this.state = { error: null, hasError: false };
    }
    componentDidCatch(error, info) {
        var _a;
        const { onError } = this.props;
        if ((_a = this.context) === null || _a === void 0 ? void 0 : _a.isDynamicSdkError) {
            onError === null || onError === void 0 ? void 0 : onError(error, info);
            logger.error(error, {
                error: {
                    bundleStack: error.stack,
                    message: error,
                    stack: info.componentStack,
                },
            });
        }
        throw error;
    }
    render() {
        const { children } = this.props;
        const { hasError, error } = this.state;
        if (hasError) {
            assertErrorBoundaryContext(this.context);
            this.context.error = error;
            this.context.hasError = hasError;
            return null;
        }
        return children;
    }
}
const ErrorBoundary = (_a) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    return (jsx(ErrorBoundaryContext.Provider, { value: {
            error: null,
            hasError: false,
            isDynamicSdkError: true,
        }, children: jsx(ErrorBoundaryReporter, Object.assign({}, props, { children: children })) }));
};

export { ErrorBoundary };
