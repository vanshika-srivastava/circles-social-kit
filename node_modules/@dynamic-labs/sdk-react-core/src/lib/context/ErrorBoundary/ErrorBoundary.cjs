'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var ErrorBoundaryBase = require('./ErrorBoundaryBase.cjs');
var ErrorBoundaryContext = require('./ErrorBoundaryContext.cjs');

class ErrorBoundaryReporter extends ErrorBoundaryBase.ErrorBoundaryBase {
    constructor(props) {
        super(props);
        this.state = { error: null, hasError: false };
    }
    componentDidCatch(error, info) {
        var _a;
        const { onError } = this.props;
        if ((_a = this.context) === null || _a === void 0 ? void 0 : _a.isDynamicSdkError) {
            onError === null || onError === void 0 ? void 0 : onError(error, info);
            logger.logger.error(error, {
                error: {
                    bundleStack: error.stack,
                    message: error,
                    stack: info.componentStack,
                },
            });
        }
        throw error;
    }
    render() {
        const { children } = this.props;
        const { hasError, error } = this.state;
        if (hasError) {
            ErrorBoundaryContext.assertErrorBoundaryContext(this.context);
            this.context.error = error;
            this.context.hasError = hasError;
            return null;
        }
        return children;
    }
}
const ErrorBoundary = (_a) => {
    var { children } = _a, props = _tslib.__rest(_a, ["children"]);
    return (jsxRuntime.jsx(ErrorBoundaryContext.ErrorBoundaryContext.Provider, { value: {
            error: null,
            hasError: false,
            isDynamicSdkError: true,
        }, children: jsxRuntime.jsx(ErrorBoundaryReporter, Object.assign({}, props, { children: children })) }));
};

exports.ErrorBoundary = ErrorBoundary;
