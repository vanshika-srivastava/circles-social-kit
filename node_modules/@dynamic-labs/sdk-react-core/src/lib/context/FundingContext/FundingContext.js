'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { createContext, useContext, useRef, useState, useCallback, useMemo, useEffect } from 'react';
import { getChainInfo, isBitcoinConnector } from '@dynamic-labs/wallet-connector-core';
import { WalletAddressType } from '@dynamic-labs/sdk-api-core';
import '@dynamic-labs/utils';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import '../../config/ApiEndpoint.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { isOnrampProvider } from '../../utils/functions/isOnrampProvider/isOnrampProvider.js';
import { getWalletAdditionalAddressByType } from '../../utils/functions/getWalletAdditionalAddressByType/getWalletAdditionalAddressByType.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../store/state/user/user.js';
import { getOnrampProviders } from '../../data/api/onramp/onramp.js';
import '../../locale/locale.js';
import '../DynamicContext/DynamicContext.js';
import '../../events/dynamicEvents.js';
import '../CaptchaContext/CaptchaContext.js';
import '../ErrorContext/ErrorContext.js';
import '../AccessDeniedContext/AccessDeniedContext.js';
import '../AccountExistsContext/AccountExistsContext.js';
import '../UserWalletsContext/UserWalletsContext.js';
import '../VerificationContext/VerificationContext.js';
import 'react-dom';
import '../WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../LoadingContext/LoadingContext.js';
import 'yup';
import '../MockContext/MockContext.js';
import '../../views/CollectUserDataView/useFields.js';
import '../FieldsStateContext/FieldsStateContext.js';
import '../UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../store/state/environmentId.js';
import '../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../components/Alert/Alert.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/IconButton/IconButton.js';
import '../../components/InlineWidget/InlineWidget.js';
import '../../components/Input/Input.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../FooterAnimationContext/index.js';
import '../WalletGroupContext/WalletGroupContext.js';
import '../SocialRedirectContext/SocialRedirectContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../IpConfigurationContext/IpConfigurationContext.js';
import '../PasskeyContext/PasskeyContext.js';
import '../../store/state/sendBalances.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../polyfills.js';
import '../ErrorBoundary/ErrorBoundaryBase.js';
import '../ErrorBoundary/ErrorBoundaryContext.js';
import '../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../WidgetRegistry/WidgetRegistryContextProvider.js';
import '../SendBalanceContext/SendBalanceContext.js';
import '../ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../ConnectWithOtpContext/constants.js';
import '../ReinitializeContext/ReinitializeContextProvider.js';
import '../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const FundingContext = createContext(undefined);
const FundingContextProvider = ({ children, }) => {
    var _a, _b;
    const fundingRef = useRef(null);
    const [showFunding, setShowFunding] = useState(false);
    const [supportsFunding, setSupportsFunding] = useState(false);
    const [fundingUrl, setFundingUrl] = useState('');
    const { environmentId, network, primaryWallet, projectSettings } = useInternalDynamicContext();
    const fundingEnabled = (_b = (_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) === null || _a === void 0 ? void 0 : _a.some((p) => isOnrampProvider(p) && Boolean(p.enabledAt))) !== null && _b !== void 0 ? _b : false;
    const updateSupportsFunding = useCallback((...args_1) => __awaiter(void 0, [...args_1], void 0, function* ({ address, token } = {}) {
        var _c;
        if (!fundingEnabled)
            return;
        if (!primaryWallet)
            return;
        const chainName = (_c = getChainInfo(primaryWallet.chain)) === null || _c === void 0 ? void 0 : _c.name;
        if (!chainName)
            return;
        const bitcoinAddress = isBitcoinConnector(primaryWallet.connector) &&
            getWalletAdditionalAddressByType(WalletAddressType.Payment, primaryWallet);
        const chainHasNetwork = network && chainName === 'evm';
        try {
            const [{ url }] = yield getOnrampProviders({
                chain: chainName,
                environmentId,
                networkId: chainHasNetwork ? network.toString() : undefined,
                token,
                walletAddress: address || bitcoinAddress || primaryWallet.address,
            });
            if (!url)
                throw new Error('No onramp url found');
            setFundingUrl(url);
            setSupportsFunding(true);
        }
        catch (error) {
            setSupportsFunding(false);
        }
    }), [environmentId, fundingEnabled, network, primaryWallet]);
    const value = useMemo(() => ({
        fundingEnabled,
        fundingRef,
        fundingUrl,
        setShowFunding,
        showFunding,
        supportsFunding,
        updateSupportsFunding,
    }), [
        fundingEnabled,
        fundingUrl,
        showFunding,
        supportsFunding,
        updateSupportsFunding,
    ]);
    useEffect(() => {
        updateSupportsFunding();
    }, [environmentId, fundingEnabled, network, primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address]);
    return (jsx(FundingContext.Provider, { value: value, children: children }));
};
const useFundingContext = () => {
    const context = useContext(FundingContext);
    if (context === undefined) {
        throw new Error('usage of useFundingContext not wrapped in `FundingContextProvider`.');
    }
    return context;
};

export { FundingContext, FundingContextProvider, useFundingContext };
