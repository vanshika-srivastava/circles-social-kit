'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
require('@dynamic-labs/sdk-api-core');
require('../../utils/constants/values.cjs');
require('@dynamic-labs/utils');
require('../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/multi-wallet');
require('../../shared/logger.cjs');
require('../../utils/constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var randomString = require('../../utils/functions/randomString/randomString.cjs');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');

const reinitializeContext = React.createContext(undefined);
/**
 * Provider that provides a reinitialize function to its children.
 * @param children The children to render.
 * @param onReinitialize A callback that is called when reinitialize is called.
 */
const ReinitializeContextProvider = ({ children, onReinitialize }) => {
    // Initial key is undefined to not interfere on react strick mode
    const [key, setKey] = React.useState();
    const onReinitializeCallbackRef = React.useRef(onReinitialize);
    onReinitializeCallbackRef.current = onReinitialize;
    const reinitialize = React.useCallback(() => {
        var _a;
        const newKey = randomString.randomString(8);
        (_a = onReinitializeCallbackRef.current) === null || _a === void 0 ? void 0 : _a.call(onReinitializeCallbackRef, newKey);
        setKey(newKey);
    }, []);
    return (jsxRuntime.jsx(reinitializeContext.Provider, { value: { key, reinitialize }, children: React.cloneElement(children, { key }) }));
};
/**
 * Custom hook that provides an reinitialize function for the DynamicContextProvider.
 * @returns The reinitialize function.
 */
const useReinitialize = () => {
    const context = React.useContext(reinitializeContext);
    if (context === undefined) {
        throw new Error('usage of useReinitialize not wrapped in `ReinitializeContextProvider`.');
    }
    return context.reinitialize;
};

exports.ReinitializeContextProvider = ReinitializeContextProvider;
exports.reinitializeContext = reinitializeContext;
exports.useReinitialize = useReinitialize;
