'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { createContext, useState, useCallback, useMemo, useContext } from 'react';
import { logger } from '@dynamic-labs/wallet-connector-core';

const IpConfigurationContext = createContext(undefined);
const IpConfigurationContextProvider = ({ children, }) => {
    const [ipConfiguration, setIpConfiguration] = useState(null);
    const getIpConfiguration = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        if (ipConfiguration) {
            return ipConfiguration;
        }
        try {
            const response = yield fetch('http://ip-api.com/json');
            if (!response.ok) {
                return;
            }
            const data = yield response.json();
            if (data.status !== 'success') {
                return;
            }
            const { country, countryCode } = data;
            const configuration = { country, countryCode };
            setIpConfiguration(configuration);
            return configuration;
        }
        catch (e) {
            logger.warn('Error fetching IP configuration', e);
            return;
        }
    }), [ipConfiguration, setIpConfiguration]);
    const removeIpConfiguration = () => {
        setIpConfiguration(null);
    };
    const value = useMemo(() => ({
        getIpConfiguration,
        removeIpConfiguration,
    }), [getIpConfiguration]);
    return (jsx(IpConfigurationContext.Provider, { value: value, children: children }));
};
const useIpConfigurationContext = () => {
    const context = useContext(IpConfigurationContext);
    if (context === undefined) {
        throw new Error('usage of useIpConfigurationContext not wrapped in `IpConfigurationContextProvider`.');
    }
    return context;
};

export { IpConfigurationContext, IpConfigurationContextProvider, useIpConfigurationContext };
