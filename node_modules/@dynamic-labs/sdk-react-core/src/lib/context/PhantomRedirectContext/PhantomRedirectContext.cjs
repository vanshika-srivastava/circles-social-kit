'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var utils = require('@dynamic-labs/utils');
require('../DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
require('../../events/dynamicEvents.cjs');
require('../../../../_virtual/_tslib.cjs');
require('../CaptchaContext/CaptchaContext.cjs');
require('../ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../AccessDeniedContext/AccessDeniedContext.cjs');
require('../AccountExistsContext/AccountExistsContext.cjs');
require('../UserWalletsContext/UserWalletsContext.cjs');
require('../VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../LoadingContext/LoadingContext.cjs');
require('yup');
require('../MockContext/MockContext.cjs');
require('../../views/CollectUserDataView/useFields.cjs');
require('../FieldsStateContext/FieldsStateContext.cjs');
require('../UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../FooterAnimationContext/index.cjs');
require('../WalletGroupContext/WalletGroupContext.cjs');
require('../SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../IpConfigurationContext/IpConfigurationContext.cjs');
require('../PasskeyContext/PasskeyContext.cjs');
require('../../store/state/sendBalances.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../polyfills.cjs');
require('../ErrorBoundary/ErrorBoundaryBase.cjs');
require('../ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../FundingContext/FundingContext.cjs');
require('../SendBalanceContext/SendBalanceContext.cjs');
require('../ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../ConnectWithOtpContext/constants.cjs');
require('../ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
var useResponseHandlers = require('./useResponseHandlers.cjs');

const PhantomRedirectContext = React.createContext(undefined);
const PhantomRedirectContextProvider = ({ children, }) => {
    const { sdkHasLoaded } = useInternalDynamicContext.useInternalDynamicContext();
    const { phantomRedirectConnector, handleConnectResponse, handleUserResponse, handleErrorResponse, } = useResponseHandlers.useResponseHandlers();
    React.useEffect(() => {
        if (!phantomRedirectConnector || !utils.isMobile() || !sdkHasLoaded) {
            return;
        }
        const params = new URLSearchParams(window.location.search);
        if (params.has('errorCode')) {
            handleErrorResponse(params);
            return;
        }
        // handle response of connect method
        if (params.has('phantom_encryption_public_key')) {
            handleConnectResponse();
            return;
        }
        // handle response of the following methods:
        // signMessage, signTransaction, signAndSendTransaction or signAllTransactions
        if (params.has('data')) {
            handleUserResponse();
            return;
        }
    }, [
        handleConnectResponse,
        handleUserResponse,
        handleErrorResponse,
        phantomRedirectConnector,
        sdkHasLoaded,
    ]);
    return (jsxRuntime.jsx(PhantomRedirectContext.Provider, { value: {
            phantomRedirectConnector,
        }, children: children }));
};

exports.PhantomRedirectContext = PhantomRedirectContext;
exports.PhantomRedirectContextProvider = PhantomRedirectContextProvider;
