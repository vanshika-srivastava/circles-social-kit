'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var React = require('react');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
var localStorage = require('../../utils/constants/localStorage.cjs');
var getSiweStatement = require('../../utils/functions/getSiweStatement/getSiweStatement.cjs');
require('../../events/dynamicEvents.cjs');
require('../DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('react/jsx-runtime');
var ViewContext = require('../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var useInternalDynamicContext = require('../DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
var CaptchaContext = require('../CaptchaContext/CaptchaContext.cjs');
var ErrorContext = require('../ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
var useVerifyWallet = require('../../utils/hooks/useVerifyWallet/useVerifyWallet.cjs');
require('../VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../AccountExistsContext/AccountExistsContext.cjs');
require('../LoadingContext/LoadingContext.cjs');
require('../AccessDeniedContext/AccessDeniedContext.cjs');
require('yup');
require('../MockContext/MockContext.cjs');
require('../../views/CollectUserDataView/useFields.cjs');
require('../FieldsStateContext/FieldsStateContext.cjs');
require('../UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
require('../UserWalletsContext/UserWalletsContext.cjs');
require('react-i18next');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../FooterAnimationContext/index.cjs');
require('../WalletGroupContext/WalletGroupContext.cjs');
require('../SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../IpConfigurationContext/IpConfigurationContext.cjs');
require('../PasskeyContext/PasskeyContext.cjs');
var useTransferWallet = require('../../utils/hooks/useTransferWallet/useTransferWallet.cjs');
require('../../store/state/sendBalances.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../polyfills.cjs');
require('../ErrorBoundary/ErrorBoundaryBase.cjs');
require('../ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../FundingContext/FundingContext.cjs');
require('../SendBalanceContext/SendBalanceContext.cjs');
require('../ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../ConnectWithOtpContext/constants.cjs');
require('../ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../store/state/tokenBalances.cjs');

const useResponseHandlers = () => {
    const { walletConnectorOptions, consumeNonce, displaySiweStatement, environmentId, projectSettings, setIsSingleWalletAccount, connectWallet, setShowAuthFlow, setSelectedWalletConnectorKey, siweStatement, appName, user, } = useInternalDynamicContext.useInternalDynamicContext();
    const { setView } = ViewContext.useViewContext();
    const { setErrorMessage } = ErrorContext.useErrorContext();
    const { getCaptchaToken } = CaptchaContext.useCaptchaContext();
    const verifyWallet = useVerifyWallet.useVerifyWallet({
        consumeNonce,
        displaySiweStatement,
        environmentId,
        projectSettings,
        setIsSingleWalletAccount,
    });
    const phantomRedirectConnector = walletConnectorOptions
        .map(({ walletConnector }) => walletConnector)
        .find(walletConnectorCore.isPhantomRedirectConnector);
    const handleConnectResponse = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!phantomRedirectConnector) {
            return;
        }
        // this completes the connection step
        yield phantomRedirectConnector.getSession();
        yield connectWallet(phantomRedirectConnector);
        setShowAuthFlow(true, { ignoreIfIsEmbeddedWidget: true });
        setView('pending-signature');
        setSelectedWalletConnectorKey('phantom');
    }), [
        connectWallet,
        phantomRedirectConnector,
        setSelectedWalletConnectorKey,
        setShowAuthFlow,
        setView,
    ]);
    const completeWalletTransfer = useTransferWallet.useTransferWallet();
    const handleUserResponse = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!phantomRedirectConnector) {
            return;
        }
        setSelectedWalletConnectorKey('phantom');
        const [address] = yield phantomRedirectConnector.getConnectedAccounts();
        const method = phantomRedirectConnector.consumeMethod();
        switch (method) {
            case 'signAndSendTransaction': {
                const { signature } = phantomRedirectConnector.extractSignature();
                phantomRedirectConnector.emit('signAndSendTransaction', {
                    signature,
                });
                break;
            }
            case 'signAllTransactions':
                phantomRedirectConnector.emit('signAllTransactions', {
                    transactions: phantomRedirectConnector.extractTransactions(),
                });
                break;
            case 'signTransaction':
                phantomRedirectConnector.emit('signTransaction', {
                    transaction: phantomRedirectConnector.extractTransaction(),
                });
                break;
            case 'signMessage': {
                const { signature, message } = phantomRedirectConnector.extractSignature();
                const signatureState = utils.StorageService.getItem(localStorage.PHANTOM_SIGNATURE_STATE);
                utils.StorageService.removeItem(localStorage.PHANTOM_SIGNATURE_STATE);
                if ((signatureState === null || signatureState === void 0 ? void 0 : signatureState.verificationType) === 'awaiting_transfer') {
                    const siweStatementToUse = getSiweStatement.getSiweStatement({
                        appName,
                        siweStatement,
                    });
                    yield completeWalletTransfer({
                        messageToSignOverride: message,
                        overrideSiweStatement: siweStatementToUse,
                        publicWalletAddress: address,
                        signedMessageOverride: signature,
                        skipEmptyAccountCheck: signatureState.loseOriginalAccountOnTransfer,
                        walletConnector: phantomRedirectConnector,
                    });
                }
                else if ((signatureState === null || signatureState === void 0 ? void 0 : signatureState.verificationType) === 'awaiting_verification' ||
                    !user) {
                    setView('wallet-redirect-view');
                    yield verifyWallet({
                        captchaToken: getCaptchaToken(),
                        messageToSignOverride: message,
                        publicWalletAddress: address,
                        signedMessageOverride: signature,
                        walletConnector: phantomRedirectConnector,
                    });
                }
                else {
                    phantomRedirectConnector.emit('signMessage', {
                        signature,
                    });
                }
                break;
            }
        }
    }), [
        phantomRedirectConnector,
        setSelectedWalletConnectorKey,
        user,
        appName,
        siweStatement,
        completeWalletTransfer,
        setView,
        verifyWallet,
        getCaptchaToken,
    ]);
    const handleErrorResponse = React.useCallback((params) => {
        var _a;
        if (!phantomRedirectConnector)
            return;
        const errorCode = params.get('errorCode');
        const errorMessage = (_a = params.get('errorMessage')) !== null && _a !== void 0 ? _a : undefined;
        if (!errorCode)
            return;
        setErrorMessage(errorCode);
        params.delete('errorCode');
        params.delete('errorMessage');
        // eslint-disable-next-line no-restricted-globals
        history.replaceState(null, '', `${window.location.origin}${window.location.pathname}?${params.toString()}`);
        const method = phantomRedirectConnector.consumeMethod();
        switch (method) {
            case 'signAndSendTransaction':
                phantomRedirectConnector.emit('signAndSendTransaction', {
                    errorCode,
                    errorMessage,
                });
                break;
            case 'signAllTransactions':
                phantomRedirectConnector.emit('signAllTransactions', {
                    errorCode,
                    errorMessage,
                });
                break;
            case 'signTransaction':
                phantomRedirectConnector.emit('signTransaction', {
                    errorCode,
                    errorMessage,
                });
                break;
            case 'signMessage':
                phantomRedirectConnector.emit('signMessage', {
                    errorCode,
                    errorMessage,
                });
                break;
        }
    }, [phantomRedirectConnector, setErrorMessage]);
    return {
        handleConnectResponse,
        handleErrorResponse,
        handleUserResponse,
        phantomRedirectConnector,
    };
};

exports.useResponseHandlers = useResponseHandlers;
