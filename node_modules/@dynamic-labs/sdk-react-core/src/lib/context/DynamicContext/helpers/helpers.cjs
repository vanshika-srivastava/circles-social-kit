'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('@dynamic-labs/utils');
var localStorage = require('../../../utils/constants/localStorage.cjs');
var getExpiresAt = require('../../../utils/functions/getExpiresAt/getExpiresAt.cjs');
var decodeMinJwt = require('../../../shared/utils/functions/decodeMinJwt/decodeMinJwt.cjs');
var decodeJwt = require('../../../shared/utils/functions/decodeJwt/decodeJwt.cjs');

let logoutTimer;
let dynamicContextSettingsTimer;
let wagmiSettingsTimer;
const sdkSettingsTimeout = 24 * 60 * 60 * 1000; // 24 hours
const isMinAuthTokenExpired = (token) => {
    const decoded = decodeMinJwt.decodeMinJwt(token);
    return isTokenExpired(decoded);
};
const isAuthTokenExpired = (token) => {
    const decoded = decodeJwt.decodeJwt(token);
    return isTokenExpired(decoded);
};
const isTokenExpired = (decoded) => {
    if (!decoded) {
        return true;
    }
    if (!decoded.exp) {
        return true;
    }
    const expirationTime = new Date(decoded.exp * 1000).getTime();
    const currentTime = new Date().getTime();
    if (currentTime >= expirationTime) {
        return true;
    }
    return false;
};
const initExpirationTime = (logout) => {
    const expiresAt = getExpiresAt.getExpiresAt();
    if (!expiresAt)
        return clearTimeout(logoutTimer);
    const expirationTime = new Date(expiresAt * 1000).getTime();
    const currentTime = new Date().getTime();
    if (currentTime >= expirationTime) {
        clearTimeout(logoutTimer);
        return logout();
    }
    const expirationTimeInMs = expirationTime - currentTime;
    // If value is greater than 2,147,483,647 ms (about 24.8 days), there's an integer overflow
    // and the callback will fire imediately
    // https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value
    const expiryTimeout = Math.min(expirationTimeInMs, 2147483647);
    logoutTimer = setTimeout(logout, expiryTimeout);
};
const getInitialView = ({ connectedWallets, isBridgeFlow, bridgeOnboardingCompleted, isAuthenticated, isMultiWalletEnabled, }) => {
    // when multiwallet enabled, and user wants to link wallet
    // show wallet-list view
    if (isAuthenticated || bridgeOnboardingCompleted) {
        return {
            type: isMultiWalletEnabled ? 'multi-wallet-wallet-list' : 'wallet-list',
        };
    }
    if (isBridgeFlow && !connectedWallets.length) {
        return { type: 'bridge-welcome' };
    }
    return { type: 'login-with-email-or-wallet' };
};
const setDynamicContextSessionSettings = () => {
    setSessionSettings(localStorage.DYNAMIC_CONTEXT_LAST_SESSION_SETTINGS);
    dynamicContextSettingsTimer = setTimeout(isDynamicContextSessionSettingExpired, sdkSettingsTimeout);
};
const setWagmiSessionSettings = () => {
    setSessionSettings(localStorage.WAGMI_LAST_SESSION_SETTINGS);
    wagmiSettingsTimer = setTimeout(isWagmiSessionSettingExpired, sdkSettingsTimeout);
};
const setSessionSettings = (lsKey) => {
    const timestamp = new Date().getTime();
    utils.StorageService.setItem(lsKey, timestamp.toString());
};
const isDynamicContextSessionSettingExpired = () => isSettingExpired(localStorage.DYNAMIC_CONTEXT_LAST_SESSION_SETTINGS, dynamicContextSettingsTimer);
const isWagmiSessionSettingExpired = () => isSettingExpired(localStorage.WAGMI_LAST_SESSION_SETTINGS, wagmiSettingsTimer);
const isSettingExpired = (lsKey, timer) => {
    const lastSentTime = utils.StorageService.getItem(lsKey);
    // should set new time
    if (!lastSentTime) {
        return true;
    }
    const lastSentTimestamp = parseInt(lastSentTime);
    const currentTime = new Date().getTime();
    if (currentTime - lastSentTimestamp > sdkSettingsTimeout) {
        // Reset session-related data here
        clearTimeout(timer);
        utils.StorageService.removeItem(lsKey);
        return true;
    }
    return false;
};
const resolveNetworkValidationMode = ({ networkValidationMode, bridgeChains, }) => {
    if (networkValidationMode) {
        return networkValidationMode;
    }
    if (bridgeChains) {
        return 'always';
    }
    return 'sign-in';
};
const getDeepLinkPreference = (deepLinkPreferenceProp, isBridgeFlow) => {
    if (isBridgeFlow) {
        return 'universal';
    }
    return deepLinkPreferenceProp;
};

exports.getDeepLinkPreference = getDeepLinkPreference;
exports.getInitialView = getInitialView;
exports.initExpirationTime = initExpirationTime;
exports.isAuthTokenExpired = isAuthTokenExpired;
exports.isDynamicContextSessionSettingExpired = isDynamicContextSessionSettingExpired;
exports.isMinAuthTokenExpired = isMinAuthTokenExpired;
exports.isWagmiSessionSettingExpired = isWagmiSessionSettingExpired;
exports.resolveNetworkValidationMode = resolveNetworkValidationMode;
exports.sdkSettingsTimeout = sdkSettingsTimeout;
exports.setDynamicContextSessionSettings = setDynamicContextSessionSettings;
exports.setWagmiSessionSettings = setWagmiSessionSettings;
