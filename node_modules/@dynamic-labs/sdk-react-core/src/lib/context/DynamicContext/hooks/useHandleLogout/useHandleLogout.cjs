'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var React = require('react');
var utils = require('@dynamic-labs/utils');
require('@dynamic-labs/sdk-api-core');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
var localStorage = require('../../../../utils/constants/localStorage.cjs');
require('../../../../utils/constants/colors.cjs');
var values = require('../../../../utils/constants/values.cjs');
require('../../../../store/state/loadingAndLifecycle.cjs');
require('../../../../shared/consts/index.cjs');
require('../../../../config/ApiEndpoint.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../store/state/projectSettings/projectSettings.cjs');
var user = require('../../../../store/state/user/user.cjs');
var session = require('../../../../data/api/session/session.cjs');
require('../../../../locale/locale.cjs');
var dynamicEvents = require('../../../../events/dynamicEvents.cjs');

const useHandleLogout = (params) => {
    const paramsRef = React.useRef(params);
    paramsRef.current = params;
    const logout = React.useCallback(() => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const p = paramsRef.current;
        p.setSelectedWalletConnectorKey(null);
        p.clearAllWalletConnectSessions();
        p.setShowDynamicUserProfile(false);
        p.setShowBridgeWidget(false);
        p.resetLoginWithEmail();
        if (p.user) {
            // this deletes the auth cookie, if it exists
            // if the cookie doesn't exist, this sets a new cookie which would expire immediately
            document.cookie = `${values.DYNAMIC_AUTH_COOKIE_NAME}=; Max-Age=-99999999; path=/; SameSite=Lax`;
            // do not await this async call - just fire and forget
            session.revokeSession({
                environmentId: p.environmentId,
                sessionId: p.user.sessionId,
            });
        }
        p.setLegacyIsVerifying(false);
        // Clear storage
        utils.StorageService.removeItem(localStorage.AUTH_TOKEN, {
            priority: ['secureStorage', 'localStorage'],
        });
        utils.StorageService.removeItem(localStorage.AUTH_MIN_TOKEN, {
            priority: ['secureStorage', 'localStorage'],
        });
        utils.StorageService.removeItem(localStorage.WALLET_PICKER_SEARCH_KEY);
        utils.StorageService.removeItem(localStorage.PHANTOM_SIGNATURE_STATE);
        utils.StorageService.removeItem(localStorage.AUTH_EXPIRES_AT);
        p.setAuthMode(p.initialAuthenticationMode);
        p.setShowAuthFlow(false, {
            emitCancelAuth: false,
            ignoreIfIsEmbeddedWidget: false,
            initializeWalletConnect: false,
            performMultiWalletChecks: false,
        });
        p.setMultiWalletWidgetState('idle');
        p.removeConnectedWalletsInfo();
        p.removeBridgeOnboardingCompleted();
        p.clearPrimaryWalletId();
        p.removeConnectedNameService();
        p.removeSessionStorageSessionKeys();
        dynamicEvents.dynamicEvents.removeListener('embeddedWalletCreatePasswordCompleted');
        dynamicEvents.dynamicEvents.removeListener('embeddedWalletCreatePasswordFailed');
        dynamicEvents.dynamicEvents.removeListener('embeddedWalletUpdatePasswordCompleted');
        dynamicEvents.dynamicEvents.removeListener('embeddedWalletUpdatePasswordFailed');
        dynamicEvents.dynamicEvents.emit('logout');
        user.setUser(undefined);
        yield Promise.all(p.walletConnectors.map((connector) => connector.endSession()));
        yield Promise.all(p.connectedWallets.map((connectedWallet) => connectedWallet.connector.endSession()));
    }), []);
    /** Trigger a logout when the SDK failed to load data from storage */
    React.useEffect(() => {
        utils.StorageService.events.on('parseFailure', logout);
        return () => {
            utils.StorageService.events.off('parseFailure', logout);
        };
    }, [logout]);
    return logout;
};

exports.useHandleLogout = useHandleLogout;
