'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var dynamicEvents = require('../../../../events/dynamicEvents.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
require('../../../../store/state/loadingAndLifecycle.cjs');
require('../../../../shared/consts/index.cjs');
var ErrorContext = require('../../../ErrorContext/ErrorContext.cjs');

/**
 * There are a multitude of scenarios where we want to ignore or insert functionality to calls
 * to setShowAuthFlow. This hook wraps it with an options parameter to allow encapsulating these
 * different scenarios and makes it especially easy to customize exactly which version of this method
 * is being passed to useDynamicContext.
 */
const useShowAuthFlow = ({ isAuthenticated, isRenderingEmbeddedAuthFlow, isMultiWalletEnabled, walletConnectorOptions, setShowDynamicUserProfile, }) => {
    const [showAuthFlow, _setShowAuthFlow] = React.useState(false);
    const { setError } = ErrorContext.useErrorContext();
    const setShowAuthFlow = React.useCallback((value, options = {}) => {
        var _a;
        const { emitCancelAuth, ignoreIfIsEmbeddedWidget, initializeWalletConnect, performMultiWalletChecks, clearErrors, } = Object.assign({ clearErrors: true, emitCancelAuth: false, ignoreIfIsEmbeddedWidget: true, initializeWalletConnect: true, performMultiWalletChecks: false }, options);
        logger.logger.logVerboseTroubleshootingMessage('setShowAuthFlow', {
            clearErrors,
            emitCancelAuth,
            ignoreIfIsEmbeddedWidget,
            initializeWalletConnect,
            performMultiWalletChecks,
        });
        if (!showAuthFlow && value) {
            dynamicEvents.dynamicEvents.emit('authFlowOpen');
        }
        else if (showAuthFlow && !value) {
            dynamicEvents.dynamicEvents.emit('authFlowClose');
        }
        if (value) {
            if (ignoreIfIsEmbeddedWidget && isRenderingEmbeddedAuthFlow.current)
                return;
            if (performMultiWalletChecks && isAuthenticated) {
                if (!isMultiWalletEnabled) {
                    return setShowDynamicUserProfile(true);
                }
                logger.logger.warn('Use setShowLinkNewWalletModal to render the wallet list instead. For more information, see: https://docs.dynamic.xyz/react-sdk/hooks/usedynamiccontext');
                return;
            }
            if (initializeWalletConnect) {
                (_a = walletConnectorOptions
                    .find((wallet) => wallet.walletConnector.key === 'walletconnect')) === null || _a === void 0 ? void 0 : _a.walletConnector.init();
            }
        }
        else if (emitCancelAuth && showAuthFlow)
            dynamicEvents.dynamicEvents.emit('authFlowCancelled');
        if (clearErrors)
            setError(undefined);
        _setShowAuthFlow(value);
    }, [
        isAuthenticated,
        isMultiWalletEnabled,
        isRenderingEmbeddedAuthFlow,
        setError,
        setShowDynamicUserProfile,
        showAuthFlow,
        walletConnectorOptions,
    ]);
    return [showAuthFlow, setShowAuthFlow];
};

exports.useShowAuthFlow = useShowAuthFlow;
