'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { createContext, useState, useRef, useMemo, useEffect, useCallback } from 'react';
import { I18nextProvider } from 'react-i18next';
import { getIconicSpriteUrl } from '@dynamic-labs/iconic';
import { Logger } from '@dynamic-labs/logger';
import { MissingEnvironmentIdError, StorageService } from '@dynamic-labs/utils';
import { useWalletBookCdn, getWalletBookCdnUrl, WalletBookContextProvider } from '@dynamic-labs/wallet-book';
import { setChainInfoOverrides, logger as logger$1, isSessionKeyCompatibleWalletConnector } from '@dynamic-labs/wallet-connector-core';
import { DynamicAuthFlow } from '../../app.js';
import '../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../components/Alert/Alert.js';
import '../../events/dynamicEvents.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../shared/logger.js';
import { ViewContextProvider } from '../ViewContext/ViewContext.js';
import { BRIDGE_ONBOARDING_COMPLETED, AUTH_MODE, WALLET_PICKER_SEARCH_KEY, PHANTOM_SIGNATURE_STATE } from '../../utils/constants/localStorage.js';
import '../../utils/constants/colors.js';
import { DEFAULT_NUMBER_OF_WALLETS_TO_SHOW } from '../../utils/constants/values.js';
import { useGlobalLoading } from '../../shared/utils/hooks/useGlobalLoading/useGlobalLoading.js';
import { useLocalStorage } from '../../shared/utils/hooks/useLocalStorage/useLocalStorage.js';
import { usePrefetch } from '../../shared/utils/hooks/usePrefetch/usePrefetch.js';
import '../../shared/consts/index.js';
import { CaptchaContextProvider } from '../CaptchaContext/CaptchaContext.js';
import { ErrorContextProvider } from '../ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import { getAuthToken } from '../../utils/functions/getAuthToken/getAuthToken.js';
import { getMinAuthToken } from '../../utils/functions/getMinAuthToken/getMinAuthToken.js';
import 'react-international-phone';
import { VERSION } from '../../../version.js';
import ApiEndpoint from '../../config/ApiEndpoint.js';
import { useUser } from '../../store/state/user/user.js';
import { sendDynamicProps } from '../../data/api/settings/settings.js';
import { Locale } from '../../locale/locale.js';
import { useProjectSettings, useFetchProjectSettings } from '../../store/state/projectSettings/projectSettings.js';
import { AccessDeniedContextProvider } from '../AccessDeniedContext/AccessDeniedContext.js';
import { AccountExistsContextProvider } from '../AccountExistsContext/AccountExistsContext.js';
import { UserWalletsProvider } from '../UserWalletsContext/UserWalletsContext.js';
import { VerificationProvider } from '../VerificationContext/VerificationContext.js';
import 'react-dom';
import { WalletContextProvider } from '../WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import { useFetchNonce } from '../../utils/hooks/useFetchNonce/useFetchNonce.js';
import { ThemeContextProvider } from '../ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import { useSetWalletConnectorVerifiedCredentials } from '../../utils/hooks/useSetWalletConnectorVerifiedCredentials/useSetWalletConnectorVerifiedCredentials.js';
import '@dynamic-labs/types';
import { LoadingContextProvider } from '../LoadingContext/LoadingContext.js';
import { SECURE_ENCLAVE_WALLET_SESSION_KEYS, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS } from '../../utils/constants/sessionStorage.js';
import 'yup';
import '../MockContext/MockContext.js';
import '../../views/CollectUserDataView/useFields.js';
import { FieldsStateProvider } from '../FieldsStateContext/FieldsStateContext.js';
import { UserFieldEditorContextProvider } from '../UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import { useValidateSession } from '../../utils/hooks/useValidateSession/useValidateSession.js';
import { useWalletConnectorOptions } from '../../utils/hooks/useWalletConnectorOptions/useWalletConnectorOptions.js';
import { useWalletConnectors } from '../../utils/hooks/useWalletConnectors/useWalletConnectors.js';
import { useWalletUiUtils } from '../../utils/hooks/useWalletUiUtils/useWalletUiUtils.js';
import { useWalletConnectorNetwork } from '../../utils/hooks/useWalletConnectorNetwork/useWalletConnectorNetwork.js';
import { useSetWalletConnectorFetchers } from '../../utils/hooks/useSetWalletConnectorFetchers/useSetWalletConnectorFetchers.js';
import { useSendDynamicProps } from '../../utils/hooks/useSendDynamicProps/useSendDynamicProps.js';
import '../../store/state/tokenBalances.js';
import { WalletGroupContextProvider } from '../WalletGroupContext/WalletGroupContext.js';
import { useResetCookieLocalStorage } from '../../utils/hooks/useResetCookieLocalStorage/useResetCookieLocalStorage.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/IconButton/IconButton.js';
import '../../components/InlineWidget/InlineWidget.js';
import '../../components/Input/Input.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../FooterAnimationContext/index.js';
import { SocialRedirectContextProvider } from '../SocialRedirectContext/SocialRedirectContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { DynamicWidgetContextProvider } from '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import { IpConfigurationContextProvider } from '../IpConfigurationContext/IpConfigurationContext.js';
import { PasskeyContextProvider } from '../PasskeyContext/PasskeyContext.js';
import '../../store/state/sendBalances.js';
import { SyncAuthFlow } from '../../components/SyncAuthFlow/SyncAuthFlow.js';
import { Toolkit } from '../../components/Toolkit/Toolkit.js';
import { TelegramAutoLogin } from '../../components/TelegramAutoLogin/TelegramAutoLogin.js';
import { removeStoreInstance, initializeStore } from '../../store/internalImplementation/store.js';
import { getMissingChains } from '../../utils/functions/getMissingChains/getMissingChains.js';
import { parseTheme } from '../../utils/functions/parseTheme/parseTheme.js';
import { useMultiWalletWidgetState } from '../../utils/hooks/multiWallet/useMultiWalletWidgetState/useMultiWalletWidgetState.js';
import { useClearWalletConnectSessions } from '../../utils/hooks/useClearWalletConnectSessions/useClearWalletConnectSessions.js';
import { useConnectWallet } from '../../utils/hooks/useConnectWallet/useConnectWallet.js';
import { useFetchWalletsForChainsMap } from '../../utils/hooks/useFetchWalletsForChainsMap/useFetchWalletsForChainsMap.js';
import { useHandleUnlinkWallet } from '../../utils/hooks/useHandleUnlinkWallet/useHandleUnlinkWallet.js';
import { usePrimaryWalletId } from '../../utils/hooks/usePrimaryWalletId/usePrimaryWalletId.js';
import { useWalletEventListeners } from '../../utils/hooks/useWalletEventListeners/useWalletEventListeners.js';
import { useTabState } from '../../views/WalletList/hooks/useTabState.js';
import { DynamicBridgeWidgetContextProvider } from '../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { WidgetRegistryContextProvider } from '../WidgetRegistry/WidgetRegistryContextProvider.js';
import { FundingWidget } from '../../widgets/FundingWidget/FundingWidget.js';
import { ConnectWithOtpProvider } from '../ConnectWithOtpContext/ConnectWithOtpProvider.js';
import '../ConnectWithOtpContext/ConnectWithOtpContext.js';
import { ErrorBoundary } from '../ErrorBoundary/ErrorBoundary.js';
import { ErrorBoundaryExclude } from '../ErrorBoundary/ErrorBoundaryExclude.js';
import '../ErrorBoundary/ErrorBoundaryBase.js';
import { FundingContextProvider } from '../FundingContext/FundingContext.js';
import { PhantomRedirectContextProvider } from '../PhantomRedirectContext/PhantomRedirectContext.js';
import { ReinitializeContextProvider } from '../ReinitializeContext/ReinitializeContextProvider.js';
import { SendBalanceContextProvider } from '../SendBalanceContext/SendBalanceContext.js';
import { UseNetworkValidation } from '../UseNetworkValidation/UseNetworkValidation.js';
import { useFetchNetworkConfigurations, useNetworkConfigurations } from '../../store/state/networkConfigurations/networkConfigurations.js';
import { resolveNetworkValidationMode, initExpirationTime, getInitialView, getDeepLinkPreference } from './helpers/helpers.js';
import { useDisplayOrderState } from './hooks/useDisplayOrderState/useDisplayOrderState.js';
import { useEmailLoginState } from './hooks/useEmailLoginState/useEmailLoginState.js';
import { useHandleLogout } from './hooks/useHandleLogout/useHandleLogout.js';
import { useNameService } from './hooks/useNameService/useNameService.js';
import { useSelectedWalletConnector } from './hooks/useSelectedWalletConnector/useSelectedWalletConnector.js';
import { useShowAuthFlow } from './hooks/useShowAuthFlow/useShowAuthFlow.js';
import { usePasskeySuccessPopup } from './hooks/usePasskeySuccessPopup/usePasskeySuccessPopup.js';
import { useTieCallbacksToEvents } from './hooks/useTieCallbacksToEvents/useTieCallbacksToEvents.js';
import { useMultiWallet } from './hooks/useMultiWallet/useMultiWallet.js';
import { useMultiAsset } from './hooks/useMultiAsset/useMultiAsset.js';
import { useParentDynamicContextGuard } from './hooks/useParentDynamicContextGuard/useParentDynamicContextGuard.js';
import { useShowFiat } from './hooks/useShowFiat/useShowFiat.js';
import { useCustomerCallbacks } from './useCustomerCallbacks/useCustomerCallbacks.js';
import { useRegisterStorageService } from './hooks/useRegisterStorageService/useRegisterStorageService.js';

const PUBLIC_PROJECT_LIVE_ENVIRONMENT_ID = '2762a57b-faa4-41ce-9f16-abff9300e2c9';
const DynamicContext = createContext(undefined);
/** The context provider itself we only use internally */
const InnerDynamicContextProvider = ({ children, theme, settings, locale, enableInstrumentation = false, }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    const { accessDeniedMessagePrimary, accessDeniedMessageSecondary, accessDeniedButton, defaultPhoneInputIso2, apiBaseUrl, coinbaseWalletPreference, detectNewWalletsForLinking = false, enableConnectOnlyFallback = false, deepLinkPreference: deepLinkPreferenceProp = 'native', bridgeChains, cssOverrides, defaultNumberOfWalletsToShow = DEFAULT_NUMBER_OF_WALLETS_TO_SHOW, flowNetwork, initialAuthenticationMode = 'connect-and-sign', debugError = false, displaySiweStatement = true, newToWeb3WalletChainMap, enableVisitTrackingOnConnectOnly = true, environmentId, walletsFilter, logLevel = 'WARN', mobileExperience, notInTheListImageUrl, onboardingImageUrl, policiesConsentInnerComponent, customPrivacyPolicy, privacyPolicyUrl, socialMediaLinkText, socialMediaIconUrl, socialMediaUrl, customTermsOfServices, termsOfServiceUrl, toolkitEnabled, siweStatement, shadowDOMEnabled = true, walletConnectors: walletConnectorsProp, socialProvidersFilter, showLockedWalletView = false, walletConnectPreferredChains, walletConnectorExtensions, recommendedWallets, handlers, } = settings;
    /**
     * initialize Storage
     */
    useRegisterStorageService({
        storagePostfix: settings.localStorageSuffix,
    });
    /**
     * initialize global store
     */
    initializeStore({
        environmentId,
        storageSuffix: settings.localStorageSuffix,
    });
    /**
     * Sets the chain info overrides if they are present
     */
    setChainInfoOverrides((_a = settings.overrides) === null || _a === void 0 ? void 0 : _a.chainDisplayValues);
    /**
     * For backwards compatibility, we allow the client to pass in
     * `eventsCallbacks` instead of `events`. It should remove this
     * in version 3.0.0.
     * ticket: QNTM-1504
     */
    const events = (_b = settings.events) !== null && _b !== void 0 ? _b : settings.eventsCallbacks;
    const networkValidationMode = resolveNetworkValidationMode({
        bridgeChains: settings.bridgeChains,
        networkValidationMode: settings.networkValidationMode,
    });
    let { appLogoUrl = 'https://demo.dynamic.xyz/assets/dynamic-logo.svg', appName = 'Dynamic Example', } = settings;
    if (!environmentId) {
        throw new MissingEnvironmentIdError();
    }
    logger.setLogLevel(logLevel);
    logger$1.setLogLevel(logLevel);
    if (environmentId === PUBLIC_PROJECT_LIVE_ENVIRONMENT_ID) {
        logger.warn(`WARNING: DYNAMIC is using a test environment ID ${environmentId}. Please sign up on https://app.dynamic.xyz/ to get your production environment ID.`);
    }
    ApiEndpoint.setBaseUrl((_c = process.env.DYNAMIC_API_BASE_URL) !== null && _c !== void 0 ? _c : apiBaseUrl);
    const i18nSDKInstance = Locale.setup(locale);
    const isBridgeFlow = Boolean(bridgeChains);
    const deepLinkPreference = getDeepLinkPreference(deepLinkPreferenceProp, isBridgeFlow);
    const { selectedTabIndex, setSelectedTabIndex, selectedTabSettings, tabsItems, } = useTabState({ settingsOverrides: settings.overrides });
    // state to track the full connectivity status of the individual's wallets.
    // Set to true once the predetermined number of wallets is connected.
    const [bridgeOnboardingCompleted, setBridgeOnboardingCompleted, removeBridgeOnboardingCompleted,] = useLocalStorage(BRIDGE_ONBOARDING_COMPLETED, false);
    // Allows clients to control widget flow without need to click on AccountControl
    const [showDynamicUserProfile, setShowDynamicUserProfile] = useState(false);
    // Alows clients to control the Bridget Widget flow without need to click on Bridge Widget
    const [showBridgeWidget, setShowBridgeWidget] = useState(false);
    const [isSingleWalletAccount, setIsSingleWalletAccount] = useState(false);
    const { user, userWithMissingInfo } = useUser();
    const isAuthenticated = Boolean(user);
    if (user) {
        logger.setMetaData('user', user);
    }
    else {
        logger.setMetaData('user', undefined);
    }
    const { consumeNonce } = useFetchNonce(environmentId);
    const [qrcodeUri, setQrcodeUri] = useState('');
    const [desktopUri, setDesktopUri] = useState('');
    const [multiWalletWidgetState, setMultiWalletWidgetState, { awaiting_account_switch: [accountSwitchState], awaiting_signature: [awaitingSignatureState], },] = useMultiWalletWidgetState();
    const { settings: projectSettings } = useProjectSettings();
    useSendDynamicProps({ environmentId, settings });
    const multiWallet = useMultiWallet({
        isBridgeFlow,
        multiWalletOverride: (_d = settings.overrides) === null || _d === void 0 ? void 0 : _d.multiWallet,
        multiWalletSettings: (_e = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _e === void 0 ? void 0 : _e.multiWallet,
    });
    const multiAsset = useMultiAsset({
        multiAssetOverride: (_f = settings.overrides) === null || _f === void 0 ? void 0 : _f.multiAsset,
        multiAssetSettings: (_g = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _g === void 0 ? void 0 : _g.enableMultiAsset,
    });
    const showFiat = useShowFiat({
        showFiatOverride: (_h = settings.overrides) === null || _h === void 0 ? void 0 : _h.showFiat,
        showFiatSettings: (_j = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _j === void 0 ? void 0 : _j.showFiat,
    });
    // Used inside useVerifyOnAwaitingSignature. Is legacy and should be removed asap
    const [legacyIsVerifying, setLegacyIsVerifying] = useState(false);
    const walletBook = useWalletBookCdn();
    useFetchNetworkConfigurations({
        cosmosNetworkOverrides: (_k = settings.overrides) === null || _k === void 0 ? void 0 : _k.cosmosNetworks,
        environmentId,
        evmNetworksOverrides: (_l = settings.overrides) === null || _l === void 0 ? void 0 : _l.evmNetworks,
        projectSettings,
    });
    const { networkConfigurations: serverNetworkConfigurations } = useNetworkConfigurations();
    const { imageUserInAccessList, imageUserNotInAccessList, displayName, appLogo, } = (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general) || {};
    appLogoUrl = appLogo || appLogoUrl;
    appName = displayName || appName;
    const [loginWithEmail, setLogInWithEmail, resetLoginWithEmail] = useEmailLoginState((projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) || [], user);
    const [authorizationViewDisplayOrder, setAuthorizationViewDisplayOrder] = useDisplayOrderState(projectSettings);
    const [confirmationModal, walletUiUtils] = useWalletUiUtils({
        appLogoUrl,
        appName,
        hideEmbeddedWalletTransactionUIs: !((_o = (_m = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.sdk) === null || _m === void 0 ? void 0 : _m.embeddedWallets) === null || _o === void 0 ? void 0 : _o.showEmbeddedWalletActionsUI),
    });
    const { walletConnectorOptions } = useWalletConnectorOptions({
        appLogoUrl,
        appName,
        coinbaseWalletPreference,
        deepLinkPreference,
        flowNetwork,
        mobileExperience,
        networkConfigurations: serverNetworkConfigurations,
        projectSettings,
        walletBook,
        walletConnectPreferredChains,
        walletConnectorExtensions,
        walletConnectorsProp,
        walletUiUtils,
    });
    const [authMode, setAuthMode] = useLocalStorage(AUTH_MODE, initialAuthenticationMode);
    const { clearPrimaryWalletId, primaryWalletId, setPrimaryWalletId } = usePrimaryWalletId({
        environmentId,
        user,
    });
    // this is a state because it's set based on primaryWallet and bridgeChainsToConnect,
    // which are only available further down and have would have circular dependencies
    const [requiredWalletsConnected, setRequiredWalletsConnected] = useState(false);
    const isUserAuthenticated = Boolean(authMode === 'connect-and-sign' ? user : requiredWalletsConnected);
    const isRenderingEmbeddedAuthFlow = useRef(false);
    const [showAuthFlow, setShowAuthFlow] = useShowAuthFlow({
        isAuthenticated: isUserAuthenticated,
        isMultiWalletEnabled: multiWallet,
        isRenderingEmbeddedAuthFlow,
        setShowDynamicUserProfile,
        walletConnectorOptions,
    });
    const { connectWallet, removeConnectedWalletsInfo, connectedWalletsInfo, getConnectedWalletById, connectedWallets, disconnectWallet, refreshConnectedWallet, } = useConnectWallet({
        authMode,
        clearPrimaryWalletId,
        enableVisitTrackingOnConnectOnly,
        environmentId,
        handleConnectedWallet: handlers === null || handlers === void 0 ? void 0 : handlers.handleConnectedWallet,
        isBridgeFlow,
        primaryWalletId,
        setPrimaryWalletId,
        setShowAuthFlow,
        user,
        walletConnectorOptions,
    });
    const bridgeChainsToConnect = useMemo(() => getMissingChains(bridgeChains, connectedWalletsInfo), [bridgeChains, connectedWalletsInfo]);
    const { selectedWalletConnector, setSelectedWalletConnectorKey } = useSelectedWalletConnector({ walletConnectorOptions });
    //selected wallet to perform an action (become primary, unlink, etc)
    const [selectedWalletWithAction, setSelectedWalletWithAction] = useState(null);
    useSetWalletConnectorVerifiedCredentials(user !== null && user !== void 0 ? user : userWithMissingInfo, walletConnectorOptions);
    useSetWalletConnectorFetchers(walletConnectorOptions, environmentId);
    const { primaryWallet, showQrcodeModal, secondaryWallets, setPrimaryWallet, setShowQrcodeModal, wallets: linkedOrConnectedWallets, } = useWalletConnectors({
        authMode,
        canHaveMultipleWalletsConnected: multiWallet,
        connectedWallets,
        primaryWalletId,
        setMultiWalletWidgetState,
        setPrimaryWalletId,
        user: user || userWithMissingInfo,
        walletConnectorOptions,
    });
    useEffect(() => {
        setRequiredWalletsConnected(!(bridgeChainsToConnect === null || bridgeChainsToConnect === void 0 ? void 0 : bridgeChainsToConnect.length) && Boolean(primaryWallet));
    }, [bridgeChainsToConnect, primaryWallet]);
    const walletConnectors = linkedOrConnectedWallets.map((wallet) => wallet.connector);
    const sdkHasLoaded = useGlobalLoading({
        appName,
        authMode,
        connectedInfo: connectedWalletsInfo[0],
        connectedWallets,
        enableInstrumentation,
        environmentId,
        primaryWallet,
        projectSettings,
        user: user !== null && user !== void 0 ? user : userWithMissingInfo,
        walletBook,
    });
    useFetchProjectSettings({ environmentId });
    const { getNameService, removeConnectedNameService } = useNameService({
        currentWallet: primaryWallet !== null && primaryWallet !== void 0 ? primaryWallet : connectedWallets[0],
        user,
    });
    const { clearAllWalletConnectSessions } = useClearWalletConnectSessions({
        connectors: walletConnectors,
    });
    const removeSessionStorageSessionKeys = () => {
        StorageService.removeItem(SECURE_ENCLAVE_WALLET_SESSION_KEYS, SECURE_ENCLAVE_WALLET_SESSION_KEYS_STORAGE_OPTIONS);
        walletConnectors.forEach((connector) => {
            if (isSessionKeyCompatibleWalletConnector(connector) &&
                typeof (connector === null || connector === void 0 ? void 0 : connector.removeSessionKeys) === 'function') {
                connector === null || connector === void 0 ? void 0 : connector.removeSessionKeys();
            }
        });
    };
    const handleLogOut = useHandleLogout({
        bridgeChains,
        clearAllWalletConnectSessions,
        clearPrimaryWalletId,
        connectedWallets,
        environmentId,
        events,
        initialAuthenticationMode,
        removeBridgeOnboardingCompleted,
        removeConnectedNameService,
        removeConnectedWalletsInfo,
        removeSessionStorageSessionKeys,
        resetLoginWithEmail,
        setAuthMode,
        setLegacyIsVerifying,
        setMultiWalletWidgetState,
        setSelectedWalletConnectorKey,
        setShowAuthFlow,
        setShowBridgeWidget,
        setShowDynamicUserProfile,
        user,
        walletConnectors,
    });
    useValidateSession({
        environmentId,
        handleLogOut,
    });
    useResetCookieLocalStorage({
        environmentId,
        projectSettings,
        setPrimaryWalletId,
    });
    // Ties all client callbacks to dynamic's events, such that
    // when our events are triggered, so are the client callbacks
    useTieCallbacksToEvents({
        clientCallbacks: events,
        user,
    });
    const handleUnlinkWallet = useHandleUnlinkWallet({
        environmentId,
        primaryWalletId,
        secondaryWallets,
        verifiedCredentials: (user === null || user === void 0 ? void 0 : user.verifiedCredentials) || [],
    });
    const { isLoading: loadingNetwork, network } = useWalletConnectorNetwork(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector);
    useWalletEventListeners({
        authMode,
        detectNewWalletsForLinking,
        disconnectWallet,
        handleLogOut,
        multiWallet,
        multiWalletWidgetState,
        primaryWallet,
        refreshConnectedWallet,
        secondaryWallets,
        selectedWalletConnector,
        selectedWalletWithAction,
        setMultiWalletWidgetState,
        setPrimaryWalletId,
        setSelectedWalletConnectorKey,
        setSelectedWalletWithAction,
        user,
    });
    const { walletsForChainsMap } = useFetchWalletsForChainsMap(newToWeb3WalletChainMap);
    useEffect(() => {
        initExpirationTime(handleLogOut);
    }, [handleLogOut, isAuthenticated]);
    const { setCallback } = useCustomerCallbacks({
        callbacks: {
            onAuthSuccess: events === null || events === void 0 ? void 0 : events.onAuthSuccess,
            onUserProfileUpdate: events === null || events === void 0 ? void 0 : events.onUserProfileUpdate,
        },
        handleLogOut,
        isAuthenticated,
        primaryWallet,
        user,
    });
    const sendWagmiSettings = useCallback(() => (settings) => {
        const { dynamicWagmiSettings } = settings;
        if (dynamicWagmiSettings) {
            sendDynamicProps(environmentId, {
                dynamicWagmiSettings: { dynamicWagmiSettings },
            });
        }
    }, [environmentId]);
    const clearStatesOnBackClick = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        setDesktopUri('');
        setLegacyIsVerifying(false);
        if (!user) {
            clearAllWalletConnectSessions();
        }
        setMultiWalletWidgetState('idle');
        if (authMode !== 'connect-only') {
            removeConnectedWalletsInfo();
        }
        if (StorageService.getItem(WALLET_PICKER_SEARCH_KEY)) {
            StorageService.removeItem(WALLET_PICKER_SEARCH_KEY);
        }
        StorageService.removeItem(PHANTOM_SIGNATURE_STATE);
        if (selectedWalletConnector &&
            (!primaryWallet ||
                primaryWallet.connector.key !== selectedWalletConnector.key)) {
            yield (selectedWalletConnector === null || selectedWalletConnector === void 0 ? void 0 : selectedWalletConnector.endSession());
        }
    }), [
        user,
        setMultiWalletWidgetState,
        authMode,
        selectedWalletConnector,
        primaryWallet,
        clearAllWalletConnectSessions,
        removeConnectedWalletsInfo,
    ]);
    const { passkeySuccessPopup, setPasskeySuccessPopup } = usePasskeySuccessPopup();
    const value = useMemo(() => {
        var _a;
        return ({
            accessDeniedButton,
            accessDeniedMessagePrimary,
            accessDeniedMessageSecondary,
            accountSwitchState,
            appLogoUrl,
            appName,
            authMode,
            authToken: getAuthToken(),
            authorizationViewDisplayOrder,
            awaitingSignatureState,
            bridgeChains,
            bridgeChainsToConnect,
            bridgeOnboardingCompleted,
            clearStatesOnBackClick,
            connectWallet,
            connectedWallets,
            consumeNonce,
            cssOverrides,
            customPrivacyPolicy,
            customTermsOfServices,
            debugError,
            defaultNumberOfWalletsToShow,
            defaultPhoneInputIso2,
            desktopUri,
            detectNewWalletsForLinking,
            disconnectWallet,
            displaySiweStatement,
            enableConnectOnlyFallback,
            environmentId,
            events,
            getConnectedWalletById,
            getNameService,
            handleLogOut,
            handleUnlinkWallet: authMode === 'connect-only' ? disconnectWallet : handleUnlinkWallet,
            handlers,
            i18nSDKInstance,
            isBridgeFlow,
            isRenderingEmbeddedAuthFlow,
            isSingleWalletAccount,
            legacyIsVerifying,
            linkedWallets: authMode === 'connect-only' || !user ? [] : linkedOrConnectedWallets,
            loadingNetwork,
            locale: {
                changeLanguage: Locale.getInstance().changeLanguage,
            },
            loginWithEmail,
            minAuthToken: getMinAuthToken(),
            multiAsset,
            multiWallet,
            multiWalletWidgetState,
            network,
            networkConfigurations: serverNetworkConfigurations,
            networkValidationMode,
            newToWeb3WalletChainMap: walletsForChainsMap,
            notInTheListImageUrl: imageUserNotInAccessList || notInTheListImageUrl,
            onboardingImageUrl: imageUserInAccessList || onboardingImageUrl,
            overrides: settings.overrides,
            passkeySuccessPopup,
            policiesConsentInnerComponent,
            primaryWallet,
            primaryWalletId,
            privacyPolicyUrl,
            projectSettings,
            qrcodeUri,
            recommendedWallets,
            redirectUrl: settings.redirectUrl,
            removeBridgeOnboardingCompleted,
            removeConnectedWalletsInfo,
            sdkHasLoaded,
            secondaryWallets,
            selectedTabIndex,
            selectedTabSettings,
            selectedWalletConnector,
            selectedWalletWithAction,
            sendWagmiSettings,
            setAuthMode,
            setAuthorizationViewDisplayOrder,
            setBridgeOnboardingCompleted,
            setCallback,
            setDesktopUri,
            setIsSingleWalletAccount,
            setLegacyIsVerifying,
            setLogInWithEmail,
            setMultiWalletWidgetState,
            setPasskeySuccessPopup,
            setPrimaryWallet,
            setPrimaryWalletId,
            setQrcodeUri,
            setSelectedTabIndex,
            setSelectedWalletConnectorKey,
            setSelectedWalletWithAction,
            setShowAuthFlow,
            setShowBridgeWidget,
            setShowDynamicUserProfile,
            setShowQrcodeModal,
            shadowDOMEnabled,
            showAuthFlow,
            showBridgeWidget,
            showDynamicUserProfile,
            showFiat,
            showLockedWalletView,
            showQrcodeModal,
            siweStatement,
            socialMediaIconUrl: ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.general) === null || _a === void 0 ? void 0 : _a.supportUrls) || socialMediaIconUrl,
            socialMediaLinkText,
            socialMediaUrl,
            socialProvidersFilter,
            socialSettings: settings.social,
            tabsItems,
            termsOfServiceUrl,
            theme,
            toolkitEnabled,
            user,
            userWithMissingInfo,
            walletConnectorOptions,
            walletUiUtils,
            walletsFilter,
        });
    }, [
        accessDeniedButton,
        accessDeniedMessagePrimary,
        accessDeniedMessageSecondary,
        accountSwitchState,
        appLogoUrl,
        appName,
        authMode,
        authorizationViewDisplayOrder,
        awaitingSignatureState,
        bridgeChains,
        bridgeChainsToConnect,
        bridgeOnboardingCompleted,
        clearStatesOnBackClick,
        connectWallet,
        connectedWallets,
        consumeNonce,
        cssOverrides,
        customPrivacyPolicy,
        customTermsOfServices,
        debugError,
        defaultNumberOfWalletsToShow,
        defaultPhoneInputIso2,
        desktopUri,
        detectNewWalletsForLinking,
        disconnectWallet,
        displaySiweStatement,
        enableConnectOnlyFallback,
        environmentId,
        events,
        getConnectedWalletById,
        getNameService,
        handleLogOut,
        handleUnlinkWallet,
        handlers,
        i18nSDKInstance,
        isBridgeFlow,
        isSingleWalletAccount,
        legacyIsVerifying,
        user,
        linkedOrConnectedWallets,
        loadingNetwork,
        loginWithEmail,
        multiAsset,
        multiWallet,
        multiWalletWidgetState,
        network,
        serverNetworkConfigurations,
        networkValidationMode,
        walletsForChainsMap,
        imageUserNotInAccessList,
        notInTheListImageUrl,
        imageUserInAccessList,
        onboardingImageUrl,
        settings.overrides,
        settings.redirectUrl,
        settings.social,
        passkeySuccessPopup,
        policiesConsentInnerComponent,
        primaryWallet,
        primaryWalletId,
        privacyPolicyUrl,
        projectSettings,
        qrcodeUri,
        recommendedWallets,
        removeBridgeOnboardingCompleted,
        removeConnectedWalletsInfo,
        sdkHasLoaded,
        secondaryWallets,
        selectedTabIndex,
        selectedTabSettings,
        selectedWalletConnector,
        selectedWalletWithAction,
        sendWagmiSettings,
        setAuthMode,
        setAuthorizationViewDisplayOrder,
        setBridgeOnboardingCompleted,
        setCallback,
        setLogInWithEmail,
        setMultiWalletWidgetState,
        setPasskeySuccessPopup,
        setPrimaryWallet,
        setPrimaryWalletId,
        setSelectedTabIndex,
        setSelectedWalletConnectorKey,
        setShowAuthFlow,
        setShowQrcodeModal,
        shadowDOMEnabled,
        showAuthFlow,
        showBridgeWidget,
        showDynamicUserProfile,
        showFiat,
        showLockedWalletView,
        showQrcodeModal,
        siweStatement,
        socialMediaIconUrl,
        socialMediaLinkText,
        socialMediaUrl,
        socialProvidersFilter,
        tabsItems,
        termsOfServiceUrl,
        theme,
        toolkitEnabled,
        userWithMissingInfo,
        walletConnectorOptions,
        walletUiUtils,
        walletsFilter,
    ]);
    usePrefetch({
        as: 'image',
        href: getIconicSpriteUrl(),
        id: 'sprite',
        type: 'image/svg+xml',
    });
    usePrefetch({
        as: 'fetch',
        href: getWalletBookCdnUrl(),
        id: 'wallet-book',
        type: 'application/json',
    });
    usePrefetch({
        as: 'fetch',
        href: `${ApiEndpoint.getBaseUrl()}/sdk/${environmentId}/settings?sdkVersion=${encodeURIComponent(`WalletKit/${VERSION}`)}`,
        id: `project-settings-${environmentId}`,
        type: 'application/json',
    });
    // DYN-1140 - Opens Widget when multiWalletWidgetState changes
    useEffect(() => {
        // If statement to secure SingleWallet widget
        if (!multiWallet && multiWalletWidgetState !== 'awaiting_account_switch') {
            return;
        }
        // We need to make sure that the user is logged in so that we do not try to display the widget before authorization
        if (user && multiWalletWidgetState !== 'idle' && !showDynamicUserProfile) {
            setShowDynamicUserProfile(true);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [multiWallet, multiWalletWidgetState, showDynamicUserProfile]);
    return (jsx(I18nextProvider, { i18n: i18nSDKInstance, children: jsx(DynamicContext.Provider, { value: value, children: jsx(WalletBookContextProvider, { walletBook: walletBook, children: jsx(ThemeContextProvider, { customerTheme: parseTheme(theme, ((_p = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design) === null || _p === void 0 ? void 0 : _p.modal) || undefined), designSettings: projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.design, children: jsx(LoadingContextProvider, { children: jsxs(ViewContextProvider, { initialView: getInitialView({
                                bridgeOnboardingCompleted,
                                connectedWallets,
                                isAuthenticated: isAuthenticated || Boolean(primaryWallet),
                                isBridgeFlow,
                                isMultiWalletEnabled: multiWallet,
                            }), children: [networkValidationMode === 'always' && jsx(UseNetworkValidation, {}), jsx(CaptchaContextProvider, { children: jsx(AccountExistsContextProvider, { children: jsx(WalletContextProvider, { children: jsx(VerificationProvider, { children: jsx(PasskeyContextProvider, { children: jsx(DynamicWidgetContextProvider, { children: jsx(DynamicBridgeWidgetContextProvider, { children: jsx(FundingContextProvider, { children: jsx(AccessDeniedContextProvider, { children: jsx(SendBalanceContextProvider, { children: jsx(WalletGroupContextProvider, { children: jsx(UserFieldEditorContextProvider, { children: jsx(ConnectWithOtpProvider, { children: jsx(PhantomRedirectContextProvider, { children: jsxs(SocialRedirectContextProvider, { children: [jsx(DynamicAuthFlow, {}), jsx(Toolkit, {}), jsx(FundingWidget, {}), jsx(SyncAuthFlow, {}), jsx(TelegramAutoLogin, {}), confirmationModal, jsx(ErrorBoundaryExclude, { children: children })] }) }) }) }) }) }) }) }) }) }) }) }) }) }) })] }) }) }) }) }) }));
};
/** The context provider you need to have access too all of Dynamic's hooks */
const DynamicContextProvider = (props) => {
    Logger.setEnvironmentId(props.settings.environmentId);
    Logger.setEmitErrors(props.emitErrors);
    useParentDynamicContextGuard();
    return (jsx(ReinitializeContextProvider, { onReinitialize: removeStoreInstance, children: jsx(ErrorBoundary, { children: jsx(ErrorContextProvider, { children: jsx(UserWalletsProvider, { children: jsx(FieldsStateProvider, { children: jsx(IpConfigurationContextProvider, { children: jsx(WidgetRegistryContextProvider, { children: jsx(InnerDynamicContextProvider, Object.assign({}, props)) }) }) }) }) }) }) }));
};

export { DynamicContext, DynamicContextProvider, InnerDynamicContextProvider, PUBLIC_PROJECT_LIVE_ENVIRONMENT_ID };
