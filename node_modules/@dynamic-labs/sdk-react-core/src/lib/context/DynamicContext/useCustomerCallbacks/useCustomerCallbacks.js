'use client'
import { useState, useCallback, useEffect } from 'react';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { isAuthenticatedWithAWallet } from '../../../utils/functions/isAuthenticatedWithAWallet/isAuthenticatedWithAWallet.js';
import { dynamicEvents } from '../../../events/dynamicEvents.js';

const useCustomerCallbacks = ({ callbacks: { onAuthSuccess, onUserProfileUpdate }, handleLogOut, primaryWallet, user, isAuthenticated, }) => {
    const [callbackQueue, setCallbackQueue] = useState([]);
    const handleNextCallback = useCallback((next, user) => {
        switch (next === null || next === void 0 ? void 0 : next.callback) {
            case 'authSuccess': {
                try {
                    onAuthSuccess === null || onAuthSuccess === void 0 ? void 0 : onAuthSuccess({
                        handleLogOut,
                        isAuthenticated,
                        primaryWallet,
                        user,
                    });
                    dynamicEvents.emit('triggerSessionValidation');
                }
                catch (e) {
                    logger.error('Error calling onAuthSuccess: ', e);
                }
                break;
            }
            case 'userProfileUpdate': {
                try {
                    onUserProfileUpdate === null || onUserProfileUpdate === void 0 ? void 0 : onUserProfileUpdate(user);
                }
                catch (e) {
                    logger.error('Error calling userProfileUpdate: ', e);
                }
                break;
            }
        }
    }, [
        handleLogOut,
        isAuthenticated,
        onAuthSuccess,
        onUserProfileUpdate,
        primaryWallet,
    ]);
    useEffect(() => {
        if (!callbackQueue.length || !user)
            return;
        // checks if user logged in with a wallet, so we need to wait
        // for the primary wallet state to be set
        // if user logged in with email without embedded wallet, then
        // there is no wallet so we can go ahead and run the callback
        if (isAuthenticatedWithAWallet(user) && !primaryWallet) {
            return;
        }
        handleNextCallback(callbackQueue[0], user);
        setCallbackQueue((prev) => {
            const [resolvedCallback, ...updatedQueue] = prev;
            if (resolvedCallback) {
                logger.debug('Resolved callback: ', resolvedCallback.callback);
                logger.debug('Callbacks in queue: ', updatedQueue.map((c) => c.callback));
            }
            return updatedQueue;
        });
    }, [callbackQueue, handleNextCallback, primaryWallet, user]);
    const setCallback = useCallback((callback, params) => {
        setCallbackQueue((prev) => [...prev, { callback, params }]);
    }, []);
    return { setCallback };
};

export { useCustomerCallbacks };
