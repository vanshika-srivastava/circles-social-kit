'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
require('../../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var isAuthenticatedWithAWallet = require('../../../utils/functions/isAuthenticatedWithAWallet/isAuthenticatedWithAWallet.cjs');
var dynamicEvents = require('../../../events/dynamicEvents.cjs');

const useCustomerCallbacks = ({ callbacks: { onAuthSuccess, onUserProfileUpdate }, handleLogOut, primaryWallet, user, isAuthenticated, }) => {
    const [callbackQueue, setCallbackQueue] = React.useState([]);
    const handleNextCallback = React.useCallback((next, user) => {
        switch (next === null || next === void 0 ? void 0 : next.callback) {
            case 'authSuccess': {
                try {
                    onAuthSuccess === null || onAuthSuccess === void 0 ? void 0 : onAuthSuccess({
                        handleLogOut,
                        isAuthenticated,
                        primaryWallet,
                        user,
                    });
                    dynamicEvents.dynamicEvents.emit('triggerSessionValidation');
                }
                catch (e) {
                    logger.logger.error('Error calling onAuthSuccess: ', e);
                }
                break;
            }
            case 'userProfileUpdate': {
                try {
                    onUserProfileUpdate === null || onUserProfileUpdate === void 0 ? void 0 : onUserProfileUpdate(user);
                }
                catch (e) {
                    logger.logger.error('Error calling userProfileUpdate: ', e);
                }
                break;
            }
        }
    }, [
        handleLogOut,
        isAuthenticated,
        onAuthSuccess,
        onUserProfileUpdate,
        primaryWallet,
    ]);
    React.useEffect(() => {
        if (!callbackQueue.length || !user)
            return;
        // checks if user logged in with a wallet, so we need to wait
        // for the primary wallet state to be set
        // if user logged in with email without embedded wallet, then
        // there is no wallet so we can go ahead and run the callback
        if (isAuthenticatedWithAWallet.isAuthenticatedWithAWallet(user) && !primaryWallet) {
            return;
        }
        handleNextCallback(callbackQueue[0], user);
        setCallbackQueue((prev) => {
            const [resolvedCallback, ...updatedQueue] = prev;
            if (resolvedCallback) {
                logger.logger.debug('Resolved callback: ', resolvedCallback.callback);
                logger.logger.debug('Callbacks in queue: ', updatedQueue.map((c) => c.callback));
            }
            return updatedQueue;
        });
    }, [callbackQueue, handleNextCallback, primaryWallet, user]);
    const setCallback = React.useCallback((callback, params) => {
        setCallbackQueue((prev) => [...prev, { callback, params }]);
    }, []);
    return { setCallback };
};

exports.useCustomerCallbacks = useCustomerCallbacks;
