'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var dynamicEvents = require('../../events/dynamicEvents.cjs');
require('../../utils/constants/values.cjs');
require('@dynamic-labs/utils');
require('@dynamic-labs/multi-wallet');
require('../../shared/logger.cjs');
require('../../utils/constants/colors.cjs');
require('react-international-phone');
require('@dynamic-labs/iconic');
require('../ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var isProviderEnabled = require('../../utils/functions/isProviderEnabled/isProviderEnabled.cjs');
var isEmailValid = require('../../utils/functions/isEmailValid/isEmailValid.cjs');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../DynamicContext/DynamicContext.cjs');
var useInternalDynamicContext = require('../DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
require('../CaptchaContext/CaptchaContext.cjs');
require('../ErrorContext/ErrorContext.cjs');
require('../AccessDeniedContext/AccessDeniedContext.cjs');
require('../AccountExistsContext/AccountExistsContext.cjs');
require('../UserWalletsContext/UserWalletsContext.cjs');
require('../VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../LoadingContext/LoadingContext.cjs');
var useEmbeddedWalletSessionKeys = require('../../utils/hooks/useEmbeddedWalletSessionKeys/useEmbeddedWalletSessionKeys.cjs');
require('yup');
require('../MockContext/MockContext.cjs');
require('../../views/CollectUserDataView/useFields.cjs');
require('../FieldsStateContext/FieldsStateContext.cjs');
require('../UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
var useWalletItemActions = require('../../utils/hooks/useWalletItemActions/useWalletItemActions.cjs');
require('react-i18next');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../FooterAnimationContext/index.cjs');
require('../WalletGroupContext/WalletGroupContext.cjs');
require('../SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../IpConfigurationContext/IpConfigurationContext.cjs');
require('../PasskeyContext/PasskeyContext.cjs');
require('../../store/state/sendBalances.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../views/TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../polyfills.cjs');
require('../ErrorBoundary/ErrorBoundaryBase.cjs');
require('../ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../FundingContext/FundingContext.cjs');
require('../SendBalanceContext/SendBalanceContext.cjs');
var ConnectWithOtpContext = require('./ConnectWithOtpContext.cjs');
var createEmailHandler = require('./utils/createEmailHandler.cjs');
var createMagicHandler = require('./utils/createMagicHandler.cjs');
var createSmsHandler = require('./utils/createSmsHandler.cjs');
var findEmailProvider = require('./utils/findEmailProvider.cjs');
require('../ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../store/state/tokenBalances.cjs');

const { Provider } = ConnectWithOtpContext.ConnectWithOtpContext;
const ConnectWithOtpProvider = ({ children }) => {
    const { walletConnectorOptions, environmentId, projectSettings, setCallback, } = useInternalDynamicContext.useInternalDynamicContext();
    const embeddedWalletSessionKeys = useEmbeddedWalletSessionKeys.useEmbeddedWalletSessionKeys(environmentId);
    const { handleInstalledExtensionClick } = useWalletItemActions.useWalletItemActions();
    const lastVerificationHandlerRef = React.useRef(null);
    const providers = (projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.providers) || [];
    const emailOtpWalletConnector = walletConnectorOptions
        .map(({ walletConnector }) => walletConnector)
        .find(walletConnectorCore.isEmailOTPWalletConnector);
    const mapProvider = {
        [sdkApiCore.ProviderEnum.Dynamic]: {
            enabled: isProviderEnabled.isProviderEnabled(providers, sdkApiCore.ProviderEnum.Dynamic),
            handler: createEmailHandler.createEmailHandler(environmentId, embeddedWalletSessionKeys),
        },
        [sdkApiCore.ProviderEnum.MagicLink]: {
            enabled: isProviderEnabled.isProviderEnabled(providers, sdkApiCore.ProviderEnum.MagicLink),
            handler: createMagicHandler.createMagicHandler(emailOtpWalletConnector, handleInstalledExtensionClick),
        },
    };
    const connectWithEmail = (email_1, ...args_1) => _tslib.__awaiter(void 0, [email_1, ...args_1], void 0, function* (email, { provider } = {}) {
        if (!isEmailValid.isEmailValid(email)) {
            throw new Error('Email is not valid');
        }
        const effectiveEmailProvider = provider || (yield findEmailProvider.findEmailProvider(environmentId, email));
        if (!mapProvider[effectiveEmailProvider].enabled) {
            throw new Error('Email provider is not enabled');
        }
        const verificationHandler = yield mapProvider[effectiveEmailProvider].handler(email);
        lastVerificationHandlerRef.current = verificationHandler;
    });
    const connectWithSms = (phone) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!isProviderEnabled.isProviderEnabled(providers, sdkApiCore.ProviderEnum.Sms)) {
            throw new Error('SMS provider is not enabled');
        }
        const handler = createSmsHandler.createSmsHandler(environmentId);
        const verificationHandler = yield handler(phone);
        lastVerificationHandlerRef.current = verificationHandler;
    });
    const verifyOneTimePassword = (oneTimePassword) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!lastVerificationHandlerRef.current) {
            throw new Error('Verification has not started, use connectWithEmail or connectWithSms before verifying');
        }
        const { type, verify } = lastVerificationHandlerRef.current;
        const { destination, verified } = yield verify(oneTimePassword);
        if (type === 'sms') {
            dynamicEvents.dynamicEvents.emit('smsVerificationResult', verified, destination);
        }
        else {
            //EMAIL
            dynamicEvents.dynamicEvents.emit('emailVerificationResult', verified, destination);
        }
        if (verified) {
            setCallback('authSuccess');
        }
        else {
            throw new Error(`${type === 'sms' ? 'SMS' : 'Email'} verification failed`);
        }
    });
    const retryOneTimePassword = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!lastVerificationHandlerRef.current) {
            throw new Error('Verification has not started, use connectWithEmail or connectWithSms before verifying');
        }
        if (!lastVerificationHandlerRef.current.retry) {
            throw new Error('Re-send is not supported');
        }
        return lastVerificationHandlerRef.current.retry();
    });
    return (jsxRuntime.jsx(Provider, { value: {
            connectWithEmail,
            connectWithSms,
            retryOneTimePassword,
            verifyOneTimePassword,
        }, children: children }));
};

exports.ConnectWithOtpProvider = ConnectWithOtpProvider;
