'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { createEmailVerification, signInWithEmailVerification } from '../../../data/api/email/email.js';
import '@dynamic-labs/sdk-api-core';
import '@dynamic-labs/utils';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { storeAuthTokenAndUser } from '../../../store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.js';
import '../../../store/state/user/user.js';
import '../../../config/ApiEndpoint.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../locale/locale.js';

const createEmailHandler = (environmentId, { shouldRegisterSessionKeysOnSignin, generateSessionKey, }) => (email) => __awaiter(void 0, void 0, void 0, function* () {
    const { verificationUUID } = yield createEmailVerification({
        email,
        environmentId,
    });
    return {
        type: 'email',
        verify: (oneTimePassword) => __awaiter(void 0, void 0, void 0, function* () {
            let sessionPublicKey = undefined;
            if (shouldRegisterSessionKeysOnSignin()) {
                const keypair = yield generateSessionKey();
                sessionPublicKey = keypair.publicKey;
            }
            const response = yield signInWithEmailVerification({
                environmentId,
                sessionPublicKey,
                verificationToken: oneTimePassword,
                verificationUUID,
            });
            storeAuthTokenAndUser(response);
            return {
                destination: email,
                verified: Boolean(response.jwt),
            };
        }),
    };
});

export { createEmailHandler };
