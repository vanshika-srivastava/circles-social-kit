'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import 'react/jsx-runtime';
import '../../ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../config/ApiEndpoint.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../store/state/projectSettings/projectSettings.js';
import { storeAuthTokenAndUser } from '../../../store/state/user/storeAuthTokenAndUser/storeAuthTokenAndUser.js';
import '../../../store/state/user/user.js';
import { createSmsVerification, signInWithSmsVerification } from '../../../data/api/sms/sms.js';
import '../../../events/dynamicEvents.js';
import '../../DynamicContext/DynamicContext.js';
import '../../CaptchaContext/CaptchaContext.js';
import '../../ErrorContext/ErrorContext.js';
import '../../AccessDeniedContext/AccessDeniedContext.js';
import '../../AccountExistsContext/AccountExistsContext.js';
import '../../UserWalletsContext/UserWalletsContext.js';
import '../../VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../WalletContext/WalletContext.js';
import '../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../ThemeContext/ThemeContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../LoadingContext/LoadingContext.js';
import { useEmbeddedWalletSessionKeys } from '../../../utils/hooks/useEmbeddedWalletSessionKeys/useEmbeddedWalletSessionKeys.js';
import 'yup';
import '../../MockContext/MockContext.js';
import '../../../views/CollectUserDataView/useFields.js';
import '../../FieldsStateContext/FieldsStateContext.js';
import '../../UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import '../../../components/Input/Input.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../FooterAnimationContext/index.js';
import '../../WalletGroupContext/WalletGroupContext.js';
import '../../SocialRedirectContext/SocialRedirectContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '../../../locale/locale.js';
import '@hcaptcha/react-hcaptcha';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../IpConfigurationContext/IpConfigurationContext.js';
import '../../PasskeyContext/PasskeyContext.js';
import '../../../store/state/sendBalances.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../views/TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../ErrorBoundary/ErrorBoundaryBase.js';
import '../../ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../FundingContext/FundingContext.js';
import '../../SendBalanceContext/SendBalanceContext.js';
import '../ConnectWithOtpContext.js';
import '../constants.js';
import '../../ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';

const createSmsHandler = (environmentId) => (phone) => __awaiter(void 0, void 0, void 0, function* () {
    const { generateSessionKey, shouldRegisterSessionKeysOnSignin } = useEmbeddedWalletSessionKeys(environmentId);
    const { verificationUUID } = yield createSmsVerification({
        environmentId,
        isoCountryCode: phone.iso2,
        phoneCountryCode: phone.dialCode,
        phoneNumber: phone.phone,
    });
    return {
        type: 'sms',
        verify: (oneTimePassword) => __awaiter(void 0, void 0, void 0, function* () {
            let sessionPublicKey = undefined;
            if (shouldRegisterSessionKeysOnSignin()) {
                const keypair = yield generateSessionKey();
                sessionPublicKey = keypair.publicKey;
            }
            const response = yield signInWithSmsVerification({
                environmentId,
                sessionPublicKey,
                verificationToken: oneTimePassword,
                verificationUUID,
            });
            storeAuthTokenAndUser(response);
            return {
                destination: phone,
                verified: Boolean(response.jwt),
            };
        }),
    };
});

export { createSmsHandler };
