'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var useDynamicEvents = require('../../utils/hooks/events/useDynamicEvents/useDynamicEvents.cjs');
var ErrorContext = require('../ErrorContext/ErrorContext.cjs');

const ViewContext = React.createContext(undefined);
const ViewContextProvider = ({ children, initialView = { props: { isWalletConnectList: true }, type: 'wallet-list' }, }) => {
    const [_view, _setView] = React.useState(null);
    const view = _view || initialView;
    const { clearError } = ErrorContext.useErrorContext();
    const goToInitialView = React.useCallback(() => {
        _setView(null);
    }, []);
    const setView = React.useCallback((type, props, events) => {
        // we need to clear errors before proceeding to the next view
        // but only if the next view is different from the current view
        // this is to prevent the error from being cleared when the same view is re-rendered
        if (view.type !== type)
            clearError();
        _setView({ events, props, type });
    }, []);
    useDynamicEvents.useInternalDynamicEvents('logout', () => goToInitialView());
    const value = React.useMemo(() => ({
        goToInitialView,
        setView,
        view,
    }), [goToInitialView, setView, view]);
    return jsxRuntime.jsx(ViewContext.Provider, { value: value, children: children });
};
const useViewContext = () => {
    const context = React.useContext(ViewContext);
    if (context === undefined) {
        throw new Error('usage of useViewContext not wrapped in `ViewContextProvider`.');
    }
    return context;
};

exports.ViewContext = ViewContext;
exports.ViewContextProvider = ViewContextProvider;
exports.useViewContext = useViewContext;
