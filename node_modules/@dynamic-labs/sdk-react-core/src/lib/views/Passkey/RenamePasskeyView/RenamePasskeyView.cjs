'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var formik = require('formik');
var reactI18next = require('react-i18next');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../events/dynamicEvents.cjs');
require('@dynamic-labs/utils');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../../context/ViewContext/ViewContext.cjs');
var chevronLeft = require('../../../shared/assets/chevron-left.cjs');
var close = require('../../../shared/assets/close.cjs');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
var embeddedWallets = require('../../../data/api/embeddedWallets/embeddedWallets.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
var Typography = require('../../../components/Typography/Typography.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
var IconButton = require('../../../components/IconButton/IconButton.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
var TypographyButton = require('../../../components/TypographyButton/TypographyButton.cjs');
require('../../../store/state/sendBalances.cjs');
var ModalHeader = require('../../../components/ModalHeader/ModalHeader.cjs');
var Input = require('../../../components/Input/Input.cjs');
require('../../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
var PasskeyContext = require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
var PasskeyCreatedSuccessBanner = require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('qrcode');

const RenamePasskeyView = () => {
    var _a;
    const { passkey, setPasskey, passkeyIcon, passkeyEdited, setPasskeyEdited } = PasskeyContext.usePasskeyContext();
    const { t } = reactI18next.useTranslation();
    const { environmentId, setShowAuthFlow, setPasskeySuccessPopup } = useInternalDynamicContext.useInternalDynamicContext();
    const [error, setError] = React.useState(false);
    const handleUpdatePasskey = (alias) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (alias && (passkey === null || passkey === void 0 ? void 0 : passkey.id)) {
            const newPasskey = yield embeddedWallets.updateUserPasskey({
                alias: alias.trim(),
                environmentId,
                id: passkey.id,
            });
            if (newPasskey) {
                setPasskey(newPasskey);
                setPasskeyEdited(!passkeyEdited);
                setShowAuthFlow(false);
                setPasskeySuccessPopup(PasskeyCreatedSuccessBanner.PasskeySuccessEnum.EDITED);
            }
            else
                setError(true);
        }
        else
            setError(true);
    });
    const backButton = (jsxRuntime.jsx(IconButton.IconButton, { type: 'button', onClick: () => {
            setShowAuthFlow(false);
        }, "data-testid": 'back-button', children: jsxRuntime.jsx(chevronLeft.ReactComponent, {}) }));
    const closeButton = (jsxRuntime.jsx(IconButton.IconButton, { onClick: () => setShowAuthFlow(false), type: 'button', id: 'close-button', "data-testid": 'close-button', children: jsxRuntime.jsx(close.ReactComponent, {}) }));
    if (passkey) {
        return (jsxRuntime.jsxs("div", { className: 'edit-passkeys-widget-view', children: [jsxRuntime.jsx(ModalHeader.ModalHeader, { leading: backButton, trailing: closeButton }), jsxRuntime.jsx("div", { className: 'edit-passkeys-widget-view__icon', children: passkeyIcon }), jsxRuntime.jsx(Typography.Typography, { as: 'h1', variant: 'title', color: 'primary', className: 'edit-passkeys-widget-view__title', copykey: 'dyn_rename_passkeys.title', children: t('dyn_rename_passkeys.title') }), jsxRuntime.jsx(formik.Formik, { initialValues: { alias: (_a = passkey.alias) !== null && _a !== void 0 ? _a : '' }, onSubmit: (values) => {
                        handleUpdatePasskey(values.alias);
                    }, children: ({ values }) => (jsxRuntime.jsxs(formik.Form, { className: 'edit-passkeys-widget-view__body', children: [jsxRuntime.jsx(formik.Field, { "data-testid": 'input-field', name: 'alias', type: 'text', label: t('dyn_rename_passkeys.input_label'), copykey: 'dyn_rename_passkeys.input_label', className: 'edit-passkeys-widget-view__input', as: Input.Input, error: error, maxLength: 32 }), jsxRuntime.jsx(TypographyButton.TypographyButton, { type: 'submit', className: 'edit-passkeys-widget-view__body', buttonPadding: 'large', disabled: !values.alias, copykey: 'dyn_rename_passkeys.save', children: t('dyn_rename_passkeys.save') }), error && (jsxRuntime.jsx(Typography.Typography, { as: 'h1', variant: 'body_small', color: 'error-1', copykey: 'dyn_rename_passkeys.error', children: t('dyn_rename_passkeys.error') }))] })) })] }));
    }
    return (jsxRuntime.jsx(Typography.Typography, { as: 'h1', variant: 'title', color: 'primary', className: 'edit-passkeys-widget-view__title', children: t('dyn_rename_passkeys.not_found') }));
};

exports.RenamePasskeyView = RenamePasskeyView;
