'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var utils = require('@dynamic-labs/utils');
require('../../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../../../context/ViewContext/ViewContext.cjs');
var close = require('../../../../shared/assets/close.cjs');
var passkeyIntroIcon = require('../../../../shared/assets/passkey-intro-icon.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../utils/constants/colors.cjs');
require('../../../../utils/constants/values.cjs');
var useEffectOnce = require('../../../../shared/utils/hooks/useEffectOnce/useEffectOnce.cjs');
require('../../../../store/state/loadingAndLifecycle.cjs');
require('../../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../../events/dynamicEvents.cjs');
require('../../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../../config/ApiEndpoint.cjs');
require('../../../../store/state/user/user.cjs');
require('../../../../locale/locale.cjs');
require('../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../context/WalletContext/WalletContext.cjs');
var usePasskeyRecovery = require('../../../../utils/hooks/usePasskeyRecovery/usePasskeyRecovery.cjs');
require('../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../../context/ThemeContext/ThemeContext.cjs');
require('../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
var useMutation = require('../../../../utils/hooks/useMutation/useMutation.cjs');
require('@dynamic-labs/types');
require('../../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../../context/MockContext/MockContext.cjs');
require('../../../CollectUserDataView/useFields.cjs');
require('../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../store/state/environmentId.cjs');
require('../../../../store/state/walletConnectorOptions.cjs');
require('../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../components/Alert/Alert.cjs');
var Typography = require('../../../../components/Typography/Typography.cjs');
require('../../../../components/ShadowDOM/ShadowDOM.cjs');
var ErrorContainer = require('../../../../components/ErrorContainer/ErrorContainer.cjs');
var IconButton = require('../../../../components/IconButton/IconButton.cjs');
require('../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../components/Input/Input.cjs');
require('../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
var ModalHeader = require('../../../../components/ModalHeader/ModalHeader.cjs');
require('../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../components/Popper/Popper/Popper.cjs');
require('../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../context/FooterAnimationContext/index.cjs');
require('../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var getProperErrorMessage = require('../../../../modals/SignMessageConfirmationModal/getProperErrorMessage.cjs');
require('../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../store/state/sendBalances.cjs');
var EmailForm = require('../../../../components/EmailForm/EmailForm.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../../polyfills.cjs');
require('../../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../../context/FundingContext/FundingContext.cjs');
require('../../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const AddRecoveryEmail = ({ canSkipAddingEmail = true, shouldInitRecovery = false, authenticatorType, currentAction, isFromEmailVerification = false, }) => {
    const { user, setShowAuthFlow } = useInternalDynamicContext.useInternalDynamicContext();
    const { t } = reactI18next.useTranslation();
    const { addRecoveryEmail, initPasskeyRecoveryProcess } = usePasskeyRecovery.usePasskeyRecovery();
    const [showSuccessMessage, setShowSuccessMessage] = React.useState(false);
    const [error, setError] = React.useState(undefined);
    useEffectOnce.useEffectOnce(() => {
        dynamicEvents.dynamicEvents.once('embeddedWalletRecoveryEmailCompleted', () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            setShowSuccessMessage(true);
            setError(undefined);
            if (!shouldInitRecovery) {
                setTimeout(() => {
                    setShowAuthFlow(false, {
                        ignoreIfIsEmbeddedWidget: false,
                        performMultiWalletChecks: false,
                    });
                }, 5000);
                return;
            }
            return initPasskeyRecoveryProcess(authenticatorType, currentAction);
        }));
        dynamicEvents.dynamicEvents.once('embeddedWalletRecoveryEmailFailed', (error) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
            setError(error);
        }));
    });
    const { mutate: handleEmailSubmit, isLoading } = useMutation.useMutation((emailInput) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        yield addRecoveryEmail(emailInput);
    }));
    const handleSkip = () => {
        setShowAuthFlow(false);
    };
    const handleEmailSubmitError = () => {
        if (!error) {
            return undefined;
        }
        if (error instanceof utils.DynamicError) {
            return error.message;
        }
        return getProperErrorMessage.getProperErrorMessage(error);
    };
    const closeButton = canSkipAddingEmail && (jsxRuntime.jsx(IconButton.IconButton, { onClick: handleSkip, type: 'button', "data-testid": 'add-recovery-email-close-button', children: jsxRuntime.jsx(close.ReactComponent, {}) }));
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(ModalHeader.ModalHeader, { trailing: closeButton, children: jsxRuntime.jsx(Typography.Typography, { as: 'h1', variant: 'title', color: 'primary', "data-testid": 'passkey-recovery-heading', className: 'header__typography', copykey: 'dyn_passkey_recovery.add_email.title', children: t('dyn_passkey_recovery.add_email.title') }) }), jsxRuntime.jsxs("div", { className: 'passkey-recovery-view', children: [jsxRuntime.jsx("div", { className: 'passkey-recovery-view__header', children: jsxRuntime.jsx(passkeyIntroIcon.ReactComponent, {}) }), showSuccessMessage && (jsxRuntime.jsx(ErrorContainer.ErrorContainer, { variant: 'success', copykey: 'dyn_passkey_recovery.add_email.success_message', children: t('dyn_passkey_recovery.add_email.success_message') })), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', className: 'passkey-recovery-view__subtitle', copykey: 'dyn_passkey_recovery.add_email.description', children: t('dyn_passkey_recovery.add_email.description') }), error !== undefined && (jsxRuntime.jsx(ErrorContainer.ErrorContainer, { children: handleEmailSubmitError() })), jsxRuntime.jsx("div", { className: 'passkey-recovery-view__form', children: jsxRuntime.jsx(EmailForm.EmailForm, { onSubmit: handleEmailSubmit, currentEmail: user === null || user === void 0 ? void 0 : user.email, isLoading: (isLoading || isFromEmailVerification) && !error, buttonCopyKey: 'dyn_passkey_recovery.add_email.confirm_button', isDisabled: isFromEmailVerification && !error && !showSuccessMessage }) })] })] }));
};

exports.AddRecoveryEmail = AddRecoveryEmail;
