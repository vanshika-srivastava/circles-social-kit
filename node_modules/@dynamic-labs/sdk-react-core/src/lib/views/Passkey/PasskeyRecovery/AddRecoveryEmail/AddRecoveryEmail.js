'use client'
import { __awaiter } from '../../../../../../_virtual/_tslib.js';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { DynamicError } from '@dynamic-labs/utils';
import '../../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../../../../context/ViewContext/ViewContext.js';
import { ReactComponent as SvgClose } from '../../../../shared/assets/close.js';
import { ReactComponent as SvgPasskeyIntroIcon } from '../../../../shared/assets/passkey-intro-icon.js';
import '@dynamic-labs/wallet-book';
import '../../../../utils/constants/colors.js';
import '../../../../utils/constants/values.js';
import { useEffectOnce } from '../../../../shared/utils/hooks/useEffectOnce/useEffectOnce.js';
import '../../../../store/state/loadingAndLifecycle.js';
import '../../../../shared/consts/index.js';
import { dynamicEvents } from '../../../../events/dynamicEvents.js';
import '../../../../context/CaptchaContext/CaptchaContext.js';
import '../../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../../config/ApiEndpoint.js';
import '../../../../store/state/user/user.js';
import '../../../../locale/locale.js';
import '../../../../store/state/projectSettings/projectSettings.js';
import '../../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../../context/WalletContext/WalletContext.js';
import { usePasskeyRecovery } from '../../../../utils/hooks/usePasskeyRecovery/usePasskeyRecovery.js';
import '../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../../context/ThemeContext/ThemeContext.js';
import '../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import { useMutation } from '../../../../utils/hooks/useMutation/useMutation.js';
import '@dynamic-labs/types';
import '../../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../../context/MockContext/MockContext.js';
import '../../../CollectUserDataView/useFields.js';
import '../../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../../store/state/environmentId.js';
import '../../../../store/state/walletConnectorOptions.js';
import '../../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../../components/Alert/Alert.js';
import { Typography } from '../../../../components/Typography/Typography.js';
import '../../../../components/ShadowDOM/ShadowDOM.js';
import { ErrorContainer } from '../../../../components/ErrorContainer/ErrorContainer.js';
import { IconButton } from '../../../../components/IconButton/IconButton.js';
import '../../../../components/InlineWidget/InlineWidget.js';
import '../../../../components/Input/Input.js';
import '../../../../components/IsBrowser/IsBrowser.js';
import '../../../../components/MenuList/Dropdown/Dropdown.js';
import '../../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import { ModalHeader } from '../../../../components/ModalHeader/ModalHeader.js';
import '../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../../components/Popper/Popper/Popper.js';
import '../../../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../../../context/FooterAnimationContext/index.js';
import '../../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { getProperErrorMessage } from '../../../../modals/SignMessageConfirmationModal/getProperErrorMessage.js';
import '../../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../../context/PasskeyContext/PasskeyContext.js';
import '../../../../store/state/sendBalances.js';
import { EmailForm } from '../../../../components/EmailForm/EmailForm.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../../../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../../polyfills.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../../context/FundingContext/FundingContext.js';
import '../../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../../context/ConnectWithOtpContext/constants.js';
import '../../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const AddRecoveryEmail = ({ canSkipAddingEmail = true, shouldInitRecovery = false, authenticatorType, currentAction, isFromEmailVerification = false, }) => {
    const { user, setShowAuthFlow } = useInternalDynamicContext();
    const { t } = useTranslation();
    const { addRecoveryEmail, initPasskeyRecoveryProcess } = usePasskeyRecovery();
    const [showSuccessMessage, setShowSuccessMessage] = useState(false);
    const [error, setError] = useState(undefined);
    useEffectOnce(() => {
        dynamicEvents.once('embeddedWalletRecoveryEmailCompleted', () => __awaiter(void 0, void 0, void 0, function* () {
            setShowSuccessMessage(true);
            setError(undefined);
            if (!shouldInitRecovery) {
                setTimeout(() => {
                    setShowAuthFlow(false, {
                        ignoreIfIsEmbeddedWidget: false,
                        performMultiWalletChecks: false,
                    });
                }, 5000);
                return;
            }
            return initPasskeyRecoveryProcess(authenticatorType, currentAction);
        }));
        dynamicEvents.once('embeddedWalletRecoveryEmailFailed', (error) => __awaiter(void 0, void 0, void 0, function* () {
            setError(error);
        }));
    });
    const { mutate: handleEmailSubmit, isLoading } = useMutation((emailInput) => __awaiter(void 0, void 0, void 0, function* () {
        yield addRecoveryEmail(emailInput);
    }));
    const handleSkip = () => {
        setShowAuthFlow(false);
    };
    const handleEmailSubmitError = () => {
        if (!error) {
            return undefined;
        }
        if (error instanceof DynamicError) {
            return error.message;
        }
        return getProperErrorMessage(error);
    };
    const closeButton = canSkipAddingEmail && (jsx(IconButton, { onClick: handleSkip, type: 'button', "data-testid": 'add-recovery-email-close-button', children: jsx(SvgClose, {}) }));
    return (jsxs(Fragment, { children: [jsx(ModalHeader, { trailing: closeButton, children: jsx(Typography, { as: 'h1', variant: 'title', color: 'primary', "data-testid": 'passkey-recovery-heading', className: 'header__typography', copykey: 'dyn_passkey_recovery.add_email.title', children: t('dyn_passkey_recovery.add_email.title') }) }), jsxs("div", { className: 'passkey-recovery-view', children: [jsx("div", { className: 'passkey-recovery-view__header', children: jsx(SvgPasskeyIntroIcon, {}) }), showSuccessMessage && (jsx(ErrorContainer, { variant: 'success', copykey: 'dyn_passkey_recovery.add_email.success_message', children: t('dyn_passkey_recovery.add_email.success_message') })), jsx(Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', className: 'passkey-recovery-view__subtitle', copykey: 'dyn_passkey_recovery.add_email.description', children: t('dyn_passkey_recovery.add_email.description') }), error !== undefined && (jsx(ErrorContainer, { children: handleEmailSubmitError() })), jsx("div", { className: 'passkey-recovery-view__form', children: jsx(EmailForm, { onSubmit: handleEmailSubmit, currentEmail: user === null || user === void 0 ? void 0 : user.email, isLoading: (isLoading || isFromEmailVerification) && !error, buttonCopyKey: 'dyn_passkey_recovery.add_email.confirm_button', isDisabled: isFromEmailVerification && !error && !showSuccessMessage }) })] })] }));
};

export { AddRecoveryEmail };
