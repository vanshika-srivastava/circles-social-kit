'use client'
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import '../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../components/Alert/Alert.js';
import '../../events/dynamicEvents.js';
import '../../../../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import '../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '@dynamic-labs/wallet-connector-core';
import '../../context/ViewContext/ViewContext.js';
import { ReactComponent as SvgClose } from '../../shared/assets/close.js';
import { ReactComponent as SvgPasswordHero } from '../../shared/assets/password-hero.js';
import '@dynamic-labs/wallet-book';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../config/ApiEndpoint.js';
import '../../store/state/user/user.js';
import '../../locale/locale.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../context/ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import { useMutation } from '../../utils/hooks/useMutation/useMutation.js';
import '@dynamic-labs/types';
import '../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../context/MockContext/MockContext.js';
import '../CollectUserDataView/useFields.js';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../store/state/environmentId.js';
import '../../store/state/walletConnectorOptions.js';
import { Typography } from '../../components/Typography/Typography.js';
import '../../context/FooterAnimationContext/index.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import { IconButton } from '../../components/IconButton/IconButton.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import { ErrorContainer } from '../../components/ErrorContainer/ErrorContainer.js';
import { TypographyButton } from '../../components/TypographyButton/TypographyButton.js';
import 'formik';
import '../../store/state/sendBalances.js';
import { ModalHeader } from '../../components/ModalHeader/ModalHeader.js';
import { Input } from '../../components/Input/Input.js';
import '../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../polyfills.js';
import '../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../context/FundingContext/FundingContext.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../context/SendBalanceContext/SendBalanceContext.js';
import '../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../context/ConnectWithOtpContext/constants.js';
import '../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../store/state/tokenBalances.js';
import '../../components/InlineWidget/InlineWidget.js';
import 'qrcode';
import { ToggleVisibilityButton } from '../../components/ToggleVisibilityButton/ToggleVisibilityButton.js';

const EnterPasswordView = ({ mutation, onSuccess, onError, closeView = true, }) => {
    const { setShowAuthFlow } = useInternalDynamicContext();
    const [password, setPassword] = useState('');
    const [inputType, setInputType] = useState('password');
    const { t } = useTranslation();
    const { mutate: handlePasswordSubmit, isLoading, hasError, } = useMutation(() => mutation(password), {
        onFailure: onError,
        onSuccess: () => {
            if (closeView) {
                setShowAuthFlow(false);
            }
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(password);
        },
    });
    const onClose = () => {
        if (onError) {
            onError === null || onError === void 0 ? void 0 : onError(t('dyn_enter_password.error.invalid_password'));
            return;
        }
        setShowAuthFlow(false);
    };
    const errorMessage = hasError
        ? t('dyn_enter_password.error.invalid_password')
        : undefined;
    const closeButton = (jsx(IconButton, { onClick: onClose, type: 'button', children: jsx(SvgClose, {}) }));
    const inputSuffix = (jsx(ToggleVisibilityButton, { initialState: inputType === 'password', onClick: (hidden) => setInputType(hidden ? 'password' : 'text'), className: 'enter-password-view__password-input__suffix-icon' }));
    const onPasswordInputChange = (e) => {
        const newPassword = e.target.value;
        setPassword(newPassword);
    };
    return (jsxs(Fragment, { children: [jsx(ModalHeader, { trailing: closeButton, children: jsx(Typography, { as: 'h1', variant: 'title', color: 'primary', className: 'header__typography', copykey: 'dyn_enter_password.title', children: t('dyn_enter_password.title') }) }), jsx("div", { className: 'enter-password-view', children: jsxs("form", { className: 'enter-password-view__body', onSubmit: (e) => {
                        e.preventDefault();
                        handlePasswordSubmit();
                    }, children: [jsx("div", { className: 'enter-password-view__body__icon', children: jsx(SvgPasswordHero, {}) }), jsx("div", { className: 'enter-password-view__body__description', children: jsx(Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', copykey: 'dyn_enter_password.description', children: t('dyn_enter_password.description') }) }), Boolean(errorMessage) && (jsx(ErrorContainer, { copykey: 'dyn_enter_password.error', children: errorMessage })), jsx("div", { children: jsx(Input, { id: 'password', placeholder: t('dyn_enter_password.input.placeholder'), type: inputType, suffix: inputSuffix, label: t('dyn_enter_password.input.label'), value: password, onChange: onPasswordInputChange, copykey: 'dyn_enter_password.input' }) }), jsx(TypographyButton, { buttonPadding: 'large', buttonVariant: 'brand-primary', typographyProps: {
                                color: 'inherit',
                            }, disabled: !password && !errorMessage, loading: isLoading, copykey: 'dyn_enter_password.continue_button_label', type: 'submit', children: t('dyn_enter_password.continue_button_label') })] }) })] }));
};

export { EnterPasswordView };
