/// <reference types="react" />
export declare const viewToComponentMap: {
    'access-blocked': import("react").FC;
    'account-exists': () => JSX.Element;
    'bridge-next-wallet-connection': import("react").FC;
    'bridge-summary': () => JSX.Element;
    'bridge-welcome': () => JSX.Element;
    captcha: () => JSX.Element;
    'chainalysis-blocked-wallet': () => JSX.Element;
    'collect-user-data': () => JSX.Element | null;
    'collect-user-data-login-no-wallet': import("react").FC<{
        userIdentification: keyof import("@dynamic-labs/sdk-api-core").UserFields | "environmentId" | "lastVerifiedCredentialId" | "lists" | "newUser" | "sessionId" | "userId" | "verifiedCredentials" | "scope" | "missingFields";
        userIdentificationOverride?: string | undefined;
    }>;
    'create-password-view': import("react").FC<import("./CreatePasswordView/CreatePasswordView").CreatePasswordViewProps>;
    'email-wallet-otp-verification-view': () => JSX.Element;
    'embedded-reveal-account-view': import("react").FC<import("./EmbeddedReveal/EmbeddedRevealView/EmbeddedRevealView").EmbeddedRevealViewProps>;
    'embedded-reveal-view': import("react").FC<import("./EmbeddedReveal/EmbeddedRevealView/EmbeddedRevealView").EmbeddedRevealViewProps>;
    'embedded-wallet-auth-choice': import("react").FC<import("./Passkey/EmbeddedAuthChoice/EmbeddedAuthChoice").EmbeddedAuthChoiceProps>;
    'farcaster-connect-view': ({ url }: import("./FarcasterConnectView/FarcasterConnectView").FarcasterConnectViewProps) => JSX.Element;
    'gate-blocked-wallet': () => JSX.Element;
    'global-wallet-confirm': import("react").FC<import("./GlobalWalletConfirmView").GlobalWalletConfirmViewProps>;
    'global-wallet-info': () => JSX.Element;
    'login-with-email-or-wallet': () => JSX.Element;
    'login-with-email-or-wallet-full-wallet-list': ({ isWalletConnectList, }: import("./WalletList").WalletListProps) => JSX.Element;
    'login-with-email-verification': import("react").FC<import("./EmailVerification/EmailVerification").EmailVerificationProps>;
    'login-with-sms-verification': import("react").FC;
    'login-with-wallet-only': () => JSX.Element;
    'merge-user-accounts': import("react").FC<import("./MergeUserAccountsView/MergeUserAccountsView").MergeUserAccountsViewProps>;
    'merge-user-accounts-conflicts': import("react").FC<import("./MergeUserAccountsConflictsView/MergeUserAccountsConflictsView").MergeUserAccountsConflictsViewProps>;
    'merge-user-accounts-with-same-email': import("react").FC<import("./MergeUserAccountsWithSameEmailView/MergeUserAccountsWithSameEmailView").MergeUserAccountsWithSameEmailViewProps>;
    'mfa-choose-device': import("react").FC<import("./MfaChooseDeviceView").MfaChooseDeviceViewProps>;
    'mfa-display-backup-codes': ({ regenerateCodes, }: {
        regenerateCodes: boolean;
    }) => JSX.Element;
    'mfa-recovery': import("react").FC;
    'mfa-secure-device': ({ type, isInitialSetup, }: import("./MfaSecureDeviceView").MfaSecureDeviceViewProps) => JSX.Element;
    'mfa-secure-device-help': ({ uri, secret, }: {
        uri: string;
        secret: string;
    }) => JSX.Element;
    'mfa-verification': ({ type, isInitialSetup, showBackButton, deviceId, }: import("./MfaVerificationView").MfaVerificationViewProps) => JSX.Element;
    'multi-wallet-wallet-list': ({ isWalletConnectList, }: import("./WalletList").WalletListProps) => JSX.Element;
    'network-not-supported': () => JSX.Element | null;
    'network-not-supported-manual': import("react").FC;
    'no-access': () => JSX.Element;
    'no-qr-not-installed': () => JSX.Element | null;
    'passkey-intro': import("react").FC<{
        chains?: import("@dynamic-labs/sdk-api-core").EmbeddedWalletChainEnum[] | undefined;
    }>;
    'passkey-new-domain-detected': import("react").FC;
    'passkey-recovery-add-email': import("react").FC<import("./Passkey/PasskeyRecovery/AddRecoveryEmail/AddRecoveryEmail").AddRecoveryEmailProps>;
    'passkey-recovery-bundle': import("react").FC<import("./Passkey/PasskeyRecovery/BundleValidation/PasskeyBundleRecovery").PasskeyBundleValidationProps>;
    'passkey-recovery-complete': import("react").FC;
    'passkey-recovery-start': import("react").FC<import("./Passkey/PasskeyRecovery/InitRecovery/PasskeyInitRecovery").PasskeyInitRecoveryProps>;
    'pending-connect': () => JSX.Element;
    'pending-signature': () => JSX.Element | null;
    'pending-signature-without-back-button': () => JSX.Element | null;
    'qr-code': () => JSX.Element | null;
    'rename-passkey': import("react").FC;
    'sandbox-maximum-threshold-reached': () => JSX.Element;
    'select-hardware-wallet': import("react").FC<{
        wallet: import("../shared").WalletOption;
        onSelectWallet?: ((wallet: import("../shared").WalletOption) => void) | undefined;
    }>;
    'select-wallet-in-wallet-group': import("react").FC;
    'social-redirect-view': () => JSX.Element;
    'social-wrong-account': () => JSX.Element | null;
    'verify-email': import("react").FC<import("./EmailVerification/EmailVerification").EmailVerificationProps>;
    'verify-sms': import("react").FC;
    'wait-for-email-confirmation-view': () => JSX.Element;
    'wallet-cannot-be-transferred': () => JSX.Element;
    'wallet-claim-intro': () => JSX.Element;
    'wallet-connect-mobile-wallets-list': () => JSX.Element;
    'wallet-group': import("react").FC;
    'wallet-list': ({ isWalletConnectList, }: import("./WalletList").WalletListProps) => JSX.Element;
    'wallet-locked-view': () => JSX.Element | null;
    'wallet-redirect-view': () => JSX.Element;
    'wallet-sign': () => JSX.Element | null;
    'wallet-used': () => JSX.Element;
};
