'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { useWalletBookContext, getWalletGroup, getWalletBookWallet, WalletIcon } from '@dynamic-labs/wallet-book';
import { isHardwareWalletConnector } from '@dynamic-labs/wallet-connector-core';
import '@dynamic-labs/iconic';
import { useViewContext } from '../../../context/ViewContext/ViewContext.js';
import 'react';
import { ReactComponent as SvgStroke } from '../../../shared/assets/stroke.js';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../events/dynamicEvents.js';
import '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import { getWalletListItemLabel } from '../../../shared/utils/functions/getWalletListItemLabel/getWalletListItemLabel.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { pixelToRem } from '../../../utils/functions/pixelToRem/pixelToRem.js';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import { useWalletItemActions } from '../../../utils/hooks/useWalletItemActions/useWalletItemActions.js';
import 'react-i18next';
import { Typography } from '../../../components/Typography/Typography.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import { isWalletGroup } from '../../../utils/functions/walletListBuilder/utils/isWalletGroup/isWalletGroup.js';
import { useWalletGroupContext } from '../../../context/WalletGroupContext/WalletGroupContext.js';
import { ListTileAnimatedTrailing } from '../../../components/ListTileAnimatedTrailing/ListTileAnimatedTrailing.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import { Icon } from '../../../components/Icon/Icon.js';
import { ListTile } from '../../../components/ListTile/ListTile.js';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import 'formik';
import '../../../store/state/sendBalances.js';
import '../../../components/Input/Input.js';
import '../../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { Badge } from '../../../components/Badge/Badge.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import '../../../components/InlineWidget/InlineWidget.js';
import 'qrcode';

const WalletListItem = ({ disabled = false, wallet, onResetSearchValue, recommendedWallets, tile = ({ leading, name, onClick, trailing }) => (jsx(ListTile, { leading: leading, trailing: trailing, onClick: onClick, className: 'wallet-list-item__tile', dataTestId: 'ListTile', children: name })), }) => {
    const { navigateToWalletGroup } = useWalletGroupContext();
    const { setView } = useViewContext();
    const _isWalletGroup = isWalletGroup(wallet);
    const { walletBook } = useWalletBookContext();
    const { handleWalletItemClick } = useWalletItemActions();
    const labelSettings = getWalletListItemLabel({
        recommendedWallets,
        wallet,
    });
    const Tile = tile;
    const handleClick = () => __awaiter(void 0, void 0, void 0, function* () {
        if (disabled) {
            return;
        }
        onResetSearchValue === null || onResetSearchValue === void 0 ? void 0 : onResetSearchValue('');
        if (_isWalletGroup) {
            return navigateToWalletGroup(wallet);
        }
        if (isHardwareWalletConnector(wallet.walletConnector) &&
            wallet.walletConnector.canConnectWithHardwareWallet()) {
            setView('select-hardware-wallet', {
                onSelectWallet: handleWalletItemClick,
                wallet,
            });
            return;
        }
        yield handleWalletItemClick(wallet);
    });
    const name = _isWalletGroup
        ? getWalletGroup(walletBook, wallet.key).name
        : getWalletBookWallet(walletBook, wallet.key).name;
    const leading = (jsx(WalletIcon, { className: 'wallet-list-item__leading', walletKey: wallet.key, style: { height: pixelToRem(28), width: pixelToRem(28) } }));
    const trailing = (jsx(ListTileAnimatedTrailing, { hoverElement: 
        // eslint-disable-next-line react/jsx-wrap-multilines
        jsx(Icon, { color: 'text-tertiary', size: 'mini', children: jsx(SvgStroke, {}) }), children: labelSettings && (jsx(Badge, { dot: !labelSettings.isRecommended, variant: labelSettings.isRecommended ? 'primary' : 'secondary', text: jsx(Typography, { variant: 'body_small', children: labelSettings.label }) })) }));
    return (jsx(Tile, { leading: leading, trailing: trailing, name: name, onClick: handleClick }));
};

export { WalletListItem };
