'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { isSameAddress } from '@dynamic-labs/wallet-connector-core';
import { useWalletBookContext, getWalletPrimaryColor, WalletIcon } from '@dynamic-labs/wallet-book';
import { DefaultPromptModal } from '../../../widgets/DynamicWidget/prompts/DefaultPromptModal/DefaultPromptModal.js';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../events/dynamicEvents.js';
import '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../../../context/ViewContext/ViewContext.js';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import { usePromise } from '../../../utils/hooks/usePromise/usePromise.js';
import { useThemeContext } from '../../../context/ThemeContext/ThemeContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../../components/IconButton/IconButton.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import 'formik';
import '../../../store/state/sendBalances.js';
import '../../../components/Input/Input.js';
import '../../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import '../../../components/InlineWidget/InlineWidget.js';
import 'qrcode';
import { QrCodeWrapper } from '../../../components/QrCodeWrapper/QrCodeWrapper.js';

const ReconnectWithQrCodeView = ({ onCancel, onSuccess, connector, expectedAddress, }) => {
    var _a;
    const { t } = useTranslation();
    const { walletBook } = useWalletBookContext();
    const { theme: { theme }, } = useThemeContext();
    const { name: themeName } = theme;
    const [qrcodeUri, setQrcodeUri] = useState();
    const [desktopUri, setDesktopUri] = useState();
    usePromise(() => __awaiter(void 0, void 0, void 0, function* () {
        const publicAddress = yield connector.getAddress({
            onDesktopUri: (uri) => __awaiter(void 0, void 0, void 0, function* () {
                setDesktopUri(uri);
            }),
            onDisplayUri: (uri) => __awaiter(void 0, void 0, void 0, function* () {
                setQrcodeUri(uri);
            }),
        });
        if (publicAddress &&
            isSameAddress(publicAddress, expectedAddress, connector.connectedChain)) {
            onSuccess();
            return;
        }
        connector.endSession();
        onCancel();
    }), { deps: [connector], retries: 3 });
    return (jsx(DefaultPromptModal, { dataTestId: 'reconnect-qr-code', title: t('dyn_sync_wallet.reconnect_with_qr_code.title'), onClose: onCancel, children: qrcodeUri && (jsx(QrCodeWrapper, { uri: qrcodeUri, desktopUri: desktopUri, accentColor: 
            /* istanbul ignore next */
            themeName === 'dark'
                ? theme.colors.textPrimary
                : (_a = getWalletPrimaryColor(walletBook, connector.key)) !== null && _a !== void 0 ? _a : '', icon: jsx(WalletIcon, { walletKey: connector === null || connector === void 0 ? void 0 : connector.key }), showCopyToClipboardButton: true, walletConnector: connector })) }));
};

export { ReconnectWithQrCodeView };
