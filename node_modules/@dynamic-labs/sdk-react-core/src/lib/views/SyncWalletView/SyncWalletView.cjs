'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
require('../../../polyfills.cjs');
require('@dynamic-labs/multi-wallet');
require('@dynamic-labs/rpc-providers');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../../context/ViewContext/ViewContext.cjs');
require('react');
require('@dynamic-labs/wallet-book');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
require('../../context/DynamicContext/DynamicContext.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
var useDynamicEvents = require('../../utils/hooks/events/useDynamicEvents/useDynamicEvents.cjs');
var useWalletConnectorEvent = require('../../utils/hooks/events/useWalletConnectorEvent/useWalletConnectorEvent.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('react-international-phone');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../events/dynamicEvents.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../context/WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../context/MockContext/MockContext.cjs');
require('../CollectUserDataView/useFields.cjs');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
require('react-i18next');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../context/FooterAnimationContext/index.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../store/state/sendBalances.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
var SwitchWalletView = require('./SwitchWalletView/SwitchWalletView.cjs');
var ReconnectWithQrCodeView = require('./ReconnectWithQrCodeView/ReconnectWithQrCodeView.cjs');
var AutoReconnectingView = require('./AutoReconnectingView/AutoReconnectingView.cjs');
require('../../store/state/tokenBalances.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../context/FundingContext/FundingContext.cjs');
require('../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../context/ConnectWithOtpContext/constants.cjs');
require('../../context/ReinitializeContext/ReinitializeContextProvider.cjs');

const SyncWalletView = ({ onSuccess, onError, expectedAddress, activeAddress, connector, }) => {
    const showQrCodeModal = connector.canConnectViaQrCode &&
        !connector.isInstalledOnBrowser() &&
        !connector.canConnectViaCustodialService;
    logger.logger.logVerboseTroubleshootingMessage('[SyncWallet]', {
        canConnectViaCustodialService: connector.canConnectViaCustodialService,
        canConnectViaQrCode: connector.canConnectViaQrCode,
        isEmbeddedWallet: connector.isEmbeddedWallet,
        isInstalledOnBrowser: connector.isInstalledOnBrowser(),
    });
    useWalletConnectorEvent.useWalletConnectorEvent(connector, 'accountChange', ({ accounts }) => {
        logger.logger.logVerboseTroubleshootingMessage('[SyncWallet] accountChange', {
            accounts,
            expectedAddress,
        });
        const [selectedAccountAddress] = accounts;
        if (walletConnectorCore.isSameAddress(selectedAccountAddress, expectedAddress, connector.connectedChain)) {
            onSuccess(true);
        }
    });
    useDynamicEvents.useInternalDynamicEvents('logout', () => onError(new Error('user logged out'), true));
    const handleTryToReconnect = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        const reconnectAddress = yield connector.getAddress();
        if (reconnectAddress &&
            walletConnectorCore.isSameAddress(reconnectAddress, expectedAddress, connector.connectedChain)) {
            onSuccess(true);
        }
    });
    const handleCancel = () => {
        logger.logger.logVerboseTroubleshootingMessage('[SyncWallet] handleCancel called');
        onError(new utils.DynamicError('User cancelled', '0'), true);
    };
    if (connector.isEmbeddedWallet) {
        return (jsxRuntime.jsx("div", { className: 'sync-wallet-view', "data-testid": 'sync-wallet', children: jsxRuntime.jsx(AutoReconnectingView.AutoReconnectingView, { connector: connector, expectedAddress: expectedAddress, onCancel: handleCancel, onSuccess: () => onSuccess(true) }) }));
    }
    if (showQrCodeModal) {
        return (jsxRuntime.jsx("div", { className: 'sync-wallet-view', "data-testid": 'sync-wallet', children: jsxRuntime.jsx(ReconnectWithQrCodeView.ReconnectWithQrCodeView, { connector: connector, expectedAddress: expectedAddress, onCancel: handleCancel, onSuccess: () => onSuccess(true) }) }));
    }
    return (jsxRuntime.jsx("div", { className: 'sync-wallet-view', "data-testid": 'sync-wallet', children: jsxRuntime.jsx(SwitchWalletView.SwitchWalletView, { connector: connector, expectedAddress: expectedAddress, activeAddress: activeAddress, onCancel: handleCancel, onTryToReconnect: handleTryToReconnect }) }));
};

exports.SyncWalletView = SyncWalletView;
