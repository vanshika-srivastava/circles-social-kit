'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { isSameAddress } from '@dynamic-labs/wallet-connector-core';
import { DynamicError } from '@dynamic-labs/utils';
import '../../../polyfills.js';
import '@dynamic-labs/multi-wallet';
import '@dynamic-labs/rpc-providers';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../../context/ViewContext/ViewContext.js';
import 'react';
import '@dynamic-labs/wallet-book';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import '../../context/DynamicContext/DynamicContext.js';
import '../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../context/ErrorBoundary/ErrorBoundaryContext.js';
import { useInternalDynamicEvents } from '../../utils/hooks/events/useDynamicEvents/useDynamicEvents.js';
import { useWalletConnectorEvent } from '../../utils/hooks/events/useWalletConnectorEvent/useWalletConnectorEvent.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import 'react-international-phone';
import '../../config/ApiEndpoint.js';
import '../../store/state/user/user.js';
import '../../locale/locale.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import '../../events/dynamicEvents.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../context/ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../context/MockContext/MockContext.js';
import '../CollectUserDataView/useFields.js';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '../../store/state/environmentId.js';
import '../../store/state/walletConnectorOptions.js';
import 'react-i18next';
import '../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../components/Alert/Alert.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/IconButton/IconButton.js';
import '../../components/InlineWidget/InlineWidget.js';
import '../../components/Input/Input.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../context/FooterAnimationContext/index.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../store/state/sendBalances.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import { SwitchWalletView } from './SwitchWalletView/SwitchWalletView.js';
import { ReconnectWithQrCodeView } from './ReconnectWithQrCodeView/ReconnectWithQrCodeView.js';
import { AutoReconnectingView } from './AutoReconnectingView/AutoReconnectingView.js';
import '../../store/state/tokenBalances.js';
import '../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../context/FundingContext/FundingContext.js';
import '../../context/SendBalanceContext/SendBalanceContext.js';
import '../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../context/ConnectWithOtpContext/constants.js';
import '../../context/ReinitializeContext/ReinitializeContextProvider.js';

const SyncWalletView = ({ onSuccess, onError, expectedAddress, activeAddress, connector, }) => {
    const showQrCodeModal = connector.canConnectViaQrCode &&
        !connector.isInstalledOnBrowser() &&
        !connector.canConnectViaCustodialService;
    logger.logVerboseTroubleshootingMessage('[SyncWallet]', {
        canConnectViaCustodialService: connector.canConnectViaCustodialService,
        canConnectViaQrCode: connector.canConnectViaQrCode,
        isEmbeddedWallet: connector.isEmbeddedWallet,
        isInstalledOnBrowser: connector.isInstalledOnBrowser(),
    });
    useWalletConnectorEvent(connector, 'accountChange', ({ accounts }) => {
        logger.logVerboseTroubleshootingMessage('[SyncWallet] accountChange', {
            accounts,
            expectedAddress,
        });
        const [selectedAccountAddress] = accounts;
        if (isSameAddress(selectedAccountAddress, expectedAddress, connector.connectedChain)) {
            onSuccess(true);
        }
    });
    useInternalDynamicEvents('logout', () => onError(new Error('user logged out'), true));
    const handleTryToReconnect = () => __awaiter(void 0, void 0, void 0, function* () {
        const reconnectAddress = yield connector.getAddress();
        if (reconnectAddress &&
            isSameAddress(reconnectAddress, expectedAddress, connector.connectedChain)) {
            onSuccess(true);
        }
    });
    const handleCancel = () => {
        logger.logVerboseTroubleshootingMessage('[SyncWallet] handleCancel called');
        onError(new DynamicError('User cancelled', '0'), true);
    };
    if (connector.isEmbeddedWallet) {
        return (jsx("div", { className: 'sync-wallet-view', "data-testid": 'sync-wallet', children: jsx(AutoReconnectingView, { connector: connector, expectedAddress: expectedAddress, onCancel: handleCancel, onSuccess: () => onSuccess(true) }) }));
    }
    if (showQrCodeModal) {
        return (jsx("div", { className: 'sync-wallet-view', "data-testid": 'sync-wallet', children: jsx(ReconnectWithQrCodeView, { connector: connector, expectedAddress: expectedAddress, onCancel: handleCancel, onSuccess: () => onSuccess(true) }) }));
    }
    return (jsx("div", { className: 'sync-wallet-view', "data-testid": 'sync-wallet', children: jsx(SwitchWalletView, { connector: connector, expectedAddress: expectedAddress, activeAddress: activeAddress, onCancel: handleCancel, onTryToReconnect: handleTryToReconnect }) }));
};

export { SyncWalletView };
