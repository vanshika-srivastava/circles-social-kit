'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactI18next = require('react-i18next');
var Typography = require('../../components/Typography/Typography.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../context/ViewContext/ViewContext.cjs');
require('react');
var copy = require('../../shared/assets/copy.cjs');
var blueWalletconnect = require('../../shared/assets/blue-walletconnect.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');

const InlineIconTypography = ({ children }) => (jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', weight: 'regular', color: 'secondary', children: jsxRuntime.jsx("span", { className: 'inline-icon-text', children: children }) }));
const GlobalWalletInfoView = () => {
    const { t } = reactI18next.useTranslation();
    // we cannot translate some of this as we have icons inline with text
    return (jsxRuntime.jsx("div", { className: 'info-card', children: jsxRuntime.jsxs("div", { className: 'wrapper', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', weight: 'bold', color: 'primary', as: 'h2', children: "How do I find the URI or QR code?" }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', weight: 'regular', color: 'secondary', children: t('global_wallet.help.step.1') }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', weight: 'regular', color: 'secondary', children: t('global_wallet.help.step.2') }), jsxRuntime.jsxs(InlineIconTypography, { children: ["3. Open", ' ', jsxRuntime.jsxs("span", { className: 'nowrap', children: ["WalletConnect ", jsxRuntime.jsx(blueWalletconnect.ReactComponent, {})] }), "from the list, this should show a QR code to scan"] }), jsxRuntime.jsxs(InlineIconTypography, { children: ["4. If you are not using the QR code, locate and click", jsxRuntime.jsxs("span", { className: 'nowrap', children: [jsxRuntime.jsx(copy.ReactComponent, {}), " to copy"] }), ' ', "the URI code"] })] }) }));
};

exports.GlobalWalletInfoView = GlobalWalletInfoView;
exports["default"] = GlobalWalletInfoView;
