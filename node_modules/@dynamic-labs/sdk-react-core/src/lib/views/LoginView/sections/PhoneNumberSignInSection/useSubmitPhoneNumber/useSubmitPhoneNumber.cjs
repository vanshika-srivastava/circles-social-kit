'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../../../_virtual/_tslib.cjs');
var reactInternationalPhone = require('react-international-phone');
var reactI18next = require('react-i18next');
var utils = require('@dynamic-labs/utils');
var CaptchaContext = require('../../../../../context/CaptchaContext/CaptchaContext.cjs');
require('react');
require('../../../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('react/jsx-runtime');
var ViewContext = require('../../../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../../../utils/constants/colors.cjs');
require('../../../../../utils/constants/values.cjs');
require('../../../../../store/state/loadingAndLifecycle.cjs');
require('../../../../../shared/consts/index.cjs');
var dynamicEvents = require('../../../../../events/dynamicEvents.cjs');
require('../../../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
var formatPhone = require('../../../../../utils/functions/formatPhone/formatPhone.cjs');
require('../../../../../config/ApiEndpoint.cjs');
require('../../../../../store/state/user/user.cjs');
var sms = require('../../../../../data/api/sms/sms.cjs');
require('../../../../../store/state/projectSettings/projectSettings.cjs');
require('../../../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../../../context/UserWalletsContext/UserWalletsContext.cjs');
var VerificationContext = require('../../../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../../../context/WalletContext/WalletContext.cjs');
require('../../../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../../../context/ThemeContext/ThemeContext.cjs');
require('../../../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../../../context/MockContext/MockContext.cjs');
var useFields = require('../../../../CollectUserDataView/useFields.cjs');
require('../../../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../../../store/state/environmentId.cjs');
require('../../../../../store/state/walletConnectorOptions.cjs');
require('../../../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../../../components/Alert/Alert.cjs');
require('../../../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../../../components/IconButton/IconButton.cjs');
require('../../../../../components/InlineWidget/InlineWidget.cjs');
require('../../../../../components/Input/Input.cjs');
require('../../../../../components/IsBrowser/IsBrowser.cjs');
require('../../../../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../../../components/Popper/Popper/Popper.cjs');
require('../../../../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../../../../context/FooterAnimationContext/index.cjs');
require('../../../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('../../../../../locale/locale.cjs');
var translation = require('../../../../../locale/en/translation.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../../../store/state/sendBalances.cjs');
require('../../../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../../../../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../../../polyfills.cjs');
require('../../../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../../../context/FundingContext/FundingContext.cjs');
require('../../../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const useSubmitPhoneNumber = ({ onSubmit, onSubmitError, country, phone, setInvalidNumberMessage, }) => {
    const { engageCaptcha } = CaptchaContext.useCaptchaContext();
    const { view, setView } = ViewContext.useViewContext();
    const { environmentId, projectSettings } = useInternalDynamicContext.useInternalDynamicContext();
    const { setDisplayedDestination, setVerificationUUID, setRetryData } = VerificationContext.useVerification();
    const { fieldsConfig } = useFields.useFields();
    const { t } = reactI18next.useTranslation();
    const submitPhoneNumber = (captchaToken) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        if (!country)
            return;
        try {
            const phoneNumber = reactInternationalPhone.removeDialCode({
                dialCode: country.dialCode,
                phone,
            });
            const { verificationUUID } = yield sms.createSmsVerification({
                captchaToken,
                environmentId,
                isoCountryCode: country.iso2,
                phoneCountryCode: country.dialCode,
                phoneNumber,
            });
            setRetryData({
                dialCode: country.dialCode,
                iso2: country.iso2,
                phone: phoneNumber,
            });
            // we can safely assume phone number always requires verification here
            // because this hook is only used for SMS sign in.
            setView('login-with-sms-verification');
            setDisplayedDestination(formatPhone.formatPhone(phone));
            setVerificationUUID(verificationUUID);
            const phoneData = {
                dialCode: country.dialCode,
                iso2: country.iso2,
                phone: phoneNumber,
            };
            dynamicEvents.dynamicEvents.emit('authInit', {
                option: phoneData,
                phone: phoneData,
                type: 'sms',
            });
            onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit();
        }
        catch (error) {
            setView(view.type);
            if (error instanceof utils.SmsVerificationError) {
                let message = t('dyn_login.helper.phone_number_form.invalid_phone');
                if (error.code === 'too_many_sms_verification_attempts') {
                    message = t('dyn_login.helper.phone_number_form.too_many_sms_verification_attempts');
                }
                // Use the code from error message if a translation for it exists
                if (error.code &&
                    error.code in translation.translation.dyn_login.helper.phone_number_form)
                    message = t('dyn_login.helper.phone_number_form.' + error.code);
                setInvalidNumberMessage(message);
            }
            else if (typeof error === 'string')
                setInvalidNumberMessage(error);
            onSubmitError === null || onSubmitError === void 0 ? void 0 : onSubmitError();
        }
    });
    return (event) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _a;
        if (!country)
            return;
        event.preventDefault();
        try {
            fieldsConfig.phoneNumber.validation.validateSync(phone);
        }
        catch (error) {
            const { message } = error;
            setInvalidNumberMessage(message);
            onSubmitError === null || onSubmitError === void 0 ? void 0 : onSubmitError();
            return;
        }
        if ((_a = projectSettings === null || projectSettings === void 0 ? void 0 : projectSettings.security.hCaptcha) === null || _a === void 0 ? void 0 : _a.enabled) {
            engageCaptcha({
                authMethod: 'phone',
                onCaptchaSuccess: submitPhoneNumber,
            });
            return;
        }
        submitPhoneNumber();
    });
};

exports.useSubmitPhoneNumber = useSubmitPhoneNumber;
