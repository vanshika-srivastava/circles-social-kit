'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
var utils = require('@dynamic-labs/utils');
var ErrorContainer = require('../../components/ErrorContainer/ErrorContainer.cjs');
var ErrorContext = require('../../context/ErrorContext/ErrorContext.cjs');
var ViewContext = require('../../context/ViewContext/ViewContext.cjs');
var DefaultFooter = require('../../layout/DynamicAuthLayout/DefaultFooter/DefaultFooter.cjs');
var classNames = require('../../utils/functions/classNames/classNames.cjs');
var useAuthLayoutChecks = require('../../utils/hooks/useAuthLayoutChecks/useAuthLayoutChecks.cjs');
var WalletList = require('../WalletList/WalletList.cjs');
var SocialRedirectContext = require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
var FarcasterQrCodeView = require('../FarcasterQrCodeView/FarcasterQrCodeView.cjs');
var LoginViewSection = require('./LoginViewSection/LoginViewSection.cjs');
var useLoginView = require('./useLoginView/useLoginView.cjs');
var showFarcasterQrCodeView = require('./utils/showFarcasterQrCodeView/showFarcasterQrCodeView.cjs');

const LoginView = () => {
    var _a;
    const { error } = ErrorContext.useErrorContext();
    const { setView } = ViewContext.useViewContext();
    const { isWalletOnly, loginViewSections } = useLoginView.useLoginView();
    const { enabledSocialProviders } = SocialRedirectContext.useSocialRedirectContext();
    const { showDefaultFooter } = useAuthLayoutChecks.useAuthLayoutChecks();
    const numOfWallets = ((_a = loginViewSections.find((section) => section.type === sdkApiCore.SdkViewSectionType.Wallet)) === null || _a === void 0 ? void 0 : _a.numOfItemsToDisplay) || 0;
    const renderViewSections = React.useMemo(() => loginViewSections.map((viewSection, index) => (jsxRuntime.jsx("div", { className: classNames.classNames('login-view__scroll__section', `login-view__scroll__section--${viewSection.type}`), children: jsxRuntime.jsx(LoginViewSection.LoginViewSection, { gotToWalletList: () => setView('login-with-email-or-wallet-full-wallet-list'), index: index, viewSection: viewSection, walletCount: numOfWallets }) }, `${viewSection.type}__${index}`))), [loginViewSections, numOfWallets]);
    const errorElement = error && (jsxRuntime.jsx(ErrorContainer.ErrorContainer, { className: 'login-view__error-container', withIcon: false, children: error }));
    if (showFarcasterQrCodeView.showFarcasterQrCodeView(loginViewSections, enabledSocialProviders)) {
        return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [errorElement, jsxRuntime.jsx(FarcasterQrCodeView.FarcasterQrCodeView, {})] }));
    }
    if (isWalletOnly) {
        return jsxRuntime.jsx(WalletList.WalletList, {});
    }
    const shouldShowFooter = utils.isMobile() && showDefaultFooter;
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [errorElement, jsxRuntime.jsx("div", { className: classNames.classNames('login-view__container', {
                    'login-view__container--error': Boolean(error),
                }), children: jsxRuntime.jsx("div", { className: 'login-view__scroll', "data-testid": 'login-view-scroll', children: renderViewSections }) }), shouldShowFooter && jsxRuntime.jsx(DefaultFooter.DefaultFooter, { hideBorder: true })] }));
};

exports.LoginView = LoginView;
