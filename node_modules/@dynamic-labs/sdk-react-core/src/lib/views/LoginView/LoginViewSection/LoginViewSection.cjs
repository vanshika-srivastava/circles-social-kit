'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var sdkApiCore = require('@dynamic-labs/sdk-api-core');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../events/dynamicEvents.cjs');
require('../../../../../_virtual/_tslib.cjs');
require('@dynamic-labs/utils');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
var ViewContext = require('../../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
var LoadingContext = require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
var Typography = require('../../../components/Typography/Typography.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
var Divider = require('../../../components/Divider/Divider.cjs');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../../components/IconButton/IconButton.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
require('formik');
require('../../../store/state/sendBalances.cjs');
require('../../../components/Input/Input.cjs');
require('../../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
var LoginEmailForm = require('../sections/EmailSignInSection/LoginEmailForm.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var PhoneNumberSignInSection = require('../sections/PhoneNumberSignInSection/PhoneNumberSignInSection.cjs');
var SocialSignInSection = require('../sections/SocialSignInSection/SocialSignInSection.cjs');
var ToggleableSection = require('../sections/ToggleableSection/ToggleableSection.cjs');
var WalletSignInSection = require('../sections/WalletSignInSection/WalletSignInSection.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../store/state/tokenBalances.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('qrcode');

const LoginViewSection = ({ viewSection, index, walletCount, gotToWalletList, }) => {
    const { loading } = LoadingContext.useLoadingContext();
    const { t } = reactI18next.useTranslation();
    const { setView } = ViewContext.useViewContext();
    const [isLoading, setIsLoading] = React.useState(loading);
    switch (viewSection.type) {
        case sdkApiCore.SdkViewSectionType.Separator:
            return jsxRuntime.jsx(Divider.Divider, { text: viewSection.label });
        case sdkApiCore.SdkViewSectionType.Email:
            return (jsxRuntime.jsx(LoginEmailForm.LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }));
        case sdkApiCore.SdkViewSectionType.Phone:
            return (jsxRuntime.jsx(PhoneNumberSignInSection.PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading }));
        case sdkApiCore.SdkViewSectionType.EmailAndPhone:
            // eslint-disable-next-line no-case-declarations
            const sections = [
                {
                    button: t('dyn_login.email_or_phone.use_phone'),
                    buttonCopyKey: 'dyn_login.email_or_phone.use_phone',
                    component: (jsxRuntime.jsx(LoginEmailForm.LoginEmailForm, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading })),
                    label: t('dyn_login.email_or_phone.prefer_phone'),
                    labelCopyKey: 'dyn_login.email_or_phone.prefer_phone',
                },
                {
                    button: t('dyn_login.email_or_phone.use_email'),
                    buttonCopyKey: 'dyn_login.email_or_phone.use_email',
                    component: (jsxRuntime.jsx(PhoneNumberSignInSection.PhoneNumberSignInSection, { onSubmit: () => setIsLoading(true), onSubmitError: () => setIsLoading(false), isLoading: isLoading })),
                    label: t('dyn_login.email_or_phone.prefer_email'),
                    labelCopyKey: 'dyn_login.email_or_phone.prefer_email',
                },
            ];
            if (viewSection.defaultItem === 'phone')
                sections.reverse();
            return jsxRuntime.jsx(ToggleableSection.ToggleableSection, { sections: sections });
        case sdkApiCore.SdkViewSectionType.Wallet:
            return (jsxRuntime.jsx(WalletSignInSection.WalletSignInSection, { numberOfItensToShow: viewSection.numOfItemsToDisplay || 0, onSubmit: () => {
                    // this view is just to show the back button
                    setView('login-with-email-or-wallet-full-wallet-list');
                    gotToWalletList();
                }, isLoading: isLoading }));
        case sdkApiCore.SdkViewSectionType.Social:
            return (jsxRuntime.jsx(SocialSignInSection.SocialSignInSection, { collapsedLayout: walletCount > 1, sectionData: viewSection }));
        case sdkApiCore.SdkViewSectionType.Text:
            return viewSection.label ? (jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'secondary', align: viewSection.alignment, className: 'login-view__text', "data-testid": 'login-view-section__text', children: viewSection.label })) : null;
    }
};

exports.LoginViewSection = LoginViewSection;
