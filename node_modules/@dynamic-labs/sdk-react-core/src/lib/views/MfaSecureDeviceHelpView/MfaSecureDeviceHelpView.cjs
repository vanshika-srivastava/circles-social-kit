'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactI18next = require('react-i18next');
require('@dynamic-labs/sdk-api-core');
require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('@dynamic-labs/wallet-connector-core');
require('../../context/ViewContext/ViewContext.cjs');
require('react');
var copy = require('../../shared/assets/copy.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../components/Alert/Alert.cjs');
require('../../events/dynamicEvents.cjs');
require('../../../../_virtual/_tslib.cjs');
require('../../context/DynamicContext/DynamicContext.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../context/WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../context/MockContext/MockContext.cjs');
require('../CollectUserDataView/useFields.cjs');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
var Typography = require('../../components/Typography/Typography.cjs');
require('../../context/FooterAnimationContext/index.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
var Divider = require('../../components/Divider/Divider.cjs');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('formik');
require('../../store/state/sendBalances.cjs');
require('../../components/Input/Input.cjs');
require('../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../polyfills.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../context/FundingContext/FundingContext.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../context/ConnectWithOtpContext/constants.cjs');
require('../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../store/state/tokenBalances.cjs');
var CopyButton = require('../../components/CopyButton/CopyButton.cjs');
var EnterTileAnimation = require('../../components/EnterTileAnimation/EnterTileAnimation.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('qrcode');

const MfaSecureDeviceHelper = ({ uri, secret, }) => {
    const { t } = reactI18next.useTranslation();
    return (jsxRuntime.jsx("div", { className: 'mfa-qrcode-help-content__container', children: jsxRuntime.jsx(EnterTileAnimation.EnterTileAnimation, { delay: '300ms', children: jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__setup-container', children: [jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__step', children: [jsxRuntime.jsx("div", { className: 'mfa-qrcode-help-content__step__number', children: "1" }), jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__step__instructions', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', className: 'mfa-qrcode-help-content__step__title', children: t('dyn_mfa.secure_device_view.helper.step1.title') }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', className: 'mfa-qrcode-help-content__step__subtext', children: t('dyn_mfa.secure_device_view.helper.step1.description') })] })] }), jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__vertical-container', children: [jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__step', children: [jsxRuntime.jsx("div", { className: 'mfa-qrcode-help-content__step__number', children: "2" }), jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__step__instructions', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', className: 'mfa-qrcode-help-content__step__title', children: t('dyn_mfa.secure_device_view.helper.step2.title') }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_small', className: 'mfa-qrcode-help-content__step__subtext', children: t('dyn_mfa.secure_device_view.helper.step2.description') })] })] }), jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__step__nocopy-box', children: [jsxRuntime.jsx(Typography.Typography, { className: 'mfa-qrcode-help-content__step__nocopy-text', variant: 'body_small', children: secret }), jsxRuntime.jsx(CopyButton.CopyButton, { textToCopy: secret, children: jsxRuntime.jsx(copy.ReactComponent, { "data-testid": 'copy-secret', onClick: (e) => {
                                                e.preventDefault();
                                            } }) })] })] }), jsxRuntime.jsx(Divider.Divider, { text: 'OR' }), jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__vertical-container', children: [jsxRuntime.jsx("div", { className: 'mfa-qrcode-help-content__step', children: jsxRuntime.jsxs("div", { className: 'uri-section', children: [jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', color: 'primary', className: 'mfa-qrcode-help-content__step__title', children: t('dyn_mfa.secure_device_view.helper.uri.title') }), jsxRuntime.jsx(Typography.Typography, { className: 'uri-subtext', variant: 'body_small', children: t('dyn_mfa.secure_device_view.helper.uri.description') })] }) }), jsxRuntime.jsxs("div", { className: 'mfa-qrcode-help-content__step__nocopy-box', children: [jsxRuntime.jsx(Typography.Typography, { className: 'mfa-qrcode-help-content__step__nocopy-text', variant: 'body_small', children: uri }), jsxRuntime.jsx(CopyButton.CopyButton, { textToCopy: uri, children: jsxRuntime.jsx(copy.ReactComponent, { "data-testid": 'copy-uri', onClick: (e) => {
                                                e.preventDefault();
                                            } }) })] })] })] }) }) }));
};

exports.MfaSecureDeviceHelper = MfaSecureDeviceHelper;
