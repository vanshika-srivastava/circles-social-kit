'use client'
import { jsxs, jsx } from 'react/jsx-runtime';
import { useTranslation } from 'react-i18next';
import '../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../components/Alert/Alert.js';
import 'react';
import '../../events/dynamicEvents.js';
import '../../../../_virtual/_tslib.js';
import '@dynamic-labs/utils';
import { useDynamicContext } from '../../context/DynamicContext/useDynamicContext/useDynamicContext.js';
import '../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/wallet-connector-core';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import { useViewContext } from '../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../shared/logger.js';
import '@dynamic-labs/iconic';
import { ReactComponent as SvgPasswordHero } from '../../shared/assets/password-hero.js';
import '@dynamic-labs/wallet-book';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../config/ApiEndpoint.js';
import '../../store/state/user/user.js';
import '../../locale/locale.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import { usePromise } from '../../utils/hooks/usePromise/usePromise.js';
import '../../context/ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../context/MockContext/MockContext.js';
import '../CollectUserDataView/useFields.js';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../store/state/environmentId.js';
import '../../store/state/walletConnectorOptions.js';
import { Typography } from '../../components/Typography/Typography.js';
import '../../context/FooterAnimationContext/index.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../components/IconButton/IconButton.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import { TypographyButton } from '../../components/TypographyButton/TypographyButton.js';
import 'formik';
import '../../store/state/sendBalances.js';
import '../../components/Input/Input.js';
import { Spinner } from '../../components/Spinner/spinner.js';
import '../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../polyfills.js';
import '../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../context/FundingContext/FundingContext.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { TextButton } from '../../components/TextButton/TextButton.js';
import { useMfa } from '../../utils/hooks/useMfa/useMfa.js';
import '../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../context/SendBalanceContext/SendBalanceContext.js';
import '../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../context/ConnectWithOtpContext/constants.js';
import '../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../store/state/tokenBalances.js';
import '../../components/InlineWidget/InlineWidget.js';
import { QRCode } from '../../components/QRCode/QRCode.js';

const MfaSecureDeviceView = ({ type, isInitialSetup = false, }) => {
    const { t } = useTranslation();
    const { handleLogOut } = useDynamicContext();
    const { setView } = useViewContext();
    const { addDevice } = useMfa();
    const { data, isLoading } = usePromise(() => addDevice(type));
    const onContinue = () => {
        // back button on mfa verification view should go back to this view
        const onMfaVerificationBackClick = () => {
            setView('mfa-secure-device', { type });
        };
        setView('mfa-verification', { deviceId: data === null || data === void 0 ? void 0 : data.id, isInitialSetup, showBackButton: true, type }, {
            onBackClick: onMfaVerificationBackClick,
        });
    };
    const onHelpClick = ({ secret, uri }) => {
        const onMfaSecureDeviceHelpBackClick = () => {
            setView('mfa-secure-device', { isInitialSetup, type });
        };
        setView('mfa-secure-device-help', {
            secret,
            uri,
        }, { onBackClick: onMfaSecureDeviceHelpBackClick });
    };
    return (jsxs("div", { className: 'mfa-secure-device-view__body', "data-testid": 'mfa-secure-device-view', children: [jsx(Typography, { className: 'mfa-secure-device-view__copy', variant: 'body_normal', weight: 'regular', color: 'secondary', children: t('dyn_mfa.secure_device_view.body') }), isLoading && (jsx(Spinner, { className: 'mfa-secure-device-view__loading-spinner' })), data && (jsxs("div", { className: 'mfa-secure-device-view__qrcode', children: [jsx(QRCode, { Icon: jsx(SvgPasswordHero, {}), value: data.uri, logoSize: 50 }), jsx("div", { className: 'button-container', children: jsx("button", { onClick: () => onHelpClick({ secret: data.secret, uri: data.uri }), children: jsx(Typography, { variant: 'body_small', weight: 'medium', color: 'secondary', children: t('dyn_mfa.secure_device_view.helper.button') }) }) })] })), jsx(TypographyButton, { className: 'mfa-secure-device-view__button', expanded: true, onClick: onContinue, children: t('dyn_mfa.secure_device_view.continue') }), jsx(TextButton, { className: 'mfa-secure-device-view__logout-button', onClick: handleLogOut, copykey: 'dyn_mfa.choose_device_view.logout', children: t('dyn_mfa.secure_device_view.logout') })] }));
};

export { MfaSecureDeviceView };
