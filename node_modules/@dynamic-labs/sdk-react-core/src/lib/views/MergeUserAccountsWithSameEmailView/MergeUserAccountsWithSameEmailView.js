'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { jsxs, jsx } from 'react/jsx-runtime';
import { useTranslation } from 'react-i18next';
import { DynamicError } from '@dynamic-labs/utils';
import { WalletIcon } from '@dynamic-labs/wallet-book';
import { UserProfileIcon } from '@dynamic-labs/iconic';
import '../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../components/Alert/Alert.js';
import 'react';
import '../../events/dynamicEvents.js';
import '../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../shared/logger.js';
import '@dynamic-labs/wallet-connector-core';
import { useViewContext } from '../../context/ViewContext/ViewContext.js';
import { ReactComponent as SvgDoubleArrowRight } from '../../shared/assets/double-arrow-right.js';
import { shortenWalletAddress } from '../../shared/utils/functions/shortenWalletAddress/shortenWalletAddress.js';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import { useErrorContext } from '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { shortenEmail } from '../../shared/utils/functions/shortenEmail/shortenEmail.js';
import '../../config/ApiEndpoint.js';
import '../../store/state/user/user.js';
import '../../locale/locale.js';
import { mergeUserAccounts } from '../../data/api/user/user.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import { useVerification } from '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../context/ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../context/LoadingContext/LoadingContext.js';
import { useHandleAuthenticatedUser } from '../../utils/hooks/useHandleAuthenticatedUser/useHandleAuthenticatedUser.js';
import 'yup';
import '../../context/MockContext/MockContext.js';
import '../CollectUserDataView/useFields.js';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../store/state/environmentId.js';
import '../../store/state/walletConnectorOptions.js';
import { Typography } from '../../components/Typography/Typography.js';
import '../../context/FooterAnimationContext/index.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import { Icon } from '../../components/Icon/Icon.js';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../components/IconButton/IconButton.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import { TypographyButton } from '../../components/TypographyButton/TypographyButton.js';
import 'formik';
import '../../store/state/sendBalances.js';
import '../../components/Input/Input.js';
import '../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../polyfills.js';
import '../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../context/FundingContext/FundingContext.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import '../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../context/SendBalanceContext/SendBalanceContext.js';
import '../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../context/ConnectWithOtpContext/constants.js';
import '../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../store/state/tokenBalances.js';
import '../../components/InlineWidget/InlineWidget.js';
import 'qrcode';

const MergeUserAccountsWithSameEmailView = ({ returnToView }) => {
    const { environmentId, setShowAuthFlow, setCallback, primaryWallet, user } = useInternalDynamicContext();
    const handleAuthenticatedUser = useHandleAuthenticatedUser();
    const { t } = useTranslation();
    const { setError } = useErrorContext();
    const { setView, goToInitialView } = useViewContext();
    const { displayedDestination: email } = useVerification();
    const handleMergeUserAccounts = () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const userProfile = yield mergeUserAccounts(environmentId);
            if (!userProfile) {
                throw new DynamicError('Something went wrong, please try again.');
            }
            yield handleAuthenticatedUser(userProfile);
            setShowAuthFlow(false);
            setCallback('authSuccess');
        }
        catch (e) {
            setError(t('dyn_merge_user_accounts_with_same_email.errors.merge_error'));
            if (user) {
                setShowAuthFlow(false, { emitCancelAuth: true });
                return;
            }
            goToInitialView();
        }
    });
    const handleUseDifferentEmail = () => {
        setError(undefined);
        if (returnToView) {
            setView(returnToView);
            return;
        }
        if (user) {
            setShowAuthFlow(false);
            return;
        }
        setView('collect-user-data');
    };
    return (jsxs("div", { className: 'merge-user-accounts-with-same-email__container', children: [jsxs("div", { className: 'merge-user-accounts-with-same-email__accounts', children: [jsxs("div", { className: 'merge-user-accounts-with-same-email__accounts__item', children: [jsx(WalletIcon, { walletKey: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector.key, className: 'merge-user-accounts-with-same-email__accounts__item__icon' }), jsx(Typography, { variant: 'body_normal', weight: 'medium', color: 'secondary', className: 'merge-user-accounts-with-same-email__accounts__item__text', children: shortenWalletAddress(primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.address, 3, 3) })] }), jsx("div", { className: 'merge-user-accounts-with-same-email__accounts__divider', children: jsx(Icon, { color: 'text-secondary', size: 'small', children: jsx(SvgDoubleArrowRight, {}) }) }), jsxs("div", { className: 'merge-user-accounts-with-same-email__accounts__item', children: [jsx(UserProfileIcon, { className: 'merge-user-accounts-with-same-email__accounts__item__icon' }), jsx(Typography, { variant: 'body_normal', weight: 'medium', color: 'secondary', className: 'merge-user-accounts-with-same-email__accounts__item__text', children: shortenEmail(email, {
                                    breakpoint: 4,
                                    cutEnd: 1,
                                    cutStart: 2,
                                }) })] })] }), jsx(Typography, { weight: 'regular', variant: 'title', className: 'merge-user-accounts-with-same-email__text merge-user-accounts-with-same-email__text__header', copykey: 'dyn_merge_user_accounts_with_same_email.title', children: t('dyn_merge_user_accounts_with_same_email.title') }), jsxs(Typography, { weight: 'medium', variant: 'body_normal', className: 'merge-user-accounts-with-same-email__text merge-user-accounts-with-same-email__text__body', copykey: 'dyn_merge_user_accounts_with_same_email.existing_account', children: [t('dyn_merge_user_accounts_with_same_email.existing_account'), ' ', jsx("span", { className: 'merge-user-accounts-with-same-email__text--bold', children: shortenEmail(email, {
                            breakpoint: 14,
                        }) }), ' ', t('dyn_merge_user_accounts_with_same_email.existing_account_trail')] }), jsxs("div", { className: 'merge-user-accounts-with-same-email__buttons', children: [jsx(TypographyButton, { className: 'merge-user-accounts-with-same-email__buttons__button', onClick: handleMergeUserAccounts, buttonVariant: 'primary', buttonPadding: 'large', copykey: 'dyn_merge_user_accounts_with_same_email.confirm_button', children: t('dyn_merge_user_accounts_with_same_email.confirm_button') }), jsx(TypographyButton, { className: 'merge-user-accounts-with-same-email__buttons__button', onClick: handleUseDifferentEmail, buttonVariant: 'secondary', buttonPadding: 'large', copykey: 'dyn_merge_user_accounts_with_same_email.cancel_button', children: t('dyn_merge_user_accounts_with_same_email.cancel_button') })] })] }));
};

export { MergeUserAccountsWithSameEmailView };
