'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../../components/Alert/Alert.cjs');
require('../../../events/dynamicEvents.cjs');
require('@dynamic-labs/utils');
require('../../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
require('../../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../../../context/ViewContext/ViewContext.cjs');
var check = require('../../../shared/assets/check.cjs');
var close = require('../../../shared/assets/close.cjs');
var copy = require('../../../shared/assets/copy.cjs');
var passwordHero = require('../../../shared/assets/password-hero.cjs');
require('@dynamic-labs/wallet-book');
require('../../../utils/constants/colors.cjs');
require('../../../utils/constants/values.cjs');
var validatePassword = require('../../../shared/utils/functions/validatePassword/validatePassword.cjs');
require('../../../store/state/loadingAndLifecycle.cjs');
require('../../../shared/consts/index.cjs');
var useInternalDynamicContext = require('../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');
require('../../../context/CaptchaContext/CaptchaContext.cjs');
require('../../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
require('../../../config/ApiEndpoint.cjs');
require('../../../store/state/user/user.cjs');
require('../../../locale/locale.cjs');
require('../../../store/state/projectSettings/projectSettings.cjs');
require('../../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../../context/WalletContext/WalletContext.cjs');
require('../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
require('../../../context/ThemeContext/ThemeContext.cjs');
require('../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../../context/MockContext/MockContext.cjs');
require('../../CollectUserDataView/useFields.cjs');
require('../../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../../store/state/environmentId.cjs');
require('../../../store/state/walletConnectorOptions.cjs');
var Typography = require('../../../components/Typography/Typography.cjs');
require('../../../context/FooterAnimationContext/index.cjs');
require('../../../components/ShadowDOM/ShadowDOM.cjs');
require('../../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('react-focus-lock');
require('../../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
var IconButton = require('../../../components/IconButton/IconButton.cjs');
require('../../../components/MenuList/Dropdown/Dropdown.cjs');
var ErrorContainer = require('../../../components/ErrorContainer/ErrorContainer.cjs');
var TypographyButton = require('../../../components/TypographyButton/TypographyButton.cjs');
require('formik');
require('../../../store/state/sendBalances.cjs');
var ModalHeader = require('../../../components/ModalHeader/ModalHeader.cjs');
var Input = require('../../../components/Input/Input.cjs');
require('../../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../../context/PasskeyContext/PasskeyContext.cjs');
require('../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../../polyfills.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../../components/IsBrowser/IsBrowser.cjs');
require('../../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../../context/FundingContext/FundingContext.cjs');
require('../../../components/Popper/Popper/Popper.cjs');
require('../../../components/Popper/PopperContext/PopperContext.cjs');
require('../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var TextButton = require('../../../components/TextButton/TextButton.cjs');
require('../../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../../context/ConnectWithOtpContext/constants.cjs');
require('../../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../../store/state/tokenBalances.cjs');
var CopyButton = require('../../../components/CopyButton/CopyButton.cjs');
require('../../../components/InlineWidget/InlineWidget.cjs');
require('qrcode');
var ToggleVisibilityButton = require('../../../components/ToggleVisibilityButton/ToggleVisibilityButton.cjs');

const CreatePasswordStep = ({ password, setPassword, currentPassword, setCurrentPassword, onContinue, isChangingPassword, onClose, onLogout, }) => {
    const { primaryWallet } = useInternalDynamicContext.useInternalDynamicContext();
    const [currentPasswordInputType, setCurrentPasswordInputType] = React.useState('password');
    const [passwordInputType, setPasswordInputType] = React.useState('password');
    const intialPasswordStrength = validatePassword.validatePassword(password).strength;
    const [passwordStrength, setPasswordStrength] = React.useState(intialPasswordStrength);
    const [confirmPassword, setConfirmPassword] = React.useState('');
    const [confirmPasswordInputType, setConfirmPasswordInputType] = React.useState('password');
    const [isLoading, setIsLoading] = React.useState(false);
    const [error, setError] = React.useState('');
    const { t } = reactI18next.useTranslation();
    const canContinue = Boolean((password === null || password === void 0 ? void 0 : password.length) >= 6 &&
        passwordStrength >= 5 &&
        confirmPassword === password &&
        (!isChangingPassword ||
            (currentPassword && currentPassword !== password)));
    const closeButton = onClose && (jsxRuntime.jsx(IconButton.IconButton, { onClick: () => onClose(), type: 'button', children: jsxRuntime.jsx(close.ReactComponent, {}) }));
    const inputSuffix = (inputType, setInputType, includeCopy = true) => (jsxRuntime.jsxs("div", { className: 'create-password__password-input__suffix', children: [includeCopy && (jsxRuntime.jsx("div", { children: jsxRuntime.jsx(CopyButton.CopyButton, { textToCopy: password, copykey: 'dyn_qr_code.copy_button', className: 'create-password__password-input__suffix__icon', children: jsxRuntime.jsx(copy.ReactComponent, { className: 'create-password__password-input__suffix__icon', onClick: (e) => {
                            e.preventDefault();
                        } }) }) })), jsxRuntime.jsx(ToggleVisibilityButton.ToggleVisibilityButton, { initialState: inputType === 'password', onClick: (hidden) => setInputType(hidden ? 'password' : 'text'), className: 'create-password__password-input__suffix__icon' })] }));
    const handleChangePassword = (e) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        const connector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
        if (isChangingPassword && walletConnectorCore.isCoinbaseMpcWalletConnector(connector)) {
            setIsLoading(true);
            try {
                const isValid = yield connector.validatePasscode(currentPassword);
                if (!isValid) {
                    setError(t('dyn_create_password.errors.invalid_current_password'));
                    return;
                }
            }
            catch (error) {
                setError(t('dyn_create_password.errors.error_changing_password'));
                return;
            }
            finally {
                setIsLoading(false);
            }
        }
        if (canContinue) {
            onContinue();
        }
    });
    const onCreatePasswordInputChange = (e) => {
        const newPassword = e.target.value;
        const { strength } = validatePassword.validatePassword(newPassword);
        setPasswordStrength(strength);
        setPassword(newPassword);
        if (isChangingPassword) {
            if (currentPassword === newPassword) {
                setError(t('dyn_create_password.errors.new_password_same_as_old'));
            }
            else if (newPassword &&
                confirmPassword &&
                newPassword !== confirmPassword) {
                setError(t('dyn_create_password.errors.password_mismatch'));
            }
            else {
                setError('');
            }
            return;
        }
        if (!(newPassword === null || newPassword === void 0 ? void 0 : newPassword.length)) {
            setError('');
        }
    };
    const onConfirmPasswordInputChange = (e) => {
        const newPassword = e.target.value;
        if (newPassword !== password) {
            setError(t('dyn_create_password.errors.password_mismatch'));
        }
        else {
            setError('');
        }
        setConfirmPassword(newPassword);
    };
    return (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx(ModalHeader.ModalHeader, { trailing: closeButton, children: jsxRuntime.jsx(Typography.Typography, { as: 'h1', variant: 'title', color: 'primary', "data-testid": 'dynamic-auth-modal-heading', className: 'header__typography', copykey: 'dyn_create_password.title', children: isChangingPassword
                        ? t('dyn_create_password.title.update')
                        : t('dyn_create_password.title.create') }) }), jsxRuntime.jsx("div", { className: 'create-password', children: jsxRuntime.jsxs("form", { className: 'create-password__body', "data-testid": 'create-password-form', onSubmit: handleChangePassword, children: [jsxRuntime.jsxs("div", { className: 'create-password__body__header', children: [jsxRuntime.jsx(passwordHero.ReactComponent, {}), jsxRuntime.jsx(Typography.Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', children: t('dyn_create_password.description') })] }), error && jsxRuntime.jsx(ErrorContainer.ErrorContainer, { children: error }), isChangingPassword && (jsxRuntime.jsx(Input.Input, { id: 'current-password', placeholder: t('dyn_create_password.current_password_input.placeholder'), type: currentPasswordInputType, suffix: inputSuffix(currentPasswordInputType, setCurrentPasswordInputType, false), label: t('dyn_create_password.current_password_input.label'), value: currentPassword, onChange: (e) => setCurrentPassword(e.target.value), autoFocus: true, copykey: 'dyn_create_password.current_password_input' })), jsxRuntime.jsx("div", { children: jsxRuntime.jsx(Input.Input, { id: 'password', placeholder: isChangingPassword
                                    ? t('dyn_create_password.update_input.placeholder')
                                    : t('dyn_create_password.create_input.placeholder'), type: passwordInputType, suffix: inputSuffix(passwordInputType, setPasswordInputType), label: isChangingPassword
                                    ? t('dyn_create_password.update_input.label')
                                    : t('dyn_create_password.create_input.label'), value: password, onChange: onCreatePasswordInputChange, autoFocus: Boolean(!isChangingPassword), copykey: 'dyn_create_password.create_input' }) }), password.length >= 1 && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsx("div", { className: 'create-password__body__card', children: validatePassword.validatePassword(password).securityCriteria.map((criteria) => (jsxRuntime.jsxs("div", { className: `create-password__password-criteria-list ${criteria.value
                                            ? 'create-password__password-criteria-list__success'
                                            : 'create-password__password-criteria-list__error'}`, children: [jsxRuntime.jsx("div", { children: criteria.value ? (jsxRuntime.jsx(check.ReactComponent, { className: 'create-password__password-criteria-icon' })) : (jsxRuntime.jsx(close.ReactComponent, { className: 'create-password__password-criteria-icon' })) }), jsxRuntime.jsx(Typography.Typography, { variant: 'body_mini', children: criteria.description })] }, criteria.key))) }), jsxRuntime.jsx(Input.Input, { id: 'confirm-password', placeholder: t('dyn_create_password.confirm_input.placeholder'), type: confirmPasswordInputType, suffix: inputSuffix(confirmPasswordInputType, setConfirmPasswordInputType, false), label: t('dyn_create_password.confirm_input.label'), value: confirmPassword, onChange: onConfirmPasswordInputChange, copykey: 'dyn_create_password.confirm_input' })] })), jsxRuntime.jsx(TypographyButton.TypographyButton, { buttonPadding: 'large', buttonVariant: 'brand-primary', typographyProps: {
                                color: 'inherit',
                            }, disabled: !canContinue, copykey: 'dyn_create_password.continue', type: 'submit', loading: isLoading, children: t('dyn_create_password.continue') }), onLogout && (jsxRuntime.jsx(TextButton.TextButton, { className: 'create-password__log-out', onClick: onLogout, copykey: 'dyn_create_password.logout', children: t('dyn_create_password.logout') }))] }) })] }));
};

exports.CreatePasswordStep = CreatePasswordStep;
