'use client'
import { __awaiter } from '../../../../../_virtual/_tslib.js';
import { jsx, jsxs, Fragment } from 'react/jsx-runtime';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { isCoinbaseMpcWalletConnector } from '@dynamic-labs/wallet-connector-core';
import '../../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../../components/Alert/Alert.js';
import '../../../events/dynamicEvents.js';
import '@dynamic-labs/utils';
import '../../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import '../../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../../../context/ViewContext/ViewContext.js';
import { ReactComponent as SvgCheck } from '../../../shared/assets/check.js';
import { ReactComponent as SvgClose } from '../../../shared/assets/close.js';
import { ReactComponent as SvgCopy } from '../../../shared/assets/copy.js';
import { ReactComponent as SvgPasswordHero } from '../../../shared/assets/password-hero.js';
import '@dynamic-labs/wallet-book';
import '../../../utils/constants/colors.js';
import '../../../utils/constants/values.js';
import { validatePassword } from '../../../shared/utils/functions/validatePassword/validatePassword.js';
import '../../../store/state/loadingAndLifecycle.js';
import '../../../shared/consts/index.js';
import { useInternalDynamicContext } from '../../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';
import '../../../context/CaptchaContext/CaptchaContext.js';
import '../../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import '../../../config/ApiEndpoint.js';
import '../../../store/state/user/user.js';
import '../../../locale/locale.js';
import '../../../store/state/projectSettings/projectSettings.js';
import '../../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../../context/AccountExistsContext/AccountExistsContext.js';
import '../../../context/UserWalletsContext/UserWalletsContext.js';
import '../../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../../context/WalletContext/WalletContext.js';
import '../../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import '../../../context/ThemeContext/ThemeContext.js';
import '../../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../../context/MockContext/MockContext.js';
import '../../CollectUserDataView/useFields.js';
import '../../../context/FieldsStateContext/FieldsStateContext.js';
import '../../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../../store/state/environmentId.js';
import '../../../store/state/walletConnectorOptions.js';
import { Typography } from '../../../components/Typography/Typography.js';
import '../../../context/FooterAnimationContext/index.js';
import '../../../components/ShadowDOM/ShadowDOM.js';
import '../../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../../context/WalletGroupContext/WalletGroupContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import 'react-focus-lock';
import '../../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import { IconButton } from '../../../components/IconButton/IconButton.js';
import '../../../components/MenuList/Dropdown/Dropdown.js';
import { ErrorContainer } from '../../../components/ErrorContainer/ErrorContainer.js';
import { TypographyButton } from '../../../components/TypographyButton/TypographyButton.js';
import 'formik';
import '../../../store/state/sendBalances.js';
import { ModalHeader } from '../../../components/ModalHeader/ModalHeader.js';
import { Input } from '../../../components/Input/Input.js';
import '../../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../../context/PasskeyContext/PasskeyContext.js';
import '../../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../../polyfills.js';
import '../../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../../components/IsBrowser/IsBrowser.js';
import '../../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../../context/FundingContext/FundingContext.js';
import '../../../components/Popper/Popper/Popper.js';
import '../../../components/Popper/PopperContext/PopperContext.js';
import '../../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { TextButton } from '../../../components/TextButton/TextButton.js';
import '../../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../../context/SendBalanceContext/SendBalanceContext.js';
import '../../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../../context/ConnectWithOtpContext/constants.js';
import '../../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../../store/state/tokenBalances.js';
import { CopyButton } from '../../../components/CopyButton/CopyButton.js';
import '../../../components/InlineWidget/InlineWidget.js';
import 'qrcode';
import { ToggleVisibilityButton } from '../../../components/ToggleVisibilityButton/ToggleVisibilityButton.js';

const CreatePasswordStep = ({ password, setPassword, currentPassword, setCurrentPassword, onContinue, isChangingPassword, onClose, onLogout, }) => {
    const { primaryWallet } = useInternalDynamicContext();
    const [currentPasswordInputType, setCurrentPasswordInputType] = useState('password');
    const [passwordInputType, setPasswordInputType] = useState('password');
    const intialPasswordStrength = validatePassword(password).strength;
    const [passwordStrength, setPasswordStrength] = useState(intialPasswordStrength);
    const [confirmPassword, setConfirmPassword] = useState('');
    const [confirmPasswordInputType, setConfirmPasswordInputType] = useState('password');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const { t } = useTranslation();
    const canContinue = Boolean((password === null || password === void 0 ? void 0 : password.length) >= 6 &&
        passwordStrength >= 5 &&
        confirmPassword === password &&
        (!isChangingPassword ||
            (currentPassword && currentPassword !== password)));
    const closeButton = onClose && (jsx(IconButton, { onClick: () => onClose(), type: 'button', children: jsx(SvgClose, {}) }));
    const inputSuffix = (inputType, setInputType, includeCopy = true) => (jsxs("div", { className: 'create-password__password-input__suffix', children: [includeCopy && (jsx("div", { children: jsx(CopyButton, { textToCopy: password, copykey: 'dyn_qr_code.copy_button', className: 'create-password__password-input__suffix__icon', children: jsx(SvgCopy, { className: 'create-password__password-input__suffix__icon', onClick: (e) => {
                            e.preventDefault();
                        } }) }) })), jsx(ToggleVisibilityButton, { initialState: inputType === 'password', onClick: (hidden) => setInputType(hidden ? 'password' : 'text'), className: 'create-password__password-input__suffix__icon' })] }));
    const handleChangePassword = (e) => __awaiter(void 0, void 0, void 0, function* () {
        e.preventDefault();
        const connector = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector;
        if (isChangingPassword && isCoinbaseMpcWalletConnector(connector)) {
            setIsLoading(true);
            try {
                const isValid = yield connector.validatePasscode(currentPassword);
                if (!isValid) {
                    setError(t('dyn_create_password.errors.invalid_current_password'));
                    return;
                }
            }
            catch (error) {
                setError(t('dyn_create_password.errors.error_changing_password'));
                return;
            }
            finally {
                setIsLoading(false);
            }
        }
        if (canContinue) {
            onContinue();
        }
    });
    const onCreatePasswordInputChange = (e) => {
        const newPassword = e.target.value;
        const { strength } = validatePassword(newPassword);
        setPasswordStrength(strength);
        setPassword(newPassword);
        if (isChangingPassword) {
            if (currentPassword === newPassword) {
                setError(t('dyn_create_password.errors.new_password_same_as_old'));
            }
            else if (newPassword &&
                confirmPassword &&
                newPassword !== confirmPassword) {
                setError(t('dyn_create_password.errors.password_mismatch'));
            }
            else {
                setError('');
            }
            return;
        }
        if (!(newPassword === null || newPassword === void 0 ? void 0 : newPassword.length)) {
            setError('');
        }
    };
    const onConfirmPasswordInputChange = (e) => {
        const newPassword = e.target.value;
        if (newPassword !== password) {
            setError(t('dyn_create_password.errors.password_mismatch'));
        }
        else {
            setError('');
        }
        setConfirmPassword(newPassword);
    };
    return (jsxs(Fragment, { children: [jsx(ModalHeader, { trailing: closeButton, children: jsx(Typography, { as: 'h1', variant: 'title', color: 'primary', "data-testid": 'dynamic-auth-modal-heading', className: 'header__typography', copykey: 'dyn_create_password.title', children: isChangingPassword
                        ? t('dyn_create_password.title.update')
                        : t('dyn_create_password.title.create') }) }), jsx("div", { className: 'create-password', children: jsxs("form", { className: 'create-password__body', "data-testid": 'create-password-form', onSubmit: handleChangePassword, children: [jsxs("div", { className: 'create-password__body__header', children: [jsx(SvgPasswordHero, {}), jsx(Typography, { variant: 'body_normal', weight: 'regular', color: 'secondary', children: t('dyn_create_password.description') })] }), error && jsx(ErrorContainer, { children: error }), isChangingPassword && (jsx(Input, { id: 'current-password', placeholder: t('dyn_create_password.current_password_input.placeholder'), type: currentPasswordInputType, suffix: inputSuffix(currentPasswordInputType, setCurrentPasswordInputType, false), label: t('dyn_create_password.current_password_input.label'), value: currentPassword, onChange: (e) => setCurrentPassword(e.target.value), autoFocus: true, copykey: 'dyn_create_password.current_password_input' })), jsx("div", { children: jsx(Input, { id: 'password', placeholder: isChangingPassword
                                    ? t('dyn_create_password.update_input.placeholder')
                                    : t('dyn_create_password.create_input.placeholder'), type: passwordInputType, suffix: inputSuffix(passwordInputType, setPasswordInputType), label: isChangingPassword
                                    ? t('dyn_create_password.update_input.label')
                                    : t('dyn_create_password.create_input.label'), value: password, onChange: onCreatePasswordInputChange, autoFocus: Boolean(!isChangingPassword), copykey: 'dyn_create_password.create_input' }) }), password.length >= 1 && (jsxs(Fragment, { children: [jsx("div", { className: 'create-password__body__card', children: validatePassword(password).securityCriteria.map((criteria) => (jsxs("div", { className: `create-password__password-criteria-list ${criteria.value
                                            ? 'create-password__password-criteria-list__success'
                                            : 'create-password__password-criteria-list__error'}`, children: [jsx("div", { children: criteria.value ? (jsx(SvgCheck, { className: 'create-password__password-criteria-icon' })) : (jsx(SvgClose, { className: 'create-password__password-criteria-icon' })) }), jsx(Typography, { variant: 'body_mini', children: criteria.description })] }, criteria.key))) }), jsx(Input, { id: 'confirm-password', placeholder: t('dyn_create_password.confirm_input.placeholder'), type: confirmPasswordInputType, suffix: inputSuffix(confirmPasswordInputType, setConfirmPasswordInputType, false), label: t('dyn_create_password.confirm_input.label'), value: confirmPassword, onChange: onConfirmPasswordInputChange, copykey: 'dyn_create_password.confirm_input' })] })), jsx(TypographyButton, { buttonPadding: 'large', buttonVariant: 'brand-primary', typographyProps: {
                                color: 'inherit',
                            }, disabled: !canContinue, copykey: 'dyn_create_password.continue', type: 'submit', loading: isLoading, children: t('dyn_create_password.continue') }), onLogout && (jsx(TextButton, { className: 'create-password__log-out', onClick: onLogout, copykey: 'dyn_create_password.logout', children: t('dyn_create_password.logout') }))] }) })] }));
};

export { CreatePasswordStep };
