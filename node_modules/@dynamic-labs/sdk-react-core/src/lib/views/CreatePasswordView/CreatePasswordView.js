'use client'
import { __awaiter } from '../../../../_virtual/_tslib.js';
import { jsx } from 'react/jsx-runtime';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { isCoinbaseMpcWalletConnector } from '@dynamic-labs/wallet-connector-core';
import '../../context/DynamicContext/DynamicContext.js';
import '@dynamic-labs/sdk-api-core';
import { logger } from '../../shared/logger.js';
import '@dynamic-labs/iconic';
import '../../context/ViewContext/ViewContext.js';
import '@dynamic-labs/wallet-book';
import '@dynamic-labs/utils';
import '../../utils/constants/colors.js';
import '../../utils/constants/values.js';
import '../../store/state/loadingAndLifecycle.js';
import '../../shared/consts/index.js';
import { dynamicEvents } from '../../events/dynamicEvents.js';
import '../../context/CaptchaContext/CaptchaContext.js';
import '../../context/ErrorContext/ErrorContext.js';
import '@dynamic-labs/multi-wallet';
import 'react-international-phone';
import { findCoinbaseMPCWallet } from '../../utils/functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.js';
import { requiresPasswordForEmbeddedWallet } from '../../utils/functions/requiresPasswordForEmbeddedWallet/requiresPasswordForEmbeddedWallet.js';
import '../../config/ApiEndpoint.js';
import '../../store/state/user/user.js';
import '../../locale/locale.js';
import '../../store/state/projectSettings/projectSettings.js';
import '../../context/AccessDeniedContext/AccessDeniedContext.js';
import '../../context/AccountExistsContext/AccountExistsContext.js';
import '../../context/UserWalletsContext/UserWalletsContext.js';
import '../../context/VerificationContext/VerificationContext.js';
import 'react-dom';
import '../../context/WalletContext/WalletContext.js';
import '../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.js';
import { useEmbeddedWalletPassword } from '../../utils/hooks/useEmbeddedWalletPassword/useEmbeddedWalletPassword.js';
import '../../context/ThemeContext/ThemeContext.js';
import '../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.js';
import '@dynamic-labs/types';
import '../../context/LoadingContext/LoadingContext.js';
import 'yup';
import '../../context/MockContext/MockContext.js';
import '../CollectUserDataView/useFields.js';
import '../../context/FieldsStateContext/FieldsStateContext.js';
import '../../context/UserFieldEditorContext/UserFieldEditorContext.js';
import '@dynamic-labs/rpc-providers';
import '../../store/state/environmentId.js';
import '../../store/state/walletConnectorOptions.js';
import '../../components/Accordion/components/AccordionItem/AccordionItem.js';
import '../../components/Alert/Alert.js';
import '../../components/ShadowDOM/ShadowDOM.js';
import '../../components/IconButton/IconButton.js';
import '../../components/InlineWidget/InlineWidget.js';
import '../../components/Input/Input.js';
import '../../components/IsBrowser/IsBrowser.js';
import '../../components/MenuList/Dropdown/Dropdown.js';
import '../../components/Transition/ZoomTransition/ZoomTransition.js';
import '../../components/Transition/SlideInUpTransition/SlideInUpTransition.js';
import '../../components/Transition/OpacityTransition/OpacityTransition.js';
import '../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.js';
import '../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.js';
import '../../components/Popper/Popper/Popper.js';
import '../../components/Popper/PopperContext/PopperContext.js';
import 'react-focus-lock';
import 'qrcode';
import 'formik';
import '../../context/FooterAnimationContext/index.js';
import '../../context/WalletGroupContext/WalletGroupContext.js';
import '../../context/SocialRedirectContext/SocialRedirectContext.js';
import '../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.js';
import '@hcaptcha/react-hcaptcha';
import { CreatePasswordStep } from './CreatePasswordStep/CreatePasswordStep.js';
import { SavePasswordStep } from './SavePasswordStep/SavePasswordStep.js';
import '../../widgets/DynamicWidget/context/DynamicWidgetContext.js';
import '../../context/IpConfigurationContext/IpConfigurationContext.js';
import '../../context/PasskeyContext/PasskeyContext.js';
import '../../store/state/sendBalances.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.js';
import '../TransactionConfirmationView/helpers/transactionErrorMessage.js';
import '../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.js';
import '../../../polyfills.js';
import '../../context/ErrorBoundary/ErrorBoundaryBase.js';
import '../../context/ErrorBoundary/ErrorBoundaryContext.js';
import '../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.js';
import '../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.js';
import '../../context/WidgetRegistry/WidgetRegistryContextProvider.js';
import '../../context/FundingContext/FundingContext.js';
import '../../context/SendBalanceContext/SendBalanceContext.js';
import '../../context/ConnectWithOtpContext/ConnectWithOtpContext.js';
import '../../context/ConnectWithOtpContext/constants.js';
import '../../context/ReinitializeContext/ReinitializeContextProvider.js';
import '../../store/state/tokenBalances.js';
import { useInternalDynamicContext } from '../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.js';

const CreatePasswordView = ({ onSuccess, onError, closeView, notCalledFromWalletUtils, isSignUp, }) => {
    var _a;
    const { setShowAuthFlow, user, projectSettings, primaryWallet, handleLogOut: onLogout, walletConnectorOptions, } = useInternalDynamicContext();
    const { t } = useTranslation();
    const { claimWallet } = useEmbeddedWalletPassword();
    const [curStep, setCurStep] = useState('create-password');
    const cbVcWalletProperties = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((vc) => vc.walletName === 'coinbasempc')) === null || _a === void 0 ? void 0 : _a.walletProperties;
    const isChangingPassword = Boolean(cbVcWalletProperties === null || cbVcWalletProperties === void 0 ? void 0 : cbVcWalletProperties.claimed);
    const closeViewOnCreate = closeView !== null && closeView !== void 0 ? closeView : true;
    const [currentPassword, setCurrentPassword] = useState('');
    const [password, setPassword] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');
    const requiresPassword = requiresPasswordForEmbeddedWallet(projectSettings);
    const canClose = isChangingPassword || !requiresPassword;
    const handleCreatePassword = () => __awaiter(void 0, void 0, void 0, function* () {
        setCurStep('save-password');
    });
    const handleSavePassword = () => __awaiter(void 0, void 0, void 0, function* () {
        var _b, _c, _d;
        setIsLoading(true);
        try {
            if (!isSignUp) {
                const connector = (_d = (_b = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector) !== null && _b !== void 0 ? _b : (_c = findCoinbaseMPCWallet(walletConnectorOptions)) === null || _c === void 0 ? void 0 : _c.walletConnector) !== null && _d !== void 0 ? _d : undefined;
                // notCalledFromWalletUtils = true means the user triggered password flow, not the connector
                if (notCalledFromWalletUtils &&
                    isCoinbaseMpcWalletConnector(connector)) {
                    yield connector.changePasscode(password, currentPassword);
                }
                if (!isChangingPassword) {
                    // if creating password for the first time, set wallet as claimed
                    yield claimWallet();
                }
            }
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(password);
            if (closeViewOnCreate) {
                setShowAuthFlow(false, { ignoreIfIsEmbeddedWidget: false });
            }
            dynamicEvents.emit('embeddedWalletCreatePasswordCompleted', password);
        }
        catch (e) {
            logger.debug(`Error ${isChangingPassword ? 'updating' : 'creating'} password`, e);
            dynamicEvents.emit('embeddedWalletCreatePasswordFailed', e);
            if (e instanceof Error) {
                setError(e.message);
            }
            onError === null || onError === void 0 ? void 0 : onError(e);
        }
        finally {
            setIsLoading(false);
        }
    });
    const handleClose = () => {
        if (requiresPassword) {
            const error = new Error(t('dyn_create_password.errors.user_closed_view'));
            onError === null || onError === void 0 ? void 0 : onError(error, true);
            dynamicEvents.emit('embeddedWalletCreatePasswordFailed', error);
        }
        setShowAuthFlow(false);
    };
    const handleLogout = (e) => {
        e === null || e === void 0 ? void 0 : e.preventDefault();
        const error = new Error(t('dyn_create_password.errors.user_closed_view'));
        onError === null || onError === void 0 ? void 0 : onError(error, true);
        onLogout();
    };
    return curStep === 'save-password' ? (jsx(SavePasswordStep, { password: password, onBack: () => setCurStep('create-password'), error: error, isLoading: isLoading, onSave: () => handleSavePassword(), onClose: canClose ? () => handleClose() : undefined, onLogout: !canClose ? handleLogout : undefined })) : (jsx(CreatePasswordStep, { password: password, setPassword: setPassword, currentPassword: currentPassword, setCurrentPassword: setCurrentPassword, onContinue: () => handleCreatePassword(), isChangingPassword: isChangingPassword, onClose: canClose ? () => handleClose() : undefined, onLogout: !canClose ? handleLogout : undefined }));
};

export { CreatePasswordView };
