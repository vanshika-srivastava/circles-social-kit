'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../../_virtual/_tslib.cjs');
var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../../context/ViewContext/ViewContext.cjs');
require('@dynamic-labs/wallet-book');
require('@dynamic-labs/utils');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
var dynamicEvents = require('../../events/dynamicEvents.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
require('react-international-phone');
var findCoinbaseMPCWallet = require('../../utils/functions/findCoinbaseMPCWallet/findCoinbaseMPCWallet.cjs');
var requiresPasswordForEmbeddedWallet = require('../../utils/functions/requiresPasswordForEmbeddedWallet/requiresPasswordForEmbeddedWallet.cjs');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../context/WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
var useEmbeddedWalletPassword = require('../../utils/hooks/useEmbeddedWalletPassword/useEmbeddedWalletPassword.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
require('@dynamic-labs/types');
require('../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../context/MockContext/MockContext.cjs');
require('../CollectUserDataView/useFields.cjs');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
require('../../components/Alert/Alert.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
require('formik');
require('../../context/FooterAnimationContext/index.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
var CreatePasswordStep = require('./CreatePasswordStep/CreatePasswordStep.cjs');
var SavePasswordStep = require('./SavePasswordStep/SavePasswordStep.cjs');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
require('../../store/state/sendBalances.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
require('../TransactionConfirmationView/helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../polyfills.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../context/FundingContext/FundingContext.cjs');
require('../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../context/ConnectWithOtpContext/constants.cjs');
require('../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const CreatePasswordView = ({ onSuccess, onError, closeView, notCalledFromWalletUtils, isSignUp, }) => {
    var _a;
    const { setShowAuthFlow, user, projectSettings, primaryWallet, handleLogOut: onLogout, walletConnectorOptions, } = useInternalDynamicContext.useInternalDynamicContext();
    const { t } = reactI18next.useTranslation();
    const { claimWallet } = useEmbeddedWalletPassword.useEmbeddedWalletPassword();
    const [curStep, setCurStep] = React.useState('create-password');
    const cbVcWalletProperties = (_a = user === null || user === void 0 ? void 0 : user.verifiedCredentials.find((vc) => vc.walletName === 'coinbasempc')) === null || _a === void 0 ? void 0 : _a.walletProperties;
    const isChangingPassword = Boolean(cbVcWalletProperties === null || cbVcWalletProperties === void 0 ? void 0 : cbVcWalletProperties.claimed);
    const closeViewOnCreate = closeView !== null && closeView !== void 0 ? closeView : true;
    const [currentPassword, setCurrentPassword] = React.useState('');
    const [password, setPassword] = React.useState('');
    const [isLoading, setIsLoading] = React.useState(false);
    const [error, setError] = React.useState('');
    const requiresPassword = requiresPasswordForEmbeddedWallet.requiresPasswordForEmbeddedWallet(projectSettings);
    const canClose = isChangingPassword || !requiresPassword;
    const handleCreatePassword = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        setCurStep('save-password');
    });
    const handleSavePassword = () => _tslib.__awaiter(void 0, void 0, void 0, function* () {
        var _b, _c, _d;
        setIsLoading(true);
        try {
            if (!isSignUp) {
                const connector = (_d = (_b = primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.connector) !== null && _b !== void 0 ? _b : (_c = findCoinbaseMPCWallet.findCoinbaseMPCWallet(walletConnectorOptions)) === null || _c === void 0 ? void 0 : _c.walletConnector) !== null && _d !== void 0 ? _d : undefined;
                // notCalledFromWalletUtils = true means the user triggered password flow, not the connector
                if (notCalledFromWalletUtils &&
                    walletConnectorCore.isCoinbaseMpcWalletConnector(connector)) {
                    yield connector.changePasscode(password, currentPassword);
                }
                if (!isChangingPassword) {
                    // if creating password for the first time, set wallet as claimed
                    yield claimWallet();
                }
            }
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(password);
            if (closeViewOnCreate) {
                setShowAuthFlow(false, { ignoreIfIsEmbeddedWidget: false });
            }
            dynamicEvents.dynamicEvents.emit('embeddedWalletCreatePasswordCompleted', password);
        }
        catch (e) {
            logger.logger.debug(`Error ${isChangingPassword ? 'updating' : 'creating'} password`, e);
            dynamicEvents.dynamicEvents.emit('embeddedWalletCreatePasswordFailed', e);
            if (e instanceof Error) {
                setError(e.message);
            }
            onError === null || onError === void 0 ? void 0 : onError(e);
        }
        finally {
            setIsLoading(false);
        }
    });
    const handleClose = () => {
        if (requiresPassword) {
            const error = new Error(t('dyn_create_password.errors.user_closed_view'));
            onError === null || onError === void 0 ? void 0 : onError(error, true);
            dynamicEvents.dynamicEvents.emit('embeddedWalletCreatePasswordFailed', error);
        }
        setShowAuthFlow(false);
    };
    const handleLogout = (e) => {
        e === null || e === void 0 ? void 0 : e.preventDefault();
        const error = new Error(t('dyn_create_password.errors.user_closed_view'));
        onError === null || onError === void 0 ? void 0 : onError(error, true);
        onLogout();
    };
    return curStep === 'save-password' ? (jsxRuntime.jsx(SavePasswordStep.SavePasswordStep, { password: password, onBack: () => setCurStep('create-password'), error: error, isLoading: isLoading, onSave: () => handleSavePassword(), onClose: canClose ? () => handleClose() : undefined, onLogout: !canClose ? handleLogout : undefined })) : (jsxRuntime.jsx(CreatePasswordStep.CreatePasswordStep, { password: password, setPassword: setPassword, currentPassword: currentPassword, setCurrentPassword: setCurrentPassword, onContinue: () => handleCreatePassword(), isChangingPassword: isChangingPassword, onClose: canClose ? () => handleClose() : undefined, onLogout: !canClose ? handleLogout : undefined }));
};

exports.CreatePasswordView = CreatePasswordView;
