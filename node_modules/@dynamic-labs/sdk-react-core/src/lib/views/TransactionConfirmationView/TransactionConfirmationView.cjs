'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var reactI18next = require('react-i18next');
var utils = require('@dynamic-labs/utils');
var walletBook = require('@dynamic-labs/wallet-book');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
require('../../context/DynamicContext/DynamicContext.cjs');
require('@dynamic-labs/sdk-api-core');
var logger = require('../../shared/logger.cjs');
require('@dynamic-labs/iconic');
require('../../context/ViewContext/ViewContext.cjs');
var shortenWalletAddress = require('../../shared/utils/functions/shortenWalletAddress/shortenWalletAddress.cjs');
require('../../utils/constants/colors.cjs');
require('../../utils/constants/values.cjs');
var useEffectOnce = require('../../shared/utils/hooks/useEffectOnce/useEffectOnce.cjs');
require('../../store/state/loadingAndLifecycle.cjs');
require('../../shared/consts/index.cjs');
require('../../events/dynamicEvents.cjs');
require('../../../../_virtual/_tslib.cjs');
require('../../context/CaptchaContext/CaptchaContext.cjs');
require('../../context/ErrorContext/ErrorContext.cjs');
require('@dynamic-labs/multi-wallet');
var getAppOrigin = require('../../utils/functions/getAppOrigin/getAppOrigin.cjs');
require('react-international-phone');
require('../../config/ApiEndpoint.cjs');
require('../../store/state/user/user.cjs');
require('../../locale/locale.cjs');
require('../../store/state/projectSettings/projectSettings.cjs');
require('../../context/AccessDeniedContext/AccessDeniedContext.cjs');
require('../../context/AccountExistsContext/AccountExistsContext.cjs');
require('../../context/UserWalletsContext/UserWalletsContext.cjs');
require('../../context/VerificationContext/VerificationContext.cjs');
require('react-dom');
require('../../context/WalletContext/WalletContext.cjs');
require('../../utils/hooks/useEmbeddedWallet/useSecureEnclaveEmbeddedWallet/constants.cjs');
var usePromise = require('../../utils/hooks/usePromise/usePromise.cjs');
require('../../context/ThemeContext/ThemeContext.cjs');
var useForceUpdate = require('../../utils/hooks/useForceUpdate/useForceUpdate.cjs');
var useInterval = require('../../utils/hooks/useInterval/useInterval.cjs');
require('../../utils/hooks/useUserUpdateRequest/useUpdateUser/userFieldsSchema.cjs');
var useMutation = require('../../utils/hooks/useMutation/useMutation.cjs');
require('@dynamic-labs/types');
require('../../context/LoadingContext/LoadingContext.cjs');
require('yup');
require('../../context/MockContext/MockContext.cjs');
require('../CollectUserDataView/useFields.cjs');
require('../../context/FieldsStateContext/FieldsStateContext.cjs');
require('../../context/UserFieldEditorContext/UserFieldEditorContext.cjs');
require('@dynamic-labs/rpc-providers');
require('../../store/state/environmentId.cjs');
require('../../store/state/walletConnectorOptions.cjs');
require('../../components/Accordion/components/AccordionItem/AccordionItem.cjs');
var Alert = require('../../components/Alert/Alert.cjs');
var Typography = require('../../components/Typography/Typography.cjs');
require('../../components/ShadowDOM/ShadowDOM.cjs');
require('../../components/IconButton/IconButton.cjs');
require('../../components/InlineWidget/InlineWidget.cjs');
require('../../components/Input/Input.cjs');
require('../../components/IsBrowser/IsBrowser.cjs');
require('../../components/MenuList/Dropdown/Dropdown.cjs');
require('../../components/Transition/ZoomTransition/ZoomTransition.cjs');
require('../../components/Transition/SlideInUpTransition/SlideInUpTransition.cjs');
require('../../components/Transition/OpacityTransition/OpacityTransition.cjs');
require('../../components/OverlayCard/OverlayCardTarget/OverlayCardTarget.cjs');
require('../../components/PasskeyCreatedSuccessBanner/PasskeyCreatedSuccessBanner.cjs');
require('../../components/Popper/Popper/Popper.cjs');
require('../../components/Popper/PopperContext/PopperContext.cjs');
require('react-focus-lock');
require('qrcode');
var useFetchCurrency = require('../../widgets/DynamicWidget/hooks/useFetchCurrency/useFetchCurrency.cjs');
require('formik');
require('../../context/FooterAnimationContext/index.cjs');
require('../../context/WalletGroupContext/WalletGroupContext.cjs');
require('../../context/SocialRedirectContext/SocialRedirectContext.cjs');
require('../../widgets/DynamicBridgeWidget/views/WalletsView/components/SecondaryWallets/SecondaryWallets.cjs');
require('@hcaptcha/react-hcaptcha');
require('../../widgets/DynamicWidget/context/DynamicWidgetContext.cjs');
require('../../context/IpConfigurationContext/IpConfigurationContext.cjs');
require('../../context/PasskeyContext/PasskeyContext.cjs');
var sendBalances = require('../../store/state/sendBalances.cjs');
var TransactionConfirmationPageLayout = require('../../components/TransactionConfirmationPageLayout/TransactionConfirmationPageLayout.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetHeader/DynamicWidgetHeader.cjs');
var useTransactionTotal = require('./hooks/useTransactionTotal/useTransactionTotal.cjs');
var transactionErrorMessage = require('./helpers/transactionErrorMessage.cjs');
require('../../widgets/DynamicWidget/views/ManagePasskeysWidgetView/PasskeyCard/PasskeyCard.cjs');
require('../../../polyfills.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryBase.cjs');
require('../../context/ErrorBoundary/ErrorBoundaryContext.cjs');
require('../../widgets/DynamicBridgeWidget/context/DynamicBridgeWidgetContext/DynamicBridgeWidgetContext.cjs');
require('../../widgets/DynamicWidget/components/DynamicWidgetCard/DynamicWidgetCard.cjs');
require('../../context/WidgetRegistry/WidgetRegistryContextProvider.cjs');
require('../../context/FundingContext/FundingContext.cjs');
require('../../context/SendBalanceContext/SendBalanceContext.cjs');
require('../../context/ConnectWithOtpContext/ConnectWithOtpContext.cjs');
require('../../context/ConnectWithOtpContext/constants.cjs');
require('../../context/ReinitializeContext/ReinitializeContextProvider.cjs');
require('../../store/state/tokenBalances.cjs');
var useInternalDynamicContext = require('../../context/DynamicContext/useDynamicContext/useInternalDynamicContext.cjs');

const FEE_REFRESH_INTERVAL = 20000;
const TransactionConfirmationView = ({ transaction, onError, onSuccess, mutation, onClickBack, walletConnector, onClickClose, title, displayPoweredByDynamicFooter = false, copykey, hideModal, currentToken, isNativeToken, transactionValue, isModal, }) => {
    const { appName, appLogoUrl, primaryWallet } = useInternalDynamicContext.useInternalDynamicContext();
    const appOrigin = getAppOrigin.getAppOrigin();
    const [isGasSponsored, setIsGasSponsored] = React.useState(false);
    const update = useForceUpdate.useForceUpdate();
    const { t } = reactI18next.useTranslation();
    const { currency } = useFetchCurrency.useFetchCurrency(walletConnector);
    const { chainName } = sendBalances.useSendBalanceState();
    /**
     * Update transaction fee and trigger a react update
     * to reflect the new fee on the UI
     */
    const fetchTransactionFee = () => {
        // solana fee doesnt need to be refreshed
        if (chainName === 'Solana' && transaction.fee.gas !== undefined)
            return;
        transaction.fetchFee().finally(update);
    };
    const { isLoading: isGasSponsoredLoading } = usePromise.usePromise(() => {
        if (!walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
            return false;
        }
        return walletConnector.canSponsorTransactionGas(transaction);
    }, {
        initialData: false,
        onReject: logger.logger.error,
        onResolve: (isGasSponsored) => {
            setIsGasSponsored(isGasSponsored);
            if (!isGasSponsored && walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
                walletConnector.disableGasSponsorshipOnce();
            }
        },
    });
    const { mutate: send, isLoading, error: transactionError, } = useMutation.useMutation(mutation, {
        onFailure: (error) => {
            fetchTransactionFee();
            if (utils.TransactionGasCannotBeSponsoredError.isInstance(error)) {
                logger.logger.debug(error);
                setIsGasSponsored(false);
                if (walletConnectorCore.isAccountAbstractionConnector(walletConnector)) {
                    walletConnector.disableGasSponsorshipOnce();
                }
            }
            logger.logger.error(error);
            onError === null || onError === void 0 ? void 0 : onError(error);
        },
        onSuccess: (tx) => onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(tx),
    });
    // Refresh transaction fee, Solana fees are static based on transaction data, dont need to refresh them
    useInterval.useInterval(fetchTransactionFee, isLoading ? null : FEE_REFRESH_INTERVAL);
    useEffectOnce.useEffectOnce(fetchTransactionFee);
    const total = useTransactionTotal.useTransactionTotal({
        gasTotalPrice: transaction.fee.gas,
        isGasSponsored,
        transactionValue: transaction.value,
    });
    const errorMessage = transactionError && transactionErrorMessage.transactionErrorMessage(transactionError);
    const { data: balance, isLoading: isBalanceLoading } = usePromise.usePromise(() => transaction.getBalance());
    const hasInsufficientFunds = React.useMemo(() => {
        if (!total || !balance)
            return false;
        return balance < total;
    }, [balance, total]);
    const missingFunds = React.useMemo(() => {
        if (!total || !balance)
            return undefined;
        return total - balance;
    }, [total, balance]);
    const alert = React.useMemo(() => {
        if (transaction.notEnoughFundsError) {
            return (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'error', copykey: 'dyn_send_transaction.warning_message.not_enough_solana', children: t('dyn_send_transaction.warning_message.not_enough_solana') }));
        }
        else if (transaction.value === undefined) {
            return (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'warning', contentDataTestId: 'warning_content', copykey: 'dyn_send_transaction.warning_message.failed_simulation', children: t('dyn_send_transaction.warning_message.failed_simulation') }));
        }
        if (errorMessage)
            return null;
        if (utils.TransactionGasCannotBeSponsoredError.isInstance(transactionError)) {
            return (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'error', copykey: 'dyn_send_transaction.error_message.gas_not_sponsored', children: t('dyn_send_transaction.error_message.gas_not_sponsored') }));
        }
        if (!isNativeToken &&
            !isGasSponsoredLoading &&
            !isBalanceLoading &&
            missingFunds === undefined &&
            transaction.fee.gas) {
            return (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'warning', contentDataTestId: 'warning_content', copykey: 'dyn_send_transaction.warning_message.insufficient_gas_funds', children: t('dyn_send_transaction.warning_message.insufficient_gas_funds', {
                    amountLeft: transaction.format(transaction.fee.gas, {
                        precision: 6,
                    }),
                    currencySymbol: currency,
                }) }));
        }
        const showInsufficientFundsWarningMessage = hasInsufficientFunds && missingFunds;
        if (!showInsufficientFundsWarningMessage)
            return;
        const amountLeft = transaction.format(missingFunds, { precision: 5 });
        return (jsxRuntime.jsx(Alert.Alert, { icon: 'error', variant: 'warning', contentDataTestId: 'warning_content', copykey: 'dyn_send_transaction.warning_message.insufficient_funds', children: t('dyn_send_transaction.warning_message.insufficient_funds', {
                amountLeft,
                currencySymbol: currency,
            }) }));
    }, [
        transaction,
        errorMessage,
        transactionError,
        hasInsufficientFunds,
        missingFunds,
        t,
        currency,
        transaction.fee.gas,
        isNativeToken,
        isLoading,
    ]);
    return (jsxRuntime.jsxs(TransactionConfirmationPageLayout.TransactionConfirmationPageLayout, { onClickBack: onClickBack, onClickClose: onClickClose, copykey: copykey, title: title, appOrigin: appOrigin, appName: appName, appLogoUrl: appLogoUrl, hideModal: hideModal, isLoading: isLoading, onClickSend: () => send(), onSuccess: (tx) => onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(tx), displayPoweredByDynamicFooter: displayPoweredByDynamicFooter, disableSendButton: isBalanceLoading, error: errorMessage, alert: alert, walletConnector: walletConnector, transaction: transaction, total: total, currentToken: currentToken, transactionValue: transactionValue, isNativeToken: isNativeToken, isGasSponsored: isGasSponsored, isGasSponsoredLoading: isGasSponsoredLoading, walletKey: (primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.key) || '', children: [jsxRuntime.jsxs("div", { className: 'row flex', "data-testid": 'transaction-wallet_used', children: [jsxRuntime.jsx(Typography.Typography, { weight: 'regular', color: 'secondary', className: 'label', children: t('dyn_send_transaction.confirmation.data.wallet_used') }), jsxRuntime.jsxs(Typography.Typography, { weight: 'regular', color: 'primary', className: 'flex gap', children: [jsxRuntime.jsx(walletBook.WalletIcon, { walletKey: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.key, width: 20, height: 20 }), ' ', shortenWalletAddress.shortenWalletAddress(transaction.from, 4, 4)] })] }), isModal && (jsxRuntime.jsxs(jsxRuntime.Fragment, { children: [jsxRuntime.jsxs("div", { className: 'row flex', "data-testid": 'transaction-destination', children: [jsxRuntime.jsx(Typography.Typography, { weight: 'regular', color: 'secondary', className: 'label', children: t('dyn_send_transaction.confirmation.data.destination') }), jsxRuntime.jsxs(Typography.Typography, { weight: 'regular', color: 'primary', className: 'flex gap', children: [jsxRuntime.jsx(walletBook.WalletIcon, { walletKey: primaryWallet === null || primaryWallet === void 0 ? void 0 : primaryWallet.key, width: 20, height: 20 }), ' ', shortenWalletAddress.shortenWalletAddress(transaction.to, 4, 4)] })] }), jsxRuntime.jsxs("div", { className: 'row flex', "data-testid": 'transaction-amount', children: [jsxRuntime.jsx(Typography.Typography, { weight: 'regular', color: 'secondary', className: 'label', children: t('dyn_send_transaction.confirmation.data.amount') }), jsxRuntime.jsx(Typography.Typography, { weight: 'regular', color: 'primary', className: 'flex gap', children: transaction.value
                                    ? transaction.format(transaction.value, { precision: 6 })
                                    : '' })] })] })), jsxRuntime.jsxs("div", { className: 'row flex', "data-testid": 'transaction-network_used', children: [jsxRuntime.jsx(Typography.Typography, { weight: 'regular', color: 'secondary', className: 'label', children: t('dyn_send_transaction.confirmation.data.network_used') }), jsxRuntime.jsx(Typography.Typography, { weight: 'regular', color: 'primary', children: chainName })] })] }));
};

exports.FEE_REFRESH_INTERVAL = FEE_REFRESH_INTERVAL;
exports.TransactionConfirmationView = TransactionConfirmationView;
