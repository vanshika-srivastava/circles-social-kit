import { MessageTransportWithDefaultOrigin } from '../messageTransport/decorators/applyDefaultMessageOrigin/applyDefaultMessageOrigin';
/**
 * An object that defines request types, and whether they expect a response
 */
export type RequestTypes = Record<string, (...params: any[]) => Promise<any> | void>;
/**
 * Only the request types from T that return promises
 * i.e. those that expect a response
 */
type TypesExpectingResponse<T extends RequestTypes> = {
    [K in keyof T]: ReturnType<T[K]> extends Promise<any> ? K : never;
}[keyof T];
export type RequestChannel<T extends RequestTypes> = {
    /**
     * Listens to incoming requests of this type, and calls the handler when they arrive.
     * If the type of this request expects some response, the handler must return a promise
     * that resolves to this response.
     * @returns an unsubscribe function.
     */
    handle: <K extends keyof T>(requestType: K, handler: T[K]) => VoidFunction;
    /**
     * Triggers handlers for this request type, with the given params.
     * Doesn't care whether this request will have a response or not, so returns void.
     */
    emit: <K extends keyof T>(requestName: K, ...params: Parameters<T[K]>) => void;
    /**
     * Triggers handlers for this request type, with the given params.
     * @returns a promise that resolves/rejects when a handler fulfills this request.
     */
    request: <K extends TypesExpectingResponse<T>>(requestName: K, ...params: Parameters<T[K]>) => ReturnType<T[K]>;
};
/** Given a request event name, returns the event name for its resolve */
export declare const getResolveMessageType: (type: string) => string;
/** Given a request event name, returns the event name for its reject */
export declare const getRejectMessageType: (type: string) => string;
/**
 * Allows handling and submitting requests to and from a webview.
 * Requests are messages that (can) expect some response.
 *
 * Functions similarly to an event emitter, but adds a response feature:
 * - Emitting an event type is the act of making a "request" of a specific type,
 * and it returns a promise that will resolve to the request's response.
 * - Listening to an event type is the act of "handling" requests of a specific type.
 * This handler callback must return a promise if this request type expects responses.
 *
 * Think of it this way:
 * Whenever I emit an event, I am submitting a request.
 * Whoever listens to the event will handle my request.
 * If the request type expects some kind of response, they will
 * return a promise that resolves (or rejects) after my request is fulfilled.
 *
 * This is an abstraction built on top of the MessageTransport interface.
 */
export declare const createRequestChannel: <T extends RequestTypes = never>(messageTransport: MessageTransportWithDefaultOrigin) => RequestChannel<T>;
export {};
