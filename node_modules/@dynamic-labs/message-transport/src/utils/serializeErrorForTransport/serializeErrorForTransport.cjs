'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Serializes an error to a JSON object to be sent by transport.
 * This function checks if the input is an instance of Error to capture
 * standard properties like message, name, and stack. It also attempts to
 * serialize any enumerable properties that are present on error-like objects.
 *
 * @param {unknown} err - The error or error-like object to serialize.
 * @returns {SerializedError} - The serialized error object.
 */
const serializeErrorForTransport = (err) => {
    if (err instanceof Error) {
        return Object.assign({ 
            // @ts-expect-error message is a standard property of Error
            message: err.message, 
            // @ts-expect-error name is a standard property of Error
            name: err.name, stack: err.stack }, err);
    }
    else if (typeof err === 'object' && err !== null) {
        const plainObject = {};
        for (const [key, value] of Object.entries(err)) {
            plainObject[key] = value;
        }
        return plainObject;
    }
    return { message: String(err) };
};

exports.serializeErrorForTransport = serializeErrorForTransport;
