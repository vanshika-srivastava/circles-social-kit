import EventEmitter from 'eventemitter3';
import { MessageTransportWithDefaultOrigin } from '../../messageTransport';
export type MessagesForEventEmitter<T extends Record<string, (...args: any[]) => any>, U extends string> = {
    eventEmitted: <E extends keyof T>(key: U, eventName: E, payload: Parameters<T[E]>) => void;
};
/**
 * Use this function when you want to get an event emitter that will raise events for
 * messages of type MessagesForEventEmitter
 */
export declare function createEventEmitterForMessages<T extends Record<string, (...args: any[]) => any> = never, U extends string = never>(params: {
    messageTransport: MessageTransportWithDefaultOrigin;
    key: U;
}): EventEmitter<T>;
/**
 * Use this function when you want to get an event emitter that will raise events for
 * messages of type MessagesForEventEmitter
 */
export declare function createEventEmitterForMessages<T extends Record<string, (...args: any[]) => any> = never, U extends string = never, E extends EventEmitter<any> = never>(params: {
    messageTransport: MessageTransportWithDefaultOrigin;
    initialEventEmitter: E;
    key: U;
}): E extends EventEmitter<infer V> ? EventEmitter<T & V> : never;
