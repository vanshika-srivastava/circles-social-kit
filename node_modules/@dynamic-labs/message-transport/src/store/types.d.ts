import EventEmitter from 'eventemitter3';
export type StoreKeys = 'auth' | 'sdk' | 'wallets' | 'embeddedWallets' | 'platform' | 'networks';
/**
 * Readonly getters for the store values
 */
export type StoreStateGetters<T extends Record<string, unknown>> = {
    readonly [K in keyof T]: T[K];
};
/**
 * The type of a getter that allows reading and listening to values from a store
 */
export type Store<T extends Record<string, unknown>> = {
    getters: StoreStateGetters<T>;
    eventEmitter: EventEmitter<StoreStateEvents<T>>;
};
/**
 * The type of a setter that allows setting values of all stores connected to the same
 * messageTransport
 */
export type StoreSetter<T extends Record<string, unknown>> = {
    set: (values: Partial<T>) => void;
};
/**
 * Defines how state change messages, to be sent across messageTransport, are named.
 * These messages are not made public. They are only used to communicate state changes across the webview.
 */
export type StoreStateChangeMessage<T extends Record<string, unknown>, K extends Extract<keyof T, string>, U extends string> = `${U}__${K}Changed`;
/**
 * Defines how state change events are named.
 * These events are emitted by the store, and are made public for client consumption.
 *
 * Do not confuse these with StoreStateChangeMessage, which are only for internal communication.
 */
export type StoreStateChangeEvent<T extends Record<string, unknown>, K extends Extract<keyof T, string>> = `${K}Changed`;
/**
 * Generates the event types for a StoreState
 */
export type StoreStateEvents<T extends Record<string, unknown>> = {
    [K in Extract<keyof T, string> as StoreStateChangeEvent<T, K>]: (value: T[K]) => void;
};
/**
 * Generates the event listener methods for a StoreState.
 * The methods still return the original type of the eventemitter3 class.
 * Use StoreEventListeners instead, which hides these return types.
 */
type RawStoreEventListeners<T extends Record<string, unknown>> = Pick<EventEmitter<StoreStateEvents<T>>, 'on' | 'off' | 'once'>;
/**
 * The event listener methods for a StoreState
 */
export type StoreEventListeners<T extends Record<string, unknown>> = {
    [M in keyof RawStoreEventListeners<T>]: (...args: Parameters<RawStoreEventListeners<T>[M]>) => void;
};
export {};
