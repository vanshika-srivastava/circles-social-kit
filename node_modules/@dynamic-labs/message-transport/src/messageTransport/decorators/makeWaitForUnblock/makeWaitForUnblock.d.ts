import { MessageTransport, MessageTransportData } from '../../messageTransport';
export type BypassBlockCallback = (message: MessageTransportData) => boolean;
type MakeWaitForUnblockProps = {
    /** MessageTransport to add this decorator to */
    messageTransport: MessageTransport;
    /** If true is return the message will not be blocked */
    bypassBlockIf?: BypassBlockCallback;
};
/**
 * Decorator that adds the following features to a MessageTransport:
 * 1. Any emit calls will not emit the message yet. These messages will be stored.
 * 2. When the unblock method is called:
 *    1. All stored messages are emitted.
 *    2. Any future emit calls will no longer store the message, and instead
 *      will emit them right away, as normal.
 */
export declare const makeWaitForUnblock: ({ messageTransport, bypassBlockIf, }: MakeWaitForUnblockProps) => {
    unblock: () => void;
    emit: (message: MessageTransportData) => void;
    off: (callback: import("../../messageTransport").MessageTransportCallback) => void;
    on: (callback: import("../../messageTransport").MessageTransportCallback) => void;
};
export {};
