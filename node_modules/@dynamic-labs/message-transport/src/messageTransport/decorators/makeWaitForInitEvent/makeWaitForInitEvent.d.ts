import { MessageTransport, MessageTransportData } from '../../messageTransport';
import { BypassBlockCallback } from '../makeWaitForUnblock';
type MakeWaitForInitEventProps = {
    /** MessageTransport to add this decorator to */
    messageTransport: MessageTransport;
    /** Which message type should trigger the initialization */
    initializeMessageType: string;
    /** If true is returned, the message will not be blocked */
    bypassBlockIf?: BypassBlockCallback;
};
/**
 * Decorator that adds the following features to a MessageTransport:
 * 1. Any emit calls will not emit the message yet. These messages will be stored.
 * 2. When the provided messageTransport receives a message of type initializeMessageType:
 *    1. All stored messages are emitted.
 *    2. Any future emit calls will no longer store the message, and instead
 *      will emit them right away, as normal.
 */
export declare const makeWaitForInitEvent: ({ bypassBlockIf, initializeMessageType, messageTransport, }: MakeWaitForInitEventProps) => {
    unblock: () => void;
    emit: (message: MessageTransportData) => void;
    off: (callback: import("../../messageTransport").MessageTransportCallback) => void;
    on: (callback: import("../../messageTransport").MessageTransportCallback) => void;
};
export {};
