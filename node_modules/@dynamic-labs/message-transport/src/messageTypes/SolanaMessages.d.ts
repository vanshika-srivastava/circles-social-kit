type Commitment = 'processed' | 'confirmed' | 'finalized' | 'recent' | 'single' | 'singleGossip' | 'root' | 'max';
type SendOptions = {
    skipPreflight?: boolean;
    preflightCommitment?: Commitment;
    maxRetries?: number;
    minContextSlot?: number;
};
type EncodedTransaction = {
    type: 'legacy' | 'versioned';
    transaction: string;
};
/**
 * Messages exchanged for solana requests.
 */
export type SolanaMessages = {
    solana_signMessage: (arg: {
        message: string;
        walletId: string;
    }) => Promise<{
        signature: string;
    }>;
    solana_signAndSendTransaction: (arg: {
        walletId: string;
        options?: SendOptions;
        encodedTransaction: EncodedTransaction;
    }) => Promise<{
        signature: string;
    }>;
    solana_signTransaction: (arg: {
        walletId: string;
        encodedTransaction: EncodedTransaction;
    }) => Promise<{
        encodedTransaction: EncodedTransaction;
    }>;
    solana_signAllTransactions: (arg: {
        walletId: string;
        encodedTransactions: EncodedTransaction[];
    }) => Promise<{
        encodedTransactions: EncodedTransaction[];
    }>;
};
export {};
