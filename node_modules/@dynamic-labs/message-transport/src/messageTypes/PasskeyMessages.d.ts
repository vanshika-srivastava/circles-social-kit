type CustomPublicKeyCredentialUserEntity = Omit<PublicKeyCredentialUserEntity, 'id'> & {
    id: string;
};
type CustomPublicKeyCredentialRpEntity = Omit<PublicKeyCredentialRpEntity, 'id'> & {
    id: string;
};
export type PasskeyMessages = {
    createPasskey: (params: {
        publicKey: {
            authenticatorName: string;
            attestation?: AttestationConveyancePreference;
            authenticatorSelection?: AuthenticatorSelectionCriteria;
            challenge?: string;
            pubKeyCredParams: PublicKeyCredentialParameters[];
            rp: CustomPublicKeyCredentialRpEntity;
            timeout?: number;
            user: CustomPublicKeyCredentialUserEntity;
        };
    }) => Promise<{
        attestation: {
            credentialId: string;
            clientDataJson: string;
            attestationObject: string;
            transports: ('AUTHENTICATOR_TRANSPORT_BLE' | 'AUTHENTICATOR_TRANSPORT_INTERNAL' | 'AUTHENTICATOR_TRANSPORT_NFC' | 'AUTHENTICATOR_TRANSPORT_USB' | 'AUTHENTICATOR_TRANSPORT_HYBRID')[];
        };
    }>;
    passkeyStamp: (rdId: string, payload: string) => Promise<{
        stampHeaderName: string;
        stampHeaderValue: string;
    }>;
};
export {};
