'use client'
import { __rest, __awaiter } from '../../_virtual/_tslib.js';
import { toHex, toBytes, createWalletClient, custom } from 'viem';
import { EthWalletConnector, chainsMap } from '@dynamic-labs/ethereum-core';
import { eventListenerHandlers } from '@dynamic-labs/wallet-connector-core';
import { getCoinbaseProvider } from './helpers.js';

class Coinbase extends EthWalletConnector {
    constructor(_a) {
        var { appName, appLogoUrl, evmNetworks, coinbaseWalletPreference } = _a, props = __rest(_a, ["appName", "appLogoUrl", "evmNetworks", "coinbaseWalletPreference"]);
        super(Object.assign({ evmNetworks }, props));
        this.name = 'Coinbase';
        this.overrideKey = 'coinbase';
        this.supportedChains = ['EVM', 'ETH'];
        this.connectedChain = 'EVM';
        this.canConnectViaQrCode = false;
        this.canConnectViaCustodialService = !this.isInstalledOnBrowser();
        this.coinbaseProviderOpts = {
            appLogoUrl: appLogoUrl,
            appName: appName,
            evmNetworks: evmNetworks,
            walletPreference: coinbaseWalletPreference,
        };
    }
    get coinbaseProvider() {
        return getCoinbaseProvider(this.coinbaseProviderOpts);
    }
    getConnectedAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const accounts = yield this.coinbaseProvider.request({
                    method: 'eth_accounts',
                });
                if (accounts[0]) {
                    this.setActiveAccount(accounts[0]);
                }
                return accounts;
            }
            catch (error) {
                return [];
            }
        });
    }
    isInstalledOnBrowser() {
        var _a;
        return Boolean((_a = window === null || window === void 0 ? void 0 : window.coinbaseWalletExtension) === null || _a === void 0 ? void 0 : _a.isCoinbaseWallet);
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            const [address] = yield this.coinbaseProvider.request({
                method: 'eth_requestAccounts',
            });
            this.setActiveAccount(address);
            return address;
        });
    }
    signMessage(messageToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            const [address] = yield this.coinbaseProvider.request({
                method: 'eth_requestAccounts',
            });
            try {
                return yield this.coinbaseProvider.request({
                    method: 'personal_sign',
                    params: [toHex(toBytes(messageToSign)), address.toLowerCase()],
                });
            }
            catch (err) {
                return undefined;
            }
        });
    }
    setupEventListeners() {
        const { handleAccountChange, handleChainChange, handleDisconnect } = eventListenerHandlers(this);
        this.coinbaseProvider.on('accountsChanged', handleAccountChange);
        this.coinbaseProvider.on('chainChanged', handleChainChange);
        this.coinbaseProvider.on('disconnect', handleDisconnect);
        this.teardownEventListeners = () => {
            this.coinbaseProvider.removeListener('accountsChanged', handleAccountChange);
            this.coinbaseProvider.removeListener('chainChanged', handleChainChange);
            this.coinbaseProvider.removeListener('disconnect', handleDisconnect);
        };
    }
    getWalletClient(chainId) {
        return createWalletClient({
            account: this.getActiveAccount(),
            chain: chainId ? chainsMap[chainId] : undefined,
            transport: custom(this.coinbaseProvider),
        });
    }
}

export { Coinbase };
