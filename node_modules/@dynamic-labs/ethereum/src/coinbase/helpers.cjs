'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var walletSdk = require('@coinbase/wallet-sdk');

// storing a reference to the coinbase provider because the provider methods work better when
// they are called on the same instance
let coinbaseProvider;
const baseSepolia = 84532;
const baseMainnet = 8453;
const getCoinbaseProvider = ({ appLogoUrl, appName, evmNetworks, walletPreference, } = {}) => {
    const appChainIds = evmNetworks === null || evmNetworks === void 0 ? void 0 : evmNetworks.map((network) => Number(network.chainId));
    // just brings base sepolia to the front of the list, because that is treated as the default chain
    const hasBaseSepolia = evmNetworks === null || evmNetworks === void 0 ? void 0 : evmNetworks.some((network) => network.chainId === baseSepolia);
    if (hasBaseSepolia) {
        appChainIds === null || appChainIds === void 0 ? void 0 : appChainIds.sort((a, b) => a === baseSepolia ? -1 : b === baseSepolia ? 1 : 0);
    }
    // just brings base mainnet to the front, because that that is treated as the default chain
    const hasBaseMainnet = evmNetworks === null || evmNetworks === void 0 ? void 0 : evmNetworks.some((network) => network.chainId === baseMainnet);
    if (hasBaseMainnet) {
        appChainIds === null || appChainIds === void 0 ? void 0 : appChainIds.sort((a, b) => a === baseMainnet ? -1 : b === baseMainnet ? 1 : 0);
    }
    if (!coinbaseProvider) {
        const coinbaseSdk = new walletSdk.CoinbaseWalletSDK({
            appChainIds,
            appLogoUrl,
            appName,
        });
        coinbaseProvider = coinbaseSdk.makeWeb3Provider({
            options: walletPreference !== null && walletPreference !== void 0 ? walletPreference : 'all',
        });
    }
    return coinbaseProvider;
};

exports.getCoinbaseProvider = getCoinbaseProvider;
