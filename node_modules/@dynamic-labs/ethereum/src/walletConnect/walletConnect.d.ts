import type { SessionTypes } from '@walletconnect/types';
import { WalletClient, Account, Transport, Chain as ViemChain } from 'viem';
import { Chain, GetAddressOpts, DeepLinkVariant, IWalletConnectConnector } from '@dynamic-labs/wallet-connector-core';
import { EvmNetwork } from '@dynamic-labs/types';
import { EthWalletConnector, EthWalletConnectorOpts } from '@dynamic-labs/ethereum-core';
export type WalletConnectOpts = EthWalletConnectorOpts & {
    projectId?: string;
    walletName: string;
    deepLinkPreference?: DeepLinkVariant;
    walletConnectPreferredChains?: `eip155:${number}`[];
};
export declare class WalletConnect extends EthWalletConnector implements IWalletConnectConnector {
    supportedChains: Chain[];
    connectedChain: Chain;
    name: string;
    session: SessionTypes.Struct | undefined;
    isInitialized: boolean;
    initializePromise: Promise<void> | undefined;
    canConnectViaQrCode: boolean;
    isWalletConnect: boolean;
    private static provider;
    private projectId?;
    private deepLinkPreference;
    private preferredChains;
    private _currentChainId;
    private _hasSwitchedNetwork;
    constructor(opts: WalletConnectOpts);
    private getMappedChains;
    private getMappedChainsByPreferredOrder;
    private initConnection;
    private createProvider;
    private getWalletClientFromInitializedProvider;
    private createInitProviderPromise;
    private initProvider;
    private refreshSession;
    init(): Promise<void>;
    get sessionTopicKey(): string;
    get activeAccountKey(): string;
    get swicthedNetworkKey(): string;
    get currentChainKey(): string;
    private set currentChainId(value);
    private get currentChainId();
    private set hasSwitchedNetwork(value);
    private get hasSwitchedNetwork();
    supportsNetworkSwitching(): boolean;
    private sessionEventHandler;
    private sessionDeleteHandler;
    setupEventListeners(): void;
    teardownEventListeners(): void;
    getWalletClient(chainId?: string): WalletClient<Transport, ViemChain, Account> | undefined;
    getAddress(opts?: GetAddressOpts): Promise<string | undefined>;
    /**
     * WalletConnect V2 will fail to send the sign message request if the chainId
     * is not the same as the one in the session. This method will wait for the
     * chainId to change and then retry the sign message request.
     *
     * Otherwise it will just return the result of the sign message request.
     *
     * @param signMessageFn - Function to sign message with provider
     * @param messageToSign - Message to sign
     * @returns
     */
    protected waitForSignMessage(signMessageFn: (messageToSign: string) => Promise<string | undefined>, messageToSign: string): Promise<string | undefined>;
    getDeepLink(): string | undefined;
    signMessage(messageToSign: string): Promise<string | undefined>;
    private clearActiveAccount;
    private clearSession;
    private setWCActiveAccount;
    private setSession;
    endSession(): Promise<void>;
    getNetwork(): Promise<number | undefined>;
    providerSwitchNetwork({ network, }: {
        network: EvmNetwork;
    }): Promise<void>;
    getConnectedAccounts(): Promise<string[]>;
    private isMetaMask;
    getSupportedNetworks(): Promise<string[]>;
}
