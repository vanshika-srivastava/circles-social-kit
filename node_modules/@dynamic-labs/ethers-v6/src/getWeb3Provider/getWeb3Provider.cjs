'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.cjs');
var ethers = require('ethers');
var ethereumCore = require('@dynamic-labs/ethereum-core');

/**
 * Gets the Web3 provider of an ethereum wallet.
 *
 * If the wallet is NOT an Ethereum wallet, this will reject.
 */
const getWeb3Provider = (wallet) => _tslib.__awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    if (!ethereumCore.isEthereumWallet(wallet)) {
        throw new Error(`getWeb3Provider must be called with an Ethereum wallet, but wallet was of chain ${wallet.chain}`);
    }
    const publicClient = yield wallet.getPublicClient();
    const walletClient = yield wallet.getWalletClient();
    if (!publicClient || !walletClient) {
        throw new Error('Wallet is not connected, cannot create ethers provider');
    }
    const { chain } = publicClient;
    const network = {
        chainId: chain === null || chain === void 0 ? void 0 : chain.id,
        ensAddress: (_b = (_a = chain === null || chain === void 0 ? void 0 : chain.contracts) === null || _a === void 0 ? void 0 : _a.ensRegistry) === null || _b === void 0 ? void 0 : _b.address,
        name: chain === null || chain === void 0 ? void 0 : chain.name,
    };
    return new ethers.BrowserProvider(walletClient.transport, network);
});

exports.getWeb3Provider = getWeb3Provider;
