'use client'
import { shallow } from '../shallow/shallow.js';

/**
 * Subscribes to a specific slice of the store state and invokes a callback whenever the slice changes.
 * @template TStore - The type of the store.
 * @template StateSlice - The type of the selected slice of the store state.
 * @param {StoreApi<TStore>} store - The store object.
 * @param {(state: TStore) => StateSlice} selector - A function that selects the desired slice of the store state.
 * @returns {SliceSubscription<StateSlice>} - A function that can be used to subscribe.
 * @example
 * const store = createStore<{ counter: number; }>(() => ({ counter: 0 }));
 * const subscribeToCounter = subscribeWithSelector(
 *  store,
 * (state) => state.counter,
 * );
 * const unsubscribe = subscribeToCounter((counter) => {
 *   console.log('Counter changed:', counter);
 * });
 * // To unsubscribe, call the returned function
 * unsubscribe();
 */
const subscribeWithSelector = (store, selector) => (callback) => {
    let lastSlice = selector(store.getState());
    return store.subscribe((state) => {
        const nextSlice = selector(state);
        if (shallow(lastSlice, nextSlice) === false) {
            lastSlice = nextSlice;
            callback(nextSlice);
        }
    });
};

export { subscribeWithSelector };
