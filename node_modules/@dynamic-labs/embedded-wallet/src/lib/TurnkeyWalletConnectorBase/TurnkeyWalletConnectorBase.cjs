'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var apiKeyStamper = require('@turnkey/api-key-stamper');
var walletConnectorCore = require('@dynamic-labs/wallet-connector-core');
var utils = require('@dynamic-labs/utils');
var base64UrlEncode = require('../utils/base64UrlEncode/base64UrlEncode.cjs');
var generateRandomBuffer = require('../utils/generateRandomBuffer/generateRandomBuffer.cjs');
var convertAttestationTransports = require('../utils/convertAttestationTransports/convertAttestationTransports.cjs');
var logger = require('../utils/logger/logger.cjs');
var TurnkeyAuthenticatorRecoveryHandler = require('../AuthenticatorHandler/TurnkeyAuthenticatorRecoveryHandler.cjs');
var ExportHandler = require('../ExportHandler/ExportHandler.cjs');
var PasskeyService = require('../utils/PasskeyService/PasskeyService.cjs');

class TurnkeyWalletConnectorBase extends walletConnectorCore.WalletConnectorBase {
    constructor(nameAndKey, props) {
        super(props);
        // Public fields
        this.requiresNonDynamicEmailOtp = false;
        this.isEmbeddedWallet = true;
        this.removeSessionKeys = () => _tslib.__awaiter(this, void 0, void 0, function* () {
            TurnkeyWalletConnectorBase.sessionKeys = undefined;
            TurnkeyWalletConnectorBase.apiKeyStamper = undefined;
            ExportHandler.ExportHandler.apiKeyStamper = undefined;
            if (typeof (this === null || this === void 0 ? void 0 : this.removeSessionKeysFunction) === 'function') {
                this.removeSessionKeysFunction();
            }
        });
        if (!props.appName) {
            throw new Error('appName not set');
        }
        this.name = nameAndKey.name;
        this.overrideKey = nameAndKey.key;
        this.appName = props.appName;
        this.__authenticatorMethodHandler = TurnkeyAuthenticatorRecoveryHandler.turnkeyAuthenticatorRecoveryHandler;
        this.__exportHandler = new ExportHandler.ExportHandler();
    }
    getWebAuthnAttestation() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const challenge = generateRandomBuffer.generateRandomBuffer();
            const authenticatorUserId = generateRandomBuffer.generateRandomBuffer();
            const { email, passkeyIdentifier } = this;
            if (!email && !passkeyIdentifier) {
                throw new Error('Email or passkeyIdentifier must be set to register a webauthn credential.');
            }
            const displayName = email || `${this.appName} - ${passkeyIdentifier}`;
            const webAuthnCreateParams = {
                publicKey: {
                    authenticatorSelection: {
                        authenticatorAttachment: undefined,
                        requireResidentKey: false,
                        residentKey: 'preferred',
                        userVerification: 'discouraged',
                    },
                    challenge,
                    pubKeyCredParams: [
                        {
                            alg: -7,
                            type: 'public-key',
                        },
                    ],
                    rp: {
                        id: utils.getTLD(),
                        name: this.appName,
                    },
                    user: {
                        displayName,
                        id: authenticatorUserId,
                        name: email || `${this.appName} - ${passkeyIdentifier}`,
                    },
                },
            };
            let attestation;
            try {
                attestation = yield PasskeyService.PasskeyService.getWebAuthnAttestation(webAuthnCreateParams);
            }
            catch (error) {
                logger.logger.warn(`Unable to register webauthn credential on the current page's TLD ${utils.getTLD()}. Falling back to using hostname. ${utils.PlatformService.getHostname()}`, error);
                // Create the passkey on the hostname instead.
                webAuthnCreateParams.publicKey.rp.id = utils.PlatformService.getHostname();
                attestation = yield PasskeyService.PasskeyService.getWebAuthnAttestation(webAuthnCreateParams);
            }
            return {
                attestation: {
                    attestationObject: attestation.attestationObject,
                    clientDataJson: attestation.clientDataJson,
                    credentialId: attestation.credentialId,
                    transports: convertAttestationTransports.convertAttestationTransports(attestation.transports),
                },
                challenge: base64UrlEncode.base64UrlEncode(challenge),
                displayName,
            };
        });
    }
    getAuthenticatorHandler() {
        return this.__authenticatorMethodHandler;
    }
    getExportHandler() {
        return this.__exportHandler;
    }
    // Public methods
    get email() {
        return this._email;
    }
    setEmail(email) {
        this._email = email;
    }
    get phone() {
        return this._phone;
    }
    setPhone(phone) {
        this._phone = phone;
    }
    get passkeyIdentifier() {
        return this._passkeyIdentifier;
    }
    setPasskeyIdentifier(passkeyIdentifier) {
        this._passkeyIdentifier = passkeyIdentifier;
    }
    clearEmail() {
        this._email = null;
    }
    getAddress() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            var _a;
            return (_a = this.verifiedCredential) === null || _a === void 0 ? void 0 : _a.address;
        });
    }
    getConnectedAccounts() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const verifiedCredentials = this.verifiedCredentials || [];
            const addresses = verifiedCredentials
                .map((vc) => vc === null || vc === void 0 ? void 0 : vc.address)
                .filter((a) => typeof a === 'string');
            return addresses;
        });
    }
    get turnkeyAddress() {
        var _a;
        const { address } = (_a = this.verifiedCredential) !== null && _a !== void 0 ? _a : {};
        return address;
    }
    get walletProperties() {
        const { walletProperties } = this.verifiedCredential || {};
        return walletProperties;
    }
    // Private methods
    set verifiedCredentials(verifiedCredentials) {
        this._verifiedCredentials = verifiedCredentials;
    }
    get verifiedCredentials() {
        return this._verifiedCredentials;
    }
    set verifiedCredential(verifiedCredential) {
        this._verifiedCredential = verifiedCredential;
    }
    get verifiedCredential() {
        return this._verifiedCredential;
    }
    setSessionKeyFetcher(func) {
        this.createOrRestoreSessionFetcherFunction = func;
    }
    setSessionKeyRemoveFunction(func) {
        this.removeSessionKeysFunction = func;
    }
    createOrRestoreSession() {
        return _tslib.__awaiter(this, arguments, void 0, function* ({ ignoreRestore, } = {}) {
            if (!this.isSessionKeyCompatible() ||
                TurnkeyWalletConnectorBase.isLoadingSession) {
                return;
            }
            if (!this.createOrRestoreSessionFetcherFunction) {
                throw new utils.DynamicError('Cannot register session key to init provider');
            }
            const { sessionKeys } = TurnkeyWalletConnectorBase;
            if (sessionKeys === null || sessionKeys === void 0 ? void 0 : sessionKeys.publicKey) {
                const isExpired = new Date() >= new Date(sessionKeys.expirationDate);
                if (!isExpired)
                    return sessionKeys.publicKey;
            }
            try {
                TurnkeyWalletConnectorBase.isLoadingSession = true;
                const sessionKeys = yield this.createOrRestoreSessionFetcherFunction({
                    ignoreRestore,
                });
                TurnkeyWalletConnectorBase.sessionKeys = sessionKeys;
                TurnkeyWalletConnectorBase.apiKeyStamper = new apiKeyStamper.ApiKeyStamper({
                    apiPrivateKey: sessionKeys.privateKey,
                    apiPublicKey: sessionKeys.publicKey,
                });
                ExportHandler.ExportHandler.apiKeyStamper = TurnkeyWalletConnectorBase.apiKeyStamper;
                logger.logger.setMetaData('sessionApiPublicKey', sessionKeys.publicKey);
                return sessionKeys.publicKey;
            }
            catch (error) {
                throw new utils.DynamicError('Failed to create or restore session');
            }
            finally {
                TurnkeyWalletConnectorBase.isLoadingSession = false;
            }
        });
    }
    isSessionKeyCompatible() {
        var _a;
        const walletProperties = (_a = this.verifiedCredential) === null || _a === void 0 ? void 0 : _a.walletProperties;
        const isSessionKeyCompatible = walletProperties === null || walletProperties === void 0 ? void 0 : walletProperties.isSessionKeyCompatible;
        return Boolean(isSessionKeyCompatible);
    }
    isSessionActive() {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            const hasWallet = yield this.getAddress();
            return Boolean(hasWallet &&
                TurnkeyWalletConnectorBase.sessionKeys &&
                TurnkeyWalletConnectorBase.apiKeyStamper);
        });
    }
    get sessionKeys() {
        return TurnkeyWalletConnectorBase.sessionKeys;
    }
    setLoggerMetadata() {
        var _a, _b, _c;
        logger.logger.setMetaData('turnkeySubOrganizationId', (_b = (_a = this._verifiedCredential) === null || _a === void 0 ? void 0 : _a.walletProperties) === null || _b === void 0 ? void 0 : _b.turnkeySubOrganizationId);
        logger.logger.setMetaData('walletId', (_c = this._verifiedCredential) === null || _c === void 0 ? void 0 : _c.id);
        let authMethod = 'Unknown';
        if (this.isSessionKeyCompatible()) {
            authMethod = 'SessionKeys';
        }
        else if (this.__authenticatorMethodHandler.recoveryType === 'passkey') {
            authMethod = 'Passkey';
        }
        else if (this.__authenticatorMethodHandler.recoveryType === 'email') {
            authMethod = 'EmailAuth';
        }
        logger.logger.setMetaData('authMethod', authMethod);
    }
}
TurnkeyWalletConnectorBase.isLoadingSession = false;

exports.TurnkeyWalletConnectorBase = TurnkeyWalletConnectorBase;
