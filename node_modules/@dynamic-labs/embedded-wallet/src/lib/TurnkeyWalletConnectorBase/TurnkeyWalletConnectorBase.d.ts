import { ApiKeyStamper } from '@turnkey/api-key-stamper';
import { TurnkeyWalletProperties } from '@dynamic-labs/sdk-api-core';
import { WalletBookSchema } from '@dynamic-labs/wallet-book';
import { WalletConnectorBase } from '@dynamic-labs/wallet-connector-core';
import type { AuthenticatorRecoveryHandler, IEmailWalletConnector, IPasskeyWalletConnector, ISMSWalletConnector } from '@dynamic-labs/wallet-connector-core';
import { JwtVerifiedCredentialWithSmartWalletRef } from '../utils';
import { TurnkeyWalletConnectorNameAndKey } from '../../types';
import { ExportHandler } from '../ExportHandler';
export type TurnkeyConnectorBaseProps = {
    walletBook: WalletBookSchema;
    appName?: string;
};
export type SessionKeys = {
    publicKey: string;
    privateKey: string;
    expirationDate: string;
};
type ITurnkeyWalletConnector = IEmailWalletConnector & IPasskeyWalletConnector & ISMSWalletConnector;
export declare abstract class TurnkeyWalletConnectorBase extends WalletConnectorBase implements ITurnkeyWalletConnector {
    requiresNonDynamicEmailOtp: boolean;
    name: string;
    isEmbeddedWallet: boolean;
    static isLoadingSession: boolean;
    private appName;
    private _email;
    private _phone;
    private _passkeyIdentifier;
    private _verifiedCredential;
    private _verifiedCredentials;
    private __authenticatorMethodHandler;
    private __exportHandler;
    static sessionKeys: SessionKeys | undefined;
    static apiKeyStamper: ApiKeyStamper | undefined;
    createOrRestoreSessionFetcherFunction: (({ ignoreRestore }: {
        ignoreRestore?: boolean;
    }) => Promise<SessionKeys>) | undefined;
    removeSessionKeysFunction: (() => Promise<void>) | undefined;
    constructor(nameAndKey: TurnkeyWalletConnectorNameAndKey, props: TurnkeyConnectorBaseProps);
    getWebAuthnAttestation(): Promise<{
        attestation: {
            attestationObject: string;
            clientDataJson: string;
            credentialId: string;
            transports: import("@dynamic-labs/sdk-api-core").AuthenticatorTransportProtocol[];
        };
        challenge: string;
        displayName: string;
    }>;
    getAuthenticatorHandler(): AuthenticatorRecoveryHandler;
    getExportHandler(): ExportHandler;
    get email(): string | null | undefined;
    setEmail(email: string | null | undefined): void;
    get phone(): string | null | undefined;
    setPhone(phone: string | null | undefined): void;
    get passkeyIdentifier(): string | null | undefined;
    setPasskeyIdentifier(passkeyIdentifier: string | null | undefined): void;
    clearEmail(): void;
    getAddress(): Promise<string | undefined>;
    getConnectedAccounts(): Promise<string[]>;
    get turnkeyAddress(): string | undefined;
    get walletProperties(): TurnkeyWalletProperties | undefined;
    set verifiedCredentials(verifiedCredentials: JwtVerifiedCredentialWithSmartWalletRef[] | undefined);
    get verifiedCredentials(): JwtVerifiedCredentialWithSmartWalletRef[] | undefined;
    set verifiedCredential(verifiedCredential: JwtVerifiedCredentialWithSmartWalletRef | undefined);
    get verifiedCredential(): JwtVerifiedCredentialWithSmartWalletRef | undefined;
    setSessionKeyFetcher(func: () => Promise<SessionKeys>): void;
    setSessionKeyRemoveFunction(func: () => Promise<void>): void;
    removeSessionKeys: () => Promise<void>;
    createOrRestoreSession({ ignoreRestore, }?: {
        ignoreRestore?: boolean;
    }): Promise<string | undefined>;
    isSessionKeyCompatible(): boolean;
    isSessionActive(): Promise<boolean>;
    get sessionKeys(): SessionKeys | undefined;
    protected setLoggerMetadata(): void;
}
export {};
