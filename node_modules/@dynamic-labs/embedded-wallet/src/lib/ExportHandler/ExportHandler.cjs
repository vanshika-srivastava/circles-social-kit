'use client'
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.cjs');
var iframeStamper = require('@turnkey/iframe-stamper');
var http = require('@turnkey/http');
var utils = require('@dynamic-labs/utils');
var TurnkeyAuthenticatorRecoveryHandler = require('../AuthenticatorHandler/TurnkeyAuthenticatorRecoveryHandler.cjs');
var PasskeyService = require('../utils/PasskeyService/PasskeyService.cjs');
require('../utils/convertAttestationTransports/convertAttestationTransports.cjs');
var logger = require('../utils/logger/logger.cjs');

const turnkeyBaseUrl = 'https://api.turnkey.com';
const turnkeyExportUrl = 'https://export.turnkey.com';
class ExportHandler {
    get publicKey() {
        return this.__publicKey;
    }
    clear() {
        var _a;
        (_a = this.__iframeStamper) === null || _a === void 0 ? void 0 : _a.clear();
        this.__iframeStamper = undefined;
        this.__publicKey = undefined;
        this.__turnkeyClient = undefined;
    }
    initExport(iframeContainer, iframeElementId) {
        return _tslib.__awaiter(this, void 0, void 0, function* () {
            this.__iframeStamper = new iframeStamper.IframeStamper({
                iframeContainer,
                iframeElementId,
                iframeUrl: turnkeyExportUrl,
            });
            yield this.__iframeStamper.init();
            this.__publicKey = this.__iframeStamper.publicKey();
            if (TurnkeyAuthenticatorRecoveryHandler.turnkeyAuthenticatorRecoveryHandler.isSessionActive()) {
                this.__turnkeyClient = TurnkeyAuthenticatorRecoveryHandler.turnkeyAuthenticatorRecoveryHandler.client;
            }
            else {
                let rpId = utils.getTLD();
                if (!rpId) {
                    rpId = utils.PlatformService.getHostname();
                }
                const passkeyStamper = PasskeyService.PasskeyService.createWebauthnStamper({
                    rpId,
                });
                const apiKeyStamper = ExportHandler === null || ExportHandler === void 0 ? void 0 : ExportHandler.apiKeyStamper;
                const stamper = apiKeyStamper !== null && apiKeyStamper !== void 0 ? apiKeyStamper : passkeyStamper;
                this.__turnkeyClient = new http.TurnkeyClient({
                    baseUrl: turnkeyBaseUrl,
                }, stamper);
            }
            return this.__publicKey;
        });
    }
    verifyExportWallet(_a) {
        return _tslib.__awaiter(this, arguments, void 0, function* ({ exportBundle, organizationId, }) {
            if (!this.__iframeStamper) {
                throw new utils.DynamicError('Cannot proceed with your request');
            }
            try {
                return yield this.__iframeStamper.injectWalletExportBundle(exportBundle, organizationId);
            }
            catch (err) {
                logger.logger.error('Error while verifying export wallet', err);
                throw err;
            }
        });
    }
    verifyExportPrivateKey(_a) {
        return _tslib.__awaiter(this, arguments, void 0, function* ({ exportBundle, organizationId, chain, }) {
            if (!this.__iframeStamper) {
                throw new utils.DynamicError('Cannot proceed with your request');
            }
            const keyFormat = chain === 'solana' || chain === 'SOL'
                ? iframeStamper.KeyFormat.Solana
                : iframeStamper.KeyFormat.Hexadecimal;
            try {
                return yield this.__iframeStamper.injectKeyExportBundle(exportBundle, organizationId, keyFormat);
            }
            catch (err) {
                logger.logger.error('Error while verifying export private key', err);
                throw err;
            }
        });
    }
    exportPrivateKey(_a) {
        return _tslib.__awaiter(this, arguments, void 0, function* ({ privateKeyId, organizationId, }) {
            const apiKeyStamper = ExportHandler === null || ExportHandler === void 0 ? void 0 : ExportHandler.apiKeyStamper;
            if (apiKeyStamper) {
                this.__turnkeyClient = new http.TurnkeyClient({
                    baseUrl: turnkeyBaseUrl,
                }, apiKeyStamper);
            }
            if (!this.__iframeStamper ||
                !this.__publicKey ||
                !this.__turnkeyClient ||
                !privateKeyId) {
                throw new utils.DynamicError('Cannot proceed with your request');
            }
            try {
                const newActivity = yield this.__turnkeyClient.exportPrivateKey({
                    organizationId,
                    parameters: { privateKeyId, targetPublicKey: this.__publicKey },
                    timestampMs: String(Date.now()),
                    type: 'ACTIVITY_TYPE_EXPORT_PRIVATE_KEY',
                });
                return newActivity.activity;
            }
            catch (err) {
                logger.logger.error('[TK] Error while completing export private key process', err);
                throw err;
            }
        });
    }
    exportWallet(_a) {
        return _tslib.__awaiter(this, arguments, void 0, function* ({ walletId, organizationId, address, }) {
            const apiKeyStamper = ExportHandler === null || ExportHandler === void 0 ? void 0 : ExportHandler.apiKeyStamper;
            if (apiKeyStamper) {
                this.__turnkeyClient = new http.TurnkeyClient({
                    baseUrl: turnkeyBaseUrl,
                }, apiKeyStamper);
            }
            if (!this.__iframeStamper ||
                !this.__publicKey ||
                !this.__turnkeyClient ||
                !walletId) {
                throw new utils.DynamicError('Cannot proceed with your request');
            }
            try {
                if (address) {
                    const newActivity = yield this.__turnkeyClient.exportWalletAccount({
                        organizationId,
                        parameters: { address, targetPublicKey: this.__publicKey },
                        timestampMs: String(Date.now()),
                        type: 'ACTIVITY_TYPE_EXPORT_WALLET_ACCOUNT',
                    });
                    return newActivity.activity;
                }
                const newActivity = yield this.__turnkeyClient.exportWallet({
                    organizationId,
                    parameters: { targetPublicKey: this.__publicKey, walletId },
                    timestampMs: String(Date.now()),
                    type: 'ACTIVITY_TYPE_EXPORT_WALLET',
                });
                return newActivity.activity;
            }
            catch (err) {
                logger.logger.error('[TK] Error while completing export wallet process', err);
                throw err;
            }
        });
    }
}

exports.ExportHandler = ExportHandler;
