import { PagedQueryParams } from './pagedQueryParams';
import { PagedQueryResult } from './pagedQueryResult';
import { EventRow } from './eventRow';
import { CirclesRpc } from '../circlesRpc';
export declare class CalculatedColumn {
    readonly name: string;
    readonly generator: (row: any) => Promise<any>;
    constructor(name: string, generator: (row: any) => Promise<any>);
}
/**
 * A class for querying Circles RPC nodes with pagination.
 * The class maintains the state of the current page and provides methods for querying the next pages.
 *
 * Usage:
 * 1. Create a new instance of CirclesQuery with the CirclesRpc instance and the query parameters.
 * 2. Call queryNextPage() to get the next page of results.
 * 3. Access the results and cursors from the currentPage property.
 * 4. Repeat step 2 until there are no more results.
 *
 * @typeParam TRow The type of the rows returned by the query.
 */
export declare class CirclesQuery<TRow extends EventRow> {
    private readonly params;
    private readonly rpc;
    /**
     * The current page of the query (or undefined).
     */
    get currentPage(): PagedQueryResult<TRow> | undefined;
    private _currentPage?;
    private _calculatedColumns;
    constructor(rpc: CirclesRpc, params: PagedQueryParams, calculatedColumns?: CalculatedColumn[]);
    /**
     * Builds the order by clause for a paged query.
     * Always orders by blockNumber, transactionIndex, and logIndex.
     * If the table is TransferBatch, also orders by batchIndex.
     * @param params The query parameters.
     * @private
     */
    private buildOrderBy;
    /**
     * Builds the cursor filter for a paged query.
     * Depending on the sort order, the cursor filter will be either greater than or less than the existing cursor.
     * @param params The query parameters.
     * @param cursor The cursor to use or undefined to start from the beginning/end depending on the sort order.
     * @private
     */
    private buildCursorFilter;
    /**
     * Combines two filters into a single filter.
     * The filters are always combined with an 'And' conjunction.
     * @param filter1 The first filter or undefined.
     * @param filter2 The second filter or undefined.
     * @returns The combined filter or an empty array if both filters are undefined or empty.
     * @private
     */
    private combineFilters;
    /**
     * Sends a `circles_query` call to a Circles Rpc node and returns the result as an array of objects.
     * @param method The method to call.
     * @param param The request parameters.
     * @private
     */
    private request;
    /**
     * Converts the rows from a Circles RPC response to an array of objects.
     * @param jsonResponse The JSON-RPC response.
     * @private
     */
    private rowsToObjects;
    /**
     * Converts a row from a query result to a cursor.
     * The cursor is an object with the blockNumber, transactionIndex, logIndex, and optional batchIndex properties.
     * @param resultElement The row from the query result.
     * @private
     */
    private rowToCursor;
    /**
     * Builds a cursor from the first or last row of a query result.
     * If the result is empty, returns null.
     * @param result The query result.
     * @private
     */
    private getFirstAndLastCursor;
    /**
     * Queries the next page of a paged query.
     * @returns True if the query returned rows, false if there are no more results.
     */
    queryNextPage(): Promise<boolean>;
    /**
     * Queries a single row from the Circles RPC node.
     */
    getSingleRow(): Promise<TRow | undefined>;
}
//# sourceMappingURL=circlesQuery.d.ts.map