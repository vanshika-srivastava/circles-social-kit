{"version":3,"file":"index.js","sources":["../src/pagedQuery/circlesQuery.ts","../src/observable.ts","../src/events/parser.ts","../src/circlesData.ts","../src/circlesRpc.ts"],"sourcesContent":["import { PagedQueryParams } from './pagedQueryParams';\nimport { Cursor } from './cursor';\nimport { CirclesQueryParams } from '../rpcSchema/circlesQueryParams';\nimport { JsonRpcResponse } from '../rpcSchema/jsonRpcResponse';\nimport { Filter } from '../rpcSchema/filter';\nimport { Order } from '../rpcSchema/order';\nimport { PagedQueryResult } from './pagedQueryResult';\nimport { EventRow } from './eventRow';\nimport { CirclesRpc } from '../circlesRpc';\nimport { CirclesQueryRpcResult } from '../circlesQueryRpcResult';\n\nexport class CalculatedColumn {\n  constructor(public readonly name: string\n    , public readonly generator: (row: any) => Promise<any>) {\n  }\n}\n\n/**\n * A class for querying Circles RPC nodes with pagination.\n * The class maintains the state of the current page and provides methods for querying the next pages.\n *\n * Usage:\n * 1. Create a new instance of CirclesQuery with the CirclesRpc instance and the query parameters.\n * 2. Call queryNextPage() to get the next page of results.\n * 3. Access the results and cursors from the currentPage property.\n * 4. Repeat step 2 until there are no more results.\n *\n * @typeParam TRow The type of the rows returned by the query.\n */\nexport class CirclesQuery<TRow extends EventRow> {\n  private readonly params: PagedQueryParams;\n  private readonly rpc: CirclesRpc;\n\n  /**\n   * The current page of the query (or undefined).\n   */\n  get currentPage(): PagedQueryResult<TRow> | undefined {\n    return this._currentPage;\n  }\n\n  private _currentPage?: PagedQueryResult<TRow>;\n\n  private _calculatedColumns: {\n    [name: string]: CalculatedColumn\n  } = {};\n\n  constructor(rpc: CirclesRpc, params: PagedQueryParams, calculatedColumns?: CalculatedColumn[]) {\n    this.params = params;\n    this.rpc = rpc;\n\n    if (!calculatedColumns) {\n      return;\n    }\n\n    calculatedColumns.forEach(column => {\n      this._calculatedColumns[column.name] = column;\n    });\n  }\n\n  /**\n   * Builds the order by clause for a paged query.\n   * Always orders by blockNumber, transactionIndex, and logIndex.\n   * If the table is TransferBatch, also orders by batchIndex.\n   * @param params The query parameters.\n   * @private\n   */\n  private buildOrderBy(params: PagedQueryParams) {\n    const order: Order[] = [{\n      Column: 'blockNumber',\n      SortOrder: params.sortOrder\n    }, {\n      Column: 'transactionIndex',\n      SortOrder: params.sortOrder\n    }, {\n      Column: 'logIndex',\n      SortOrder: params.sortOrder\n    }];\n\n    if (params.table === 'TransferBatch') {\n      // TODO: Find a better way to handle this.\n      order.push({\n        Column: 'batchIndex',\n        SortOrder: params.sortOrder\n      });\n    }\n\n    return order;\n  }\n\n  /**\n   * Builds the cursor filter for a paged query.\n   * Depending on the sort order, the cursor filter will be either greater than or less than the existing cursor.\n   * @param params The query parameters.\n   * @param cursor The cursor to use or undefined to start from the beginning/end depending on the sort order.\n   * @private\n   */\n  private buildCursorFilter(params: PagedQueryParams, cursor?: Cursor) {\n    if (!cursor) {\n      return undefined;\n    }\n\n    const sortOrder = params.sortOrder === 'ASC' ? 'GreaterThan' : 'LessThan';\n\n    // Add primary filter for blockNumber\n    const blockNumberFilter: Filter = {\n      Type: 'FilterPredicate',\n      FilterType: sortOrder,\n      Column: 'blockNumber',\n      Value: cursor.blockNumber\n    };\n\n    // Create compound filter for transactionIndex, logIndex, and batchIndex\n    const subFilters: Filter[] = [];\n\n    // Filter for transactionIndex if blockNumber is equal\n    subFilters.push({\n      Type: 'Conjunction',\n      ConjunctionType: 'And',\n      Predicates: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'blockNumber',\n          Value: cursor.blockNumber\n        },\n        {\n          Type: 'FilterPredicate',\n          FilterType: sortOrder,\n          Column: 'transactionIndex',\n          Value: cursor.transactionIndex\n        }\n      ]\n    });\n\n    // Filter for logIndex if blockNumber and transactionIndex are equal\n    subFilters.push({\n      Type: 'Conjunction',\n      ConjunctionType: 'And',\n      Predicates: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'blockNumber',\n          Value: cursor.blockNumber\n        },\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'transactionIndex',\n          Value: cursor.transactionIndex\n        },\n        {\n          Type: 'FilterPredicate',\n          FilterType: sortOrder,\n          Column: 'logIndex',\n          Value: cursor.logIndex\n        }\n      ]\n    });\n\n    // Filter for batchIndex if applicable and all previous columns are equal\n    if (params.table === 'TransferBatch') {\n      subFilters.push({\n        Type: 'Conjunction',\n        ConjunctionType: 'And',\n        Predicates: [\n          {\n            Type: 'FilterPredicate',\n            FilterType: 'Equals',\n            Column: 'blockNumber',\n            Value: cursor.blockNumber\n          },\n          {\n            Type: 'FilterPredicate',\n            FilterType: 'Equals',\n            Column: 'transactionIndex',\n            Value: cursor.transactionIndex\n          },\n          {\n            Type: 'FilterPredicate',\n            FilterType: 'Equals',\n            Column: 'logIndex',\n            Value: cursor.logIndex\n          },\n          {\n            Type: 'FilterPredicate',\n            FilterType: sortOrder,\n            Column: 'batchIndex',\n            Value: cursor.batchIndex\n          }\n        ]\n      });\n    }\n\n    // Combine the primary and compound filters into a single filter\n    const combinedFilter: Filter = {\n      Type: 'Conjunction',\n      ConjunctionType: 'Or',\n      Predicates: [\n        blockNumberFilter,\n        ...subFilters\n      ]\n    };\n\n    return [combinedFilter];\n  }\n\n\n  /**\n   * Combines two filters into a single filter.\n   * The filters are always combined with an 'And' conjunction.\n   * @param filter1 The first filter or undefined.\n   * @param filter2 The second filter or undefined.\n   * @returns The combined filter or an empty array if both filters are undefined or empty.\n   * @private\n   */\n  private combineFilters(filter1?: Filter[], filter2?: Filter[]): Filter[] {\n    if (!filter1 && !filter2) {\n      return [];\n    }\n\n    if (!filter1) {\n      return filter2 ?? [];\n    }\n\n    if (!filter2) {\n      return filter1;\n    }\n\n    return [<Filter>{\n      Type: 'Conjunction',\n      ConjunctionType: 'And',\n      Predicates: [\n        ...filter1,\n        ...filter2\n      ]\n    }];\n  }\n\n  /**\n   * Sends a `circles_query` call to a Circles Rpc node and returns the result as an array of objects.\n   * @param method The method to call.\n   * @param param The request parameters.\n   * @private\n   */\n  private async request(method: string, param: CirclesQueryParams): Promise<TRow[]> {\n    const jsonResponse = await this.rpc.call<CirclesQueryRpcResult>(method, [param]);\n    return await this.rowsToObjects(jsonResponse);\n  }\n\n  /**\n   * Converts the rows from a Circles RPC response to an array of objects.\n   * @param jsonResponse The JSON-RPC response.\n   * @private\n   */\n  private async rowsToObjects(jsonResponse: JsonRpcResponse<CirclesQueryRpcResult>): Promise<TRow[]> {\n    const { columns, rows } = jsonResponse.result;\n\n    const calculatedColumns = Object.entries(this._calculatedColumns);\n    if (calculatedColumns.length > 0) {\n      calculatedColumns.forEach(col => columns.push(col[0]));\n    }\n\n    const rowObjects = await Promise.all(rows.map(async row => {\n      const rowObj: Record<string, any> = {};\n      row.forEach((value, index) => {\n        rowObj[columns[index]] = value;\n      });\n\n      for (const [name, column] of calculatedColumns) {\n        rowObj[name] = await column.generator(rowObj);\n      }\n\n      return rowObj;\n    }));\n\n    return rowObjects as TRow[];\n  }\n\n  /**\n   * Converts a row from a query result to a cursor.\n   * The cursor is an object with the blockNumber, transactionIndex, logIndex, and optional batchIndex properties.\n   * @param resultElement The row from the query result.\n   * @private\n   */\n  private rowToCursor(resultElement: TRow): Cursor {\n    return {\n      blockNumber: resultElement.blockNumber as number,\n      transactionIndex: resultElement.transactionIndex as number,\n      logIndex: resultElement.logIndex as number,\n      batchIndex: !resultElement.batchIndex ? undefined : resultElement.batchIndex as number\n    };\n  }\n\n  /**\n   * Builds a cursor from the first or last row of a query result.\n   * If the result is empty, returns null.\n   * @param result The query result.\n   * @private\n   */\n  private getFirstAndLastCursor(result: TRow[]): {\n    first: Cursor,\n    last: Cursor\n  } | null {\n    if (result.length === 0) {\n      return null;\n    }\n\n    const first = this.rowToCursor(result[0]);\n    const last = this.rowToCursor(result[result.length - 1]);\n\n    return { first, last };\n  }\n\n  /**\n   * Queries the next page of a paged query.\n   * @returns True if the query returned rows, false if there are no more results.\n   */\n  public async queryNextPage(): Promise<boolean> {\n    const orderBy = this.buildOrderBy(this.params);\n    const filter = this.buildCursorFilter(this.params, this._currentPage?.lastCursor);\n    const combinedFilter = this.combineFilters(this.params.filter, filter);\n\n    const queryParams: CirclesQueryParams = {\n      Namespace: this.params.namespace,\n      Table: this.params.table,\n      Columns: this.params.columns,\n      Filter: combinedFilter,\n      Order: orderBy,\n      Limit: this.params.limit\n    };\n\n    const result = await this.request('circles_query', queryParams);\n    const cursors = this.getFirstAndLastCursor(result);\n\n    this._currentPage = {\n      limit: this.params.limit,\n      size: result.length,\n      firstCursor: cursors?.first,\n      lastCursor: cursors?.last,\n      sortOrder: this.params.sortOrder,\n      results: result\n    };\n\n    return result.length > 0;\n  }\n\n  /**\n   * Queries a single row from the Circles RPC node.\n   */\n  public async getSingleRow(): Promise<TRow | undefined> {\n    const orderBy = this.buildOrderBy(this.params);\n    const filter = this.buildCursorFilter(this.params, this._currentPage?.lastCursor);\n    const combinedFilter = this.combineFilters(this.params.filter, filter);\n\n    const queryParams: CirclesQueryParams = {\n      Namespace: this.params.namespace,\n      Table: this.params.table,\n      Columns: this.params.columns,\n      Filter: combinedFilter,\n      Order: orderBy,\n      Limit: 1\n    };\n\n    const result = await this.request('circles_query', queryParams);\n    return result.length > 0 ? result[0] : undefined;\n  }\n}","export type ObservableAndEmitter<TValue> = {\n  property: Observable<TValue>;\n  emit: (value: TValue) => void;\n}\n\nexport class Observable<TEvent> {\n  private readonly _subscribers: ((event: TEvent) => void)[] = [];\n\n  subscribe(subscriber: (value: TEvent) => void): (() => void) {\n    this._subscribers.push(subscriber);\n    return () => {\n      this._subscribers.splice(this._subscribers.indexOf(subscriber), 1);\n    };\n  }\n\n  protected constructor() {\n    this._subscribers = [];\n  }\n\n  protected emit(value: TEvent) {\n    this._subscribers.forEach(sub => sub(value));\n  }\n\n  public static create<T>(): ObservableAndEmitter<T> {\n    const prop = new Observable<T>();\n    return {\n      property: prop,\n      emit: (e) => prop.emit(e)\n    };\n  }\n}","import {CirclesEvent, CirclesEventType} from './events';\n\ntype EventValues = {\n  [key: string]: string;\n};\n\nexport type RcpSubscriptionEvent = {\n  event: string;\n  values: EventValues;\n};\n\ntype RpcSubscriptionMessage = RcpSubscriptionEvent[];\n\nconst hexToBigInt = (hex: string): bigint => BigInt(hex);\nconst hexToNumber = (hex: string): number => parseInt(hex, 16);\nconst hexToUint8Array = (hex: string): Uint8Array => {\n  if (hex.length % 2 !== 0) throw new Error('Invalid hex string');\n  const array = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    array[i / 2] = parseInt(hex.substr(i, 2), 16);\n  }\n  return array;\n};\n\nconst parseEventValues = (event: CirclesEventType, values: EventValues): CirclesEvent => {\n  const baseEvent = {\n    $event: event,\n    blockNumber: hexToNumber(values.blockNumber),\n    timestamp: values.timestamp ? hexToNumber(values.timestamp) : undefined,\n    transactionIndex: hexToNumber(values.transactionIndex),\n    logIndex: hexToNumber(values.logIndex),\n    transactionHash: values.transactionHash\n  };\n\n  switch (event) {\n    case 'CrcV1_HubTransfer':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_HubTransfer\",\n        from: values.from,\n        to: values.to,\n        amount: values.amount ? hexToBigInt(values.amount) : undefined\n      };\n    case 'CrcV1_Signup':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_Signup\",\n        user: values.user,\n        token: values.token\n      };\n    case 'CrcV1_OrganizationSignup':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_OrganizationSignup\",\n        organization: values.organization\n      };\n    case 'CrcV1_Trust':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_Trust\",\n        canSendTo: values.canSendTo,\n        user: values.user,\n        limit: values.limit ? hexToBigInt(values.limit) : undefined\n      };\n    case 'CrcV1_Transfer':\n      return {\n        ...baseEvent,\n        $event: \"CrcV1_Transfer\",\n        tokenAddress: values.tokenAddress,\n        from: values.from,\n        to: values.to,\n        amount: values.amount ? hexToBigInt(values.amount) : undefined\n      };\n    case 'CrcV2_InviteHuman':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_InviteHuman\",\n        inviter: values.inviter,\n        invited: values.invited\n      };\n    case 'CrcV2_PersonalMint':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_PersonalMint\",\n        human: values.human,\n        amount: values.amount ? hexToBigInt(values.amount) : undefined,\n        startPeriod: values.startPeriod ? hexToBigInt(values.startPeriod) : undefined,\n        endPeriod: values.endPeriod ? hexToBigInt(values.endPeriod) : undefined\n      };\n    case 'CrcV2_RegisterGroup':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_RegisterGroup\",\n        group: values.group,\n        mint: values.mint,\n        treasury: values.treasury,\n        name: values.name,\n        symbol: values.symbol\n      };\n    case 'CrcV2_RegisterHuman':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_RegisterHuman\",\n        avatar: values.avatar\n      };\n    case 'CrcV2_RegisterOrganization':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_RegisterOrganization\",\n        organization: values.organization,\n        name: values.name\n      };\n    case 'CrcV2_Stopped':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_Stopped\",\n        avatar: values.avatar\n      };\n    case 'CrcV2_Trust':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_Trust\",\n        truster: values.truster,\n        trustee: values.trustee,\n        expiryTime: values.expiryTime ? hexToBigInt(values.expiryTime) : undefined\n      };\n    case 'CrcV2_TransferSingle':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_TransferSingle\",\n        operator: values.operator,\n        from: values.from,\n        to: values.to,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined\n      };\n    case 'CrcV2_URI':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_URI\",\n        value: values.value,\n        id: values.id ? hexToBigInt(values.id) : undefined\n      };\n    case 'CrcV2_ApprovalForAll':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_ApprovalForAll\",\n        account: values.account,\n        operator: values.operator,\n        approved: values.approved === 'true'\n      };\n    case 'CrcV2_TransferBatch':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_TransferBatch\",\n        batchIndex: hexToNumber(values.batchIndex),\n        operator: values.operator,\n        from: values.from,\n        to: values.to,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined\n      };\n    case 'CrcV2_RegisterShortName':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_RegisterShortName\",\n        avatar: values.avatar,\n        shortName: values.shortName ? hexToBigInt(values.shortName) : undefined,\n        nonce: values.nonce ? hexToBigInt(values.nonce) : undefined\n      };\n    case 'CrcV2_UpdateMetadataDigest':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_UpdateMetadataDigest\",\n        avatar: values.avatar,\n        metadataDigest: values.metadataDigest ? hexToUint8Array(values.metadataDigest) : undefined\n      };\n    case 'CrcV2_CidV0':\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_CidV0\",\n        avatar: values.avatar,\n        cidV0Digest: values.cidV0Digest ? hexToUint8Array(values.cidV0Digest) : undefined\n      };\n    case \"CrcV2_CreateVault\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_CreateVault\",\n        group: values.group,\n        vault: values.vault\n      };\n    case \"CrcV2_StreamCompleted\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_StreamCompleted\",\n        operator: values.operator,\n        from: values.from,\n        to: values.to,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        amount: values.amount ? hexToBigInt(values.amount) : undefined\n      };\n    case \"CrcV2_GroupMintBatch\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupMintBatch\",\n        batchIndex: parseInt(values.batchIndex),\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined,\n        userData: values.userData ? hexToUint8Array(values.userData) : undefined\n      };\n    case \"CrcV2_GroupMintSingle\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupMintSingle\",\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined,\n        userData: values.userData ? hexToUint8Array(values.userData) : undefined,\n      };\n    case \"CrcV2_GroupRedeem\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupRedeem\",\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined,\n        data: values.data ? hexToUint8Array(values.data) : undefined\n      };\n    case \"CrcV2_GroupRedeemCollateralBurn\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupRedeemCollateralBurn\",\n        batchIndex: parseInt(values.batchIndex),\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined\n      };\n    case \"CrcV2_GroupRedeemCollateralReturn\":\n      return {\n        ...baseEvent,\n        $event: \"CrcV2_GroupRedeemCollateralReturn\",\n        batchIndex: parseInt(values.batchIndex),\n        group: values.group,\n        id: values.id ? hexToBigInt(values.id) : undefined,\n        value: values.value ? hexToBigInt(values.value) : undefined\n      };\n    default:\n      throw new Error(`Unknown event type: ${event}`);\n  }\n};\n\nexport const parseRpcSubscriptionMessage = (message: RpcSubscriptionMessage): CirclesEvent[] => {\n  return message.map(result => parseEventValues(<CirclesEventType>result.event, result.values));\n};","import {CirclesQuery} from './pagedQuery/circlesQuery';\nimport {TransactionHistoryRow} from './rows/transactionHistoryRow';\nimport {TrustListRow} from './rows/trustListRow';\nimport {TokenBalanceRow} from './rows/tokenBalanceRow';\nimport {CirclesRpc} from './circlesRpc';\nimport {AvatarRow} from './rows/avatarRow';\nimport {crcToTc, hexStringToUint8Array, uint8ArrayToCidV0} from '@circles-sdk/utils';\nimport {ethers} from 'ethers';\nimport {TrustRelation, TrustRelationRow} from './rows/trustRelationRow';\nimport {CirclesDataInterface, GroupQueryParams} from './circlesDataInterface';\nimport {Observable} from './observable';\nimport {CirclesEvent} from './events/events';\nimport {InvitationRow} from './rows/invitationRow';\nimport {PagedQueryParams} from './pagedQuery/pagedQueryParams';\nimport {Filter} from './rpcSchema/filter';\nimport {GroupMembershipRow} from './rows/groupMembershipRow';\nimport {GroupRow} from './rows/groupRow';\nimport {TokenInfoRow} from './rows/tokenInfoRow';\nimport {parseRpcSubscriptionMessage, RcpSubscriptionEvent} from './events/parser';\n\nexport type TrustEvent = {\n  blockNumber: number;\n  timestamp: number;\n  transactionIndex: number;\n  logIndex: number;\n  transactionHash: string;\n  trustee: string;\n  truster: string;\n  expiryTime: number;\n};\n\nexport class CirclesData implements CirclesDataInterface {\n  readonly rpc: CirclesRpc;\n\n  constructor(rpc: CirclesRpc) {\n    this.rpc = rpc;\n  }\n\n  /**\n   * Gets the total CRC v1 balance of an address.\n   * @param avatar The address to get the CRC balance for.\n   * @param asTimeCircles Whether to return the balance as TimeCircles or not (default: true).\n   */\n  async getTotalBalance(avatar: string, asTimeCircles: boolean = true): Promise<string> {\n    const response = await this.rpc.call<string>('circles_getTotalBalance', [avatar, asTimeCircles]);\n    return response.result;\n  }\n\n  /**\n   * Gets the total CRC v2 balance of an address.\n   * @param avatar The address to get the CRC balance for.\n   * @param asTimeCircles Whether to return the balance as TimeCircles or not (default: true).\n   */\n  async getTotalBalanceV2(avatar: string, asTimeCircles: boolean = true): Promise<string> {\n    const response = await this.rpc.call<string>('circlesV2_getTotalBalance', [avatar, asTimeCircles]);\n    return response.result;\n  }\n\n  /**\n   * Gets the detailed CRC v1 token balances of an address.\n   * @param avatar The address to get the token balances for.\n   * @param asTimeCircles Whether to return the balances as TimeCircles or not (default: true).\n   */\n  async getTokenBalances(avatar: string, asTimeCircles: boolean = true): Promise<TokenBalanceRow[]> {\n    const response = await this.rpc.call<TokenBalanceRow[]>('circles_getTokenBalances', [avatar, asTimeCircles]);\n    return response.result;\n  }\n\n  /**\n   * Gets the detailed CRC v2 token balances of an address.\n   * @param avatar The address to get the token balances for.\n   * @param asTimeCircles Whether to return the balances as TimeCircles or not (default: true).\n   */\n  async getTokenBalancesV2(avatar: string, asTimeCircles: boolean = true): Promise<TokenBalanceRow[]> {\n    const response = await this.rpc.call<TokenBalanceRow[]>('circlesV2_getTokenBalances', [avatar, asTimeCircles]);\n    return response.result;\n  }\n\n  /**\n   * Gets the transaction history of an address.\n   * This contains incoming/outgoing transactions and minting of CRC.\n   * @param avatar The address to get the transaction history for.\n   * @param pageSize The maximum number of transactions per page.\n   */\n  getTransactionHistory(avatar: string, pageSize: number): CirclesQuery<TransactionHistoryRow> {\n    return new CirclesQuery<any>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'Transfers',\n      sortOrder: 'DESC',\n      limit: pageSize,\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'batchIndex',\n        'transactionHash',\n        'version',\n        'operator',\n        'from',\n        'to',\n        'id',\n        'value'\n      ],\n      filter: [\n        {\n          Type: 'Conjunction',\n          ConjunctionType: 'Or',\n          Predicates: [\n            {\n              Type: 'FilterPredicate',\n              FilterType: 'Equals',\n              Column: 'from',\n              Value: avatar.toLowerCase()\n            },\n            {\n              Type: 'FilterPredicate',\n              FilterType: 'Equals',\n              Column: 'to',\n              Value: avatar.toLowerCase()\n            }\n          ]\n        }\n      ]\n    }, [{\n      name: 'timeCircles',\n      generator: async (row: TransactionHistoryRow) => {\n        if (row.version === 1) {\n          const timestamp = new Date(row.timestamp * 1000);\n          return crcToTc(timestamp, BigInt(row.value)).toFixed(2);\n        } else {\n          return parseFloat(ethers.formatEther(row.value)).toFixed(2);\n        }\n      }\n    }, {\n      name: 'tokenAddress',\n      generator: async (row: TransactionHistoryRow) => {\n        // If the id isset, doesn't start with 0x and only consists of digits, it's a BigInt that\n        // needs to be converted to a ethereum address. The BigInt is actually an encoded byte[20]\n        // that represents the address.\n        if (row.id && !row.id.startsWith('0x') && /^\\d+$/.test(row.id)) {\n          // UInt256 to ethereum address (use native BigInt)\n          const hexString = BigInt(row.id).toString(16).padStart(40, '0');\n          return ethers.getAddress('0x' + hexString).toLowerCase();\n        } else if (row.id && row.id.startsWith('0x')) {\n          return row.id.toLowerCase();\n        }\n      }\n    }]);\n  }\n\n  getIncomingTrustEvents(avatar: string, pageSize: number): CirclesQuery<TrustEvent> {\n    return new CirclesQuery<TrustEvent>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'TrustRelations',\n      sortOrder: 'DESC',\n      limit: pageSize,\n      columns: [\n        \"blockNumber\",\n        \"timestamp\",\n        \"transactionIndex\",\n        \"logIndex\",\n        \"transactionHash\",\n        \"trustee\",\n        \"truster\",\n        \"expiryTime\"\n      ],\n      filter: [\n        {\n          Type: 'Conjunction',\n          ConjunctionType: 'And',\n          Predicates: [{\n            Type: 'FilterPredicate',\n            FilterType: 'Equals',\n            Column: 'trustee',\n            Value: avatar.toLowerCase()\n          }, {\n            Type: 'FilterPredicate',\n            FilterType: 'IsNotNull',\n            Column: 'expiryTime',\n            Value: true\n          }]\n        }\n      ]\n    });\n  }\n\n  /**\n   * Gets the current incoming and outgoing trust relations of an address.\n   * Expired or revoked trust relations are not included.\n   * @param avatar The address to get the trust list for.\n   * @param pageSize The maximum number of trust relations per page.\n   */\n  getTrustRelations(avatar: string, pageSize: number): CirclesQuery<TrustListRow> {\n    return new CirclesQuery<any>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'TrustRelations',\n      sortOrder: 'DESC',\n      limit: pageSize,\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'version',\n        'trustee',\n        'truster',\n        'expiryTime',\n        'limit'\n      ],\n      filter: [\n        {\n          Type: 'Conjunction',\n          ConjunctionType: 'Or',\n          Predicates: [\n            {\n              Type: 'FilterPredicate',\n              FilterType: 'Equals',\n              Column: 'trustee',\n              Value: avatar.toLowerCase()\n            },\n            {\n              Type: 'FilterPredicate',\n              FilterType: 'Equals',\n              Column: 'truster',\n              Value: avatar.toLowerCase()\n            }\n          ]\n        }\n      ]\n    });\n  }\n\n  /**\n   * Gets all trust relations of an avatar and groups mutual trust relations together.\n   * @param avatarAddress The address to get the trust relations for.\n   */\n  async getAggregatedTrustRelations(avatarAddress: string): Promise<TrustRelationRow[]> {\n    const pageSize = 1000;\n    const trustsQuery = this.getTrustRelations(avatarAddress, pageSize);\n    const trustListRows: TrustListRow[] = [];\n\n    // Fetch all trust relations\n    while (await trustsQuery.queryNextPage()) {\n      const resultRows = trustsQuery.currentPage?.results ?? [];\n      if (resultRows.length === 0) break;\n      trustListRows.push(...resultRows);\n      if (resultRows.length < pageSize) break;\n    }\n\n    // Group trust list rows by truster and trustee\n    const trustBucket: { [avatar: string]: TrustListRow[] } = {};\n    trustListRows.forEach(row => {\n      if (row.truster !== avatarAddress) {\n        trustBucket[row.truster] = trustBucket[row.truster] || [];\n        trustBucket[row.truster].push(row);\n      }\n      if (row.trustee !== avatarAddress) {\n        trustBucket[row.trustee] = trustBucket[row.trustee] || [];\n        trustBucket[row.trustee].push(row);\n      }\n    });\n\n    // Determine trust relations\n    return Object.entries(trustBucket)\n      .filter(([avatar]) => avatar !== avatarAddress)\n      .map(([avatar, rows]) => {\n        const maxTimestamp = Math.max(...rows.map(o => o.timestamp));\n        let relation: TrustRelation;\n\n        if (rows.length === 2) {\n          relation = 'mutuallyTrusts';\n        } else if (rows[0].trustee === avatarAddress) {\n          relation = 'trustedBy';\n        } else if (rows[0].truster === avatarAddress) {\n          relation = 'trusts';\n        } else {\n          throw new Error(`Unexpected trust list row. Couldn't determine trust relation.`);\n        }\n\n        return {\n          subjectAvatar: avatarAddress,\n          relation: relation,\n          objectAvatar: avatar,\n          timestamp: maxTimestamp\n        };\n      });\n  }\n\n  /**\n   * Gets basic information about an avatar.\n   * This includes the signup timestamp, circles version, avatar type and token address/id.\n   * @param avatar The address to check.\n   * @returns The avatar info or undefined if the avatar is not found.\n   */\n  async getAvatarInfo(avatar: string): Promise<AvatarRow | undefined> {\n    const avatarInfos = await this.getAvatarInfos([avatar]);\n    return avatarInfos.length > 0 ? avatarInfos[0] : undefined;\n  }\n\n  /**\n   * Gets basic information about multiple avatars.\n   * @param avatars The addresses to check.\n   * @returns An array of avatar info objects.\n   */\n  async getAvatarInfos(avatars: string[]): Promise<AvatarRow[]> {\n    if (avatars.length === 0) {\n      return [];\n    }\n\n    const circlesQuery = new CirclesQuery<AvatarRow>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'Avatars',\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'version',\n        'type',\n        'avatar',\n        'tokenId',\n        'cidV0Digest'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'In',\n          Column: 'avatar',\n          Value: avatars.map(a => a.toLowerCase())\n        }\n      ],\n      sortOrder: 'ASC',\n      limit: 1000\n    }, [{\n      name: 'cidV0',\n      generator: async (row: AvatarRow) => {\n        try {\n          if (!row.cidV0Digest) {\n            return undefined;\n          }\n\n          const dataFromHexString = hexStringToUint8Array(row.cidV0Digest.substring(2));\n          return uint8ArrayToCidV0(dataFromHexString);\n        } catch (error) {\n          console.error('Failed to convert cidV0Digest to CIDv0 string:', error);\n          return undefined;\n        }\n      }\n    }]);\n\n    const results: AvatarRow[] = [];\n\n    while (await circlesQuery.queryNextPage()) {\n      const resultRows = circlesQuery.currentPage?.results ?? [];\n      if (resultRows.length === 0) break;\n      results.push(...resultRows);\n      if (resultRows.length < 1000) break;\n    }\n\n    const avatarMap: { [key: string]: AvatarRow } = {};\n\n    results.forEach(avatarRow => {\n      if (!avatarMap[avatarRow.avatar]) {\n        avatarMap[avatarRow.avatar] = avatarRow;\n      }\n\n      if (avatarRow.version === 1) {\n        avatarMap[avatarRow.avatar].hasV1 = true;\n        avatarMap[avatarRow.avatar].v1Token = avatarRow.tokenId;\n      } else {\n        avatarMap[avatarRow.avatar] = {\n          ...avatarMap[avatarRow.avatar],\n          ...avatarRow\n        };\n      }\n    });\n\n    return avatars.map(avatar => avatarMap[avatar.toLowerCase()]).filter(row => row !== undefined);\n  }\n\n  /**\n   * Gets the token info for a given token address.\n   * @param address The address of the token.\n   * @returns The token info or undefined if the token is not found.\n   */\n  async getTokenInfo(address: string): Promise<TokenInfoRow | undefined> {\n    const circlesQuery = new CirclesQuery<TokenInfoRow>(this.rpc, {\n      namespace: 'V_Crc',\n      table: 'Avatars',\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'version',\n        'type',\n        'avatar',\n        'tokenId'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'tokenId',\n          Value: address.toLowerCase()\n        }\n      ],\n      sortOrder: 'ASC',\n      limit: 1\n    });\n\n    return await circlesQuery.getSingleRow();\n  }\n\n  /**\n   * Subscribes to Circles events.\n   * @param avatar The avatar to subscribe to. If not provided, all events are subscribed to.\n   */\n  subscribeToEvents(avatar?: string): Promise<Observable<CirclesEvent>> {\n    return this.rpc.subscribe(avatar);\n  }\n\n  /**\n   * Gets the events for a given avatar in a block range.\n   * @param avatar The avatar to get the events for.\n   * @param fromBlock The block number to start from.\n   * @param toBlock The block number to end at. If not provided, the latest block is used.\n   */\n  async getEvents(avatar: string, fromBlock: number, toBlock?: number): Promise<CirclesEvent[]> {\n    const response = await this.rpc.call<RcpSubscriptionEvent[]>(\n      'circles_events',\n      [avatar, fromBlock, toBlock]\n    );\n    return parseRpcSubscriptionMessage(response.result);\n  }\n\n  /**\n   * Gets the invitations sent by an avatar.\n   * @param avatar The avatar to get the invitations for.\n   * @param pageSize The maximum number of invitations per page.\n   * @returns A CirclesQuery object to fetch the invitations.\n   */\n  getInvitations(avatar: string, pageSize: number): CirclesQuery<InvitationRow> {\n    return new CirclesQuery<InvitationRow>(this.rpc, {\n      namespace: 'CrcV2',\n      table: 'InviteHuman',\n      columns: [\n        'blockNumber',\n        'transactionIndex',\n        'logIndex',\n        'timestamp',\n        'transactionHash',\n        'inviter',\n        'invited'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'inviter',\n          Value: avatar.toLowerCase()\n        }\n      ],\n      sortOrder: 'DESC',\n      limit: pageSize\n    });\n  }\n\n  /**\n   * Gets the avatar that invited the given avatar.\n   * @param avatar The address of the invited avatar.\n   * @returns The address of the inviting avatar or undefined if not found.\n   */\n  async getInvitedBy(avatar: string): Promise<string | undefined> {\n    const circlesQuery = new CirclesQuery<InvitationRow>(this.rpc, {\n      namespace: 'CrcV2',\n      table: 'InviteHuman',\n      columns: [\n        'inviter'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'invited',\n          Value: avatar.toLowerCase()\n        }\n      ],\n      sortOrder: 'DESC',\n      limit: 1\n    });\n\n    const page = await circlesQuery.queryNextPage();\n    if (!page) {\n      return undefined;\n    }\n\n    return circlesQuery.currentPage?.results[0].inviter;\n  }\n\n  /**\n   * Gets the list of groups.\n   * @param pageSize The maximum number of groups per page.\n   * @param params The query parameters to filter the groups.\n   */\n  findGroups(pageSize: number, params?: GroupQueryParams): CirclesQuery<GroupRow> {\n    const queryDefintion: PagedQueryParams = {\n      namespace: 'V_CrcV2',\n      table: 'Groups',\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'group',\n        'mint',\n        'treasury',\n        'name',\n        'symbol',\n        'cidV0Digest',\n      ],\n      sortOrder: 'DESC',\n      limit: pageSize\n    };\n\n    if (!params) {\n      return new CirclesQuery<GroupRow>(this.rpc, queryDefintion);\n    }\n\n    let filter: Filter[] = [];\n\n    if (params.nameStartsWith) {\n      filter.push({\n        Type: 'FilterPredicate',\n        FilterType: 'Like',\n        Column: 'name',\n        Value: params.symbolStartsWith + '%'\n      });\n    }\n\n    if (params.symbolStartsWith) {\n      filter.push({\n        Type: 'FilterPredicate',\n        FilterType: 'Like',\n        Column: 'symbol',\n        Value: params.symbolStartsWith + '%'\n      });\n    }\n\n    if (params.groupAddressIn) {\n      filter.push({\n        Type: 'FilterPredicate',\n        FilterType: 'In',\n        Column: 'group',\n        Value: params.groupAddressIn\n      });\n    }\n\n    if (filter.length > 1) {\n      filter = [{\n        Type: 'Conjunction',\n        Predicates: filter,\n        ConjunctionType: 'And'\n      }];\n    }\n\n    queryDefintion.filter = filter;\n\n    return new CirclesQuery<any>(this.rpc, queryDefintion);\n  }\n\n  /**\n   * Gets the group memberships of an avatar.\n   * @param avatar The avatar to get the group memberships for.\n   * @param pageSize The maximum number of group memberships per page.\n   */\n  getGroupMemberships(avatar: string, pageSize: number): CirclesQuery<GroupMembershipRow> {\n    return new CirclesQuery<GroupMembershipRow>(this.rpc, {\n      namespace: 'V_CrcV2',\n      table: 'GroupMemberships',\n      columns: [\n        'blockNumber',\n        'timestamp',\n        'transactionIndex',\n        'logIndex',\n        'transactionHash',\n        'group',\n        'member',\n        'expiryTime'\n      ],\n      filter: [\n        {\n          Type: 'FilterPredicate',\n          FilterType: 'Equals',\n          Column: 'member',\n          Value: avatar.toLowerCase()\n        }\n      ],\n      sortOrder: 'DESC',\n      limit: pageSize\n    });\n  }\n}","import { JsonRpcRequest } from './rpcSchema/jsonRpcRequest';\nimport { JsonRpcResponse } from './rpcSchema/jsonRpcResponse';\nimport { Observable } from './observable';\nimport { CirclesEvent } from './events/events';\nimport { parseRpcSubscriptionMessage } from './events/parser';\n\nexport class CirclesRpc {\n  private readonly rpcUrl: string;\n  private idCounter = 0;\n\n  private websocket: WebSocket | null = null;\n  private websocketConnected = false;\n  private pendingResponses: Record<any, any> = {};\n  private subscriptionListeners: {\n    [subscriptionId: string]: ((event: { event: string, values: Record<string, any> }[]) => void)[]\n  } = {};\n\n  constructor(rpcUrl: string) {\n    this.rpcUrl = rpcUrl;\n  }\n\n  public async call<TResult>(method: string, params: any[]) {\n    const requestBody: JsonRpcRequest = {\n      jsonrpc: '2.0',\n      id: this.idCounter++,\n      method: method,\n      params: params\n    };\n\n    const response = await fetch(this.rpcUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    const jsonResponse: JsonRpcResponse<TResult> = await response.json();\n\n    if (!jsonResponse.result) {\n      throw new Error(`RPC Error: ${JSON.stringify(jsonResponse)}`);\n    }\n    return jsonResponse;\n  }\n\n  private connect() {\n    return new Promise<void>((resolve, reject) => {\n      let wsUrl = this.rpcUrl.replace('http', 'ws');\n      if (wsUrl.endsWith('/')) {\n        wsUrl += 'ws';\n      } else {\n        wsUrl += '/ws';\n      }\n      this.websocket = new WebSocket(wsUrl);\n\n      this.websocket.onopen = () => {\n        resolve();\n      };\n\n      this.websocket.onmessage = (event) => {\n        const message = JSON.parse(event.data);\n        const { id, method, params } = message;\n\n        if (id !== undefined && this.pendingResponses[id]) {\n          this.pendingResponses[id].resolve(message);\n          delete this.pendingResponses[id];\n        }\n\n        if (method === 'eth_subscription' && params) {\n          const { subscription, result } = params;\n          if (this.subscriptionListeners[subscription]) {\n            this.subscriptionListeners[subscription].forEach(listener => listener(result));\n          }\n        }\n      };\n      this.websocket.onclose = () => {\n        this.websocketConnected = false;\n      };\n      this.websocket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        reject(error);\n      };\n    });\n  }\n\n  private sendMessage(method: string, params: Record<any, any>, timeout = 5000): Promise<any> {\n    if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN) {\n      return Promise.reject('WebSocket is not connected');\n    }\n    const id = this.idCounter++;\n    const message = { jsonrpc: '2.0', method, params, id };\n    return new Promise((resolve, reject) => {\n      this.pendingResponses[id] = { resolve, reject };\n      this.websocket!.send(JSON.stringify(message));\n\n      setTimeout(() => {\n        if (this.pendingResponses[id]) {\n          this.pendingResponses[id].reject('Request timed out');\n          delete this.pendingResponses[id];\n        }\n      }, timeout);\n    });\n  }\n\n  public async subscribe(address?: string): Promise<Observable<CirclesEvent>> {\n    if (!this.websocketConnected) {\n      await this.connect();\n      this.websocketConnected = true;\n    }\n    const observable = Observable.create<CirclesEvent>();\n    const subscriptionArgs = JSON.stringify(address ? { address } : {});\n    const response = await this.sendMessage('eth_subscribe', ['circles', subscriptionArgs]);\n    const subscriptionId = response.result;\n    if (!this.subscriptionListeners[subscriptionId]) {\n      this.subscriptionListeners[subscriptionId] = [];\n    }\n    this.subscriptionListeners[subscriptionId].push((events) => {\n      parseRpcSubscriptionMessage(events).forEach(event => observable.emit(event));\n    });\n\n    // TODO: Add unsubscribe method to observable\n    return observable.property;\n  }\n}"],"names":[],"mappings":"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"}