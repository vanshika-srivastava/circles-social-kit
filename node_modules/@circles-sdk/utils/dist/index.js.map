{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { BigNumber } from 'bignumber.js';\nimport { ethers, parseEther } from 'ethers';\nimport multihash from 'multihashes';\n\n/**\n * Formats the token balance in time circles.\n * @param tokenBalance The token balance as a BigNumber.\n * @return The formatted token balance as a string.\n */\nfunction formatTimeCircles(tokenBalance: BigNumber): string {\n  const ether = tokenBalance.dividedToIntegerBy(new BigNumber(10).pow(18));\n  const remainder = tokenBalance.mod(new BigNumber(10).pow(18));\n  let remainderString = remainder.toFixed(0).padStart(18, '0').replace(/0+$/, '');\n\n  return remainderString.length > 0\n    ? `${ether.toString()}.${remainderString}`\n    : ether.toString();\n}\n\nconst CirclesInceptionTimestamp = new Date('2020-10-15T00:00:00.000Z').getTime();\nconst OneDayInMilliseconds = new BigNumber(86400).multipliedBy(1000);\nconst OneCirclesYearInDays = new BigNumber(365.25);\nconst OneCirclesYearInMilliseconds = OneCirclesYearInDays.multipliedBy(24).multipliedBy(60).multipliedBy(60).multipliedBy(1000);\n\nfunction getCrcPayoutAt(timestamp: number): number {\n  const daysSinceCirclesInception = new BigNumber(timestamp - CirclesInceptionTimestamp).dividedBy(OneDayInMilliseconds);\n  const circlesYearsSince = new BigNumber(timestamp - CirclesInceptionTimestamp).dividedBy(OneCirclesYearInMilliseconds);\n  const daysInCurrentCirclesYear = daysSinceCirclesInception.mod(OneCirclesYearInDays);\n\n  const initialDailyCrcPayout = new BigNumber(8);\n  let circlesPayoutInCurrentYear = initialDailyCrcPayout;\n  let previousCirclesPerDayValue = initialDailyCrcPayout;\n\n  for (let index = 0; index < circlesYearsSince.toNumber(); index++) {\n    previousCirclesPerDayValue = circlesPayoutInCurrentYear;\n    circlesPayoutInCurrentYear = circlesPayoutInCurrentYear.multipliedBy(1.07);\n  }\n\n  const x = previousCirclesPerDayValue;\n  const y = circlesPayoutInCurrentYear;\n  const a = daysInCurrentCirclesYear.dividedBy(OneCirclesYearInDays);\n\n  return x.multipliedBy(new BigNumber(1).minus(a)).plus(y.multipliedBy(a)).toNumber();\n}\n\n/**\n * Converts a CRC amount to a TC amount.\n * @param timestamp The point in time when the CRC transaction happened.\n * @param amount The CRC value of the transaction (bigint in wei).\n * @return The TC value of the transaction (as float).\n */\nexport function crcToTc(timestamp: Date, amount: bigint): number {\n  const amountFloat = parseFloat(ethers.formatEther(amount ?? '0'));\n  const ts = timestamp.getTime();\n  const payoutAtTimestamp = getCrcPayoutAt(ts);\n  const value = amountFloat / payoutAtTimestamp * 24;\n\n  return value;\n  // return Math.floor(value * 100) / 100;\n}\n\n/**\n * Converts a TC amount to a CRC amount.\n * @param timestamp The point in time when the CRC transaction happened.\n * @param amount The TC value of the transaction.\n */\nexport function tcToCrc(timestamp: Date, amount: number): bigint {\n  const ts = timestamp.getTime();\n  const payoutAtTimestamp = getCrcPayoutAt(ts);\n  return parseEther((amount / 24 * payoutAtTimestamp).toString());\n}\n\n/**\n * Converts a CIDv0 string to a UInt8Array, stripping the hashing algorithm identifier.\n * @param {string} cidV0 - The CIDv0 string (e.g., Qm...).\n * @returns {Uint8Array} - The resulting UInt8Array of the 32-byte hash digest.\n */\nexport function cidV0ToUint8Array(cidV0: string) {\n  // Decode the base58 CIDv0 string to a Multihash\n  const multihashBytes = multihash.fromB58String(cidV0);\n\n  // Verify the multihash algorithm (should be SHA-256)\n  const decodedMultihash = multihash.decode(multihashBytes);\n  if (decodedMultihash.code !== multihash.names['sha2-256']) {\n    throw new Error('Unsupported hash algorithm. Only SHA-256 is supported for CIDv0.');\n  }\n\n  // Extract and return the 32-byte hash digest\n  return decodedMultihash.digest;\n}\n\n/**\n * Converts a 32-byte UInt8Array back to a CIDv0 string by adding the hashing algorithm identifier.\n * @param {Uint8Array} uint8Array - The 32-byte hash digest.\n * @returns {string} - The resulting CIDv0 string (e.g., Qm...).\n */\nexport function uint8ArrayToCidV0(uint8Array: Uint8Array) {\n  if (uint8Array.length !== 32) {\n    throw new Error('Invalid array length. Expected 32 bytes.');\n  }\n\n  // Recreate the Multihash (prefix with SHA-256 code and length)\n  const multihashBytes = multihash.encode(uint8Array, 'sha2-256');\n\n  // Encode the Multihash as a base58 CIDv0 string\n  return multihash.toB58String(multihashBytes);\n}\n\n/**\n * Converts a Uint8Array to a hex string.\n * @param uint8Array - The Uint8Array to convert.\n */\nexport function uint8ArrayToHexString(uint8Array: Uint8Array) {\n  return Array.from(uint8Array).map(byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Converts a hex string to a Uint8Array.\n * @param {string} hexString - The hex string to convert.\n * @returns {Uint8Array} - The resulting Uint8Array.\n */\nexport function hexStringToUint8Array(hexString: string) {\n  const bytes = [];\n  for (let i = 0; i < hexString.length; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16));\n  }\n  return new Uint8Array(bytes);\n}\n\nexport function addressToUInt256(address: string): bigint {\n  // Remove the '0x' prefix if it exists\n  if (address.startsWith('0x')) {\n    address = address.slice(2);\n  }\n\n  // Convert the address to a BigInt\n  return BigInt('0x' + address);\n}\n\nexport function uint256ToAddress(uint256: bigint): string {\n  // Convert the BigInt to a hex string\n  let hexString = uint256.toString(16);\n\n  // Add leading zeros to ensure the string length is 40\n  hexString = hexString.padStart(40, '0');\n\n  // Add the '0x' prefix\n  return '0x' + hexString;\n}"],"names":[],"mappings":"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"}