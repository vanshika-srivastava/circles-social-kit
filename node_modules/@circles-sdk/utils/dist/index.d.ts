/**
 * Converts a CRC amount to a TC amount.
 * @param timestamp The point in time when the CRC transaction happened.
 * @param amount The CRC value of the transaction (bigint in wei).
 * @return The TC value of the transaction (as float).
 */
export declare function crcToTc(timestamp: Date, amount: bigint): number;
/**
 * Converts a TC amount to a CRC amount.
 * @param timestamp The point in time when the CRC transaction happened.
 * @param amount The TC value of the transaction.
 */
export declare function tcToCrc(timestamp: Date, amount: number): bigint;
/**
 * Converts a CIDv0 string to a UInt8Array, stripping the hashing algorithm identifier.
 * @param {string} cidV0 - The CIDv0 string (e.g., Qm...).
 * @returns {Uint8Array} - The resulting UInt8Array of the 32-byte hash digest.
 */
export declare function cidV0ToUint8Array(cidV0: string): Uint8Array;
/**
 * Converts a 32-byte UInt8Array back to a CIDv0 string by adding the hashing algorithm identifier.
 * @param {Uint8Array} uint8Array - The 32-byte hash digest.
 * @returns {string} - The resulting CIDv0 string (e.g., Qm...).
 */
export declare function uint8ArrayToCidV0(uint8Array: Uint8Array): string;
/**
 * Converts a Uint8Array to a hex string.
 * @param uint8Array - The Uint8Array to convert.
 */
export declare function uint8ArrayToHexString(uint8Array: Uint8Array): string;
/**
 * Converts a hex string to a Uint8Array.
 * @param {string} hexString - The hex string to convert.
 * @returns {Uint8Array} - The resulting Uint8Array.
 */
export declare function hexStringToUint8Array(hexString: string): Uint8Array;
export declare function addressToUInt256(address: string): bigint;
export declare function uint256ToAddress(uint256: bigint): string;
//# sourceMappingURL=index.d.ts.map