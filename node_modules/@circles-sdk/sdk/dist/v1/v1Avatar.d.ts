import { ContractTransactionReceipt } from 'ethers';
import { Sdk } from '../sdk';
import { AvatarInterface } from '../AvatarInterface';
import { Token } from '@circles-sdk/abi-v1';
import { AvatarRow, CirclesQuery, TransactionHistoryRow, TrustRelationRow } from '@circles-sdk/data';
export declare class V1Avatar implements AvatarInterface {
    readonly sdk: Sdk;
    get address(): string;
    get v1Token(): Token | undefined;
    private _v1Token?;
    readonly avatarInfo: AvatarRow;
    constructor(sdk: Sdk, avatarInfo: AvatarRow);
    /**
     * Utilizes the pathfinder to find the max. transferable amount from the avatar to `to`.
     * @param to The recipient
     * @param tokenId The token to transfer (address). Leave empty to allow transitive transfers.
     * @returns The max. transferable amount at the time.
     */
    getMaxTransferableAmount(to: string, tokenId?: string): Promise<bigint>;
    /**
     * Utilizes the pathfinder to transitively send `amount` Circles to `to`.
     * @param to The recipient
     * @param amount The amount to send
     */
    transfer(to: string, amount: bigint): Promise<ContractTransactionReceipt>;
    trust(avatar: string): Promise<ContractTransactionReceipt>;
    untrust(avatar: string): Promise<ContractTransactionReceipt>;
    getMintableAmount(): Promise<number>;
    personalMint(): Promise<ContractTransactionReceipt>;
    stop(): Promise<ContractTransactionReceipt>;
    private throwIfNotInitialized;
    getTrustRelations(): Promise<TrustRelationRow[]>;
    getTransactionHistory(pageSize: number): Promise<CirclesQuery<TransactionHistoryRow>>;
    getTotalBalance(): Promise<number>;
    getGasTokenBalance(): Promise<bigint>;
    private throwIfPathfinderIsNotAvailable;
}
//# sourceMappingURL=v1Avatar.d.ts.map