import { ContractTransactionReceipt } from 'ethers';
import { Sdk } from './sdk';
import { AvatarInterfaceV2 } from './AvatarInterface';
import { AvatarRow, CirclesQuery, Observable, TransactionHistoryRow, TrustRelationRow } from '@circles-sdk/data';
import { CirclesEvent } from '@circles-sdk/data';
import { Profile } from "@circles-sdk/profiles";
/**
 * An Avatar represents a user registered at Circles.
 * It provides methods to interact with the Circles protocol, such as minting, transferring and trusting other avatars.
 */
export declare class Avatar implements AvatarInterfaceV2 {
    readonly address: string;
    /**
     * The actual avatar implementation to use behind this facade.
     * @private
     */
    private _avatar;
    private _avatarInfo;
    private _sdk;
    /**
     * After initialization, this property contains the avatar's basic information.
     */
    get avatarInfo(): AvatarRow | undefined;
    private _tokenEventSubscription?;
    /**
     * Creates a new Avatar instance that controls a Circles avatar at the given address.
     * @param sdk The SDK instance to use.
     * @param avatarAddress The address of the avatar to control.
     */
    constructor(sdk: Sdk, avatarAddress: string);
    /**
     * The events observable for this avatar.
     */
    get events(): Observable<CirclesEvent>;
    private _events;
    /**
     * Initializes the avatar.
     */
    initialize: () => Promise<void>;
    private onlyIfInitialized;
    private onlyIfV2;
    /**
     * `human` avatars can mint 24 personal Circles per day. This method returns the amount of Circles that can be minted.
     *
     * Note: v2 avatars can mint at max. 14 days * 24 Circles = 336 Circles.
     *       v1 avatars on the other hand will stop minting after 90 days without minting.
     * @returns The amount of Circles that can be minted.
     */
    getMintableAmount: () => Promise<number>;
    /**
     * Mints the available personal Circles for the avatar. Check `getMintableAmount()` to see how many Circles can be minted.
     * @returns The transaction receipt.
     */
    personalMint: () => Promise<ContractTransactionReceipt>;
    /**
     * Stops the avatar's token. This will prevent any future `personalMint()` calls and is not reversible.
     */
    stop: () => Promise<ContractTransactionReceipt>;
    /**
     * Utilizes the pathfinder to find the maximum Circles amount that can be transferred from this Avatar to the other avatar.
     * @param to The address to transfer the Circles to.
     * @param tokenId The token ID to transfer. If not specified, a transitve transfer is calculated.
     * @returns The maximum Circles amount that can be transferred.
     */
    getMaxTransferableAmount: (to: string, tokenId?: string) => Promise<bigint>;
    /**
     * Transfers Circles to another avatar.
     *
     * Note: The max. transferable amount can be lower than the avatar's balance depending on its trust relations and token holdings.
     *       Use the `getMaxTransferableAmount()` method to calculate the max. transferable amount if you need to know it beforehand.
     * @param to The address of the avatar to transfer to.
     * @param amount The amount to transfer.
     * @param token The token to transfer. Leave empty to allow transitive transfers.
     */
    transfer(to: string, amount: number, token?: string): Promise<ContractTransactionReceipt>;
    transfer(to: string, amount: bigint, token?: string): Promise<ContractTransactionReceipt>;
    /**
     * Trusts another avatar. Trusting an avatar means you're willing to accept Circles that have been issued by this avatar.
     * @param avatar The address of the avatar to trust.
     * @returns The transaction receipt.
     */
    trust: (avatar: string) => Promise<ContractTransactionReceipt>;
    /**
     * Revokes trust from another avatar. This means you will no longer accept Circles issued by this avatar. This will not affect already received Circles.
     * @param avatar The address of the avatar to untrust.
     * @returns The transaction receipt.
     */
    untrust: (avatar: string) => Promise<ContractTransactionReceipt>;
    /**
     * Gets the trust relations of the avatar.
     * @returns An array of trust relations in this form: avatar1 - [trusts|trustedBy|mutuallyTrusts] -> avatar2.
     */
    getTrustRelations: () => Promise<TrustRelationRow[]>;
    /**
     * Gets the Circles transaction history of the avatar. The history contains incoming/outgoing transactions and minting of personal Circles and Group Circles.
     * @param pageSize The maximum number of transactions per page.
     * @returns A query object that can be used to iterate over the transaction history.
     */
    getTransactionHistory: (pageSize: number) => Promise<CirclesQuery<TransactionHistoryRow>>;
    /**
     * Gets the avatar's total Circles balance.
     *
     * Note: This queries either the v1 or the v2 balance of an avatar. Check the `avatarInfo` property to see which version your avatar uses.
     *       Token holdings in v1 can be migrated to v2. Check out `Sdk.migrateAvatar` or `Sdk.migrateAllV1Tokens` for more information.
     */
    getTotalBalance: () => Promise<number>;
    /**
     * Gets the avatar's total balance of chain-native tokens.
     */
    getGasTokenBalance: () => Promise<bigint>;
    /**
     * Use collateral, trusted by the group, to mint new Group Circles.
     * @param group The group which Circles to mint.
     * @param collateral The collateral tokens to use for minting.
     * @param amounts The amounts of the collateral tokens to use.
     * @param data Additional data for the minting operation.
     * @returns The transaction receipt.
     */
    groupMint: (group: string, collateral: string[], amounts: bigint[], data: Uint8Array) => Promise<ContractTransactionReceipt>;
    /**
     * Wraps the specified amount of personal Circles into demurraged ERC20 tokens for use outside the Circles protocol.
     * Note: This kind of token can be incompatible with services since it's demurraged and thus the balance changes over time.
     * @param amount The amount of Circles to wrap.
     */
    wrapDemurrageErc20: (amount: bigint) => Promise<ContractTransactionReceipt>;
    /**
     * Wraps the specified amount of inflation Circles into ERC20 tokens for use outside the Circles protocol.
     * In contrast to demurraged tokens, these token's balance does not change over time.
     * @param amount
     */
    wrapInflationErc20: (amount: bigint) => Promise<ContractTransactionReceipt>;
    /**
     * Invite a human avatar to join Circles.
     * @param avatar The address of any human controlled wallet.
     */
    inviteHuman: (avatar: string) => Promise<ContractTransactionReceipt>;
    /**
     * Updates the avatar's metadata (profile).
     * @param cid The IPFS content identifier of the metadata (Qm....).
     */
    updateMetadata: (cid: string) => Promise<ContractTransactionReceipt>;
    /**
     * Gets the profile that's associated with the avatar or returns `undefined` if no profile is associated.
     * @returns The profile or `undefined`.
     */
    getProfile: () => Promise<Profile | undefined>;
    /**
     * Updates the avatar's profile.
     * @param profile The new profile.
     * @returns The IPFS CID of the updated profile.
     */
    updateProfile: (profile: Profile) => Promise<string>;
}
//# sourceMappingURL=avatar.d.ts.map