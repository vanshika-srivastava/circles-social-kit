{"version":3,"file":"index.js","sources":["../src/v1/v1Avatar.ts","../src/v2/pathfinderV2.ts","../src/v2/v2Avatar.ts","../src/avatar.ts","../src/v1/pathfinder.ts","../src/sdk.ts","../src/errors.ts"],"sourcesContent":["import {\n  ContractTransactionReceipt\n} from 'ethers';\nimport { Sdk } from '../sdk';\nimport { AvatarInterface } from '../AvatarInterface';\nimport { Token, Token__factory } from '@circles-sdk/abi-v1';\nimport {\n  AvatarRow,\n  CirclesQuery,\n  TransactionHistoryRow,\n  TrustRelationRow\n} from '@circles-sdk/data';\nimport { crcToTc } from '@circles-sdk/utils';\n\nexport class V1Avatar implements AvatarInterface {\n  public readonly sdk: Sdk;\n\n  get address(): string {\n    if (!this.avatarInfo) {\n      throw new Error('Avatar is not initialized');\n    }\n    return this.avatarInfo.avatar;\n  }\n\n  // TODO: Empty stream makes no sense\n  // readonly events: Observable<AvatarEvent> = Observable.create<AvatarEvent>().property;\n\n  get v1Token(): Token | undefined {\n    return this._v1Token;\n  }\n\n  private _v1Token?: Token;\n\n  public readonly avatarInfo: AvatarRow;\n\n  constructor(sdk: Sdk, avatarInfo: AvatarRow) {\n    this.sdk = sdk;\n    this.avatarInfo = avatarInfo;\n\n    if (!this.avatarInfo.hasV1) {\n      throw new Error('Avatar is not a v1 avatar');\n    }\n\n    if (this.avatarInfo.v1Token) {\n      this._v1Token = Token__factory.connect(this.avatarInfo.v1Token, this.sdk.contractRunner);\n    }\n  }\n\n  /**\n   * Utilizes the pathfinder to find the max. transferable amount from the avatar to `to`.\n   * @param to The recipient\n   * @param tokenId The token to transfer (address). Leave empty to allow transitive transfers.\n   * @returns The max. transferable amount at the time.\n   */\n  async getMaxTransferableAmount(to: string, tokenId?: string): Promise<bigint> {\n    this.throwIfNotInitialized();\n\n    if (tokenId) {\n      const tokenInfo = await this.sdk.data.getTokenInfo(tokenId);\n      if (!tokenInfo) {\n        throw new Error('Token not found');\n      }\n\n      const tokenBalances = await this.sdk.data.getTokenBalances(this.address);\n      const tokenBalance = tokenBalances.filter(b => b.token === tokenId)[0]?.balance;\n      return BigInt(tokenBalance ?? 0);\n    }\n\n    this.throwIfPathfinderIsNotAvailable();\n\n    const largeAmount = BigInt('999999999999999999999999999999');\n    const transferPath = await this.sdk.v1Pathfinder!.getTransferPath(\n      this.address,\n      to,\n      largeAmount);\n\n    if (!transferPath.isValid) {\n      return Promise.resolve(BigInt(0));\n    }\n\n    return transferPath.maxFlow;\n  }\n\n  /**\n   * Utilizes the pathfinder to transitively send `amount` Circles to `to`.\n   * @param to The recipient\n   * @param amount The amount to send\n   */\n  async transfer(to: string, amount: bigint): Promise<ContractTransactionReceipt> {\n    this.throwIfNotInitialized();\n    this.throwIfPathfinderIsNotAvailable();\n\n    const transferPath = await this.sdk.v1Pathfinder!.getTransferPath(\n      this.address,\n      to,\n      amount);\n\n    if (!transferPath.isValid || transferPath.transferSteps.length === 0) {\n      throw new Error(`Couldn't find a valid path from ${this.address} to ${to} for ${amount}.`);\n    }\n\n    const tokenOwners = transferPath.transferSteps.map(o => o.token_owner);\n    const srcs = transferPath.transferSteps.map(o => o.from);\n    const dests = transferPath.transferSteps.map(o => o.to);\n    const wads = transferPath.transferSteps.map(o => BigInt(o.value));\n\n    const tx = await this.sdk.v1Hub.transferThrough(tokenOwners, srcs, dests, wads);\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error(`The transferThrough call for '${this.address} -> ${to}: ${amount}' didn't yield a receipt.`);\n    }\n\n    return receipt;\n  }\n\n  async trust(avatar: string) {\n    this.throwIfNotInitialized();\n\n    const tx = await this.sdk.v1Hub.trust(avatar, BigInt(100));\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error(`The trust call for '${this.address} -> ${avatar}' didn't yield a receipt.`);\n    }\n    return receipt;\n  }\n\n  async untrust(avatar: string) {\n    this.throwIfNotInitialized();\n\n    const tx = await this.sdk.v1Hub.trust(avatar, BigInt(0));\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error(`The untrust call for '${this.address} -> ${avatar}' didn't yield a receipt.`);\n    }\n    return receipt;\n  }\n\n  async getMintableAmount(): Promise<number> {\n    if (!this.v1Token) {\n      return 0;\n    }\n\n    const availableCrcToMint = await this.v1Token.look();\n    return crcToTc(new Date(), availableCrcToMint);\n  }\n\n  async personalMint(): Promise<ContractTransactionReceipt> {\n    this.throwIfNotInitialized();\n\n    if (!this.v1Token) {\n      throw new Error('Avatar does not have a token to mint');\n    }\n    if (await this.v1Token.stopped()) {\n      throw new Error('Avatar token is stopped');\n    }\n\n    const tx = await this.v1Token.update();\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('The update call didn\\'t yield a receipt');\n    }\n\n    return receipt;\n  }\n\n  async stop(): Promise<ContractTransactionReceipt> {\n    this.throwIfNotInitialized();\n\n    if (!this.v1Token) {\n      throw new Error('Avatar does not have a token to stop');\n    }\n    if (await this.v1Token.stopped()) {\n      throw new Error('Avatar token is already stopped');\n    }\n\n    const tx = await this.v1Token.stop();\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('The stop call didn\\'t yield a receipt');\n    }\n\n    return receipt;\n  }\n\n  private throwIfNotInitialized() {\n    if (this.avatarInfo) {\n      return;\n    }\n    throw new Error('Avatar is either not initialized or is not signed up at Circles.');\n  }\n\n  async getTrustRelations(): Promise<TrustRelationRow[]> {\n    return this.sdk.data.getAggregatedTrustRelations(this.address);\n  }\n\n  async getTransactionHistory(pageSize: number): Promise<CirclesQuery<TransactionHistoryRow>> {\n    const query = this.sdk.data.getTransactionHistory(this.address, pageSize);\n    await query.queryNextPage();\n\n    return query;\n  }\n\n  async getTotalBalance(): Promise<number> {\n    return parseFloat(await this.sdk.data.getTotalBalance(this.address, true));\n  }\n\n  async getGasTokenBalance(): Promise<bigint> {\n    return await this.sdk.contractRunner.provider?.getBalance(this.address) ?? 0n;\n  }\n\n  private throwIfPathfinderIsNotAvailable() {\n    if (!this.sdk.v1Pathfinder) {\n      throw new Error('Pathfinder is not available');\n    }\n  }\n}","export interface TransferPathStep {\n  readonly from: string;\n  readonly to: string;\n  readonly tokenOwner: string;\n  readonly value: string;\n}\n\ntype ApiTransferStep = {\n  from: string;\n  to: string;\n  token_owner: string;\n  value: string;\n};\n\ntype directPathResponse = {\n  data?: {\n    directPath?: {\n      requestedAmount: string;\n      flow: unknown;\n      transfers: TransferPathStep[];\n      isValid?: boolean;\n    };\n  };\n};\n\ntype FlowEdge = {\n  streamSinkId: number;\n  amount: bigint;\n};\n\ntype Stream = {\n  sourceCoordinate: bigint,\n  flowEdgeIds: number[],\n  data: Uint8Array\n}\n\n// Define FlowMatrix type\ntype FlowMatrix = {\n  flowVertices: string[];\n  flowEdges: FlowEdge[];\n  streams: Stream[];\n  packedCoordinates: Uint8Array;\n  sourceCoordinate: number;\n};\n\n\nexport class Pathfinder {\n  pathfinderURL: string;\n\n  constructor(pathfinderURL: string) {\n    this.pathfinderURL = pathfinderURL;\n  }\n\n  async getArgsForPath(from: string, to: string, value: string): Promise<FlowMatrix> {\n    const query = {\n      method: 'compute_transfer',\n      params: { from, to, value: value.toString() }\n    };\n\n    try {\n      const response = await fetch(this.pathfinderURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(query)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Error calling API: ${response.status}`);\n      }\n\n      const parsed = await response.json();\n\n      const transformedResponse: directPathResponse = {\n        data: {\n          directPath: {\n            requestedAmount: value,\n            flow: parsed.result.maxFlowValue,\n            transfers: parsed.result.transferSteps.map((step: ApiTransferStep) => ({\n              from: step.from,\n              to: step.to,\n              tokenOwner: step.token_owner,\n              value: step.value\n            })),\n            isValid: parsed.result.final\n          }\n        }\n      };\n\n      // todo: this is not great, I mangle the PathFinder response; should split these functions\n      if (transformedResponse.data?.directPath) {\n        const flowMatrix = createFlowMatrix(from, to, value, transformedResponse.data.directPath.transfers);\n\n        return flowMatrix;\n      } else {\n        throw new Error('Invalid response from pathfinder');\n      }\n\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      } else {\n        throw new Error('An unknown error occurred');\n      }\n    }\n  };\n}\n\nfunction transformToFlowVertices(transfers: TransferPathStep[], from: string, to: string) {\n  // Normalize and extract all unique addresses from transfers\n  const addressSet = new Set<string>();\n  addressSet.add(from.toLowerCase());\n  addressSet.add(to.toLowerCase());\n  for (const transfer of transfers) {\n    addressSet.add(transfer.from.toLowerCase());\n    addressSet.add(transfer.to.toLowerCase());\n    addressSet.add(transfer.tokenOwner.toLowerCase());\n  }\n\n  // Convert addresses to uint160 and sort\n  const sortedAddresses = Array.from(addressSet).sort((a, b) => {\n    const uint160A = BigInt(a);\n    const uint160B = BigInt(b);\n    return uint160A < uint160B ? -1 : uint160A > uint160B ? 1 : 0;\n  });\n\n  // Create the lookup map\n  const lookUpMap: { [address: string]: number } = {};\n  sortedAddresses.forEach((address, index) => {\n    lookUpMap[address] = index;\n  });\n\n  return {\n    sortedAddresses: sortedAddresses,\n    lookUpMap: lookUpMap\n  };\n}\n\nfunction packCoordinates(coordinates: number[]): Uint8Array {\n  const packedCoordinates = new Uint8Array(coordinates.length * 2);\n  for (let i = 0; i < coordinates.length; i++) {\n    packedCoordinates[2 * i] = coordinates[i] >> 8; // High byte\n    packedCoordinates[2 * i + 1] = coordinates[i] & 0xFF; // Low byte\n  }\n  return packedCoordinates;\n}\n\nfunction createFlowMatrix(from: string, to: string, value: string, transfers: TransferPathStep[]): FlowMatrix {\n  // Transform transfers to flow matrix structure with normalized addresses\n  const { sortedAddresses, lookUpMap } = transformToFlowVertices(transfers, from.toLowerCase(), to.toLowerCase());\n\n  // Initialize flow edges\n  const flowEdges: FlowEdge[] = transfers.map((transfer, index) => ({\n    streamSinkId: transfer.to.toLowerCase() === to.toLowerCase() ? 1 : 0, // Set streamSinkId to 1 if transfer.to matches the given 'to' address\n    amount: BigInt(transfer.value) // Convert string value to bigint\n  }));\n\n  // If no terminal edge was found, set the last edge as terminal by default\n  if (!flowEdges.some(edge => edge.streamSinkId === 1)) {\n    flowEdges[flowEdges.length - 1].streamSinkId = 1;\n  }\n\n  // Check if the sum of terminal amounts matches the provided value\n  const totalTerminalAmount = flowEdges\n    .filter(edge => edge.streamSinkId === 1)\n    .reduce((sum, edge) => sum + edge.amount, BigInt(0));\n\n  if (totalTerminalAmount !== BigInt(value)) {\n    throw new Error(`The total terminal amount (${totalTerminalAmount}) does not match the provided value (${value}).`);\n  }\n\n  // Initialize stream object\n  const flowEdgeIds: number[] = flowEdges\n    .map((edge, index) => (edge.streamSinkId === 1 ? index : -1))\n    .filter(index => index !== -1);\n\n  const stream: Stream = {\n    sourceCoordinate: BigInt(lookUpMap[from.toLowerCase()]),\n    flowEdgeIds: flowEdgeIds,\n    data: new Uint8Array() // Empty bytes for now\n  };\n\n  // Get coordinates for each triple (tokenOwner, sender, receiver) and pack them\n  const coordinates: number[] = [];\n  for (const transfer of transfers) {\n    coordinates.push(lookUpMap[transfer.tokenOwner.toLowerCase()]);\n    coordinates.push(lookUpMap[transfer.from.toLowerCase()]);\n    coordinates.push(lookUpMap[transfer.to.toLowerCase()]);\n  }\n  const packedCoordinates = packCoordinates(coordinates);\n\n  return {\n    flowVertices: sortedAddresses,\n    flowEdges: flowEdges,\n    streams: [stream],\n    packedCoordinates: packedCoordinates,\n    sourceCoordinate: lookUpMap[from.toLowerCase()] // Add sourceCoordinate using the lookup map\n  };\n}\n","import {AvatarInterfaceV2} from '../AvatarInterface';\nimport {\n  ContractTransactionReceipt, ethers,\n  formatEther\n} from 'ethers';\nimport {Sdk} from '../sdk';\nimport {\n  AvatarRow,\n  CirclesQuery,\n  TransactionHistoryRow,\n  TrustRelationRow\n} from '@circles-sdk/data';\nimport {addressToUInt256, cidV0ToUint8Array} from '@circles-sdk/utils';\nimport {Pathfinder} from './pathfinderV2';\nimport {Profile} from \"@circles-sdk/profiles\";\n\nexport type FlowEdge = {\n  streamSinkId: bigint;\n  amount: bigint;\n};\n\nexport type Stream = {\n  sourceCoordinate: bigint,\n  flowEdgeIds: bigint[],\n  data: Uint8Array\n}\n\nexport class V2Avatar implements AvatarInterfaceV2 {\n  public readonly sdk: Sdk;\n\n  get address(): string {\n    return this.avatarInfo.avatar;\n  }\n\n  public readonly avatarInfo: AvatarRow;\n\n  private _cachedProfile: Profile | undefined;\n  private _cachedProfileCid: string | undefined;\n\n  constructor(sdk: Sdk, avatarInfo: AvatarRow) {\n    this.sdk = sdk;\n    this.avatarInfo = avatarInfo;\n\n    if (this.avatarInfo.version != 2) {\n      throw new Error('Avatar is not a v2 avatar');\n    }\n  }\n\n  async updateMetadata(cid: string): Promise<ContractTransactionReceipt> {\n    this.throwIfNameRegistryIsNotAvailable();\n\n    const digest = cidV0ToUint8Array(cid);\n    const tx = await this.sdk.nameRegistry?.updateMetadataDigest(digest);\n    const receipt = await tx?.wait();\n    if (!receipt) {\n      throw new Error('Transfer failed');\n    }\n\n    this.avatarInfo.cidV0 = cid;\n\n    return receipt;\n  }\n\n  async getMaxTransferableAmount(to: string, tokenId?: string): Promise<bigint> {\n    this.throwIfV2IsNotAvailable();\n\n    if (tokenId) {\n      const tokenInfo = await this.sdk.data.getTokenInfo(tokenId);\n      if (!tokenInfo) {\n        throw new Error('Token not found');\n      }\n\n      const tokenBalances = await this.sdk.data.getTokenBalancesV2(this.address);\n      const tokenBalance = tokenBalances.filter(b => b.tokenOwner.toString() === tokenInfo.tokenId.toString());\n      console.log(`Token balance:`, tokenBalance);\n      return !tokenBalance[0].balance ? 0n : ethers.parseEther(tokenBalance[0].balance.toString());\n    }\n\n    const largeAmount = BigInt('999999999999999999999999999999');\n    const transferPath = await this.sdk.v2Pathfinder!.getTransferPath(\n      this.address,\n      to,\n      largeAmount);\n\n    if (!transferPath.isValid) {\n      return Promise.resolve(BigInt(0));\n    }\n\n    return transferPath.maxFlow;\n  }\n\n  async getMintableAmount(): Promise<number> {\n    this.throwIfV2IsNotAvailable();\n    const [a, b, c] = await this.sdk.v2Hub!.calculateIssuance(this.address);\n    return parseFloat(formatEther(a));\n  }\n\n  async getTotalBalance(): Promise<number> {\n    return parseFloat(await this.sdk.data.getTotalBalanceV2(this.address, true));\n  }\n\n  async getGasTokenBalance(): Promise<bigint> {\n    return await this.sdk.contractRunner.provider?.getBalance(this.address) ?? 0n;\n  }\n\n  async getTransactionHistory(pageSize: number): Promise<CirclesQuery<TransactionHistoryRow>> {\n    const query = this.sdk.data.getTransactionHistory(this.address, pageSize);\n    await query.queryNextPage();\n\n    return query;\n  }\n\n  async getTrustRelations(): Promise<TrustRelationRow[]> {\n    return this.sdk.data.getAggregatedTrustRelations(this.address);\n  }\n\n  async personalMint(): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.personalMint();\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Personal mint failed');\n    }\n\n    return receipt;\n  }\n\n  async stop(): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.stop();\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Stop failed');\n    }\n\n    return receipt;\n  }\n\n  private async transitiveTransfer(to: string, amount: bigint): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n\n    const pathfinder = new Pathfinder(this.sdk.circlesConfig.v2PathfinderUrl!);\n    const flowMatrix = await pathfinder.getArgsForPath(this.address, to, amount.toString());\n    const result = await this.sdk.v2Hub?.operateFlowMatrix(flowMatrix.flowVertices, flowMatrix.flowEdges, flowMatrix.streams, flowMatrix.packedCoordinates);\n    const receipt = await result?.wait();\n    if (!receipt) {\n      throw new Error('Transfer failed');\n    }\n    return receipt;\n  }\n\n  private async directTransfer(to: string, amount: bigint, tokenAddress: string): Promise<ContractTransactionReceipt> {\n    const tokenInf = await this.sdk.data.getTokenInfo(tokenAddress);\n    console.log(`Direct transfer - of: ${amount} - tokenId: ${tokenInf?.tokenId} - to: ${to}`);\n    if (!tokenInf) {\n      throw new Error('Token not found');\n    }\n\n    const numericTokenId = addressToUInt256(tokenInf.tokenId);\n    console.log(`numericTokenId: ${numericTokenId}`);\n    const tx = await this.sdk.v2Hub?.safeTransferFrom(\n      this.address,\n      to,\n      numericTokenId,\n      amount,\n      new Uint8Array(0));\n\n    const receipt = await tx?.wait();\n    if (!receipt) {\n      throw new Error('Transfer failed');\n    }\n\n    return receipt;\n  }\n\n  async transfer(to: string, amount: bigint, tokenAddress?: string): Promise<ContractTransactionReceipt> {\n    if (!tokenAddress) {\n      const approvalStatus = await this.sdk.v2Hub!.isApprovedForAll(this.address, this.address);\n      if (!approvalStatus) {\n        const tx = await this.sdk.v2Hub!.setApprovalForAll(this.address, true);\n        const receipt = await tx.wait();\n        if (!receipt) {\n          throw new Error('Approval failed');\n        }\n      }\n      console.log(`Approval by ${this.address} for ${this.address} successful`);\n\n      return this.transitiveTransfer(to, amount);\n    } else {\n      return this.directTransfer(to, amount, tokenAddress);\n    }\n  }\n\n  async trust(avatar: string): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.trust(avatar, BigInt('79228162514264337593543950335'));\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Trust failed');\n    }\n\n    return receipt;\n  }\n\n  async untrust(avatar: string): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.trust(avatar, BigInt('0'));\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Untrust failed');\n    }\n\n    return receipt;\n  }\n\n  async groupMint(group: string, collateral: string[], amounts: bigint[], data: Uint8Array): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n    const tx = await this.sdk.v2Hub!.groupMint(group, collateral, amounts, data);\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Group mint failed');\n    }\n\n    return receipt;\n  }\n\n  async getProfile(): Promise<Profile | undefined> {\n    const profileCid = this.avatarInfo?.cidV0;\n    if (this._cachedProfile && this._cachedProfileCid === profileCid) {\n      return this._cachedProfile;\n    }\n\n    if (profileCid) {\n      try {\n        const profileData = await this.sdk?.profiles?.get(profileCid);\n        if (profileData) {\n          this._cachedProfile = profileData;\n          this._cachedProfileCid = profileCid;\n\n          return this._cachedProfile;\n        }\n      } catch (e) {\n        console.warn(`Couldn't load profile for CID ${profileCid}`, e);\n      }\n    }\n\n    return undefined;\n  }\n\n  async updateProfile(profile: Profile): Promise<string> {\n    const result = await this.sdk?.profiles?.create(profile);\n    if (!result) {\n      throw new Error('Failed to update profile. The profile service did not return a CID.');\n    }\n\n    const updateCidResult = await this.updateMetadata(result);\n    if (!updateCidResult) {\n      throw new Error('Failed to update profile. The CID was not updated.');\n    }\n\n    this.avatarInfo.cidV0 = result;\n\n    return result;\n  }\n\n  async wrapDemurrageErc20(amount: bigint): Promise<ContractTransactionReceipt> {\n\n    const wrapResult = await this.sdk.v2Hub?.wrap(this.avatarInfo.avatar, amount, 0n /*Demurrage*/);\n\n    throw new Error('Not implemented');\n  }\n\n  async wrapInflationErc20(amount: bigint): Promise<ContractTransactionReceipt> {\n\n    this.sdk.v2Hub?.wrap(this.avatarInfo.avatar, amount, 1n /*Inflation*/);\n\n    throw new Error('Not implemented');\n  }\n\n  /**\n   * Invite a user to Circles.\n   * @param avatar The address of the avatar to invite. Can be either a v1 address or an address that's not signed up yet.\n   */\n  async inviteHuman(avatar: string): Promise<ContractTransactionReceipt> {\n    this.throwIfV2IsNotAvailable();\n\n    const avatarInfo = await this.sdk.data.getAvatarInfo(avatar);\n    if (avatarInfo?.version == 2) {\n      throw new Error('Avatar is already a v2 avatar');\n    }\n\n    const receipt = await this.trust(avatar);\n    if (!receipt) {\n      throw new Error('Invite failed');\n    }\n\n    return receipt;\n  }\n\n  private throwIfV2IsNotAvailable() {\n    if (!this.sdk.circlesConfig.v2HubAddress) {\n      throw new Error('V2 is not available');\n    }\n  }\n\n  private throwIfNameRegistryIsNotAvailable() {\n    if (!this.sdk.nameRegistry) {\n      throw new Error('Name registry is not available');\n    }\n  }\n}","import { V1Avatar } from './v1/v1Avatar';\nimport { ContractTransactionReceipt, parseEther } from 'ethers';\nimport { Sdk } from './sdk';\nimport { AvatarInterface, AvatarInterfaceV2 } from './AvatarInterface';\nimport {\n  AvatarRow,\n  CirclesQuery, Observable,\n  TransactionHistoryRow,\n  TrustRelationRow\n} from '@circles-sdk/data';\nimport { V2Avatar } from './v2/v2Avatar';\nimport { CirclesEvent } from '@circles-sdk/data';\nimport { tcToCrc } from '@circles-sdk/utils';\nimport { Profile } from \"@circles-sdk/profiles\";\n\n/**\n * An Avatar represents a user registered at Circles.\n * It provides methods to interact with the Circles protocol, such as minting, transferring and trusting other avatars.\n */\nexport class Avatar implements AvatarInterfaceV2 {\n\n  public readonly address: string;\n\n  /**\n   * The actual avatar implementation to use behind this facade.\n   * @private\n   */\n  private _avatar: AvatarInterface | undefined;\n  private _avatarInfo: AvatarRow | undefined;\n  private _sdk: Sdk;\n\n  /**\n   * After initialization, this property contains the avatar's basic information.\n   */\n  get avatarInfo(): AvatarRow | undefined {\n    return this._avatarInfo;\n  }\n\n  private _tokenEventSubscription?: () => void = undefined;\n\n  /**\n   * Creates a new Avatar instance that controls a Circles avatar at the given address.\n   * @param sdk The SDK instance to use.\n   * @param avatarAddress The address of the avatar to control.\n   */\n  constructor(sdk: Sdk, avatarAddress: string) {\n    this.address = avatarAddress.toLowerCase();\n    this._sdk = sdk;\n  }\n\n  /**\n   * The events observable for this avatar.\n   */\n  public get events(): Observable<CirclesEvent> {\n    if (!this._events) {\n      throw new Error('Not initialized');\n    }\n    return this._events;\n  }\n\n  private _events: Observable<CirclesEvent> | undefined;\n\n  /**\n   * Initializes the avatar.\n   */\n  initialize = async () => {\n    if (this._tokenEventSubscription) {\n      this._tokenEventSubscription();\n    }\n\n    this._avatarInfo = await this._sdk.data.getAvatarInfo(this.address);\n    if (!this._avatarInfo) {\n      throw new Error('Avatar is not signed up at Circles');\n    }\n\n    const { version, hasV1 } = this._avatarInfo;\n    const v1Person = () => new V1Avatar(this._sdk, this._avatarInfo!);\n    const v2Person = () => new V2Avatar(this._sdk, this._avatarInfo!);\n\n    switch (version) {\n      case 1:\n        this._avatar = v1Person();\n        break;\n\n      case 2:\n        if (!hasV1) {\n          this._avatar = v2Person();\n        } else {\n          const v1Avatar = v1Person();\n          const isStopped = await v1Avatar.v1Token?.stopped();\n          this._avatar = isStopped ? v2Person() : v1Person();\n          const avatarInfo = this._avatar.avatarInfo;\n          if (avatarInfo) {\n            avatarInfo.v1Stopped = isStopped;\n          }\n        }\n        break;\n\n      default:\n        throw new Error('Unsupported avatar');\n    }\n\n    this._events = await this._sdk.data.subscribeToEvents(this._avatarInfo.avatar);\n  };\n\n  private onlyIfInitialized<T>(func: () => T) {\n    if (!this._avatar) {\n      throw new Error('Avatar is not initialized');\n    }\n    return func();\n  }\n\n  private onlyIfV2<T>(func: (avatar: AvatarInterfaceV2) => T) {\n    if (!this._avatar || this._avatarInfo?.version !== 2) {\n      throw new Error('Avatar is not initialized or is not a v2 avatar');\n    }\n    return func(<AvatarInterfaceV2>this._avatar);\n  }\n\n  /**\n   * `human` avatars can mint 24 personal Circles per day. This method returns the amount of Circles that can be minted.\n   *\n   * Note: v2 avatars can mint at max. 14 days * 24 Circles = 336 Circles.\n   *       v1 avatars on the other hand will stop minting after 90 days without minting.\n   * @returns The amount of Circles that can be minted.\n   */\n  getMintableAmount = (): Promise<number> => this.onlyIfInitialized(() => this._avatar!.getMintableAmount());\n  /**\n   * Mints the available personal Circles for the avatar. Check `getMintableAmount()` to see how many Circles can be minted.\n   * @returns The transaction receipt.\n   */\n  personalMint = (): Promise<ContractTransactionReceipt> => this.onlyIfInitialized(() => this._avatar!.personalMint());\n  /**\n   * Stops the avatar's token. This will prevent any future `personalMint()` calls and is not reversible.\n   */\n  stop = (): Promise<ContractTransactionReceipt> => this.onlyIfInitialized(() => this._avatar!.stop());\n  /**\n   * Utilizes the pathfinder to find the maximum Circles amount that can be transferred from this Avatar to the other avatar.\n   * @param to The address to transfer the Circles to.\n   * @param tokenId The token ID to transfer. If not specified, a transitve transfer is calculated.\n   * @returns The maximum Circles amount that can be transferred.\n   */\n  getMaxTransferableAmount = (to: string, tokenId?: string): Promise<bigint> => this.onlyIfInitialized(() => this._avatar!.getMaxTransferableAmount(to, tokenId));\n  /**\n   * Transfers Circles to another avatar.\n   *\n   * Note: The max. transferable amount can be lower than the avatar's balance depending on its trust relations and token holdings.\n   *       Use the `getMaxTransferableAmount()` method to calculate the max. transferable amount if you need to know it beforehand.\n   * @param to The address of the avatar to transfer to.\n   * @param amount The amount to transfer.\n   * @param token The token to transfer. Leave empty to allow transitive transfers.\n   */\n  transfer(to: string, amount: number, token?: string): Promise<ContractTransactionReceipt>;\n  transfer(to: string, amount: bigint, token?: string): Promise<ContractTransactionReceipt>;\n  transfer(to: string, amount: number | bigint, token?: string): Promise<ContractTransactionReceipt> {\n    if (typeof amount === 'number') {\n      const sendValue = this?.avatarInfo?.version === 1\n        ? tcToCrc(new Date(), amount)\n        : parseEther(amount.toString());\n\n      return this.onlyIfInitialized(() => this._avatar!.transfer(to, sendValue, token))\n    }\n    return this.onlyIfInitialized(() => this._avatar!.transfer(to, amount, token))\n  }\n  /**\n   * Trusts another avatar. Trusting an avatar means you're willing to accept Circles that have been issued by this avatar.\n   * @param avatar The address of the avatar to trust.\n   * @returns The transaction receipt.\n   */\n  trust = (avatar: string): Promise<ContractTransactionReceipt> => this.onlyIfInitialized(() => this._avatar!.trust(avatar));\n  /**\n   * Revokes trust from another avatar. This means you will no longer accept Circles issued by this avatar. This will not affect already received Circles.\n   * @param avatar The address of the avatar to untrust.\n   * @returns The transaction receipt.\n   */\n  untrust = (avatar: string): Promise<ContractTransactionReceipt> => this.onlyIfInitialized(() => this._avatar!.untrust(avatar));\n  /**\n   * Gets the trust relations of the avatar.\n   * @returns An array of trust relations in this form: avatar1 - [trusts|trustedBy|mutuallyTrusts] -> avatar2.\n   */\n  getTrustRelations = (): Promise<TrustRelationRow[]> => this.onlyIfInitialized(() => this._avatar!.getTrustRelations());\n  /**\n   * Gets the Circles transaction history of the avatar. The history contains incoming/outgoing transactions and minting of personal Circles and Group Circles.\n   * @param pageSize The maximum number of transactions per page.\n   * @returns A query object that can be used to iterate over the transaction history.\n   */\n  getTransactionHistory = (pageSize: number): Promise<CirclesQuery<TransactionHistoryRow>> => this.onlyIfInitialized(() => this._avatar!.getTransactionHistory(pageSize));\n  /**\n   * Gets the avatar's total Circles balance.\n   *\n   * Note: This queries either the v1 or the v2 balance of an avatar. Check the `avatarInfo` property to see which version your avatar uses.\n   *       Token holdings in v1 can be migrated to v2. Check out `Sdk.migrateAvatar` or `Sdk.migrateAllV1Tokens` for more information.\n   */\n  getTotalBalance = (): Promise<number> => this.onlyIfInitialized(() => this._avatar!.getTotalBalance());\n\n  /**\n   * Gets the avatar's total balance of chain-native tokens.\n   */\n  getGasTokenBalance = (): Promise<bigint> => this.onlyIfInitialized(() => this._avatar!.getGasTokenBalance());\n\n  /**\n   * Use collateral, trusted by the group, to mint new Group Circles.\n   * @param group The group which Circles to mint.\n   * @param collateral The collateral tokens to use for minting.\n   * @param amounts The amounts of the collateral tokens to use.\n   * @param data Additional data for the minting operation.\n   * @returns The transaction receipt.\n   */\n  groupMint = (group: string, collateral: string[], amounts: bigint[], data: Uint8Array): Promise<ContractTransactionReceipt> => this.onlyIfV2((avatar) => avatar.groupMint(group, collateral, amounts, data));\n  /**\n   * Wraps the specified amount of personal Circles into demurraged ERC20 tokens for use outside the Circles protocol.\n   * Note: This kind of token can be incompatible with services since it's demurraged and thus the balance changes over time.\n   * @param amount The amount of Circles to wrap.\n   */\n  wrapDemurrageErc20 = (amount: bigint): Promise<ContractTransactionReceipt> => this.onlyIfV2((avatar) => avatar.wrapDemurrageErc20(amount));\n  /**\n   * Wraps the specified amount of inflation Circles into ERC20 tokens for use outside the Circles protocol.\n   * In contrast to demurraged tokens, these token's balance does not change over time.\n   * @param amount\n   */\n  wrapInflationErc20 = (amount: bigint): Promise<ContractTransactionReceipt> => this.onlyIfV2((avatar) => avatar.wrapInflationErc20(amount));\n  /**\n   * Invite a human avatar to join Circles.\n   * @param avatar The address of any human controlled wallet.\n   */\n  inviteHuman = (avatar: string): Promise<ContractTransactionReceipt> => this.onlyIfV2((_avatar) => _avatar.inviteHuman(avatar));\n  /**\n   * Updates the avatar's metadata (profile).\n   * @param cid The IPFS content identifier of the metadata (Qm....).\n   */\n  updateMetadata = (cid: string): Promise<ContractTransactionReceipt> => this.onlyIfV2((_avatar) => _avatar.updateMetadata(cid));\n\n  /**\n   * Gets the profile that's associated with the avatar or returns `undefined` if no profile is associated.\n   * @returns The profile or `undefined`.\n   */\n  getProfile = (): Promise<Profile | undefined> => this.onlyIfV2((_avatar) => _avatar.getProfile());\n\n  /**\n   * Updates the avatar's profile.\n   * @param profile The new profile.\n   * @returns The IPFS CID of the updated profile.\n   */\n  updateProfile = (profile: Profile): Promise<string> => this.onlyIfV2((_avatar) => _avatar.updateProfile(profile));\n}","export type TransferStep = {\n  from: string;\n  to: string;\n  token_owner: string;\n  value: string;\n};\n\nexport type TransferPath = {\n  requestedAmount: bigint;\n  maxFlow: bigint;\n  transferSteps: TransferStep[];\n  isValid: boolean;\n}\n\nexport class Pathfinder {\n  private readonly pathfinderURL: string;\n\n  constructor(pathfinderURL: string) {\n    this.pathfinderURL = pathfinderURL;\n  }\n\n  async getTransferPath(from: string, to: string, value: bigint): Promise<TransferPath> {\n    const query = {\n      method: 'compute_transfer',\n      params: { from, to, value: value.toString() }\n    };\n\n    const response = await fetch(this.pathfinderURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(query)\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error calling API: ${response.status}`);\n    }\n\n    const parsed = await response.json();\n    if (!parsed.result) {\n      throw new Error(`The pathfinder response didn't carry a result: ${JSON.stringify(parsed)}`);\n    }\n\n    return <TransferPath>{\n      requestedAmount: value,\n      maxFlow: BigInt(parsed.result.maxFlowValue),\n      transferSteps: parsed.result.transferSteps,\n      isValid: parsed.result.final\n    };\n  }\n}\n","import {Avatar} from './avatar';\nimport {CirclesConfig} from './circlesConfig';\nimport {Pathfinder} from './v1/pathfinder';\nimport {AvatarInterface} from './AvatarInterface';\nimport {Hub as HubV1, Hub__factory as HubV1Factory, Token__factory} from '@circles-sdk/abi-v1';\nimport {\n  Hub as HubV2,\n  Hub__factory as HubV2Factory,\n  Migration__factory, NameRegistry, NameRegistry__factory\n} from '@circles-sdk/abi-v2';\nimport {AvatarRow, CirclesData, CirclesRpc} from '@circles-sdk/data';\nimport {V1Avatar} from './v1/v1Avatar';\nimport {cidV0ToUint8Array} from '@circles-sdk/utils';\nimport {GroupProfile, Profile, Profiles} from '@circles-sdk/profiles';\nimport {EthersContractRunner} from '@circles-sdk/adapter-ethers';\nimport {ZeroAddress} from \"ethers\";\n\n/**\n * The SDK interface.\n */\ninterface SdkInterface {\n  /**\n   * The signer used to sign transactions (connected wallet e.g. MetaMask).\n   */\n  contractRunner: EthersContractRunner;\n  /**\n   * The chain specific Circles configuration (contract addresses and rpc endpoints).\n   */\n  circlesConfig: CirclesConfig;\n  /**\n   * A configured instance of the CirclesData class, an easy-to-use wrapper around\n   * the Circles RPC Query API.\n   */\n  data: CirclesData;\n  /**\n   * An instance of the typechain generated Circles V1 Hub contract wrapper.\n   */\n  v1Hub: HubV1;\n  /**\n   * An instance of the typechain generated Circles V2 Hub contract wrapper.\n   */\n  v2Hub?: HubV2;\n  /**\n   * An instance of the v1 Pathfinder client (necessary for transfers; only available on gnosis chain with v1 Circles at the moment).\n   */\n  v1Pathfinder?: Pathfinder;\n  /**\n   * Stores and retrieves profiles from the Circles profile service.\n   */\n  profiles?: Profiles;\n  /**\n   * Gets an Avatar instance by its address. Fails if the avatar is not signed up at Circles.\n   * @param avatarAddress The avatar's address.\n   * @returns The Avatar instance.\n   */\n  getAvatar: (avatarAddress: string) => Promise<Avatar>;\n  /**\n   * Registers the connected wallet as a human avatar in Circles v1.\n   * @returns The Avatar instance.\n   */\n  registerHuman: () => Promise<AvatarInterface>;\n\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2 and creates a profile.\n   * @param profile The profile data of the avatar.\n   * @returns The Avatar instance.\n   */\n  registerHumanV2(profile: Profile): Promise<AvatarInterface>;\n\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2 and using an existing CID as profile.\n   * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n   * @returns The Avatar instance.\n   */\n  registerHumanV2(cidV0: string): Promise<AvatarInterface>;\n\n  /**\n   * Registers the connected wallet as an organization avatar in Circles v1.\n   */\n  registerOrganization: () => Promise<AvatarInterface>;\n  /**\n   * Registers the connected wallet as an organization avatar in Circles v2.\n   * @param profile The profile data of the organization.\n   */\n  registerOrganizationV2: (profile: Profile) => Promise<AvatarInterface>;\n  /**\n   * Registers the connected wallet as a group avatar in Circles v2.\n   * @param mint The address of the minting policy contract to use.\n   * @param profile The profile data of the group.\n   */\n  registerGroupV2: (mint: string, profile: GroupProfile) => Promise<AvatarInterface>;\n  /**\n   * Migrates a v1 avatar and all its Circles holdings to v2.\n   * [[ Currently only works for human avatars. ]]\n   * @param avatar The avatar's address.\n   * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n   */\n  migrateAvatar: (avatar: string, profile: Profile) => Promise<void>;\n}\n\n/**\n * Wraps a contract runner with its address.\n */\n\n\n/**\n * The SDK provides a high-level interface to interact with the Circles protocol.\n */\nexport class Sdk implements SdkInterface {\n  /**\n   * The signer used to sign transactions.\n   */\n  readonly contractRunner: EthersContractRunner;\n  /**\n   * The chain specific Circles configuration.\n   */\n  readonly circlesConfig: CirclesConfig;\n  /**\n   * The Circles RPC client.\n   */\n  readonly circlesRpc: CirclesRpc;\n  /**\n   * The Circles data client.\n   */\n  readonly data: CirclesData;\n  /**\n   * The typechain generated V1 hub contract wrapper.\n   */\n  readonly v1Hub: HubV1;\n  /**\n   * The typechain generated V2 hub contract wrapper.\n   */\n  readonly v2Hub?: HubV2;\n  /**\n   * The typechain generated NameRegistry contract wrapper.\n   */\n  readonly nameRegistry?: NameRegistry;\n  /**\n   * The pathfinder client (v1).\n   */\n  readonly v1Pathfinder?: Pathfinder;\n  /**\n   * The pathfinder client (v2).\n   */\n  readonly v2Pathfinder?: Pathfinder;\n  /**\n   * The profiles service client.\n   */\n  readonly profiles?: Profiles;\n\n  /**\n   * Creates a new SDK instance.\n   * @param circlesConfig The chain specific Circles configuration.\n   * @param contractRunner A contract runner instance and its address.\n   */\n  constructor(circlesConfig: CirclesConfig, contractRunner: EthersContractRunner) {\n    this.circlesConfig = circlesConfig;\n    this.contractRunner = contractRunner;\n    if (!this.contractRunner.address) {\n      throw new Error('Contract runner is not initialized');\n    }\n\n    this.circlesRpc = new CirclesRpc(circlesConfig.circlesRpcUrl);\n    this.data = new CirclesData(this.circlesRpc);\n    this.v1Hub = HubV1Factory.connect(circlesConfig.v1HubAddress ?? '0x29b9a7fBb8995b2423a71cC17cf9810798F6C543', this.contractRunner);\n    if (circlesConfig.v2HubAddress) {\n      this.v2Hub = HubV2Factory.connect(circlesConfig.v2HubAddress, this.contractRunner);\n    }\n    if (circlesConfig.pathfinderUrl) {\n      this.v1Pathfinder = new Pathfinder(circlesConfig.pathfinderUrl);\n    }\n    if (circlesConfig.v2PathfinderUrl) {\n      this.v2Pathfinder = new Pathfinder(circlesConfig.v2PathfinderUrl);\n    }\n    if (circlesConfig.nameRegistryAddress) {\n      this.nameRegistry = NameRegistry__factory.connect(circlesConfig.nameRegistryAddress, this.contractRunner);\n    }\n    if (circlesConfig.profileServiceUrl) {\n      this.profiles = new Profiles(circlesConfig.profileServiceUrl);\n    }\n  }\n\n  /**\n   * Gets an avatar by its address.\n   * @param avatarAddress The avatar's address.\n   * @returns The avatar instance.\n   * @throws If the given avatar address is not signed up at Circles.\n   */\n  getAvatar = async (avatarAddress: string): Promise<Avatar> => {\n    const avatar = new Avatar(this, avatarAddress);\n    await avatar.initialize();\n\n    return avatar;\n  };\n\n  /**\n   * Registers the connected wallet as a human avatar.\n   * @returns The avatar instance.\n   */\n  registerHuman = async (): Promise<AvatarInterface> => {\n    const receipt = await this.v1Hub.signup();\n    await receipt.wait();\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n    return this.getAvatar(this.contractRunner.address!);\n  };\n\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2.\n   * Note: This will only work if you already have a v1 avatar and only during the migration period.\n   *       The only way to join after the migration period is to be invited by an existing member.\n   * @param profile The profile data of the avatar.\n   * @returns The Avatar instance.\n   */\n  registerHumanV2(profile: Profile): Promise<AvatarInterface>;\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2 using an existing CID as profile.\n   * Note: This will only work if you already have a v1 avatar and only during the migration period.\n   *      The only way to join after the migration period is to be invited by an existing member.\n   * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n   * @returns The Avatar instance.\n   */\n  registerHumanV2(cidV0: string): Promise<AvatarInterface>;\n  /**\n   * Registers the connected wallet as a human avatar in Circles v2.\n   * @param profile The profile data of the avatar.\n   */\n  async registerHumanV2(profile: Profile | string): Promise<AvatarInterface> {\n    return this._registerHuman(ZeroAddress, profile);\n  };\n\n  /**\n   * If you have been invited to Circles, you can accept the invitation and join the Circles network.\n   * Specify who invited you and supply the profile you want to use with your new account.\n   * @param inviter The address of the avatar that invited you.\n   * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n   */\n  acceptInvitation(inviter: string, cidV0: string): Promise<AvatarInterface>;\n  /**\n   * If you have been invited to Circles, you can accept the invitation and join the Circles network.\n   * @param inviter The address of the avatar that invited you.\n   * @param profile The profile data of the avatar.\n   */\n  acceptInvitation(inviter: string, profile: Profile): Promise<AvatarInterface>;\n\n  async acceptInvitation(inviter: string, profile: Profile | string): Promise<AvatarInterface> {\n    return this._registerHuman(inviter, profile);\n  }\n\n  private async _registerHuman(inviter: string, profile: Profile | string): Promise<AvatarInterface> {\n    if (!this.v2Hub) {\n      throw new Error('V2 hub not available');\n    }\n\n    let metadataDigest: Uint8Array = await this.createProfileIfNecessary(profile);\n\n    const tx = await this.v2Hub.registerHuman(inviter, metadataDigest);\n    const receipt = await tx.wait();\n    if (!receipt) {\n      throw new Error('Transaction failed');\n    }\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n\n    return this.getAvatar(this.contractRunner.address!);\n  }\n\n  /**\n   * Checks if the profile argument is a string or a Profile object and creates the profile if necessary.\n   * If the profile is a string, it must be a CIDv0 string (Qm...).\n   * @param profile The profile data or CIDv0 of the avatar.\n   * @private\n   */\n  private async createProfileIfNecessary(profile: Profile | string) {\n    if (typeof profile === 'string') {\n      if (!profile.startsWith('Qm')) {\n        throw new Error('Invalid profile CID. Must be a CIDv0 string (Qm...).');\n      }\n      return cidV0ToUint8Array(profile);\n    } else if (this.profiles) {\n      const profileCid = await this.profiles?.create(profile);\n      return cidV0ToUint8Array(profileCid);\n    } else {\n      throw new Error('Profiles service is not configured');\n    }\n  }\n\n  /**\n   * Registers the connected wallet as an organization avatar.\n   * @returns The avatar instance.\n   */\n  registerOrganization = async (): Promise<AvatarInterface> => {\n    const receipt = await this.v1Hub.organizationSignup();\n    await receipt.wait();\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n    return this.getAvatar(this.contractRunner.address!);\n  };\n\n  /**\n   * Registers the connected wallet as an organization avatar in Circles v2.\n   * @param profile The profile data of the organization.\n   */\n  registerOrganizationV2 = async (profile: Profile): Promise<AvatarInterface> => {\n    if (!this.v2Hub) {\n      throw new Error('V2 hub not available');\n    }\n\n    const metadataDigest = await this.createProfileIfNecessary(profile);\n    const receipt = await this.v2Hub.registerOrganization(profile.name, metadataDigest);\n    await receipt.wait();\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n    return this.getAvatar(this.contractRunner.address!);\n  };\n\n  /**\n   * Registers the connected wallet as a group avatar in Circles v2.\n   * @param mint The address of the minting policy contract to use.\n   * @param profile The profile data of the group.\n   */\n  registerGroupV2 = async (mint: string, profile: GroupProfile): Promise<AvatarInterface> => {\n    if (!this.v2Hub) {\n      throw new Error('V2 hub not available');\n    }\n\n    const metadataDigest = await this.createProfileIfNecessary(profile);\n    const receipt = await this.v2Hub.registerGroup(mint, profile.name, profile.symbol, metadataDigest);\n    await receipt.wait();\n\n    await this.waitForAvatarInfo(this.contractRunner.address!);\n    return this.getAvatar(this.contractRunner.address!);\n  };\n\n  private waitForAvatarInfo = async (address: string): Promise<AvatarRow> => {\n    let avatarRow: AvatarRow | undefined;\n    let retries = 0;\n    do {\n      avatarRow = await this.data.getAvatarInfo(address);\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      retries++;\n\n      if (retries > 120) {\n        throw new Error(`Timeout getting avatar info for ${address}`);\n      }\n    } while (!avatarRow);\n\n    return avatarRow;\n  };\n\n  /**\n   * Migrates a v1 avatar and all its Circles holdings to v2.\n   * @param avatar The avatar's address.\n   * @param profile The profile data of the avatar.\n   */\n  migrateAvatar = async (avatar: string, profile: Profile): Promise<void> => {\n    if (!this.v2Hub) {\n      throw new Error('V2 hub not available');\n    }\n    const avatarInfo = await this.data.getAvatarInfo(avatar);\n    if (!avatarInfo) {\n      throw new Error('Avatar not found');\n    }\n\n    if (avatarInfo.hasV1) {\n      // 1. Stop V1 token if necessary\n      if (avatarInfo.v1Token) {\n        const v1Avatar = new V1Avatar(this, avatarInfo);\n        const isStopped = await v1Avatar.v1Token?.stopped();\n\n        if (!isStopped) {\n          await v1Avatar.personalMint();\n          const stopTx = await v1Avatar.v1Token?.stop();\n          const stopTxReceipt = await stopTx?.wait();\n          if (!stopTxReceipt) {\n            throw new Error('Failed to stop V1 avatar');\n          }\n        }\n      }\n\n      // 2. Signup V2 avatar if necessary\n      if (avatarInfo.version === 1) {\n        await this.registerHumanV2(profile);\n      }\n\n      // 3. Make sure the v1 token minting status is known to the v2 hub\n      const calculateIssuanceTx = await this.v2Hub.calculateIssuanceWithCheck(avatar);\n      await calculateIssuanceTx.wait();\n\n      // 4. Migrate V1 tokens\n      await this.migrateAllV1Tokens(avatar);\n    } else {\n      throw new Error('Avatar is not a V1 avatar');\n    }\n  };\n\n  /**\n   * Migrates all V1 tokens of an avatar to V2.\n   * @param avatar The avatar's address.\n   */\n  /**\n   * Migrates all V1 token holdings of an avatar to V2.\n   * @param avatar The avatar whose tokens to migrate.\n   */\n  migrateAllV1Tokens = async (avatar: string): Promise<void> => {\n    if (!this.circlesConfig.migrationAddress) {\n      throw new Error('Migration address not set');\n    }\n    const balances = await this.data.getTokenBalances(avatar, false);\n    const tokensToMigrate = balances\n      .filter(o => BigInt(o.balance) > 0);\n\n    // TODO: Send in one transaction if sent to Safe\n    await Promise.all(tokensToMigrate.map(async (t, i) => {\n      const balance = BigInt(t.balance);\n      const token = Token__factory.connect(t.token, this.contractRunner);\n      const allowance = await token.allowance(avatar, this.circlesConfig.migrationAddress!);\n      if (allowance < balance) {\n        const increase = balance - allowance;\n        const tx = await token.increaseAllowance(this.circlesConfig.migrationAddress!, increase);\n        await tx.wait();\n      }\n    }));\n\n    const migrationContract = Migration__factory.connect(this.circlesConfig.migrationAddress, this.contractRunner);\n    const migrateTx = await migrationContract.migrate(\n      tokensToMigrate.map(o => o.tokenOwner)\n      , tokensToMigrate.map(o => BigInt(o.balance)));\n\n    await migrateTx.wait();\n  };\n}","import {ethers} from 'ethers';\n\nexport const errorAbis = [\n    'error CirclesHubOnlyDuringBootstrap(uint8 code)',\n    'error CirclesHubRegisterAvatarV1MustBeStopped(address avatar, uint8 code)',\n    'error CirclesHubAvatarAlreadyRegistered(address avatar, uint8 code)',\n    'error CirclesHubMustBeHuman(address avatar, uint8 code)',\n    'error CirclesHubGroupIsNotRegistered(address group, uint8 code)',\n    'error CirclesHubInvalidTrustReceiver(address trustReceiver, uint8 code)',\n    'error CirclesHubGroupMintPolicyRejectedMint(address minter, address group, uint256[] collateral, uint256[] amounts, bytes data, uint8 code)',\n    'error CirclesHubGroupMintPolicyRejectedBurn(address burner, address group, uint256 amount, bytes data, uint8 code)',\n    'error CirclesHubOperatorNotApprovedForSource(address operator, address source, uint16 streamId, uint8 code)',\n    'error CirclesHubFlowEdgeIsNotPermitted(address receiver, uint256 circlesId, uint8 code)',\n    'error CirclesHubOnClosedPathOnlyPersonalCirclesCanReturnToAvatar(address failedReceiver, uint256 circlesId)',\n    'error CirclesHubFlowVerticesMustBeSorted()',\n    'error CirclesHubFlowEdgeStreamMismatch(uint16 flowEdgeId, uint16 streamId, uint8 code)',\n    'error CirclesHubStreamMismatch(uint16 streamId, uint8 code)',\n    'error CirclesHubNettedFlowMismatch(uint16 vertexPosition, int256 matrixNettedFlow, int256 streamNettedFlow)',\n    'error CirclesERC1155MintBlocked(address human, address mintV1Status)',\n    'error CirclesDemurrageAmountExceedsMaxUint190(address account, uint256 circlesId, uint256 amount, uint8 code)',\n    'error CirclesDemurrageDayBeforeLastUpdatedDay(address account, uint256 circlesId, uint64 day, uint64 lastUpdatedDay, uint8 code)',\n    'error CirclesERC1155CannotReceiveBatch(uint8 code)',\n    'error CirclesAvatarMustBeRegistered(address avatar, uint8 code)',\n    'error CirclesAddressCannotBeZero(uint8 code)',\n    'error CirclesInvalidFunctionCaller(address caller, address expectedCaller, uint8 code)',\n    'error CirclesInvalidCirclesId(uint256 id, uint8 code)',\n    'error CirclesInvalidString(string str, uint8 code)',\n    'error CirclesInvalidParameter(uint256 parameter, uint8 code)',\n    'error CirclesAmountOverflow(uint256 amount, uint8 code)',\n    'error CirclesArraysLengthMismatch(uint256 lengthArray1, uint256 lengthArray2, uint8 code)',\n    'error CirclesArrayMustNotBeEmpty(uint8 code)',\n    'error CirclesAmountMustNotBeZero(uint8 code)',\n    'error CirclesProxyAlreadyInitialized()',\n    'error CirclesLogicAssertion(uint8 code)',\n    'error CirclesIdMustBeDerivedFromAddress(uint256 providedId, uint8 code)',\n    'error CirclesReentrancyGuard(uint8 code)',\n    'error CirclesStandardTreasuryGroupHasNoVault(address group)',\n    'error CirclesStandardTreasuryRedemptionCollateralMismatch(uint256 circlesId, uint256[] redemptionIds, uint256[] redemptionValues, uint256[] burnIds, uint256[] burnValues)',\n    'error CirclesStandardTreasuryInvalidMetadataType(bytes32 metadataType, uint8 code)',\n    'error CirclesStandardTreasuryInvalidMetadata(bytes metadata, uint8 code)',\n    'error CirclesNamesInvalidName(address avatar, string name, uint8 code)',\n    'error CirclesNamesShortNameAlreadyAssigned(address avatar, uint72 shortName, uint8 code)',\n    'error CirclesNamesShortNameWithNonceTaken(address avatar, uint256 nonce, uint72 shortName, address takenByAvatar)',\n    'error CirclesNamesAvatarAlreadyHasCustomNameOrSymbol(address avatar, string nameOrSymbol, uint8 code)',\n    'error CirclesNamesOrganizationHasNoSymbol(address organization, uint8 code)'\n];\n\nconst iface = new ethers.Interface(errorAbis);\n\nexport function parseError(errorData: string): ethers.ErrorDescription | null {\n    return iface.parseError(errorData);\n}"],"names":["Pathfinder","HubV1Factory","HubV2Factory"],"mappings":"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"}