import { ContractTransactionReceipt } from "ethers";
export interface TransferPathStep {
    readonly from: string;
    readonly to: string;
    readonly tokenOwner: string;
    readonly value: string;
}
type FlowEdge = {
    streamSinkId: number;
    amount: bigint;
};
type Stream = {
    sourceCoordinate: bigint;
    flowEdgeIds: number[];
    data: Uint8Array;
};
type FlowMatrix = {
    flowVertices: string[];
    flowEdges: FlowEdge[];
    streams: Stream[];
    packedCoordinates: Uint8Array;
    sourceCoordinate: number;
};
export declare class Pathfinder {
    pathfinderURL: string;
    constructor(pathfinderURL: string);
    getArgsForPath(from: string, to: string, value: string): Promise<FlowMatrix>;
}
export declare class TransferService {
    private sdk;
    private address;
    constructor(sdk: any, address: string);
    private transitiveTransfer;
    private directTransfer;
    transfer(to: string, amount: bigint, tokenAddress?: string, pathfinder?: Pathfinder): Promise<ContractTransactionReceipt>;
    private throwIfV2IsNotAvailable;
}
export {};
//# sourceMappingURL=pathfinder.d.ts.map