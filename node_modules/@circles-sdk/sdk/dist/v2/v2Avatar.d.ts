import { AvatarInterfaceV2 } from '../AvatarInterface';
import { ContractTransactionReceipt } from 'ethers';
import { Sdk } from '../sdk';
import { AvatarRow, CirclesQuery, TransactionHistoryRow, TrustRelationRow } from '@circles-sdk/data';
import { Profile } from "@circles-sdk/profiles";
export type FlowEdge = {
    streamSinkId: bigint;
    amount: bigint;
};
export type Stream = {
    sourceCoordinate: bigint;
    flowEdgeIds: bigint[];
    data: Uint8Array;
};
export declare class V2Avatar implements AvatarInterfaceV2 {
    readonly sdk: Sdk;
    get address(): string;
    readonly avatarInfo: AvatarRow;
    private _cachedProfile;
    private _cachedProfileCid;
    constructor(sdk: Sdk, avatarInfo: AvatarRow);
    updateMetadata(cid: string): Promise<ContractTransactionReceipt>;
    getMaxTransferableAmount(to: string, tokenId?: string): Promise<bigint>;
    getMintableAmount(): Promise<number>;
    getTotalBalance(): Promise<number>;
    getGasTokenBalance(): Promise<bigint>;
    getTransactionHistory(pageSize: number): Promise<CirclesQuery<TransactionHistoryRow>>;
    getTrustRelations(): Promise<TrustRelationRow[]>;
    personalMint(): Promise<ContractTransactionReceipt>;
    stop(): Promise<ContractTransactionReceipt>;
    private transitiveTransfer;
    private directTransfer;
    transfer(to: string, amount: bigint, tokenAddress?: string): Promise<ContractTransactionReceipt>;
    trust(avatar: string): Promise<ContractTransactionReceipt>;
    untrust(avatar: string): Promise<ContractTransactionReceipt>;
    groupMint(group: string, collateral: string[], amounts: bigint[], data: Uint8Array): Promise<ContractTransactionReceipt>;
    getProfile(): Promise<Profile | undefined>;
    updateProfile(profile: Profile): Promise<string>;
    wrapDemurrageErc20(amount: bigint): Promise<ContractTransactionReceipt>;
    wrapInflationErc20(amount: bigint): Promise<ContractTransactionReceipt>;
    /**
     * Invite a user to Circles.
     * @param avatar The address of the avatar to invite. Can be either a v1 address or an address that's not signed up yet.
     */
    inviteHuman(avatar: string): Promise<ContractTransactionReceipt>;
    private throwIfV2IsNotAvailable;
    private throwIfNameRegistryIsNotAvailable;
}
//# sourceMappingURL=v2Avatar.d.ts.map