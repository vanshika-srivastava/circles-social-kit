import { Avatar } from './avatar';
import { CirclesConfig } from './circlesConfig';
import { Pathfinder } from './v1/pathfinder';
import { AvatarInterface } from './AvatarInterface';
import { Hub as HubV1 } from '@circles-sdk/abi-v1';
import { Hub as HubV2, NameRegistry } from '@circles-sdk/abi-v2';
import { CirclesData, CirclesRpc } from '@circles-sdk/data';
import { GroupProfile, Profile, Profiles } from '@circles-sdk/profiles';
import { EthersContractRunner } from '@circles-sdk/adapter-ethers';
/**
 * The SDK interface.
 */
interface SdkInterface {
    /**
     * The signer used to sign transactions (connected wallet e.g. MetaMask).
     */
    contractRunner: EthersContractRunner;
    /**
     * The chain specific Circles configuration (contract addresses and rpc endpoints).
     */
    circlesConfig: CirclesConfig;
    /**
     * A configured instance of the CirclesData class, an easy-to-use wrapper around
     * the Circles RPC Query API.
     */
    data: CirclesData;
    /**
     * An instance of the typechain generated Circles V1 Hub contract wrapper.
     */
    v1Hub: HubV1;
    /**
     * An instance of the typechain generated Circles V2 Hub contract wrapper.
     */
    v2Hub?: HubV2;
    /**
     * An instance of the v1 Pathfinder client (necessary for transfers; only available on gnosis chain with v1 Circles at the moment).
     */
    v1Pathfinder?: Pathfinder;
    /**
     * Stores and retrieves profiles from the Circles profile service.
     */
    profiles?: Profiles;
    /**
     * Gets an Avatar instance by its address. Fails if the avatar is not signed up at Circles.
     * @param avatarAddress The avatar's address.
     * @returns The Avatar instance.
     */
    getAvatar: (avatarAddress: string) => Promise<Avatar>;
    /**
     * Registers the connected wallet as a human avatar in Circles v1.
     * @returns The Avatar instance.
     */
    registerHuman: () => Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as a human avatar in Circles v2 and creates a profile.
     * @param profile The profile data of the avatar.
     * @returns The Avatar instance.
     */
    registerHumanV2(profile: Profile): Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as a human avatar in Circles v2 and using an existing CID as profile.
     * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.
     * @returns The Avatar instance.
     */
    registerHumanV2(cidV0: string): Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as an organization avatar in Circles v1.
     */
    registerOrganization: () => Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as an organization avatar in Circles v2.
     * @param profile The profile data of the organization.
     */
    registerOrganizationV2: (profile: Profile) => Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as a group avatar in Circles v2.
     * @param mint The address of the minting policy contract to use.
     * @param profile The profile data of the group.
     */
    registerGroupV2: (mint: string, profile: GroupProfile) => Promise<AvatarInterface>;
    /**
     * Migrates a v1 avatar and all its Circles holdings to v2.
     * [[ Currently only works for human avatars. ]]
     * @param avatar The avatar's address.
     * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.
     */
    migrateAvatar: (avatar: string, profile: Profile) => Promise<void>;
}
/**
 * Wraps a contract runner with its address.
 */
/**
 * The SDK provides a high-level interface to interact with the Circles protocol.
 */
export declare class Sdk implements SdkInterface {
    /**
     * The signer used to sign transactions.
     */
    readonly contractRunner: EthersContractRunner;
    /**
     * The chain specific Circles configuration.
     */
    readonly circlesConfig: CirclesConfig;
    /**
     * The Circles RPC client.
     */
    readonly circlesRpc: CirclesRpc;
    /**
     * The Circles data client.
     */
    readonly data: CirclesData;
    /**
     * The typechain generated V1 hub contract wrapper.
     */
    readonly v1Hub: HubV1;
    /**
     * The typechain generated V2 hub contract wrapper.
     */
    readonly v2Hub?: HubV2;
    /**
     * The typechain generated NameRegistry contract wrapper.
     */
    readonly nameRegistry?: NameRegistry;
    /**
     * The pathfinder client (v1).
     */
    readonly v1Pathfinder?: Pathfinder;
    /**
     * The pathfinder client (v2).
     */
    readonly v2Pathfinder?: Pathfinder;
    /**
     * The profiles service client.
     */
    readonly profiles?: Profiles;
    /**
     * Creates a new SDK instance.
     * @param circlesConfig The chain specific Circles configuration.
     * @param contractRunner A contract runner instance and its address.
     */
    constructor(circlesConfig: CirclesConfig, contractRunner: EthersContractRunner);
    /**
     * Gets an avatar by its address.
     * @param avatarAddress The avatar's address.
     * @returns The avatar instance.
     * @throws If the given avatar address is not signed up at Circles.
     */
    getAvatar: (avatarAddress: string) => Promise<Avatar>;
    /**
     * Registers the connected wallet as a human avatar.
     * @returns The avatar instance.
     */
    registerHuman: () => Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as a human avatar in Circles v2.
     * Note: This will only work if you already have a v1 avatar and only during the migration period.
     *       The only way to join after the migration period is to be invited by an existing member.
     * @param profile The profile data of the avatar.
     * @returns The Avatar instance.
     */
    registerHumanV2(profile: Profile): Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as a human avatar in Circles v2 using an existing CID as profile.
     * Note: This will only work if you already have a v1 avatar and only during the migration period.
     *      The only way to join after the migration period is to be invited by an existing member.
     * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.
     * @returns The Avatar instance.
     */
    registerHumanV2(cidV0: string): Promise<AvatarInterface>;
    /**
     * If you have been invited to Circles, you can accept the invitation and join the Circles network.
     * Specify who invited you and supply the profile you want to use with your new account.
     * @param inviter The address of the avatar that invited you.
     * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.
     */
    acceptInvitation(inviter: string, cidV0: string): Promise<AvatarInterface>;
    /**
     * If you have been invited to Circles, you can accept the invitation and join the Circles network.
     * @param inviter The address of the avatar that invited you.
     * @param profile The profile data of the avatar.
     */
    acceptInvitation(inviter: string, profile: Profile): Promise<AvatarInterface>;
    private _registerHuman;
    /**
     * Checks if the profile argument is a string or a Profile object and creates the profile if necessary.
     * If the profile is a string, it must be a CIDv0 string (Qm...).
     * @param profile The profile data or CIDv0 of the avatar.
     * @private
     */
    private createProfileIfNecessary;
    /**
     * Registers the connected wallet as an organization avatar.
     * @returns The avatar instance.
     */
    registerOrganization: () => Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as an organization avatar in Circles v2.
     * @param profile The profile data of the organization.
     */
    registerOrganizationV2: (profile: Profile) => Promise<AvatarInterface>;
    /**
     * Registers the connected wallet as a group avatar in Circles v2.
     * @param mint The address of the minting policy contract to use.
     * @param profile The profile data of the group.
     */
    registerGroupV2: (mint: string, profile: GroupProfile) => Promise<AvatarInterface>;
    private waitForAvatarInfo;
    /**
     * Migrates a v1 avatar and all its Circles holdings to v2.
     * @param avatar The avatar's address.
     * @param profile The profile data of the avatar.
     */
    migrateAvatar: (avatar: string, profile: Profile) => Promise<void>;
    /**
     * Migrates all V1 tokens of an avatar to V2.
     * @param avatar The avatar's address.
     */
    /**
     * Migrates all V1 token holdings of an avatar to V2.
     * @param avatar The avatar whose tokens to migrate.
     */
    migrateAllV1Tokens: (avatar: string) => Promise<void>;
}
export {};
//# sourceMappingURL=sdk.d.ts.map