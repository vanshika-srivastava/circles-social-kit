{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  AddressLike,\n  BigNumberish,\n  BrowserProvider,\n  ContractRunner,\n  Provider,\n  TransactionRequest,\n  TransactionResponse, Wallet\n} from 'ethers';\nimport {SdkContractRunner} from '@circles-sdk/adapter';\n\nexport abstract class EthersContractRunner implements ContractRunner {\n  abstract address?: string;\n  abstract provider: Provider | null;\n  abstract estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined;\n  abstract call?: ((tx: TransactionRequest) => Promise<string>) | undefined;\n  abstract resolveName?: ((name: string) => Promise<string | null>) | undefined;\n  abstract sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined;\n\n  abstract init(): Promise<void>;\n}\n\nexport class PrivateKeyContractRunner implements EthersContractRunner {\n  constructor(public provider: Provider, private privateKey: string) {\n  }\n\n  private _wallet?: Wallet;\n\n  async init(): Promise<void> {\n    this._wallet = new Wallet(this.privateKey, this.provider);\n    this.address = await this._wallet.getAddress();\n  }\n\n  private ensureWallet(): Wallet {\n    if (!this._wallet) {\n      throw new Error('Not initialized');\n    }\n    return this._wallet;\n  }\n\n  address?: string;\n  estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined = async (tx) => {\n    return this.ensureWallet().estimateGas(tx);\n  };\n  call?: ((tx: TransactionRequest) => Promise<string>) | undefined = async (tx) => {\n    return this.ensureWallet().call(tx);\n  };\n  resolveName?: ((name: string) => Promise<string | null>) | undefined = async (name) => {\n    return this.ensureWallet().resolveName(name);\n  };\n  sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined = async (tx) => {\n    return this.ensureWallet().sendTransaction(tx);\n  };\n}\n\nexport class BrowserProviderContractRunner implements EthersContractRunner {\n  constructor() {\n    const w: any = window;\n    const ethereumObject = w.ethereum;\n    if (!ethereumObject) {\n      throw new Error('No provider found on window.ethereum');\n    }\n    this.provider = new BrowserProvider(ethereumObject);\n  }\n\n  async init(): Promise<void> {\n    this.address = await (<BrowserProvider>this.provider).getSigner().then(signer => signer.getAddress());\n  }\n\n  address?: string;\n  provider: Provider;\n  estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined = async (tx) => this.provider.estimateGas(tx);\n  call?: ((tx: TransactionRequest) => Promise<string>) | undefined = async (tx) => this.provider.call(tx);\n  resolveName?: ((name: string) => Promise<string | null>) | undefined = async (name) => this.provider.resolveName(name);\n  sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined = async (tx) => {\n    const signer = await (<BrowserProvider>this.provider).getSigner();\n    return signer.sendTransaction(tx);\n  };\n}\n\n/**\n * Takes an ethers6 provider and a sdk contract runner and creates a contract runner that can be used with ethers6\n * and thus with the typechahain generated ethers6 contract wrappers.\n */\nexport class SdkContractRunnerWrapper implements EthersContractRunner {\n  /**\n   * Creates a new EthersContractRunner. The provider is used to fetch the transaction details and the sdkContractRunner is used to execute the transactions.\n   * @param provider The ethers6 provider\n   * @param address The address of the account that signs transactions\n   * @param sdkContractRunner The sdk contract runner\n   */\n  constructor(public provider: Provider, public address: string, private sdkContractRunner: SdkContractRunner) {\n  }\n\n  async init(): Promise<void> {\n  }\n\n  private async addressLikeToString(addressLike: AddressLike) {\n    if (typeof addressLike === 'string') {\n      return addressLike;\n    }\n    if (addressLike instanceof Promise) {\n      return addressLike;\n    }\n    return addressLike.getAddress();\n  }\n\n  private bignumberishToBigInt(value?: BigNumberish | null) {\n    if (!value) {\n      return BigInt(0);\n    }\n    if (typeof value === 'bigint') {\n      return value;\n    }\n    return BigInt(value);\n  }\n\n  estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined = async (tx) => {\n    if (!this.sdkContractRunner.estimateGas) {\n      throw new Error('estimateGas not supported');\n    }\n\n    if (!tx.to) {\n      throw new Error('to is required');\n    }\n    if (!tx.data && !tx.value) {\n      throw new Error('data or value is required');\n    }\n\n    return this.sdkContractRunner.estimateGas({\n      to: await this.addressLikeToString(tx.to),\n      data: tx.data ?? '0x',\n      value: this.bignumberishToBigInt(tx.value)\n    });\n  };\n\n  call?: ((tx: TransactionRequest) => Promise<string>) | undefined = async (tx) => {\n    if (!this.sdkContractRunner.call) {\n      throw new Error('call not supported');\n    }\n\n    if (!tx.to) {\n      throw new Error('to is required');\n    }\n    if (!tx.data && !tx.value) {\n      throw new Error('data or value is required');\n    }\n\n    return this.sdkContractRunner.call({\n      to: await this.addressLikeToString(tx.to),\n      data: tx.data ?? '0x',\n      value: this.bignumberishToBigInt(tx.value)\n    });\n  };\n  resolveName?: ((name: string) => Promise<string | null>) | undefined;\n  sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined = async (tx) => {\n    if (!this.sdkContractRunner.sendTransaction) {\n      throw new Error('sendTransaction not supported');\n    }\n\n    if (!tx.to) {\n      throw new Error('to is required');\n    }\n    if (!tx.data && !tx.value) {\n      throw new Error('data or value is required');\n    }\n\n    const response = await this.sdkContractRunner.sendTransaction({\n      to: await this.addressLikeToString(tx.to),\n      data: tx.data ?? '0x',\n      value: this.bignumberishToBigInt(tx.value)\n    });\n\n    const transactionResponse = await this.provider.getTransaction(response.hash);\n    if (!transactionResponse) {\n      throw new Error('Transaction not found');\n    }\n\n    return transactionResponse;\n  };\n}"],"names":[],"mappings":"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"}