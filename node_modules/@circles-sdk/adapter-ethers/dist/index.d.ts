import { ContractRunner, Provider, TransactionRequest, TransactionResponse } from 'ethers';
import { SdkContractRunner } from '@circles-sdk/adapter';
export declare abstract class EthersContractRunner implements ContractRunner {
    abstract address?: string;
    abstract provider: Provider | null;
    abstract estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined;
    abstract call?: ((tx: TransactionRequest) => Promise<string>) | undefined;
    abstract resolveName?: ((name: string) => Promise<string | null>) | undefined;
    abstract sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined;
    abstract init(): Promise<void>;
}
export declare class PrivateKeyContractRunner implements EthersContractRunner {
    provider: Provider;
    private privateKey;
    constructor(provider: Provider, privateKey: string);
    private _wallet?;
    init(): Promise<void>;
    private ensureWallet;
    address?: string;
    estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined;
    call?: ((tx: TransactionRequest) => Promise<string>) | undefined;
    resolveName?: ((name: string) => Promise<string | null>) | undefined;
    sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined;
}
export declare class BrowserProviderContractRunner implements EthersContractRunner {
    constructor();
    init(): Promise<void>;
    address?: string;
    provider: Provider;
    estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined;
    call?: ((tx: TransactionRequest) => Promise<string>) | undefined;
    resolveName?: ((name: string) => Promise<string | null>) | undefined;
    sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined;
}
/**
 * Takes an ethers6 provider and a sdk contract runner and creates a contract runner that can be used with ethers6
 * and thus with the typechahain generated ethers6 contract wrappers.
 */
export declare class SdkContractRunnerWrapper implements EthersContractRunner {
    provider: Provider;
    address: string;
    private sdkContractRunner;
    /**
     * Creates a new EthersContractRunner. The provider is used to fetch the transaction details and the sdkContractRunner is used to execute the transactions.
     * @param provider The ethers6 provider
     * @param address The address of the account that signs transactions
     * @param sdkContractRunner The sdk contract runner
     */
    constructor(provider: Provider, address: string, sdkContractRunner: SdkContractRunner);
    init(): Promise<void>;
    private addressLikeToString;
    private bignumberishToBigInt;
    estimateGas?: ((tx: TransactionRequest) => Promise<bigint>) | undefined;
    call?: ((tx: TransactionRequest) => Promise<string>) | undefined;
    resolveName?: ((name: string) => Promise<string | null>) | undefined;
    sendTransaction?: ((tx: TransactionRequest) => Promise<TransactionResponse>) | undefined;
}
//# sourceMappingURL=index.d.ts.map