{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["export interface Profile {\n    name: string;\n    description?: string;\n    previewImageUrl?: string;\n    imageUrl?: string;\n}\n\nexport interface GroupProfile extends Profile {\n    symbol: string;\n}\n\nexport class Profiles {\n    constructor(private readonly profileServiceUrl: string) {\n    }\n\n    private getProfileServiceUrl(): string {\n        return this.profileServiceUrl.endsWith('/') ? this.profileServiceUrl : `${this.profileServiceUrl}/`;\n    }\n\n    async create(profile: Profile): Promise<string> {\n        const response = await fetch(`${this.getProfileServiceUrl()}pin`, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(profile)\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to create profile. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);\n        }\n\n        const data = await response.json();\n        return data.cid;\n    }\n\n    /**\n     * Retrieves a profile by its CID. If the profile is not found, an error is thrown.\n     * @param cid The CID of the profile to retrieve.\n     */\n    async get(cid: string): Promise<Profile|undefined> {\n        const response = await fetch(`${this.getProfileServiceUrl()}get?cid=${cid}`);\n        if (!response.ok) {\n          console.warn(`Failed to retrieve profile ${cid}. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);\n          return undefined;\n        }\n\n        return await response.json();\n    }\n\n    /**\n     * Retrieves multiple profiles by their CIDs. If a profile is not found, it will not be included in the result.\n     * @param cids The CIDs of the profiles to retrieve.\n     * @returns A map of CIDs to profiles. If a profile is not found, it will not be included in the map.\n     */\n    async getMany(cids: string[]): Promise<Record<string, Profile>> {\n        const response = await fetch(`${this.getProfileServiceUrl()}getBatch?cids=${cids.join(',')}`);\n        if (!response.ok) {\n            throw new Error(`Failed to retrieve profiles ${cids.join(',')}. Status: ${response.status} ${response.statusText}. Body: ${await response.text()}`);\n        }\n\n        const profilesArray = await response.json();\n        const profiles: Record<string, Profile> = {};\n\n        for (let i = 0; i < cids.length; i++) {\n            if (profilesArray[i]) {\n                profiles[cids[i]] = profilesArray[i];\n            }\n        }\n\n        return profiles;\n    }\n}"],"names":[],"mappings":"MAWa,QAAQ,CAAA;AACjB,IAAA,WAAA,CAA6B,iBAAyB,EAAA;QAAzB,IAAiB,CAAA,iBAAA,GAAjB,iBAAiB,CAAQ;KACrD;IAEO,oBAAoB,GAAA;QACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,iBAAiB,GAAG,GAAG,IAAI,CAAC,iBAAiB,CAAA,CAAA,CAAG,CAAC;KACvG;IAED,MAAM,MAAM,CAAC,OAAgB,EAAA;QACzB,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,CAAG,EAAA,IAAI,CAAC,oBAAoB,EAAE,CAAA,GAAA,CAAK,EAAE;AAC9D,YAAA,MAAM,EAAE,MAAM;AACd,YAAA,OAAO,EAAE,EAAC,cAAc,EAAE,kBAAkB,EAAC;AAC7C,YAAA,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;AAChC,SAAA,CAAC,CAAC;AAEH,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;AACd,YAAA,MAAM,IAAI,KAAK,CAAC,qCAAqC,QAAQ,CAAC,MAAM,CAAI,CAAA,EAAA,QAAQ,CAAC,UAAU,CAAA,QAAA,EAAW,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA,CAAE,CAAC,CAAC;SAClI;AAED,QAAA,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC,GAAG,CAAC;KACnB;AAED;;;AAGG;IACH,MAAM,GAAG,CAAC,GAAW,EAAA;AACjB,QAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,CAAG,EAAA,IAAI,CAAC,oBAAoB,EAAE,CAAA,QAAA,EAAW,GAAG,CAAA,CAAE,CAAC,CAAC;AAC7E,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,CAAA,2BAAA,EAA8B,GAAG,CAAa,UAAA,EAAA,QAAQ,CAAC,MAAM,CAAA,CAAA,EAAI,QAAQ,CAAC,UAAU,WAAW,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAE,CAAA,CAAC,CAAC;AACrI,YAAA,OAAO,SAAS,CAAC;SAClB;AAED,QAAA,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;KAChC;AAED;;;;AAIG;IACH,MAAM,OAAO,CAAC,IAAc,EAAA;AACxB,QAAA,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,CAAA,EAAG,IAAI,CAAC,oBAAoB,EAAE,CAAiB,cAAA,EAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,CAAE,CAAC,CAAC;AAC9F,QAAA,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,CAA+B,4BAAA,EAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA,UAAA,EAAa,QAAQ,CAAC,MAAM,CAAI,CAAA,EAAA,QAAQ,CAAC,UAAU,CAAW,QAAA,EAAA,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAE,CAAA,CAAC,CAAC;SACvJ;AAED,QAAA,MAAM,aAAa,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QAC5C,MAAM,QAAQ,GAA4B,EAAE,CAAC;AAE7C,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClC,YAAA,IAAI,aAAa,CAAC,CAAC,CAAC,EAAE;gBAClB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;aACxC;SACJ;AAED,QAAA,OAAO,QAAQ,CAAC;KACnB;AACJ;;;;"}